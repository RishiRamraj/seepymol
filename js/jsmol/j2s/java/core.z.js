//BH 9/10/2012 6:27:21 AM added java.net.URL... classes
// BH 10/13/2012 11:38:07 PM corrected Integer.parseInt to allow only +-0123456789; created Integer.parseIntRadix
// BH 11/1/2012 added Short
// BH 11/6/2012 8:26:33 PM added instanceof Int32Array in String.instantialize

(function() {

    Jmol.haveJSCore = true;


    java.lang.Number=Number;
    if(Clazz.supportsNativeObject){
	for(var i=0;i<Clazz.extendedObjectMethods.length;i++){
	    var p=Clazz.extendedObjectMethods[i];
	    Number.prototype[p]=JavaObject.prototype[p];
	}
    }

    Number.__CLASS_NAME__="Number";
    Clazz.implementOf(Number,java.io.Serializable);
    Number.equals=Clazz.innerFunctions.equals;
    Number.getName=Clazz.innerFunctions.getName;

    Number.serialVersionUID=Number.prototype.serialVersionUID=-8742448824652078965;

    Clazz.defineMethod(Number,"shortValue",
		       function(){
			   return Math.round(this)&0xffff;
		       });

    Clazz.defineMethod(Number,"byteValue",
		       function(){
			   return Math.round(this)&0xff;
		       });

    Clazz.defineMethod(Number,"intValue",
		       function(){
			   return Math.round(this)&0xffffffff;
		       });

    Clazz.defineMethod(Number,"longValue",
		       function(){
			   return Math.round(this);
		       });

    Clazz.defineMethod(Number,"floatValue",
		       function(){
			   return this.valueOf();
		       });
    Clazz.defineMethod(Number,"doubleValue",
		       function(){
			   return this.valueOf();
		       });

    Clazz.defineMethod(Number,"hashCode",
		       function(){
			   return this.valueOf();
		       });

    java.lang.Integer=Integer=function(){
	Clazz.instantialize(this,arguments);
    };
    Clazz.decorateAsType(Integer,"Integer",Number,Comparable,null,true);
    Integer.prototype.valueOf=function(){return 0;};
    Integer.toString=Integer.prototype.toString=function(){
	if(arguments.length!=0){
	    return""+arguments[0];
	}else if(this===Integer){
	    return"class java.lang.Integer";
	}
	return""+this.valueOf();
    };

    /*

      Clazz.makeConstructor(Integer,
      function(){
      this.valueOf=function(){
      return 0;
      };
      });
    */


    Clazz.makeConstructor(Integer,
			  function(value){
			      var v=Math.round(value)&0xffffffff;
			      this.valueOf=function(){
				  return v;
			      };
			  },"Number");
    /*
      Clazz.makeConstructor(Integer,
      function(s){
      var value=Integer.parseInt(s,10);
      this.valueOf=function(){
      return value;
      };
      },"String");
    */
    Integer.serialVersionUID=Integer.prototype.serialVersionUID=1360826667806852920;
    Integer.MIN_VALUE=Integer.prototype.MIN_VALUE=-0x80000000;
    Integer.MAX_VALUE=Integer.prototype.MAX_VALUE=0x7fffffff;
    Integer.TYPE=Integer.prototype.TYPE=Integer;


    Clazz.defineMethod(Integer,"bitCount",
		       function(i) {
			   i = i - ((i >>> 1) & 0x55555555);
			   i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
			   i = (i + (i >>> 4)) & 0x0f0f0f0f;
			   i = i + (i >>> 8);
			   i = i + (i >>> 16);
			   return i & 0x3f;
		       },"Number");
    Integer.bitCount=Integer.prototype.bitCount;

    Clazz.defineMethod(Integer,"numberOfLeadingZeros",
		       function(i) {
			   if (i == 0) return 32;
			   var n = 1;
			   if (i >>> 16 == 0) { n += 16; i <<= 16; }
			   if (i >>> 24 == 0) { n +=  8; i <<=  8; }
			   if (i >>> 28 == 0) { n +=  4; i <<=  4; }
			   if (i >>> 30 == 0) { n +=  2; i <<=  2; }
			   n -= i >>> 31;
			   return n;
		       },"Number");
    Integer.numberOfLeadingZeros=Integer.prototype.numberOfLeadingZeros;

    Clazz.defineMethod(Integer,"numberOfTrailingZeros",
		       function(i) {
			   if (i == 0) return 32;
			   var n = 31;
			   var y = i <<16; if (y != 0) { n = n -16; i = y; }
			   y = i << 8; if (y != 0) { n = n - 8; i = y; }
			   y = i << 4; if (y != 0) { n = n - 4; i = y; }
			   y = i << 2; if (y != 0) { n = n - 2; i = y; }
			   return n - ((i << 1) >>> 31);
		       },"Number");
    Integer.numberOfTrailingZeros=Integer.prototype.numberOfTrailingZeros;

    Clazz.defineMethod(Integer,"parseIntRadix",
		       function(s,radix){
			   if(s==null){
			       throw new NumberFormatException("null");
			   }if(radix<2){
			       throw new NumberFormatException("radix "+radix+" less than Character.MIN_RADIX");
			   }if(radix>36){
			       throw new NumberFormatException("radix "+radix+" greater than Character.MAX_RADIX");
			   }
			   if (radix == 10) {
			       for (var i = s.length; --i >= 0;) {
				   var c = s.charCodeAt(i);
				   if (c >= 48 && c <= 57) continue;
				   if (i > 0 || c != 43 && c != 45)
				       throw new NumberFormatException("Not a Number : "+s);

			       }
			   }
			   var integer=parseInt(s,radix);
			   if(isNaN(integer)){
			       throw new NumberFormatException("Not a Number : "+s);
			   }
			   return integer;
		       },"String, Number");
    Integer.parseIntRadix=Integer.prototype.parseIntRadix;

    Clazz.defineMethod(Integer,"parseInt",
		       function(s){
			   return Integer.parseIntRadix(s,10);
		       },"String");
    Integer.parseInt=Integer.prototype.parseInt;

    Clazz.defineMethod(Integer,"$valueOf",
		       function(s){
			   return new Integer(Integer.parseIntRadix(s,10));
		       },"String");

    Clazz.defineMethod(Integer,"$valueOf",
		       function(s){
			   return new Integer(s);
		       },"Number");

    Clazz.defineMethod(Integer,"$valueOf",
		       function(s,r){
			   return new Integer(Integer.parseIntRadix(s,r));
		       },"String, Number");

    Integer.$valueOf=Integer.prototype.$valueOf;
    Clazz.defineMethod(Integer,"equals",
		       function(s){
			   if(s==null||!Clazz.instanceOf(s,Integer)){
			       return false;
			   }
			   return s.valueOf()==this.valueOf();
		       },"Object");
    Integer.toHexString=Integer.prototype.toHexString=function(d){if(d.valueOf)d=d.valueOf();return d._numberToString(16);};
    Integer.toOctalString=Integer.prototype.toOctalString=function(d){if(d.valueOf)d=d.valueOf();return d._numberToString(8);};
    Integer.toBinaryString=Integer.prototype.toBinaryString=function(d){if(d.valueOf)d=d.valueOf();return d._numberToString(2);};

    Integer.decode=Clazz.defineMethod(Integer,"decode",
				      function(nm){
					  var radix=10;
					  var index=0;
					  var negative=false;
					  var result;
					  if(nm.startsWith("-")){
					      negative=true;
					      index++;
					  }if(nm.startsWith("0x",index)||nm.startsWith("0X",index)){
					      index+=2;
					      radix=16;
					  }else if(nm.startsWith("#",index)){
					      index++;
					      radix=16;
					  }else if(nm.startsWith("0",index)&&nm.length>1+index){
					      index++;
					      radix=8;
					  }if(nm.startsWith("-",index))throw new NumberFormatException("Negative sign in wrong position");
					  try{
					      result=Integer.$valueOf(nm.substring(index),radix);
					      result=negative?new Integer(-result.intValue()):result;
					  }catch(e){
					      if(Clazz.instanceOf(e,NumberFormatException)){
						  var constant=negative?String.instantialize("-"+nm.substring(index)):nm.substring(index);
						  result=Integer.$valueOf(constant,radix);
					      }else{
						  throw e;
					      }
					  }
					  return result;
				      },"~S");


    java.lang.Long=Long=function(){
	Clazz.instantialize(this,arguments);
    };
    Clazz.decorateAsType(Long,"Long",Number,Comparable,null,true);
    Long.prototype.valueOf=function(){return 0;};
    Long.toString=Long.prototype.toString=function(){
	if(arguments.length!=0){
	    return""+arguments[0];
	}else if(this===Long){
	    return"class java.lang.Long";
	}
	return""+this.valueOf();
    };
    Clazz.makeConstructor(Long,
			  function(){
			      this.valueOf=function(){
				  return 0;
			      };
			  });
    Clazz.makeConstructor(Long,
			  function(value){
			      var v=Math.round(value);
			      this.valueOf=function(){
				  return v;
			      };
			  },"Number");
    Clazz.makeConstructor(Long,
			  function(s){
			      var value=Long.parseLong(s,10);
			      this.valueOf=function(){
				  return value;
			      };
			  },"String");
    Long.serialVersionUID=Long.prototype.serialVersionUID=4290774380558885855;
    Long.MIN_VALUE=Long.prototype.MIN_VALUE=-0x8000000000000000;
    Long.MAX_VALUE=Long.prototype.MAX_VALUE=0x7fffffffffffffff;
    Long.TYPE=Long.prototype.TYPE=Long;

    Clazz.defineMethod(Long,"parseLong",
		       function(s,radix){
			   if(s==null){
			       throw new NumberFormatException("null");
			   }if(radix<2){
			       throw new NumberFormatException("radix "+radix+" less than Character.MIN_RADIX");
			   }if(radix>36){
			       throw new NumberFormatException("radix "+radix+" greater than Character.MAX_RADIX");
			   }
			   var longVal=parseInt(s,radix);
			   if(isNaN(longVal)){
			       throw new NumberFormatException("Not a Number : "+s);
			   }
			   return longVal;
		       },"String, Number");

    Clazz.defineMethod(Long,"parseLong",
		       function(s){
			   return Long.parseLong(s,10);
		       },"String");

    Long.parseLong=Long.prototype.parseLong;

    Clazz.defineMethod(Long,"$valueOf",
		       function(s){
			   return new Long(Long.parseLong(s,10));
		       },"String");

    Clazz.defineMethod(Long,"$valueOf",
		       function(s){
			   return new Long(s);
		       },"Number");

    Clazz.defineMethod(Long,"$valueOf",
		       function(s,r){
			   return new Long(Long.parseLong(s,r));
		       },"String, Number");

    Long.$valueOf=Long.prototype.$valueOf;
    Clazz.defineMethod(Long,"equals",
		       function(s){
			   if(s==null||!Clazz.instanceOf(s,Long)){
			       return false;
			   }
			   return s.valueOf()==this.valueOf();
		       },"Object");
    Long.toHexString=Long.prototype.toHexString=function(i){
	return i.toString(16);
    };
    Long.toOctalString=Long.prototype.toOctalString=function(i){
	return i.toString(8);
    };
    Long.toBinaryString=Long.prototype.toBinaryString=function(i){
	return i.toString(2);
    };


    Long.decode=Clazz.defineMethod(Long,"decode",
				   function(nm){
				       var radix=10;
				       var index=0;
				       var negative=false;
				       var result;
				       if(nm.startsWith("-")){
					   negative=true;
					   index++;
				       }if(nm.startsWith("0x",index)||nm.startsWith("0X",index)){
					   index+=2;
					   radix=16;
				       }else if(nm.startsWith("#",index)){
					   index++;
					   radix=16;
				       }else if(nm.startsWith("0",index)&&nm.length>1+index){
					   index++;
					   radix=8;
				       }if(nm.startsWith("-",index))throw new NumberFormatException("Negative sign in wrong position");
				       try{
					   result=Long.$valueOf(nm.substring(index),radix);
					   result=negative?new Long(-result.longValue()):result;
				       }catch(e){
					   if(Clazz.instanceOf(e,NumberFormatException)){
					       var constant=negative?String.instantialize("-"+nm.substring(index)):nm.substring(index);
					       result=Long.$valueOf(constant,radix);
					   }else{
					       throw e;
					   }
				       }
				       return result;
				   },"~S");

    java.lang.Short = Short = function () {
	Clazz.instantialize (this, arguments);
    };
    Clazz.decorateAsType (Short, "Short", Number, Comparable, null, true);
    Short.prototype.valueOf = function () { return 0; };
    Short.toString = Short.prototype.toString = function () {
	if (arguments.length != 0) {
	    return "" + arguments[0];
	} else if (this === Short) {
	    return "class java.lang.Short"; // Short.class.toString
	}
	return "" + this.valueOf ();
    };
    Clazz.makeConstructor (Short,
			   function () {
			       this.valueOf = function () {
				   return 0;
			       };
			   });
    Clazz.makeConstructor (Short,
			   function (value) {
			       var v = Math.round (value) & 0xffffffff;
			       this.valueOf = function () {
				   return v;
			       };
			   }, "Number");
    Clazz.makeConstructor (Short,
			   function (s) {
			       var value = Short.parseShort (s, 10);
			       this.valueOf = function () {
				   return value;
			       };
			   }, "String");
    Short.serialVersionUID = Short.prototype.serialVersionUID = 7515723908773894738;
    Short.MIN_VALUE = Short.prototype.MIN_VALUE = -32768;
    Short.MAX_VALUE = Short.prototype.MAX_VALUE = 32767;
    Short.TYPE = Short.prototype.TYPE = Short;

    Clazz.defineMethod (Short, "parseShort",
			function (s, radix) {
			    if (s == null) {
				throw  new NumberFormatException ("null");
			    }if (radix < 2) {
				throw  new NumberFormatException ("radix " + radix + " less than Character.MIN_RADIX");
			    }if (radix > 36) {
				throw  new NumberFormatException ("radix " + radix + " greater than Character.MAX_RADIX");
			    }
			    var integer = parseInt (s, radix);
			    if(isNaN(integer)){
				throw  new NumberFormatException ("Not a Number : " + s);
			    }
			    return integer;
			}, "String, Number");
    Short.parseShort = Short.prototype.parseShort;
    Clazz.defineMethod (Short, "parseShort",
			function (s) {
			    return Short.parseShort (s, 10);
			}, "String");

    Short.parseShort = Short.prototype.parseShort;

    Clazz.defineMethod (Short, "$valueOf",
			function (s) {
			    return new Short(Short.parseShort (s, 10));
			}, "String");

    Clazz.defineMethod (Short, "$valueOf",
			function (s) {
			    return new Short(s);
			}, "Number");

    Clazz.defineMethod (Short, "$valueOf",
			function (s, r) {
			    return new Short(Short.parseShort (s, r));
			}, "String, Number");

    Short.$valueOf = Short.prototype.$valueOf;
    Clazz.defineMethod (Short, "equals",
			function (s) {
			    if(s == null || !Clazz.instanceOf(s, Short) ){
				return false;
			    }
			    return s.valueOf()  == this.valueOf();
			}, "Object");
    Short.toHexString = Short.prototype.toHexString = function (i) {
	return i.toString (16);
    };
    Short.toOctalString = Short.prototype.toOctalString = function (i) {
	return i.toString (8);
    };
    Short.toBinaryString = Short.prototype.toBinaryString = function (i) {
	return i.toString (2);
    };
    Short.decode = Clazz.defineMethod (Short, "decode",
				       function (nm) {
					   var radix = 10;
					   var index = 0;
					   var negative = false;
					   var result;
					   if (nm.startsWith ("-")) {
					       negative = true;
					       index++;
					   }if (nm.startsWith ("0x", index) || nm.startsWith ("0X", index)) {
					       index += 2;
					       radix = 16;
					   } else if (nm.startsWith ("#", index)) {
					       index++;
					       radix = 16;
					   } else if (nm.startsWith ("0", index) && nm.length > 1 + index) {
					       index++;
					       radix = 8;
					   }if (nm.startsWith ("-", index)) throw  new NumberFormatException ("Negative sign in wrong position");
					   try {
					       result = Short.$valueOf (nm.substring (index), radix);
					       result = negative ?  new Short (-result.shortValue ()) : result;
					   } catch (e) {
					       if (Clazz.instanceOf (e, NumberFormatException)) {
						   var constant = negative ?  String.instantialize ("-" + nm.substring (index)) : nm.substring (index);
						   result = Short.$valueOf (constant, radix);
					       } else {
						   throw e;
					       }
					   }
					   return result;
				       }, "~S");

    java.lang.Float=Float=function(){
	Clazz.instantialize(this,arguments);
    };
    Clazz.decorateAsType(Float,"Float",Number,Comparable,null,true);
    Float.prototype.valueOf=function(){return 0;};
    Float.toString=Float.prototype.toString=function(){
	if(arguments.length!=0){
	    return""+arguments[0];
	}else if(this===Float){
	    return"class java.lang.Float";
	}
	return""+this.valueOf();
    };
    Clazz.makeConstructor(Float,
			  function(){
			      this.valueOf=function(){
				  return 0.0;
			      };
			  });
    Clazz.makeConstructor(Float,
			  function(value){
			      this.valueOf=function(){
				  return value;
			      };
			  },"Number");
    Clazz.makeConstructor(Float,
			  function(s){
			      var value=null;
			      if(s!=null){
				  value=Float.parseFloat(s);
			      }else{
				  value=0;
			      }
			      this.valueOf=function(){
				  return value;
			      };
			  },"String");
    Float.serialVersionUID=Float.prototype.serialVersionUID=-2671257302660747028;
    Float.MIN_VALUE=Float.prototype.MIN_VALUE=3.4028235e+38;
    Float.MAX_VALUE=Float.prototype.MAX_VALUE=1.4e-45;
    Float.NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY;
    Float.POSITIVE_INFINITY=Number.POSITIVE_INFINITY;
    Float.NaN=Number.NaN;
    Float.TYPE=Float.prototype.TYPE=Float;

    Clazz.defineMethod(Float,"parseFloat",
		       function(s){
			   if(s==null){
			       throw new NumberFormatException("null");
			   }
			   var floatVal=parseFloat(s);
			   if(isNaN(floatVal)){
			       throw new NumberFormatException("Not a Number : "+s);
			   }
			   return floatVal;
		       },"String");
    Float.parseFloat=Float.prototype.parseFloat;

    Clazz.defineMethod(Float,"$valueOf",
		       function(s){
			   return new Float(Float.parseFloat(s,10));
		       },"String");

    Clazz.defineMethod(Float,"$valueOf",
		       function(s){
			   return new Float(s);
		       },"Number");

    Float.$valueOf=Float.prototype.$valueOf;
    Clazz.defineMethod(Float,"isNaN",
		       function(num){
			   return isNaN(num);
		       },"Number");
    Float.isNaN=Float.prototype.isNaN;
    Clazz.defineMethod(Float,"isInfinite",
		       function(num){
			   return!isFinite(num);
		       },"Number");
    Float.isInfinite=Float.prototype.isInfinite;

    Clazz.defineMethod(Float,"equals",
		       function(s){
			   if(s==null||!Clazz.instanceOf(s,Float)){
			       return false;
			   }
			   return s.valueOf()==this.valueOf();
		       },"Object");

    java.lang.Double=Double=function(){
	Clazz.instantialize(this,arguments);
    };
    Clazz.decorateAsType(Double,"Double",Number,Comparable,null,true);
    Double.prototype.valueOf=function(){return 0;};
    Double.toString=Double.prototype.toString=function(){
	if(arguments.length!=0){
	    return""+arguments[0];
	}else if(this===Double){
	    return"class java.lang.Double";
	}
	return""+this.valueOf();
    };
    Clazz.makeConstructor(Double,
			  function(){
			      this.valueOf=function(){
				  return 0.0;
			      };
			  });
    Clazz.makeConstructor(Double,
			  function(value){
			      this.valueOf=function(){
				  return value;
			      };
			  },"Number");
    Clazz.makeConstructor(Double,
			  function(s){
			      var value=Double.parseDouble(s);
			      this.valueOf=function(){
				  return value;
			      };
			  },"String");

    Double.serialVersionUID=Double.prototype.serialVersionUID=-9172774392245257468;
    Double.MIN_VALUE=Double.prototype.MIN_VALUE=4.9e-324;
    Double.MAX_VALUE=Double.prototype.MAX_VALUE=1.7976931348623157e+308;
    Double.NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY;
    Double.POSITIVE_INFINITY=Number.POSITIVE_INFINITY;
    Double.NaN=Number.NaN;
    Double.TYPE=Double.prototype.TYPE=Double;

    Clazz.defineMethod(Double,"isNaN",
		       function(num){
			   return isNaN(num);
		       },"Number");
    Double.isNaN=Double.prototype.isNaN;
    Clazz.defineMethod(Double,"isInfinite",
		       function(num){
			   return!isFinite(num);
		       },"Number");
    Double.isInfinite=Double.prototype.isInfinite;

    Clazz.defineMethod(Double,"parseDouble",
		       function(s){
			   if(s==null){
			       throw new NumberFormatException("null");
			   }
			   var doubleVal=parseFloat(s);
			   if(isNaN(doubleVal)){
			       throw new NumberFormatException("Not a Number : "+s);
			   }
			   return doubleVal;
		       },"String");
    Double.parseDouble=Double.prototype.parseDouble;

    Clazz.defineMethod(Double,"$valueOf",
		       function(s){
			   return new Double(this.parseDouble(s));
		       },"String");

    Clazz.defineMethod(Double,"$valueOf",
		       function(v){
			   return new Double(v);
		       },"Number");

    Double.$valueOf=Double.prototype.$valueOf;

    Clazz.defineMethod(Double,"equals",
		       function(s){
			   if(s==null||!Clazz.instanceOf(s,Double)){
			       return false;
			   }
			   return s.valueOf()==this.valueOf();
		       },"Object");

    java.lang.Byte=Byte=function(){
	Clazz.instantialize(this,arguments);
    };
    Clazz.decorateAsType(Byte,"Byte",Number,Comparable,null,true);
    Byte.prototype.valueOf=function(){return 0;};
    Byte.toString=Byte.prototype.toString=function(){
	if(arguments.length!=0){
	    return""+arguments[0];
	}else if(this===Byte){
	    return"class java.lang.Byte";
	}
	return""+this.valueOf();
    };
    Clazz.makeConstructor(Byte,
			  function(){
			      this.valueOf=function(){
				  return 0;
			      };
			  });
    Clazz.makeConstructor(Byte,
			  function(value){
			      var v=Math.round(value)&0xffffffff;
			      this.valueOf=function(){
				  return v;
			      };
			  },"Number");
    Clazz.makeConstructor(Byte,
			  function(s){
			      var value=Byte.parseByte(s,10);
			      this.valueOf=function(){
				  return value;
			      };
			  },"String");
    Byte.serialVersionUID=Byte.prototype.serialVersionUID=-7183698231559129828;
    Byte.MIN_VALUE=Byte.prototype.MIN_VALUE=-128;
    Byte.MAX_VALUE=Byte.prototype.MAX_VALUE=127;
    Byte.SIZE=Byte.prototype.SIZE=8;
    Byte.TYPE=Byte.prototype.TYPE=Byte;

    Clazz.defineMethod(Byte,"parseByte",
		       function(s,radix){
			   if(s==null){
			       throw new NumberFormatException("null");
			   }if(radix<2){
			       throw new NumberFormatException("radix "+radix+" less than Character.MIN_RADIX");
			   }if(radix>36){
			       throw new NumberFormatException("radix "+radix+" greater than Character.MAX_RADIX");
			   }
			   var integer=parseInt(s,radix);
			   if(isNaN(integer)){
			       throw new NumberFormatException("Not a Number : "+s);
			   }
			   return integer;
		       },"String, Number");
    Byte.parseByte=Byte.prototype.parseByte;
    Clazz.defineMethod(Byte,"parseByte",
		       function(s){
			   return Byte.parseByte(s,10);
		       },"String");

    Byte.parseByte=Byte.prototype.parseByte;

    Clazz.defineMethod(Byte,"$valueOf",
		       function(s){
			   return new Byte(Byte.parseByte(s,10));
		       },"String");

    Clazz.defineMethod(Byte,"$valueOf",
		       function(s){
			   return new Byte(s);
		       },"Number");

    Clazz.defineMethod(Byte,"$valueOf",
		       function(s,r){
			   return new Byte(Byte.parseByte(s,r));
		       },"String, Number");

    Byte.$valueOf=Byte.prototype.$valueOf;
    Clazz.defineMethod(Byte,"equals",
		       function(s){
			   if(s==null||!Clazz.instanceOf(s,Byte)){
			       return false;
			   }
			   return s.valueOf()==this.valueOf();
		       },"Object");
    Byte.toHexString=Byte.prototype.toHexString=function(i){
	return i.toString(16);
    };
    Byte.toOctalString=Byte.prototype.toOctalString=function(i){
	return i.toString(8);
    };
    Byte.toBinaryString=Byte.prototype.toBinaryString=function(i){
	return i.toString(2);
    };
    Byte.decode=Clazz.defineMethod(Byte,"decode",
				   function(nm){
				       var radix=10;
				       var index=0;
				       var negative=false;
				       var result;
				       if(nm.startsWith("-")){
					   negative=true;
					   index++;
				       }if(nm.startsWith("0x",index)||nm.startsWith("0X",index)){
					   index+=2;
					   radix=16;
				       }else if(nm.startsWith("#",index)){
					   index++;
					   radix=16;
				       }else if(nm.startsWith("0",index)&&nm.length>1+index){
					   index++;
					   radix=8;
				       }if(nm.startsWith("-",index))throw new NumberFormatException("Negative sign in wrong position");
				       try{
					   result=Byte.$valueOf(nm.substring(index),radix);
					   result=negative?new Byte(-result.byteValue()):result;
				       }catch(e){
					   if(Clazz.instanceOf(e,NumberFormatException)){
					       var constant=negative?String.instantialize("-"+nm.substring(index)):nm.substring(index);
					       result=Byte.$valueOf(constant,radix);
					   }else{
					       throw e;
					   }
				       }
				       return result;
				   },"~S");

    java.lang.Boolean=Boolean;
    if(Clazz.supportsNativeObject){
	for(var i=0;i<Clazz.extendedObjectMethods.length;i++){
	    var p=Clazz.extendedObjectMethods[i];
	    Boolean.prototype[p]=JavaObject.prototype[p];
	}
    }
    Boolean.__CLASS_NAME__="Boolean";
    Clazz.implementOf(Boolean,[java.io.Serializable,java.lang.Comparable]);
    Boolean.equals=Clazz.innerFunctions.equals;
    Boolean.getName=Clazz.innerFunctions.getName;
    Boolean.serialVersionUID=Boolean.prototype.serialVersionUID=-3665804199014368530;

    Clazz.makeConstructor(Boolean,
			  function(value){
			      this.valueOf=function(){
				  return value;
			      };
			  },"~B");
    Clazz.makeConstructor(Boolean,
			  function(s){
			      this.valueOf=function(){
				  return Boolean.toBoolean(s);
			      };
			  },"~S");
    Boolean.parseBoolean=Clazz.defineMethod(Boolean,"parseBoolean",
					    function(s){
						return Boolean.toBoolean(s);
					    },"~S");
    Clazz.defineMethod(Boolean,"booleanValue",
		       function(){
			   return this.valueOf();
		       });
    Boolean.$valueOf=Clazz.defineMethod(Boolean,"$valueOf",
					function(b){
					    return(b?Boolean.TRUE:Boolean.FALSE);
					},"~B");
    Boolean.$valueOf=Clazz.defineMethod(Boolean,"$valueOf",
					function(s){
					    return Boolean.toBoolean(s)?Boolean.TRUE:Boolean.FALSE;
					},"~S");
    Boolean.toString=Clazz.defineMethod(Boolean,"toString",
					function(b){
					    return b?"true":"false";
					},"~B");
    Clazz.defineMethod(Boolean,"toString",
		       function(){
			   return this.valueOf()?"true":"false";
		       });
    Clazz.overrideMethod(Boolean,"hashCode",
			 function(){
			     return this.valueOf()?1231:1237;
			 });
    Clazz.overrideMethod(Boolean,"equals",
			 function(obj){
			     if(Clazz.instanceOf(obj,Boolean)){
				 return this.booleanValue()==obj.booleanValue();
			     }return false;
			 },"~O");
    Boolean.getBoolean=Clazz.defineMethod(Boolean,"getBoolean",
					  function(name){
					      var result=false;
					      try{
						  result=Boolean.toBoolean(System.getProperty(name));
					      }catch(e){
						  if(Clazz.instanceOf(e,IllegalArgumentException)){
						  }else if(Clazz.instanceOf(e,NullPointerException)){
						  }else{
						      throw e;
						  }
					      }
					      return result;
					  },"~S");
    Clazz.overrideMethod(Boolean,"compareTo",
			 function(b){
			     return(b.value==this.value?0:(this.value?1:-1));
			 },"Boolean");
    Boolean.toBoolean=Clazz.defineMethod(Boolean,"toBoolean",
					 ($fz=function(name){
					     return((name!=null)&&name.equalsIgnoreCase("true"));
					 },$fz.isPrivate=true,$fz),"~S");
    Boolean.TRUE=Boolean.prototype.TRUE=new Boolean(true);
    Boolean.FALSE=Boolean.prototype.FALSE=new Boolean(false);
    Boolean.TYPE=Boolean.prototype.TYPE=Boolean;
    Encoding=new Object();
    Encoding.UTF8="utf-8";
    Encoding.UTF16="utf-16";
    Encoding.ASCII="ascii";


    Encoding.guessEncoding=function(str){
	if(str.charCodeAt(0)==0xEF&&str.charCodeAt(1)==0xBB&&str.charCodeAt(2)==0xBF){
	    return Encoding.UTF8;
	}else if(str.charCodeAt(0)==0xFF&&str.charCodeAt(1)==0xFE){
	    return Encoding.UTF16;
	}else{
	    return Encoding.ASCII;
	}
    };

    Encoding.readUTF8=function(str){
	var encoding=this.guessEncoding(str);
	var startIdx=0;
	if(encoding==Encoding.UTF8){
	    startIdx=3;
	}else if(encoding==Encoding.UTF16){
	    startIdx=2;
	}
	var arrs=new Array();
	for(var i=startIdx;i<str.length;i++){
	    var charCode=str.charCodeAt(i);
	    if(charCode<0x80){
		arrs[arrs.length]=str.charAt(i);
	    }else if(charCode>0xc0&&charCode<0xe0){
		var c1=charCode&0x1f;
		i++;
		var c2=str.charCodeAt(i)&0x3f;
		var c=(c1<<6)+c2;
		arrs[arrs.length]=String.fromCharCode(c);
	    }else if(charCode>=0xe0){
		var c1=charCode&0x0f;
		i++;
		var c2=str.charCodeAt(i)&0x3f;
		i++;
		var c3=str.charCodeAt(i)&0x3f;
		var c=(c1<<12)+(c2<<6)+c3;
		arrs[arrs.length]=String.fromCharCode(c);
	    }
	}
	return arrs.join('');
    };

    Encoding.convert2UTF8=function(str){
	var encoding=this.guessEncoding(str);
	var startIdx=0;
	if(encoding==Encoding.UTF8){
	    return str;
	}else if(encoding==Encoding.UTF16){
	    startIdx=2;
	}

	var offset=0;
	var arrs=new Array(offset+str.length-startIdx);

	for(var i=startIdx;i<str.length;i++){
	    var charCode=str.charCodeAt(i);
	    if(charCode<0x80){
		arrs[offset+i-startIdx]=str.charAt(i);
	    }else if(charCode<=0x07ff){
		var c1=0xc0+((charCode&0x07c0)>>6);
		var c2=0x80+(charCode&0x003f);
		arrs[offset+i-startIdx]=String.fromCharCode(c1)+String.fromCharCode(c2);
	    }else{
		var c1=0xe0+((charCode&0xf000)>>12);
		var c2=0x80+((charCode&0x0fc0)>>6);
		var c3=0x80+(charCode&0x003f);
		arrs[offset+i-startIdx]=String.fromCharCode(c1)+String.fromCharCode(c2)+String.fromCharCode(c3);
	    }
	}
	return arrs.join('');
    };
    Encoding.base64Chars=new Array(
	'A','B','C','D','E','F','G','H',
	'I','J','K','L','M','N','O','P',
	'Q','R','S','T','U','V','W','X',
	'Y','Z','a','b','c','d','e','f',
	'g','h','i','j','k','l','m','n',
	'o','p','q','r','s','t','u','v',
	'w','x','y','z','0','1','2','3',
	'4','5','6','7','8','9','+','/'
    );
    Encoding.encodeBase64=function(str){
	if(str==null||str.length==0)return str;
	var b64=Encoding.base64Chars;
	var length=str.length;
	var index=0;
	var buf=[];
	var c0,c1,c2;
	while(index<length){
	    c0=str.charCodeAt(index++);
	    buf[buf.length]=b64[c0>>2];
	    if(index<length){
		c1=str.charCodeAt(index++);
		buf[buf.length]=b64[((c0<<4)&0x30)|(c1>>4)];
		if(index<length){
		    c2=str.charCodeAt(index++);
		    buf[buf.length]=b64[((c1<<2)&0x3c)|(c2>>6)];
		    buf[buf.length]=b64[c2&0x3F];
		}else{
		    buf[buf.length]=b64[((c1<<2)&0x3c)];
		    buf[buf.length]='=';
		}
	    }else{
		buf[buf.length]=b64[(c0<<4)&0x30];
		buf[buf.length]='=';
		buf[buf.length]='=';
	    }
	}
	return buf.join('');
    };
    Encoding.decodeBase64=function(str){
	if(str==null||str.length==0)return str;
	var b64=Encoding.base64Chars;
	var xb64=Encoding.xBase64Chars;
	if(Encoding.xBase64Chars==null){
	    xb64=new Object();
	    for(var i=0;i<b64.length;i++){
		xb64[b64[i]]=i;
	    }
	    Encoding.xBase64Chars=xb64;
	}
	var length=str.length;
	var index=0;
	var buf=[];
	var c0,c1,c2,c3;
	var c=0;
	while(index<length&&c++<60000){
	    c0=xb64[str.charAt(index++)];
	    c1=xb64[str.charAt(index++)];
	    c2=xb64[str.charAt(index++)];
	    c3=xb64[str.charAt(index++)];
	    buf[buf.length]=String.fromCharCode(((c0<<2)&0xff)|c1>>4);
	    if(c2!=null){
		buf[buf.length]=String.fromCharCode(((c1<<4)&0xff)|c2>>2);
		if(c3!=null){
		    buf[buf.length]=String.fromCharCode(((c2<<6)&0xff)|c3);
		}
	    }
	}
	return buf.join('');
    };

    if(String.prototype.$replace==null){
	java.lang.String=String;
	if(Clazz.supportsNativeObject){
	    for(var i=0;i<Clazz.extendedObjectMethods.length;i++){
		var p=Clazz.extendedObjectMethods[i];
		if("to$tring"==p||"toString"==p||"equals"==p||"hashCode"==p){
		    continue;
		}
		String.prototype[p]=JavaObject.prototype[p];
	    }
	}

	Clazz.implementOf(String,[java.io.Serializable,CharSequence,Comparable]);

	String.getName=Clazz.innerFunctions.getName;

	String.serialVersionUID=String.prototype.serialVersionUID=-6849794470754667710;

	String.prototype.$replace=function(c1,c2){

	    c1=c1.replace(/([\\\/\$\.\*\+\{\}\?\^\(\)\[\]])/g,function($0,$1){
		return"\\"+$1;
	    });
	    var regExp=new RegExp(c1,"gm");
	    return this.replace(regExp,c2);
	};
	String.prototype.$generateExpFunction=function(str){
	    var arr=[];
	    var orders=[];
	    var idx=0;
	    arr[0]="";
	    var i=0;
	    for(;i<str.length;i++){
		var ch=str.charAt(i);
		if(i!=str.length-1&&ch=='\\'){
		    i++;
		    var c=str.charAt(i);
		    if(c=='\\'){
			arr[idx]+='\\';
		    }
		    arr[idx]+=c;
		}else if(i!=str.length-1&&ch=='$'){
		    i++;
		    orders[idx]=parseInt(str.charAt(i));
		    idx++;
		    arr[idx]="";
		}else if(ch=='\r'){
		    arr[idx]+="\\r";
		}else if(ch=='\n'){
		    arr[idx]+="\\n";
		}else if(ch=='\t'){
		    arr[idx]+="\\t";
		}else if(ch=='\"'){
		    arr[idx]+="\\\"";
		}else{
		    arr[idx]+=ch;
		}
	    }
	    var funStr="f = function (";
	    var max=Math.max.apply({},orders);
	    for(i=0;i<=max;i++){
		funStr+="$"+i;
		if(i!=max){
		    funStr+=", ";
		}
	    }
	    funStr+=") { return ";
	    for(i=0;i<arr.length-1;i++){
		funStr+="\""+arr[i]+"\" + $"+orders[i]+" + ";
	    }
	    funStr+="\""+arr[i]+"\"; }";
	    var f=null;
	    eval(funStr)
	    return f;
	};

	String.prototype.replaceAll=function(exp,str){
	    var regExp=new RegExp(exp,"gm");
	    return this.replace(regExp,this.$generateExpFunction(str));
	};
	String.prototype.replaceFirst=function(exp,str){
	    var regExp=new RegExp(exp,"m");
	    return this.replace(regExp,this.$generateExpFunction(str));
	};
	String.prototype.matches=function(exp){
	    if(exp!=null){
		exp="^("+exp+")$";
	    }
	    var regExp=new RegExp(exp,"gm");
	    var m=this.match(regExp);
	    return m!=null&&m.length!=0;
	};
	String.prototype.regionMatches=function(ignoreCase,toffset,
						other,ooffset,len){

	    if(typeof ignoreCase=="number"
	       ||(ignoreCase!=true&&ignoreCase!=false)){
		len=ooffset;
		ooffset=other;
		other=toffset;
		toffset=ignoreCase;
		ignoreCase=false;
	    }
	    var to=toffset;
	    var po=ooffset;

	    if((ooffset<0)||(toffset<0)||(toffset>this.length-len)||
	       (ooffset>other.length-len)){
		return false;
	    }
	    var s1=this.substring(toffset,toffset+len);
	    var s2=other.substring(ooffset,ooffset+len);
	    if(ignoreCase){
		s1=s1.toLowerCase();
		s2=s2.toLowerCase();
	    }
	    return s1==s2;
	};
	String.prototype.$plit=function(regex,limit){

	    if(limit!=null&&limit>0){
		if(limit==1){
		    return this;
		}
		var regExp=new RegExp("("+regex+")","gm");
		var count=1;
		var s=this.replace(regExp,function($0,$1){
		    count++;
		    if(count==limit){
			return"@@_@@";
		    }else if(count>limit){
			return $0;
		    }else{
			return $0;
		    }
		});
		regExp=new RegExp(regex,"gm");
		var arr=this.split(regExp);
		if(arr.length>limit){
		    arr[limit-1]=s.substring(s.indexOf("@@_@@")+5);
		    arr.length=limit;
		}
		return arr;
	    }else{
		var regExp=new RegExp(regex,"gm");
		return this.split(regExp);
	    }
	};

	String.prototype.trim=function(){
	    var len=this.length;
	    var st=0;

	    while((st<len)&&(this.charAt(st)<=' ')){
		st++;
	    }
	    while((st<len)&&(this.charAt(len-1)<=' ')){
		len--;
	    }
	    return((st>0)||(len<len))?this.substring(st,len):this;
	};

	String.prototype.trim=function(){
	    return this.replace(/^\s+/g,'').replace(/\s+$/g,'');
	};


	String.prototype.startsWith_string_number=function(prefix,toffset){
	    var to=toffset;
	    var po=0;
	    var pc=prefix.length;

	    if((toffset<0)||(toffset>this.length-pc)){
		return false;
	    }
	    while(--pc>=0){
		if(this.charAt(to++)!=prefix.charAt(po++)){
		    return false;
		}
	    }
	    return true;
	};

	String.prototype.startsWith=function(prefix){
	    if(arguments.length==1){
		return this.startsWith_string_number(arguments[0],0);
	    }else if(arguments.length==2){
		return this.startsWith_string_number(arguments[0],arguments[1]);
	    }else{
		return false;
	    }
	};

	String.prototype.endsWith=function(suffix){
	    return this.startsWith(suffix,this.length-suffix.length);
	};

	String.prototype.equals=function(anObject){
	    return this.valueOf()==anObject;
	};

	String.prototype.equalsIgnoreCase=function(anotherString){
	    return(anotherString==null)?false:(this==anotherString
					       ||this.toLowerCase()==anotherString.toLowerCase());
	};


	String.prototype.hash=0;

	String.prototype.hashCode=function(){
	    var h=this.hash;
	    if(h==0){
		var off=0;
		var len=this.length;
		for(var i=0;i<len;i++){
		    h=31*h+this.charCodeAt(off++);
		    h&=0xffffffff;
		}
		this.hash=h;
	    }
	    return h;
	};

	String.prototype.getBytes=function(){
	    if(arguments.length==4){
		return this.getChars(arguments[0],arguments[1],arguments[2],arguments[3]);
	    }
	    var s=this;
	    if(arguments.length==1){
		var cs=arguments[0].toString().toLowerCase();
		var charset=[
		    "utf-8","UTF8","us-ascii","iso-8859-1","8859_1","gb2312","gb18030","gbk"
		];
		var existed=false;
		for(var i=0;i<charset.length;i++){
		    if(charset[i]==cs){
			existed=true;
			break;
		    }
		}
		if(!existed){
		    throw new java.io.UnsupportedEncodingException();
		}
		if(cs=="utf-8"||cs=="utf8"){
		    s=Encoding.convert2UTF8(this);
		}
	    }
	    var arrs=new Array(s.length);
	    var c=0,ii=0;
	    for(var i=0;i<s.length;i++){
		c=s.charCodeAt(i);
		if(c>255){
		    arrs[ii]=0x1a;
		    arrs[ii+1]=c&0xff;
		    arrs[ii+2]=(c&0xff00)>>8;
		    ii+=2;
		}else{
		    arrs[ii]=c;
		}
		ii++;
	    }
	    return arrs;
	};

	String.prototype.compareTo=function(anotherString){
	    if(anotherString==null){
		throw new java.lang.NullPointerException();
	    }
	    var len1=this.length;
	    var len2=anotherString.length;
	    var n=Math.min(len1,len2);
	    var k=0;
	    while(k<n){
		var c1=this.charCodeAt(k);
		var c2=anotherString.charCodeAt(k);
		if(c1!=c2){
		    return c1-c2;
		}
		k++;
	    }
	    return len1-len2;
	};

	String.prototype.toCharArray=function(){
	    var result=new Array(this.length);
	    for(var i=0;i<this.length;i++){
		result[i]=this.charAt(i);
	    }
	    return result;
	};
	String.value0f=String.valueOf;
	String.valueOf=function(o){
	    if(o=="undefined"){
		return String.value0f();
	    }
	    if(o instanceof Array){
		if(arguments.length==1){
		    return o.join('');
		}else{
		    var off=arguments[1];
		    var len=arguments[2];
		    var oo=new Array(len);
		    for(var i=0;i<len;i++){
			oo[i]=o[off+i];
		    }
		    return oo.join('');
		}
	    }
	    return""+o;
	};

	String.prototype.subSequence=function(beginIndex,endIndex){
	    return this.substring(beginIndex,endIndex);
	};

	String.prototype.compareToIgnoreCase=function(str){
	    if(str==null){
		throw new NullPointerException();
	    }
	    var s1=this.toUpperCase();
	    var s2=str.toUpperCase();
	    if(s1==s2){
		return 0;
	    }else{
		var s1=this.toLowerCase();
		var s2=str.toLowerCase();
		if(s1==s2){
		    return 0;
		}else if(s1>s2){
		    return 1;
		}else{
		    return-1;
		}
	    }
	};

	String.prototype.contentEquals=function(sb){
	    if(this.length!=sb.length()){
		return false;
	    }
	    var v=sb.getValue();
	    var i=0;
	    var j=0;
	    var n=this.length;
	    while(n--!=0){
		if(this.charCodeAt(i++)!=v[j++]){
		    return false;
		}
	    }
	    return true;
	};

	String.prototype.getChars=function(srcBegin,srcEnd,dst,dstBegin){
	    if(srcBegin<0){
		throw new StringIndexOutOfBoundsException(srcBegin);
	    }
	    if(srcEnd>this.length){
		throw new StringIndexOutOfBoundsException(srcEnd);
	    }
	    if(srcBegin>srcEnd){
		throw new StringIndexOutOfBoundsException(srcEnd-srcBegin);
	    }
	    if(dst==null){
		throw new NullPointerException();
	    }
	    for(var i=0;i<srcEnd-srcBegin;i++){
		dst[dstBegin+i]=this.charAt(srcBegin+i);
	    }
	};
	String.prototype.$concat=String.prototype.concat;
	String.prototype.concat=function(s){
	    if(s==null){
		throw new NullPointerException();
	    }
	    return this.$concat(s);
	};

	String.prototype.$lastIndexOf=String.prototype.lastIndexOf;
	String.prototype.lastIndexOf=function(s,last){
	    if(last!=null&&last+this.length<=0){
		return-1;
	    }
	    if(last!=null){
		return this.$lastIndexOf(s,last);
	    }else{
		return this.$lastIndexOf(s);
	    }
	};

	String.prototype.intern=function(){
	    return this.valueOf();
	};
	String.copyValueOf=String.prototype.copyValueOf=function(){
	    if(arguments.length==1){
		return String.instantialize(arguments[0]);
	    }else{
		return String.instantialize(arguments[0],arguments[1],arguments[2]);
	    }
	};
	String.indexOf=function(source,sourceOffset,sourceCount,
				target,targetOffset,targetCount,fromIndex){
	    if(fromIndex>=sourceCount){
		return(targetCount==0?sourceCount:-1);
	    }
	    if(fromIndex<0){
		fromIndex=0;
	    }
	    if(targetCount==0){
		return fromIndex;
	    }

	    var first=target[targetOffset];
	    var i=sourceOffset+fromIndex;
	    var max=sourceOffset+(sourceCount-targetCount);

	    startSearchForFirstChar:
	    while(true){

		while(i<=max&&source[i]!=first){
		    i++;
		}
		if(i>max){
		    return-1;
		}


		var j=i+1;
		var end=j+targetCount-1;
		var k=targetOffset+1;
		while(j<end){
		    if(source[j++]!=target[k++]){
			i++;

			continue startSearchForFirstChar;
		    }
		}
		return i-sourceOffset;
	    }
	};

	/*


	  String.instantialize=function(){
	  if(arguments.length==0){
	  return new String();
	  }else if(arguments.length==1){
	  var x=arguments[0];
	  if(typeof x=="string"||x instanceof String){
	  return new String(x);
	  }else if(x instanceof Array){
	  if(x.length>0&&typeof x[0]=="number"){
	  var arr=new Array(x.length);
	  for(var i=0;i<x.length;i++){
	  arr[i]=String.fromCharCode(x[i]&0xff);
	  }
	  return Encoding.readUTF8(arr.join(''));
	  }
	  return x.join('');
	  }else if(x.__CLASS_NAME__=="StringBuffer"
	  ||x.__CLASS_NAME__=="java.lang.StringBuffer"){
	  var value=x.shareValue();
	  var length=x.length();
	  var valueCopy=new Array(length);
	  for(var i=0;i<length;i++){
	  valueCopy[i]=value[i];
	  }
	  return valueCopy.join('')

	  }else{
	  return""+x;
	  }
	  }else if(arguments.length==2){
	  var x=arguments[0];
	  var hibyte=arguments[1];
	  if(typeof hibyte=="string"){
	  return String.instantialize(x,0,x.length,hibyte);
	  }else{
	  return String.instantialize(x,hibyte,0,x.length);
	  }
	  }else if(arguments.length==3){
	  var bytes=arguments[0];
	  var offset=arguments[1];
	  var length=arguments[2];
	  if(arguments[2]instanceof Array){
	  bytes=arguments[2];
	  offset=arguments[0];
	  length=arguments[1];
	  }
	  var arr=new Array(length);
	  if(offset<0||length+offset>bytes.length){
	  throw new IndexOutOfBoundsException();
	  }
	  if(length>0){
	  var isChar=(bytes[offset].length!=null);
	  if(isChar){
	  for(var i=0;i<length;i++){
	  arr[i]=bytes[offset+i];
	  }
	  }else{
	  for(var i=0;i<length;i++){
	  arr[i]=String.fromCharCode(bytes[offset+i]);
	  }
	  }
	  }
	  return arr.join('');
	  }else if(arguments.length==4){
	  var bytes=arguments[0];
	  var y=arguments[3];
	  if(typeof y=="string"||y instanceof String){
	  var offset=arguments[1];
	  var length=arguments[2];
	  var arr=new Array(length);
	  for(var i=0;i<length;i++){
	  arr[i]=bytes[offset+i];
	  if(typeof arr[i]=="number"){
	  arr[i]=String.fromCharCode(arr[i]&0xff);
	  }
	  }
	  var cs=y.toLowerCase();
	  if(cs=="utf-8"||cs=="utf8"){
	  return Encoding.readUTF8(arr.join(''));
	  }else{
	  return arr.join('');
	  }
	  }else{
	  var count=arguments[3];
	  var offset=arguments[2];
	  var hibyte=arguments[1];
	  var value=new Array(count);
	  if(hibyte==0){
	  for(var i=count;i-->0;){
	  value[i]=String.fromCharCode(bytes[i+offset]&0xff);
	  }
	  }else{
	  hibyte<<=8;
	  for(var i=count;i-->0;){
	  value[i]=String.fromCharCode(hibyte|(bytes[i+offset]&0xff));
	  }
	  }
	  return value.join('');
	  }
	  }else{
	  var s="";
	  for(var i=0;i<arguments.length;i++){
	  s+=arguments[i];
	  }
	  return s;
	  }
	  };


	*/


	String.instantialize=function(){
	    switch (arguments.length) {
	    case 0:
		return new String();
	    case 1:
		var x=arguments[0];
		if(typeof x=="string"||x instanceof String){
		    return new String(x);
		}
		if(x instanceof Array || x instanceof Int32Array){
		    if(x.length>0&&typeof x[0]=="number"){
			var arr=new Array(x.length);
			for(var i=0;i<x.length;i++){
			    arr[i]=String.fromCharCode(x[i]&0xff);
			}
			return Encoding.readUTF8(arr.join(''));
		    }
		    return x.join('');
		}
		if(x.__CLASS_NAME__=="StringBuffer"||x.__CLASS_NAME__=="java.lang.StringBuffer"){
		    var value=x.shareValue();
		    var length=x.length();
		    var valueCopy=new Array(length);
		    for(var i=0;i<length;i++){
			valueCopy[i]=value[i];
		    }
		    return valueCopy.join('')
		}
		return""+x;
	    case 2:	
		var x=arguments[0];
		var hibyte=arguments[1];
		if(typeof hibyte=="string"){
		    return String.instantialize(x,0,x.length,hibyte);
		}
		return String.instantialize(x,hibyte,0,x.length);
	    case 3:
		var bytes=arguments[0];
		var offset=arguments[1];
		var length=arguments[2];
		if(arguments[2]instanceof Array){
		    bytes=arguments[2];
		    offset=arguments[0];
		    length=arguments[1];
		}
		var arr=new Array(length);
		if(offset<0||length+offset>bytes.length){
		    throw new IndexOutOfBoundsException();
		}
		if(length>0){
		    var isChar=(bytes[offset].length!=null);
		    if(isChar){
			for(var i=0;i<length;i++){
			    arr[i]=bytes[offset+i];
			}
		    }else{
			for(var i=0;i<length;i++){
			    arr[i]=String.fromCharCode(bytes[offset+i]);
			}
		    }
		}
		return arr.join('');
	    case 4:
		var bytes=arguments[0];
		var y=arguments[3];
		if(typeof y=="string"||y instanceof String){
		    var offset=arguments[1];
		    var length=arguments[2];
		    var arr=new Array(length);
		    for(var i=0;i<length;i++){
			arr[i]=bytes[offset+i];
			if(typeof arr[i]=="number"){
			    arr[i]=String.fromCharCode(arr[i]&0xff);
			}
		    }
		    var cs=y.toLowerCase();
		    if(cs=="utf-8"||cs=="utf8"){
			return Encoding.readUTF8(arr.join(''));
		    }
		    return arr.join('');
		}
		var count=arguments[3];
		var offset=arguments[2];
		var hibyte=arguments[1];
		var value=new Array(count);
		if(hibyte==0){
		    for(var i=count;i-->0;){
			value[i]=String.fromCharCode(bytes[i+offset]&0xff);
		    }
		}else{
		    hibyte<<=8;
		    for(var i=count;i-->0;){
			value[i]=String.fromCharCode(hibyte|(bytes[i+offset]&0xff));
		    }
		}
		return value.join('');
	    default:
		var s="";
		for(var i=0;i<arguments.length;i++){
		    s+=arguments[i];
		}
		return s;
	    }
	};


	if(navigator.userAgent.toLowerCase().indexOf("chrome")!=-1){
	    String.prototype.toString=function(){
		return this;
	    };
	}

    }
    c$=$_C(function(){
	this.value=0;
	$_Z(this,arguments);
    },java.lang,"Character",null,[java.io.Serializable,Comparable]);
    $_K(c$,
	function(value){
	    this.value=value;
	},"~N");
    $_M(c$,"charValue",
	function(){
	    return this.value;
	});
    $_V(c$,"hashCode",
	function(){
	    return(this.value).charCodeAt(0);
	});
    $_V(c$,"equals",
	function(obj){
	    if($_O(obj,Character)){
		return(this.value).charCodeAt(0)==((obj).charValue()).charCodeAt(0);
	    }return false;
	},"~O");
    $_V(c$,"compareTo",
	function(c){
	    return(this.value).charCodeAt(0)-(c.value).charCodeAt(0);
	},"Character");
    c$.toLowerCase=$_M(c$,"toLowerCase",
		       function(c){
			   return(""+c).toLowerCase().charAt(0);
		       },"~N");
    c$.toUpperCase=$_M(c$,"toUpperCase",
		       function(c){
			   return(""+c).toUpperCase().charAt(0);
		       },"~N");
    c$.isDigit=$_M(c$,"isDigit",
		   function(c){
		       if(('0').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('9').charCodeAt(0))return true;
		       if((c).charCodeAt(0)<1632)return false;
		       return false;
		   },"~N");
    c$.isUpperCase=$_M(c$,"isUpperCase",
		       function(c){
			   if(('A').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('Z').charCodeAt(0)){
			       return true;
			   }return false;
		       },"~N");
    c$.isLowerCase=$_M(c$,"isLowerCase",
		       function(c){
			   if(('a').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('z').charCodeAt(0)){
			       return true;
			   }return false;
		       },"~N");
    c$.isWhitespace=$_M(c$,"isWhitespace",
			function(c){
			    if(((c).charCodeAt(0)>=0x1c&&(c).charCodeAt(0)<=0x20)||((c).charCodeAt(0)>=0x9&&(c).charCodeAt(0)<=0xd))return true;
			    if((c).charCodeAt(0)==0x1680)return true;
			    if((c).charCodeAt(0)<0x2000||(c).charCodeAt(0)==0x2007)return false;
			    return(c).charCodeAt(0)<=0x200b||(c).charCodeAt(0)==0x2028||(c).charCodeAt(0)==0x2029||(c).charCodeAt(0)==0x3000;
			},"~N");
    c$.isLetter=$_M(c$,"isLetter",
		    function(c){
			if((('A').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('Z').charCodeAt (0)) || (('a').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('z').charCodeAt(0)))return true;
			if((c).charCodeAt(0)<128)return false;
			return false;
		    },"~N");
    c$.isLetterOrDigit=$_M(c$,"isLetterOrDigit",
			   function(c){
			       return Character.isLetter(c)||Character.isDigit(c);
			   },"~N");
    c$.isSpaceChar=$_M(c$,"isSpaceChar",
		       function(c){
			   if((c).charCodeAt(0)==0x20||(c).charCodeAt(0)==0xa0||(c).charCodeAt(0)==0x1680)return true;
			   if((c).charCodeAt(0)<0x2000)return false;
			   return(c).charCodeAt(0)<=0x200b||(c).charCodeAt(0)==0x2028||(c).charCodeAt(0)==0x2029||(c).charCodeAt(0)==0x202f||(c).charCodeAt(0)==0x3000;
		       },"~N");
    c$.digit=$_M(c$,"digit",
		 function(c,radix){
		     if(radix>=2&&radix<=36){
			 if((c).charCodeAt(0)<128){
			     var result=-1;
			     if(('0').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('9').charCodeAt(0)){
				 result=(c).charCodeAt(0)-('0').charCodeAt(0);
			     }else if(('a').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('z').charCodeAt(0)){
				 result=(c).charCodeAt(0)-(87);
			     }else if(('A').charCodeAt (0) <= (c).charCodeAt (0) && (c).charCodeAt (0) <= ('Z').charCodeAt(0)){
				 result=(c).charCodeAt(0)-(55);
			     }return result<radix?result:-1;
			 }}return-1;
		 },"~N,~N");
    $_M(c$,"toString",
	function(){
	    var buf=[this.value];
	    return String.valueOf(buf);
	});
    c$.toString=$_M(c$,"toString",
		    function(c){
			{
			    if(this===Charater){
				return"class java.lang.Charater";
			    }
			}return String.valueOf(c);
		    },"~N");
    $_S(c$,
	"MIN_VALUE",'\u0000',
	"MAX_VALUE",'\uffff',
	"MIN_RADIX",2,
	"MAX_RADIX",36,
	"TYPE",null);

    java.lang.Character.TYPE=java.lang.Character.prototype.TYPE=java.lang.Character;
    Array.getComponentType=function(){
	return Object;
    };c$=$_T(java.lang.reflect,"Array");
    c$.newInstance=$_M(c$,"newInstance",
		       function(componentType,size){
			   return $_A(length);
		       },"Class,~N");

    java.util.Date=Date;
    Clazz.decorateAsType(java.util.Date,"java.util.Date",null,[java.io.Serializable,Cloneable,Comparable]);

    Clazz.defineMethod(java.util.Date,"clone",
		       function(){
			   return new Date(this.getTime());
		       });

    Clazz.defineMethod(java.util.Date,"before",
		       function(when){
			   return this.getTime()<when.getTime();
		       },"java.util.Date");
    Clazz.defineMethod(java.util.Date,"after",
		       function(when){
			   return this.getTime()>when.getTime();
		       },"java.util.Date");
    Clazz.defineMethod(java.util.Date,"equals",
		       function(obj){
			   return Clazz.instanceOf(obj,java.util.Date)&&this.getTime()==(obj).getTime();
		       },"Object");
    Clazz.defineMethod(java.util.Date,"compareTo",
		       function(anotherDate){
			   var thisTime=this.getTime();
			   var anotherTime=anotherDate.getTime();
			   return(thisTime<anotherTime?-1:(thisTime==anotherTime?0:1));
		       },"java.util.Date");
    Clazz.defineMethod(java.util.Date,"compareTo",
		       function(o){
			   return this.compareTo(o);
		       },"Object");
    Clazz.defineMethod(java.util.Date,"hashCode",
		       function(){
			   var ht=this.getTime();
			   return parseInt(ht)^parseInt((ht>>32));
		       });

    c$=$_C(function(){
	this.source=null;
	$_Z(this,arguments);
    },java.util,"EventObject",null,java.io.Serializable);
    $_K(c$,
	function(source){
	    if(source!=null)this.source=source;
	    else throw new IllegalArgumentException();
	},"~O");
    $_M(c$,"getSource",
	function(){
	    return this.source;
	});
    $_V(c$,"toString",
	function(){
	    return this.getClass().getName()+"[source="+String.valueOf(this.source)+']';
	});
    $_I(java.util,"EventListener");

    c$=$_C(function(){
	this.listener=null;
	$_Z(this,arguments);
    },java.util,"EventListenerProxy",null,java.util.EventListener);
    $_K(c$,
	function(listener){
	    this.listener=listener;
	},"java.util.EventListener");
    $_M(c$,"getListener",
	function(){
	    return this.listener;
	});
    $_I(java.util,"Iterator");

    $_I(java.util,"ListIterator",java.util.Iterator);
    $_I(java.util,"Enumeration");
    $_I(java.util,"Collection",Iterable);

    $_I(java.util,"Set",java.util.Collection);
    $_I(java.util,"Map");
    $_I(java.util.Map,"Entry");

    $_I(java.util,"List",java.util.Collection);

    $_I(java.util,"Queue",java.util.Collection);
    $_I(java.util,"RandomAccess");
    c$=$_C(function(){
	this.detailMessage=null;
	this.cause=null;
	this.stackTrace=null;
	$_Z(this,arguments);
    },java.lang,"Throwable",null,java.io.Serializable);
    $_Y(c$,function(){
	this.cause=this;
	//alert("e0 "+ arguments.callee.caller.caller.caller.caller.caller)
    });
    $_K(c$,
	function(){
	    this.fillInStackTrace();
	});
    $_K(c$,
	function(message){
	    this.fillInStackTrace();
	    this.detailMessage=message;
	},"~S");
    $_K(c$,
	function(message,cause){
	    this.fillInStackTrace();
	    this.detailMessage=message;
	    this.cause=cause;
	},"~S,Throwable");
    $_K(c$,
	function(cause){
	    this.fillInStackTrace();
	    this.detailMessage=(cause==null?null:cause.toString());
	    this.cause=cause;
	},"Throwable");
    $_M(c$,"getMessage",
	function(){
	    {
		if(typeof this.message!="undefined"){
		    return this.message;
		}
	    }return this.detailMessage;
	});
    $_M(c$,"getLocalizedMessage",
	function(){
	    return this.getMessage();
	});
    $_M(c$,"getCause",
	function(){
	    return(this.cause===this?null:this.cause);
	});
    $_M(c$,"initCause",
	function(cause){
	    if(this.cause!==this)throw new IllegalStateException("Can't overwrite cause");
	    if(cause===this)throw new IllegalArgumentException("Self-causation not permitted");
	    this.cause=cause;
	    return this;
	},"Throwable");
    $_V(c$,"toString",
	function(){
	    var s=this.getClass().getName();
	    var message=this.getLocalizedMessage();
	    return(message!=null)?(s+": "+message):s;
	});
    $_M(c$,"printStackTrace",
	function(){
	    System.err.println(this);
	    for(var i=0;i<this.stackTrace.length;i++){
		var t=this.stackTrace[i];
		var x=t.methodName.indexOf("(");
		var n=t.methodName.substring(0,x).replace(/\s+/g,"");
		if(n!="construct"||t.nativeClazz==null
		   ||Clazz.getInheritedLevel(t.nativeClazz,Throwable)<0){
		    System.err.println(t);
		}
	    }
	});
    $_M(c$,"printStackTrace",
	function(s){
	    this.printStackTrace();
	},"java.io.PrintStream");
    $_M(c$,"printStackTrace",
	function(s){
	    this.printStackTrace();
	},"java.io.PrintWriter");
    $_M(c$,"fillInStackTrace",
	function(){
	    this.stackTrace=new Array();
	    var caller=arguments.callee.caller;
	    var superCaller=null;
	    var callerList=new Array();
	    var index=Clazz.callingStackTraces.length-1;
	    var noLooping=true;
	    while(index>-1||caller!=null){
		var clazzName=null;
		var nativeClazz=null;
		if(!noLooping||caller==Clazz.tryToSearchAndExecute||caller==$_U||caller==null){
		    if(index<0){
			break;
		    }
		    noLooping=true;
		    superCaller=Clazz.callingStackTraces[index].caller;
		    nativeClazz=Clazz.callingStackTraces[index].owner;
		    index--;
		}else{
		    superCaller=caller;
		    if(superCaller.claxxOwner!=null){
			nativeClazz=superCaller.claxxOwner;
		    }else if(superCaller.exClazz!=null){
			nativeClazz=superCaller.exClazz;
		    }
		}
		var st=new StackTraceElement(
		    ((nativeClazz!=null&&nativeClazz.__CLASS_NAME__.length!=0)?
		     nativeClazz.__CLASS_NAME__:"anonymous"),
		    ((superCaller.exName==null)?"anonymous":superCaller.exName)
			+" ("+Clazz.getParamsType(superCaller.arguments)+")",
		    null,-1);
		st.nativeClazz=nativeClazz;
		this.stackTrace[this.stackTrace.length]=st;
		for(var i=0;i<callerList.length;i++){
		    if(callerList[i]==superCaller){

			var st=new StackTraceElement("lost","missing",null,-3);
			st.nativeClazz=null;
			this.stackTrace[this.stackTrace.length]=st;
			noLooping=false;

		    }
		}
		if(superCaller!=null){
		    callerList[callerList.length]=superCaller;
		}
		caller=superCaller.arguments.callee.caller;
	    }
	    Clazz.initializingException=false;
	    return this;
	});
    $_M(c$,"setStackTrace",
	function(stackTrace){
	    var defensiveCopy=stackTrace.clone();
	    for(var i=0;i<defensiveCopy.length;i++)if(defensiveCopy[i]==null)throw new NullPointerException("stackTrace["+i+"]");

	    this.stackTrace=defensiveCopy;
	},"~A");

    c$=$_C(function(){
	this.declaringClass=null;
	this.methodName=null;
	this.fileName=null;
	this.lineNumber=0;
	$_Z(this,arguments);
    },java.lang,"StackTraceElement",null,java.io.Serializable);
    $_K(c$,
	function(cls,method,file,line){
	    if(cls==null||method==null){
		throw new NullPointerException();
	    }this.declaringClass=cls;
	    this.methodName=method;
	    this.fileName=file;
	    this.lineNumber=line;
	},"~S,~S,~S,~N");
    $_V(c$,"equals",
	function(obj){
	    if(!($_O(obj,StackTraceElement))){
		return false;
	    }var castObj=obj;
	    if((this.methodName==null)||(castObj.methodName==null)){
		return false;
	    }if(!this.getMethodName().equals(castObj.getMethodName())){
		return false;
	    }if(!this.getClassName().equals(castObj.getClassName())){
		return false;
	    }var localFileName=this.getFileName();
	    if(localFileName==null){
		if(castObj.getFileName()!=null){
		    return false;
		}}else{
		    if(!localFileName.equals(castObj.getFileName())){
			return false;
		    }}if(this.getLineNumber()!=castObj.getLineNumber()){
			return false;
		    }return true;
	},"~O");
    $_M(c$,"getClassName",
	function(){
	    return(this.declaringClass==null)?"<unknown class>":this.declaringClass;
	});
    $_M(c$,"getFileName",
	function(){
	    return this.fileName;
	});
    $_M(c$,"getLineNumber",
	function(){
	    return this.lineNumber;
	});
    $_M(c$,"getMethodName",
	function(){
	    return(this.methodName==null)?"<unknown method>":this.methodName;
	});
    $_V(c$,"hashCode",
	function(){
	    if(this.methodName==null){
		return 0;
	    }return this.methodName.hashCode()^this.declaringClass.hashCode();
	});
    $_M(c$,"isNativeMethod",
	function(){
	    return this.lineNumber==-2;
	});
    $_V(c$,"toString",
	function(){
	    var buf=new StringBuilder(80);
	    buf.append(this.getClassName());
	    buf.append('.');
	    buf.append(this.getMethodName());
	    if(this.isNativeMethod()){
		buf.append("(Native Method)");
	    }else{
		var fName=this.getFileName();
		if(fName==null){
		    buf.append("(Unknown Source)");
		}else{
		    var lineNum=this.getLineNumber();
		    buf.append('(');
		    buf.append(fName);
		    if(lineNum>=0){
			buf.append(':');
			buf.append(lineNum);
		    }buf.append(')');
		}}return buf.toString();
	});

    c$=$_T(java.lang,"Error",Throwable);

    c$=$_T(java.lang,"LinkageError",Error);

    c$=$_T(java.lang,"IncompatibleClassChangeError",LinkageError);

    c$=$_T(java.lang,"AbstractMethodError",IncompatibleClassChangeError);

    c$=$_T(java.lang,"AssertionError",Error);
    $_K(c$,
	function(detailMessage){
	    $_R(this,AssertionError,[String.valueOf(detailMessage),($_O(detailMessage,Throwable)?detailMessage:null)]);
	},"~O");
    $_K(c$,
	function(detailMessage){
	    this.construct(String.valueOf(detailMessage));
	},"~B");
    $_K(c$,
	function(detailMessage){
	    this.construct(String.valueOf(detailMessage));
	},"~N");
    $_K(c$,
	function(detailMessage){
	    this.construct(Integer.toString(detailMessage));
	},"~N");
    $_K(c$,
	function(detailMessage){
	    this.construct(Long.toString(detailMessage));
	},"~N");
    $_K(c$,
	function(detailMessage){
	    this.construct(Float.toString(detailMessage));
	},"~N");
    $_K(c$,
	function(detailMessage){
	    this.construct(Double.toString(detailMessage));
	},"~N");

    c$=$_T(java.lang,"ClassCircularityError",LinkageError);

    c$=$_T(java.lang,"ClassFormatError",LinkageError);

    c$=$_C(function(){
	this.exception=null;
	$_Z(this,arguments);
    },java.lang,"ExceptionInInitializerError",LinkageError);
    $_K(c$,
	function(){
	    $_R(this,ExceptionInInitializerError);
	    this.initCause(null);
	});
    $_K(c$,
	function(detailMessage){
	    $_R(this,ExceptionInInitializerError,[detailMessage]);
	    this.initCause(null);
	},"~S");
    $_K(c$,
	function(exception){
	    $_R(this,ExceptionInInitializerError);
	    this.exception=exception;
	    this.initCause(exception);
	},"Throwable");
    $_M(c$,"getException",
	function(){
	    return this.exception;
	});
    $_V(c$,"getCause",
	function(){
	    return this.exception;
	});

    c$=$_T(java.lang,"IllegalAccessError",IncompatibleClassChangeError);

    c$=$_T(java.lang,"InstantiationError",IncompatibleClassChangeError);

    c$=$_T(java.lang,"VirtualMachineError",Error);

    c$=$_T(java.lang,"InternalError",VirtualMachineError);

    c$=$_T(java.lang,"NoClassDefFoundError",LinkageError);

    c$=$_T(java.lang,"NoSuchFieldError",IncompatibleClassChangeError);

    c$=$_T(java.lang,"NoSuchMethodError",IncompatibleClassChangeError);

    c$=$_T(java.lang,"OutOfMemoryError",VirtualMachineError);

    c$=$_T(java.lang,"StackOverflowError",VirtualMachineError);

    c$=$_T(java.lang,"UnknownError",VirtualMachineError);

    c$=$_T(java.lang,"UnsatisfiedLinkError",LinkageError);

    c$=$_T(java.lang,"UnsupportedClassVersionError",ClassFormatError);

    c$=$_T(java.lang,"VerifyError",LinkageError);

    c$=$_T(java.lang,"ThreadDeath",Error);
    $_K(c$,
	function(){
	    $_R(this,ThreadDeath,[]);
	});

    c$=$_T(java.lang,"Exception",Throwable);

    c$=$_T(java.lang,"RuntimeException",Exception);

    c$=$_T(java.lang,"ArithmeticException",RuntimeException);

    c$=$_T(java.lang,"IndexOutOfBoundsException",RuntimeException);

    c$=$_T(java.lang,"ArrayIndexOutOfBoundsException",IndexOutOfBoundsException);
    $_K(c$,
	function(index){
	    $_R(this,ArrayIndexOutOfBoundsException,["Array index out of range: "+index]);
	},"~N");

    c$=$_T(java.lang,"ArrayStoreException",RuntimeException);

    c$=$_T(java.lang,"ClassCastException",RuntimeException);

    c$=$_C(function(){
	this.ex=null;
	$_Z(this,arguments);
    },java.lang,"ClassNotFoundException",Exception);
    $_K(c$,
	function(){
	    $_R(this,ClassNotFoundException,[Clazz.castNullAs("Throwable")]);
	});
    $_K(c$,
	function(detailMessage){
	    $_R(this,ClassNotFoundException,[detailMessage,null]);
	},"~S");
    $_K(c$,
	function(detailMessage,exception){
	    $_R(this,ClassNotFoundException,[detailMessage]);
	    this.ex=exception;
	},"~S,Throwable");
    $_M(c$,"getException",
	function(){
	    return this.ex;
	});
    $_V(c$,"getCause",
	function(){
	    return this.ex;
	});

    c$=$_T(java.lang,"CloneNotSupportedException",Exception);

    c$=$_T(java.lang,"IllegalAccessException",Exception);

    c$=$_T(java.lang,"IllegalArgumentException",RuntimeException);
    $_K(c$,
	function(cause){
	    $_R(this,IllegalArgumentException,[(cause==null?null:cause.toString()),cause]);
	},"Throwable");

    c$=$_T(java.lang,"IllegalMonitorStateException",RuntimeException);

    c$=$_T(java.lang,"IllegalStateException",RuntimeException);
    $_K(c$,
	function(cause){
	    $_R(this,IllegalStateException,[(cause==null?null:cause.toString()),cause]);
	},"Throwable");

    c$=$_T(java.lang,"IllegalThreadStateException",IllegalArgumentException);

    c$=$_T(java.lang,"InstantiationException",Exception);

    c$=$_T(java.lang,"InterruptedException",Exception);

    c$=$_T(java.lang,"NegativeArraySizeException",RuntimeException);

    c$=$_T(java.lang,"NoSuchFieldException",Exception);

    c$=$_T(java.lang,"NoSuchMethodException",Exception);

    c$=$_T(java.lang,"NullPointerException",RuntimeException);

    c$=$_T(java.lang,"NumberFormatException",IllegalArgumentException);

    c$=$_T(java.lang,"SecurityException",RuntimeException);
    $_K(c$,
	function(cause){
	    $_R(this,SecurityException,[(cause==null?null:cause.toString()),cause]);
	},"Throwable");

    c$=$_T(java.lang,"StringIndexOutOfBoundsException",IndexOutOfBoundsException);
    $_K(c$,
	function(index){
	    $_R(this,StringIndexOutOfBoundsException,["String index out of range: "+index]);
	},"~N");

    c$=$_T(java.lang,"UnsupportedOperationException",RuntimeException);
    $_K(c$,
	function(){
	    $_R(this,UnsupportedOperationException,[]);
	});
    $_K(c$,
	function(cause){
	    $_R(this,UnsupportedOperationException,[(cause==null?null:cause.toString()),cause]);
	},"Throwable");

    c$=$_C(function(){
	this.target=null;
	$_Z(this,arguments);
    },java.lang.reflect,"InvocationTargetException",Exception);
    $_K(c$,
	function(){
	    $_R(this,java.lang.reflect.InvocationTargetException,[Clazz.castNullAs("Throwable")]);
	});
    $_K(c$,
	function(exception){
	    $_R(this,java.lang.reflect.InvocationTargetException,[null,exception]);
	    this.target=exception;
	},"Throwable");
    $_K(c$,
	function(exception,detailMessage){
	    $_R(this,java.lang.reflect.InvocationTargetException,[detailMessage,exception]);
	    this.target=exception;
	},"Throwable,~S");
    $_M(c$,"getTargetException",
	function(){
	    return this.target;
	});
    $_V(c$,"getCause",
	function(){
	    return this.target;
	});

    c$=$_C(function(){
	this.undeclaredThrowable=null;
	$_Z(this,arguments);
    },java.lang.reflect,"UndeclaredThrowableException",RuntimeException);
    $_K(c$,
	function(exception){
	    $_R(this,java.lang.reflect.UndeclaredThrowableException);
	    this.undeclaredThrowable=exception;
	    this.initCause(exception);
	},"Throwable");
    $_K(c$,
	function(exception,detailMessage){
	    $_R(this,java.lang.reflect.UndeclaredThrowableException,[detailMessage]);
	    this.undeclaredThrowable=exception;
	    this.initCause(exception);
	},"Throwable,~S");
    $_M(c$,"getUndeclaredThrowable",
	function(){
	    return this.undeclaredThrowable;
	});
    $_V(c$,"getCause",
	function(){
	    return this.undeclaredThrowable;
	});

    c$=$_T(java.io,"IOException",Exception);


    c$=$_T(java.io,"CharConversionException",java.io.IOException);

    c$=$_T(java.io,"EOFException",java.io.IOException);

    c$=$_T(java.io,"FileNotFoundException",java.io.IOException);

    c$=$_C(function(){
	this.bytesTransferred=0;
	$_Z(this,arguments);
    },java.io,"InterruptedIOException",java.io.IOException);

    c$=$_T(java.io,"ObjectStreamException",java.io.IOException);

    c$=$_C(function(){
	this.classname=null;
	$_Z(this,arguments);
    },java.io,"InvalidClassException",java.io.ObjectStreamException);
    $_K(c$,
	function(className,detailMessage){
	    $_R(this,java.io.InvalidClassException,[detailMessage]);
	    this.classname=className;
	},"~S,~S");
    $_M(c$,"getMessage",
	function(){
	    var msg=$_U(this,java.io.InvalidClassException,"getMessage",[]);
	    if(this.classname!=null){
		msg=this.classname+';' + ' '+msg;
	    }return msg;
	});

    c$=$_T(java.io,"InvalidObjectException",java.io.ObjectStreamException);

    c$=$_T(java.io,"NotActiveException",java.io.ObjectStreamException);

    c$=$_T(java.io,"NotSerializableException",java.io.ObjectStreamException);

    c$=$_C(function(){
	this.eof=false;
	this.length=0;
	$_Z(this,arguments);
    },java.io,"OptionalDataException",java.io.ObjectStreamException);

    c$=$_T(java.io,"StreamCorruptedException",java.io.ObjectStreamException);

    c$=$_T(java.io,"SyncFailedException",java.io.IOException);

    c$=$_T(java.io,"UnsupportedEncodingException",java.io.IOException);

    c$=$_T(java.io,"UTFDataFormatException",java.io.IOException);

    c$=$_C(function(){
	this.detail=null;
	$_Z(this,arguments);
    },java.io,"WriteAbortedException",java.io.ObjectStreamException);
    $_K(c$,
	function(detailMessage,rootCause){
	    $_R(this,java.io.WriteAbortedException,[detailMessage]);
	    this.detail=rootCause;
	    this.initCause(rootCause);
	},"~S,Exception");
    $_M(c$,"getMessage",
	function(){
	    var msg=$_U(this,java.io.WriteAbortedException,"getMessage",[]);
	    if(this.detail!=null){
		msg=msg+"; "+this.detail.toString();
	    }return msg;
	});
    $_V(c$,"getCause",
	function(){
	    return this.detail;
	});

    c$=$_T(java.util,"ConcurrentModificationException",RuntimeException);
    $_K(c$,
	function(){
	    $_R(this,java.util.ConcurrentModificationException,[]);
	});

    c$=$_T(java.util,"EmptyStackException",RuntimeException);

    c$=$_C(function(){
	this.className=null;
	this.key=null;
	$_Z(this,arguments);
    },java.util,"MissingResourceException",RuntimeException);
    $_K(c$,
	function(detailMessage,className,resourceName){
	    $_R(this,java.util.MissingResourceException,[detailMessage]);
	    this.className=className;
	    this.key=resourceName;
	},"~S,~S,~S");
    $_M(c$,"getClassName",
	function(){
	    return this.className;
	});
    $_M(c$,"getKey",
	function(){
	    return this.key;
	});

    c$=$_T(java.util,"NoSuchElementException",RuntimeException);

    c$=$_T(java.util,"TooManyListenersException",Exception);

    c$=$_T(java.lang,"Void");
    $_S(c$,
	"TYPE",null);
    {
	java.lang.Void.TYPE=java.lang.Void;
    }$_I(java.lang.reflect,"GenericDeclaration");
    $_I(java.lang.reflect,"AnnotatedElement");

    c$=$_T(java.lang.reflect,"AccessibleObject",null,java.lang.reflect.AnnotatedElement);
    $_K(c$,
	function(){
	});
    $_M(c$,"isAccessible",
	function(){
	    return false;
	});
    c$.setAccessible=$_M(c$,"setAccessible",
			 function(objects,flag){
			     return;
			 },"~A,~B");
    $_M(c$,"setAccessible",
	function(flag){
	    return;
	},"~B");
    $_V(c$,"isAnnotationPresent",
	function(annotationType){
	    return false;
	},"Class");
    $_V(c$,"getDeclaredAnnotations",
	function(){
	    return new Array(0);
	});
    $_V(c$,"getAnnotations",
	function(){
	    return new Array(0);
	});
    $_V(c$,"getAnnotation",
	function(annotationType){
	    return null;
	},"Class");
    c$.marshallArguments=$_M(c$,"marshallArguments",
			     function(parameterTypes,args){
				 return null;
			     },"~A,~A");
    $_M(c$,"invokeV",
	function(receiver,args){
	    return;
	},"~O,~A");
    $_M(c$,"invokeL",
	function(receiver,args){
	    return null;
	},"~O,~A");
    $_M(c$,"invokeI",
	function(receiver,args){
	    return 0;
	},"~O,~A");
    $_M(c$,"invokeJ",
	function(receiver,args){
	    return 0;
	},"~O,~A");
    $_M(c$,"invokeF",
	function(receiver,args){
	    return 0.0;
	},"~O,~A");
    $_M(c$,"invokeD",
	function(receiver,args){
	    return 0.0;
	},"~O,~A");
    c$.emptyArgs=c$.prototype.emptyArgs=new Array(0);
    $_I(java.lang.reflect,"InvocationHandler");
    c$=$_I(java.lang.reflect,"Member");
    $_S(c$,
	"PUBLIC",0,
	"DECLARED",1);

    c$=$_T(java.lang.reflect,"Modifier");
    $_K(c$,
	function(){
	});
    c$.isAbstract=$_M(c$,"isAbstract",
		      function(modifiers){
			  return((modifiers&1024)!=0);
		      },"~N");
    c$.isFinal=$_M(c$,"isFinal",
		   function(modifiers){
		       return((modifiers&16)!=0);
		   },"~N");
    c$.isInterface=$_M(c$,"isInterface",
		       function(modifiers){
			   return((modifiers&512)!=0);
		       },"~N");
    c$.isNative=$_M(c$,"isNative",
		    function(modifiers){
			return((modifiers&256)!=0);
		    },"~N");
    c$.isPrivate=$_M(c$,"isPrivate",
		     function(modifiers){
			 return((modifiers&2)!=0);
		     },"~N");
    c$.isProtected=$_M(c$,"isProtected",
		       function(modifiers){
			   return((modifiers&4)!=0);
		       },"~N");
    c$.isPublic=$_M(c$,"isPublic",
		    function(modifiers){
			return((modifiers&1)!=0);
		    },"~N");
    c$.isStatic=$_M(c$,"isStatic",
		    function(modifiers){
			return((modifiers&8)!=0);
		    },"~N");
    c$.isStrict=$_M(c$,"isStrict",
		    function(modifiers){
			return((modifiers&2048)!=0);
		    },"~N");
    c$.isSynchronized=$_M(c$,"isSynchronized",
			  function(modifiers){
			      return((modifiers&32)!=0);
			  },"~N");
    c$.isTransient=$_M(c$,"isTransient",
		       function(modifiers){
			   return((modifiers&128)!=0);
		       },"~N");
    c$.isVolatile=$_M(c$,"isVolatile",
		      function(modifiers){
			  return((modifiers&64)!=0);
		      },"~N");
    c$.toString=$_M(c$,"toString",
		    function(modifiers){
			var sb=new Array(0);
			if(java.lang.reflect.Modifier.isPublic(modifiers))sb[sb.length]="public";
			if(java.lang.reflect.Modifier.isProtected(modifiers))sb[sb.length]="protected";
			if(java.lang.reflect.Modifier.isPrivate(modifiers))sb[sb.length]="private";
			if(java.lang.reflect.Modifier.isAbstract(modifiers))sb[sb.length]="abstract";
			if(java.lang.reflect.Modifier.isStatic(modifiers))sb[sb.length]="static";
			if(java.lang.reflect.Modifier.isFinal(modifiers))sb[sb.length]="final";
			if(java.lang.reflect.Modifier.isTransient(modifiers))sb[sb.length]="transient";
			if(java.lang.reflect.Modifier.isVolatile(modifiers))sb[sb.length]="volatile";
			if(java.lang.reflect.Modifier.isSynchronized(modifiers))sb[sb.length]="synchronized";
			if(java.lang.reflect.Modifier.isNative(modifiers))sb[sb.length]="native";
			if(java.lang.reflect.Modifier.isStrict(modifiers))sb[sb.length]="strictfp";
			if(java.lang.reflect.Modifier.isInterface(modifiers))sb[sb.length]="interface";
			if(sb.length>0){
			    return sb.join(" ");
			}return"";
		    },"~N");
    $_S(c$,
	"PUBLIC",0x1,
	"PRIVATE",0x2,
	"PROTECTED",0x4,
	"STATIC",0x8,
	"FINAL",0x10,
	"SYNCHRONIZED",0x20,
	"VOLATILE",0x40,
	"TRANSIENT",0x80,
	"NATIVE",0x100,
	"INTERFACE",0x200,
	"ABSTRACT",0x400,
	"STRICT",0x800,
	"BRIDGE",0x40,
	"VARARGS",0x80,
	"SYNTHETIC",0x1000,
	"ANNOTATION",0x2000,
	"ENUM",0x4000);

    c$=$_C(function(){
	this.clazz=null;
	this.parameterTypes=null;
	this.exceptionTypes=null;
	this.modifiers=0;
	$_Z(this,arguments);
    },java.lang.reflect,"Constructor",java.lang.reflect.AccessibleObject,[java.lang.reflect.GenericDeclaration,java.lang.reflect.Member]);
    $_K(c$,
	function(declaringClass,parameterTypes,checkedExceptions,modifiers){
	    $_R(this,java.lang.reflect.Constructor,[]);
	    this.clazz=declaringClass;
	    this.parameterTypes=parameterTypes;
	    this.exceptionTypes=checkedExceptions;
	    this.modifiers=modifiers;
	},"Class,~A,~A,~N");
    $_V(c$,"getTypeParameters",
	function(){
	    return null;
	});
    $_M(c$,"toGenericString",
	function(){
	    return null;
	});
    $_M(c$,"getGenericParameterTypes",
	function(){
	    return null;
	});
    $_M(c$,"getGenericExceptionTypes",
	function(){
	    return null;
	});
    $_M(c$,"getParameterAnnotations",
	function(){
	    return null;
	});
    $_M(c$,"isVarArgs",
	function(){
	    return false;
	});
    $_V(c$,"isSynthetic",
	function(){
	    return false;
	});
    $_V(c$,"equals",
	function(object){
	    if(object!=null&&$_O(object,java.lang.reflect.Constructor)){
		var other=object;
		if(this.getDeclaringClass()===other.getDeclaringClass()){
		    var params1=this.parameterTypes;
		    var params2=other.parameterTypes;
		    if(params1.length==params2.length){
			for(var i=0;i<params1.length;i++){
			    if(params1[i]!==params2[i])return false;
			}
			return true;
		    }}}return false;
	},"~O");
    $_V(c$,"getDeclaringClass",
	function(){
	    return this.clazz;
	});
    $_M(c$,"getExceptionTypes",
	function(){
	    return this.exceptionTypes;
	});
    $_V(c$,"getModifiers",
	function(){
	    return this.modifiers;
	});
    $_V(c$,"getName",
	function(){
	    return this.getDeclaringClass().getName();
	});
    $_M(c$,"getParameterTypes",
	function(){
	    return this.parameterTypes;
	});
    $_V(c$,"hashCode",
	function(){
	    return this.getDeclaringClass().getName().hashCode();
	});
    $_M(c$,"newInstance",
	function(args){
	    var instance=new this.clazz($_G);
	    $_Z(instance,args);
	    return instance;
	},"~A");
    $_V(c$,"toString",
	function(){
	    return null;
	});

    c$=$_T(java.lang.reflect,"Field",java.lang.reflect.AccessibleObject,java.lang.reflect.Member);
    $_V(c$,"isSynthetic",
	function(){
	    return false;
	});
    $_M(c$,"toGenericString",
	function(){
	    return null;
	});
    $_M(c$,"isEnumConstant",
	function(){
	    return false;
	});
    $_M(c$,"getGenericType",
	function(){
	    return null;
	});
    $_V(c$,"equals",
	function(object){
	    return false;
	},"~O");
    $_V(c$,"getDeclaringClass",
	function(){
	    return null;
	});
    $_V(c$,"getName",
	function(){
	    return null;
	});
    $_M(c$,"getType",
	function(){
	    return null;
	});
    $_V(c$,"hashCode",
	function(){
	    return 0;
	});
    $_V(c$,"toString",
	function(){
	    return null;
	});

    c$=$_C(function(){
	this.clazz=null;
	this.name=null;
	this.returnType=null;
	this.parameterTypes=null;
	this.exceptionTypes=null;
	this.modifiers=0;
	$_Z(this,arguments);
    },java.lang.reflect,"Method",java.lang.reflect.AccessibleObject,[java.lang.reflect.GenericDeclaration,java.lang.reflect.Member]);
    $_K(c$,
	function(declaringClass,name,parameterTypes,returnType,checkedExceptions,modifiers){
	    $_R(this,java.lang.reflect.Method,[]);
	    this.clazz=declaringClass;
	    this.name=name;
	    this.parameterTypes=parameterTypes;
	    this.returnType=returnType;
	    this.exceptionTypes=checkedExceptions;
	    this.modifiers=modifiers;
	},"Class,~S,~A,Class,~A,~N");
    $_V(c$,"getTypeParameters",
	function(){
	    return null;
	});
    $_M(c$,"toGenericString",
	function(){
	    return null;
	});
    $_M(c$,"getGenericParameterTypes",
	function(){
	    return null;
	});
    $_M(c$,"getGenericExceptionTypes",
	function(){
	    return null;
	});
    $_M(c$,"getGenericReturnType",
	function(){
	    return null;
	});
    $_M(c$,"getParameterAnnotations",
	function(){
	    return null;
	});
    $_M(c$,"isVarArgs",
	function(){
	    return false;
	});
    $_M(c$,"isBridge",
	function(){
	    return false;
	});
    $_V(c$,"isSynthetic",
	function(){
	    return false;
	});
    $_M(c$,"getDefaultValue",
	function(){
	    return null;
	});
    $_V(c$,"equals",
	function(object){
	    if(object!=null&&$_O(object,java.lang.reflect.Method)){
		var other=object;
		if((this.getDeclaringClass()===other.getDeclaringClass())&&(this.getName()===other.getName())){
		    var params1=this.parameterTypes;
		    var params2=other.parameterTypes;
		    if(params1.length==params2.length){
			for(var i=0;i<params1.length;i++){
			    if(params1[i]!==params2[i])return false;
			}
			return true;
		    }}}return false;
	},"~O");
    $_V(c$,"getDeclaringClass",
	function(){
	    return this.clazz;
	});
    $_M(c$,"getExceptionTypes",
	function(){
	    return this.exceptionTypes;
	});
    $_V(c$,"getModifiers",
	function(){
	    return this.modifiers;
	});
    $_V(c$,"getName",
	function(){
	    return this.name;
	});
    $_M(c$,"getParameterTypes",
	function(){
	    return this.parameterTypes;
	});
    $_M(c$,"getReturnType",
	function(){
	    return this.returnType;
	});
    $_V(c$,"hashCode",
	function(){
	    return this.getDeclaringClass().getName().hashCode()^this.getName().hashCode();
	});
    $_M(c$,"invoke",
	function(receiver,args){
	    var m=this.clazz.prototype[this.getName()];
	    if(m==null){
		m=this.clazz[this.getName()];
	    }
	    if(m!=null){
		m.apply(receiver,args);
	    }else{

	    }
	},"~O,~A");
    $_V(c$,"toString",
	function(){
	    return null;
	});
    $_J("java.net");
    c$=$_T(java.net,"URLEncoder");
    c$.encode=$_M(c$,"encode",
		  function(s){
		      return encodeURIComponent(arguments[0]);
		  },"~S");
    c$.encode=$_M(c$,"encode",
		  function(s,enc){
		      return encodeURIComponent(arguments[0]);
		  },"~S,~S");
    $_S(c$,
	"digits","0123456789ABCDEF");

    c$=$_T(java.net,"MalformedURLException",java.io.IOException);




    $_J("java.net");
    $_L(null,"java.net.URLDecoder",["java.lang.NullPointerException"],function(){
	c$=$_T(java.net,"URLDecoder");
	c$.decode=$_M(c$,"decode",
		      function(s){
			  return decodeURIComponent(arguments[0]);
		      },"~S");
	c$.decode=$_M(c$,"decode",
		      function(s,enc){
			  if(enc==null){
			      throw new NullPointerException();
			  }{
			      return decodeURIComponent(arguments[0]);
			  }return null;
		      },"~S,~S");
    });

    Clazz.declarePackage ("java.net");
    Clazz.declareInterface (java.net, "URLStreamHandlerFactory");

    Clazz.declarePackage ("java.net");
    Clazz.load (null, "java.net.URLStreamHandler", ["java.lang.IllegalArgumentException", "$.SecurityException", "$.StringBuffer", "$.UnsupportedOperationException"], function () {
	c$ = Clazz.declareType (java.net, "URLStreamHandler");
	Clazz.defineMethod (c$, "openConnection",
			    function (u, p) {
				throw  new UnsupportedOperationException ("Method not implemented.");
			    }, "java.net.URL,java.net.Proxy");
	Clazz.defineMethod (c$, "parseURL",
			    function (u, spec, start, limit) {
				var protocol = u.getProtocol ();
				var authority = u.getAuthority ();
				var userInfo = u.getUserInfo ();
				var host = u.getHost ();
				var port = u.getPort ();
				var path = u.getPath ();
				var query = u.getQuery ();
				var ref = u.getRef ();
				var isRelPath = false;
				var queryOnly = false;
				if (start < limit) {
				    var queryStart = spec.indexOf ('?');
				    queryOnly = queryStart == start;
				    if ((queryStart != -1) && (queryStart < limit)) {
					query = spec.substring (queryStart + 1, limit);
					if (limit > queryStart) limit = queryStart;
					spec = spec.substring (0, queryStart);
				    }}var i = 0;
				var isUNCName = (start <= limit - 4) && ((spec.charAt (start)).charCodeAt (0) == ('/').charCodeAt (0)) && ((spec.charAt (start + 1)).charCodeAt (0) == ('/').charCodeAt (0)) && ((spec.charAt (start + 2)).charCodeAt (0) == ('/').charCodeAt (0)) && ((spec.charAt (start + 3)).charCodeAt (0) == ('/').charCodeAt (0));
				if (!isUNCName && (start <= limit - 2) && ((spec.charAt (start)).charCodeAt (0) == ('/').charCodeAt (0)) && ((spec.charAt (start + 1)).charCodeAt (0) == ('/').charCodeAt (0))) {
				    start += 2;
				    i = spec.indexOf ('/', start);
				    if (i < 0) {
					i = spec.indexOf ('?', start);
					if (i < 0) i = limit;
				    }host = authority = spec.substring (start, i);
				    var ind = authority.indexOf ('@');
				    if (ind != -1) {
					userInfo = authority.substring (0, ind);
					host = authority.substring (ind + 1);
				    } else {
					userInfo = null;
				    }if (host != null) {
					if (host.length > 0 && ((host.charAt (0)).charCodeAt (0) == ('[').charCodeAt (0))) {
					    throw  new IllegalArgumentException ("Invalid host: " + host);
					} else {
					    ind = host.indexOf (':');
					    port = -1;
					    if (ind >= 0) {
						if (host.length > (ind + 1)) {
						    port = Integer.parseInt (host.substring (ind + 1));
						}host = host.substring (0, ind);
					    }}} else {
						host = "";
					    }if (port < -1) throw  new IllegalArgumentException ("Invalid port number :" + port);
				    start = i;
				    if (authority != null && authority.length > 0) path = "";
				}if (host == null) {
				    host = "";
				}if (start < limit) {
				    if ((spec.charAt (start)).charCodeAt (0) == ('/').charCodeAt (0)) {
					path = spec.substring (start, limit);
				    } else if (path != null && path.length > 0) {
					isRelPath = true;
					var ind = path.lastIndexOf ('/');
					var seperator = "";
					if (ind == -1 && authority != null) seperator = "/";
					path = path.substring (0, ind + 1) + seperator + spec.substring (start, limit);
				    } else {
					var seperator = (authority != null) ? "/" : "";
					path = seperator + spec.substring (start, limit);
				    }} else if (queryOnly && path != null) {
					var ind = path.lastIndexOf ('/');
					if (ind < 0) ind = 0;
					path = path.substring (0, ind) + "/";
				    }if (path == null) path = "";
				if (isRelPath) {
				    while ((i = path.indexOf ("/./")) >= 0) {
					path = path.substring (0, i) + path.substring (i + 2);
				    }
				    i = 0;
				    while ((i = path.indexOf ("/../", i)) >= 0) {
					if (i > 0 && (limit = path.lastIndexOf ('/', i - 1)) >= 0 && (path.indexOf ("/../", limit) != 0)) {
					    path = path.substring (0, limit) + path.substring (i + 3);
					    i = 0;
					} else {
					    i = i + 3;
					}}
				    while (path.endsWith ("/..")) {
					i = path.indexOf ("/..");
					if ((limit = path.lastIndexOf ('/', i - 1)) >= 0) {
					    path = path.substring (0, limit + 1);
					} else {
					    break;
					}}
				    if (path.startsWith ("./") && path.length > 2) path = path.substring (2);
				    if (path.endsWith ("/.")) path = path.substring (0, path.length - 1);
				}this.setURL (u, protocol, host, port, authority, userInfo, path, query, ref);
			    }, "java.net.URL,~S,~N,~N");
	Clazz.defineMethod (c$, "getDefaultPort",
			    function () {
				return -1;
			    });
	Clazz.defineMethod (c$, "equals",
			    function (u1, u2) {
				var ref1 = u1.getRef ();
				var ref2 = u2.getRef ();
				return (ref1 === ref2 || (ref1 != null && ref1.equals (ref2))) && this.sameFile (u1, u2);
			    }, "java.net.URL,java.net.URL");
	Clazz.defineMethod (c$, "hashCode",
			    function (u) {
				var h = 0;
				var protocol = u.getProtocol ();
				if (protocol != null) h += protocol.hashCode ();
				h += u.toString ().hashCode ();
				var file = u.getFile ();
				if (file != null) h += file.hashCode ();
				if (u.getPort () == -1) h += this.getDefaultPort ();
				else h += u.getPort ();
				var ref = u.getRef ();
				if (ref != null) h += ref.hashCode ();
				return h;
			    }, "java.net.URL");
	Clazz.defineMethod (c$, "sameFile",
			    function (u1, u2) {
				if (!((u1.getProtocol () === u2.getProtocol ()) || (u1.getProtocol () != null && u1.getProtocol ().equalsIgnoreCase (u2.getProtocol ())))) return false;
				if (!(u1.getFile () === u2.getFile () || (u1.getFile () != null && u1.getFile ().equals (u2.getFile ())))) return false;
				var port1;
				var port2;
				port1 = (u1.getPort () != -1) ? u1.getPort () : u1.handler.getDefaultPort ();
				port2 = (u2.getPort () != -1) ? u2.getPort () : u2.handler.getDefaultPort ();
				if (port1 != port2) return false;
				if (!this.hostsEqual (u1, u2)) return false;
				return true;
			    }, "java.net.URL,java.net.URL");
	Clazz.defineMethod (c$, "hostsEqual",
			    function (u1, u2) {
				if (u1.getHost () != null && u2.getHost () != null) return u1.getHost ().equalsIgnoreCase (u2.getHost ());
				else return u1.getHost () == null && u2.getHost () == null;
			    }, "java.net.URL,java.net.URL");
	Clazz.defineMethod (c$, "toExternalForm",
			    function (u) {
				var len = u.getProtocol ().length + 1;
				if (u.getAuthority () != null && u.getAuthority ().length > 0) len += 2 + u.getAuthority ().length;
				if (u.getPath () != null) {
				    len += u.getPath ().length;
				}if (u.getQuery () != null) {
				    len += 1 + u.getQuery ().length;
				}if (u.getRef () != null) len += 1 + u.getRef ().length;
				var result =  new StringBuffer (len);
				result.append (u.getProtocol ());
				result.append (":");
				if (u.getAuthority () != null && u.getAuthority ().length > 0) {
				    result.append ("//");
				    result.append (u.getAuthority ());
				}if (u.getPath () != null) {
				    result.append (u.getPath ());
				}if (u.getQuery () != null) {
				    result.append ('?');
				    result.append (u.getQuery ());
				}if (u.getRef () != null) {
				    result.append ("#");
				    result.append (u.getRef ());
				}return result.toString ();
			    }, "java.net.URL");
	Clazz.defineMethod (c$, "setURL",
			    function (u, protocol, host, port, authority, userInfo, path, query, ref) {
				if (this !== u.handler) {
				    throw  new SecurityException ("handler for url different from this handler");
				}u.set (u.getProtocol (), host, port, authority, userInfo, path, query, ref);
			    }, "java.net.URL,~S,~S,~N,~S,~S,~S,~S,~S");
	Clazz.defineMethod (c$, "setURL",
			    function (u, protocol, host, port, file, ref) {
				var authority = null;
				var userInfo = null;
				if (host != null && host.length != 0) {
				    authority = (port == -1) ? host : host + ":" + port;
				    var at = host.lastIndexOf ('@');
				    if (at != -1) {
					userInfo = host.substring (0, at);
					host = host.substring (at + 1);
				    }}var path = null;
				var query = null;
				if (file != null) {
				    var q = file.lastIndexOf ('?');
				    if (q != -1) {
					query = file.substring (q + 1);
					path = file.substring (0, q);
				    } else path = file;
				}this.setURL (u, protocol, host, port, authority, userInfo, path, query, ref);
			    }, "java.net.URL,~S,~S,~N,~S,~S");
    });

    Clazz.declarePackage ("java.net");
    c$ = Clazz.decorateAsClass (function () {
	this.path = null;
	this.query = null;
	this.ref = null;
	Clazz.instantialize (this, arguments);
    }, java.net, "Parts");
    Clazz.makeConstructor (c$,
			   function (file) {
			       var ind = file.indexOf ('#');
			       this.ref = ind < 0 ? null : file.substring (ind + 1);
			       file = ind < 0 ? file : file.substring (0, ind);
			       var q = file.lastIndexOf ('?');
			       if (q != -1) {
				   this.query = file.substring (q + 1);
				   this.path = file.substring (0, q);
			       } else {
				   this.path = file;
			       }}, "~S");
    Clazz.defineMethod (c$, "getPath",
			function () {
			    return this.path;
			});
    Clazz.defineMethod (c$, "getQuery",
			function () {
			    return this.query;
			});
    Clazz.defineMethod (c$, "getRef",
			function () {
			    return this.ref;
			});

    Clazz.declarePackage ("java.net");
    Clazz.load (["java.util.Hashtable"], "java.net.URL", ["java.io.IOException", "java.lang.Character", "$.Error", "java.net.MalformedURLException", "$.Parts"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.protocol = null;
	    this.host = null;
	    this.port = -1;
	    this.file = null;
	    this.query = null;
	    this.authority = null;
	    this.path = null;
	    this.userInfo = null;
	    this.ref = null;
	    this.handler = null;
	    this.$hashCode = -1;
	    Clazz.instantialize (this, arguments);
	}, java.net, "URL", null, java.io.Serializable);
	Clazz.makeConstructor (c$,
			       function (protocol, host, port, file) {
				   this.construct (protocol, host, port, file, null);
			       }, "~S,~S,~N,~S");
	Clazz.makeConstructor (c$,
			       function (protocol, host, file) {
				   this.construct (protocol, host, -1, file);
			       }, "~S,~S,~S");
	Clazz.makeConstructor (c$,
			       function (protocol, host, port, file, handler) {
				   if (handler != null) {
				       var sm = System.getSecurityManager ();
				       if (sm != null) {
					   this.checkSpecifyHandler (sm);
				       }}protocol = protocol.toLowerCase ();
				   this.protocol = protocol;
				   if (host != null) {
				       if (host.indexOf (':') >= 0 && !host.startsWith ("[")) {
					   host = "[" + host + "]";
				       }this.host = host;
				       if (port < -1) {
					   throw  new java.net.MalformedURLException ("Invalid port number :" + port);
				       }this.port = port;
				       this.authority = (port == -1) ? host : host + ":" + port;
				   }var parts =  new java.net.Parts (file);
				   this.path = parts.getPath ();
				   this.query = parts.getQuery ();
				   if (this.query != null) {
				       this.file = this.path + "?" + this.query;
				   } else {
				       this.file = this.path;
				   }this.ref = parts.getRef ();
				   if (handler == null && (handler = java.net.URL.getURLStreamHandler (protocol)) == null) {
				       throw  new java.net.MalformedURLException ("unknown protocol: " + protocol);
				   }this.handler = handler;
			       }, "~S,~S,~N,~S,java.net.URLStreamHandler");
	Clazz.makeConstructor (c$,
			       function (spec) {
				   this.construct (null, spec);
			       }, "~S");
	Clazz.makeConstructor (c$,
			       function (context, spec) {
				   this.construct (context, spec, null);
			       }, "java.net.URL,~S");
	Clazz.makeConstructor (c$,
			       function (context, spec, handler) {
				   var original = spec;
				   var i;
				   var limit;
				   var c;
				   var start = 0;
				   var newProtocol = null;
				   var aRef = false;
				   var isRelative = false;
				   if (handler != null) {
				       var sm = System.getSecurityManager ();
				       if (sm != null) {
					   this.checkSpecifyHandler (sm);
				       }}try {
					   limit = spec.length;
					   while ((limit > 0) && ((spec.charAt (limit - 1)).charCodeAt (0) <= (' ').charCodeAt (0))) {
					       limit--;
					   }
					   while ((start < limit) && ((spec.charAt (start)).charCodeAt (0) <= (' ').charCodeAt (0))) {
					       start++;
					   }
					   if (spec.regionMatches (true, start, "url:", 0, 4)) {
					       start += 4;
					   }if (start < spec.length && (spec.charAt (start)).charCodeAt (0) == ('#').charCodeAt (0)) {
					       aRef = true;
					   }for (i = start; !aRef && (i < limit) && ((c = (spec.charAt (i)).charCodeAt (0)) != ('/').charCodeAt (0)); i++) {
					       if (c == (':').charCodeAt (0)) {
						   var s = spec.substring (start, i).toLowerCase ();
						   if (this.isValidProtocol (s)) {
						       newProtocol = s;
						       start = i + 1;
						   }break;
					       }}
					   this.protocol = newProtocol;
					   if ((context != null) && ((newProtocol == null) || newProtocol.equalsIgnoreCase (context.protocol))) {
					       if (handler == null) {
						   handler = context.handler;
					       }if (context.path != null && context.path.startsWith ("/")) newProtocol = null;
					       if (newProtocol == null) {
						   this.protocol = context.protocol;
						   this.authority = context.authority;
						   this.userInfo = context.userInfo;
						   this.host = context.host;
						   this.port = context.port;
						   this.file = context.file;
						   this.path = context.path;
						   isRelative = true;
					       }}if (this.protocol == null) {
						   throw  new java.net.MalformedURLException ("no protocol: " + original);
					       }if (handler == null && (handler = java.net.URL.getURLStreamHandler (this.protocol)) == null) {
						   throw  new java.net.MalformedURLException ("unknown protocol: " + this.protocol);
					       }this.handler = handler;
					   i = spec.indexOf ('#', start);
					   if (i >= 0) {
					       this.ref = spec.substring (i + 1, limit);
					       limit = i;
					   }if (isRelative && start == limit) {
					       this.query = context.query;
					       if (this.ref == null) {
						   this.ref = context.ref;
					       }}
					   //Clazz.alert(["corz URL ", handler])
					   handler.parseURL (this, spec, start, limit);
				       } catch (e$$) {
					   if (Clazz.instanceOf (e$$, java.net.MalformedURLException)) {
					       var e = e$$;
					       {
						   throw e;
					       }
					   } else if (Clazz.instanceOf (e$$, Exception)) {
					       var e = e$$;
					       {
						   var exception =  new java.net.MalformedURLException (e.getMessage ());
						   exception.initCause (e);
						   throw exception;
					       }
					   } else {
					       throw e$$;
					   }
				       }
			       }, "java.net.URL,~S,java.net.URLStreamHandler");
	Clazz.defineMethod (c$, "isValidProtocol",
			    ($fz = function (protocol) {
				var len = protocol.length;
				if (len < 1) return false;
				var c = protocol.charAt (0);
				if (!Character.isLetter (c)) return false;
				for (var i = 1; i < len; i++) {
				    c = protocol.charAt (i);
				    if (!Character.isLetterOrDigit (c) && (c).charCodeAt (0) != ('.').charCodeAt (0) && (c).charCodeAt (0) != ('+').charCodeAt (0) && (c).charCodeAt (0) != ('-').charCodeAt (0)) {
					return false;
				    }}
				return true;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "checkSpecifyHandler",
			    ($fz = function (sm) {
			    }, $fz.isPrivate = true, $fz), "SecurityManager");
	Clazz.defineMethod (c$, "set",
			    function (protocol, host, port, file, ref) {
				{
				    this.protocol = protocol;
				    this.host = host;
				    this.authority = port == -1 ? host : host + ":" + port;
				    this.port = port;
				    this.file = file;
				    this.ref = ref;
				    this.$hashCode = -1;
				    var q = file.lastIndexOf ('?');
				    if (q != -1) {
					this.query = file.substring (q + 1);
					this.path = file.substring (0, q);
				    } else this.path = file;
				}}, "~S,~S,~N,~S,~S");
	Clazz.defineMethod (c$, "set",
			    function (protocol, host, port, authority, userInfo, path, query, ref) {
				{
				    this.protocol = protocol;
				    this.host = host;
				    this.port = port;
				    this.file = query == null ? path : path + "?" + query;
				    this.userInfo = userInfo;
				    this.path = path;
				    this.ref = ref;
				    this.$hashCode = -1;
				    this.query = query;
				    this.authority = authority;
				}}, "~S,~S,~N,~S,~S,~S,~S,~S");
	Clazz.defineMethod (c$, "getQuery",
			    function () {
				return this.query;
			    });
	Clazz.defineMethod (c$, "getPath",
			    function () {
				return this.path;
			    });
	Clazz.defineMethod (c$, "getUserInfo",
			    function () {
				return this.userInfo;
			    });
	Clazz.defineMethod (c$, "getAuthority",
			    function () {
				return this.authority;
			    });
	Clazz.defineMethod (c$, "getPort",
			    function () {
				return this.port;
			    });
	Clazz.defineMethod (c$, "getDefaultPort",
			    function () {
				return this.handler.getDefaultPort ();
			    });
	Clazz.defineMethod (c$, "getProtocol",
			    function () {
				return this.protocol;
			    });
	Clazz.defineMethod (c$, "getHost",
			    function () {
				return this.host;
			    });
	Clazz.defineMethod (c$, "getFile",
			    function () {
				return this.file;
			    });
	Clazz.defineMethod (c$, "getRef",
			    function () {
				return this.ref;
			    });
	Clazz.overrideMethod (c$, "equals",
			      function (obj) {
				  if (!(Clazz.instanceOf (obj, java.net.URL))) return false;
				  var u2 = obj;
				  return this.handler.equals (this, u2);
			      }, "~O");
	Clazz.overrideMethod (c$, "hashCode",
			      function () {
				  if (this.$hashCode != -1) return this.$hashCode;
				  this.$hashCode = this.handler.hashCode (this);
				  return this.$hashCode;
			      });
	Clazz.defineMethod (c$, "sameFile",
			    function (other) {
				return this.handler.sameFile (this, other);
			    }, "java.net.URL");
	Clazz.overrideMethod (c$, "toString",
			      function () {
				  return this.toExternalForm ();
			      });
	Clazz.defineMethod (c$, "toExternalForm",
			    function () {
				return this.handler.toExternalForm (this);
			    });
	Clazz.defineMethod (c$, "openConnection",
			    function () {
				return this.handler.openConnection (this);
			    });
	Clazz.defineMethod (c$, "openStream",
			    function () {
				return this.openConnection ().getInputStream ();
			    });
	Clazz.defineMethod (c$, "getContent",
			    function () {
				return this.openConnection ().getContent ();
			    });
	Clazz.defineMethod (c$, "getContent",
			    function (classes) {
				return this.openConnection ().getContent (classes);
			    }, "~A");
	c$.setURLStreamHandlerFactory = Clazz.defineMethod (c$, "setURLStreamHandlerFactory",
							    function (fac) {
								{
								    if (java.net.URL.factory != null) {
									throw  new Error ("factory already defined");
								    }var security = System.getSecurityManager ();
								    if (security != null) {
									security.checkSetFactory ();
								    }java.net.URL.handlers.clear ();
								    ($t$ = java.net.URL.factory = fac, java.net.URL.prototype.factory = java.net.URL.factory, $t$);
								}}, "java.net.URLStreamHandlerFactory");
	c$.getURLStreamHandler = Clazz.defineMethod (c$, "getURLStreamHandler",
						     function (protocol) {
							 var handler = java.net.URL.handlers.get (protocol);
							 if (handler == null) {
							     if (java.net.URL.factory != null) {
								 handler = java.net.URL.factory.createURLStreamHandler (protocol);
							     }}return handler;
						     }, "~S");
	Clazz.defineStatics (c$,
			     "factory", null);
	c$.handlers = c$.prototype.handlers =  new java.util.Hashtable ();
	c$.streamHandlerLock = c$.prototype.streamHandlerLock =  new JavaObject ();
    });

    //loadj2sjmollib = function() {

    // 
    //// java\util\MapEntry.js 
    // 
    $_L(["java.util.Map"],"java.util.MapEntry",null,function(){
	c$=$_C(function(){
	    this.key=null;
	    this.value=null;
	    $_Z(this,arguments);
	},java.util,"MapEntry",null,[java.util.Map.Entry,Cloneable]);
	$_K(c$,
	    function(theKey){
		this.key=theKey;
	    },"~O");
	$_K(c$,
	    function(theKey,theValue){
		this.key=theKey;
		this.value=theValue;
	    },"~O,~O");
	$_M(c$,"clone",
	    function(){
		try{
		    return $_U(this,java.util.MapEntry,"clone",[]);
		}catch(e){
		    if($_O(e,CloneNotSupportedException)){
			return null;
		    }else{
			throw e;
		    }
		}
	    });
	$_V(c$,"equals",
	    function(object){
		if(this===object){
		    return true;
		}if($_O(object,java.util.Map.Entry)){
		    var entry=object;
		    return(this.key==null?entry.getKey()==null:this.key.equals(entry.getKey()))&&(this.value==null?entry.getValue()==null:this.value.equals(entry.getValue()));
		}return false;
	    },"~O");
	$_V(c$,"getKey",
	    function(){
		return this.key;
	    });
	$_V(c$,"getValue",
	    function(){
		return this.value;
	    });
	$_V(c$,"hashCode",
	    function(){
		return(this.key==null?0:this.key.hashCode())^(this.value==null?0:this.value.hashCode());
	    });
	$_V(c$,"setValue",
	    function(object){
		var result=this.value;
		this.value=object;
		return result;
	    },"~O");
	$_V(c$,"toString",
	    function(){
		return this.key+"="+this.value;
	    });
	$_I(java.util.MapEntry,"Type");
    });
    // 
    //// java\util\Dictionary.js 
    // 
    ﻿c$=$_T(java.util,"Dictionary");
    $_K(c$,
	function(){
	});
    // 
    //// java\util\Hashtable.js 
    // 
    $_L(["java.util.Dictionary","$.Enumeration","$.Iterator","$.Map","$.MapEntry","$.NoSuchElementException"],"java.util.Hashtable",["java.lang.IllegalArgumentException","$.IllegalStateException","$.NullPointerException","$.StringBuilder","java.util.AbstractCollection","$.AbstractSet","$.Arrays","$.Collections","$.ConcurrentModificationException","java.util.MapEntry.Type"],function(){
	c$=$_C(function(){
	    this.elementCount=0;
	    this.elementData=null;
	    this.loadFactor=0;
	    this.threshold=0;
	    this.firstSlot=0;
	    this.lastSlot=-1;
	    this.modCount=0;
	    if(!$_D("java.util.Hashtable.HashIterator")){
		java.util.Hashtable.$Hashtable$HashIterator$();
	    }
	    if(!$_D("java.util.Hashtable.HashEnumerator")){
		java.util.Hashtable.$Hashtable$HashEnumerator$();
	    }
	    $_Z(this,arguments);
	},java.util,"Hashtable",java.util.Dictionary,[java.util.Map,Cloneable,java.io.Serializable]);
	c$.newEntry=$_M(c$,"newEntry",
			($fz=function(key,value,hash){
			    return new java.util.Hashtable.Entry(key,value);
			},$fz.isPrivate=true,$fz),"~O,~O,~N");
	$_K(c$,
	    function(){
		this.construct(11);
	    });
	$_K(c$,
	    function(capacity){
		$_R(this,java.util.Hashtable,[]);
		if(capacity>=0){
		    this.elementCount=0;
		    this.elementData=this.newElementArray(capacity==0?1:capacity);
		    this.firstSlot=this.elementData.length;
		    this.loadFactor=0.75;
		    this.computeMaxSize();
		}else{
		    throw new IllegalArgumentException();
		}},"~N");
	$_K(c$,
	    function(capacity,loadFactor){
		$_R(this,java.util.Hashtable,[]);
		if(capacity>=0&&loadFactor>0){
		    this.elementCount=0;
		    this.firstSlot=capacity;
		    this.elementData=this.newElementArray(capacity==0?1:capacity);
		    this.loadFactor=loadFactor;
		    this.computeMaxSize();
		}else{
		    throw new IllegalArgumentException();
		}},"~N,~N");
	$_K(c$,
	    function(map){
		this.construct(map.size()<6?11:(Math.floor(map.size()*4/3))+11);
		this.putAll(map);
	    },"java.util.Map");
	$_M(c$,"newElementArray",
	    ($fz=function(size){
		return new Array(size);
	    },$fz.isPrivate=true,$fz),"~N");
	$_V(c$,"clear",
	    function(){
		this.elementCount=0;
		java.util.Arrays.fill(this.elementData,null);
		this.modCount++;
	    });
	$_M(c$,"clone",
	    function(){
		try{
		    var hashtable=$_U(this,java.util.Hashtable,"clone",[]);
		    hashtable.elementData=this.elementData.clone();
		    var entry;
		    for(var i=this.elementData.length;--i>=0;){
			if((entry=this.elementData[i])!=null){
			    hashtable.elementData[i]=entry.clone();
			}}
		    return hashtable;
		}catch(e){
		    if($_O(e,CloneNotSupportedException)){
			return null;
		    }else{
			throw e;
		    }
		}
	    });
	$_M(c$,"computeMaxSize",
	    ($fz=function(){
		this.threshold=Math.round((this.elementData.length*this.loadFactor));
	    },$fz.isPrivate=true,$fz));
	$_M(c$,"contains",
	    function(value){
		if(value==null){
		    throw new NullPointerException();
		}for(var i=this.elementData.length;--i>=0;){
		    var entry=this.elementData[i];
		    while(entry!=null){
			if(value.equals(entry.value)){
			    return true;
			}entry=entry.next;
		    }
		}
		return false;
	    },"~O");
	$_V(c$,"containsKey",
	    function(key){
		return this.getEntry(key)!=null;
	    },"~O");
	$_V(c$,"containsValue",
	    function(value){
		return this.contains(value);
	    },"~O");
	$_V(c$,"elements",
	    function(){
		if(this.elementCount==0){
		    return java.util.Hashtable.EMPTY_ENUMERATION;
		}return $_N(java.util.Hashtable.HashEnumerator,this,null,false);
	    });
	$_V(c$,"entrySet",
	    function(){
		return new java.util.Collections.SynchronizedSet((($_D("java.util.Hashtable$2")?0:java.util.Hashtable.$Hashtable$2$()),$_N(java.util.Hashtable$2,this,null)),this);
	    });
	$_V(c$,"equals",
	    function(object){
		if(this===object){
		    return true;
		}if($_O(object,java.util.Map)){
		    var map=object;
		    if(this.size()!=map.size()){
			return false;
		    }var entries=this.entrySet();
		    for(var e,$e=map.entrySet().iterator();$e.hasNext()&&((e=$e.next())||true);){
			if(!entries.contains(e)){
			    return false;
			}}
		    return true;
		}return false;
	    },"~O");
	$_V(c$,"get",
	    function(key){
		var hash=key.hashCode();
		var index=(hash&0x7FFFFFFF)%this.elementData.length;
		var entry=this.elementData[index];
		while(entry!=null){
		    if(entry.equalsKey(key,hash)){
			return entry.value;
		    }entry=entry.next;
		}
		return null;
	    },"~O");
	$_M(c$,"getEntry",
	    function(key){
		var hash=key.hashCode();
		var index=(hash&0x7FFFFFFF)%this.elementData.length;
		var entry=this.elementData[index];
		while(entry!=null){
		    if(entry.equalsKey(key,hash)){
			return entry;
		    }entry=entry.next;
		}
		return null;
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		var result=0;
		var it=this.entrySet().iterator();
		while(it.hasNext()){
		    var entry=it.next();
		    var key=entry.getKey();
		    var value=entry.getValue();
		    var hash=(key!==this?key.hashCode():0)^(value!==this?(value!=null?value.hashCode():0):0);
		    result+=hash;
		}
		return result;
	    });
	$_V(c$,"isEmpty",
	    function(){
		return this.elementCount==0;
	    });
	$_V(c$,"keys",
	    function(){
		if(this.elementCount==0){
		    return java.util.Hashtable.EMPTY_ENUMERATION;
		}return $_N(java.util.Hashtable.HashEnumerator,this,null,true);
	    });
	$_V(c$,"keySet",
	    function(){
		return new java.util.Collections.SynchronizedSet((($_D("java.util.Hashtable$3")?0:java.util.Hashtable.$Hashtable$3$()),$_N(java.util.Hashtable$3,this,null)),this);
	    });
	$_V(c$,"put",
	    function(key,value){
		if(key!=null&&value!=null){
		    var hash=key.hashCode();
		    var index=(hash&0x7FFFFFFF)%this.elementData.length;
		    var entry=this.elementData[index];
		    while(entry!=null&&!entry.equalsKey(key,hash)){
			entry=entry.next;
		    }
		    if(entry==null){
			this.modCount++;
			if(++this.elementCount>this.threshold){
			    this.rehash();
			    index=(hash&0x7FFFFFFF)%this.elementData.length;
			}if(index<this.firstSlot){
			    this.firstSlot=index;
			}if(index>this.lastSlot){
			    this.lastSlot=index;
			}

			entry=java.util.Hashtable.newEntry(key,value,hash);
			entry.next=this.elementData[index];
			this.elementData[index]=entry;
			return null;
		    }var result=entry.value;
		    entry.value=value;
		    return result;
		}throw new NullPointerException();
	    },"~O,~O");
	$_V(c$,"putAll",
	    function(map){
		for(var entry,$entry=map.entrySet().iterator();$entry.hasNext()&&((entry=$entry.next())||true);){
		    this.put(entry.getKey(),entry.getValue());
		}
	    },"java.util.Map");

	$_M(c$,"rehash",
	    function(){
		var length=(this.elementData.length<<1)+1;
		if(length==0){
		    length=1;
		}var newFirst=length;
		var newLast=-1;
		var newData=this.newElementArray(length);
		for(var i=this.lastSlot+1;--i>=this.firstSlot;){
		    var entry=this.elementData[i];
		    while(entry!=null){
			var index=(entry.getKeyHash()&0x7FFFFFFF)%length;
			if(index<newFirst){
			    newFirst=index;
			}if(index>newLast){
			    newLast=index;
			}var next=entry.next;
			entry.next=newData[index];
			newData[index]=entry;
			entry=next;
		    }
		}
		this.firstSlot=newFirst;
		this.lastSlot=newLast;
		this.elementData=newData;
		this.computeMaxSize();
	    });
	$_V(c$,"remove",
	    function(key){
		var hash=key.hashCode();
		var index=(hash&0x7FFFFFFF)%this.elementData.length;
		var last=null;
		var entry=this.elementData[index];
		while(entry!=null&&!entry.equalsKey(key,hash)){
		    last=entry;
		    entry=entry.next;
		}
		if(entry!=null){
		    this.modCount++;
		    if(last==null){
			this.elementData[index]=entry.next;
		    }else{
			last.next=entry.next;
		    }this.elementCount--;
		    var result=entry.value;
		    entry.value=null;
		    return result;
		}return null;
	    },"~O");
	$_V(c$,"size",
	    function(){
		return this.elementCount;
	    });
	$_V(c$,"toString",
	    function(){
		if(this.isEmpty()){
		    return"{}";
		}var buffer=new StringBuilder(this.size()*28);
		buffer.append('{');
		for(var i=this.lastSlot;i>=this.firstSlot;i--){
		    var entry=this.elementData[i];
		    while(entry!=null){
			if(entry.key!==this){
			    buffer.append(entry.key);
			}else{
			    buffer.append("(this Map)");
			}buffer.append('=');
			if(entry.value!==this){
			    buffer.append(entry.value);
			}else{
			    buffer.append("(this Map)");
			}buffer.append(", ");
			entry=entry.next;
		    }
		}
		if(this.elementCount>0){
		    buffer.setLength(buffer.length()-2);
		}buffer.append('}');
		return buffer.toString();
	    });
	$_V(c$,"values",
	    function(){
		return new java.util.Collections.SynchronizedCollection((($_D("java.util.Hashtable$4")?0:java.util.Hashtable.$Hashtable$4$()),$_N(java.util.Hashtable$4,this,null)),this);
	    });
	c$.$Hashtable$HashIterator$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.position=0;
		this.expectedModCount=0;
		this.type=null;
		this.lastEntry=null;
		this.lastPosition=0;
		this.canRemove=false;
		$_Z(this,arguments);
	    },java.util.Hashtable,"HashIterator",null,java.util.Iterator);
	    $_K(c$,
		function(a){
		    this.type=a;
		    this.position=this.b$["java.util.Hashtable"].lastSlot;
		    this.expectedModCount=this.b$["java.util.Hashtable"].modCount;
		},"java.util.MapEntry.Type");
	    $_V(c$,"hasNext",
		function(){
		    if(this.lastEntry!=null&&this.lastEntry.next!=null){
			return true;
		    }while(this.position>=this.b$["java.util.Hashtable"].firstSlot){
			if(this.b$["java.util.Hashtable"].elementData[this.position]==null){
			    this.position--;
			}else{
			    return true;
			}}
		    return false;
		});
	    $_V(c$,"next",
		function(){
		    if(this.expectedModCount==this.b$["java.util.Hashtable"].modCount){
			if(this.lastEntry!=null){
			    this.lastEntry=this.lastEntry.next;
			}if(this.lastEntry==null){
			    while(this.position>=this.b$["java.util.Hashtable"].firstSlot&&(this.lastEntry=this.b$["java.util.Hashtable"].elementData[this.position])==null){
				this.position--;
			    }
			    if(this.lastEntry!=null){
				this.lastPosition=this.position;
				this.position--;
			    }}if(this.lastEntry!=null){
				this.canRemove=true;
				return this.type.get(this.lastEntry);
			    }throw new java.util.NoSuchElementException();
		    }throw new java.util.ConcurrentModificationException();
		});
	    $_V(c$,"remove",
		function(){
		    if(this.expectedModCount==this.b$["java.util.Hashtable"].modCount){
			if(this.canRemove){
			    this.canRemove=false;
			    {
				var a=false;
				var b=this.b$["java.util.Hashtable"].elementData[this.lastPosition];
				if(b===this.lastEntry){
				    this.b$["java.util.Hashtable"].elementData[this.lastPosition]=b.next;
				    a=true;
				}else{
				    while(b!=null&&b.next!==this.lastEntry){
					b=b.next;
				    }
				    if(b!=null){
					b.next=this.lastEntry.next;
					a=true;
				    }}if(a){
					this.b$["java.util.Hashtable"].modCount++;
					this.b$["java.util.Hashtable"].elementCount--;
					this.expectedModCount++;
					return;
				    }}}else{
					throw new IllegalStateException();
				    }}throw new java.util.ConcurrentModificationException();
		});
	    c$=$_P();
	};
	c$.$Hashtable$HashEnumerator$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.key=false;
		this.start=0;
		this.entry=null;
		$_Z(this,arguments);
	    },java.util.Hashtable,"HashEnumerator",null,java.util.Enumeration);
	    $_K(c$,
		function(a){
		    this.key=a;
		    this.start=this.b$["java.util.Hashtable"].lastSlot+1;
		},"~B");
	    $_V(c$,"hasMoreElements",
		function(){
		    if(this.entry!=null){
			return true;
		    }while(--this.start>=this.b$["java.util.Hashtable"].firstSlot){
			if(this.b$["java.util.Hashtable"].elementData[this.start]!=null){
			    this.entry=this.b$["java.util.Hashtable"].elementData[this.start];
			    return true;
			}}
		    return false;
		});
	    $_V(c$,"nextElement",
		function(){
		    if(this.hasMoreElements()){
			var a=this.key?this.entry.key:this.entry.value;
			this.entry=this.entry.next;
			return a;
		    }throw new java.util.NoSuchElementException();
		});
	    c$=$_P();
	};
	c$.$Hashtable$2$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$2",java.util.AbstractSet);
	    $_V(c$,"size",
		function(){
		    return this.b$["java.util.Hashtable"].elementCount;
		});
	    $_V(c$,"clear",
		function(){
		    this.b$["java.util.Hashtable"].clear();
		});
	    $_V(c$,"remove",
		function(object){
		    if(this.contains(object)){
			this.b$["java.util.Hashtable"].remove((object).getKey());
			return true;
		    }return false;
		},"~O");
	    $_M(c$,"contains",
		function(object){
		    var entry=this.b$["java.util.Hashtable"].getEntry((object).getKey());
		    return object.equals(entry);
		},"~O");
	    $_M(c$,"iterator",
		function(){
		    return $_N(java.util.Hashtable.HashIterator,this,null,(($_D("java.util.Hashtable$2$1")?0:java.util.Hashtable.$Hashtable$2$1$()),$_N(java.util.Hashtable$2$1,this,null)));
		});
	    c$=$_P();
	};
	c$.$Hashtable$2$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$2$1",null,java.util.MapEntry.Type);
	    $_V(c$,"get",
		function(entry){
		    return entry;
		},"java.util.MapEntry");
	    c$=$_P();
	};
	c$.$Hashtable$3$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$3",java.util.AbstractSet);
	    $_V(c$,"contains",
		function(object){
		    return this.b$["java.util.Hashtable"].containsKey(object);
		},"~O");
	    $_V(c$,"size",
		function(){
		    return this.b$["java.util.Hashtable"].elementCount;
		});
	    $_V(c$,"clear",
		function(){
		    this.b$["java.util.Hashtable"].clear();
		});
	    $_V(c$,"remove",
		function(key){
		    if(this.b$["java.util.Hashtable"].containsKey(key)){
			this.b$["java.util.Hashtable"].remove(key);
			return true;
		    }return false;
		},"~O");
	    $_V(c$,"iterator",
		function(){
		    return $_N(java.util.Hashtable.HashIterator,this,null,(($_D("java.util.Hashtable$3$1")?0:java.util.Hashtable.$Hashtable$3$1$()),$_N(java.util.Hashtable$3$1,this,null)));
		});
	    c$=$_P();
	};
	c$.$Hashtable$3$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$3$1",null,java.util.MapEntry.Type);
	    $_V(c$,"get",
		function(entry){
		    return entry.key;
		},"java.util.MapEntry");
	    c$=$_P();
	};
	c$.$Hashtable$4$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$4",java.util.AbstractCollection);
	    $_V(c$,"contains",
		function(object){
		    return this.b$["java.util.Hashtable"].contains(object);
		},"~O");
	    $_V(c$,"size",
		function(){
		    return this.b$["java.util.Hashtable"].elementCount;
		});
	    $_V(c$,"clear",
		function(){
		    this.b$["java.util.Hashtable"].clear();
		});
	    $_V(c$,"iterator",
		function(){
		    return $_N(java.util.Hashtable.HashIterator,this,null,(($_D("java.util.Hashtable$4$1")?0:java.util.Hashtable.$Hashtable$4$1$()),$_N(java.util.Hashtable$4$1,this,null)));
		});
	    c$=$_P();
	};
	c$.$Hashtable$4$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$4$1",null,java.util.MapEntry.Type);
	    $_V(c$,"get",
		function(entry){
		    return entry.value;
		},"java.util.MapEntry");
	    c$=$_P();
	};
	c$.$Hashtable$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Hashtable$1",null,java.util.Enumeration);
	    $_V(c$,"hasMoreElements",
		function(){
		    return false;
		});
	    $_V(c$,"nextElement",
		function(){
		    throw new java.util.NoSuchElementException();
		});
	    c$=$_P();
	};
	$_H();
	c$=$_C(function(){
	    this.next=null;
	    this.hashcode=0;
	    $_Z(this,arguments);
	},java.util.Hashtable,"Entry",java.util.MapEntry);
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Hashtable.Entry,[a,b]);
		this.hashcode=a.hashCode();
	    },"~O,~O");
	$_M(c$,"clone",
	    function(){
		var a=$_U(this,java.util.Hashtable.Entry,"clone",[]);
		if(this.next!=null){
		    a.next=this.next.clone();

		}
		return a;
	    });
	$_V(c$,"setValue",
	    function(a){
		if(a==null){
		    throw new NullPointerException();
		}var b=this.value;
		this.value=a;
		return b;
	    },"~O");
	$_M(c$,"getKeyHash",
	    function(){
		return this.key.hashCode();
	    });
	$_M(c$,"equalsKey",
	    function(a,b){
		return this.hashcode==a.hashCode()&&this.key.equals(a);
	    },"~O,~N");
	$_V(c$,"toString",
	    function(){
		return this.key+"="+this.value;
	    });
	c$=$_P();
	c$.EMPTY_ENUMERATION=c$.prototype.EMPTY_ENUMERATION=(($_D("java.util.Hashtable$1")?0:java.util.Hashtable.$Hashtable$1$()),$_N(java.util.Hashtable$1,this,null));
    });
    // 
    //// java\net\URLConnection.js 
    // 
    ﻿Clazz.declarePackage ("java.net");
    Clazz.load (null, "java.net.URLConnection", ["java.lang.IllegalStateException", "$.NullPointerException", "java.net.UnknownServiceException", "java.util.ArrayList"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.url = null;
	    this.doInput = true;
	    this.doOutput = false;
	    this.connected = false;
	    this.requests = null;
	    Clazz.instantialize (this, arguments);
	}, java.net, "URLConnection");
	Clazz.defineMethod (c$, "setDoInput", 
			    function (doinput) {
				if (this.connected) throw  new IllegalStateException ("Already connected");
				this.doInput = doinput;
			    }, "~B");
	Clazz.defineMethod (c$, "getDoInput", 
			    function () {
				return this.doInput;
			    });
	Clazz.defineMethod (c$, "setDoOutput", 
			    function (dooutput) {
				if (this.connected) throw  new IllegalStateException ("Already connected");
				this.doOutput = dooutput;
			    }, "~B");
	Clazz.defineMethod (c$, "getDoOutput", 
			    function () {
				return this.doOutput;
			    });
	Clazz.makeConstructor (c$, 
			       function (url) {
				   this.url = url;
			       }, "java.net.URL");
	Clazz.defineMethod (c$, "getURL", 
			    function () {
				return this.url;
			    });
	Clazz.defineMethod (c$, "getInputStream", 
			    function () {
				throw  new java.net.UnknownServiceException ("protocol doesn't support input");
			    });
	Clazz.defineMethod (c$, "getOutputStream", 
			    function () {
				throw  new java.net.UnknownServiceException ("protocol doesn't support output");
			    });
	Clazz.defineMethod (c$, "setRequestProperty", 
			    function (key, value) {
				if (this.connected) throw  new IllegalStateException ("Already connected");
				if (key == null) throw  new NullPointerException ("key is null");
				if (this.requests == null) this.requests =  new java.util.ArrayList ();
				for (var i = this.requests.size (); --i >= 0; ) if (this.requests.get (i)[0].equals (key)) {
				    this.requests.get (i)[1] = value;
				    return;
				}
				this.requests.add ([key, value]);
			    }, "~S,~S");
    });
    // 
    //// org\jmol\awtjs\JmolURLConnection.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs");
    Clazz.load (["java.net.URLConnection"], "org.jmol.awtjs.JmolURLConnection", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bytesOut = null;
	    this.postOut = "";
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs, "JmolURLConnection", java.net.URLConnection);
	Clazz.defineMethod (c$, "doAjax", 
			    ($fz = function () {
				return null;
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "connect", 
			      function () {
			      });
	Clazz.defineMethod (c$, "outputBytes", 
			    function (bytes) {
				this.bytesOut = bytes;
			    }, "~A");
	Clazz.defineMethod (c$, "outputString", 
			    function (post) {
				this.postOut = post;
			    }, "~S");
	Clazz.defineMethod (c$, "getStringXBuilder", 
			    function () {
				return this.doAjax ();
			    });
    });
    // 
    //// java\lang\AbstractStringBuilder.js 
    // 
    ﻿$_L(null,"java.lang.AbstractStringBuilder",["java.io.InvalidObjectException","java.lang.ArrayIndexOutOfBoundsException","$.IndexOutOfBoundsException","$.NegativeArraySizeException","$.NullPointerException","$.StringIndexOutOfBoundsException","org.apache.harmony.luni.util.Msg"],function(){
	c$=$_C(function(){
	    this.value=null;
	    this.count=0;
	    this.shared=false;
	    $_Z(this,arguments);
	},java.lang,"AbstractStringBuilder");
	$_M(c$,"getValue",
	    function(){
		return this.value;
	    });
	$_M(c$,"shareValue",
	    function(){
		this.shared=true;
		return this.value;
	    });
	$_M(c$,"set",
	    function(val,len){
		if(val==null)val=$_A(0,'\0');
		if(val.length<len)throw new java.io.InvalidObjectException(org.apache.harmony.luni.util.Msg.getString("K0199"));
		this.shared=false;
		this.value=val;
		this.count=len;
	    },"~A,~N");
	$_K(c$,
	    function(){
		this.value=$_A(16,'\0');
	    });
	$_K(c$,
	    function(capacity){
		if(capacity<0)throw new NegativeArraySizeException();
		this.value=$_A(capacity,'\0');
	    },"~N");
	$_K(c$,
	    function(string){
		this.count=string.length;
		this.shared=false;
		this.value=$_A(this.count+16,'\0');
		string.getChars(0,this.count,this.value,0);
	    },"~S");
	$_M(c$,"enlargeBuffer",
	    ($fz=function(min){
		var twice=(this.value.length<<1)+2;
		var newData=$_A(min>twice?min:twice,'\0');
		System.arraycopy(this.value,0,newData,0,this.count);
		this.value=newData;
		this.shared=false;
	    },$fz.isPrivate=true,$fz),"~N");
	$_M(c$,"appendNull",
	    function(){
		var newSize=this.count+4;
		if(newSize>this.value.length){
		    this.enlargeBuffer(newSize);
		}else if(this.shared){
		    this.value=this.value.clone();
		    this.shared=false;
		}this.value[this.count++]='n';
		this.value[this.count++]='u';
		this.value[this.count++]='l';
		this.value[this.count++]='l';
	    });
	$_M(c$,"append0",
	    function(chars){
		var newSize=this.count+chars.length;
		if(newSize>this.value.length){
		    this.enlargeBuffer(newSize);
		}else if(this.shared){
		    this.value=this.value.clone();
		    this.shared=false;
		}System.arraycopy(chars,0,this.value,this.count,chars.length);
		this.count=newSize;
	    },"~A");
	$_M(c$,"append0",
	    function(chars,start,length){
		if(chars==null){
		    throw new NullPointerException();
		}if(start>=0&&0<=length&&length<=chars.length-start){
		    var newSize=this.count+length;
		    if(newSize>this.value.length){
			this.enlargeBuffer(newSize);
		    }else if(this.shared){
			this.value=this.value.clone();
			this.shared=false;
		    }System.arraycopy(chars,start,this.value,this.count,length);
		    this.count=newSize;
		}else{
		    throw new ArrayIndexOutOfBoundsException();
		}},"~A,~N,~N");
	$_M(c$,"append0",
	    function(ch){
		if(this.count==this.value.length){
		    this.enlargeBuffer(this.count+1);
		}if(this.shared){
		    this.value=this.value.clone();
		    this.shared=false;
		}this.value[this.count++]=ch;
	    },"~N");
	$_M(c$,"append0",
	    function(string){
		if(string==null){
		    this.appendNull();
		    return;
		}var adding=string.length;
		var newSize=this.count+adding;
		if(newSize>this.value.length){
		    this.enlargeBuffer(newSize);
		}else if(this.shared){
		    this.value=this.value.clone();
		    this.shared=false;
		}string.getChars(0,adding,this.value,this.count);
		this.count=newSize;
	    },"~S");
	$_M(c$,"append0",
	    function(s,start,end){
		if(s==null)s="null";
		if(start<0||end<0||start>end||end>s.length())throw new IndexOutOfBoundsException();
		this.append0(s.subSequence(start,end).toString());
	    },"CharSequence,~N,~N");
	$_M(c$,"capacity",
	    function(){
		return this.value.length;
	    });
	$_M(c$,"charAt",
	    function(index){
		if(index<0||index>=this.count)throw new StringIndexOutOfBoundsException(index);
		return this.value[index];
	    },"~N");
	$_M(c$,"delete0",
	    function(start,end){
		if(start>=0){
		    if(end>this.count){
			end=this.count;
		    }if(end==start){
			return;
		    }if(end>start){
			var length=this.count-end;
			if(length>0){
			    if(!this.shared){
				System.arraycopy(this.value,end,this.value,start,length);
			    }else{
				var newData=$_A(this.value.length,'\0');
				System.arraycopy(this.value,0,newData,0,start);
				System.arraycopy(this.value,end,newData,start,length);
				this.value=newData;
				this.shared=false;
			    }}this.count-=end-start;
			return;
		    }}throw new StringIndexOutOfBoundsException();
	    },"~N,~N");
	$_M(c$,"deleteCharAt0",
	    function(location){
		if(0>location||location>=this.count)throw new StringIndexOutOfBoundsException(location);
		var length=this.count-location-1;
		if(length>0){
		    if(!this.shared){
			System.arraycopy(this.value,location+1,this.value,location,length);
		    }else{
			var newData=$_A(this.value.length,'\0');
			System.arraycopy(this.value,0,newData,0,location);
			System.arraycopy(this.value,location+1,newData,location,length);
			this.value=newData;
			this.shared=false;
		    }}this.count--;
	    },"~N");
	$_M(c$,"ensureCapacity",
	    function(min){
		if(min>this.value.length){
		    this.enlargeBuffer(min);
		}},"~N");
	$_M(c$,"getChars",
	    function(start,end,dest,destStart){
		if(start>this.count||end>this.count||start>end){
		    throw new StringIndexOutOfBoundsException();
		}System.arraycopy(this.value,start,dest,destStart,end-start);
	    },"~N,~N,~A,~N");
	$_M(c$,"insert0",
	    function(index,chars){
		if(0>index||index>this.count){
		    throw new StringIndexOutOfBoundsException(index);
		}if(chars.length!=0){
		    this.move(chars.length,index);
		    System.arraycopy(chars,0,this.value,index,chars.length);
		    this.count+=chars.length;
		}},"~N,~A");
	$_M(c$,"insert0",
	    function(index,chars,start,length){
		if(0<=index&&index<=this.count){
		    if(start>=0&&0<=length&&length<=chars.length-start){
			if(length!=0){
			    this.move(length,index);
			    System.arraycopy(chars,start,this.value,index,length);
			    this.count+=length;
			}return;
		    }throw new StringIndexOutOfBoundsException("offset "+start+", len "+length+", array.length "+chars.length);
		}throw new StringIndexOutOfBoundsException(index);
	    },"~N,~A,~N,~N");
	$_M(c$,"insert0",
	    function(index,ch){
		if(0>index||index>this.count){
		    throw new ArrayIndexOutOfBoundsException(index);
		}this.move(1,index);
		this.value[index]=ch;
		this.count++;
	    },"~N,~N");
	$_M(c$,"insert0",
	    function(index,string){
		if(0<=index&&index<=this.count){
		    if(string==null)string="null";
		    var min=string.length;
		    if(min!=0){
			this.move(min,index);
			string.getChars(0,min,this.value,index);
			this.count+=min;
		    }}else{
			throw new StringIndexOutOfBoundsException(index);
		    }},"~N,~S");
	$_M(c$,"insert0",
	    function(index,s,start,end){
		if(s==null)s="null";
		if(index<0||index>this.count||start<0||end<0||start>end||end>s.length())throw new IndexOutOfBoundsException();
		this.insert0(index,s.subSequence(start,end).toString());
	    },"~N,CharSequence,~N,~N");
	$_M(c$,"length",
	    function(){
		return this.count;
	    });
	$_M(c$,"move",
	    ($fz=function(size,index){
		var newSize;
		if(this.value.length-this.count>=size){
		    if(!this.shared){
			System.arraycopy(this.value,index,this.value,index+size,this.count-index);
			return;
		    }newSize=this.value.length;
		}else{
		    var a=this.count+size;
		    var b=(this.value.length<<1)+2;
		    newSize=a>b?a:b;
		}var newData=$_A(newSize,'\0');
		System.arraycopy(this.value,0,newData,0,index);
		System.arraycopy(this.value,index,newData,index+size,this.count-index);
		this.value=newData;
		this.shared=false;
	    },$fz.isPrivate=true,$fz),"~N,~N");
	$_M(c$,"replace0",
	    function(start,end,string){
		if(start>=0){
		    if(end>this.count)end=this.count;
		    if(end>start){
			var stringLength=string.length;
			var diff=end-start-stringLength;
			if(diff>0){
			    if(!this.shared){
				System.arraycopy(this.value,end,this.value,start+stringLength,this.count-end);
			    }else{
				var newData=$_A(this.value.length,'\0');
				System.arraycopy(this.value,0,newData,0,start);
				System.arraycopy(this.value,end,newData,start+stringLength,this.count-end);
				this.value=newData;
				this.shared=false;
			    }}else if(diff<0){
				this.move(-diff,end);
			    }else if(this.shared){
				this.value=this.value.clone();
				this.shared=false;
			    }string.getChars(0,stringLength,this.value,start);
			this.count-=diff;
			return;
		    }if(start==end){
			if(string==null)throw new NullPointerException();
			this.insert0(start,string);
			return;
		    }}throw new StringIndexOutOfBoundsException();
	    },"~N,~N,~S");
	$_M(c$,"reverse0",
	    function(){
		if(this.count<2){
		    return;
		}if(!this.shared){
		    for(var i=0,end=this.count,mid=Math.floor(this.count/2);i<mid;i++){
			var temp=this.value[--end];
			this.value[end]=this.value[i];
			this.value[i]=temp;
		    }
		}else{
		    var newData=$_A(this.value.length,'\0');
		    for(var i=0,end=this.count;i<this.count;i++){
			newData[--end]=this.value[i];
		    }
		    this.value=newData;
		    this.shared=false;
		}});
	$_M(c$,"setCharAt",
	    function(index,ch){
		if(0>index||index>=this.count){
		    throw new StringIndexOutOfBoundsException(index);
		}if(this.shared){
		    this.value=this.value.clone();
		    this.shared=false;
		}this.value[index]=ch;
	    },"~N,~N");
	$_M(c$,"setLength",
	    function(length){
		if(length<0)throw new StringIndexOutOfBoundsException(length);
		if(this.count<length){
		    if(length>this.value.length){
			this.enlargeBuffer(length);
		    }else{
			if(this.shared){
			    var newData=$_A(this.value.length,'\0');
			    System.arraycopy(this.value,0,newData,0,this.count);
			    this.value=newData;
			    this.shared=false;
			}else{
			    for(var i=this.count;i<length;i++){
				this.value[i]=String.fromCharCode(0);
			    }
			}}}this.count=length;
	    },"~N");
	$_M(c$,"substring",
	    function(start){
		if(0<=start&&start<=this.count){
		    if(start==this.count)return"";
		    this.shared=true;
		    return String.instantialize(start,this.count-start,this.value);
		}throw new StringIndexOutOfBoundsException(start);
	    },"~N");
	$_M(c$,"substring",
	    function(start,end){
		if(0<=start&&start<=end&&end<=this.count){
		    if(start==end)return"";
		    this.shared=true;
		    return String.instantialize(this.value,start,end-start);
		}throw new StringIndexOutOfBoundsException();
	    },"~N,~N");
	$_V(c$,"toString",
	    function(){
		if(this.count==0)return"";
		if(this.count>=256&&this.count<=(this.value.length>>1))return String.instantialize(this.value,0,this.count);
		this.shared=true;
		return String.instantialize(0,this.count,this.value);
	    });
	$_M(c$,"subSequence",
	    function(start,end){
		return this.substring(start,end);
	    },"~N,~N");
	$_M(c$,"indexOf",
	    function(string){
		return this.indexOf(string,0);
	    },"~S");
	$_M(c$,"indexOf",
	    function(subString,start){
		if(start<0)start=0;
		var subCount=subString.length;
		if(subCount>0){
		    if(subCount+start>this.count)return-1;
		    var firstChar=subString.charAt(0);
		    while(true){
			var i=start;
			var found=false;
			for(;i<this.count;i++)if((this.value[i]).charCodeAt(0)==(firstChar).charCodeAt(0)){
			    found=true;
			    break;
			}
			if(!found||subCount+i>this.count)return-1;
			var o1=i;
			var o2=0;
			while(++o2<subCount&&(this.value[++o1]).charCodeAt(0)==(subString.charAt(o2)).charCodeAt(0)){
			}
			if(o2==subCount)return i;
			start=i+1;
		    }
		}return(start<this.count||start==0)?start:this.count;
	    },"~S,~N");
	$_M(c$,"lastIndexOf",
	    function(string){
		return this.lastIndexOf(string,this.count);
	    },"~S");
	$_M(c$,"lastIndexOf",
	    function(subString,start){
		var subCount=subString.length;
		if(subCount<=this.count&&start>=0){
		    if(subCount>0){
			if(start>this.count-subCount)start=this.count-subCount;
			var firstChar=subString.charAt(0);
			while(true){
			    var i=start;
			    var found=false;
			    for(;i>=0;--i)if((this.value[i]).charCodeAt(0)==(firstChar).charCodeAt(0)){
				found=true;
				break;
			    }
			    if(!found)return-1;
			    var o1=i;
			    var o2=0;
			    while(++o2<subCount&&(this.value[++o1]).charCodeAt(0)==(subString.charAt(o2)).charCodeAt(0)){
			    }
			    if(o2==subCount)return i;
			    start=i-1;
			}
		    }return start<this.count?start:this.count;
		}return-1;
	    },"~S,~N");
	$_M(c$,"trimToSize",
	    function(){
		if(this.count<this.value.length){
		    var newValue=$_A(this.count,'\0');
		    System.arraycopy(this.value,0,newValue,0,this.count);
		    this.value=newValue;
		    this.shared=false;
		}});
	$_S(c$,
	    "INITIAL_CAPACITY",16);
    });
    // 
    //// java\lang\StringBuffer.js 
    // 
    ﻿$_L(["java.lang.AbstractStringBuilder","$.Appendable"],"java.lang.StringBuffer",["java.lang.Character","$.Double","$.Float","$.Long"],function(){
	c$=$_T(java.lang,"StringBuffer",AbstractStringBuilder,[Appendable,java.io.Serializable,CharSequence]);
	$_K(c$,
	    function(cs){
		if(cs==null){
		    throw new NullPointerException();
		}
		$_R(this,StringBuffer,[cs.toString()]);
	    },"CharSequence");
	$_M(c$,"append",
	    function(b){
		return this.append(b?"true":"false");
	    },"~B");
	$_M(c$,"append",
	    function(ch){
		this.append0(ch);
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(d){
		return this.append(Double.toString(d));
	    },"~N");
	$_M(c$,"append",
	    function(obj){
		if(obj==null){
		    this.appendNull();
		}else{
		    this.append0(obj.toString());
		}return this;
	    },"~O");
	$_M(c$,"append",
	    function(string){
		this.append0(string);
		return this;
	    },"~S");
	$_M(c$,"append",
	    function(sb){
		if(sb==null){
		    this.appendNull();
		}else{
		    {
			this.append0(sb.getValue(),0,sb.length());
		    }}return this;
	    },"StringBuffer");
	$_M(c$,"append",
	    function(chars){
		this.append0(chars);
		return this;
	    },"~A");
	$_M(c$,"append",
	    function(chars,start,length){
		this.append0(chars,start,length);
		return this;
	    },"~A,~N,~N");
	$_M(c$,"append",
	    function(s){
		if(s==null){
		    this.appendNull();
		}else{
		    this.append0(s.toString());
		}return this;
	    },"CharSequence");
	$_M(c$,"append",
	    function(s,start,end){
		this.append0(s,start,end);
		return this;
	    },"CharSequence,~N,~N");
	$_M(c$,"appendCodePoint",
	    function(codePoint){
		return this.append(Character.toChars(codePoint));
	    },"~N");
	$_M(c$,"$delete",
	    function(start,end){
		this.delete0(start,end);
		return this;
	    },"~N,~N");
	$_M(c$,"deleteCharAt",
	    function(location){
		this.deleteCharAt0(location);
		return this;
	    },"~N");
	$_M(c$,"insert",
	    function(index,ch){
		this.insert0(index,ch);
		return this;
	    },"~N,~N");
	$_M(c$,"insert",
	    function(index,b){
		return this.insert(index,b?"true":"false");
	    },"~N,~B");
	$_M(c$,"insert",
	    function(index,i){
		return this.insert(index,Integer.toString(i));
	    },"~N,~N");
	$_M(c$,"insert",
	    function(index,l){
		return this.insert(index,Long.toString(l));
	    },"~N,~N");
	$_M(c$,"insert",
	    function(index,d){
		return this.insert(index,Double.toString(d));
	    },"~N,~N");
	$_M(c$,"insert",
	    function(index,f){
		return this.insert(index,Float.toString(f));
	    },"~N,~N");
	$_M(c$,"insert",
	    function(index,obj){
		return this.insert(index,obj==null?"null":obj.toString());
	    },"~N,~O");
	$_M(c$,"insert",
	    function(index,string){
		this.insert0(index,string);
		return this;
	    },"~N,~S");
	$_M(c$,"insert",
	    function(index,chars){
		this.insert0(index,chars);
		return this;
	    },"~N,~A");
	$_M(c$,"insert",
	    function(index,chars,start,length){
		this.insert0(index,chars,start,length);
		return this;
	    },"~N,~A,~N,~N");
	$_M(c$,"insert",
	    function(index,s){
		this.insert0(index,s==null?"null":s.toString());
		return this;
	    },"~N,CharSequence");
	$_M(c$,"insert",
	    function(index,s,start,end){
		this.insert0(index,s,start,end);
		return this;
	    },"~N,CharSequence,~N,~N");
	$_M(c$,"replace",
	    function(start,end,string){
		this.replace0(start,end,string);
		return this;
	    },"~N,~N,~S");
	$_M(c$,"reverse",
	    function(){
		this.reverse0();
		return this;
	    });
	$_V(c$,"subSequence",
	    function(start,end){
		return $_U(this,StringBuffer,"substring",[start,end]);
	    },"~N,~N");
    });
    // 
    //// java\lang\StringBuilder.js 
    // 
    ﻿$_L(["java.lang.AbstractStringBuilder","$.Appendable"],"java.lang.StringBuilder",["java.lang.Double","$.Float","$.Long"],function(){
	c$=$_T(java.lang,"StringBuilder",AbstractStringBuilder,[Appendable,CharSequence,java.io.Serializable]);
	$_K(c$,
	    function(seq){
		$_R(this,StringBuilder,[seq.toString()]);
	    },"CharSequence");
	$_M(c$,"append",
	    function(b){
		this.append0(b?"true":"false");
		return this;
	    },"~B");
	$_M(c$,"append",
	    function(c){
		this.append0(c);
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(i){
		this.append0(Integer.toString(i));
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(lng){
		this.append0(Long.toString(lng));
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(f){
		this.append0(Float.toString(f));
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(d){
		this.append0(Double.toString(d));
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(obj){
		if(obj==null){
		    this.appendNull();
		}else{
		    this.append0(obj.toString());
		}return this;
	    },"~O");
	$_M(c$,"append",
	    function(str){
		this.append0(str);
		return this;
	    },"~S");
	$_M(c$,"append",
	    function(sb){
		if(sb==null){
		    this.appendNull();
		}else{
		    this.append0(sb.getValue(),0,sb.length());
		}return this;
	    },"StringBuffer");
	$_M(c$,"append",
	    function(ch){
		this.append0(ch);
		return this;
	    },"~A");
	$_M(c$,"append",
	    function(str,offset,len){
		this.append0(str,offset,len);
		return this;
	    },"~A,~N,~N");
	$_M(c$,"append",
	    function(csq){
		if(csq==null){
		    this.appendNull();
		}else{
		    this.append0(csq.toString());
		}return this;
	    },"CharSequence");
	$_M(c$,"append",
	    function(csq,start,end){
		this.append0(csq,start,end);
		return this;
	    },"CharSequence,~N,~N");
	$_M(c$,"$delete",
	    function(start,end){
		this.delete0(start,end);
		return this;
	    },"~N,~N");
	$_M(c$,"deleteCharAt",
	    function(index){
		this.deleteCharAt0(index);
		return this;
	    },"~N");
	$_M(c$,"insert",
	    function(offset,b){
		this.insert0(offset,b?"true":"false");
		return this;
	    },"~N,~B");
	$_M(c$,"insert",
	    function(offset,c){
		this.insert0(offset,c);
		return this;
	    },"~N,~N");
	$_M(c$,"insert",
	    function(offset,i){
		this.insert0(offset,Integer.toString(i));
		return this;
	    },"~N,~N");
	$_M(c$,"insert",
	    function(offset,l){
		this.insert0(offset,Long.toString(l));
		return this;
	    },"~N,~N");
	$_M(c$,"insert",
	    function(offset,f){
		this.insert0(offset,Float.toString(f));
		return this;
	    },"~N,~N");
	$_M(c$,"insert",
	    function(offset,d){
		this.insert0(offset,Double.toString(d));
		return this;
	    },"~N,~N");
	$_M(c$,"insert",
	    function(offset,obj){
		this.insert0(offset,obj==null?"null":obj.toString());
		return this;
	    },"~N,~O");
	$_M(c$,"insert",
	    function(offset,str){
		this.insert0(offset,str);
		return this;
	    },"~N,~S");
	$_M(c$,"insert",
	    function(offset,ch){
		this.insert0(offset,ch);
		return this;
	    },"~N,~A");
	$_M(c$,"insert",
	    function(offset,str,strOffset,strLen){
		this.insert0(offset,str,strOffset,strLen);
		return this;
	    },"~N,~A,~N,~N");
	$_M(c$,"insert",
	    function(offset,s){
		this.insert0(offset,s==null?"null":s.toString());
		return this;
	    },"~N,CharSequence");
	$_M(c$,"insert",
	    function(offset,s,start,end){
		this.insert0(offset,s,start,end);
		return this;
	    },"~N,CharSequence,~N,~N");
	$_M(c$,"replace",
	    function(start,end,str){
		this.replace0(start,end,str);
		return this;
	    },"~N,~N,~S");
	$_M(c$,"reverse",
	    function(){
		this.reverse0();
		return this;
	    });
    });
    // 
    //// java\util\AbstractCollection.js 
    // 
    ﻿$_L(["java.util.Collection"],"java.util.AbstractCollection",["java.lang.StringBuilder","$.UnsupportedOperationException","java.lang.reflect.Array"],function(){
	c$=$_T(java.util,"AbstractCollection",null,java.util.Collection);
	$_K(c$,
	    function(){
	    });
	$_V(c$,"add",
	    function(object){
		throw new UnsupportedOperationException();
	    },"~O");
	$_V(c$,"addAll",
	    function(collection){
		var result=false;
		var it=collection.iterator();
		while(it.hasNext()){
		    if(this.add(it.next())){
			result=true;
		    }}
		return result;
	    },"java.util.Collection");
	$_V(c$,"clear",
	    function(){
		var it=this.iterator();
		while(it.hasNext()){
		    it.next();
		    it.remove();
		}
	    });
	$_V(c$,"contains",
	    function(object){
		var it=this.iterator();
		if(object!=null){
		    while(it.hasNext()){
			if(object.equals(it.next())){
			    return true;
			}}
		}else{
		    while(it.hasNext()){
			if(it.next()==null){
			    return true;
			}}
		}return false;
	    },"~O");
	$_V(c$,"containsAll",
	    function(collection){
		var it=collection.iterator();
		while(it.hasNext()){
		    if(!this.contains(it.next())){
			return false;
		    }}
		return true;
	    },"java.util.Collection");
	$_V(c$,"isEmpty",
	    function(){
		return this.size()==0;
	    });
	$_V(c$,"remove",
	    function(object){
		var it=this.iterator();
		if(object!=null){
		    while(it.hasNext()){
			if(object.equals(it.next())){
			    it.remove();
			    return true;
			}}
		}else{
		    while(it.hasNext()){
			if(it.next()==null){
			    it.remove();
			    return true;
			}}
		}return false;
	    },"~O");
	$_V(c$,"removeAll",
	    function(collection){
		var result=false;
		var it=this.iterator();
		while(it.hasNext()){
		    if(collection.contains(it.next())){
			it.remove();
			result=true;
		    }}
		return result;
	    },"java.util.Collection");
	$_V(c$,"retainAll",
	    function(collection){
		var result=false;
		var it=this.iterator();
		while(it.hasNext()){
		    if(!collection.contains(it.next())){
			it.remove();
			result=true;
		    }}
		return result;
	    },"java.util.Collection");
	$_M(c$,"toArray",
	    function(){
		var size=this.size();
		var index=0;
		var it=this.iterator();
		var array=new Array(size);
		while(index<size){
		    array[index++]=it.next();
		}
		return array;
	    });
	$_M(c$,"toArray",
	    function(contents){
		var size=this.size();
		var index=0;
		if(size>contents.length){
		    var ct=contents.getClass().getComponentType();
		    contents=java.lang.reflect.Array.newInstance(ct,size);
		}for(var entry,$entry=this.iterator();$entry.hasNext()&&((entry=$entry.next())||true);){
		    contents[index++]=entry;
		}
		if(index<contents.length){
		    contents[index]=null;
		}return contents;
	    },"~A");
	$_V(c$,"toString",
	    function(){
		if(this.isEmpty()){
		    return"[]";
		}var buffer=new StringBuilder(this.size()*16);
		buffer.append('[');
		var it=this.iterator();
		while(it.hasNext()){
		    var next=it.next();
		    if(next!==this){
			buffer.append(next);
		    }else{
			buffer.append("(this Collection)");
		    }if(it.hasNext()){
			buffer.append(", ");
		    }}
		buffer.append(']');
		return buffer.toString();
	    });
    });
    // 
    //// java\util\AbstractList.js 
    // 
    ﻿$_L(["java.util.AbstractCollection","$.Iterator","$.List","$.ListIterator","$.RandomAccess","$.NoSuchElementException"],"java.util.AbstractList",["java.lang.IllegalArgumentException","$.IllegalStateException","$.IndexOutOfBoundsException","$.UnsupportedOperationException","java.util.ConcurrentModificationException"],function(){
	c$=$_C(function(){
	    this.modCount=0;
	    if(!$_D("java.util.AbstractList.SimpleListIterator")){
		java.util.AbstractList.$AbstractList$SimpleListIterator$();
	    }
	    if(!$_D("java.util.AbstractList.FullListIterator")){
		java.util.AbstractList.$AbstractList$FullListIterator$();
	    }
	    $_Z(this,arguments);
	},java.util,"AbstractList",java.util.AbstractCollection,java.util.List);
	$_M(c$,"add",
	    function(location,object){
		throw new UnsupportedOperationException();
	    },"~N,~O");
	$_M(c$,"add",
	    function(object){
		this.add(this.size(),object);
		return true;
	    },"~O");
	$_M(c$,"addAll",
	    function(location,collection){
		var it=collection.iterator();
		while(it.hasNext()){
		    this.add(location++,it.next());
		}
		return!collection.isEmpty();
	    },"~N,java.util.Collection");
	$_V(c$,"clear",
	    function(){
		this.removeRange(0,this.size());
	    });
	$_V(c$,"equals",
	    function(object){
		if(this===object){
		    return true;
		}if($_O(object,java.util.List)){
		    var list=object;
		    if(list.size()!=this.size()){
			return false;
		    }var it1=this.iterator();
		    var it2=list.iterator();
		    while(it1.hasNext()){
			var e1=it1.next();
			var e2=it2.next();
			if(!(e1==null?e2==null:e1.equals(e2))){
			    return false;
			}}
		    return true;
		}return false;
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		var result=1;
		var it=this.iterator();
		while(it.hasNext()){
		    var object=it.next();
		    result=(31*result)+(object==null?0:object.hashCode());
		}
		return result;
	    });
	$_V(c$,"indexOf",
	    function(object){
		var it=this.listIterator();
		if(object!=null){
		    while(it.hasNext()){
			if(object.equals(it.next())){
			    return it.previousIndex();
			}}
		}else{
		    while(it.hasNext()){
			if(it.next()==null){
			    return it.previousIndex();
			}}
		}return-1;
	    },"~O");
	$_V(c$,"iterator",
	    function(){
		return $_N(java.util.AbstractList.SimpleListIterator,this,null);
	    });
	$_V(c$,"lastIndexOf",
	    function(object){
		var it=this.listIterator(this.size());
		if(object!=null){
		    while(it.hasPrevious()){
			if(object.equals(it.previous())){
			    return it.nextIndex();
			}}
		}else{
		    while(it.hasPrevious()){
			if(it.previous()==null){
			    return it.nextIndex();
			}}
		}return-1;
	    },"~O");
	$_M(c$,"listIterator",
	    function(){
		return this.listIterator(0);
	    });
	$_M(c$,"listIterator",
	    function(location){
		return $_N(java.util.AbstractList.FullListIterator,this,null,location);
	    },"~N");
	$_M(c$,"remove",
	    function(location){
		throw new UnsupportedOperationException();
	    },"~N");
	$_M(c$,"removeRange",
	    function(start,end){
		var it=this.listIterator(start);
		for(var i=start;i<end;i++){
		    it.next();
		    it.remove();
		}
	    },"~N,~N");
	$_V(c$,"set",
	    function(location,object){
		throw new UnsupportedOperationException();
	    },"~N,~O");
	$_V(c$,"subList",
	    function(start,end){
		if(0<=start&&end<=this.size()){
		    if(start<=end){
			if($_O(this,java.util.RandomAccess)){
			    return new java.util.AbstractList.SubAbstractListRandomAccess(this,start,end);
			}return new java.util.AbstractList.SubAbstractList(this,start,end);
		    }throw new IllegalArgumentException();
		}throw new IndexOutOfBoundsException();
	    },"~N,~N");
	c$.$AbstractList$SimpleListIterator$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.pos=-1;
		this.expectedModCount=0;
		this.lastPosition=-1;
		$_Z(this,arguments);
	    },java.util.AbstractList,"SimpleListIterator",null,java.util.Iterator);
	    $_K(c$,
		function(){
		    this.expectedModCount=this.b$["java.util.AbstractList"].modCount;
		});
	    $_V(c$,"hasNext",
		function(){
		    return this.pos+1<this.b$["java.util.AbstractList"].size();
		});
	    $_V(c$,"next",
		function(){
		    if(this.expectedModCount==this.b$["java.util.AbstractList"].modCount){
			try{
			    var a=this.b$["java.util.AbstractList"].get(this.pos+1);
			    this.lastPosition=++this.pos;
			    return a;
			}catch(e){
			    if($_O(e,IndexOutOfBoundsException)){
				throw new java.util.NoSuchElementException();
			    }else{
				throw e;
			    }
			}
		    }throw new java.util.ConcurrentModificationException();
		});
	    $_V(c$,"remove",
		function(){
		    if(this.expectedModCount==this.b$["java.util.AbstractList"].modCount){
			try{
			    this.b$["java.util.AbstractList"].remove(this.lastPosition);
			}catch(e){
			    if($_O(e,IndexOutOfBoundsException)){
				throw new IllegalStateException();
			    }else{
				throw e;
			    }
			}
			if(this.b$["java.util.AbstractList"].modCount!=this.expectedModCount){
			    this.expectedModCount++;
			}if(this.pos==this.lastPosition){
			    this.pos--;
			}this.lastPosition=-1;
		    }else{
			throw new java.util.ConcurrentModificationException();
		    }});
	    c$=$_P();
	};
	c$.$AbstractList$FullListIterator$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		$_Z(this,arguments);
	    },java.util.AbstractList,"FullListIterator",java.util.AbstractList.SimpleListIterator,java.util.ListIterator,$_N(java.util.AbstractList.SimpleListIterator,this,null,$_G));
	    $_K(c$,
		function(a){
		    $_R(this,java.util.AbstractList.FullListIterator);
		    if(0<=a&&a<=this.b$["java.util.AbstractList"].size()){
			this.pos=a-1;
		    }else{
			throw new IndexOutOfBoundsException();
		    }},"~N");
	    $_V(c$,"add",
		function(a){
		    if(this.expectedModCount==this.b$["java.util.AbstractList"].modCount){
			try{
			    this.b$["java.util.AbstractList"].add(this.pos+1,a);
			}catch(e){
			    if($_O(e,IndexOutOfBoundsException)){
				throw new java.util.NoSuchElementException();
			    }else{
				throw e;
			    }
			}
			this.pos++;
			this.lastPosition=-1;
			if(this.b$["java.util.AbstractList"].modCount!=this.expectedModCount){
			    this.expectedModCount++;
			}}else{
			    throw new java.util.ConcurrentModificationException();
			}},"~O");
	    $_V(c$,"hasPrevious",
		function(){
		    return this.pos>=0;
		});
	    $_V(c$,"nextIndex",
		function(){
		    return this.pos+1;
		});
	    $_V(c$,"previous",
		function(){
		    if(this.expectedModCount==this.b$["java.util.AbstractList"].modCount){
			try{
			    var a=this.b$["java.util.AbstractList"].get(this.pos);
			    this.lastPosition=this.pos;
			    this.pos--;
			    return a;
			}catch(e){
			    if($_O(e,IndexOutOfBoundsException)){
				throw new java.util.NoSuchElementException();
			    }else{
				throw e;
			    }
			}
		    }throw new java.util.ConcurrentModificationException();
		});
	    $_V(c$,"previousIndex",
		function(){
		    return this.pos;
		});
	    $_V(c$,"set",
		function(a){
		    if(this.expectedModCount==this.b$["java.util.AbstractList"].modCount){
			try{
			    this.b$["java.util.AbstractList"].set(this.lastPosition,a);
			}catch(e){
			    if($_O(e,IndexOutOfBoundsException)){
				throw new IllegalStateException();
			    }else{
				throw e;
			    }
			}
		    }else{
			throw new java.util.ConcurrentModificationException();
		    }},"~O");
	    c$=$_P();
	};
	$_H();
	c$=$_T(java.util.AbstractList,"SubAbstractListRandomAccess",java.util.AbstractList.SubAbstractList,java.util.RandomAccess);
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.fullList=null;
	    this.offset=0;
	    this.$size=0;
	    $_Z(this,arguments);
	},java.util.AbstractList,"SubAbstractList",java.util.AbstractList);
	$_K(c$,
	    function(a,b,c){
		$_R(this,java.util.AbstractList.SubAbstractList);
		this.fullList=a;
		this.modCount=this.fullList.modCount;
		this.offset=b;
		this.$size=c-b;
	    },"java.util.AbstractList,~N,~N");
	$_M(c$,"add",
	    function(a,b){
		if(this.modCount==this.fullList.modCount){
		    if(0<=a&&a<=this.$size){
			this.fullList.add(a+this.offset,b);
			this.$size++;
			this.modCount=this.fullList.modCount;
		    }else{
			throw new IndexOutOfBoundsException();
		    }}else{
			throw new java.util.ConcurrentModificationException();
		    }},"~N,~O");
	$_M(c$,"addAll",
	    function(a,b){
		if(this.modCount==this.fullList.modCount){
		    if(0<=a&&a<=this.$size){
			var c=this.fullList.addAll(a+this.offset,b);
			if(c){
			    this.$size+=b.size();
			    this.modCount=this.fullList.modCount;
			}return c;
		    }throw new IndexOutOfBoundsException();
		}throw new java.util.ConcurrentModificationException();
	    },"~N,java.util.Collection");
	$_M(c$,"addAll",
	    function(a){
		if(this.modCount==this.fullList.modCount){
		    var b=this.fullList.addAll(this.offset+this.$size,a);
		    if(b){
			this.$size+=a.size();
			this.modCount=this.fullList.modCount;
		    }return b;
		}throw new java.util.ConcurrentModificationException();
	    },"java.util.Collection");
	$_M(c$,"get",
	    function(a){
		if(this.modCount==this.fullList.modCount){
		    if(0<=a&&a<this.$size){
			return this.fullList.get(a+this.offset);
		    }throw new IndexOutOfBoundsException();
		}throw new java.util.ConcurrentModificationException();
	    },"~N");
	$_V(c$,"iterator",
	    function(){
		return this.listIterator(0);
	    });
	$_M(c$,"listIterator",
	    function(a){
		if(this.modCount==this.fullList.modCount){
		    if(0<=a&&a<=this.$size){
			return new java.util.AbstractList.SubAbstractList.SubAbstractListIterator(this.fullList.listIterator(a+this.offset),this,this.offset,this.$size);
		    }throw new IndexOutOfBoundsException();
		}throw new java.util.ConcurrentModificationException();
	    },"~N");
	$_M(c$,"remove",
	    function(a){
		if(this.modCount==this.fullList.modCount){
		    if(0<=a&&a<this.$size){
			var b=this.fullList.remove(a+this.offset);
			this.$size--;
			this.modCount=this.fullList.modCount;
			return b;
		    }throw new IndexOutOfBoundsException();
		}throw new java.util.ConcurrentModificationException();
	    },"~N");
	$_M(c$,"removeRange",
	    function(a,b){
		if(a!=b){
		    if(this.modCount==this.fullList.modCount){
			this.fullList.removeRange(a+this.offset,b+this.offset);
			this.$size-=b-a;
			this.modCount=this.fullList.modCount;
		    }else{
			throw new java.util.ConcurrentModificationException();
		    }}},"~N,~N");
	$_M(c$,"set",
	    function(a,b){
		if(this.modCount==this.fullList.modCount){
		    if(0<=a&&a<this.$size){
			return this.fullList.set(a+this.offset,b);
		    }throw new IndexOutOfBoundsException();
		}throw new java.util.ConcurrentModificationException();
	    },"~N,~O");
	$_V(c$,"size",
	    function(){
		return this.$size;
	    });
	$_M(c$,"sizeChanged",
	    function(a){
		if(a){
		    this.$size++;
		}else{
		    this.$size--;
		}this.modCount=this.fullList.modCount;
	    },"~B");
	$_H();
	c$=$_C(function(){
	    this.subList=null;
	    this.iterator=null;
	    this.start=0;
	    this.end=0;
	    $_Z(this,arguments);
	},java.util.AbstractList.SubAbstractList,"SubAbstractListIterator",null,java.util.ListIterator);
	$_K(c$,
	    function(a,b,c,d){
		this.iterator=a;
		this.subList=b;
		this.start=c;
		this.end=this.start+d;
	    },"java.util.ListIterator,java.util.AbstractList.SubAbstractList,~N,~N");
	$_M(c$,"add",
	    function(a){
		this.iterator.add(a);
		this.subList.sizeChanged(true);
		this.end++;
	    },"~O");
	$_V(c$,"hasNext",
	    function(){
		return this.iterator.nextIndex()<this.end;
	    });
	$_V(c$,"hasPrevious",
	    function(){
		return this.iterator.previousIndex()>=this.start;
	    });
	$_M(c$,"next",
	    function(){
		if(this.iterator.nextIndex()<this.end){
		    return this.iterator.next();
		}throw new java.util.NoSuchElementException();
	    });
	$_M(c$,"nextIndex",
	    function(){
		return this.iterator.nextIndex()-this.start;
	    });
	$_M(c$,"previous",
	    function(){
		if(this.iterator.previousIndex()>=this.start){
		    return this.iterator.previous();
		}throw new java.util.NoSuchElementException();
	    });
	$_M(c$,"previousIndex",
	    function(){
		var a=this.iterator.previousIndex();
		if(a>=this.start){
		    return a-this.start;
		}return-1;
	    });
	$_M(c$,"remove",
	    function(){
		this.iterator.remove();
		this.subList.sizeChanged(false);
		this.end--;
	    });
	$_M(c$,"set",
	    function(a){
		this.iterator.set(a);
	    },"~O");
	c$=$_P();
	c$=$_P();
    });
    // 
    //// java\util\ArrayList.js 
    // 
    ﻿$_L(["java.util.AbstractList","$.List","$.RandomAccess"],"java.util.ArrayList",["java.lang.IllegalArgumentException","$.IndexOutOfBoundsException","java.lang.reflect.Array","java.util.Arrays"],function(){
	c$=$_C(function(){
	    this.firstIndex=0;
	    this.lastIndex=0;
	    this.array=null;
	    $_Z(this,arguments);
	},java.util,"ArrayList",java.util.AbstractList,[java.util.List,Cloneable,java.io.Serializable,java.util.RandomAccess]);
	$_K(c$,
	    function(){
		this.construct(0);
	    });
	$_K(c$,
	    function(capacity){
		$_R(this,java.util.ArrayList,[]);
		this.firstIndex=this.lastIndex=0;
		try{
		    this.array=this.newElementArray(capacity);
		}catch(e){
		    if($_O(e,NegativeArraySizeException)){
			throw new IllegalArgumentException();
		    }else{
			throw e;
		    }
		}
	    },"~N");
	$_K(c$,
	    function(collection){
		$_R(this,java.util.ArrayList,[]);
		var size=collection.size();
		this.firstIndex=this.lastIndex=0;
		this.array=this.newElementArray(size+(Math.floor(size/10)));
		this.addAll(collection);
	    },"java.util.Collection");
	$_M(c$,"newElementArray",
	    ($fz=function(size){
		return new Array(size);
	    },$fz.isPrivate=true,$fz),"~N");
	$_M(c$,"add",
	    function(location,object){
		var size=this.size();
		if(0<location&&location<size){
		    if(this.firstIndex==0&&this.lastIndex==this.array.length){
			this.growForInsert(location,1);
		    }else if((location<Math.floor(size/2)&&this.firstIndex>0)||this.lastIndex==this.array.length){
			System.arraycopy(this.array,this.firstIndex,this.array,--this.firstIndex,location);
		    }else{
			var index=location+this.firstIndex;
			System.arraycopy(this.array,index,this.array,index+1,size-location);
			this.lastIndex++;
		    }this.array[location+this.firstIndex]=object;
		}else if(location==0){
		    if(this.firstIndex==0){
			this.growAtFront(1);
		    }this.array[--this.firstIndex]=object;
		}else if(location==size){
		    if(this.lastIndex==this.array.length){
			this.growAtEnd(1);
		    }this.array[this.lastIndex++]=object;
		}else{
		    throw new IndexOutOfBoundsException();
		}this.modCount++;
	    },"~N,~O");
	$_M(c$,"add",
	    function(object){
		if(this.lastIndex==this.array.length){
		    this.growAtEnd(1);
		}this.array[this.lastIndex++]=object;
		this.modCount++;
		return true;
	    },"~O");
	$_M(c$,"addAll",
	    function(location,collection){
		var size=this.size();
		if(location<0||location>size){
		    throw new IndexOutOfBoundsException();
		}var growSize=collection.size();
		if(0<location&&location<size){
		    if(this.array.length-size<growSize){
			this.growForInsert(location,growSize);
		    }else if((location<Math.floor(size/2)&&this.firstIndex>0)||this.lastIndex>this.array.length-growSize){
			var newFirst=this.firstIndex-growSize;
			if(newFirst<0){
			    var index=location+this.firstIndex;
			    System.arraycopy(this.array,index,this.array,index-newFirst,size-location);
			    this.lastIndex-=newFirst;
			    newFirst=0;
			}System.arraycopy(this.array,this.firstIndex,this.array,newFirst,location);
			this.firstIndex=newFirst;
		    }else{
			var index=location+this.firstIndex;
			System.arraycopy(this.array,index,this.array,index+growSize,size-location);
			this.lastIndex+=growSize;
		    }}else if(location==0){
			this.growAtFront(growSize);
			this.firstIndex-=growSize;
		    }else if(location==size){
			if(this.lastIndex>this.array.length-growSize){
			    this.growAtEnd(growSize);
			}this.lastIndex+=growSize;
		    }if(growSize>0){
			var it=collection.iterator();
			var index=location+this.firstIndex;
			var end=index+growSize;
			while(index<end){
			    this.array[index++]=it.next();
			}
			this.modCount++;
			return true;
		    }return false;
	    },"~N,java.util.Collection");
	$_M(c$,"addAll",
	    function(collection){
		var growSize=collection.size();
		if(growSize>0){
		    if(this.lastIndex>this.array.length-growSize){
			this.growAtEnd(growSize);
		    }var it=collection.iterator();
		    var end=this.lastIndex+growSize;
		    while(this.lastIndex<end){
			this.array[this.lastIndex++]=it.next();
		    }
		    this.modCount++;
		    return true;
		}return false;
	    },"java.util.Collection");
	$_V(c$,"clear",
	    function(){
		if(this.firstIndex!=this.lastIndex){
		    java.util.Arrays.fill(this.array,this.firstIndex,this.lastIndex,null);
		    this.firstIndex=this.lastIndex=0;
		    this.modCount++;
		}});
	$_M(c$,"clone",
	    function(){
		try{
		    var newList=$_U(this,java.util.ArrayList,"clone",[]);
		    newList.array=this.array.clone();
		    return newList;
		}catch(e){
		    if($_O(e,CloneNotSupportedException)){
			return null;
		    }else{
			throw e;
		    }
		}
	    });
	$_V(c$,"contains",
	    function(object){
		if(object!=null){
		    for(var i=this.firstIndex;i<this.lastIndex;i++){
			if(object.equals(this.array[i])){
			    return true;
			}}
		}else{
		    for(var i=this.firstIndex;i<this.lastIndex;i++){
			if(this.array[i]==null){
			    return true;
			}}
		}return false;
	    },"~O");
	$_M(c$,"ensureCapacity",
	    function(minimumCapacity){
		if(this.array.length<minimumCapacity){
		    if(this.firstIndex>0){
			this.growAtFront(minimumCapacity-this.array.length);
		    }else{
			this.growAtEnd(minimumCapacity-this.array.length);
		    }}},"~N");
	$_V(c$,"get",
	    function(location){
		if(0<=location&&location<this.size()){
		    return this.array[this.firstIndex+location];
		}throw new IndexOutOfBoundsException();
	    },"~N");
	$_M(c$,"growAtEnd",
	    ($fz=function(required){
		var size=this.size();
		if(this.firstIndex>=required-(this.array.length-this.lastIndex)){
		    var newLast=this.lastIndex-this.firstIndex;
		    if(size>0){
			System.arraycopy(this.array,this.firstIndex,this.array,0,size);
			var start=newLast<this.firstIndex?this.firstIndex:newLast;
			java.util.Arrays.fill(this.array,start,this.array.length,null);
		    }this.firstIndex=0;
		    this.lastIndex=newLast;
		}else{
		    var increment=Math.floor(size/2);
		    if(required>increment){
			increment=required;
		    }if(increment<12){
			increment=12;
		    }var newArray=this.newElementArray(size+increment);
		    if(size>0){
			System.arraycopy(this.array,this.firstIndex,newArray,this.firstIndex,size);
		    }this.array=newArray;
		}},$fz.isPrivate=true,$fz),"~N");
	$_M(c$,"growAtFront",
	    ($fz=function(required){
		var size=this.size();
		if(this.array.length-this.lastIndex>=required){
		    var newFirst=this.array.length-size;
		    if(size>0){
			System.arraycopy(this.array,this.firstIndex,this.array,newFirst,size);
			var length=this.firstIndex+size>newFirst?newFirst:this.firstIndex+size;
			java.util.Arrays.fill(this.array,this.firstIndex,length,null);
		    }this.firstIndex=newFirst;
		    this.lastIndex=this.array.length;
		}else{
		    var increment=Math.floor(size/2);
		    if(required>increment){
			increment=required;
		    }if(increment<12){
			increment=12;
		    }var newArray=this.newElementArray(size+increment);
		    if(size>0){
			System.arraycopy(this.array,this.firstIndex,newArray,newArray.length-size,size);
		    }this.firstIndex=newArray.length-size;
		    this.lastIndex=newArray.length;
		    this.array=newArray;
		}},$fz.isPrivate=true,$fz),"~N");
	$_M(c$,"growForInsert",
	    ($fz=function(location,required){
		var size=this.size();
		var increment=Math.floor(size/2);
		if(required>increment){
		    increment=required;
		}if(increment<12){
		    increment=12;
		}var newArray=this.newElementArray(size+increment);
		if(location<Math.floor(size/2)){
		    var newFirst=newArray.length-(size+required);
		    System.arraycopy(this.array,location,newArray,location+increment,size-location);
		    System.arraycopy(this.array,this.firstIndex,newArray,newFirst,location);
		    this.firstIndex=newFirst;
		    this.lastIndex=newArray.length;
		}else{
		    System.arraycopy(this.array,this.firstIndex,newArray,0,location);
		    System.arraycopy(this.array,location,newArray,location+required,size-location);
		    this.firstIndex=0;
		    this.lastIndex+=required;
		}this.array=newArray;
	    },$fz.isPrivate=true,$fz),"~N,~N");
	$_V(c$,"indexOf",
	    function(object){
		if(object!=null){
		    for(var i=this.firstIndex;i<this.lastIndex;i++){
			if(object.equals(this.array[i])){
			    return i-this.firstIndex;
			}}
		}else{
		    for(var i=this.firstIndex;i<this.lastIndex;i++){
			if(this.array[i]==null){
			    return i-this.firstIndex;
			}}
		}return-1;
	    },"~O");
	$_V(c$,"isEmpty",
	    function(){
		return this.lastIndex==this.firstIndex;
	    });
	$_V(c$,"lastIndexOf",
	    function(object){
		if(object!=null){
		    for(var i=this.lastIndex-1;i>=this.firstIndex;i--){
			if(object.equals(this.array[i])){
			    return i-this.firstIndex;
			}}
		}else{
		    for(var i=this.lastIndex-1;i>=this.firstIndex;i--){
			if(this.array[i]==null){
			    return i-this.firstIndex;
			}}
		}return-1;
	    },"~O");
	$_M(c$,"remove",
	    function(location){
		var result;
		var size=this.size();
		if(0<=location&&location<size){
		    if(location==size-1){
			result=this.array[--this.lastIndex];
			this.array[this.lastIndex]=null;
		    }else if(location==0){
			result=this.array[this.firstIndex];
			this.array[this.firstIndex++]=null;
		    }else{
			var elementIndex=this.firstIndex+location;
			result=this.array[elementIndex];
			if(location<Math.floor(size/2)){
			    System.arraycopy(this.array,this.firstIndex,this.array,this.firstIndex+1,location);
			    this.array[this.firstIndex++]=null;
			}else{
			    System.arraycopy(this.array,elementIndex+1,this.array,elementIndex,size-location-1);
			    this.array[--this.lastIndex]=null;
			}}}else{
			    throw new IndexOutOfBoundsException();
			}this.modCount++;
		return result;
	    },"~N");
	$_V(c$,"removeRange",
	    function(start,end){
		if(start>=0&&start<=end&&end<=this.size()){
		    if(start==end){
			return;
		    }var size=this.size();
		    if(end==size){
			java.util.Arrays.fill(this.array,this.firstIndex+start,this.lastIndex,null);
			this.lastIndex=this.firstIndex+start;
		    }else if(start==0){
			java.util.Arrays.fill(this.array,this.firstIndex,this.firstIndex+end,null);
			this.firstIndex+=end;
		    }else{
			System.arraycopy(this.array,this.firstIndex+end,this.array,this.firstIndex+start,size-end);
			var newLast=this.lastIndex+start-end;
			java.util.Arrays.fill(this.array,newLast,this.lastIndex,null);
			this.lastIndex=newLast;
		    }this.modCount++;
		}else{
		    throw new IndexOutOfBoundsException();
		}},"~N,~N");
	$_V(c$,"set",
	    function(location,object){
		if(0<=location&&location<this.size()){
		    var result=this.array[this.firstIndex+location];
		    this.array[this.firstIndex+location]=object;
		    return result;
		}throw new IndexOutOfBoundsException();
	    },"~N,~O");
	$_V(c$,"size",
	    function(){
		return this.lastIndex-this.firstIndex;
	    });
	$_M(c$,"toArray",
	    function(){
		var size=this.size();
		var result=new Array(size);
		System.arraycopy(this.array,this.firstIndex,result,0,size);
		return result;
	    });
	$_M(c$,"toArray",
	    function(contents){
		var size=this.size();
		if(size>contents.length){
		    var ct=contents.getClass().getComponentType();
		    contents=java.lang.reflect.Array.newInstance(ct,size);
		}System.arraycopy(this.array,this.firstIndex,contents,0,size);
		if(size<contents.length){
		    contents[size]=null;
		}return contents;
	    },"~A");
	$_M(c$,"trimToSize",
	    function(){
		var size=this.size();
		var newArray=this.newElementArray(size);
		System.arraycopy(this.array,this.firstIndex,newArray,0,size);
		this.array=newArray;
		this.firstIndex=0;
		this.lastIndex=this.array.length;
	    });
    });
    // 
    //// java\util\ResourceBundle.js 
    // 
    ﻿$_L(null,"java.util.ResourceBundle",["java.lang.NullPointerException","java.util.Enumeration","$.MissingResourceException","net.sf.j2s.ajax.HttpRequest"],function(){
	c$=$_C(function(){
	    this.parent=null;
	    this.locale=null;
	    this.bundleName=null;
	    $_Z(this,arguments);
	},java.util,"ResourceBundle");
	$_K(c$,
	    function(){
	    });
	$_M(c$,"getString",
	    function(key){
		return this.getObject(key);
	    },"~S");
	$_M(c$,"getStringArray",
	    function(key){
		return this.getObject(key);
	    },"~S");
	$_M(c$,"getObject",
	    function(key){
		var obj=this.handleGetObject(key);
		if(obj==null){
		    if(this.parent!=null){
			obj=this.parent.getObject(key);
		    }if(obj==null)throw new java.util.MissingResourceException("Can't find resource for bundle "+this.getClass().getName()+", key "+key,this.getClass().getName(),key);
		}return obj;
	    },"~S");
	$_M(c$,"getLocale",
	    function(){
		return this.locale;
	    });
	$_M(c$,"setParent",
	    function(parent){
		this.parent=parent;
	    },"java.util.ResourceBundle");
	c$.getBundle=$_M(c$,"getBundle",
			 function(baseName){
			     return java.util.ResourceBundle.getBundleImpl(baseName,null,null);
			 },"~S");
	c$.getBundle=$_M(c$,"getBundle",
			 function(baseName,locale){
			     return java.util.ResourceBundle.getBundleImpl(baseName,locale,null);
			 },"~S,java.util.Locale");
	c$.getBundle=$_M(c$,"getBundle",
			 function(baseName,locale,loader){
			     if(loader==null){
				 throw new NullPointerException();
			     }return java.util.ResourceBundle.getBundleImpl(baseName,locale,loader);
			 },"~S,java.util.Locale,ClassLoader");
	c$.getBundleImpl=$_M(c$,"getBundleImpl",
			     ($fz=function(baseName,locale,loader){
				 if(baseName==null){
				     throw new NullPointerException();
				 }for(var i=0;i<java.util.ResourceBundle.caches.length;i++){
				     if(java.util.ResourceBundle.caches[i].bundleName===baseName){
					 return java.util.ResourceBundle.caches[i];
				     }}
				 var bundle=new java.util.ResourceBundle.TextResourceBundle(baseName);
				 java.util.ResourceBundle.caches[java.util.ResourceBundle.caches.length]=bundle;
				 return bundle;
			     },$fz.isPrivate=true,$fz),"~S,java.util.Locale,ClassLoader");
	c$.registerBundle=$_M(c$,"registerBundle",
			      function(baseName,content){
				  for(var i=0;i<java.util.ResourceBundle.caches.length;i++){
				      if(java.util.ResourceBundle.caches[i].bundleName===baseName){
					  return;
				      }}
				  java.util.ResourceBundle.caches[java.util.ResourceBundle.caches.length]=new java.util.ResourceBundle.TextResourceBundle(baseName,content);
			      },"~S,~S");
	$_H();
	c$=$_C(function(){
	    this.map=null;
	    this.keys=null;
	    this.content=null;
	    this.initialized=false;
	    $_Z(this,arguments);
	},java.util.ResourceBundle,"TextResourceBundle",java.util.ResourceBundle);
	$_Y(c$,function(){
	    this.map=new Array(0);
	    this.keys=new Array(0);
	});
	$_K(c$,
	    function(a){
		$_R(this,java.util.ResourceBundle.TextResourceBundle,[]);
		this.bundleName=a;
	    },"~S");
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.ResourceBundle.TextResourceBundle,[]);
		this.bundleName=a;
		this.content=b;
	    },"~S,~S");
	$_M(c$,"evalString",
	    function(a){
		var r=new Array();
		var b=false;
		var x=0;
		for(var i=0;i<a.length;i++){
		    var c=a.charAt(i);
		    if(b){
			if(c=='f') r[r.length] = '\f';
			else if(c=='t') r[r.length] = '\t';
			else if(c=='r') r[r.length] = '\r';
			else if(c=='n') r[r.length] = '\n';
			else if(c=='\'') r[r.length] = '\'';
			else if(c=='\"') r[r.length] = '\"';
			else if(c=='\\') r[r.length] = '\\';
			else if(c=='u'){
			    r[r.length]=eval("\"\\u"+a.substring(i+1,i+5)+"\"");
			    i+=4;
			}
			x=i+1;
			b=false;
		    }else if(c=='\\'){
			if(x!=i){
			    r[r.length]=a.substring(x,i);
			}
			b=true;
		    }
		}
		if(!b){
		    r[r.length]=a.substring(x,a.length);
		}
		return r.join('');
	    },"~S");
	$_M(c$,"initBundle",
	    ($fz=function(){
		if(this.initialized){
		    return;
		}this.initialized=true;
		var a=null;
		var b=this.bundleName;
		if(this.content==null){
		    var n=b.replace(/\./g,'/')+".properties";
		    var p=Clazz.binaryFolders;
		    if(p==null){
			p=["bin","","j2slib"];
		    }
		    var r=new net.sf.j2s.ajax.HttpRequest();
		    var x=0;
		    while(a==null&&x<p.length){
			var q=p[x];
			if(q.length>0&&q.lastIndexOf("/")!=q.length-1){
			    q+="/";
			}
			try{
			    r.open("GET",q+n,false);
			    r.send();
			    a=r.getResponseText();
			}catch(e){
			    r=new net.sf.j2s.ajax.HttpRequest();
			}
			x++;
		    }
		}if(this.content==null){
		    this.content=a;
		}if(this.content==null){
		    return;
		}var c=this.content.$plit("\n");
		for(var d=0;d<c.length;d++){
		    var e=c[d].trim();
		    if(!e.startsWith("#")){
			var f=e.indexOf('=');
			if(f!=-1){
			    var g=e.substring(0,f).trim();
			    var h=e.substring(f+1).trim();
			    if(h.indexOf('\\')!=-1){
				h=this.evalString(h);
			    }var i=this.map;
			    var j=this.keys;
			    {
				if(i[g]==null){
				    j[j.length]=g;
				}
				i[g]=h;
			    }}}}
	    },$fz.isPrivate=true,$fz));
	$_V(c$,"getKeys",
	    function(){
		return(($_D("java.util.ResourceBundle$TextResourceBundle$1")?0:java.util.ResourceBundle.TextResourceBundle.$ResourceBundle$TextResourceBundle$1$()),$_N(java.util.ResourceBundle$TextResourceBundle$1,this,null));
	    });
	$_V(c$,"handleGetObject",
	    function(a){
		if(!this.initialized){
		    this.initBundle();
		}var b=this.map;
		{
		    return b[a];
		}return b;
	    },"~S");
	c$.$ResourceBundle$TextResourceBundle$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.index=-1;
		$_Z(this,arguments);
	    },java.util,"ResourceBundle$TextResourceBundle$1",null,java.util.Enumeration);
	    $_V(c$,"nextElement",
		function(){
		    this.index++;
		    return this.b$["java.util.ResourceBundle.TextResourceBundle"].keys[this.index];
		});
	    $_V(c$,"hasMoreElements",
		function(){
		    return this.index<this.b$["java.util.ResourceBundle.TextResourceBundle"].keys.length-1;
		});
	    c$=$_P();
	};
	c$=$_P();
	c$.caches=c$.prototype.caches=new Array(0);
    });
    // 
    //// org\apache\harmony\luni\util\MsgHelp.js 
    // 
    ﻿$_J("org.apache.harmony.luni.util");
    $_L(["java.util.ResourceBundle"],"org.apache.harmony.luni.util.MsgHelp",["java.lang.StringBuilder"],function(){
	c$=$_T(org.apache.harmony.luni.util,"MsgHelp");
	c$.format=$_M(c$,"format",
		      function(format,args){
			  var answer=new StringBuilder(format.length+(args.length*20));
			  var argStrings=new Array(args.length);
			  for(var i=0;i<args.length;++i){
			      if(args[i]==null)argStrings[i]="<null>";
			      else argStrings[i]=args[i].toString();
			  }
			  var lastI=0;
			  for(var i=format.indexOf('{', 0); i >= 0; i = format.indexOf ('{',lastI)){
			      if(i!=0&&(format.charAt(i-1)).charCodeAt(0)==('\\').charCodeAt(0)){
				  if(i!=1)answer.append(format.substring(lastI,i-1));
				  answer.append('{');
				  lastI=i+1;
			      }else{
				  if(i>format.length-3){
				      answer.append(format.substring(lastI,format.length));
				      lastI=format.length;
				  }else{
				      var argnum=((format.charAt(i+1)).charCodeAt(0)-('0').charCodeAt(0));
				      if(argnum<0||(format.charAt(i+2)).charCodeAt(0)!=('}').charCodeAt(0)){
					  answer.append(format.substring(lastI,i+1));
					  lastI=i+1;
				      }else{
					  answer.append(format.substring(lastI,i));
					  if(argnum>=argStrings.length)answer.append("<missing argument>");
					  else answer.append(argStrings[argnum]);
					  lastI=i+3;
				      }}}}
			  if(lastI<format.length)answer.append(format.substring(lastI,format.length));
			  return answer.toString();
		      },"~S,~A");
	c$.setLocale=$_M(c$,"setLocale",
			 function(locale,resource){
			     return java.util.ResourceBundle.getBundle(resource);
			 },"java.util.Locale,~S");
    });
    // 
    //// java\util\Locale.js 
    // 
    ﻿$_L(null,"java.util.Locale",["java.lang.InternalError","$.NullPointerException","java.util.MissingResourceException"],function(){
	c$=$_C(function(){
	    this.language="";
	    this.country="";
	    this.variant="";
	    this.hashcode=-1;
	    $_Z(this,arguments);
	},java.util,"Locale",null,[Cloneable,java.io.Serializable]);
	$_K(c$,
	    function(language,country,variant){
		this.language=this.convertOldISOCodes(language);
		this.country=country.toUpperCase();
		this.variant=variant.intern();
	    },"~S,~S,~S");
	$_K(c$,
	    function(language,country){
		this.construct(language,country,"");
	    },"~S,~S");
	$_K(c$,
	    function(language){
		this.construct(language,"","");
	    },"~S");
	c$.getDefault=$_M(c$,"getDefault",
			  function(){
			      if(java.util.Locale.defaultLocale==null){
				  var language="en";
				  var country="US";
				  var variant="";
				  navigator.userAgent.replace(/;\s*([a-zA-Z]{2,})[-_]([a-zA-Z]{2,});/,function($0,$1,$2){
				      language=$1;
				      country=$2;
				  });
				  java.util.Locale.defaultLocale=new java.util.Locale(language,country,variant);
			      }return java.util.Locale.defaultLocale;
			  });
	c$.setDefault=$_M(c$,"setDefault",
			  function(newLocale){
			      if(newLocale==null)throw new NullPointerException("Can't set default locale to NULL");
			      {
				  java.util.Locale.defaultLocale=newLocale;
			      }},"java.util.Locale");
	c$.getAvailableLocales=$_M(c$,"getAvailableLocales",
				   function(){
				       var lcl=java.util.Locale;
				       return[
					   lcl.ENGLISH,
					   lcl.ENGLISH,
					   lcl.FRENCH,
					   lcl.GERMAN,
					   lcl.ITALIAN,
					   lcl.JAPANESE,
					   lcl.KOREAN,
					   lcl.CHINESE,
					   lcl.SIMPLIFIED_CHINESE,
					   lcl.TRADITIONAL_CHINESE,
					   lcl.FRANCE,
					   lcl.GERMANY,
					   lcl.ITALY,
					   lcl.JAPAN,
					   lcl.KOREA,
					   lcl.CHINA,
					   lcl.PRC,
					   lcl.TAIWAN,
					   lcl.UK,
					   lcl.US,
					   lcl.CANADA,
					   lcl.CANADA_FRENCH
				       ];
				   });
	c$.getISOCountries=$_M(c$,"getISOCountries",
			       function(){
				   if(java.util.Locale.isoCountries==null){
				       ($t$=java.util.Locale.isoCountries=new Array(Math.floor(",ADAND,AEARE,AFAFG,AGATG,AIAIA,ALALB,AMARM,ANANT,AOAGO,AQATA,ARARG,ASASM,ATAUT,AUAUS,AWABW,AZAZE,BABIH,BBBRB,BDBGD,BEBEL,BFBFA,BGBGR,BHBHR,BIBDI,BJBEN,BMBMU,BNBRN,BOBOL,BRBRA,BSBHS,BTBTN,BVBVT,BWBWA,BYBLR,BZBLZ,CACAN,CCCCK,CFCAF,CGCOG,CHCHE,CICIV,CKCOK,CLCHL,CMCMR,CNCHN,COCOL,CRCRI,CUCUB,CVCPV,CXCXR,CYCYP,CZCZE,DEDEU,DJDJI,DKDNK,DMDMA,DODOM,DZDZA,ECECU,EEEST,EGEGY,EHESH,ERERI,ESESP,ETETH,FIFIN,FJFJI,FKFLK,FMFSM,FOFRO,FRFRA,FXFXX,GAGAB,GBGBR,GDGRD,GEGEO,GFGUF,GHGHA,GIGIB,GLGRL,GMGMB,GNGIN,GPGLP,GQGNQ,GRGRC,GSSGS,GTGTM,GUGUM,GWGNB,GYGUY,HKHKG,HMHMD,HNHND,HRHRV,HTHTI,HUHUN,IDIDN,IEIRL,ILISR,ININD,IOIOT,IQIRQ,IRIRN,ISISL,ITITA,JMJAM,JOJOR,JPJPN,KEKEN,KGKGZ,KHKHM,KIKIR,KMCOM,KNKNA,KPPRK,KRKOR,KWKWT,KYCYM,KZKAZ,LALAO,LBLBN,LCLCA,LILIE,LKLKA,LRLBR,LSLSO,LTLTU,LULUX,LVLVA,LYLBY,MAMAR,MCMCO,MDMDA,MGMDG,MHMHL,MKMKD,MLMLI,MMMMR,MNMNG,MOMAC,MPMNP,MQMTQ,MRMRT,MSMSR,MTMLT,MUMUS,MVMDV,MWMWI,MXMEX,MYMYS,MZMOZ,NANAM,NCNCL,NENER,NFNFK,NGNGA,NINIC,NLNLD,NONOR,NPNPL,NRNRU,NUNIU,NZNZL,OMOMN,PAPAN,PEPER,PFPYF,PGPNG,PHPHL,PKPAK,PLPOL,PMSPM,PNPCN,PRPRI,PTPRT,PWPLW,PYPRY,QAQAT,REREU,ROROM,RURUS,RWRWA,SASAU,SBSLB,SCSYC,SDSDN,SESWE,SGSGP,SHSHN,SISVN,SJSJM,SKSVK,SLSLE,SMSMR,SNSEN,SOSOM,SRSUR,STSTP,SVSLV,SYSYR,SZSWZ,TCTCA,TDTCD,TFATF,TGTGO,THTHA,TJTJK,TKTKL,TMTKM,TNTUN,TOTON,TPTMP,TRTUR,TTTTO,TVTUV,TWTWN,TZTZA,UAUKR,UGUGA,UMUMI,USUSA,UYURY,UZUZB,VAVAT,VCVCT,VEVEN,VGVGB,VIVIR,VNVNM,VUVUT,WFWLF,WSWSM,YEYEM,YTMYT,YUYUG,ZAZAF,ZMZMB,ZRZAR,ZWZWE".length/6)),java.util.Locale.prototype.isoCountries=java.util.Locale.isoCountries,$t$);
				       for(var i=0;i<java.util.Locale.isoCountries.length;i++)java.util.Locale.isoCountries[i]=",ADAND,AEARE,AFAFG,AGATG,AIAIA,ALALB,AMARM,ANANT,AOAGO,AQATA,ARARG,ASASM,ATAUT,AUAUS,AWABW,AZAZE,BABIH,BBBRB,BDBGD,BEBEL,BFBFA,BGBGR,BHBHR,BIBDI,BJBEN,BMBMU,BNBRN,BOBOL,BRBRA,BSBHS,BTBTN,BVBVT,BWBWA,BYBLR,BZBLZ,CACAN,CCCCK,CFCAF,CGCOG,CHCHE,CICIV,CKCOK,CLCHL,CMCMR,CNCHN,COCOL,CRCRI,CUCUB,CVCPV,CXCXR,CYCYP,CZCZE,DEDEU,DJDJI,DKDNK,DMDMA,DODOM,DZDZA,ECECU,EEEST,EGEGY,EHESH,ERERI,ESESP,ETETH,FIFIN,FJFJI,FKFLK,FMFSM,FOFRO,FRFRA,FXFXX,GAGAB,GBGBR,GDGRD,GEGEO,GFGUF,GHGHA,GIGIB,GLGRL,GMGMB,GNGIN,GPGLP,GQGNQ,GRGRC,GSSGS,GTGTM,GUGUM,GWGNB,GYGUY,HKHKG,HMHMD,HNHND,HRHRV,HTHTI,HUHUN,IDIDN,IEIRL,ILISR,ININD,IOIOT,IQIRQ,IRIRN,ISISL,ITITA,JMJAM,JOJOR,JPJPN,KEKEN,KGKGZ,KHKHM,KIKIR,KMCOM,KNKNA,KPPRK,KRKOR,KWKWT,KYCYM,KZKAZ,LALAO,LBLBN,LCLCA,LILIE,LKLKA,LRLBR,LSLSO,LTLTU,LULUX,LVLVA,LYLBY,MAMAR,MCMCO,MDMDA,MGMDG,MHMHL,MKMKD,MLMLI,MMMMR,MNMNG,MOMAC,MPMNP,MQMTQ,MRMRT,MSMSR,MTMLT,MUMUS,MVMDV,MWMWI,MXMEX,MYMYS,MZMOZ,NANAM,NCNCL,NENER,NFNFK,NGNGA,NINIC,NLNLD,NONOR,NPNPL,NRNRU,NUNIU,NZNZL,OMOMN,PAPAN,PEPER,PFPYF,PGPNG,PHPHL,PKPAK,PLPOL,PMSPM,PNPCN,PRPRI,PTPRT,PWPLW,PYPRY,QAQAT,REREU,ROROM,RURUS,RWRWA,SASAU,SBSLB,SCSYC,SDSDN,SESWE,SGSGP,SHSHN,SISVN,SJSJM,SKSVK,SLSLE,SMSMR,SNSEN,SOSOM,SRSUR,STSTP,SVSLV,SYSYR,SZSWZ,TCTCA,TDTCD,TFATF,TGTGO,THTHA,TJTJK,TKTKL,TMTKM,TNTUN,TOTON,TPTMP,TRTUR,TTTTO,TVTUV,TWTWN,TZTZA,UAUKR,UGUGA,UMUMI,USUSA,UYURY,UZUZB,VAVAT,VCVCT,VEVEN,VGVGB,VIVIR,VNVNM,VUVUT,WFWLF,WSWSM,YEYEM,YTMYT,YUYUG,ZAZAF,ZMZMB,ZRZAR,ZWZWE".substring((i*6)+1,(i*6)+3);

				   }var result=new Array(java.util.Locale.isoCountries.length);
				   System.arraycopy(java.util.Locale.isoCountries,0,result,0,java.util.Locale.isoCountries.length);
				   return result;
			       });
	c$.getISOLanguages=$_M(c$,"getISOLanguages",
			       function(){
				   if(java.util.Locale.isoLanguages==null){
				       ($t$=java.util.Locale.isoLanguages=new Array(Math.floor(",aaaar,ababk,afafr,amamh,arara,asasm,ayaym,azaze,babak,bebel,bgbul,bhbih,bibis,bnben,bobod,brbre,cacat,cocos,csces,cycym,dadan,dedeu,dzdzo,elell,eneng,eoepo,esspa,etest,eueus,fafas,fifin,fjfij,fofao,frfra,fyfry,gagai,gdgdh,glglg,gngrn,guguj,hahau,heheb,hihin,hrhrv,huhun,hyhye,iaina,idind,ieile,ikipk,inind,isisl,itita,iuiku,iwheb,jajpn,jiyid,jwjaw,kakat,kkkaz,klkal,kmkhm,knkan,kokor,kskas,kukur,kykir,lalat,lnlin,lolao,ltlit,lvlav,mgmlg,mimri,mkmkd,mlmal,mnmon,momol,mrmar,msmsa,mtmlt,mymya,nanau,nenep,nlnld,nonor,ococi,omorm,orori,papan,plpol,pspus,ptpor,quque,rmroh,rnrun,roron,rurus,rwkin,sasan,sdsnd,sgsag,shsrp,sisin,skslk,slslv,smsmo,snsna,sosom,sqsqi,srsrp,ssssw,stsot,susun,svswe,swswa,tatam,tetel,tgtgk,ththa,titir,tktuk,tltgl,tntsn,toton,trtur,tstso,tttat,twtwi,uguig,ukukr,ururd,uzuzb,vivie,vovol,wowol,xhxho,yiyid,yoyor,zazha,zhzho,zuzul".length/6)),java.util.Locale.prototype.isoLanguages=java.util.Locale.isoLanguages,$t$);
				       for(var i=0;i<java.util.Locale.isoLanguages.length;i++)java.util.Locale.isoLanguages[i]=",aaaar,ababk,afafr,amamh,arara,asasm,ayaym,azaze,babak,bebel,bgbul,bhbih,bibis,bnben,bobod,brbre,cacat,cocos,csces,cycym,dadan,dedeu,dzdzo,elell,eneng,eoepo,esspa,etest,eueus,fafas,fifin,fjfij,fofao,frfra,fyfry,gagai,gdgdh,glglg,gngrn,guguj,hahau,heheb,hihin,hrhrv,huhun,hyhye,iaina,idind,ieile,ikipk,inind,isisl,itita,iuiku,iwheb,jajpn,jiyid,jwjaw,kakat,kkkaz,klkal,kmkhm,knkan,kokor,kskas,kukur,kykir,lalat,lnlin,lolao,ltlit,lvlav,mgmlg,mimri,mkmkd,mlmal,mnmon,momol,mrmar,msmsa,mtmlt,mymya,nanau,nenep,nlnld,nonor,ococi,omorm,orori,papan,plpol,pspus,ptpor,quque,rmroh,rnrun,roron,rurus,rwkin,sasan,sdsnd,sgsag,shsrp,sisin,skslk,slslv,smsmo,snsna,sosom,sqsqi,srsrp,ssssw,stsot,susun,svswe,swswa,tatam,tetel,tgtgk,ththa,titir,tktuk,tltgl,tntsn,toton,trtur,tstso,tttat,twtwi,uguig,ukukr,ururd,uzuzb,vivie,vovol,wowol,xhxho,yiyid,yoyor,zazha,zhzho,zuzul".substring((i*6)+1,(i*6)+3);

				   }var result=new Array(java.util.Locale.isoLanguages.length);
				   System.arraycopy(java.util.Locale.isoLanguages,0,result,0,java.util.Locale.isoLanguages.length);
				   return result;
			       });
	$_M(c$,"getLanguage",
	    function(){
		return this.language;
	    });
	$_M(c$,"getCountry",
	    function(){
		return this.country;
	    });
	$_M(c$,"getVariant",
	    function(){
		return this.variant;
	    });
	$_V(c$,"toString",
	    function(){
		var l=this.language.length!=0;
		var c=this.country.length!=0;
		var v=this.variant.length!=0;
		var result=this.language;
		if(c||(l&&v)){
		    result+='_'+this.country;
		}if(v&&(l||c)){
		    result+='_'+this.variant;
		}return result;
	    });
	$_M(c$,"getISO3Language",
	    function(){
		var length=this.language.length;
		if(length==0){
		    return"";
		}var index=",aaaar,ababk,afafr,amamh,arara,asasm,ayaym,azaze,babak,bebel,bgbul,bhbih,bibis,bnben,bobod,brbre,cacat,cocos,csces,cycym,dadan,dedeu,dzdzo,elell,eneng,eoepo,esspa,etest,eueus,fafas,fifin,fjfij,fofao,frfra,fyfry,gagai,gdgdh,glglg,gngrn,guguj,hahau,heheb,hihin,hrhrv,huhun,hyhye,iaina,idind,ieile,ikipk,inind,isisl,itita,iuiku,iwheb,jajpn,jiyid,jwjaw,kakat,kkkaz,klkal,kmkhm,knkan,kokor,kskas,kukur,kykir,lalat,lnlin,lolao,ltlit,lvlav,mgmlg,mimri,mkmkd,mlmal,mnmon,momol,mrmar,msmsa,mtmlt,mymya,nanau,nenep,nlnld,nonor,ococi,omorm,orori,papan,plpol,pspus,ptpor,quque,rmroh,rnrun,roron,rurus,rwkin,sasan,sdsnd,sgsag,shsrp,sisin,skslk,slslv,smsmo,snsna,sosom,sqsqi,srsrp,ssssw,stsot,susun,svswe,swswa,tatam,tetel,tgtgk,ththa,titir,tktuk,tltgl,tntsn,toton,trtur,tstso,tttat,twtwi,uguig,ukukr,ururd,uzuzb,vivie,vovol,wowol,xhxho,yiyid,yoyor,zazha,zhzho,zuzul".indexOf(","+this.language);
		if(index==-1||length!=2){
		    throw new java.util.MissingResourceException("Couldn't find 3-letter language code for "+this.language,"LocaleElements_"+this.toString(),"ShortLanguage");
		}return",aaaar,ababk,afafr,amamh,arara,asasm,ayaym,azaze,babak,bebel,bgbul,bhbih,bibis,bnben,bobod,brbre,cacat,cocos,csces,cycym,dadan,dedeu,dzdzo,elell,eneng,eoepo,esspa,etest,eueus,fafas,fifin,fjfij,fofao,frfra,fyfry,gagai,gdgdh,glglg,gngrn,guguj,hahau,heheb,hihin,hrhrv,huhun,hyhye,iaina,idind,ieile,ikipk,inind,isisl,itita,iuiku,iwheb,jajpn,jiyid,jwjaw,kakat,kkkaz,klkal,kmkhm,knkan,kokor,kskas,kukur,kykir,lalat,lnlin,lolao,ltlit,lvlav,mgmlg,mimri,mkmkd,mlmal,mnmon,momol,mrmar,msmsa,mtmlt,mymya,nanau,nenep,nlnld,nonor,ococi,omorm,orori,papan,plpol,pspus,ptpor,quque,rmroh,rnrun,roron,rurus,rwkin,sasan,sdsnd,sgsag,shsrp,sisin,skslk,slslv,smsmo,snsna,sosom,sqsqi,srsrp,ssssw,stsot,susun,svswe,swswa,tatam,tetel,tgtgk,ththa,titir,tktuk,tltgl,tntsn,toton,trtur,tstso,tttat,twtwi,uguig,ukukr,ururd,uzuzb,vivie,vovol,wowol,xhxho,yiyid,yoyor,zazha,zhzho,zuzul".substring(index+3,index+6);
	    });
	$_M(c$,"getISO3Country",
	    function(){
		var length=this.country.length;
		if(length==0){
		    return"";
		}var index=",ADAND,AEARE,AFAFG,AGATG,AIAIA,ALALB,AMARM,ANANT,AOAGO,AQATA,ARARG,ASASM,ATAUT,AUAUS,AWABW,AZAZE,BABIH,BBBRB,BDBGD,BEBEL,BFBFA,BGBGR,BHBHR,BIBDI,BJBEN,BMBMU,BNBRN,BOBOL,BRBRA,BSBHS,BTBTN,BVBVT,BWBWA,BYBLR,BZBLZ,CACAN,CCCCK,CFCAF,CGCOG,CHCHE,CICIV,CKCOK,CLCHL,CMCMR,CNCHN,COCOL,CRCRI,CUCUB,CVCPV,CXCXR,CYCYP,CZCZE,DEDEU,DJDJI,DKDNK,DMDMA,DODOM,DZDZA,ECECU,EEEST,EGEGY,EHESH,ERERI,ESESP,ETETH,FIFIN,FJFJI,FKFLK,FMFSM,FOFRO,FRFRA,FXFXX,GAGAB,GBGBR,GDGRD,GEGEO,GFGUF,GHGHA,GIGIB,GLGRL,GMGMB,GNGIN,GPGLP,GQGNQ,GRGRC,GSSGS,GTGTM,GUGUM,GWGNB,GYGUY,HKHKG,HMHMD,HNHND,HRHRV,HTHTI,HUHUN,IDIDN,IEIRL,ILISR,ININD,IOIOT,IQIRQ,IRIRN,ISISL,ITITA,JMJAM,JOJOR,JPJPN,KEKEN,KGKGZ,KHKHM,KIKIR,KMCOM,KNKNA,KPPRK,KRKOR,KWKWT,KYCYM,KZKAZ,LALAO,LBLBN,LCLCA,LILIE,LKLKA,LRLBR,LSLSO,LTLTU,LULUX,LVLVA,LYLBY,MAMAR,MCMCO,MDMDA,MGMDG,MHMHL,MKMKD,MLMLI,MMMMR,MNMNG,MOMAC,MPMNP,MQMTQ,MRMRT,MSMSR,MTMLT,MUMUS,MVMDV,MWMWI,MXMEX,MYMYS,MZMOZ,NANAM,NCNCL,NENER,NFNFK,NGNGA,NINIC,NLNLD,NONOR,NPNPL,NRNRU,NUNIU,NZNZL,OMOMN,PAPAN,PEPER,PFPYF,PGPNG,PHPHL,PKPAK,PLPOL,PMSPM,PNPCN,PRPRI,PTPRT,PWPLW,PYPRY,QAQAT,REREU,ROROM,RURUS,RWRWA,SASAU,SBSLB,SCSYC,SDSDN,SESWE,SGSGP,SHSHN,SISVN,SJSJM,SKSVK,SLSLE,SMSMR,SNSEN,SOSOM,SRSUR,STSTP,SVSLV,SYSYR,SZSWZ,TCTCA,TDTCD,TFATF,TGTGO,THTHA,TJTJK,TKTKL,TMTKM,TNTUN,TOTON,TPTMP,TRTUR,TTTTO,TVTUV,TWTWN,TZTZA,UAUKR,UGUGA,UMUMI,USUSA,UYURY,UZUZB,VAVAT,VCVCT,VEVEN,VGVGB,VIVIR,VNVNM,VUVUT,WFWLF,WSWSM,YEYEM,YTMYT,YUYUG,ZAZAF,ZMZMB,ZRZAR,ZWZWE".indexOf(","+this.country);
		if(index==-1||length!=2){
		    throw new java.util.MissingResourceException("Couldn't find 3-letter country code for "+this.country,"LocaleElements_"+this.toString(),"ShortCountry");
		}return",ADAND,AEARE,AFAFG,AGATG,AIAIA,ALALB,AMARM,ANANT,AOAGO,AQATA,ARARG,ASASM,ATAUT,AUAUS,AWABW,AZAZE,BABIH,BBBRB,BDBGD,BEBEL,BFBFA,BGBGR,BHBHR,BIBDI,BJBEN,BMBMU,BNBRN,BOBOL,BRBRA,BSBHS,BTBTN,BVBVT,BWBWA,BYBLR,BZBLZ,CACAN,CCCCK,CFCAF,CGCOG,CHCHE,CICIV,CKCOK,CLCHL,CMCMR,CNCHN,COCOL,CRCRI,CUCUB,CVCPV,CXCXR,CYCYP,CZCZE,DEDEU,DJDJI,DKDNK,DMDMA,DODOM,DZDZA,ECECU,EEEST,EGEGY,EHESH,ERERI,ESESP,ETETH,FIFIN,FJFJI,FKFLK,FMFSM,FOFRO,FRFRA,FXFXX,GAGAB,GBGBR,GDGRD,GEGEO,GFGUF,GHGHA,GIGIB,GLGRL,GMGMB,GNGIN,GPGLP,GQGNQ,GRGRC,GSSGS,GTGTM,GUGUM,GWGNB,GYGUY,HKHKG,HMHMD,HNHND,HRHRV,HTHTI,HUHUN,IDIDN,IEIRL,ILISR,ININD,IOIOT,IQIRQ,IRIRN,ISISL,ITITA,JMJAM,JOJOR,JPJPN,KEKEN,KGKGZ,KHKHM,KIKIR,KMCOM,KNKNA,KPPRK,KRKOR,KWKWT,KYCYM,KZKAZ,LALAO,LBLBN,LCLCA,LILIE,LKLKA,LRLBR,LSLSO,LTLTU,LULUX,LVLVA,LYLBY,MAMAR,MCMCO,MDMDA,MGMDG,MHMHL,MKMKD,MLMLI,MMMMR,MNMNG,MOMAC,MPMNP,MQMTQ,MRMRT,MSMSR,MTMLT,MUMUS,MVMDV,MWMWI,MXMEX,MYMYS,MZMOZ,NANAM,NCNCL,NENER,NFNFK,NGNGA,NINIC,NLNLD,NONOR,NPNPL,NRNRU,NUNIU,NZNZL,OMOMN,PAPAN,PEPER,PFPYF,PGPNG,PHPHL,PKPAK,PLPOL,PMSPM,PNPCN,PRPRI,PTPRT,PWPLW,PYPRY,QAQAT,REREU,ROROM,RURUS,RWRWA,SASAU,SBSLB,SCSYC,SDSDN,SESWE,SGSGP,SHSHN,SISVN,SJSJM,SKSVK,SLSLE,SMSMR,SNSEN,SOSOM,SRSUR,STSTP,SVSLV,SYSYR,SZSWZ,TCTCA,TDTCD,TFATF,TGTGO,THTHA,TJTJK,TKTKL,TMTKM,TNTUN,TOTON,TPTMP,TRTUR,TTTTO,TVTUV,TWTWN,TZTZA,UAUKR,UGUGA,UMUMI,USUSA,UYURY,UZUZB,VAVAT,VCVCT,VEVEN,VGVGB,VIVIR,VNVNM,VUVUT,WFWLF,WSWSM,YEYEM,YTMYT,YUYUG,ZAZAF,ZMZMB,ZRZAR,ZWZWE".substring(index+3,index+6);
	    });
	$_M(c$,"getDisplayLanguage",
	    function(){
		return this.getDisplayLanguage(java.util.Locale.getDefault());
	    });
	$_M(c$,"getDisplayLanguage",
	    function(inLocale){
		return inLocale.language;
	    },"java.util.Locale");
	$_M(c$,"getDisplayCountry",
	    function(){
		return this.getDisplayCountry(java.util.Locale.getDefault());
	    });
	$_M(c$,"getDisplayCountry",
	    function(inLocale){
		return inLocale.country;
	    },"java.util.Locale");
	$_M(c$,"getDisplayVariant",
	    function(){
		return this.getDisplayVariant(java.util.Locale.getDefault());
	    });
	$_M(c$,"getDisplayVariant",
	    function(inLocale){
		return inLocale.variant;
	    },"java.util.Locale");
	$_M(c$,"getDisplayName",
	    function(){
		return this.getDisplayName(java.util.Locale.getDefault());
	    });
	$_M(c$,"getDisplayName",
	    function(inLocale){
		var s=inLocale.language+"_"+inLocale.country;
		var v=inLocale.variant;
		if(v!=null&&v.length!=0){
		    return s+"("+v+")";
		}else{
		    return s;
		}
	    },"java.util.Locale");
	$_M(c$,"clone",
	    function(){
		try{
		    var that=$_U(this,java.util.Locale,"clone",[]);
		    return that;
		}catch(e){
		    if($_O(e,CloneNotSupportedException)){
			throw new InternalError();
		    }else{
			throw e;
		    }
		}
	    });
	$_V(c$,"hashCode",
	    function(){
		if(this.hashcode==-1){
		    this.hashcode=this.language.hashCode()^this.country.hashCode()^this.variant.hashCode();
		}return this.hashcode;
	    });
	$_V(c$,"equals",
	    function(obj){
		if(this===obj)return true;
		if(!($_O(obj,java.util.Locale)))return false;
		var other=obj;
		if(this.hashCode()!=other.hashCode())return false;
		if(this.language!==other.language)return false;
		if(this.country!==other.country)return false;
		if(this.variant!==other.variant)return false;
		return true;
	    },"~O");
	$_M(c$,"convertOldISOCodes",
	    ($fz=function(language){
		language=language.toLowerCase();
		if(language==="he"){
		    return"iw";
		}else if(language==="yi"){
		    return"ji";
		}else if(language==="id"){
		    return"in";
		}else{
		    return language;
		}},$fz.isPrivate=true,$fz),"~S");
	c$.ENGLISH=c$.prototype.ENGLISH=new java.util.Locale("en","","");
	c$.FRENCH=c$.prototype.FRENCH=new java.util.Locale("fr","","");
	c$.GERMAN=c$.prototype.GERMAN=new java.util.Locale("de","","");
	c$.ITALIAN=c$.prototype.ITALIAN=new java.util.Locale("it","","");
	c$.JAPANESE=c$.prototype.JAPANESE=new java.util.Locale("ja","","");
	c$.KOREAN=c$.prototype.KOREAN=new java.util.Locale("ko","","");
	c$.CHINESE=c$.prototype.CHINESE=new java.util.Locale("zh","","");
	c$.SIMPLIFIED_CHINESE=c$.prototype.SIMPLIFIED_CHINESE=new java.util.Locale("zh","CN","");
	c$.TRADITIONAL_CHINESE=c$.prototype.TRADITIONAL_CHINESE=new java.util.Locale("zh","TW","");
	c$.FRANCE=c$.prototype.FRANCE=new java.util.Locale("fr","FR","");
	c$.GERMANY=c$.prototype.GERMANY=new java.util.Locale("de","DE","");
	c$.ITALY=c$.prototype.ITALY=new java.util.Locale("it","IT","");
	c$.JAPAN=c$.prototype.JAPAN=new java.util.Locale("ja","JP","");
	c$.KOREA=c$.prototype.KOREA=new java.util.Locale("ko","KR","");
	c$.CHINA=c$.prototype.CHINA=new java.util.Locale("zh","CN","");
	c$.PRC=c$.prototype.PRC=new java.util.Locale("zh","CN","");
	c$.TAIWAN=c$.prototype.TAIWAN=new java.util.Locale("zh","TW","");
	c$.UK=c$.prototype.UK=new java.util.Locale("en","GB","");
	c$.US=c$.prototype.US=new java.util.Locale("en","US","");
	c$.CANADA=c$.prototype.CANADA=new java.util.Locale("en","CA","");
	c$.CANADA_FRENCH=c$.prototype.CANADA_FRENCH=new java.util.Locale("fr","CA","");
	$_S(c$,
	    "defaultLocale",null,
	    "isoLanguages",null,
	    "compressedIsoLanguages",",aaaar,ababk,afafr,amamh,arara,asasm,ayaym,azaze,babak,bebel,bgbul,bhbih,bibis,bnben,bobod,brbre,cacat,cocos,csces,cycym,dadan,dedeu,dzdzo,elell,eneng,eoepo,esspa,etest,eueus,fafas,fifin,fjfij,fofao,frfra,fyfry,gagai,gdgdh,glglg,gngrn,guguj,hahau,heheb,hihin,hrhrv,huhun,hyhye,iaina,idind,ieile,ikipk,inind,isisl,itita,iuiku,iwheb,jajpn,jiyid,jwjaw,kakat,kkkaz,klkal,kmkhm,knkan,kokor,kskas,kukur,kykir,lalat,lnlin,lolao,ltlit,lvlav,mgmlg,mimri,mkmkd,mlmal,mnmon,momol,mrmar,msmsa,mtmlt,mymya,nanau,nenep,nlnld,nonor,ococi,omorm,orori,papan,plpol,pspus,ptpor,quque,rmroh,rnrun,roron,rurus,rwkin,sasan,sdsnd,sgsag,shsrp,sisin,skslk,slslv,smsmo,snsna,sosom,sqsqi,srsrp,ssssw,stsot,susun,svswe,swswa,tatam,tetel,tgtgk,ththa,titir,tktuk,tltgl,tntsn,toton,trtur,tstso,tttat,twtwi,uguig,ukukr,ururd,uzuzb,vivie,vovol,wowol,xhxho,yiyid,yoyor,zazha,zhzho,zuzul",
	    "isoCountries",null,
	    "compressedIsoCountries",",ADAND,AEARE,AFAFG,AGATG,AIAIA,ALALB,AMARM,ANANT,AOAGO,AQATA,ARARG,ASASM,ATAUT,AUAUS,AWABW,AZAZE,BABIH,BBBRB,BDBGD,BEBEL,BFBFA,BGBGR,BHBHR,BIBDI,BJBEN,BMBMU,BNBRN,BOBOL,BRBRA,BSBHS,BTBTN,BVBVT,BWBWA,BYBLR,BZBLZ,CACAN,CCCCK,CFCAF,CGCOG,CHCHE,CICIV,CKCOK,CLCHL,CMCMR,CNCHN,COCOL,CRCRI,CUCUB,CVCPV,CXCXR,CYCYP,CZCZE,DEDEU,DJDJI,DKDNK,DMDMA,DODOM,DZDZA,ECECU,EEEST,EGEGY,EHESH,ERERI,ESESP,ETETH,FIFIN,FJFJI,FKFLK,FMFSM,FOFRO,FRFRA,FXFXX,GAGAB,GBGBR,GDGRD,GEGEO,GFGUF,GHGHA,GIGIB,GLGRL,GMGMB,GNGIN,GPGLP,GQGNQ,GRGRC,GSSGS,GTGTM,GUGUM,GWGNB,GYGUY,HKHKG,HMHMD,HNHND,HRHRV,HTHTI,HUHUN,IDIDN,IEIRL,ILISR,ININD,IOIOT,IQIRQ,IRIRN,ISISL,ITITA,JMJAM,JOJOR,JPJPN,KEKEN,KGKGZ,KHKHM,KIKIR,KMCOM,KNKNA,KPPRK,KRKOR,KWKWT,KYCYM,KZKAZ,LALAO,LBLBN,LCLCA,LILIE,LKLKA,LRLBR,LSLSO,LTLTU,LULUX,LVLVA,LYLBY,MAMAR,MCMCO,MDMDA,MGMDG,MHMHL,MKMKD,MLMLI,MMMMR,MNMNG,MOMAC,MPMNP,MQMTQ,MRMRT,MSMSR,MTMLT,MUMUS,MVMDV,MWMWI,MXMEX,MYMYS,MZMOZ,NANAM,NCNCL,NENER,NFNFK,NGNGA,NINIC,NLNLD,NONOR,NPNPL,NRNRU,NUNIU,NZNZL,OMOMN,PAPAN,PEPER,PFPYF,PGPNG,PHPHL,PKPAK,PLPOL,PMSPM,PNPCN,PRPRI,PTPRT,PWPLW,PYPRY,QAQAT,REREU,ROROM,RURUS,RWRWA,SASAU,SBSLB,SCSYC,SDSDN,SESWE,SGSGP,SHSHN,SISVN,SJSJM,SKSVK,SLSLE,SMSMR,SNSEN,SOSOM,SRSUR,STSTP,SVSLV,SYSYR,SZSWZ,TCTCA,TDTCD,TFATF,TGTGO,THTHA,TJTJK,TKTKL,TMTKM,TNTUN,TOTON,TPTMP,TRTUR,TTTTO,TVTUV,TWTWN,TZTZA,UAUKR,UGUGA,UMUMI,USUSA,UYURY,UZUZB,VAVAT,VCVCT,VEVEN,VGVGB,VIVIR,VNVNM,VUVUT,WFWLF,WSWSM,YEYEM,YTMYT,YUYUG,ZAZAF,ZMZMB,ZRZAR,ZWZWE");
    });
    // 
    //// org\apache\harmony\luni\util\Msg.js 
    // 
    ﻿$_J("org.apache.harmony.luni.util");
    $_L(["java.util.Locale","org.apache.harmony.luni.util.MsgHelp"],"org.apache.harmony.luni.util.Msg",null,function(){
	c$=$_T(org.apache.harmony.luni.util,"Msg");
	c$.getString=$_M(c$,"getString",
			 function(msg){
			     if(org.apache.harmony.luni.util.Msg.bundle==null)return msg;
			     try{
				 return org.apache.harmony.luni.util.Msg.bundle.getString(msg);
			     }catch(e){
				 if($_O(e,java.util.MissingResourceException)){
				     return msg;
				 }else{
				     throw e;
				 }
			     }
			 },"~S");
	c$.getString=$_M(c$,"getString",
			 function(msg,arg){
			     return org.apache.harmony.luni.util.Msg.getString(msg,[arg]);
			 },"~S,~O");
	c$.getString=$_M(c$,"getString",
			 function(msg,arg){
			     return org.apache.harmony.luni.util.Msg.getString(msg,[Integer.toString(arg)]);
			 },"~S,~N");
	c$.getString=$_M(c$,"getString",
			 function(msg,arg){
			     return org.apache.harmony.luni.util.Msg.getString(msg,[String.valueOf(arg)]);
			 },"~S,~N");
	c$.getString=$_M(c$,"getString",
			 function(msg,arg1,arg2){
			     return org.apache.harmony.luni.util.Msg.getString(msg,[arg1,arg2]);
			 },"~S,~O,~O");
	c$.getString=$_M(c$,"getString",
			 function(msg,args){
			     var format=msg;
			     if(org.apache.harmony.luni.util.Msg.bundle!=null){
				 try{
				     format=org.apache.harmony.luni.util.Msg.bundle.getString(msg);
				 }catch(e){
				     if($_O(e,java.util.MissingResourceException)){
				     }else{
					 throw e;
				     }
				 }
			     }return org.apache.harmony.luni.util.MsgHelp.format(format,args);
			 },"~S,~A");
	$_S(c$,
	    "bundle",null);
    });
    // 
    //// java\util\AbstractSet.js 
    // 
    ﻿$_L(["java.util.AbstractCollection","$.Set"],"java.util.AbstractSet",null,function(){
	c$=$_T(java.util,"AbstractSet",java.util.AbstractCollection,java.util.Set);
	$_V(c$,"equals",
	    function(object){
		if(this===object){
		    return true;
		}if($_O(object,java.util.Set)){
		    var s=object;
		    return this.size()==s.size()&&this.containsAll(s);
		}return false;
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		var result=0;
		var it=this.iterator();
		while(it.hasNext()){
		    var next=it.next();
		    result+=next==null?0:next.hashCode();
		}
		return result;
	    });
	$_V(c$,"removeAll",
	    function(collection){
		var result=false;
		if(this.size()<=collection.size()){
		    var it=this.iterator();
		    while(it.hasNext()){
			if(collection.contains(it.next())){
			    it.remove();
			    result=true;
			}}
		}else{
		    var it=collection.iterator();
		    while(it.hasNext()){
			result=this.remove(it.next())||result;
		    }
		}return result;
	    },"java.util.Collection");
    });
    // 
    //// java\util\Arrays.js 
    // 
    ﻿$_L(["java.util.AbstractList","$.RandomAccess"],"java.util.Arrays",["java.lang.ArrayIndexOutOfBoundsException","$.IllegalArgumentException","$.NullPointerException"],function(){
	c$=$_T(java.util,"Arrays");
	c$.sort=$_M(c$,"sort",
		    function(a){
			var aux=a.sort(function(o1,o2){
			    if(typeof o1=="string"||o1 instanceof Comparable){
				return o1.compareTo(o2);
			    }
			    return o1-o2;
			});
			for(var i=0;i<a.length;i++){
			    a[i]=aux[i];
			}
		    },"~A");
	c$.sort=$_M(c$,"sort",
		    function(a,fromIndex,toIndex){
			this.rangeCheck(a.length,fromIndex,toIndex);
			var aux=new Array();
			for(var i=fromIndex;i<toIndex;i++){
			    aux[i-fromIndex]=a[i];
			}
			aux=aux.sort(function(o1,o2){
			    if(typeof o1=="string"||o1 instanceof Comparable){
				return o1.compareTo(o2);
			    }
			    return o1-o2;
			});
			for(var i=fromIndex;i<toIndex;i++){
			    a[i]=aux[i-fromIndex];
			}
		    },"~A,~N,~N");
	c$.sort=$_M(c$,"sort",
		    function(a,c){
			var aux=a.sort(function(o1,o2){
			    if(c!=null){
				return c.compare(o1,o2);
			    }else if(typeof o1=="string"||o1 instanceof Comparable){
				return o1.compareTo(o2);
			    }
			    return o1-o2;
			});
			for(var i=0;i<a.length;i++){
			    a[i]=aux[i];
			}
		    },"~A,java.util.Comparator");
	c$.sort=$_M(c$,"sort",
		    function(a,fromIndex,toIndex,c){
			this.rangeCheck(a.length,fromIndex,toIndex);
			var aux=new Array();
			for(var i=fromIndex;i<toIndex;i++){
			    aux[i-fromIndex]=a[i];
			}
			aux=aux.sort(function(o1,o2){
			    if(c!=null){
				return c.compare(o1,o2);
			    }else if(typeof o1=="string"||o1 instanceof Comparable){
				return o1.compareTo(o2);
			    }
			    return o1-o2;
			});
			for(var i=fromIndex;i<toIndex;i++){
			    a[i]=aux[i-fromIndex];
			}
		    },"~A,~N,~N,java.util.Comparator");
	c$.rangeCheck=$_M(c$,"rangeCheck",
			  ($fz=function(arrayLen,fromIndex,toIndex){
			      if(fromIndex>toIndex)throw new IllegalArgumentException("fromIndex("+fromIndex+") > toIndex("+toIndex+")");
			      if(fromIndex<0)throw new ArrayIndexOutOfBoundsException(fromIndex);
			      if(toIndex>arrayLen)throw new ArrayIndexOutOfBoundsException(toIndex);
			  },$fz.isPrivate=true,$fz),"~N,~N,~N");
	c$.binarySearch=$_M(c$,"binarySearch",
			    function(a,key){
				var low=0;
				var high=a.length-1;
				while(low<=high){
				    var mid=(low+high)>>1;
				    var midVal=a[mid];
				    if(midVal<key)low=mid+1;
				    else if(midVal>key)high=mid-1;
				    else return mid;
				}
				return-(low+1);
			    },"~A,~N");
	c$.binarySearch=$_M(c$,"binarySearch",
			    function(a,key){
				var low=0;
				var high=a.length-1;
				while(low<=high){
				    var mid=(low+high)>>1;
				    var midVal=a[mid];
				    var cmp=(midVal).compareTo(key);
				    if(cmp<0)low=mid+1;
				    else if(cmp>0)high=mid-1;
				    else return mid;
				}
				return-(low+1);
			    },"~A,~O");
	c$.binarySearch=$_M(c$,"binarySearch",
			    function(a,key,c){
				if(c==null)return java.util.Arrays.binarySearch(a,key);
				var low=0;
				var high=a.length-1;
				while(low<=high){
				    var mid=(low+high)>>1;
				    var midVal=a[mid];
				    var cmp=c.compare(midVal,key);
				    if(cmp<0)low=mid+1;
				    else if(cmp>0)high=mid-1;
				    else return mid;
				}
				return-(low+1);
			    },"~A,~O,java.util.Comparator");
	c$.equals=$_M(c$,"equals",
		      function(a,a2){
			  if(a===a2)return true;
			  if(a==null||a2==null)return false;
			  var length=a.length;
			  if(a2.length!=length)return false;
			  for(var i=0;i<length;i++){
			      var o1=a[i];
			      var o2=a2[i];
			      {
				  if(!(o1==null?o2==null:(o1.equals==null?o1==o2:o1.equals(o2))))return false;
			      }}
			  return true;
		      },"~A,~A");
	c$.fill=$_M(c$,"fill",
		    function(a,val){
			java.util.Arrays.fill(a,0,a.length,val);
		    },"~A,~O");
	c$.fill=$_M(c$,"fill",
		    function(a,fromIndex,toIndex,val){
			java.util.Arrays.rangeCheck(a.length,fromIndex,toIndex);
			for(var i=fromIndex;i<toIndex;i++)a[i]=val;

		    },"~A,~N,~N,~O");
	c$.asList=$_M(c$,"asList",
		      function(a){
			  return new java.util.Arrays.ArrayList(a);
		      },"~A");
	$_H();
	c$=$_C(function(){
	    this.a=null;
	    $_Z(this,arguments);
	},java.util.Arrays,"ArrayList",java.util.AbstractList,[java.util.RandomAccess,java.io.Serializable]);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Arrays.ArrayList,[]);
		if(a==null)throw new NullPointerException();
		this.a=a;
	    },"~A");
	$_V(c$,"size",
	    function(){
		return this.a.length;
	    });
	$_M(c$,"toArray",
	    function(){
		return this.a.clone();
	    });
	$_V(c$,"get",
	    function(a){
		return this.a[a];
	    },"~N");
	$_V(c$,"set",
	    function(a,b){
		var c=this.a[a];
		this.a[a]=b;
		return c;
	    },"~N,~O");
	$_V(c$,"indexOf",
	    function(a){
		if(a==null){
		    for(var b=0;b<this.a.length;b++)if(this.a[b]==null)return b;

		}else{
		    for(var b=0;b<this.a.length;b++)if(a.equals(this.a[b]))return b;

		}return-1;
	    },"~O");
	$_V(c$,"contains",
	    function(a){
		return this.indexOf(a)!=-1;
	    },"~O");
	c$=$_P();
	$_S(c$,
	    "INSERTIONSORT_THRESHOLD",7);
    });
    // 
    //// java\util\AbstractMap.js 
    // 
    ﻿$_L(["java.util.Map"],"java.util.AbstractMap",["java.lang.StringBuilder","$.UnsupportedOperationException","java.util.AbstractCollection","$.AbstractSet","$.Iterator"],function(){
	c$=$_C(function(){
	    this.$keySet=null;
	    this.valuesCollection=null;
	    $_Z(this,arguments);
	},java.util,"AbstractMap",null,java.util.Map);
	$_K(c$,
	    function(){
	    });
	$_V(c$,"clear",
	    function(){
		this.entrySet().clear();
	    });
	$_V(c$,"containsKey",
	    function(key){
		var it=this.entrySet().iterator();
		if(key!=null){
		    while(it.hasNext()){
			if(key.equals(it.next().getKey())){
			    return true;
			}}
		}else{
		    while(it.hasNext()){
			if(it.next().getKey()==null){
			    return true;
			}}
		}return false;
	    },"~O");
	$_V(c$,"containsValue",
	    function(value){
		var it=this.entrySet().iterator();
		if(value!=null){
		    while(it.hasNext()){
			if(value.equals(it.next().getValue())){
			    return true;
			}}
		}else{
		    while(it.hasNext()){
			if(it.next().getValue()==null){
			    return true;
			}}
		}return false;
	    },"~O");
	$_V(c$,"equals",
	    function(object){
		if(this===object){
		    return true;
		}if($_O(object,java.util.Map)){
		    var map=object;
		    if(this.size()!=map.size()){
			return false;
		    }var objectSet=map.entrySet();
		    var it=this.entrySet().iterator();
		    while(it.hasNext()){
			if(!objectSet.contains(it.next())){
			    return false;
			}}
		    return true;
		}return false;
	    },"~O");
	$_V(c$,"get",
	    function(key){
		var it=this.entrySet().iterator();
		if(key!=null){
		    while(it.hasNext()){
			var entry=it.next();
			if(key.equals(entry.getKey())){
			    return entry.getValue();
			}}
		}else{
		    while(it.hasNext()){
			var entry=it.next();
			if(entry.getKey()==null){
			    return entry.getValue();
			}}
		}return null;
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		var result=0;
		var it=this.entrySet().iterator();
		while(it.hasNext()){
		    result+=it.next().hashCode();
		}
		return result;
	    });
	$_V(c$,"isEmpty",
	    function(){
		return this.size()==0;
	    });
	$_V(c$,"keySet",
	    function(){
		if(this.$keySet==null){
		    this.$keySet=(($_D("java.util.AbstractMap$1")?0:java.util.AbstractMap.$AbstractMap$1$()),$_N(java.util.AbstractMap$1,this,null));
		}return this.$keySet;
	    });
	$_V(c$,"put",
	    function(key,value){
		throw new UnsupportedOperationException();
	    },"~O,~O");
	$_V(c$,"putAll",
	    function(map){
		for(var entry,$entry=map.entrySet().iterator();$entry.hasNext()&&((entry=$entry.next())||true);){
		    this.put(entry.getKey(),entry.getValue());
		}
	    },"java.util.Map");
	$_V(c$,"remove",
	    function(key){
		var it=this.entrySet().iterator();
		if(key!=null){
		    while(it.hasNext()){
			var entry=it.next();
			if(key.equals(entry.getKey())){
			    it.remove();
			    return entry.getValue();
			}}
		}else{
		    while(it.hasNext()){
			var entry=it.next();
			if(entry.getKey()==null){
			    it.remove();
			    return entry.getValue();
			}}
		}return null;
	    },"~O");
	$_V(c$,"size",
	    function(){
		return this.entrySet().size();
	    });
	$_V(c$,"toString",
	    function(){
		if(this.isEmpty()){
		    return"{}";
		}var buffer=new StringBuilder(this.size()*28);
		buffer.append('{');
		var it=this.entrySet().iterator();
		while(it.hasNext()){
		    var entry=it.next();
		    var key=entry.getKey();
		    if(key!==this){
			buffer.append(key);
		    }else{
			buffer.append("(this Map)");
		    }buffer.append('=');
		    var value=entry.getValue();
		    if(value!==this){
			buffer.append(value);
		    }else{
			buffer.append("(this Map)");
		    }if(it.hasNext()){
			buffer.append(", ");
		    }}
		buffer.append('}');
		return buffer.toString();
	    });
	$_V(c$,"values",
	    function(){
		if(this.valuesCollection==null){
		    this.valuesCollection=(($_D("java.util.AbstractMap$2")?0:java.util.AbstractMap.$AbstractMap$2$()),$_N(java.util.AbstractMap$2,this,null));
		}return this.valuesCollection;
	    });
	$_M(c$,"clone",
	    function(){
		var result=$_U(this,java.util.AbstractMap,"clone",[]);
		result.$keySet=null;
		result.valuesCollection=null;
		return result;
	    });
	c$.$AbstractMap$1$=function(){
	    $_H();
	    c$=$_W(java.util,"AbstractMap$1",java.util.AbstractSet);
	    $_V(c$,"contains",
		function(object){
		    return this.b$["java.util.AbstractMap"].containsKey(object);
		},"~O");
	    $_V(c$,"size",
		function(){
		    return this.b$["java.util.AbstractMap"].size();
		});
	    $_V(c$,"iterator",
		function(){
		    return(($_D("java.util.AbstractMap$1$1")?0:java.util.AbstractMap.$AbstractMap$1$1$()),$_N(java.util.AbstractMap$1$1,this,null));
		});
	    c$=$_P();
	};
	c$.$AbstractMap$1$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.setIterator=null;
		$_Z(this,arguments);
	    },java.util,"AbstractMap$1$1",null,java.util.Iterator);
	    $_Y(c$,function(){
		this.setIterator=this.b$["java.util.AbstractMap"].entrySet().iterator();
	    });
	    $_V(c$,"hasNext",
		function(){
		    return this.setIterator.hasNext();
		});
	    $_V(c$,"next",
		function(){
		    return this.setIterator.next().getKey();
		});
	    $_V(c$,"remove",
		function(){
		    this.setIterator.remove();
		});
	    c$=$_P();
	};
	c$.$AbstractMap$2$=function(){
	    $_H();
	    c$=$_W(java.util,"AbstractMap$2",java.util.AbstractCollection);
	    $_V(c$,"size",
		function(){
		    return this.b$["java.util.AbstractMap"].size();
		});
	    $_V(c$,"contains",
		function(object){
		    return this.b$["java.util.AbstractMap"].containsValue(object);
		},"~O");
	    $_V(c$,"iterator",
		function(){
		    return(($_D("java.util.AbstractMap$2$1")?0:java.util.AbstractMap.$AbstractMap$2$1$()),$_N(java.util.AbstractMap$2$1,this,null));
		});
	    c$=$_P();
	};
	c$.$AbstractMap$2$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.setIterator=null;
		$_Z(this,arguments);
	    },java.util,"AbstractMap$2$1",null,java.util.Iterator);
	    $_Y(c$,function(){
		this.setIterator=this.b$["java.util.AbstractMap"].entrySet().iterator();
	    });
	    $_V(c$,"hasNext",
		function(){
		    return this.setIterator.hasNext();
		});
	    $_V(c$,"next",
		function(){
		    return this.setIterator.next().getValue();
		});
	    $_V(c$,"remove",
		function(){
		    this.setIterator.remove();
		});
	    c$=$_P();
	};
    });
    // 
    //// java\util\SortedMap.js 
    // 
    ﻿$_L(["java.util.Map"],"java.util.SortedMap",null,function(){
	$_I(java.util,"SortedMap",java.util.Map);
    });
    // 
    //// java\util\SortedSet.js 
    // 
    ﻿$_L(["java.util.Set"],"java.util.SortedSet",null,function(){
	$_I(java.util,"SortedSet",java.util.Set);
    });
    // 
    //// java\util\Collections.js 
    // 
    $_L(["java.util.AbstractList","$.AbstractMap","$.AbstractSet","$.Collection","$.Iterator","$.List","$.ListIterator","$.Map","$.RandomAccess","$.Set","$.SortedMap","$.SortedSet","java.lang.NullPointerException","$.UnsupportedOperationException","java.lang.reflect.Array"],"java.util.Collections",["java.lang.ArrayIndexOutOfBoundsException","$.ClassCastException","$.IllegalArgumentException","$.IndexOutOfBoundsException","java.util.ArrayList","$.Arrays","$.Enumeration","java.util.Map.Entry","java.util.NoSuchElementException","$.Random"],function(){
	c$=$_T(java.util,"Collections");
	c$.binarySearch=$_M(c$,"binarySearch",
			    function(list,object){
				if(list==null){
				    throw new NullPointerException();
				}if(list.isEmpty()){
				    return-1;
				}var key=object;
				if(!($_O(list,java.util.RandomAccess))){
				    var it=list.listIterator();
				    while(it.hasNext()){
					var result;
					if((result=key.compareTo(it.next()))<=0){
					    if(result==0){
						return it.previousIndex();
					    }return-it.previousIndex()-1;
					}}
				    return-list.size()-1;
				}var low=0;
				var mid=list.size();
				var high=mid-1;
				var result=-1;
				while(low<=high){
				    mid=(low+high)>>1;
				    if((result=key.compareTo(list.get(mid)))>0){
					low=mid+1;
				    }else if(result==0){
					return mid;
				    }else{
					high=mid-1;
				    }}
				return-mid-(result<0?1:2);
			    },"java.util.List,~O");
	c$.binarySearch=$_M(c$,"binarySearch",
			    function(list,object,comparator){
				if(comparator==null){
				    return java.util.Collections.binarySearch(list,object);
				}if(!($_O(list,java.util.RandomAccess))){
				    var it=list.listIterator();
				    while(it.hasNext()){
					var result;
					if((result=comparator.compare(object,it.next()))<=0){
					    if(result==0){
						return it.previousIndex();
					    }return-it.previousIndex()-1;
					}}
				    return-list.size()-1;
				}var low=0;
				var mid=list.size();
				var high=mid-1;
				var result=-1;
				while(low<=high){
				    mid=(low+high)>>1;
				    if((result=comparator.compare(object,list.get(mid)))>0){
					low=mid+1;
				    }else if(result==0){
					return mid;
				    }else{
					high=mid-1;
				    }}
				return-mid-(result<0?1:2);
			    },"java.util.List,~O,java.util.Comparator");
	c$.copy=$_M(c$,"copy",
		    function(destination,source){
			if(destination.size()<source.size()){
			    throw new ArrayIndexOutOfBoundsException();
			}var srcIt=source.iterator();
			var destIt=destination.listIterator();
			while(srcIt.hasNext()){
			    try{
				destIt.next();
			    }catch(e){
				if($_O(e,java.util.NoSuchElementException)){
				    throw new ArrayIndexOutOfBoundsException();
				}else{
				    throw e;
				}
			    }
			    destIt.set(srcIt.next());
			}
		    },"java.util.List,java.util.List");
	c$.enumeration=$_M(c$,"enumeration",
			   function(collection){
			       var c=collection;
			       return(($_D("java.util.Collections$1")?0:java.util.Collections.$Collections$1$(c)),$_N(java.util.Collections$1,this,null));
			   },"java.util.Collection");

	c$.fill=$_M(c$,"fill",
		    function(list,object){
			var it=list.listIterator();
			while(it.hasNext()){
			    it.next();
			    it.set(object);
			}
		    },"java.util.List,~O");
	c$.max=$_M(c$,"max",
		   function(collection){
		       var it=collection.iterator();
		       var max=it.next();
		       while(it.hasNext()){
			   var next=it.next();
			   if(max.compareTo(next)<0){
			       max=next;
			   }}
		       return max;
		   },"java.util.Collection");
	c$.max=$_M(c$,"max",
		   function(collection,comparator){
		       var it=collection.iterator();
		       var max=it.next();
		       while(it.hasNext()){
			   var next=it.next();
			   if(comparator.compare(max,next)<0){
			       max=next;
			   }}
		       return max;
		   },"java.util.Collection,java.util.Comparator");
	c$.min=$_M(c$,"min",
		   function(collection){
		       var it=collection.iterator();
		       var min=it.next();
		       while(it.hasNext()){
			   var next=it.next();
			   if(min.compareTo(next)>0){
			       min=next;
			   }}
		       return min;
		   },"java.util.Collection");
	c$.min=$_M(c$,"min",
		   function(collection,comparator){
		       var it=collection.iterator();
		       var min=it.next();
		       while(it.hasNext()){
			   var next=it.next();
			   if(comparator.compare(min,next)>0){
			       min=next;
			   }}
		       return min;
		   },"java.util.Collection,java.util.Comparator");
	c$.nCopies=$_M(c$,"nCopies",
		       function(length,object){
			   return new java.util.Collections.CopiesList(length,object);
		       },"~N,~O");
	c$.reverse=$_M(c$,"reverse",
		       function(list){
			   var size=list.size();
			   var front=list.listIterator();
			   var back=list.listIterator(size);
			   for(var i=0;i<Math.floor(size/2);i++){
			       var frontNext=front.next();
			       var backPrev=back.previous();
			       front.set(backPrev);
			       back.set(frontNext);
			   }
		       },"java.util.List");
	c$.reverseOrder=$_M(c$,"reverseOrder",
			    function(){
				return new java.util.Collections.ReverseComparator();
			    });
	c$.reverseOrder=$_M(c$,"reverseOrder",
			    function(c){
				if(c==null){
				    return java.util.Collections.reverseOrder();
				}return new java.util.Collections.ReverseComparatorWithComparator(c);
			    },"java.util.Comparator");
	c$.shuffle=$_M(c$,"shuffle",
		       function(list){
			   java.util.Collections.shuffle(list,new java.util.Random());
		       },"java.util.List");
	c$.shuffle=$_M(c$,"shuffle",
		       function(list,random){
			   if(!($_O(list,java.util.RandomAccess))){
			       var array=list.toArray();
			       for(var i=array.length-1;i>0;i--){
				   var index=random.nextInt()%(i+1);
				   if(index<0){
				       index=-index;
				   }var temp=array[i];
				   array[i]=array[index];
				   array[index]=temp;
			       }
			       var i=0;
			       var it=list.listIterator();
			       while(it.hasNext()){
				   it.next();
				   it.set(array[i++]);
			       }
			   }else{
			       var rawList=list;
			       for(var i=rawList.size()-1;i>0;i--){
				   var index=random.nextInt()%(i+1);
				   if(index<0){
				       index=-index;
				   }rawList.set(index,rawList.set(i,rawList.get(index)));
			       }
			   }},"java.util.List,java.util.Random");
	c$.singleton=$_M(c$,"singleton",
			 function(object){
			     return new java.util.Collections.SingletonSet(object);
			 },"~O");
	c$.singletonList=$_M(c$,"singletonList",
			     function(object){
				 return new java.util.Collections.SingletonList(object);
			     },"~O");
	c$.singletonMap=$_M(c$,"singletonMap",
			    function(key,value){
				return new java.util.Collections.SingletonMap(key,value);
			    },"~O,~O");
	c$.sort=$_M(c$,"sort",
		    function(list){
			var array=list.toArray();
			java.util.Arrays.sort(array);
			var i=0;
			var it=list.listIterator();
			while(it.hasNext()){
			    it.next();
			    it.set(array[i++]);
			}
		    },"java.util.List");
	c$.sort=$_M(c$,"sort",
		    function(list,comparator){
			var array=list.toArray(new Array(list.size()));
			java.util.Arrays.sort(array,comparator);
			var i=0;
			var it=list.listIterator();
			while(it.hasNext()){
			    it.next();
			    it.set(array[i++]);
			}
		    },"java.util.List,java.util.Comparator");
	c$.swap=$_M(c$,"swap",
		    function(list,index1,index2){
			if(list==null){
			    throw new NullPointerException();
			}if(index1==index2){
			    return;
			}var rawList=list;
			rawList.set(index2,rawList.set(index1,rawList.get(index2)));
		    },"java.util.List,~N,~N");
	c$.replaceAll=$_M(c$,"replaceAll",
			  function(list,obj,obj2){
			      var index;
			      var found=false;
			      while((index=list.indexOf(obj))>-1){
				  found=true;
				  list.set(index,obj2);
			      }
			      return found;
			  },"java.util.List,~O,~O");
	c$.rotate=$_M(c$,"rotate",
		      function(lst,dist){
			  var list=lst;
			  var size=list.size();
			  if(size==0){
			      return;
			  }var normdist;
			  if(dist>0){
			      normdist=dist%size;
			  }else{
			      normdist=size-((dist%size)*(-1));
			  }if(normdist==0||normdist==size){
			      return;
			  }if($_O(list,java.util.RandomAccess)){
			      var temp=list.get(0);
			      var index=0;
			      var beginIndex=0;
			      for(var i=0;i<size;i++){
				  index=(index+normdist)%size;
				  temp=list.set(index,temp);
				  if(index==beginIndex){
				      index=++beginIndex;
				      temp=list.get(beginIndex);
				  }}
			  }else{
			      var divideIndex=(size-normdist)%size;
			      var sublist1=list.subList(0,divideIndex);
			      var sublist2=list.subList(divideIndex,size);
			      java.util.Collections.reverse(sublist1);
			      java.util.Collections.reverse(sublist2);
			      java.util.Collections.reverse(list);
			  }},"java.util.List,~N");
	c$.indexOfSubList=$_M(c$,"indexOfSubList",
			      function(list,sublist){
				  var size=list.size();
				  var sublistSize=sublist.size();
				  if(sublistSize>size){
				      return-1;
				  }if(sublistSize==0){
				      return 0;
				  }var firstObj=sublist.get(0);
				  var index=list.indexOf(firstObj);
				  if(index==-1){
				      return-1;
				  }while(index<size&&(size-index>=sublistSize)){
				      var listIt=list.listIterator(index);
				      if((firstObj==null)?listIt.next()==null:firstObj.equals(listIt.next())){
					  var sublistIt=sublist.listIterator(1);
					  var difFound=false;
					  while(sublistIt.hasNext()){
					      var element=sublistIt.next();
					      if(!listIt.hasNext()){
						  return-1;
					      }if((element==null)?listIt.next()!=null:!element.equals(listIt.next())){
						  difFound=true;
						  break;
					      }}
					  if(!difFound){
					      return index;
					  }}index++;
				  }
				  return-1;
			      },"java.util.List,java.util.List");
	c$.lastIndexOfSubList=$_M(c$,"lastIndexOfSubList",
				  function(list,sublist){
				      var sublistSize=sublist.size();
				      var size=list.size();
				      if(sublistSize>size){
					  return-1;
				      }if(sublistSize==0){
					  return size;
				      }var lastObj=sublist.get(sublistSize-1);
				      var index=list.lastIndexOf(lastObj);
				      while((index>-1)&&(index+1>=sublistSize)){
					  var listIt=list.listIterator(index+1);
					  if((lastObj==null)?listIt.previous()==null:lastObj.equals(listIt.previous())){
					      var sublistIt=sublist.listIterator(sublistSize-1);
					      var difFound=false;
					      while(sublistIt.hasPrevious()){
						  var element=sublistIt.previous();
						  if(!listIt.hasPrevious()){
						      return-1;
						  }if((element==null)?listIt.previous()!=null:!element.equals(listIt.previous())){
						      difFound=true;
						      break;
						  }}
					      if(!difFound){
						  return listIt.nextIndex();
					      }}index--;
				      }
				      return-1;
				  },"java.util.List,java.util.List");
	c$.list=$_M(c$,"list",
		    function(enumeration){
			var list=new java.util.ArrayList();
			while(enumeration.hasMoreElements()){
			    list.add(enumeration.nextElement());
			}
			return list;
		    },"java.util.Enumeration");
	c$.synchronizedCollection=$_M(c$,"synchronizedCollection",
				      function(collection){
					  if(collection==null){
					      throw new NullPointerException();
					  }return new java.util.Collections.SynchronizedCollection(collection);
				      },"java.util.Collection");
	c$.synchronizedList=$_M(c$,"synchronizedList",
				function(list){
				    if(list==null){
					throw new NullPointerException();
				    }if($_O(list,java.util.RandomAccess)){
					return new java.util.Collections.SynchronizedRandomAccessList(list);
				    }return new java.util.Collections.SynchronizedList(list);
				},"java.util.List");
	c$.synchronizedMap=$_M(c$,"synchronizedMap",
			       function(map){
				   if(map==null){
				       throw new NullPointerException();
				   }return new java.util.Collections.SynchronizedMap(map);
			       },"java.util.Map");
	c$.synchronizedSet=$_M(c$,"synchronizedSet",
			       function(set){
				   if(set==null){
				       throw new NullPointerException();
				   }return new java.util.Collections.SynchronizedSet(set);
			       },"java.util.Set");
	c$.synchronizedSortedMap=$_M(c$,"synchronizedSortedMap",
				     function(map){
					 if(map==null){
					     throw new NullPointerException();
					 }return new java.util.Collections.SynchronizedSortedMap(map);
				     },"java.util.SortedMap");
	c$.synchronizedSortedSet=$_M(c$,"synchronizedSortedSet",
				     function(set){
					 if(set==null){
					     throw new NullPointerException();
					 }return new java.util.Collections.SynchronizedSortedSet(set);
				     },"java.util.SortedSet");
	c$.unmodifiableCollection=$_M(c$,"unmodifiableCollection",
				      function(collection){
					  if(collection==null){
					      throw new NullPointerException();
					  }return new java.util.Collections.UnmodifiableCollection(collection);
				      },"java.util.Collection");
	c$.unmodifiableList=$_M(c$,"unmodifiableList",
				function(list){
				    if(list==null){
					throw new NullPointerException();
				    }if($_O(list,java.util.RandomAccess)){
					return new java.util.Collections.UnmodifiableRandomAccessList(list);
				    }return new java.util.Collections.UnmodifiableList(list);
				},"java.util.List");
	c$.unmodifiableMap=$_M(c$,"unmodifiableMap",
			       function(map){
				   if(map==null){
				       throw new NullPointerException();
				   }return new java.util.Collections.UnmodifiableMap(map);
			       },"java.util.Map");
	c$.unmodifiableSet=$_M(c$,"unmodifiableSet",
			       function(set){
				   if(set==null){
				       throw new NullPointerException();
				   }return new java.util.Collections.UnmodifiableSet(set);
			       },"java.util.Set");
	c$.unmodifiableSortedMap=$_M(c$,"unmodifiableSortedMap",
				     function(map){
					 if(map==null){
					     throw new NullPointerException();
					 }return new java.util.Collections.UnmodifiableSortedMap(map);
				     },"java.util.SortedMap");
	c$.unmodifiableSortedSet=$_M(c$,"unmodifiableSortedSet",
				     function(set){
					 if(set==null){
					     throw new NullPointerException();
					 }return new java.util.Collections.UnmodifiableSortedSet(set);
				     },"java.util.SortedSet");
	c$.frequency=$_M(c$,"frequency",
			 function(c,o){
			     if(c==null){
				 throw new NullPointerException();
			     }if(c.isEmpty()){
				 return 0;
			     }
			     var result=0;
			     var itr=c.iterator();
			     while(itr.hasNext()){
				 var e=itr.next();
				 if(o==null?e==null:o.equals(e)){
				     result++;
				 }}
			     return result;
			 },"java.util.Collection,~O");

	c$.emptyList=$_M(c$,"emptyList",
			 function(){
			     return java.util.Collections.EMPTY_LIST;
			 });
	c$.emptySet=$_M(c$,"emptySet",
			function(){
			    return java.util.Collections.EMPTY_SET;
			});
	c$.emptyMap=$_M(c$,"emptyMap",
			function(){
			    return java.util.Collections.EMPTY_MAP;
			});
	c$.checkedCollection=$_M(c$,"checkedCollection",
				 function(c,type){
				     return new java.util.Collections.CheckedCollection(c,type);
				 },"java.util.Collection,Class");
	c$.checkedMap=$_M(c$,"checkedMap",
			  function(m,keyType,valueType){
			      return new java.util.Collections.CheckedMap(m,keyType,valueType);
			  },"java.util.Map,Class,Class");
	c$.checkedList=$_M(c$,"checkedList",
			   function(list,type){
			       if($_O(list,java.util.RandomAccess)){
				   return new java.util.Collections.CheckedRandomAccessList(list,type);
			       }return new java.util.Collections.CheckedList(list,type);
			   },"java.util.List,Class");
	c$.checkedSet=$_M(c$,"checkedSet",
			  function(s,type){
			      return new java.util.Collections.CheckedSet(s,type);
			  },"java.util.Set,Class");
	c$.checkedSortedMap=$_M(c$,"checkedSortedMap",
				function(m,keyType,valueType){
				    return new java.util.Collections.CheckedSortedMap(m,keyType,valueType);
				},"java.util.SortedMap,Class,Class");
	c$.checkedSortedSet=$_M(c$,"checkedSortedSet",
				function(s,type){
				    return new java.util.Collections.CheckedSortedSet(s,type);
				},"java.util.SortedSet,Class");
	c$.addAll=$_M(c$,"addAll",
		      function(c,a){
			  var modified=false;
			  for(var i=0;i<a.length;i++){
			      modified=new Boolean(modified|c.add(a[i])).valueOf();
			  }
			  return modified;
		      },"java.util.Collection,~A");
	c$.disjoint=$_M(c$,"disjoint",
			function(c1,c2){
			    if(($_O(c1,java.util.Set))&&!($_O(c2,java.util.Set))||(c2.size())>c1.size()){
				var tmp=c1;
				c1=c2;
				c2=tmp;
			    }var it=c1.iterator();
			    while(it.hasNext()){
				if(c2.contains(it.next())){
				    return false;
				}}
			    return true;
			},"java.util.Collection,java.util.Collection");
	c$.checkType=$_M(c$,"checkType",
			 function(obj,type){
			     if(!type.isInstance(obj)){
				 throw new ClassCastException("Attempt to insert "+obj.getClass()+" element into collection with element type "+type);
			     }return obj;
			 },"~O,Class");

	c$.$Collections$1$=function(c){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.it=null;
		$_Z(this,arguments);
	    },java.util,"Collections$1",null,java.util.Enumeration);

	    $_Y(c$,function(){
		this.it=c.iterator();
	    });

	    $_M(c$,"hasMoreElements",
		function(){
		    return this.it.hasNext();
		});
	    $_M(c$,"nextElement",
		function(){
		    return this.it.next();
		});
	    c$=$_P();
	};

	$_H();
	c$=$_C(function(){
	    this.n=0;
	    this.element=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CopiesList",java.util.AbstractList,java.io.Serializable);
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.CopiesList,[]);
		if(a<0){
		    throw new IllegalArgumentException();
		}this.n=a;
		this.element=b;
	    },"~N,~O");
	$_V(c$,"contains",
	    function(a){
		return this.element==null?a==null:this.element.equals(a);
	    },"~O");
	$_V(c$,"size",
	    function(){
		return this.n;
	    });
	$_V(c$,"get",
	    function(a){
		if(0<=a&&a<this.n){
		    return this.element;
		}throw new IndexOutOfBoundsException();
	    },"~N");
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"EmptyList",java.util.AbstractList,java.io.Serializable);
	$_V(c$,"contains",
	    function(a){
		return false;
	    },"~O");
	$_V(c$,"size",
	    function(){
		return 0;
	    });
	$_V(c$,"get",
	    function(a){
		throw new IndexOutOfBoundsException();
	    },"~N");
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"EmptySet",java.util.AbstractSet,java.io.Serializable);
	$_V(c$,"contains",
	    function(a){
		return false;
	    },"~O");
	$_V(c$,"size",
	    function(){
		return 0;
	    });
	$_V(c$,"iterator",
	    function(){
		return(($_D("java.util.Collections$EmptySet$1")?0:java.util.Collections.EmptySet.$Collections$EmptySet$1$()),$_N(java.util.Collections$EmptySet$1,this,null));
	    });
	c$.$Collections$EmptySet$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Collections$EmptySet$1",null,java.util.Iterator);
	    $_V(c$,"hasNext",
		function(){
		    return false;
		});
	    $_V(c$,"next",
		function(){
		    throw new java.util.NoSuchElementException();
		});
	    $_V(c$,"remove",
		function(){
		    throw new UnsupportedOperationException();
		});
	    c$=$_P();
	};
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"EmptyMap",java.util.AbstractMap,java.io.Serializable);
	$_V(c$,"containsKey",
	    function(a){
		return false;
	    },"~O");
	$_V(c$,"containsValue",
	    function(a){
		return false;
	    },"~O");
	$_V(c$,"entrySet",
	    function(){
		return java.util.Collections.EMPTY_SET;
	    });
	$_V(c$,"get",
	    function(a){
		return null;
	    },"~O");
	$_V(c$,"keySet",
	    function(){
		return java.util.Collections.EMPTY_SET;
	    });
	$_V(c$,"values",
	    function(){
		return java.util.Collections.EMPTY_LIST;
	    });
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"ReverseComparator",null,[java.util.Comparator,java.io.Serializable]);
	$_V(c$,"compare",
	    function(a,b){
		var c=b;
		return c.compareTo(a);
	    },"~O,~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.comparator=null;
	    $_Z(this,arguments);
	},java.util.Collections,"ReverseComparatorWithComparator",null,[java.util.Comparator,java.io.Serializable]);
	$_K(c$,
	    function(a){
		this.comparator=a;
	    },"java.util.Comparator");
	$_M(c$,"compare",
	    function(a,b){
		return this.comparator.compare(b,a);
	    },"~O,~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.element=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SingletonSet",java.util.AbstractSet,java.io.Serializable);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.SingletonSet,[]);
		this.element=a;
	    },"~O");
	$_V(c$,"contains",
	    function(a){
		return this.element==null?a==null:this.element.equals(a);
	    },"~O");
	$_V(c$,"size",
	    function(){
		return 1;
	    });
	$_V(c$,"iterator",
	    function(){
		return(($_D("java.util.Collections$SingletonSet$1")?0:java.util.Collections.SingletonSet.$Collections$SingletonSet$1$()),$_N(java.util.Collections$SingletonSet$1,this,null));
	    });
	c$.$Collections$SingletonSet$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.$hasNext=true;
		$_Z(this,arguments);
	    },java.util,"Collections$SingletonSet$1",null,java.util.Iterator);
	    $_V(c$,"hasNext",
		function(){
		    return this.$hasNext;
		});
	    $_V(c$,"next",
		function(){
		    if(this.$hasNext){
			this.$hasNext=false;
			return this.b$["java.util.Collections.SingletonSet"].element;
		    }throw new java.util.NoSuchElementException();
		});
	    $_V(c$,"remove",
		function(){
		    throw new UnsupportedOperationException();
		});
	    c$=$_P();
	};
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.element=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SingletonList",java.util.AbstractList,java.io.Serializable);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.SingletonList,[]);
		this.element=a;
	    },"~O");
	$_V(c$,"contains",
	    function(a){
		return this.element==null?a==null:this.element.equals(a);
	    },"~O");
	$_V(c$,"get",
	    function(a){
		if(a==0){
		    return this.element;
		}throw new IndexOutOfBoundsException();
	    },"~N");
	$_V(c$,"size",
	    function(){
		return 1;
	    });
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.k=null;
	    this.v=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SingletonMap",java.util.AbstractMap,java.io.Serializable);
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.SingletonMap,[]);
		this.k=a;
		this.v=b;
	    },"~O,~O");
	$_V(c$,"containsKey",
	    function(a){
		return this.k==null?a==null:this.k.equals(a);
	    },"~O");
	$_V(c$,"containsValue",
	    function(a){
		return this.v==null?a==null:this.v.equals(a);
	    },"~O");
	$_V(c$,"get",
	    function(a){
		if(this.containsKey(a)){
		    return this.v;
		}return null;
	    },"~O");
	$_V(c$,"size",
	    function(){
		return 1;
	    });
	$_V(c$,"entrySet",
	    function(){
		return(($_D("java.util.Collections$SingletonMap$1")?0:java.util.Collections.SingletonMap.$Collections$SingletonMap$1$()),$_N(java.util.Collections$SingletonMap$1,this,null));
	    });
	c$.$Collections$SingletonMap$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Collections$SingletonMap$1",java.util.AbstractSet);
	    $_V(c$,"contains",
		function(a){
		    if($_O(a,java.util.Map.Entry)){
			var b=a;
			return this.b$["java.util.Collections.SingletonMap"].containsKey(b.getKey())&&this.b$["java.util.Collections.SingletonMap"].containsValue(b.getValue());
		    }return false;
		},"~O");
	    $_V(c$,"size",
		function(){
		    return 1;
		});
	    $_V(c$,"iterator",
		function(){
		    return(($_D("java.util.Collections$SingletonMap$1$1")?0:java.util.Collections.$Collections$SingletonMap$1$1$()),$_N(java.util.Collections$SingletonMap$1$1,this,null));
		});
	    c$=$_P();
	};
	c$.$Collections$SingletonMap$1$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.$hasNext=true;
		$_Z(this,arguments);
	    },java.util,"Collections$SingletonMap$1$1",null,java.util.Iterator);
	    $_V(c$,"hasNext",
		function(){
		    return this.$hasNext;
		});
	    $_V(c$,"next",
		function(){
		    if(this.$hasNext){
			this.$hasNext=false;
			return(($_D("java.util.Collections$SingletonMap$1$1$1")?0:java.util.Collections.$Collections$SingletonMap$1$1$1$()),$_N(java.util.Collections$SingletonMap$1$1$1,this,null));
		    }throw new java.util.NoSuchElementException();
		});
	    $_V(c$,"remove",
		function(){
		    throw new UnsupportedOperationException();
		});
	    c$=$_P();
	};
	c$.$Collections$SingletonMap$1$1$1$=function(){
	    $_H();
	    c$=$_W(java.util,"Collections$SingletonMap$1$1$1",null,java.util.Map.Entry);
	    $_V(c$,"equals",
		function(a){
		    return this.b$["java.util.Collections$SingletonMap$1"].contains(a);
		},"~O");
	    $_V(c$,"getKey",
		function(){
		    return this.b$["java.util.Collections.SingletonMap"].k;
		});
	    $_V(c$,"getValue",
		function(){
		    return this.b$["java.util.Collections.SingletonMap"].v;
		});
	    $_V(c$,"hashCode",
		function(){
		    return(this.b$["java.util.Collections.SingletonMap"].k==null?0:this.b$["java.util.Collections.SingletonMap"].k.hashCode())^(this.b$["java.util.Collections.SingletonMap"].v==null?0:this.b$["java.util.Collections.SingletonMap"].v.hashCode());
		});
	    $_V(c$,"setValue",
		function(a){
		    throw new UnsupportedOperationException();
		},"~O");
	    c$=$_P();
	};
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.c=null;
	    this.mutex=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SynchronizedCollection",null,[java.util.Collection,java.io.Serializable]);
	$_K(c$,
	    function(a){
		this.c=a;
		this.mutex=this;
	    },"java.util.Collection");
	$_K(c$,
	    function(a,b){
		this.c=a;
		this.mutex=b;
	    },"java.util.Collection,~O");
	$_M(c$,"add",
	    function(a){
		{
		    return this.c.add(a);
		}},"~O");
	$_M(c$,"addAll",
	    function(a){
		{
		    return this.c.addAll(a);
		}},"java.util.Collection");
	$_M(c$,"clear",
	    function(){
		{
		    this.c.clear();
		}});
	$_M(c$,"contains",
	    function(a){
		{
		    return this.c.contains(a);
		}},"~O");
	$_M(c$,"containsAll",
	    function(a){
		{
		    return this.c.containsAll(a);
		}},"java.util.Collection");
	$_M(c$,"isEmpty",
	    function(){
		{
		    return this.c.isEmpty();
		}});
	$_M(c$,"iterator",
	    function(){
		{
		    return this.c.iterator();
		}});
	$_M(c$,"remove",
	    function(a){
		{
		    return this.c.remove(a);
		}},"~O");
	$_M(c$,"removeAll",
	    function(a){
		{
		    return this.c.removeAll(a);
		}},"java.util.Collection");
	$_M(c$,"retainAll",
	    function(a){
		{
		    return this.c.retainAll(a);
		}},"java.util.Collection");
	$_M(c$,"size",
	    function(){
		{
		    return this.c.size();
		}});
	$_M(c$,"toArray",
	    function(){
		{
		    return this.c.toArray();
		}});
	$_M(c$,"toString",
	    function(){
		{
		    return this.c.toString();
		}});
	$_M(c$,"toArray",
	    function(a){
		{
		    return this.c.toArray(a);
		}},"~A");
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"SynchronizedRandomAccessList",java.util.Collections.SynchronizedList,java.util.RandomAccess);
	$_V(c$,"subList",
	    function(a,b){
		{
		    return new java.util.Collections.SynchronizedRandomAccessList(this.list.subList(a,b),this.mutex);
		}},"~N,~N");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.list=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SynchronizedList",java.util.Collections.SynchronizedCollection,java.util.List);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.SynchronizedList,[a]);
		this.list=a;
	    },"java.util.List");
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.SynchronizedList,[a,b]);
		this.list=a;
	    },"java.util.List,~O");
	$_M(c$,"add",
	    function(a,b){
		{
		    this.list.add(a,b);
		}},"~N,~O");
	$_M(c$,"addAll",
	    function(a,b){
		{
		    return this.list.addAll(a,b);
		}},"~N,java.util.Collection");
	$_M(c$,"equals",
	    function(a){
		{
		    return this.list.equals(a);
		}},"~O");
	$_M(c$,"get",
	    function(a){
		{
		    return this.list.get(a);
		}},"~N");
	$_M(c$,"hashCode",
	    function(){
		{
		    return this.list.hashCode();
		}});
	$_M(c$,"indexOf",
	    function(a){
		{
		    return this.list.indexOf(a);
		}},"~O");
	$_M(c$,"lastIndexOf",
	    function(a){
		{
		    return this.list.lastIndexOf(a);
		}},"~O");
	$_M(c$,"listIterator",
	    function(){
		{
		    return this.list.listIterator();
		}});
	$_M(c$,"listIterator",
	    function(a){
		{
		    return this.list.listIterator(a);
		}},"~N");
	$_M(c$,"remove",
	    function(a){
		{
		    return this.list.remove(a);
		}},"~N");
	$_M(c$,"set",
	    function(a,b){
		{
		    return this.list.set(a,b);
		}},"~N,~O");
	$_M(c$,"subList",
	    function(a,b){
		{
		    return new java.util.Collections.SynchronizedList(this.list.subList(a,b),this.mutex);
		}},"~N,~N");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.m=null;
	    this.mutex=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SynchronizedMap",null,[java.util.Map,java.io.Serializable]);
	$_K(c$,
	    function(a){
		this.m=a;
		this.mutex=this;
	    },"java.util.Map");
	$_K(c$,
	    function(a,b){
		this.m=a;
		this.mutex=b;
	    },"java.util.Map,~O");
	$_M(c$,"clear",
	    function(){
		{
		    this.m.clear();
		}});
	$_M(c$,"containsKey",
	    function(a){
		{
		    return this.m.containsKey(a);
		}},"~O");
	$_M(c$,"containsValue",
	    function(a){
		{
		    return this.m.containsValue(a);
		}},"~O");
	$_M(c$,"entrySet",
	    function(){
		{
		    return new java.util.Collections.SynchronizedSet(this.m.entrySet(),this.mutex);
		}});
	$_M(c$,"equals",
	    function(a){
		{
		    return this.m.equals(a);
		}},"~O");
	$_M(c$,"get",
	    function(a){
		{
		    return this.m.get(a);
		}},"~O");
	$_M(c$,"hashCode",
	    function(){
		{
		    return this.m.hashCode();
		}});
	$_M(c$,"isEmpty",
	    function(){
		{
		    return this.m.isEmpty();
		}});
	$_M(c$,"keySet",
	    function(){
		{
		    return new java.util.Collections.SynchronizedSet(this.m.keySet(),this.mutex);
		}});
	$_M(c$,"put",
	    function(a,b){
		{
		    return this.m.put(a,b);
		}},"~O,~O");
	$_M(c$,"putAll",
	    function(a){
		{
		    this.m.putAll(a);
		}},"java.util.Map");
	$_M(c$,"remove",
	    function(a){
		{
		    return this.m.remove(a);
		}},"~O");
	$_M(c$,"size",
	    function(){
		{
		    return this.m.size();
		}});
	$_M(c$,"values",
	    function(){
		{
		    return new java.util.Collections.SynchronizedCollection(this.m.values(),this.mutex);
		}});
	$_M(c$,"toString",
	    function(){
		{
		    return this.m.toString();
		}});
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"SynchronizedSet",java.util.Collections.SynchronizedCollection,java.util.Set);
	$_V(c$,"equals",
	    function(a){
		{
		    return this.c.equals(a);
		}},"~O");
	$_V(c$,"hashCode",
	    function(){
		{
		    return this.c.hashCode();
		}});
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.sm=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SynchronizedSortedMap",java.util.Collections.SynchronizedMap,java.util.SortedMap);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.SynchronizedSortedMap,[a]);
		this.sm=a;
	    },"java.util.SortedMap");
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.SynchronizedSortedMap,[a,b]);
		this.sm=a;
	    },"java.util.SortedMap,~O");
	$_M(c$,"comparator",
	    function(){
		{
		    return this.sm.comparator();
		}});
	$_M(c$,"firstKey",
	    function(){
		{
		    return this.sm.firstKey();
		}});
	$_M(c$,"headMap",
	    function(a){
		{
		    return new java.util.Collections.SynchronizedSortedMap(this.sm.headMap(a),this.mutex);
		}},"~O");
	$_M(c$,"lastKey",
	    function(){
		{
		    return this.sm.lastKey();
		}});
	$_M(c$,"subMap",
	    function(a,b){
		{
		    return new java.util.Collections.SynchronizedSortedMap(this.sm.subMap(a,b),this.mutex);
		}},"~O,~O");
	$_M(c$,"tailMap",
	    function(a){
		{
		    return new java.util.Collections.SynchronizedSortedMap(this.sm.tailMap(a),this.mutex);
		}},"~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.ss=null;
	    $_Z(this,arguments);
	},java.util.Collections,"SynchronizedSortedSet",java.util.Collections.SynchronizedSet,java.util.SortedSet);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.SynchronizedSortedSet,[a]);
		this.ss=a;
	    },"java.util.SortedSet");
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.SynchronizedSortedSet,[a,b]);
		this.ss=a;
	    },"java.util.SortedSet,~O");
	$_M(c$,"comparator",
	    function(){
		{
		    return this.ss.comparator();
		}});
	$_M(c$,"first",
	    function(){
		{
		    return this.ss.first();
		}});
	$_M(c$,"headSet",
	    function(a){
		{
		    return new java.util.Collections.SynchronizedSortedSet(this.ss.headSet(a),this.mutex);
		}},"~O");
	$_M(c$,"last",
	    function(){
		{
		    return this.ss.last();
		}});
	$_M(c$,"subSet",
	    function(a,b){
		{
		    return new java.util.Collections.SynchronizedSortedSet(this.ss.subSet(a,b),this.mutex);
		}},"~O,~O");
	$_M(c$,"tailSet",
	    function(a){
		{
		    return new java.util.Collections.SynchronizedSortedSet(this.ss.tailSet(a),this.mutex);
		}},"~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.c=null;
	    $_Z(this,arguments);
	},java.util.Collections,"UnmodifiableCollection",null,[java.util.Collection,java.io.Serializable]);
	$_K(c$,
	    function(a){
		this.c=a;
	    },"java.util.Collection");
	$_V(c$,"add",
	    function(a){
		throw new UnsupportedOperationException();
	    },"~O");
	$_V(c$,"addAll",
	    function(a){
		throw new UnsupportedOperationException();
	    },"java.util.Collection");
	$_V(c$,"clear",
	    function(){
		throw new UnsupportedOperationException();
	    });
	$_M(c$,"contains",
	    function(a){
		return this.c.contains(a);
	    },"~O");
	$_M(c$,"containsAll",
	    function(a){
		return this.c.containsAll(a);
	    },"java.util.Collection");
	$_M(c$,"isEmpty",
	    function(){
		return this.c.isEmpty();
	    });
	$_M(c$,"iterator",
	    function(){
		return(($_D("java.util.Collections$UnmodifiableCollection$1")?0:java.util.Collections.UnmodifiableCollection.$Collections$UnmodifiableCollection$1$()),$_N(java.util.Collections$UnmodifiableCollection$1,this,null));
	    });
	$_V(c$,"remove",
	    function(a){
		throw new UnsupportedOperationException();
	    },"~O");
	$_V(c$,"removeAll",
	    function(a){
		throw new UnsupportedOperationException();
	    },"java.util.Collection");
	$_V(c$,"retainAll",
	    function(a){
		throw new UnsupportedOperationException();
	    },"java.util.Collection");
	$_M(c$,"size",
	    function(){
		return this.c.size();
	    });
	$_M(c$,"toArray",
	    function(){
		return this.c.toArray();
	    });
	$_M(c$,"toArray",
	    function(a){
		return this.c.toArray(a);
	    },"~A");
	$_M(c$,"toString",
	    function(){
		return this.c.toString();
	    });
	c$.$Collections$UnmodifiableCollection$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.iterator=null;
		$_Z(this,arguments);
	    },java.util,"Collections$UnmodifiableCollection$1",null,java.util.Iterator);
	    $_Y(c$,function(){
		this.iterator=this.b$["java.util.Collections.UnmodifiableCollection"].c.iterator();
	    });
	    $_M(c$,"hasNext",
		function(){
		    return this.iterator.hasNext();
		});
	    $_M(c$,"next",
		function(){
		    return this.iterator.next();
		});
	    $_V(c$,"remove",
		function(){
		    throw new UnsupportedOperationException();
		});
	    c$=$_P();
	};
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"UnmodifiableRandomAccessList",java.util.Collections.UnmodifiableList,java.util.RandomAccess);
	$_V(c$,"subList",
	    function(a,b){
		return new java.util.Collections.UnmodifiableRandomAccessList(this.list.subList(a,b));
	    },"~N,~N");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.list=null;
	    $_Z(this,arguments);
	},java.util.Collections,"UnmodifiableList",java.util.Collections.UnmodifiableCollection,java.util.List);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.UnmodifiableList,[a]);
		this.list=a;
	    },"java.util.List");
	$_M(c$,"add",
	    function(a,b){
		throw new UnsupportedOperationException();
	    },"~N,~O");
	$_M(c$,"addAll",
	    function(a,b){
		throw new UnsupportedOperationException();
	    },"~N,java.util.Collection");
	$_M(c$,"equals",
	    function(a){
		return this.list.equals(a);
	    },"~O");
	$_M(c$,"get",
	    function(a){
		return this.list.get(a);
	    },"~N");
	$_M(c$,"hashCode",
	    function(){
		return this.list.hashCode();
	    });
	$_M(c$,"indexOf",
	    function(a){
		return this.list.indexOf(a);
	    },"~O");
	$_M(c$,"lastIndexOf",
	    function(a){
		return this.list.lastIndexOf(a);
	    },"~O");
	$_M(c$,"listIterator",
	    function(){
		return this.listIterator(0);
	    });
	$_M(c$,"listIterator",
	    function(a){
		return(($_D("java.util.Collections$UnmodifiableList$1")?0:java.util.Collections.UnmodifiableList.$Collections$UnmodifiableList$1$()),$_N(java.util.Collections$UnmodifiableList$1,this,null));
	    },"~N");
	$_M(c$,"remove",
	    function(a){
		throw new UnsupportedOperationException();
	    },"~N");
	$_V(c$,"set",
	    function(a,b){
		throw new UnsupportedOperationException();
	    },"~N,~O");
	$_M(c$,"subList",
	    function(a,b){
		return new java.util.Collections.UnmodifiableList(this.list.subList(a,b));
	    },"~N,~N");
	c$.$Collections$UnmodifiableList$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.iterator=null;
		$_Z(this,arguments);
	    },java.util,"Collections$UnmodifiableList$1",null,java.util.ListIterator);
	    $_Y(c$,function(){
		this.iterator=this.b$["java.util.Collections.UnmodifiableList"].list.listIterator(location);
	    });
	    $_V(c$,"add",
		function(b){
		    throw new UnsupportedOperationException();
		},"~O");
	    $_M(c$,"hasNext",
		function(){
		    return this.iterator.hasNext();
		});
	    $_M(c$,"hasPrevious",
		function(){
		    return this.iterator.hasPrevious();
		});
	    $_M(c$,"next",
		function(){
		    return this.iterator.next();
		});
	    $_M(c$,"nextIndex",
		function(){
		    return this.iterator.nextIndex();
		});
	    $_M(c$,"previous",
		function(){
		    return this.iterator.previous();
		});
	    $_M(c$,"previousIndex",
		function(){
		    return this.iterator.previousIndex();
		});
	    $_V(c$,"remove",
		function(){
		    throw new UnsupportedOperationException();
		});
	    $_V(c$,"set",
		function(b){
		    throw new UnsupportedOperationException();
		},"~O");
	    c$=$_P();
	};
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.m=null;
	    $_Z(this,arguments);
	},java.util.Collections,"UnmodifiableMap",null,[java.util.Map,java.io.Serializable]);
	$_K(c$,
	    function(a){
		this.m=a;
	    },"java.util.Map");
	$_V(c$,"clear",
	    function(){
		throw new UnsupportedOperationException();
	    });
	$_M(c$,"containsKey",
	    function(a){
		return this.m.containsKey(a);
	    },"~O");
	$_M(c$,"containsValue",
	    function(a){
		return this.m.containsValue(a);
	    },"~O");
	$_M(c$,"entrySet",
	    function(){
		return new java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet(this.m.entrySet());
	    });
	$_M(c$,"equals",
	    function(a){
		return this.m.equals(a);
	    },"~O");
	$_M(c$,"get",
	    function(a){
		return this.m.get(a);
	    },"~O");
	$_M(c$,"hashCode",
	    function(){
		return this.m.hashCode();
	    });
	$_M(c$,"isEmpty",
	    function(){
		return this.m.isEmpty();
	    });
	$_M(c$,"keySet",
	    function(){
		return new java.util.Collections.UnmodifiableSet(this.m.keySet());
	    });
	$_V(c$,"put",
	    function(a,b){
		throw new UnsupportedOperationException();
	    },"~O,~O");
	$_V(c$,"putAll",
	    function(a){
		throw new UnsupportedOperationException();
	    },"java.util.Map");
	$_V(c$,"remove",
	    function(a){
		throw new UnsupportedOperationException();
	    },"~O");
	$_M(c$,"size",
	    function(){
		return this.m.size();
	    });
	$_M(c$,"values",
	    function(){
		return new java.util.Collections.UnmodifiableCollection(this.m.values());
	    });
	$_M(c$,"toString",
	    function(){
		return this.m.toString();
	    });
	$_H();
	c$=$_T(java.util.Collections.UnmodifiableMap,"UnmodifiableEntrySet",java.util.Collections.UnmodifiableSet);
	$_V(c$,"iterator",
	    function(){
		return(($_D("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1")?0:java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$Collections$UnmodifiableMap$UnmodifiableEntrySet$1$()),$_N(java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1,this,null));
	    });
	$_M(c$,"toArray",
	    function(){
		var a=this.c.size();
		var b=new Array(a);
		var c=this.iterator();
		for(var d=a;--d>=0;){
		    b[d]=c.next();
		}
		return b;
	    });
	$_M(c$,"toArray",
	    function(a){
		var b=this.c.size();
		var c=0;
		var d=this.iterator();
		if(b>a.length){
		    var e=a.getClass().getComponentType();
		    a=java.lang.reflect.Array.newInstance(e,b);
		}while(c<b){
		    a[c++]=d.next();
		}
		if(c<a.length){
		    a[c]=null;
		}return a;
	    },"~A");
	c$.$Collections$UnmodifiableMap$UnmodifiableEntrySet$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.iterator=null;
		$_Z(this,arguments);
	    },java.util,"Collections$UnmodifiableMap$UnmodifiableEntrySet$1",null,java.util.Iterator);
	    $_Y(c$,function(){
		this.iterator=this.b$["java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet"].c.iterator();
	    });
	    $_M(c$,"hasNext",
		function(){
		    return this.iterator.hasNext();
		});
	    $_M(c$,"next",
		function(){
		    return new java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableMapEntry(this.iterator.next());
		});
	    $_V(c$,"remove",
		function(){
		    throw new UnsupportedOperationException();
		});
	    c$=$_P();
	};
	$_H();
	c$=$_C(function(){
	    this.mapEntry=null;
	    $_Z(this,arguments);
	},java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet,"UnmodifiableMapEntry",null,java.util.Map.Entry);
	$_K(c$,
	    function(a){
		this.mapEntry=a;
	    },"java.util.Map.Entry");
	$_M(c$,"equals",
	    function(a){
		return this.mapEntry.equals(a);
	    },"~O");
	$_M(c$,"getKey",
	    function(){
		return this.mapEntry.getKey();
	    });
	$_M(c$,"getValue",
	    function(){
		return this.mapEntry.getValue();
	    });
	$_M(c$,"hashCode",
	    function(){
		return this.mapEntry.hashCode();
	    });
	$_V(c$,"setValue",
	    function(a){
		throw new UnsupportedOperationException();
	    },"~O");
	$_M(c$,"toString",
	    function(){
		return this.mapEntry.toString();
	    });
	c$=$_P();
	c$=$_P();
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"UnmodifiableSet",java.util.Collections.UnmodifiableCollection,java.util.Set);
	$_V(c$,"equals",
	    function(a){
		return this.c.equals(a);
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		return this.c.hashCode();
	    });
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.sm=null;
	    $_Z(this,arguments);
	},java.util.Collections,"UnmodifiableSortedMap",java.util.Collections.UnmodifiableMap,java.util.SortedMap);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.UnmodifiableSortedMap,[a]);
		this.sm=a;
	    },"java.util.SortedMap");
	$_M(c$,"comparator",
	    function(){
		return this.sm.comparator();
	    });
	$_M(c$,"firstKey",
	    function(){
		return this.sm.firstKey();
	    });
	$_M(c$,"headMap",
	    function(a){
		return new java.util.Collections.UnmodifiableSortedMap(this.sm.headMap(a));
	    },"~O");
	$_M(c$,"lastKey",
	    function(){
		return this.sm.lastKey();
	    });
	$_M(c$,"subMap",
	    function(a,b){
		return new java.util.Collections.UnmodifiableSortedMap(this.sm.subMap(a,b));
	    },"~O,~O");
	$_M(c$,"tailMap",
	    function(a){
		return new java.util.Collections.UnmodifiableSortedMap(this.sm.tailMap(a));
	    },"~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.ss=null;
	    $_Z(this,arguments);
	},java.util.Collections,"UnmodifiableSortedSet",java.util.Collections.UnmodifiableSet,java.util.SortedSet);
	$_K(c$,
	    function(a){
		$_R(this,java.util.Collections.UnmodifiableSortedSet,[a]);
		this.ss=a;
	    },"java.util.SortedSet");
	$_M(c$,"comparator",
	    function(){
		return this.ss.comparator();
	    });
	$_M(c$,"first",
	    function(){
		return this.ss.first();
	    });
	$_M(c$,"headSet",
	    function(a){
		return new java.util.Collections.UnmodifiableSortedSet(this.ss.headSet(a));
	    },"~O");
	$_M(c$,"last",
	    function(){
		return this.ss.last();
	    });
	$_M(c$,"subSet",
	    function(a,b){
		return new java.util.Collections.UnmodifiableSortedSet(this.ss.subSet(a,b));
	    },"~O,~O");
	$_M(c$,"tailSet",
	    function(a){
		return new java.util.Collections.UnmodifiableSortedSet(this.ss.tailSet(a));
	    },"~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.c=null;
	    this.type=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CheckedCollection",null,[java.util.Collection,java.io.Serializable]);
	$_K(c$,
	    function(a,b){
		if(a==null||b==null){
		    throw new NullPointerException();
		}this.c=a;
		this.type=b;
	    },"java.util.Collection,Class");
	$_M(c$,"size",
	    function(){
		return this.c.size();
	    });
	$_M(c$,"isEmpty",
	    function(){
		return this.c.isEmpty();
	    });
	$_M(c$,"contains",
	    function(a){
		return this.c.contains(a);
	    },"~O");
	$_M(c$,"iterator",
	    function(){
		var a=this.c.iterator();
		if($_O(a,java.util.ListIterator)){
		    a=new java.util.Collections.CheckedListIterator(a,this.type);
		}return a;
	    });
	$_M(c$,"toArray",
	    function(){
		return this.c.toArray();
	    });
	$_M(c$,"toArray",
	    function(a){
		return this.c.toArray(a);
	    },"~A");
	$_M(c$,"add",
	    function(a){
		return this.c.add(java.util.Collections.checkType(a,this.type));
	    },"~O");
	$_M(c$,"remove",
	    function(a){
		return this.c.remove(a);
	    },"~O");
	$_M(c$,"containsAll",
	    function(a){
		return this.c.containsAll(a);
	    },"java.util.Collection");
	$_V(c$,"addAll",
	    function(a){
		var b=a.size();
		if(b==0){
		    return false;
		}var c=new Array(b);
		var d=a.iterator();
		for(var e=0;e<b;e++){
		    c[e]=java.util.Collections.checkType(d.next(),this.type);
		}
		var f=false;
		for(var g=0;g<b;g++){
		    f=new Boolean(f|this.c.add(c[g])).valueOf();
		}
		return f;
	    },"java.util.Collection");
	$_M(c$,"removeAll",
	    function(a){
		return this.c.removeAll(a);
	    },"java.util.Collection");
	$_M(c$,"retainAll",
	    function(a){
		return this.c.retainAll(a);
	    },"java.util.Collection");
	$_M(c$,"clear",
	    function(){
		this.c.clear();
	    });
	$_M(c$,"toString",
	    function(){
		return this.c.toString();
	    });
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.i=null;
	    this.type=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CheckedListIterator",null,java.util.ListIterator);
	$_K(c$,
	    function(a,b){
		this.i=a;
		this.type=b;
	    },"java.util.ListIterator,Class");
	$_M(c$,"hasNext",
	    function(){
		return this.i.hasNext();
	    });
	$_M(c$,"next",
	    function(){
		return this.i.next();
	    });
	$_M(c$,"remove",
	    function(){
		this.i.remove();
	    });
	$_M(c$,"hasPrevious",
	    function(){
		return this.i.hasPrevious();
	    });
	$_M(c$,"previous",
	    function(){
		return this.i.previous();
	    });
	$_M(c$,"nextIndex",
	    function(){
		return this.i.nextIndex();
	    });
	$_M(c$,"previousIndex",
	    function(){
		return this.i.previousIndex();
	    });
	$_M(c$,"set",
	    function(a){
		this.i.set(java.util.Collections.checkType(a,this.type));
	    },"~O");
	$_M(c$,"add",
	    function(a){
		this.i.add(java.util.Collections.checkType(a,this.type));
	    },"~O");
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.l=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CheckedList",java.util.Collections.CheckedCollection,java.util.List);
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.CheckedList,[a,b]);
		this.l=a;
	    },"java.util.List,Class");
	$_M(c$,"addAll",
	    function(a,b){
		var c=b.size();
		if(c==0){
		    return false;
		}var d=new Array(c);
		var e=b.iterator();
		for(var f=0;f<c;f++){
		    d[f]=java.util.Collections.checkType(e.next(),this.type);
		}
		return this.l.addAll(a,java.util.Arrays.asList(d));
	    },"~N,java.util.Collection");
	$_M(c$,"get",
	    function(a){
		return this.l.get(a);
	    },"~N");
	$_M(c$,"set",
	    function(a,b){
		return this.l.set(a,java.util.Collections.checkType(b,this.type));
	    },"~N,~O");
	$_M(c$,"add",
	    function(a,b){
		this.l.add(a,java.util.Collections.checkType(b,this.type));
	    },"~N,~O");
	$_M(c$,"remove",
	    function(a){
		return this.l.remove(a);
	    },"~N");
	$_M(c$,"indexOf",
	    function(a){
		return this.l.indexOf(a);
	    },"~O");
	$_M(c$,"lastIndexOf",
	    function(a){
		return this.l.lastIndexOf(a);
	    },"~O");
	$_M(c$,"listIterator",
	    function(){
		return new java.util.Collections.CheckedListIterator(this.l.listIterator(),this.type);
	    });
	$_M(c$,"listIterator",
	    function(a){
		return new java.util.Collections.CheckedListIterator(this.l.listIterator(a),this.type);
	    },"~N");
	$_M(c$,"subList",
	    function(a,b){
		return java.util.Collections.checkedList(this.l.subList(a,b),this.type);
	    },"~N,~N");
	$_M(c$,"equals",
	    function(a){
		return this.l.equals(a);
	    },"~O");
	$_M(c$,"hashCode",
	    function(){
		return this.l.hashCode();
	    });
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"CheckedRandomAccessList",java.util.Collections.CheckedList,java.util.RandomAccess);
	c$=$_P();
	$_H();
	c$=$_T(java.util.Collections,"CheckedSet",java.util.Collections.CheckedCollection,java.util.Set);
	$_V(c$,"equals",
	    function(a){
		return this.c.equals(a);
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		return this.c.hashCode();
	    });
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.m=null;
	    this.keyType=null;
	    this.valueType=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CheckedMap",null,[java.util.Map,java.io.Serializable]);
	$_K(c$,
	    ($fz=function(a,b,c){
		if(a==null||b==null||c==null){
		    throw new NullPointerException();
		}this.m=a;
		this.keyType=b;
		this.valueType=c;
	    },$fz.isPrivate=true,$fz),"java.util.Map,Class,Class");
	$_M(c$,"size",
	    function(){
		return this.m.size();
	    });
	$_M(c$,"isEmpty",
	    function(){
		return this.m.isEmpty();
	    });
	$_M(c$,"containsKey",
	    function(a){
		return this.m.containsKey(a);
	    },"~O");
	$_M(c$,"containsValue",
	    function(a){
		return this.m.containsValue(a);
	    },"~O");
	$_M(c$,"get",
	    function(a){
		return this.m.get(a);
	    },"~O");
	$_M(c$,"put",
	    function(a,b){
		return this.m.put(java.util.Collections.checkType(a,this.keyType),java.util.Collections.checkType(b,this.valueType));
	    },"~O,~O");
	$_M(c$,"remove",
	    function(a){
		return this.m.remove(a);
	    },"~O");
	$_V(c$,"putAll",
	    function(a){
		var b=a.size();
		if(b==0){
		    return;
		}var c=new Array(b);
		var d=a.entrySet().iterator();
		for(var e=0;e<b;e++){
		    var f=d.next();
		    java.util.Collections.checkType(f.getKey(),this.keyType);
		    java.util.Collections.checkType(f.getValue(),this.valueType);
		    c[e]=f;
		}
		for(var f=0;f<b;f++){
		    this.m.put(c[f].getKey(),c[f].getValue());
		}
	    },"java.util.Map");
	$_M(c$,"clear",
	    function(){
		this.m.clear();
	    });
	$_M(c$,"keySet",
	    function(){
		return this.m.keySet();
	    });
	$_M(c$,"values",
	    function(){
		return this.m.values();
	    });
	$_M(c$,"entrySet",
	    function(){
		return new java.util.Collections.CheckedMap.CheckedEntrySet(this.m.entrySet(),this.valueType);
	    });
	$_M(c$,"equals",
	    function(a){
		return this.m.equals(a);
	    },"~O");
	$_M(c$,"hashCode",
	    function(){
		return this.m.hashCode();
	    });
	$_M(c$,"toString",
	    function(){
		return this.m.toString();
	    });
	$_H();
	c$=$_C(function(){
	    this.e=null;
	    this.valueType=null;
	    $_Z(this,arguments);
	},java.util.Collections.CheckedMap,"CheckedEntry",null,java.util.Map.Entry);
	$_K(c$,
	    function(a,b){
		if(a==null){
		    throw new NullPointerException();
		}this.e=a;
		this.valueType=b;
	    },"java.util.Map.Entry,Class");
	$_M(c$,"getKey",
	    function(){
		return this.e.getKey();
	    });
	$_M(c$,"getValue",
	    function(){
		return this.e.getValue();
	    });
	$_M(c$,"setValue",
	    function(a){
		return this.e.setValue(java.util.Collections.checkType(a,this.valueType));
	    },"~O");
	$_M(c$,"equals",
	    function(a){
		return this.e.equals(a);
	    },"~O");
	$_M(c$,"hashCode",
	    function(){
		return this.e.hashCode();
	    });
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.s=null;
	    this.valueType=null;
	    $_Z(this,arguments);
	},java.util.Collections.CheckedMap,"CheckedEntrySet",null,java.util.Set);
	$_K(c$,
	    function(a,b){
		this.s=a;
		this.valueType=b;
	    },"java.util.Set,Class");
	$_M(c$,"iterator",
	    function(){
		return new java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntryIterator(this.s.iterator(),this.valueType);
	    });
	$_M(c$,"toArray",
	    function(){
		var a=this.size();
		var b=new Array(a);
		var c=this.iterator();
		for(var d=0;d<a;d++){
		    b[d]=c.next();
		}
		return b;
	    });
	$_M(c$,"toArray",
	    function(a){
		var b=this.size();
		if(a.length<b){
		    var c=a.getClass().getComponentType();
		    a=java.lang.reflect.Array.newInstance(c,b);
		}var c=this.iterator();
		for(var d=0;d<b;d++){
		    a[d]=c.next();
		}
		if(b<a.length){
		    a[b]=null;
		}return a;
	    },"~A");
	$_M(c$,"retainAll",
	    function(a){
		return this.s.retainAll(a);
	    },"java.util.Collection");
	$_M(c$,"removeAll",
	    function(a){
		return this.s.removeAll(a);
	    },"java.util.Collection");
	$_M(c$,"containsAll",
	    function(a){
		return this.s.containsAll(a);
	    },"java.util.Collection");
	$_V(c$,"addAll",
	    function(a){
		throw new UnsupportedOperationException();
	    },"java.util.Collection");
	$_M(c$,"remove",
	    function(a){
		return this.s.remove(a);
	    },"~O");
	$_M(c$,"contains",
	    function(a){
		return this.s.contains(a);
	    },"~O");
	$_V(c$,"add",
	    function(a){
		throw new UnsupportedOperationException();
	    },"java.util.Map.Entry");
	$_M(c$,"isEmpty",
	    function(){
		return this.s.isEmpty();
	    });
	$_M(c$,"clear",
	    function(){
		this.s.clear();
	    });
	$_M(c$,"size",
	    function(){
		return this.s.size();
	    });
	$_M(c$,"hashCode",
	    function(){
		return this.s.hashCode();
	    });
	$_M(c$,"equals",
	    function(a){
		return this.s.equals(a);
	    },"~O");
	$_H();
	c$=$_C(function(){
	    this.i=null;
	    this.valueType=null;
	    $_Z(this,arguments);
	},java.util.Collections.CheckedMap.CheckedEntrySet,"CheckedEntryIterator",null,java.util.Iterator);
	$_K(c$,
	    function(a,b){
		this.i=a;
		this.valueType=b;
	    },"java.util.Iterator,Class");
	$_M(c$,"hasNext",
	    function(){
		return this.i.hasNext();
	    });
	$_M(c$,"remove",
	    function(){
		this.i.remove();
	    });
	$_M(c$,"next",
	    function(){
		return new java.util.Collections.CheckedMap.CheckedEntry(this.i.next(),this.valueType);
	    });
	c$=$_P();
	c$=$_P();
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.ss=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CheckedSortedSet",java.util.Collections.CheckedSet,java.util.SortedSet);
	$_K(c$,
	    function(a,b){
		$_R(this,java.util.Collections.CheckedSortedSet,[a,b]);
		this.ss=a;
	    },"java.util.SortedSet,Class");
	$_M(c$,"comparator",
	    function(){
		return this.ss.comparator();
	    });
	$_M(c$,"subSet",
	    function(a,b){
		return new java.util.Collections.CheckedSortedSet(this.ss.subSet(a,b),this.type);
	    },"~O,~O");
	$_M(c$,"headSet",
	    function(a){
		return new java.util.Collections.CheckedSortedSet(this.ss.headSet(a),this.type);
	    },"~O");
	$_M(c$,"tailSet",
	    function(a){
		return new java.util.Collections.CheckedSortedSet(this.ss.tailSet(a),this.type);
	    },"~O");
	$_M(c$,"first",
	    function(){
		return this.ss.first();
	    });
	$_M(c$,"last",
	    function(){
		return this.ss.last();
	    });
	c$=$_P();
	$_H();
	c$=$_C(function(){
	    this.sm=null;
	    $_Z(this,arguments);
	},java.util.Collections,"CheckedSortedMap",java.util.Collections.CheckedMap,java.util.SortedMap);
	$_K(c$,
	    function(a,b,c){
		$_R(this,java.util.Collections.CheckedSortedMap,[a,b,c]);
		this.sm=a;
	    },"java.util.SortedMap,Class,Class");
	$_M(c$,"comparator",
	    function(){
		return this.sm.comparator();
	    });
	$_M(c$,"subMap",
	    function(a,b){
		return new java.util.Collections.CheckedSortedMap(this.sm.subMap(a,b),this.keyType,this.valueType);
	    },"~O,~O");
	$_M(c$,"headMap",
	    function(a){
		return new java.util.Collections.CheckedSortedMap(this.sm.headMap(a),this.keyType,this.valueType);
	    },"~O");
	$_M(c$,"tailMap",
	    function(a){
		return new java.util.Collections.CheckedSortedMap(this.sm.tailMap(a),this.keyType,this.valueType);
	    },"~O");
	$_M(c$,"firstKey",
	    function(){
		return this.sm.firstKey();
	    });
	$_M(c$,"lastKey",
	    function(){
		return this.sm.lastKey();
	    });
	c$=$_P();
	c$.EMPTY_LIST=c$.prototype.EMPTY_LIST=new java.util.Collections.EmptyList();
	c$.EMPTY_SET=c$.prototype.EMPTY_SET=new java.util.Collections.EmptySet();
	c$.EMPTY_MAP=c$.prototype.EMPTY_MAP=new java.util.Collections.EmptyMap();
    });
    // 
    //// java\util\Random.js 
    // 
    ﻿$_L(null,"java.util.Random",["java.lang.IllegalArgumentException"],function(){
	c$=$_C(function(){
	    this.haveNextNextGaussian=false;
	    this.seed=0;
	    this.nextNextGaussian=0;
	    $_Z(this,arguments);
	},java.util,"Random",null,java.io.Serializable);
	$_K(c$,
	    function(){
		this.setSeed(System.currentTimeMillis());
	    });
	$_K(c$,
	    function(seed){
		this.setSeed(seed);
	    },"~N");
	$_M(c$,"next",
	    function(bits){
		this.seed=(this.seed*25214903917+0xb)&(281474976710655);
		return(this.seed>>>(48-bits));
	    },"~N");
	$_M(c$,"nextBoolean",
	    function(){
		return Math.random()>0.5;
	    });
	$_M(c$,"nextBytes",
	    function(buf){
		for(var i=0;i<bytes.length;i++){
		    bytes[i]=Math.round(0x100*Math.random());
		}
	    },"~A");
	$_M(c$,"nextDouble",
	    function(){
		return Math.random();
	    });
	$_M(c$,"nextFloat",
	    function(){
		return Math.random();
	    });
	$_M(c$,"nextGaussian",
	    function(){
		if(this.haveNextNextGaussian){
		    this.haveNextNextGaussian=false;
		    return this.nextNextGaussian;
		}var v1;
		var v2;
		var s;
		do{
		    v1=2*this.nextDouble()-1;
		    v2=2*this.nextDouble()-1;
		    s=v1*v1+v2*v2;
		}while(s>=1);
		var norm=Math.sqrt(-2*Math.log(s)/s);
		this.nextNextGaussian=v2*norm;
		this.haveNextNextGaussian=true;
		return v1*norm;
	    });
	$_M(c$,"nextInt",
	    function(){
		return Math.ceil(0xffff*Math.random())-0x8000;
	    });
	$_M(c$,"nextInt",
	    function(n){
		if(n>0){
		    if((n&-n)==n){
			return((n*this.next(31))>>31);
		    }var bits;
		    var val;
		    do{
			bits=this.next(31);
			val=bits%n;
		    }while(bits-val+(n-1)<0);
		    return val;
		}throw new IllegalArgumentException();
	    },"~N");
	$_M(c$,"nextLong",
	    function(){
		return Math.ceil(0xffffffff*Math.random())-0x80000000;
	    });
	$_M(c$,"setSeed",
	    function(seed){
		this.seed=(seed^25214903917)&(281474976710655);
		this.haveNextNextGaussian=false;
	    },"~N");
	$_S(c$,
	    "multiplier",0x5deece66d);
    });
    // 
    //// org\jmol\awtjs2d\JmolURLConnection.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["java.net.URLConnection"], "org.jmol.awtjs2d.JmolURLConnection", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bytesOut = null;
	    this.postOut = "";
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs2d, "JmolURLConnection", java.net.URLConnection);
	Clazz.defineMethod (c$, "doAjax", 
			    ($fz = function () {
				return null;
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "connect", 
			      function () {
			      });
	Clazz.defineMethod (c$, "outputBytes", 
			    function (bytes) {
				this.bytesOut = bytes;
			    }, "~A");
	Clazz.defineMethod (c$, "outputString", 
			    function (post) {
				this.postOut = post;
			    }, "~S");
	Clazz.defineMethod (c$, "getStringXBuilder", 
			    function () {
				return this.doAjax ();
			    });
    });
    // 
    //// org\jmol\api\JmolCallbackListener.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolCallbackListener");
    // 
    //// org\jmol\api\JmolStatusListener.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.load (["org.jmol.api.JmolCallbackListener"], "org.jmol.api.JmolStatusListener", null, function () {
	Clazz.declareInterface (org.jmol.api, "JmolStatusListener", org.jmol.api.JmolCallbackListener);
    });
    // 
    //// org\jmol\api\JmolSyncInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolSyncInterface");
    // 
    //// org\jmol\appletjs\Jmol.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.appletjs");
    Clazz.load (["org.jmol.api.JmolStatusListener", "$.JmolSyncInterface", "java.util.Hashtable"], "org.jmol.appletjs.Jmol", ["java.lang.Boolean", "java.net.URL", "java.util.ArrayList", "org.jmol.appletjs.JmolAppletRegistry", "org.jmol.constant.EnumCallback", "org.jmol.i18n.GT", "org.jmol.util.Escape", "$.Logger", "$.Parser", "$.StringXBuilder", "$.TextFormat", "org.jmol.viewer.JmolConstants", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.language = null;
	    this.doTranslate = true;
	    this.haveDocumentAccess = false;
	    this.isStereoSlave = false;
	    this.loading = false;
	    this.mayScript = true;
	    this.htmlName = null;
	    this.fullName = null;
	    this.syncId = null;
	    this.outputBuffer = null;
	    this.gRight = null;
	    this.viewer = null;
	    this.b$ = null;
	    this.viewerOptions = null;
	    this.htParams = null;
	    this.jmol = null;
	    if (!Clazz.isClassDefined ("org.jmol.appletjs.Jmol.MyStatusListener")) {
		org.jmol.appletjs.Jmol.$Jmol$MyStatusListener$ ();
	    }
	    Clazz.instantialize (this, arguments);
	}, org.jmol.appletjs, "Jmol", null, org.jmol.api.JmolSyncInterface);
	Clazz.prepareFields (c$, function () {
	    this.b$ =  new java.util.Hashtable ();
	    this.htParams =  new java.util.Hashtable ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewerOptions) {
				   if (viewerOptions == null) viewerOptions =  new java.util.Hashtable ();
				   this.viewerOptions = viewerOptions;
				   for (var entry, $entry = viewerOptions.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) this.htParams.put (entry.getKey ().toLowerCase (), entry.getValue ());

				   this.init ();
			       }, "java.util.Map");
	Clazz.defineMethod (c$, "jmolReady", 
			    function () {
				System.out.println ("Jmol applet " + this.fullName + " ready");
				this.viewer.getBooleanProperty ("__appletReady");
			    });
	Clazz.defineMethod (c$, "destroy", 
			    function () {
				this.gRight = null;
				org.jmol.appletjs.JmolAppletRegistry.checkOut (this.fullName);
				this.viewer.setModeMouse (-1);
				this.viewer.getBooleanProperty ("__appletDestroyed");
				this.viewer = null;
				System.out.println ("Jmol applet " + this.fullName + " destroyed");
			    });
	Clazz.defineMethod (c$, "setStereoGraphics", 
			    function (isStereo) {
				{
				}return null;
			    }, "~B");
	Clazz.defineMethod (c$, "init", 
			    function () {
				this.jmol = this;
				this.htmlName = this.getParameter ("name");
				this.syncId = this.getParameter ("syncId");
				this.fullName = this.htmlName + "__" + this.syncId + "__";
				System.out.println ("Jmol JavaScript applet " + this.fullName + " initializing");
				this.setLogging ();
				this.viewerOptions.remove ("debug");
				this.viewerOptions.put ("fullName", this.fullName);
				this.mayScript = true;
				org.jmol.appletjs.JmolAppletRegistry.checkIn (this.fullName, this);
				this.initWindows ();
				this.initApplication ();
			    });
	Clazz.defineMethod (c$, "initWindows", 
			    ($fz = function () {
				this.viewerOptions.put ("applet", Boolean.TRUE);
				if (this.getParameter ("statusListener") == null) this.viewerOptions.put ("statusListener", Clazz.innerTypeInstance (org.jmol.appletjs.Jmol.MyStatusListener, this, null));
				this.viewer =  new org.jmol.viewer.Viewer (this.viewerOptions);
				this.mayScript = true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "initApplication", 
			    ($fz = function () {
				this.viewer.pushHoldRepaint ();
				{
				    var emulate = this.getValueLowerCase ("emulate", "jmol");
				    this.setStringProperty ("defaults", emulate.equals ("chime") ? "RasMol" : "Jmol");
				    this.setStringProperty ("backgroundColor", this.getValue ("bgcolor", this.getValue ("boxbgcolor", "black")));
				    this.loading = true;
				    for (var item, $item = 0, $$item = org.jmol.constant.EnumCallback.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) {
					this.setValue (item.name () + "Callback", null);
				    }
				    this.loading = false;
				    this.language = org.jmol.i18n.GT.getLanguage ();
				    System.out.println ("language=" + this.language);
				    var scriptParam = this.getValue ("script", "");
				    if (scriptParam.length > 0) this.scriptProcessor (scriptParam, null, 1);
				    this.jmolReady ();
				}this.viewer.popHoldRepaint ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setLogging", 
			    ($fz = function () {
				var iLevel = (this.getValue ("logLevel", (this.getBooleanValue ("debug", false) ? "5" : "4"))).charCodeAt (0) - 48;
				if (iLevel != 4) System.out.println ("setting logLevel=" + iLevel + " -- To change, use script \"set logLevel [0-5]\"");
				org.jmol.util.Logger.setLogLevel (iLevel);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getParameter", 
			    ($fz = function (paramName) {
				var o = this.htParams.get (paramName.toLowerCase ());
				return (o == null ? null :  String.instantialize (o.toString ()));
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getBooleanValue", 
			    ($fz = function (propertyName, defaultValue) {
				var value = this.getValue (propertyName, defaultValue ? "true" : "");
				return (value.equalsIgnoreCase ("true") || value.equalsIgnoreCase ("on") || value.equalsIgnoreCase ("yes"));
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "getValue", 
			    ($fz = function (propertyName, defaultValue) {
				var stringValue = this.getParameter (propertyName);
				System.out.println ("getValue " + propertyName + " = " + stringValue);
				if (stringValue != null) return stringValue;
				return defaultValue;
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "getValueLowerCase", 
			    ($fz = function (paramName, defaultValue) {
				var value = this.getValue (paramName, defaultValue);
				if (value != null) {
				    value = value.trim ().toLowerCase ();
				    if (value.length == 0) value = null;
				}return value;
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "setValue", 
			    ($fz = function (name, defaultValue) {
				this.setStringProperty (name, this.getValue (name, defaultValue));
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "setStringProperty", 
			    ($fz = function (name, value) {
				if (value == null) return;
				org.jmol.util.Logger.info (name + " = \"" + value + "\"");
				this.viewer.setStringProperty (name, value);
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "sendJsTextStatus", 
			    function (message) {
				System.out.println (message);
			    }, "~S");
	Clazz.defineMethod (c$, "sendJsTextareaStatus", 
			    function (message) {
				System.out.println (message);
			    }, "~S");
	Clazz.defineMethod (c$, "handleEvent", 
			    function (e) {
				if (this.viewer == null) return false;
				return this.viewer.handleOldJvm10Event (e.id, e.x, e.y, e.modifiers, e.when);
			    }, "java.awt.Event");
	Clazz.defineMethod (c$, "scriptProcessor", 
			    ($fz = function (script, statusParams, processType) {
				if (script == null || script.length == 0) return "";
				switch (processType) {
				case 0:
				    var err = this.viewer.scriptCheck (script);
				    return (Clazz.instanceOf (err, String) ? err : "");
				case 1:
				    if (statusParams != null) return this.viewer.scriptWaitStatus (script, statusParams).toString ();
				    return this.viewer.scriptWait (script);
				case 2:
				default:
				    return this.viewer.script (script);
				}
			    }, $fz.isPrivate = true, $fz), "~S,~S,~N");
	Clazz.defineMethod (c$, "script", 
			    function (script) {
				this.scriptNoWait (script);
			    }, "~S");
	Clazz.defineMethod (c$, "scriptNoWait", 
			    function (script) {
				if (script == null || script.length == 0) return "";
				return this.scriptProcessor (script, null, 2);
			    }, "~S");
	Clazz.defineMethod (c$, "scriptCheck", 
			    function (script) {
				if (script == null || script.length == 0) return "";
				return this.scriptProcessor (script, null, 0);
			    }, "~S");
	Clazz.defineMethod (c$, "scriptWait", 
			    function (script) {
				return this.scriptWait (script, null);
			    }, "~S");
	Clazz.defineMethod (c$, "scriptWait", 
			    function (script, statusParams) {
				if (script == null || script.length == 0) return "";
				this.outputBuffer = null;
				return this.scriptProcessor (script, statusParams, 1);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "scriptWaitOutput", 
			    function (script) {
				if (script == null || script.length == 0) return "";
				this.outputBuffer =  new org.jmol.util.StringXBuilder ();
				this.viewer.scriptWaitStatus (script, "");
				var str = (this.outputBuffer == null ? "" : this.outputBuffer.toString ());
				this.outputBuffer = null;
				return str;
			    }, "~S");
	Clazz.defineMethod (c$, "syncScript", 
			    function (script) {
				this.viewer.syncScript (script, "~", 0);
			    }, "~S");
	Clazz.defineMethod (c$, "getAppletInfo", 
			    function () {
				return org.jmol.i18n.GT._ ("Jmol Applet version {0} {1}.\n\nAn OpenScience project.\n\nSee http://www.jmol.org for more information", [org.jmol.viewer.JmolConstants.version, org.jmol.viewer.JmolConstants.date]) + "\nhtmlName = " + org.jmol.util.Escape.escapeStr (this.htmlName) + "\nsyncId = " + org.jmol.util.Escape.escapeStr (this.syncId) + "\ndocumentBase = " + org.jmol.util.Escape.escapeStr ("" + this.getProperty ("documentBase")) + "\ncodeBase = " + org.jmol.util.Escape.escapeStr ("" + this.getProperty ("codeBase"));
			    });
	Clazz.defineMethod (c$, "getProperty", 
			    function (infoType) {
				return this.viewer.getProperty (null, infoType, "");
			    }, "~S");
	Clazz.defineMethod (c$, "getProperty", 
			    function (infoType, paramInfo) {
				return this.viewer.getProperty (null, infoType, paramInfo);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getPropertyAsString", 
			    function (infoType) {
				return this.viewer.getProperty ("readable", infoType, "").toString ();
			    }, "~S");
	Clazz.defineMethod (c$, "getPropertyAsString", 
			    function (infoType, paramInfo) {
				return this.viewer.getProperty ("readable", infoType, paramInfo).toString ();
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getPropertyAsJSON", 
			    function (infoType) {
				return this.viewer.getProperty ("JSON", infoType, "").toString ();
			    }, "~S");
	Clazz.defineMethod (c$, "getPropertyAsJSON", 
			    function (infoType, paramInfo) {
				return this.viewer.getProperty ("JSON", infoType, paramInfo).toString ();
			    }, "~S,~S");
	Clazz.defineMethod (c$, "loadInlineString", 
			    function (strModel, script, isAppend) {
				var errMsg = this.viewer.loadInline (strModel, isAppend);
				if (errMsg == null) this.script (script);
				return errMsg;
			    }, "~S,~S,~B");
	Clazz.defineMethod (c$, "loadInlineArray", 
			    function (strModels, script, isAppend) {
				if (strModels == null || strModels.length == 0) return null;
				var errMsg = this.viewer.loadInline (strModels, isAppend);
				if (errMsg == null) this.script (script);
				return errMsg;
			    }, "~A,~S,~B");
	c$.sendCallback = Clazz.defineMethod (c$, "sendCallback", 
					      function (strInfo, callback, data) {
						  if (callback == null || callback.length == 0) {
						  } else if (callback.equals ("alert")) {
						      {
							  alert(strInfo);
							  return "";
						      }} else {
							  var tokens = org.jmol.util.TextFormat.split (callback, '.');
							  {
							      try{
								  var o = window[tokens[0]]
								  for (i = 1; i < tokens.length; i++){
								      o = o[tokens[i]]
								  }
								  return o(data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
							      } catch (e) {
								  System.out.println(callback + " failed " + e);
							      }
							  }}return "";
					      }, "~S,~S,~A");
	Clazz.overrideMethod (c$, "register", 
			      function (id, jsi) {
				  org.jmol.appletjs.JmolAppletRegistry.checkIn (id, jsi);
			      }, "~S,org.jmol.api.JmolSyncInterface");
	c$.$Jmol$MyStatusListener$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.haveNotifiedError = false;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.appletjs.Jmol, "MyStatusListener", null, org.jmol.api.JmolStatusListener);
	    Clazz.overrideMethod (c$, "getRegistryInfo", 
				  function () {
				      org.jmol.appletjs.JmolAppletRegistry.checkIn (null, null);
				      return org.jmol.appletjs.JmolAppletRegistry.htRegistry;
				  });
	    Clazz.overrideMethod (c$, "resizeInnerPanel", 
				  function (a) {
				  }, "~S");
	    Clazz.overrideMethod (c$, "notifyEnabled", 
				  function (a) {
				      switch (a) {
				      case org.jmol.constant.EnumCallback.ANIMFRAME:
				      case org.jmol.constant.EnumCallback.ECHO:
				      case org.jmol.constant.EnumCallback.ERROR:
				      case org.jmol.constant.EnumCallback.EVAL:
				      case org.jmol.constant.EnumCallback.LOADSTRUCT:
				      case org.jmol.constant.EnumCallback.MEASURE:
				      case org.jmol.constant.EnumCallback.MESSAGE:
				      case org.jmol.constant.EnumCallback.PICK:
				      case org.jmol.constant.EnumCallback.SYNC:
				      case org.jmol.constant.EnumCallback.SCRIPT:
					  return true;
				      case org.jmol.constant.EnumCallback.APPLETREADY:
				      case org.jmol.constant.EnumCallback.ATOMMOVED:
				      case org.jmol.constant.EnumCallback.CLICK:
				      case org.jmol.constant.EnumCallback.HOVER:
				      case org.jmol.constant.EnumCallback.MINIMIZATION:
				      case org.jmol.constant.EnumCallback.RESIZE:
					  break;
				      }
				      return (this.b$["org.jmol.appletjs.Jmol"].b$.get (a) != null);
				  }, "org.jmol.constant.EnumCallback");
	    Clazz.defineMethod (c$, "notifyCallback", 
				function (a, b) {
				    var c = this.b$["org.jmol.appletjs.Jmol"].b$.get (a);
				    var d = (c != null && (b == null || b[0] == null));
				    var e = false;
				    if (b != null) b[0] = this.b$["org.jmol.appletjs.Jmol"].htmlName;
				    var f = (b == null || b[1] == null ? null : b[1].toString ());
				    switch (a) {
				    case org.jmol.constant.EnumCallback.APPLETREADY:
					b[3] = this.b$["org.jmol.appletjs.Jmol"].jmol;
					break;
				    case org.jmol.constant.EnumCallback.ERROR:
				    case org.jmol.constant.EnumCallback.EVAL:
				    case org.jmol.constant.EnumCallback.HOVER:
				    case org.jmol.constant.EnumCallback.MINIMIZATION:
				    case org.jmol.constant.EnumCallback.RESIZE:
					break;
				    case org.jmol.constant.EnumCallback.CLICK:
					if ("alert".equals (c)) f = "x=" + b[1] + " y=" + b[2] + " action=" + b[3] + " clickCount=" + b[4];
					break;
				    case org.jmol.constant.EnumCallback.ANIMFRAME:
					var g = b[1];
					var h = g[0];
					var i = g[1];
					var j = g[2];
					var k = g[3];
					var l = g[4];
					var m = (h <= -2);
					var n = (k < 0 ? -1 : 1);
					var o = (l < 0 ? -1 : 1);
					if (d) {
					    b = [this.b$["org.jmol.appletjs.Jmol"].htmlName, Integer.$valueOf (Math.max (h, -2 - h)), Integer.$valueOf (i), Integer.$valueOf (j), Integer.$valueOf (Math.abs (k)), Integer.$valueOf (Math.abs (l)), Integer.$valueOf (m ? 1 : 0), Integer.$valueOf (n), Integer.$valueOf (o)];
					}break;
				    case org.jmol.constant.EnumCallback.ECHO:
					var p = (b.length == 2);
					var q = (p || (b[2]).intValue () == 1);
					if (!d) {
					    if (q) e = true;
					    d = (!p && (c = this.b$["org.jmol.appletjs.Jmol"].b$.get ((a = org.jmol.constant.EnumCallback.MESSAGE))) != null);
					}if (!e) this.output (f);
					break;
				    case org.jmol.constant.EnumCallback.LOADSTRUCT:
					var r = b[4];
					if (r != null) {
					    r = (r.indexOf ("NOTE:") >= 0 ? "" : org.jmol.i18n.GT._ ("File Error:")) + r;
					    this.showStatus (r);
					    this.notifyCallback (org.jmol.constant.EnumCallback.MESSAGE, ["", r]);
					    return;
					}break;
				    case org.jmol.constant.EnumCallback.MEASURE:
					if (!d) d = ((c = this.b$["org.jmol.appletjs.Jmol"].b$.get ((a = org.jmol.constant.EnumCallback.MESSAGE))) != null);
					var s = b[3];
					if (s.indexOf ("Picked") >= 0 || s.indexOf ("Sequence") >= 0) {
					    this.showStatus (f);
					    e = true;
					} else if (s.indexOf ("Completed") >= 0) {
					    f = s + ": " + f;
					    e = true;
					}break;
				    case org.jmol.constant.EnumCallback.MESSAGE:
					e = !d;
					d = new Boolean (d & (f != null)).valueOf ();
					if (!e) this.output (f);
					break;
				    case org.jmol.constant.EnumCallback.PICK:
					this.showStatus (f);
					e = true;
					break;
				    case org.jmol.constant.EnumCallback.SCRIPT:
					var t = (b[3]).intValue ();
					if (t > 0) {
					    this.notifyScriptTermination ();
					} else if (!d) {
					    d = ((c = this.b$["org.jmol.appletjs.Jmol"].b$.get ((a = org.jmol.constant.EnumCallback.MESSAGE))) != null);
					}this.output (f);
					this.showStatus (f);
					break;
				    case org.jmol.constant.EnumCallback.SYNC:
					this.sendScript (f, b[2], true, d);
					return;
				    }
				    if (e) {
					var u = this.b$["org.jmol.appletjs.Jmol"].viewer.getProperty ("DATA_API", "getAppConsole", null);
					if (u != null) {
					    u.notifyCallback (a, b);
					    this.output (f);
					    this.b$["org.jmol.appletjs.Jmol"].sendJsTextareaStatus (f);
					}}if (!d || !this.b$["org.jmol.appletjs.Jmol"].mayScript) return;
				    try {
					org.jmol.appletjs.Jmol.sendCallback (f, c, b);
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    if (!this.haveNotifiedError) if (org.jmol.util.Logger.debugging) {
						org.jmol.util.Logger.debug (a.name () + "Callback call error to " + c + ": " + e);
					    }this.haveNotifiedError = true;
					} else {
					    throw e;
					}
				    }
				}, "org.jmol.constant.EnumCallback,~A");
	    Clazz.defineMethod (c$, "output", 
				($fz = function (a) {
				    if (this.b$["org.jmol.appletjs.Jmol"].outputBuffer != null && a != null) this.b$["org.jmol.appletjs.Jmol"].outputBuffer.append (a).appendC ('\n');
				}, $fz.isPrivate = true, $fz), "~S");
	    Clazz.defineMethod (c$, "notifyScriptTermination", 
				($fz = function () {
				}, $fz.isPrivate = true, $fz));
	    Clazz.defineMethod (c$, "notifySync", 
				($fz = function (a, b) {
				    var c = this.b$["org.jmol.appletjs.Jmol"].b$.get (org.jmol.constant.EnumCallback.SYNC);
				    if (!this.b$["org.jmol.appletjs.Jmol"].mayScript || c == null) return a;
				    try {
					{
					    return eval(syncCallback)(this.htmlName, info, appletName);
					}} catch (e) {
					    if (Clazz.exceptionOf (e, Exception)) {
						if (!this.haveNotifiedError) if (org.jmol.util.Logger.debugging) {
						    org.jmol.util.Logger.debug ("syncCallback call error to " + c + ": " + e);
						}this.haveNotifiedError = true;
					    } else {
						throw e;
					    }
					}
				    return a;
				}, $fz.isPrivate = true, $fz), "~S,~S");
	    Clazz.overrideMethod (c$, "setCallbackFunction", 
				  function (a, b) {
				      if (a.equalsIgnoreCase ("modelkit")) return;
				      if (a.equalsIgnoreCase ("language")) {
					  this.consoleMessage ("");
					  this.consoleMessage (null);
					  return;
				      }var c = org.jmol.constant.EnumCallback.getCallback (a);
				      if (c != null && (this.b$["org.jmol.appletjs.Jmol"].loading || c !== org.jmol.constant.EnumCallback.EVAL)) {
					  if (b == null) this.b$["org.jmol.appletjs.Jmol"].b$.remove (c);
					  else this.b$["org.jmol.appletjs.Jmol"].b$.put (c, b);
					  return;
				      }this.consoleMessage ("Available callbacks include: " + org.jmol.constant.EnumCallback.getNameList ().$replace (';', ' ').trim ());
				  }, "~S,~S");
	    Clazz.overrideMethod (c$, "eval", 
				  function (a) {
				      var b = a.indexOf ("\1");
				      if (b >= 0) return this.sendScript (a.substring (b + 1), a.substring (0, b), false, false);
				      if (this.b$["org.jmol.appletjs.Jmol"].b$.get (org.jmol.constant.EnumCallback.EVAL) != null) {
					  this.notifyCallback (org.jmol.constant.EnumCallback.EVAL, [null, a]);
					  return "";
				      }try {
					  {
					      return "" + eval(strEval);
					  }} catch (e) {
					      if (Clazz.exceptionOf (e, Exception)) {
						  org.jmol.util.Logger.error ("# error evaluating " + a + ":" + e.toString ());
					      } else {
						  throw e;
					      }
					  }
				      return "";
				  }, "~S");
	    Clazz.overrideMethod (c$, "createImage", 
				  function (a, b, c, d) {
				      return null;
				  }, "~S,~S,~O,~N");
	    Clazz.overrideMethod (c$, "functionXY", 
				  function (a, b, c) {
				      var d =  Clazz.newFloatArray (Math.abs (b), Math.abs (c), 0);
				      if (!this.b$["org.jmol.appletjs.Jmol"].mayScript || b == 0 || c == 0) return d;
				      try {
					  if (b > 0 && c > 0) {
					      for (var e = 0; e < b; e++) for (var f = 0; f < c; f++) {
						  {
						      fxy[i][j] = eval(functionName)(this.htmlName, i, j);
						  }}

					  } else if (c > 0) {
					      var e;
					      {
						  data = eval(functionName)(this.htmlName, nX, nY);
					      }b = Math.abs (b);
					      var f =  Clazz.newFloatArray (b * c, 0);
					      org.jmol.util.Parser.parseStringInfestedFloatArray (e, null, f);
					      for (var g = 0, h = 0; g < b; g++) {
						  for (var i = 0; i < c; i++, h++) {
						      d[g][i] = f[h];
						  }
					      }
					  } else {
					      {
						  data = eval(functionName)(htmlName, nX, nY, fxy);
					      }}} catch (e) {
						  if (Clazz.exceptionOf (e, Exception)) {
						      org.jmol.util.Logger.error ("Exception " + e.getMessage () + " with nX, nY: " + b + " " + c);
						  } else {
						      throw e;
						  }
					      }
				      return d;
				  }, "~S,~N,~N");
	    Clazz.overrideMethod (c$, "functionXYZ", 
				  function (a, b, c, d) {
				      var e =  Clazz.newFloatArray (Math.abs (b), Math.abs (c), Math.abs (d), 0);
				      if (!this.b$["org.jmol.appletjs.Jmol"].mayScript || b == 0 || c == 0 || d == 0) return e;
				      try {
					  {
					      eval(functionName)(this.htmlName, nX, nY, nZ, fxyz);
					  }} catch (e) {
					      if (Clazz.exceptionOf (e, Exception)) {
						  org.jmol.util.Logger.error ("Exception " + e.getMessage () + " for " + a + " with nX, nY, nZ: " + b + " " + c + " " + d);
					      } else {
						  throw e;
					      }
					  }
				      return e;
				  }, "~S,~N,~N,~N");
	    Clazz.overrideMethod (c$, "showUrl", 
				  function (a) {
				      if (org.jmol.util.Logger.debugging) {
					  org.jmol.util.Logger.debug ("showUrl(" + a + ")");
				      }if (a != null && a.length > 0) {
					  try {
					      var b =  new java.net.URL (Clazz.castNullAs ("java.net.URL"), a, null);
					      {
						  window.open(url);
					      }} catch (mue) {
						  if (Clazz.exceptionOf (mue, java.net.MalformedURLException)) {
						      this.consoleMessage ("Malformed URL:" + a);
						  } else {
						      throw mue;
						  }
					      }
				      }}, "~S");
	    Clazz.defineMethod (c$, "finalize", 
				function () {
				    org.jmol.util.Logger.debug ("MyStatusListener finalize " + this);
				    Clazz.superCall (this, org.jmol.appletjs.Jmol.MyStatusListener, "finalize", []);
				});
	    Clazz.defineMethod (c$, "showStatus", 
				($fz = function (a) {
				    try {
					System.out.println (a);
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					} else {
					    throw e;
					}
				    }
				}, $fz.isPrivate = true, $fz), "~S");
	    Clazz.defineMethod (c$, "consoleMessage", 
				($fz = function (a) {
				    this.notifyCallback (org.jmol.constant.EnumCallback.ECHO, ["", a]);
				}, $fz.isPrivate = true, $fz), "~S");
	    Clazz.defineMethod (c$, "sendScript", 
				($fz = function (a, b, c, d) {
				    if (d) {
					a = this.notifySync (a, b);
					if (a == null || a.length == 0 || a.equals ("0")) return "";
				    }var e =  new java.util.ArrayList ();
				    org.jmol.appletjs.JmolAppletRegistry.findApplets (b, this.b$["org.jmol.appletjs.Jmol"].syncId, this.b$["org.jmol.appletjs.Jmol"].fullName, e);
				    var f = e.size ();
				    if (f == 0) {
					if (!d && !b.equals ("*")) org.jmol.util.Logger.error (this.b$["org.jmol.appletjs.Jmol"].fullName + " couldn't find applet " + b);
					return "";
				    }var g = (c ? null :  new org.jmol.util.StringXBuilder ());
				    var h = (c && a.equals ("GET_GRAPHICS"));
				    var i = (c && a.equals ("SET_GRAPHICS_OFF"));
				    if (h) this.b$["org.jmol.appletjs.Jmol"].gRight = null;
				    for (var j = 0; j < f; j++) {
					var k = e.get (j);
					var l = org.jmol.appletjs.JmolAppletRegistry.htRegistry.get (k);
					var m = (Clazz.instanceOf (l, org.jmol.api.JmolScriptInterface));
					if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug (this.b$["org.jmol.appletjs.Jmol"].fullName + " sending to " + k + ": " + a);
					try {
					    if (m && (h || i)) {
						this.b$["org.jmol.appletjs.Jmol"].gRight = (l).setStereoGraphics (h);
						return "";
					    }if (c) l.syncScript (a);
					    else if (m) g.append ((l).scriptWait (a, "output")).append ("\n");
					} catch (e) {
					    if (Clazz.exceptionOf (e, Exception)) {
						var n = this.b$["org.jmol.appletjs.Jmol"].htmlName + " couldn't send to " + k + ": " + a + ": " + e;
						org.jmol.util.Logger.error (n);
						if (!c) g.append (n);
					    } else {
						throw e;
					    }
					}
				    }
				    return (c ? "" : g.toString ());
				}, $fz.isPrivate = true, $fz), "~S,~S,~B,~B");
	    Clazz.overrideMethod (c$, "getProperty", 
				  function (a) {
				      return null;
				  }, "~S");
	    c$ = Clazz.p0p ();
	};
	Clazz.defineStatics (c$,
			     "SCRIPT_CHECK", 0,
			     "SCRIPT_WAIT", 1,
			     "SCRIPT_NOWAIT", 2);
    });
    // 
    //// org\jmol\appletjs\JmolAppletRegistry.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.appletjs");
    Clazz.load (["java.util.Hashtable"], "org.jmol.appletjs.JmolAppletRegistry", ["org.jmol.util.Logger", "$.TextFormat"], function () {
	c$ = Clazz.declareType (org.jmol.appletjs, "JmolAppletRegistry");
	c$.checkIn = Clazz.defineMethod (c$, "checkIn", 
					 function (name, applet) {
					     org.jmol.appletjs.JmolAppletRegistry.cleanRegistry ();
					     if (name != null) {
						 org.jmol.util.Logger.info ("AppletRegistry.checkIn(" + name + ")");
						 org.jmol.appletjs.JmolAppletRegistry.htRegistry.put (name, applet);
					     }if (org.jmol.util.Logger.debugging) {
						 for (var entry, $entry = org.jmol.appletjs.JmolAppletRegistry.htRegistry.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
						     var theApplet = entry.getKey ();
						     org.jmol.util.Logger.debug (theApplet + " " + entry.getValue ());
						 }
					     }}, "~S,org.jmol.api.JmolSyncInterface");
	c$.checkOut = Clazz.defineMethod (c$, "checkOut", 
					  function (name) {
					      org.jmol.appletjs.JmolAppletRegistry.htRegistry.remove (name);
					  }, "~S");
	c$.findApplets = Clazz.defineMethod (c$, "findApplets", 
					     function (appletName, mySyncId, excludeName, apps) {
						 if (appletName != null && appletName.indexOf (",") >= 0) {
						     var names = org.jmol.util.TextFormat.split (appletName, ',');
						     for (var i = 0; i < names.length; i++) org.jmol.appletjs.JmolAppletRegistry.findApplets (names[i], mySyncId, excludeName, apps);

						     return;
						 }var ext = "__" + mySyncId + "__";
						 if (appletName == null || appletName.equals ("*") || appletName.equals (">")) {
						     for (var appletName2, $appletName2 = org.jmol.appletjs.JmolAppletRegistry.htRegistry.keySet ().iterator (); $appletName2.hasNext () && ((appletName2 = $appletName2.next ()) || true);) {
							 if (!appletName2.equals (excludeName) && appletName2.indexOf (ext) > 0) {
							     apps.add (appletName2);
							 }}
						     return;
						 }if (appletName.indexOf ("__") < 0) appletName += ext;
						 if (!org.jmol.appletjs.JmolAppletRegistry.htRegistry.containsKey (appletName)) appletName = "jmolApplet" + appletName;
						 if (!appletName.equals (excludeName) && org.jmol.appletjs.JmolAppletRegistry.htRegistry.containsKey (appletName)) {
						     apps.add (appletName);
						 }}, "~S,~S,~S,java.util.List");
	c$.cleanRegistry = Clazz.defineMethod (c$, "cleanRegistry", 
					       ($fz = function () {
					       }, $fz.isPrivate = true, $fz));
	c$.htRegistry = c$.prototype.htRegistry =  new java.util.Hashtable ();
    });
    // 
    //// java\lang\Enum.js 
    // 
    ﻿$_L(null,"java.lang.Enum",["java.lang.CloneNotSupportedException","$.IllegalArgumentException","$.NullPointerException","java.security.AccessController","$.PrivilegedExceptionAction","org.apache.harmony.luni.util.Msg"],function(){
	c$=$_C(function(){
	    this.$name=null;
	    this.$ordinal=0;
	    $_Z(this,arguments);
	},java.lang,"Enum",null,[java.io.Serializable,Comparable]);
	$_K(c$,
	    function(name,ordinal){
		this.$name=name;
		this.$ordinal=ordinal;
	    },"~S,~N");
	$_M(c$,"name",
	    function(){
		return this.$name;
	    });
	$_M(c$,"ordinal",
	    function(){
		return this.$ordinal;
	    });
	$_V(c$,"toString",
	    function(){
		return this.$name;
	    });
	$_V(c$,"equals",
	    function(other){
		return this===other;
	    },"~O");
	$_V(c$,"hashCode",
	    function(){
		return this.$ordinal+(this.$name==null?0:this.$name.hashCode());
	    });
	$_V(c$,"clone",
	    function(){
		throw new CloneNotSupportedException(org.apache.harmony.luni.util.Msg.getString("KA004"));
	    });
	$_V(c$,"compareTo",
	    function(o){
		return this.$ordinal-o.$ordinal;
	    },"~O");
	$_M(c$,"getDeclaringClass",
	    function(){
		var myClass=this.getClass();
		var mySuperClass=myClass.getSuperclass();
		if(Enum===mySuperClass){
		    return myClass;
		}return mySuperClass;
	    });
	c$.$valueOf=$_M(c$,"$valueOf",
			function(enumType,name){
			    if((enumType==null)||(name==null)){
				throw new NullPointerException(org.apache.harmony.luni.util.Msg.getString("KA001"));
			    }var values=Enum.getValues(enumType);
			    if(values==null){
				throw new IllegalArgumentException(org.apache.harmony.luni.util.Msg.getString("KA005",enumType));
			    }for(var enumConst,$enumConst=0,$$enumConst=values;$enumConst<$$enumConst.length&&((enumConst=$$enumConst[$enumConst])||true);$enumConst++){
				if(enumConst.$name.equals(name)){
				    return enumConst;
				}}
			    throw new IllegalArgumentException(org.apache.harmony.luni.util.Msg.getString("KA006",name,enumType));
			},"Class,~S");
	c$.getValues=$_M(c$,"getValues",
			 function(enumType){
			     try{
				 var values=java.security.AccessController.doPrivileged((($_D("Enum$1")?0:java.lang.Enum.$Enum$1$()),$_N(Enum$1,this,$_F("enumType",enumType))));
				 return values.invoke(enumType,Clazz.castNullAs("Array"));
			     }catch(e){
				 if($_O(e,Exception)){
				     return null;
				 }else{
				     throw e;
				 }
			     }
			 },"Class");
	c$.$Enum$1$=function(){
	    $_H();
	    c$=$_W(null,"Enum$1",null,java.security.PrivilegedExceptionAction);
	    $_V(c$,"run",
		function(){
		    var valsMethod=this.f$.enumType.getMethod("values",null);
		    valsMethod.setAccessible(true);
		    return valsMethod;
		});
	    c$=$_P();
	};
    });
    // 
    //// org\jmol\constant\EnumCallback.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumCallback", ["org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.declareType (org.jmol.constant, "EnumCallback", Enum);
	c$.getCallback = Clazz.defineMethod (c$, "getCallback", 
					     function (name) {
						 name = name.toUpperCase ();
						 name = name.substring (0, Math.max (name.indexOf ("CALLBACK"), 0));
						 for (var item, $item = 0, $$item = org.jmol.constant.EnumCallback.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.name ().equalsIgnoreCase (name)) return item;

						 return null;
					     }, "~S");
	c$.getNameList = Clazz.defineMethod (c$, "getNameList", 
					     function () {
						 if (org.jmol.constant.EnumCallback.nameList == null) {
						     var names =  new org.jmol.util.StringXBuilder ();
						     for (var item, $item = 0, $$item = org.jmol.constant.EnumCallback.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) names.append (item.name ().toLowerCase ()).append ("Callback;");

						     ($t$ = org.jmol.constant.EnumCallback.nameList = names.toString (), org.jmol.constant.EnumCallback.prototype.nameList = org.jmol.constant.EnumCallback.nameList, $t$);
						 }return org.jmol.constant.EnumCallback.nameList;
					     });
	c$.nameList = null;
	Clazz.defineEnumConstant (c$, "ANIMFRAME", 0, []);
	Clazz.defineEnumConstant (c$, "APPLETREADY", 1, []);
	Clazz.defineEnumConstant (c$, "ATOMMOVED", 2, []);
	Clazz.defineEnumConstant (c$, "CLICK", 3, []);
	Clazz.defineEnumConstant (c$, "ECHO", 4, []);
	Clazz.defineEnumConstant (c$, "ERROR", 5, []);
	Clazz.defineEnumConstant (c$, "EVAL", 6, []);
	Clazz.defineEnumConstant (c$, "HOVER", 7, []);
	Clazz.defineEnumConstant (c$, "LOADSTRUCT", 8, []);
	Clazz.defineEnumConstant (c$, "MEASURE", 9, []);
	Clazz.defineEnumConstant (c$, "MESSAGE", 10, []);
	Clazz.defineEnumConstant (c$, "MINIMIZATION", 11, []);
	Clazz.defineEnumConstant (c$, "PICK", 12, []);
	Clazz.defineEnumConstant (c$, "RESIZE", 13, []);
	Clazz.defineEnumConstant (c$, "SCRIPT", 14, []);
	Clazz.defineEnumConstant (c$, "SYNC", 15, []);
    });
    // 
    //// org\jmol\i18n\GT.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.i18n");
    Clazz.load (null, "org.jmol.i18n.GT", ["java.text.MessageFormat"], function () {
	c$ = Clazz.declareType (org.jmol.i18n, "GT");
	Clazz.makeConstructor (c$, 
			       function (la) {
			       }, "~S");
	c$.getLanguage = Clazz.defineMethod (c$, "getLanguage", 
					     function () {
						 return "en_US";
					     });
	c$.ignoreApplicationBundle = Clazz.defineMethod (c$, "ignoreApplicationBundle", 
							 function () {
							 });
	c$.setDoTranslate = Clazz.defineMethod (c$, "setDoTranslate", 
						function (TF) {
						}, "~B");
	c$.getDoTranslate = Clazz.defineMethod (c$, "getDoTranslate", 
						function () {
						    return false;
						});
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string) {
				       return string;
				   }, "~S");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, item) {
				       return org.jmol.i18n.GT.getString (string, [item]);
				   }, "~S,~S");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, item) {
				       return org.jmol.i18n.GT.getString (string, [Integer.$valueOf (item)]);
				   }, "~S,~N");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, objects) {
				       return org.jmol.i18n.GT.getString (string, objects);
				   }, "~S,~A");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, t) {
				       return string;
				   }, "~S,~B");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, item, t) {
				       return org.jmol.i18n.GT.getString (string, [item]);
				   }, "~S,~S,~B");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, item, t) {
				       return org.jmol.i18n.GT.getString (string, [Integer.$valueOf (item)]);
				   }, "~S,~N,~B");
	c$._ = Clazz.defineMethod (c$, "_", 
				   function (string, objects, t) {
				       return (objects == null ? string : org.jmol.i18n.GT.getString (string, objects));
				   }, "~S,~A,~B");
	c$.getString = Clazz.defineMethod (c$, "getString", 
					   ($fz = function (string, objects) {
					       return java.text.MessageFormat.format (string, objects);
					   }, $fz.isPrivate = true, $fz), "~S,~A");
    });
    // 
    //// org\jmol\util\Escape.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Escape", ["java.lang.Character", "$.Float", "java.util.ArrayList", "org.jmol.script.ScriptVariable", "org.jmol.util.BitSetUtil", "$.Matrix3f", "$.Matrix4f", "$.Parser", "$.Point3f", "$.Point4f", "$.StringXBuilder", "$.TextFormat"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Escape");
	c$.escapeColor = Clazz.defineMethod (c$, "escapeColor", 
					     function (argb) {
						 return "[x" + org.jmol.util.Escape.getHexColorFromRGB (argb) + "]";
					     }, "~N");
	c$.getHexColorFromRGB = Clazz.defineMethod (c$, "getHexColorFromRGB", 
						    function (argb) {
							if (argb == 0) return null;
							var r = "00" + Integer.toHexString ((argb >> 16) & 0xFF);
							r = r.substring (r.length - 2);
							var g = "00" + Integer.toHexString ((argb >> 8) & 0xFF);
							g = g.substring (g.length - 2);
							var b = "00" + Integer.toHexString (argb & 0xFF);
							b = b.substring (b.length - 2);
							return r + g + b;
						    }, "~N");
	c$.escapePt = Clazz.defineMethod (c$, "escapePt", 
					  function (xyz) {
					      if (xyz == null) return "null";
					      return "{" + xyz.x + " " + xyz.y + " " + xyz.z + "}";
					  }, "org.jmol.util.Tuple3f");
	c$.matrixToScript = Clazz.defineMethod (c$, "matrixToScript", 
						function (m) {
						    return org.jmol.util.TextFormat.replaceAllCharacters (m.toString (), "\n\r ", "").$replace ('\t', ' ');
						}, "~O");
	c$.escape = Clazz.defineMethod (c$, "escape", 
					function (x) {
					    if (Clazz.instanceOf (x, String)) return org.jmol.util.Escape.escapeStr (x);
					    if (Clazz.instanceOf (x, java.util.List)) return org.jmol.util.Escape.escapeVar (x);
					    if (Clazz.instanceOf (x, org.jmol.util.BitSet)) return org.jmol.util.Escape.escapeBs (x, true);
					    if (Clazz.instanceOf (x, org.jmol.util.Matrix3f)) return org.jmol.util.TextFormat.simpleReplace ((x).toString (), "\t", ",\t");
					    if (Clazz.instanceOf (x, org.jmol.util.Matrix4f)) return org.jmol.util.TextFormat.simpleReplace ((x).toString (), "\t", ",\t");
					    if (Clazz.instanceOf (x, org.jmol.util.Tuple3f)) return org.jmol.util.Escape.escapePt (x);
					    if (Clazz.instanceOf (x, org.jmol.util.Point4f)) {
						var xyzw = x;
						return "{" + xyzw.x + " " + xyzw.y + " " + xyzw.z + " " + xyzw.w + "}";
					    }if (Clazz.instanceOf (x, org.jmol.util.AxisAngle4f)) {
						var a = x;
						return "{" + a.x + " " + a.y + " " + a.z + " " + (a.angle * 180 / 3.141592653589793) + "}";
					    }if (Clazz.instanceOf (x, java.util.Map)) return org.jmol.util.Escape.escapeMap (x);
					    if (org.jmol.util.Escape.isAS (x)) return org.jmol.util.Escape.escapeStrA (x, true);
					    if (org.jmol.util.Escape.isAP (x)) return org.jmol.util.Escape.escapeAP (x);
					    if (Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array)) return org.jmol.util.Escape.toJSON (null, x);
					    return (x == null ? "null" : x.toString ());
					}, "~O");
	c$.isAS = Clazz.defineMethod (c$, "isAS", 
				      function (x) {
					  {
					      return Clazz.isAS(x);
					  }}, "~O");
	c$.isASS = Clazz.defineMethod (c$, "isASS", 
				       function (x) {
					   {
					       return Clazz.isASS(x);
					   }}, "~O");
	c$.isAP = Clazz.defineMethod (c$, "isAP", 
				      function (x) {
					  {
					      return Clazz.isAP(x);
					  }}, "~O");
	c$.isAF = Clazz.defineMethod (c$, "isAF", 
				      function (x) {
					  return Clazz.instanceOf (x, Array);
				      }, "~O");
	c$.isAFloat = Clazz.defineMethod (c$, "isAFloat", 
					  function (x) {
					      return Clazz.instanceOf (x, Array);
					  }, "~O");
	c$.isAV = Clazz.defineMethod (c$, "isAV", 
				      function (x) {
					  return Clazz.instanceOf (x, Array);
				      }, "~O");
	c$.isAD = Clazz.defineMethod (c$, "isAD", 
				      function (x) {
					  return Clazz.instanceOf (x, Array);
				      }, "~O");
	c$.isAB = Clazz.defineMethod (c$, "isAB", 
				      function (x) {
					  return Clazz.instanceOf (x, Array);
				      }, "~O");
	c$.isAI = Clazz.defineMethod (c$, "isAI", 
				      function (x) {
					  return Clazz.instanceOf (x, Array);
				      }, "~O");
	c$.isAII = Clazz.defineMethod (c$, "isAII", 
				       function (x) {
					   {
					       return Clazz.isAII(x);
					   }}, "~O");
	c$.isAFF = Clazz.defineMethod (c$, "isAFF", 
				       function (x) {
					   {
					       return Clazz.isAFF(x);
					   }}, "~O");
	c$.isAFFF = Clazz.defineMethod (c$, "isAFFF", 
					function (x) {
					    {
						return Clazz.isAFFF(x);
					    }}, "~O");
	c$.escapeStr = Clazz.defineMethod (c$, "escapeStr", 
					   function (str) {
					       if (str == null) return "\"\"";
					       var haveEscape = false;
					       var i = 0;
					       for (; i < "\\\\\tt\rr\nn\"\"".length; i += 2) if (str.indexOf ("\\\\\tt\rr\nn\"\"".charAt (i)) >= 0) {
						   haveEscape = true;
						   break;
					       }
					       if (haveEscape) while (i < "\\\\\tt\rr\nn\"\"".length) {
						   var pt = -1;
						   var ch = "\\\\\tt\rr\nn\"\"".charAt (i++);
						   var ch2 = "\\\\\tt\rr\nn\"\"".charAt (i++);
						   var sb =  new org.jmol.util.StringXBuilder ();
						   var pt0 = 0;
						   while ((pt = str.indexOf (ch, pt + 1)) >= 0) {
						       sb.append (str.substring (pt0, pt)).appendC ('\\').appendC (ch2);
						       pt0 = pt + 1;
						   }
						   sb.append (str.substring (pt0, str.length));
						   str = sb.toString ();
					       }
					       for (i = str.length; --i >= 0; ) if (str.charCodeAt (i) > 0x7F) str = str.substring (0, i) + org.jmol.util.Escape.unicode (str.charAt (i)) + str.substring (i + 1);

					       return "\"" + str + "\"";
					   }, "~S");
	c$.unicode = Clazz.defineMethod (c$, "unicode", 
					 ($fz = function (c) {
					     var s = "0000" + Integer.toHexString (c.charCodeAt (0));
					     return "\\u" + s.substring (s.length - 4);
					 }, $fz.isPrivate = true, $fz), "~S");
	c$.escapeVar = Clazz.defineMethod (c$, "escapeVar", 
					   function (list) {
					       if (list == null) return org.jmol.util.Escape.escapeStr ("");
					       var s =  new org.jmol.util.StringXBuilder ();
					       s.append ("[");
					       for (var i = 0; i < list.size (); i++) {
						   if (i > 0) s.append (", ");
						   s.append (org.jmol.util.Escape.escapeNice (list.get (i).asString ()));
					       }
					       s.append ("]");
					       return s.toString ();
					   }, "java.util.ArrayList");
	c$.escapeMap = Clazz.defineMethod (c$, "escapeMap", 
					   function (ht) {
					       var sb =  new org.jmol.util.StringXBuilder ();
					       sb.append ("{ ");
					       var sep = "";
					       for (var entry, $entry = ht.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
						   var key = entry.getKey ();
						   sb.append (sep).append (org.jmol.util.Escape.escapeStr (key)).appendC (':');
						   var val = entry.getValue ();
						   if (!(Clazz.instanceOf (val, org.jmol.script.ScriptVariable))) val = org.jmol.script.ScriptVariable.getVariable (val);
						   sb.append ((val).escape ());
						   sep = ",";
					       }
					       sb.append (" }");
					       return sb.toString ();
					   }, "java.util.Map");
	c$.escapeFloatA = Clazz.defineMethod (c$, "escapeFloatA", 
					      function (f, asArray) {
						  if (asArray) return org.jmol.util.Escape.toJSON (null, f);
						  var sb =  new org.jmol.util.StringXBuilder ();
						  for (var i = 0; i < f.length; i++) {
						      if (i > 0) sb.appendC ('\n');
						      sb.appendF (f[i]);
						  }
						  return sb.toString ();
					      }, "~A,~B");
	c$.escapeFloatAA = Clazz.defineMethod (c$, "escapeFloatAA", 
					       function (f, addSemi) {
						   var sb =  new org.jmol.util.StringXBuilder ();
						   var eol = (addSemi ? ";\n" : "\n");
						   for (var i = 0; i < f.length; i++) if (f[i] != null) {
						       if (i > 0) sb.append (eol);
						       for (var j = 0; j < f[i].length; j++) sb.appendF (f[i][j]).appendC ('\t');

						   }
						   return sb.toString ();
					       }, "~A,~B");
	c$.escapeFloatAAA = Clazz.defineMethod (c$, "escapeFloatAAA", 
						function (f, addSemi) {
						    var sb =  new org.jmol.util.StringXBuilder ();
						    var eol = (addSemi ? ";\n" : "\n");
						    if (f[0] == null || f[0][0] == null) return "0 0 0" + eol;
						    sb.appendI (f.length).append (" ").appendI (f[0].length).append (" ").appendI (f[0][0].length);
						    for (var i = 0; i < f.length; i++) if (f[i] != null) {
							sb.append (eol);
							for (var j = 0; j < f[i].length; j++) if (f[i][j] != null) {
							    sb.append (eol);
							    for (var k = 0; k < f[i][j].length; k++) sb.appendF (f[i][j][k]).appendC ('\t');

							}
						    }
						    return sb.toString ();
						}, "~A,~B");
	c$.escapeStrA = Clazz.defineMethod (c$, "escapeStrA", 
					    function (list, nicely) {
						if (list == null) return org.jmol.util.Escape.escapeStr ("");
						var s =  new org.jmol.util.StringXBuilder ();
						s.append ("[");
						for (var i = 0; i < list.length; i++) {
						    if (i > 0) s.append (", ");
						    s.append (nicely ? org.jmol.util.Escape.escapeNice (list[i]) : org.jmol.util.Escape.escapeStr (list[i]));
						}
						s.append ("]");
						return s.toString ();
					    }, "~A,~B");
	c$.escapeAI = Clazz.defineMethod (c$, "escapeAI", 
					  function (x) {
					      if (x == null) return org.jmol.util.Escape.escapeStr ("");
					      var s =  new org.jmol.util.StringXBuilder ();
					      s.append ("[");
					      var ilist = x;
					      for (var i = 0; i < ilist.length; i++) {
						  if (i > 0) s.append (", ");
						  s.appendI (ilist[i]);
					      }
					      return s.append ("]").toString ();
					  }, "~O");
	c$.escapeAF = Clazz.defineMethod (c$, "escapeAF", 
					  function (x) {
					      if (x == null) return org.jmol.util.Escape.escapeStr ("");
					      var s =  new org.jmol.util.StringXBuilder ();
					      s.append ("[");
					      var flist = x;
					      for (var i = 0; i < flist.length; i++) {
						  if (i > 0) s.append (", ");
						  s.appendF (flist[i]);
					      }
					      return s.append ("]").toString ();
					  }, "~O");
	c$.escapeAP = Clazz.defineMethod (c$, "escapeAP", 
					  function (x) {
					      if (x == null) return org.jmol.util.Escape.escapeStr ("");
					      var s =  new org.jmol.util.StringXBuilder ();
					      s.append ("[");
					      var plist = x;
					      for (var i = 0; i < plist.length; i++) {
						  if (i > 0) s.append (", ");
						  s.append (org.jmol.util.Escape.escapePt (plist[i]));
					      }
					      return s.append ("]").toString ();
					  }, "~O");
	c$.escapeNice = Clazz.defineMethod (c$, "escapeNice", 
					    ($fz = function (s) {
						if (s == null) return "null";
						var f = org.jmol.util.Parser.parseFloatStrict (s);
						return (Float.isNaN (f) ? org.jmol.util.Escape.escapeStr (s) : s);
					    }, $fz.isPrivate = true, $fz), "~S");
	c$.unescapePointOrBitsetOrMatrixOrArray = Clazz.defineMethod (c$, "unescapePointOrBitsetOrMatrixOrArray", 
								      function (s) {
									  if (s.charAt (0) == '{') return org.jmol.util.Escape.unescapePoint (s);
									  if ((org.jmol.util.Escape.isStringArray (s) || s.startsWith ("[{") && s.indexOf ("[{") == s.lastIndexOf ("[{")) && s.indexOf (',') < 0 && s.indexOf ('.') < 0 && s.indexOf ('-') < 0) return org.jmol.util.Escape.unescapeBitset (s);
									  if (s.startsWith ("[[")) return org.jmol.util.Escape.unescapeMatrix (s);
									  return s;
								      }, "~S");
	c$.isStringArray = Clazz.defineMethod (c$, "isStringArray", 
					       function (s) {
						   return s.startsWith ("({") && s.lastIndexOf ("({") == 0 && s.indexOf ("})") == s.length - 2;
					       }, "~S");
	c$.unescapePoint = Clazz.defineMethod (c$, "unescapePoint", 
					       function (strPoint) {
						   if (strPoint == null || strPoint.length == 0) return strPoint;
						   var str = strPoint.$replace ('\n', ' ').trim ();
						   if (str.charAt (0) != '{' || str.charAt (str.length - 1) != '}') return strPoint;
						   var points =  Clazz.newFloatArray (5, 0);
						   var nPoints = 0;
						   str = str.substring (1, str.length - 1);
						   var next =  Clazz.newIntArray (1, 0);
						   for (; nPoints < 5; nPoints++) {
						       points[nPoints] = org.jmol.util.Parser.parseFloatNext (str, next);
						       if (Float.isNaN (points[nPoints])) {
							   if (next[0] >= str.length || str.charAt (next[0]) != ',') break;
							   next[0]++;
							   nPoints--;
						       }}
						   if (nPoints == 3) return org.jmol.util.Point3f.new3 (points[0], points[1], points[2]);
						   if (nPoints == 4) return org.jmol.util.Point4f.new4 (points[0], points[1], points[2], points[3]);
						   return strPoint;
					       }, "~S");
	c$.unescapeBitset = Clazz.defineMethod (c$, "unescapeBitset", 
						function (str) {
						    var ch;
						    var len;
						    if (str == null || (len = (str = str.trim ()).length) < 4 || str.equalsIgnoreCase ("({null})") || (ch = str.charAt (0)) != '(' && ch != '[' || str.charAt (len - 1) != (ch == '(' ? ')' : ']') || str.charAt (1) != '{' || str.indexOf ('}') != len - 2) return null;
						    len -= 2;
						    for (var i = len; --i >= 2; ) if (!Character.isDigit (ch = str.charAt (i)) && ch != ' ' && ch != '\t' && ch != ':') return null;

						    var lastN = len;
						    while (Character.isDigit (str.charAt (--lastN))) {
						    }
						    if (++lastN == len) lastN = 0;
						    else try {
							lastN = Integer.parseInt (str.substring (lastN, len));
						    } catch (e) {
							if (Clazz.exceptionOf (e, NumberFormatException)) {
							    return null;
							} else {
							    throw e;
							}
						    }
						    var bs = org.jmol.util.BitSetUtil.newBitSet (lastN);
						    lastN = -1;
						    var iPrev = -1;
						    var iThis = -2;
						    for (var i = 2; i <= len; i++) {
							switch (ch = str.charAt (i)) {
							case '\t':
							case ' ':
							case '}':
							    if (iThis < 0) break;
							    if (iThis < lastN) return null;
							    lastN = iThis;
							    if (iPrev < 0) iPrev = iThis;
							    bs.setBits (iPrev, iThis + 1);
							    iPrev = -1;
							    iThis = -2;
							    break;
							case ':':
							    iPrev = lastN = iThis;
							    iThis = -2;
							    break;
							default:
							    if (Character.isDigit (ch)) {
								if (iThis < 0) iThis = 0;
								iThis = (iThis << 3) + (iThis << 1) + (ch.charCodeAt (0) - 48);
							    }}
						    }
						    return (iPrev >= 0 ? null : bs);
						}, "~S");
	c$.unescapeMatrix = Clazz.defineMethod (c$, "unescapeMatrix", 
						function (strMatrix) {
						    if (strMatrix == null || strMatrix.length == 0) return strMatrix;
						    var str = strMatrix.$replace ('\n', ' ').trim ();
						    if (str.lastIndexOf ("[[") != 0 || str.indexOf ("]]") != str.length - 2) return strMatrix;
						    var points =  Clazz.newFloatArray (16, 0);
						    str = str.substring (2, str.length - 2).$replace ('[', ' ').$replace (']', ' ').$replace (',', ' ');
						    var next =  Clazz.newIntArray (1, 0);
						    var nPoints = 0;
						    for (; nPoints < 16; nPoints++) {
							points[nPoints] = org.jmol.util.Parser.parseFloatNext (str, next);
							if (Float.isNaN (points[nPoints])) {
							    break;
							}}
						    if (!Float.isNaN (org.jmol.util.Parser.parseFloatNext (str, next))) return strMatrix;
						    if (nPoints == 9) return org.jmol.util.Matrix3f.newA (points);
						    if (nPoints == 16) return org.jmol.util.Matrix4f.newA (points);
						    return strMatrix;
						}, "~S");
	c$.escapeBs = Clazz.defineMethod (c$, "escapeBs", 
					  function (bs, isAtoms) {
					      var chOpen = (isAtoms ? '(' : '[');
					      var chClose = (isAtoms ? ')' : ']');
					      if (bs == null) return chOpen + "{}" + chClose;
					      var s =  new org.jmol.util.StringXBuilder ();
					      s.append (chOpen + "{");
					      var imax = bs.length ();
					      var iLast = -1;
					      var iFirst = -2;
					      var i = -1;
					      while (++i <= imax) {
						  var isSet = bs.get (i);
						  if (i == imax || iLast >= 0 && !isSet) {
						      if (iLast >= 0 && iFirst != iLast) s.append ((iFirst == iLast - 1 ? " " : ":") + iLast);
						      if (i == imax) break;
						      iLast = -1;
						  }if (bs.get (i)) {
						      if (iLast < 0) {
							  s.append ((iFirst == -2 ? "" : " ") + i);
							  iFirst = i;
						      }iLast = i;
						  }}
					      s.append ("}").appendC (chClose);
					      return s.toString ();
					  }, "org.jmol.util.BitSet,~B");
	c$.packageJSONSb = Clazz.defineMethod (c$, "packageJSONSb", 
					       ($fz = function (infoType, sb) {
						   return org.jmol.util.Escape.packageJSON (infoType, sb.toString ());
					       }, $fz.isPrivate = true, $fz), "~S,org.jmol.util.StringXBuilder");
	c$.packageJSON = Clazz.defineMethod (c$, "packageJSON", 
					     ($fz = function (infoType, info) {
						 if (infoType == null) return info;
						 return "\"" + infoType + "\": " + info;
					     }, $fz.isPrivate = true, $fz), "~S,~S");
	c$.fixString = Clazz.defineMethod (c$, "fixString", 
					   ($fz = function (s) {
					       if (s == null || s.indexOf ("{\"") == 0) return s;
					       s = org.jmol.util.TextFormat.simpleReplace (s, "\"", "''");
					       s = org.jmol.util.TextFormat.simpleReplace (s, "\n", " | ");
					       return "\"" + s + "\"";
					   }, $fz.isPrivate = true, $fz), "~S");
	c$.toJSON = Clazz.defineMethod (c$, "toJSON", 
					function (infoType, info) {
					    var sb =  new org.jmol.util.StringXBuilder ();
					    var sep = "";
					    if (info == null) return org.jmol.util.Escape.packageJSON (infoType, Clazz.castNullAs ("String"));
					    if (Clazz.instanceOf (info, Integer) || Clazz.instanceOf (info, Float) || Clazz.instanceOf (info, Double)) return org.jmol.util.Escape.packageJSON (infoType, info.toString ());
					    if (Clazz.instanceOf (info, String)) return org.jmol.util.Escape.packageJSON (infoType, org.jmol.util.Escape.fixString (info));
					    if (org.jmol.util.Escape.isAS (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).append (org.jmol.util.Escape.fixString ((info)[i]));
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAI (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).appendI ((info)[i]);
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAF (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).appendF ((info)[i]);
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAD (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).appendD ((info)[i]);
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAP (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep);
						    org.jmol.util.Escape.addJsonTuple (sb, (info)[i]);
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isASS (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).append (org.jmol.util.Escape.toJSON (null, (info)[i]));
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAII (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).append (org.jmol.util.Escape.toJSON (null, (info)[i]));
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAFF (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).append (org.jmol.util.Escape.toJSON (null, (info)[i]));
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (org.jmol.util.Escape.isAFFF (info)) {
						sb.append ("[");
						var imax = (info).length;
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).append (org.jmol.util.Escape.toJSON (null, (info)[i]));
						    sep = ",";
						}
						sb.append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, java.util.List)) {
						sb.append ("[ ");
						var imax = (info).size ();
						for (var i = 0; i < imax; i++) {
						    sb.append (sep).append (org.jmol.util.Escape.toJSON (null, (info).get (i)));
						    sep = ",";
						}
						sb.append (" ]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, org.jmol.util.Matrix4f)) {
						var x =  Clazz.newFloatArray (4, 0);
						var m4 = info;
						sb.appendC ('[');
						for (var i = 0; i < 4; i++) {
						    if (i > 0) sb.appendC (',');
						    m4.getRow (i, x);
						    sb.append (org.jmol.util.Escape.toJSON (null, x));
						}
						sb.appendC (']');
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, org.jmol.util.Matrix3f)) {
						var x =  Clazz.newFloatArray (3, 0);
						var m3 = info;
						sb.appendC ('[');
						for (var i = 0; i < 3; i++) {
						    if (i > 0) sb.appendC (',');
						    m3.getRow (i, x);
						    sb.append (org.jmol.util.Escape.toJSON (null, x));
						}
						sb.appendC (']');
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, org.jmol.util.Tuple3f)) {
						org.jmol.util.Escape.addJsonTuple (sb, info);
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, org.jmol.util.AxisAngle4f)) {
						sb.append ("[").appendF ((info).x).append (",").appendF ((info).y).append (",").appendF ((info).z).append (",").appendF (((info).angle * 180 / 3.141592653589793)).append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, org.jmol.util.Point4f)) {
						sb.append ("[").appendF ((info).x).append (",").appendF ((info).y).append (",").appendF ((info).z).append (",").appendF ((info).w).append ("]");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }if (Clazz.instanceOf (info, java.util.Map)) {
						sb.append ("{ ");
						var e = (info).keySet ().iterator ();
						while (e.hasNext ()) {
						    var key = e.next ();
						    sb.append (sep).append (org.jmol.util.Escape.packageJSON (key, org.jmol.util.Escape.toJSON (null, (info).get (key))));
						    sep = ",";
						}
						sb.append (" }");
						return org.jmol.util.Escape.packageJSONSb (infoType, sb);
					    }return org.jmol.util.Escape.packageJSON (infoType, org.jmol.util.Escape.fixString (info.toString ()));
					}, "~S,~O");
	c$.addJsonTuple = Clazz.defineMethod (c$, "addJsonTuple", 
					      ($fz = function (sb, pt) {
						  sb.append ("[").appendF (pt.x).append (",").appendF (pt.y).append (",").appendF (pt.z).append ("]");
					      }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,org.jmol.util.Tuple3f");
	c$.toReadable = Clazz.defineMethod (c$, "toReadable", 
					    function (name, info) {
						var sb =  new org.jmol.util.StringXBuilder ();
						var sep = "";
						if (info == null) return "null";
						if (Clazz.instanceOf (info, String)) return org.jmol.util.Escape.packageReadable (name, null, org.jmol.util.Escape.escapeStr (info));
						if (org.jmol.util.Escape.isAS (info)) {
						    sb.append ("[");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).append (org.jmol.util.Escape.escapeStr ((info)[i]));
							sep = ",";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "String[" + imax + "]", sb);
						}if (org.jmol.util.Escape.isAI (info)) {
						    sb.append ("[");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).appendI ((info)[i]);
							sep = ",";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "int[" + imax + "]", sb);
						}if (org.jmol.util.Escape.isAF (info)) {
						    sb.append ("[");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).appendF ((info)[i]);
							sep = ",";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "float[" + imax + "]", sb);
						}if (org.jmol.util.Escape.isAP (info)) {
						    sb.append ("[");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).append (org.jmol.util.Escape.escapePt ((info)[i]));
							sep = ",";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "point3f[" + imax + "]", sb);
						}if (org.jmol.util.Escape.isASS (info)) {
						    sb.append ("[");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).append (org.jmol.util.Escape.toReadable (null, (info)[i]));
							sep = ",\n";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "String[" + imax + "][]", sb);
						}if (org.jmol.util.Escape.isAII (info)) {
						    sb.append ("[");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).append (org.jmol.util.Escape.toReadable (null, (info)[i]));
							sep = ",";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "int[" + imax + "][]", sb);
						}if (org.jmol.util.Escape.isAFF (info)) {
						    sb.append ("[\n");
						    var imax = (info).length;
						    for (var i = 0; i < imax; i++) {
							sb.append (sep).append (org.jmol.util.Escape.toReadable (null, (info)[i]));
							sep = ",\n";
						    }
						    sb.append ("]");
						    return org.jmol.util.Escape.packageReadableSb (name, "float[][]", sb);
						}if (Clazz.instanceOf (info, java.util.List)) {
						    var imax = (info).size ();
						    for (var i = 0; i < imax; i++) {
							sb.append (org.jmol.util.Escape.toReadable (name + "[" + (i + 1) + "]", (info).get (i)));
						    }
						    return org.jmol.util.Escape.packageReadableSb (name, "List[" + imax + "]", sb);
						}if (Clazz.instanceOf (info, org.jmol.util.Matrix3f) || Clazz.instanceOf (info, org.jmol.util.Tuple3f) || Clazz.instanceOf (info, org.jmol.util.Point4f) || Clazz.instanceOf (info, org.jmol.util.AxisAngle4f)) {
						    sb.append (org.jmol.util.Escape.escape (info));
						    return org.jmol.util.Escape.packageReadableSb (name, null, sb);
						}if (Clazz.instanceOf (info, java.util.Map)) {
						    var e = (info).keySet ().iterator ();
						    while (e.hasNext ()) {
							var key = e.next ();
							sb.append (org.jmol.util.Escape.toReadable ((name == null ? "" : name + ".") + key, (info).get (key)));
						    }
						    return sb.toString ();
						}return org.jmol.util.Escape.packageReadable (name, null, info.toString ());
					    }, "~S,~O");
	c$.packageReadableSb = Clazz.defineMethod (c$, "packageReadableSb", 
						   ($fz = function (infoName, infoType, sb) {
						       return org.jmol.util.Escape.packageReadable (infoName, infoType, sb.toString ());
						   }, $fz.isPrivate = true, $fz), "~S,~S,org.jmol.util.StringXBuilder");
	c$.packageReadable = Clazz.defineMethod (c$, "packageReadable", 
						 ($fz = function (infoName, infoType, info) {
						     var s = (infoType == null ? "" : infoType + "\t");
						     if (infoName == null) return s + info;
						     return "\n" + infoName + "\t" + (infoType == null ? "" : "*" + infoType + "\t") + info;
						 }, $fz.isPrivate = true, $fz), "~S,~S,~S");
	c$.escapeModelFileNumber = Clazz.defineMethod (c$, "escapeModelFileNumber", 
						       function (iv) {
							   return "" + (Clazz.doubleToInt (iv / 1000000)) + "." + (iv % 1000000);
						       }, "~N");
	c$.encapsulateData = Clazz.defineMethod (c$, "encapsulateData", 
						 function (name, data, depth) {
						     return "  DATA \"" + name + "\"\n" + (depth == 2 ? org.jmol.util.Escape.escapeFloatAA (data, true) + ";\n" : depth == 3 ? org.jmol.util.Escape.escapeFloatAAA (data, true) + ";\n" : data) + "    END \"" + name + "\";\n";
						 }, "~S,~O,~N");
	c$.unescapeUnicode = Clazz.defineMethod (c$, "unescapeUnicode", 
						 function (s) {
						     var ichMax = s.length;
						     var sb = org.jmol.util.StringXBuilder.newN (ichMax);
						     var ich = 0;
						     while (ich < ichMax) {
							 var ch = s.charAt (ich++);
							 if (ch == '\\' && ich < ichMax) {
							     ch = s.charAt (ich++);
							     switch (ch) {
							     case 'u':
								 if (ich < ichMax) {
								     var unicode = 0;
								     for (var k = 4; --k >= 0 && ich < ichMax; ) {
									 var chT = s.charAt (ich);
									 var hexit = org.jmol.util.Escape.getHexitValue (chT);
									 if (hexit < 0) break;
									 unicode <<= 4;
									 unicode += hexit;
									 ++ich;
								     }
								     ch = String.fromCharCode (unicode);
								 }}
							 }sb.appendC (ch);
						     }
						     return sb.toString ();
						 }, "~S");
	c$.getHexitValue = Clazz.defineMethod (c$, "getHexitValue", 
					       function (ch) {
						   if (ch >= '0' && ch <= '9') return ch.charCodeAt (0) - 48;
						   else if (ch >= 'a' && ch <= 'f') return 10 + ch.charCodeAt (0) - 97;
						   else if (ch >= 'A' && ch <= 'F') return 10 + ch.charCodeAt (0) - 65;
						   else return -1;
					       }, "~S");
	c$.unescapeStringArray = Clazz.defineMethod (c$, "unescapeStringArray", 
						     function (data) {
							 if (data == null || !data.startsWith ("[") || !data.endsWith ("]")) return null;
							 var v =  new java.util.ArrayList ();
							 var next =  Clazz.newIntArray (1, 0);
							 next[0] = 1;
							 while (next[0] < data.length) {
							     var s = org.jmol.util.Parser.getQuotedStringNext (data, next);
							     if (s == null) return null;
							     v.add (s);
							     while (next[0] < data.length && data.charAt (next[0]) != '"') next[0]++;

							 }
							 return v.toArray ( new Array (v.size ()));
						     }, "~S");
	c$.escapeUrl = Clazz.defineMethod (c$, "escapeUrl", 
					   function (url) {
					       url = org.jmol.util.TextFormat.simpleReplace (url, "\n", "");
					       url = org.jmol.util.TextFormat.simpleReplace (url, "%", "%25");
					       url = org.jmol.util.TextFormat.simpleReplace (url, "[", "%5B");
					       url = org.jmol.util.TextFormat.simpleReplace (url, "]", "%5D");
					       url = org.jmol.util.TextFormat.simpleReplace (url, " ", "%20");
					       return url;
					   }, "~S");
	Clazz.defineStatics (c$,
			     "escapable", "\\\\\tt\rr\nn\"\"");
    });
    // 
    //// org\jmol\util\LoggerInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.declareInterface (org.jmol.util, "LoggerInterface");
    // 
    //// org\jmol\util\DefaultLogger.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.LoggerInterface"], "org.jmol.util.DefaultLogger", ["org.jmol.util.Logger"], function () {
	c$ = Clazz.declareType (org.jmol.util, "DefaultLogger", null, org.jmol.util.LoggerInterface);
	Clazz.defineMethod (c$, "log", 
			    function (out, level, txt, e) {
				if (out === System.err) System.out.flush ();
				if ((out != null) && ((txt != null) || (e != null))) {
				    txt = (txt != null ? txt : "");
				    out.println ((org.jmol.util.Logger.logLevel () ? "[" + org.jmol.util.Logger.getLevel (level) + "] " : "") + txt + (e != null ? ": " + e.getMessage () : ""));
				    if (e != null) {
					var elements = e.getStackTrace ();
					if (elements != null) {
					    for (var i = 0; i < elements.length; i++) {
						out.println (elements[i].getClassName () + " - " + elements[i].getLineNumber () + " - " + elements[i].getMethodName ());
					    }
					}}}if (out === System.err) System.err.flush ();
			    }, "java.io.PrintStream,~N,~S,Throwable");
	Clazz.overrideMethod (c$, "debug", 
			      function (txt) {
				  this.log (System.out, 5, txt, null);
			      }, "~S");
	Clazz.overrideMethod (c$, "info", 
			      function (txt) {
				  this.log (System.out, 4, txt, null);
			      }, "~S");
	Clazz.overrideMethod (c$, "warn", 
			      function (txt) {
				  this.log (System.out, 3, txt, null);
			      }, "~S");
	Clazz.overrideMethod (c$, "warnEx", 
			      function (txt, e) {
				  this.log (System.out, 3, txt, e);
			      }, "~S,Throwable");
	Clazz.overrideMethod (c$, "error", 
			      function (txt) {
				  this.log (System.err, 2, txt, null);
			      }, "~S");
	Clazz.overrideMethod (c$, "errorEx", 
			      function (txt, e) {
				  this.log (System.err, 2, txt, e);
			      }, "~S,Throwable");
	Clazz.overrideMethod (c$, "fatal", 
			      function (txt) {
				  this.log (System.err, 1, txt, null);
			      }, "~S");
	Clazz.overrideMethod (c$, "fatalEx", 
			      function (txt, e) {
				  this.log (System.err, 1, txt, e);
			      }, "~S,Throwable");
    });
    // 
    //// org\jmol\util\Logger.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["java.util.Hashtable", "org.jmol.util.DefaultLogger"], "org.jmol.util.Logger", ["java.lang.Long", "$.Runtime"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Logger");
	c$.getProperty = Clazz.defineMethod (c$, "getProperty", 
					     ($fz = function (level, defaultValue) {
						 try {
						     var property = System.getProperty ("jmol.logger." + level, null);
						     if (property != null) {
							 return (property.equalsIgnoreCase ("true"));
						     }} catch (e) {
							 if (Clazz.exceptionOf (e, Exception)) {
							 } else {
							     throw e;
							 }
						     }
						 return defaultValue;
					     }, $fz.isPrivate = true, $fz), "~S,~B");
	c$.setLogger = Clazz.defineMethod (c$, "setLogger", 
					   function (logger) {
					       ($t$ = org.jmol.util.Logger._logger = logger, org.jmol.util.Logger.prototype._logger = org.jmol.util.Logger._logger, $t$);
					       ($t$ = org.jmol.util.Logger.debugging = org.jmol.util.Logger.isActiveLevel (5) || org.jmol.util.Logger.isActiveLevel (6), org.jmol.util.Logger.prototype.debugging = org.jmol.util.Logger.debugging, $t$);
					   }, "org.jmol.util.LoggerInterface");
	c$.isActiveLevel = Clazz.defineMethod (c$, "isActiveLevel", 
					       function (level) {
						   return org.jmol.util.Logger._logger != null && level >= 0 && level < 7 && org.jmol.util.Logger._activeLevels[level];
					       }, "~N");
	c$.setActiveLevel = Clazz.defineMethod (c$, "setActiveLevel", 
						function (level, active) {
						    if (level < 0) level = 0;
						    if (level >= 7) level = 6;
						    org.jmol.util.Logger._activeLevels[level] = active;
						    ($t$ = org.jmol.util.Logger.debugging = org.jmol.util.Logger.isActiveLevel (5) || org.jmol.util.Logger.isActiveLevel (6), org.jmol.util.Logger.prototype.debugging = org.jmol.util.Logger.debugging, $t$);
						}, "~N,~B");
	c$.setLogLevel = Clazz.defineMethod (c$, "setLogLevel", 
					     function (level) {
						 for (var i = 7; --i >= 0; ) org.jmol.util.Logger.setActiveLevel (i, i <= level);

					     }, "~N");
	c$.getLevel = Clazz.defineMethod (c$, "getLevel", 
					  function (level) {
					      switch (level) {
					      case 6:
						  return "DEBUGHIGH";
					      case 5:
						  return "DEBUG";
					      case 4:
						  return "INFO";
					      case 3:
						  return "WARN";
					      case 2:
						  return "ERROR";
					      case 1:
						  return "FATAL";
					      }
					      return "????";
					  }, "~N");
	c$.logLevel = Clazz.defineMethod (c$, "logLevel", 
					  function () {
					      return org.jmol.util.Logger._logLevel;
					  });
	c$.doLogLevel = Clazz.defineMethod (c$, "doLogLevel", 
					    function (log) {
						($t$ = org.jmol.util.Logger._logLevel = log, org.jmol.util.Logger.prototype._logLevel = org.jmol.util.Logger._logLevel, $t$);
					    }, "~B");
	c$.debug = Clazz.defineMethod (c$, "debug", 
				       function (txt) {
					   if (!org.jmol.util.Logger.debugging) return;
					   try {
					       org.jmol.util.Logger._logger.debug (txt);
					   } catch (t) {
					   }
				       }, "~S");
	c$.info = Clazz.defineMethod (c$, "info", 
				      function (txt) {
					  try {
					      if (org.jmol.util.Logger.isActiveLevel (4)) {
						  org.jmol.util.Logger._logger.info (txt);
					      }} catch (t) {
					      }
				      }, "~S");
	c$.warn = Clazz.defineMethod (c$, "warn", 
				      function (txt) {
					  try {
					      if (org.jmol.util.Logger.isActiveLevel (3)) {
						  org.jmol.util.Logger._logger.warn (txt);
					      }} catch (t) {
					      }
				      }, "~S");
	c$.warnEx = Clazz.defineMethod (c$, "warnEx", 
					function (txt, e) {
					    try {
						if (org.jmol.util.Logger.isActiveLevel (3)) {
						    org.jmol.util.Logger._logger.warnEx (txt, e);
						}} catch (t) {
						}
					}, "~S,Throwable");
	c$.error = Clazz.defineMethod (c$, "error", 
				       function (txt) {
					   try {
					       if (org.jmol.util.Logger.isActiveLevel (2)) {
						   org.jmol.util.Logger._logger.error (txt);
					       }} catch (t) {
					       }
				       }, "~S");
	c$.errorEx = Clazz.defineMethod (c$, "errorEx", 
					 function (txt, e) {
					     try {
						 if (org.jmol.util.Logger.isActiveLevel (2)) {
						     org.jmol.util.Logger._logger.errorEx (txt, e);
						 }} catch (t) {
						 }
					 }, "~S,Throwable");
	c$.getLogLevel = Clazz.defineMethod (c$, "getLogLevel", 
					     function () {
						 for (var i = 7; --i >= 0; ) if (org.jmol.util.Logger.isActiveLevel (i)) return i;

						 return 0;
					     });
	c$.fatal = Clazz.defineMethod (c$, "fatal", 
				       function (txt) {
					   try {
					       if (org.jmol.util.Logger.isActiveLevel (1)) {
						   org.jmol.util.Logger._logger.fatal (txt);
					       }} catch (t) {
					       }
				       }, "~S");
	c$.fatalEx = Clazz.defineMethod (c$, "fatalEx", 
					 function (txt, e) {
					     try {
						 if (org.jmol.util.Logger.isActiveLevel (1)) {
						     org.jmol.util.Logger._logger.fatalEx (txt, e);
						 }} catch (t) {
						 }
					 }, "~S,Throwable");
	c$.startTimer = Clazz.defineMethod (c$, "startTimer", 
					    function (msg) {
						if (msg == null) return;
						org.jmol.util.Logger.htTiming.put (msg, Long.$valueOf (System.currentTimeMillis ()));
					    }, "~S");
	c$.checkTimer = Clazz.defineMethod (c$, "checkTimer", 
					    function (msg, andReset) {
						if (msg == null) return -1;
						var t = org.jmol.util.Logger.htTiming.get (msg);
						if (t == null) return -1;
						var time = System.currentTimeMillis () - t.longValue ();
						if (!msg.startsWith ("(")) org.jmol.util.Logger.info ("Time for " + msg + ": " + (time) + " ms");
						if (andReset) org.jmol.util.Logger.startTimer (msg);
						return time;
					    }, "~S,~B");
	c$.checkMemory = Clazz.defineMethod (c$, "checkMemory", 
					     function () {
						 var bTotal = 0;
						 var bFree = 0;
						 var bMax = 0;
						 try {
						     var runtime = Runtime.getRuntime ();
						     runtime.gc ();
						     bTotal = runtime.totalMemory ();
						     bFree = runtime.freeMemory ();
						     bMax = runtime.maxMemory ();
						 } catch (e) {
						 }
						 org.jmol.util.Logger.info ("Memory: Total-Free=" + (bTotal - bFree) + "; Total=" + bTotal + "; Free=" + bFree + "; Max=" + bMax);
					     });
	c$._logger = c$.prototype._logger =  new org.jmol.util.DefaultLogger ();
	Clazz.defineStatics (c$,
			     "LEVEL_FATAL", 1,
			     "LEVEL_ERROR", 2,
			     "LEVEL_WARN", 3,
			     "LEVEL_INFO", 4,
			     "LEVEL_DEBUG", 5,
			     "LEVEL_DEBUGHIGH", 6,
			     "LEVEL_MAX", 7,
			     "_activeLevels",  Clazz.newBooleanArray (7, false),
			     "_logLevel", false,
			     "debugging", false,
			     "debuggingHigh", false);
	{
	    org.jmol.util.Logger._activeLevels[6] = org.jmol.util.Logger.getProperty ("debugHigh", false);
	    org.jmol.util.Logger._activeLevels[5] = org.jmol.util.Logger.getProperty ("debug", false);
	    org.jmol.util.Logger._activeLevels[4] = org.jmol.util.Logger.getProperty ("info", true);
	    org.jmol.util.Logger._activeLevels[3] = org.jmol.util.Logger.getProperty ("warn", true);
	    org.jmol.util.Logger._activeLevels[2] = org.jmol.util.Logger.getProperty ("error", true);
	    org.jmol.util.Logger._activeLevels[1] = org.jmol.util.Logger.getProperty ("fatal", true);
	    ($t$ = org.jmol.util.Logger._logLevel = org.jmol.util.Logger.getProperty ("logLevel", false), org.jmol.util.Logger.prototype._logLevel = org.jmol.util.Logger._logLevel, $t$);
	    ($t$ = org.jmol.util.Logger.debugging = (org.jmol.util.Logger._logger != null && (org.jmol.util.Logger._activeLevels[5] || org.jmol.util.Logger._activeLevels[6])), org.jmol.util.Logger.prototype.debugging = org.jmol.util.Logger.debugging, $t$);
	    ($t$ = org.jmol.util.Logger.debuggingHigh = (org.jmol.util.Logger.debugging && org.jmol.util.Logger._activeLevels[6]), org.jmol.util.Logger.prototype.debuggingHigh = org.jmol.util.Logger.debuggingHigh, $t$);
	}c$.htTiming = c$.prototype.htTiming =  new java.util.Hashtable ();
    });
    // 
    //// org\jmol\util\Parser.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Parser", ["java.lang.Float", "org.jmol.util.ArrayUtil", "$.Logger", "$.TextFormat"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Parser");
	c$.parseStringInfestedFloatArray = Clazz.defineMethod (c$, "parseStringInfestedFloatArray", 
							       function (str, bs, data) {
								   return org.jmol.util.Parser.parseFloatArrayBsData (org.jmol.util.Parser.getTokens (str), bs, data);
							       }, "~S,org.jmol.util.BitSet,~A");
	c$.parseFloatArray = Clazz.defineMethod (c$, "parseFloatArray", 
						 function (str) {
						     return org.jmol.util.Parser.parseFloatArrayNext (str,  Clazz.newIntArray (1, 0));
						 }, "~S");
	c$.parseFloatArrayNext = Clazz.defineMethod (c$, "parseFloatArrayNext", 
						     function (str, next) {
							 var pt = next[0];
							 if (pt < 0) return  Clazz.newFloatArray (0, 0);
							 pt = str.indexOf ("[", pt);
							 if (pt >= 0) str = str.substring (pt + 1);
							 next[0] = pt + 1;
							 pt = str.indexOf ("]");
							 if (pt < 0) pt = str.length;
							 else str = str.substring (0, pt);
							 next[0] += pt + 1;
							 var tokens = org.jmol.util.Parser.getTokens (str);
							 var f =  Clazz.newFloatArray (tokens.length, 0);
							 var n = org.jmol.util.Parser.parseFloatArrayBsData (tokens, null, f);
							 for (var i = n; i < f.length; i++) f[i] = NaN;

							 return f;
						     }, "~S,~A");
	c$.parseFloatArrayBsData = Clazz.defineMethod (c$, "parseFloatArrayBsData", 
						       function (tokens, bs, data) {
							   var len = data.length;
							   var nTokens = tokens.length;
							   var n = 0;
							   var max = 0;
							   var haveBitSet = (bs != null);
							   for (var i = (haveBitSet ? bs.nextSetBit (0) : 0); i >= 0 && i < len && n < nTokens; i = (haveBitSet ? bs.nextSetBit (i + 1) : i + 1)) {
							       var f;
							       while (Float.isNaN (f = org.jmol.util.Parser.parseFloatStr (tokens[n++])) && n < nTokens) {
							       }
							       if (!Float.isNaN (f)) data[(max = i)] = f;
							       if (n == nTokens) break;
							   }
							   return max + 1;
						       }, "~A,org.jmol.util.BitSet,~A");
	c$.fixDataString = Clazz.defineMethod (c$, "fixDataString", 
					       ($fz = function (str) {
						   str = str.$replace (';', str.indexOf ('\n') < 0 ? '\n' : ' ');
						   str = org.jmol.util.TextFormat.trim (str, "\n \t");
						   str = org.jmol.util.TextFormat.simpleReplace (str, "\n ", "\n");
						   str = org.jmol.util.TextFormat.simpleReplace (str, "\n\n", "\n");
						   return str;
					       }, $fz.isPrivate = true, $fz), "~S");
	c$.parseFloatArray2d = Clazz.defineMethod (c$, "parseFloatArray2d", 
						   function (str) {
						       str = org.jmol.util.Parser.fixDataString (str);
						       var lines = org.jmol.util.Parser.markLines (str, '\n');
						       var nLines = lines.length;
						       var data = org.jmol.util.ArrayUtil.newFloat2 (nLines);
						       for (var iLine = 0, pt = 0; iLine < nLines; pt = lines[iLine++]) {
							   var tokens = org.jmol.util.Parser.getTokens (str.substring (pt, lines[iLine]));
							   org.jmol.util.Parser.parseFloatArrayData (tokens, data[iLine] =  Clazz.newFloatArray (tokens.length, 0));
						       }
						       return data;
						   }, "~S");
	c$.parseFloatArray3d = Clazz.defineMethod (c$, "parseFloatArray3d", 
						   function (str) {
						       str = org.jmol.util.Parser.fixDataString (str);
						       var lines = org.jmol.util.Parser.markLines (str, '\n');
						       var nLines = lines.length;
						       var tokens = org.jmol.util.Parser.getTokens (str.substring (0, lines[0]));
						       if (tokens.length != 3) return  Clazz.newFloatArray (0, 0, 0, 0);
						       var nX = org.jmol.util.Parser.parseInt (tokens[0]);
						       var nY = org.jmol.util.Parser.parseInt (tokens[1]);
						       var nZ = org.jmol.util.Parser.parseInt (tokens[2]);
						       if (nX < 1 || nY < 1 || nZ < 1) return  Clazz.newFloatArray (1, 1, 1, 0);
						       var data = org.jmol.util.ArrayUtil.newFloat3 (nX, nY);
						       var iX = 0;
						       var iY = 0;
						       for (var iLine = 1, pt = lines[0]; iLine < nLines && iX < nX; pt = lines[iLine++]) {
							   tokens = org.jmol.util.Parser.getTokens (str.substring (pt, lines[iLine]));
							   if (tokens.length < nZ) continue;
							   org.jmol.util.Parser.parseFloatArrayData (tokens, data[iX][iY] =  Clazz.newFloatArray (tokens.length, 0));
							   if (++iY == nY) {
							       iX++;
							       iY = 0;
							   }}
						       if (iX != nX) {
							   org.jmol.util.Logger.info ("Error reading 3D data -- nX = " + nX + ", but only " + iX + " blocks read");
							   return  Clazz.newFloatArray (1, 1, 1, 0);
						       }return data;
						   }, "~S");
	c$.setSelectedFloats = Clazz.defineMethod (c$, "setSelectedFloats", 
						   function (f, bs, data) {
						       var isAll = (bs == null);
						       var i0 = (isAll ? 0 : bs.nextSetBit (0));
						       for (var i = i0; i >= 0 && i < data.length; i = (isAll ? i + 1 : bs.nextSetBit (i + 1))) data[i] = f;

						   }, "~N,org.jmol.util.BitSet,~A");
	c$.extractData = Clazz.defineMethod (c$, "extractData", 
					     function (data, field, nBytes, firstLine) {
						 return org.jmol.util.Parser.parseFloatArrayFromMatchAndField (data, null, 0, 0, null, field, nBytes, null, firstLine);
					     }, "~S,~N,~N,~N");
	c$.parseFloatArrayFromMatchAndField = Clazz.defineMethod (c$, "parseFloatArrayFromMatchAndField", 
								  function (str, bs, fieldMatch, fieldMatchColumnCount, matchData, field, fieldColumnCount, data, firstLine) {
								      var f;
								      var i = -1;
								      var isMatch = (matchData != null);
								      var lines = org.jmol.util.Parser.markLines (str, (str.indexOf ('\n') >= 0 ? '\n' : ';'));
								      var iLine = (firstLine <= 1 || firstLine >= lines.length ? 0 : firstLine - 1);
								      var pt = (iLine == 0 ? 0 : lines[iLine - 1]);
								      var nLines = lines.length;
								      if (data == null) data =  Clazz.newFloatArray (nLines - iLine, 0);
								      var len = data.length;
								      var minLen = (fieldColumnCount <= 0 ? Math.max (field, fieldMatch) : Math.max (field + fieldColumnCount, fieldMatch + fieldMatchColumnCount) - 1);
								      var haveBitSet = (bs != null);
								      for (; iLine < nLines; iLine++) {
									  var line = str.substring (pt, lines[iLine]).trim ();
									  pt = lines[iLine];
									  var tokens = (fieldColumnCount <= 0 ? org.jmol.util.Parser.getTokens (line) : null);
									  if (fieldColumnCount <= 0) {
									      if (tokens.length < minLen || Float.isNaN (f = org.jmol.util.Parser.parseFloatStr (tokens[field - 1]))) continue;
									  } else {
									      if (line.length < minLen || Float.isNaN (f = org.jmol.util.Parser.parseFloatStr (line.substring (field - 1, field + fieldColumnCount - 1)))) continue;
									  }var iData;
									  if (isMatch) {
									      iData = org.jmol.util.Parser.parseInt (tokens == null ? line.substring (fieldMatch - 1, fieldMatch + fieldMatchColumnCount - 1) : tokens[fieldMatch - 1]);
									      if (iData == -2147483648 || iData < 0 || iData >= len || (iData = matchData[iData]) < 0) continue;
									      if (haveBitSet) bs.set (iData);
									  } else {
									      if (haveBitSet) i = bs.nextSetBit (i + 1);
									      else i++;
									      if (i < 0 || i >= len) return data;
									      iData = i;
									  }data[iData] = f;
								      }
								      return data;
								  }, "~S,org.jmol.util.BitSet,~N,~N,~A,~N,~N,~A,~N");
	c$.parseFloatArrayData = Clazz.defineMethod (c$, "parseFloatArrayData", 
						     function (tokens, data) {
							 org.jmol.util.Parser.parseFloatArrayDataN (tokens, data, data.length);
						     }, "~A,~A");
	c$.parseFloatArrayDataN = Clazz.defineMethod (c$, "parseFloatArrayDataN", 
						      function (tokens, data, nData) {
							  for (var i = nData; --i >= 0; ) data[i] = (i >= tokens.length ? NaN : org.jmol.util.Parser.parseFloatStr (tokens[i]));

						      }, "~A,~A,~N");
	c$.parseFloatStr = Clazz.defineMethod (c$, "parseFloatStr", 
					       function (str) {
						   return org.jmol.util.Parser.parseFloatNext (str, [0]);
					       }, "~S");
	c$.parseFloatStrict = Clazz.defineMethod (c$, "parseFloatStrict", 
						  function (str) {
						      var cch = str.length;
						      if (cch == 0) return NaN;
						      return org.jmol.util.Parser.parseFloatChecked (str, cch, [0], true);
						  }, "~S");
	c$.parseInt = Clazz.defineMethod (c$, "parseInt", 
					  function (str) {
					      return org.jmol.util.Parser.parseIntNext (str, [0]);
					  }, "~S");
	c$.getTokens = Clazz.defineMethod (c$, "getTokens", 
					   function (line) {
					       return org.jmol.util.Parser.getTokensAt (line, 0);
					   }, "~S");
	c$.parseToken = Clazz.defineMethod (c$, "parseToken", 
					    function (str) {
						return org.jmol.util.Parser.parseTokenNext (str, [0]);
					    }, "~S");
	c$.parseTrimmed = Clazz.defineMethod (c$, "parseTrimmed", 
					      function (str) {
						  return org.jmol.util.Parser.parseTrimmedRange (str, 0, str.length);
					      }, "~S");
	c$.parseTrimmedAt = Clazz.defineMethod (c$, "parseTrimmedAt", 
						function (str, ichStart) {
						    return org.jmol.util.Parser.parseTrimmedRange (str, ichStart, str.length);
						}, "~S,~N");
	c$.parseTrimmedRange = Clazz.defineMethod (c$, "parseTrimmedRange", 
						   function (str, ichStart, ichMax) {
						       var cch = str.length;
						       if (ichMax < cch) cch = ichMax;
						       if (cch < ichStart) return "";
						       return org.jmol.util.Parser.parseTrimmedChecked (str, ichStart, cch);
						   }, "~S,~N,~N");
	c$.markLines = Clazz.defineMethod (c$, "markLines", 
					   function (data, eol) {
					       var nLines = 0;
					       for (var i = data.length; --i >= 0; ) if (data.charAt (i) == eol) nLines++;

					       var lines =  Clazz.newIntArray (nLines + 1, 0);
					       lines[nLines--] = data.length;
					       for (var i = data.length; --i >= 0; ) if (data.charAt (i) == eol) lines[nLines--] = i + 1;

					       return lines;
					   }, "~S,~S");
	c$.parseFloatNext = Clazz.defineMethod (c$, "parseFloatNext", 
						function (str, next) {
						    var cch = str.length;
						    if (next[0] < 0 || next[0] >= cch) return NaN;
						    return org.jmol.util.Parser.parseFloatChecked (str, cch, next, false);
						}, "~S,~A");
	c$.parseFloatRange = Clazz.defineMethod (c$, "parseFloatRange", 
						 function (str, ichMax, next) {
						     var cch = str.length;
						     if (ichMax > cch) ichMax = cch;
						     if (next[0] < 0 || next[0] >= ichMax) return NaN;
						     return org.jmol.util.Parser.parseFloatChecked (str, ichMax, next, false);
						 }, "~S,~N,~A");
	c$.parseFloatChecked = Clazz.defineMethod (c$, "parseFloatChecked", 
						   ($fz = function (str, ichMax, next, isStrict) {
						       var digitSeen = false;
						       var value = 0;
						       var ich = next[0];
						       if (isStrict && str.indexOf ('\n') != str.lastIndexOf ('\n')) return NaN;
						       while (ich < ichMax && org.jmol.util.Parser.isWhiteSpace (str, ich)) ++ich;

						       var negative = false;
						       if (ich < ichMax && str.charAt (ich) == '-') {
							   ++ich;
							   negative = true;
						       }var ch = String.fromCharCode (0);
						       while (ich < ichMax && (ch = str.charAt (ich)) >= '0' && ch <= '9') {
							   value = value * 10 + (ch.charCodeAt (0) - 48);
							   ++ich;
							   digitSeen = true;
						       }
						       var isDecimal = false;
						       if (ch == '.') {
							   isDecimal = true;
							   var iscale = 0;
							   while (++ich < ichMax && (ch = str.charAt (ich)) >= '0' && ch <= '9') {
							       if (iscale < org.jmol.util.Parser.decimalScale.length) value += (ch.charCodeAt (0) - 48) * org.jmol.util.Parser.decimalScale[iscale];
							       ++iscale;
							       digitSeen = true;
							   }
						       }var isExponent = false;
						       if (!digitSeen) value = NaN;
						       else if (negative) value = -value;
						       if (ich < ichMax && (ch == 'E' || ch == 'e' || ch == 'D')) {
							   isExponent = true;
							   if (++ich >= ichMax) return NaN;
							   ch = str.charAt (ich);
							   if ((ch == '+') && (++ich >= ichMax)) return NaN;
							   next[0] = ich;
							   var exponent = org.jmol.util.Parser.parseIntChecked (str, ichMax, next);
							   if (exponent == -2147483648) return NaN;
							   if (exponent > 0) value *= ((exponent < org.jmol.util.Parser.tensScale.length) ? org.jmol.util.Parser.tensScale[exponent - 1] : Math.pow (10, exponent));
							   else if (exponent < 0) value *= ((-exponent < org.jmol.util.Parser.decimalScale.length) ? org.jmol.util.Parser.decimalScale[-exponent - 1] : Math.pow (10, exponent));
						       } else {
							   next[0] = ich;
						       }if (value == -Infinity) value = -3.4028235E38;
						       else if (value == Infinity) value = 3.4028235E38;
						       return (!isStrict || (!isExponent || isDecimal) && org.jmol.util.Parser.checkTrailingText (str, next[0], ichMax) ? value : NaN);
						   }, $fz.isPrivate = true, $fz), "~S,~N,~A,~B");
	c$.checkTrailingText = Clazz.defineMethod (c$, "checkTrailingText", 
						   ($fz = function (str, ich, ichMax) {
						       var ch;
						       while (ich < ichMax && ((ch = str.charAt (ich)) == ' ' || ch == '\t' || ch == '\n' || ch == ';')) ++ich;

						       return (ich == ichMax);
						   }, $fz.isPrivate = true, $fz), "~S,~N,~N");
	c$.parseIntNext = Clazz.defineMethod (c$, "parseIntNext", 
					      function (str, next) {
						  var cch = str.length;
						  if (next[0] < 0 || next[0] >= cch) return -2147483648;
						  return org.jmol.util.Parser.parseIntChecked (str, cch, next);
					      }, "~S,~A");
	c$.parseIntRange = Clazz.defineMethod (c$, "parseIntRange", 
					       function (str, ichMax, next) {
						   var cch = str.length;
						   if (ichMax > cch) ichMax = cch;
						   if (next[0] < 0 || next[0] >= ichMax) return -2147483648;
						   return org.jmol.util.Parser.parseIntChecked (str, ichMax, next);
					       }, "~S,~N,~A");
	c$.parseIntChecked = Clazz.defineMethod (c$, "parseIntChecked", 
						 ($fz = function (str, ichMax, next) {
						     var digitSeen = false;
						     var value = 0;
						     var ich = next[0];
						     if (ich < 0) return -2147483648;
						     var ch;
						     while (ich < ichMax && org.jmol.util.Parser.isWhiteSpace (str, ich)) ++ich;

						     var negative = false;
						     if (ich < ichMax && str.charAt (ich) == '-') {
							 negative = true;
							 ++ich;
						     }while (ich < ichMax && (ch = str.charAt (ich)) >= '0' && ch <= '9') {
							 value = value * 10 + (ch.charCodeAt (0) - 48);
							 digitSeen = true;
							 ++ich;
						     }
						     if (!digitSeen) value = -2147483648;
						     else if (negative) value = -value;
						     next[0] = ich;
						     return value;
						 }, $fz.isPrivate = true, $fz), "~S,~N,~A");
	c$.getTokensAt = Clazz.defineMethod (c$, "getTokensAt", 
					     function (line, ich) {
						 if (line == null) return null;
						 var cchLine = line.length;
						 if (ich < 0 || ich > cchLine) return null;
						 var tokenCount = org.jmol.util.Parser.countTokens (line, ich);
						 var tokens =  new Array (tokenCount);
						 var next =  Clazz.newIntArray (1, 0);
						 next[0] = ich;
						 for (var i = 0; i < tokenCount; ++i) tokens[i] = org.jmol.util.Parser.parseTokenChecked (line, cchLine, next);

						 return tokens;
					     }, "~S,~N");
	c$.countTokens = Clazz.defineMethod (c$, "countTokens", 
					     ($fz = function (line, ich) {
						 var tokenCount = 0;
						 if (line != null) {
						     var ichMax = line.length;
						     while (true) {
							 while (ich < ichMax && org.jmol.util.Parser.isWhiteSpace (line, ich)) ++ich;

							 if (ich == ichMax) break;
							 ++tokenCount;
							 do {
							     ++ich;
							 } while (ich < ichMax && !org.jmol.util.Parser.isWhiteSpace (line, ich));
						     }
						 }return tokenCount;
					     }, $fz.isPrivate = true, $fz), "~S,~N");
	c$.parseTokenNext = Clazz.defineMethod (c$, "parseTokenNext", 
						function (str, next) {
						    var cch = str.length;
						    if (next[0] < 0 || next[0] >= cch) return null;
						    return org.jmol.util.Parser.parseTokenChecked (str, cch, next);
						}, "~S,~A");
	c$.parseTokenRange = Clazz.defineMethod (c$, "parseTokenRange", 
						 function (str, ichMax, next) {
						     var cch = str.length;
						     if (ichMax > cch) ichMax = cch;
						     if (next[0] < 0 || next[0] >= ichMax) return null;
						     return org.jmol.util.Parser.parseTokenChecked (str, ichMax, next);
						 }, "~S,~N,~A");
	c$.parseTokenChecked = Clazz.defineMethod (c$, "parseTokenChecked", 
						   ($fz = function (str, ichMax, next) {
						       var ich = next[0];
						       while (ich < ichMax && org.jmol.util.Parser.isWhiteSpace (str, ich)) ++ich;

						       var ichNonWhite = ich;
						       while (ich < ichMax && !org.jmol.util.Parser.isWhiteSpace (str, ich)) ++ich;

						       next[0] = ich;
						       if (ichNonWhite == ich) return null;
						       return str.substring (ichNonWhite, ich);
						   }, $fz.isPrivate = true, $fz), "~S,~N,~A");
	c$.parseTrimmedChecked = Clazz.defineMethod (c$, "parseTrimmedChecked", 
						     ($fz = function (str, ich, ichMax) {
							 while (ich < ichMax && org.jmol.util.Parser.isWhiteSpace (str, ich)) ++ich;

							 var ichLast = ichMax - 1;
							 while (ichLast >= ich && org.jmol.util.Parser.isWhiteSpace (str, ichLast)) --ichLast;

							 if (ichLast < ich) return "";
							 return str.substring (ich, ichLast + 1);
						     }, $fz.isPrivate = true, $fz), "~S,~N,~N");
	c$.concatTokens = Clazz.defineMethod (c$, "concatTokens", 
					      function (tokens, iFirst, iEnd) {
						  var str = "";
						  var sep = "";
						  for (var i = iFirst; i < iEnd; i++) {
						      if (i < tokens.length) {
							  str += sep + tokens[i];
							  sep = " ";
						      }}
						  return str;
					      }, "~A,~N,~N");
	c$.getQuotedStringAt = Clazz.defineMethod (c$, "getQuotedStringAt", 
						   function (line, ipt0) {
						       var next = [ipt0];
						       return org.jmol.util.Parser.getQuotedStringNext (line, next);
						   }, "~S,~N");
	c$.getQuotedStringNext = Clazz.defineMethod (c$, "getQuotedStringNext", 
						     function (line, next) {
							 var value = line;
							 var i = next[0];
							 if (i < 0 || (i = value.indexOf ("\"", i)) < 0) return "";
							 next[0] = ++i;
							 value = value.substring (i);
							 i = -1;
							 while (++i < value.length && value.charAt (i) != '"') if (value.charAt (i) == '\\') i++;

							 next[0] += i + 1;
							 return value.substring (0, i);
						     }, "~S,~A");
	c$.isWhiteSpace = Clazz.defineMethod (c$, "isWhiteSpace", 
					      ($fz = function (str, ich) {
						  var ch;
						  return (ich >= 0 && ((ch = str.charAt (ich)) == ' ' || ch == '\t' || ch == '\n'));
					      }, $fz.isPrivate = true, $fz), "~S,~N");
	c$.isOneOf = Clazz.defineMethod (c$, "isOneOf", 
					 function (key, semiList) {
					     return key.indexOf (";") < 0 && (';' + semiList + ';').indexOf (';' + key + ';') >= 0;
					 }, "~S,~S");
	c$.getQuotedAttribute = Clazz.defineMethod (c$, "getQuotedAttribute", 
						    function (info, name) {
							var i = info.indexOf (name + "=");
							return (i < 0 ? null : org.jmol.util.Parser.getQuotedStringAt (info, i));
						    }, "~S,~S");
	c$.parseIntRadix = Clazz.defineMethod (c$, "parseIntRadix", 
					       function (s, i) {
						   {
						       return Integer.parseIntRadix(s, i); // special
						   }}, "~S,~N");
	c$.approx = Clazz.defineMethod (c$, "approx", 
					function (f, n) {
					    return Math.round (f * n) / n;
					}, "~N,~N");
	Clazz.defineStatics (c$,
			     "decimalScale", [0.1, 0.01, 0.001, 0.0001, 0.00001, 0.000001, 0.0000001, 0.00000001],
			     "tensScale", [10, 100, 1000, 10000, 100000, 1000000]);
    });
    // 
    //// org\jmol\util\TextFormat.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.TextFormat", ["java.lang.Boolean", "$.Character", "$.Double", "$.Float", "org.jmol.util.Parser", "$.StringXBuilder"], function () {
	c$ = Clazz.declareType (org.jmol.util, "TextFormat");
	Clazz.prepareFields (c$, function () {
	    {
		org.jmol.util.TextFormat.useNumberLocalization[0] = Boolean.TRUE;
	    }});
	c$.setUseNumberLocalization = Clazz.defineMethod (c$, "setUseNumberLocalization", 
							  function (TF) {
							      org.jmol.util.TextFormat.useNumberLocalization[0] = (TF ? Boolean.TRUE : Boolean.FALSE);
							  }, "~B");
	c$.formatDecimal = Clazz.defineMethod (c$, "formatDecimal", 
					       function (value, decimalDigits) {
						   if (decimalDigits == 2147483647 || value == -Infinity || value == Infinity || Float.isNaN (value)) return "" + value;
						   var n;
						   if (decimalDigits < 0) {
						       decimalDigits = -decimalDigits;
						       if (decimalDigits > org.jmol.util.TextFormat.formattingStrings.length) decimalDigits = org.jmol.util.TextFormat.formattingStrings.length;
						       if (value == 0) return org.jmol.util.TextFormat.formattingStrings[decimalDigits] + "E+0";
						       n = 0;
						       var d;
						       if (Math.abs (value) < 1) {
							   n = 10;
							   d = value * 1e-10;
						       } else {
							   n = -10;
							   d = value * 1e10;
						       }var s = ("" + d).toUpperCase ();
						       var i = s.indexOf ("E");
						       n = org.jmol.util.Parser.parseInt (s.substring (i + 1)) + n;
						       return (i < 0 ? "" + value : org.jmol.util.TextFormat.formatDecimal (org.jmol.util.Parser.parseFloatStr (s.substring (0, i)), decimalDigits - 1) + "E" + (n >= 0 ? "+" : "") + n);
						   }if (decimalDigits >= org.jmol.util.TextFormat.formattingStrings.length) decimalDigits = org.jmol.util.TextFormat.formattingStrings.length - 1;
						   var s1 = ("" + value).toUpperCase ();
						   var isNeg = s1.startsWith ("-");
						   if (isNeg) s1 = s1.substring (1);
						   var pt = s1.indexOf (".");
						   if (pt < 0) return s1 + org.jmol.util.TextFormat.formattingStrings[decimalDigits].substring (1);
						   var pt1 = s1.indexOf ("E-");
						   if (pt1 > 0) {
						       n = org.jmol.util.Parser.parseInt (s1.substring (pt1 + 1));
						       s1 = "0." + "0000000000000000000000000000000000000000".substring (0, -n - 1) + s1.substring (0, 1) + s1.substring (2, pt1);
						       pt = 1;
						   }pt1 = s1.indexOf ("E");
						   if (pt1 > 0) {
						       n = org.jmol.util.Parser.parseInt (s1.substring (pt1 + 1));
						       s1 = s1.substring (0, 1) + s1.substring (2, pt1) + "0000000000000000000000000000000000000000";
						       s1 = s1.substring (0, n + 1) + "." + s1.substring (n + 1);
						       pt = s1.indexOf (".");
						   }var len = s1.length;
						   var pt2 = decimalDigits + pt + 1;
						   if (pt2 < len && s1.charAt (pt2) >= '5') {
						       return org.jmol.util.TextFormat.formatDecimal (value + (isNeg ? -1 : 1) * org.jmol.util.TextFormat.formatAdds[decimalDigits], decimalDigits);
						   }var sb = org.jmol.util.StringXBuilder.newS (s1.substring (0, (decimalDigits == 0 ? pt : ++pt)));
						   for (var i = 0; i < decimalDigits; i++, pt++) {
						       if (pt < len) sb.appendC (s1.charAt (pt));
						       else sb.appendC ('0');
						   }
						   s1 = (isNeg ? "-" : "") + sb;
						   return (Boolean.TRUE.equals (org.jmol.util.TextFormat.useNumberLocalization[0]) ? s1 : s1.$replace (',', '.'));
					       }, "~N,~N");
	c$.formatF = Clazz.defineMethod (c$, "formatF", 
					 function (value, width, precision, alignLeft, zeroPad) {
					     return org.jmol.util.TextFormat.formatS (org.jmol.util.TextFormat.formatDecimal (value, precision), width, 0, alignLeft, zeroPad);
					 }, "~N,~N,~N,~B,~B");
	c$.formatD = Clazz.defineMethod (c$, "formatD", 
					 function (value, width, precision, alignLeft, zeroPad, allowOverflow) {
					     return org.jmol.util.TextFormat.formatS (org.jmol.util.TextFormat.formatDecimal (value, -1 - precision), width, 0, alignLeft, zeroPad);
					 }, "~N,~N,~N,~B,~B,~B");
	c$.formatS = Clazz.defineMethod (c$, "formatS", 
					 function (value, width, precision, alignLeft, zeroPad) {
					     if (value == null) return "";
					     var len = value.length;
					     if (precision != 2147483647 && precision > 0 && precision < len) value = value.substring (0, precision);
					     else if (precision < 0 && len + precision >= 0) value = value.substring (len + precision + 1);
					     var padLength = width - value.length;
					     if (padLength <= 0) return value;
					     var isNeg = (zeroPad && !alignLeft && value.charAt (0) == '-');
					     var padChar = (zeroPad ? '0' : ' ');
					     var padChar0 = (isNeg ? '-' : padChar);
					     var sb =  new org.jmol.util.StringXBuilder ();
					     if (alignLeft) sb.append (value);
					     sb.appendC (padChar0);
					     for (var i = padLength; --i > 0; ) sb.appendC (padChar);

					     if (!alignLeft) sb.append (isNeg ? padChar + value.substring (1) : value);
					     return sb.toString ();
					 }, "~S,~N,~N,~B,~B");
	c$.formatStringS = Clazz.defineMethod (c$, "formatStringS", 
					       function (strFormat, key, strT) {
						   return org.jmol.util.TextFormat.formatString (strFormat, key, strT, NaN, NaN, false);
					       }, "~S,~S,~S");
	c$.formatStringF = Clazz.defineMethod (c$, "formatStringF", 
					       function (strFormat, key, floatT) {
						   return org.jmol.util.TextFormat.formatString (strFormat, key, null, floatT, NaN, false);
					       }, "~S,~S,~N");
	c$.formatStringI = Clazz.defineMethod (c$, "formatStringI", 
					       function (strFormat, key, intT) {
						   return org.jmol.util.TextFormat.formatString (strFormat, key, "" + intT, NaN, NaN, false);
					       }, "~S,~S,~N");
	c$.sprintf = Clazz.defineMethod (c$, "sprintf", 
					 function (strFormat, list, values) {
					     if (values == null) return strFormat;
					     var n = list.length;
					     if (n == values.length) try {
						 for (var o = 0; o < n; o++) {
						     if (values[o] == null) continue;
						     switch (list.charAt (o)) {
						     case 's':
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "s", values[o], NaN, NaN, true);
							 break;
						     case 'f':
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "f", null, (values[o]).floatValue (), NaN, true);
							 break;
						     case 'i':
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "d", "" + values[o], NaN, NaN, true);
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "i", "" + values[o], NaN, NaN, true);
							 break;
						     case 'd':
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "e", null, NaN, (values[o]).doubleValue (), true);
							 break;
						     case 'p':
							 var pVal = values[o];
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "p", null, pVal.x, NaN, true);
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "p", null, pVal.y, NaN, true);
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "p", null, pVal.z, NaN, true);
							 break;
						     case 'q':
							 var qVal = values[o];
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "q", null, qVal.x, NaN, true);
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "q", null, qVal.y, NaN, true);
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "q", null, qVal.z, NaN, true);
							 strFormat = org.jmol.util.TextFormat.formatString (strFormat, "q", null, qVal.w, NaN, true);
							 break;
						     case 'S':
							 var sVal = values[o];
							 for (var i = 0; i < sVal.length; i++) strFormat = org.jmol.util.TextFormat.formatString (strFormat, "s", sVal[i], NaN, NaN, true);

							 break;
						     case 'F':
							 var fVal = values[o];
							 for (var i = 0; i < fVal.length; i++) strFormat = org.jmol.util.TextFormat.formatString (strFormat, "f", null, fVal[i], NaN, true);

							 break;
						     case 'I':
							 var iVal = values[o];
							 for (var i = 0; i < iVal.length; i++) strFormat = org.jmol.util.TextFormat.formatString (strFormat, "d", "" + iVal[i], NaN, NaN, true);

							 for (var i = 0; i < iVal.length; i++) strFormat = org.jmol.util.TextFormat.formatString (strFormat, "i", "" + iVal[i], NaN, NaN, true);

							 break;
						     case 'D':
							 var dVal = values[o];
							 for (var i = 0; i < dVal.length; i++) strFormat = org.jmol.util.TextFormat.formatString (strFormat, "e", null, NaN, dVal[i], true);

						     }
						 }
						 return org.jmol.util.TextFormat.simpleReplace (strFormat, "%%", "%");
					     } catch (e) {
						 if (Clazz.exceptionOf (e, Exception)) {
						 } else {
						     throw e;
						 }
					     }
					     System.out.println ("TextFormat.sprintf error " + list + " " + strFormat);
					     return org.jmol.util.TextFormat.simpleReplace (strFormat, "%", "?");
					 }, "~S,~S,~A");
	c$.formatString = Clazz.defineMethod (c$, "formatString", 
					      ($fz = function (strFormat, key, strT, floatT, doubleT, doOne) {
						  if (strFormat == null) return null;
						  if ("".equals (strFormat)) return "";
						  var len = key.length;
						  if (strFormat.indexOf ("%") < 0 || len == 0 || strFormat.indexOf (key) < 0) return strFormat;
						  var strLabel = "";
						  var ich;
						  var ichPercent;
						  var ichKey;
						  for (ich = 0; (ichPercent = strFormat.indexOf ('%', ich)) >= 0 && (ichKey = strFormat.indexOf (key, ichPercent + 1)) >= 0; ) {
						      if (ich != ichPercent) strLabel += strFormat.substring (ich, ichPercent);
						      ich = ichPercent + 1;
						      if (ichKey > ichPercent + 6) {
							  strLabel += '%';
							  continue;
						      }try {
							  var alignLeft = false;
							  if (strFormat.charAt (ich) == '-') {
							      alignLeft = true;
							      ++ich;
							  }var zeroPad = false;
							  if (strFormat.charAt (ich) == '0') {
							      zeroPad = true;
							      ++ich;
							  }var ch;
							  var width = 0;
							  while ((ch = strFormat.charAt (ich)) >= '0' && (ch <= '9')) {
							      width = (10 * width) + (ch.charCodeAt (0) - 48);
							      ++ich;
							  }
							  var precision = 2147483647;
							  var isExponential = false;
							  if (strFormat.charAt (ich) == '.') {
							      ++ich;
							      if ((ch = strFormat.charAt (ich)) == '-') {
								  isExponential = true;
								  ++ich;
							      }if ((ch = strFormat.charAt (ich)) >= '0' && ch <= '9') {
								  precision = ch.charCodeAt (0) - 48;
								  ++ich;
							      }if (isExponential) precision = -precision - (strT == null ? 1 : 0);
							  }var st = strFormat.substring (ich, ich + len);
							  if (!st.equals (key)) {
							      ich = ichPercent + 1;
							      strLabel += '%';
							      continue;
							  }ich += len;
							  if (!Float.isNaN (floatT)) strLabel += org.jmol.util.TextFormat.formatF (floatT, width, precision, alignLeft, zeroPad);
							  else if (strT != null) strLabel += org.jmol.util.TextFormat.formatS (strT, width, precision, alignLeft, zeroPad);
							  else if (!Double.isNaN (doubleT)) strLabel += org.jmol.util.TextFormat.formatD (doubleT, width, precision, alignLeft, zeroPad, true);
							  if (doOne) break;
						      } catch (ioobe) {
							  if (Clazz.exceptionOf (ioobe, IndexOutOfBoundsException)) {
							      ich = ichPercent;
							      break;
							  } else {
							      throw ioobe;
							  }
						      }
						  }
						  strLabel += strFormat.substring (ich);
						  return strLabel;
					      }, $fz.isPrivate = true, $fz), "~S,~S,~S,~N,~N,~B");
	c$.formatCheck = Clazz.defineMethod (c$, "formatCheck", 
					     function (strFormat) {
						 if (strFormat == null || strFormat.indexOf ('p') < 0 && strFormat.indexOf ('q') < 0) return strFormat;
						 strFormat = org.jmol.util.TextFormat.simpleReplace (strFormat, "%%", "\1");
						 strFormat = org.jmol.util.TextFormat.simpleReplace (strFormat, "%p", "%6.2p");
						 strFormat = org.jmol.util.TextFormat.simpleReplace (strFormat, "%q", "%6.2q");
						 var format = org.jmol.util.TextFormat.split (strFormat, '%');
						 var sb =  new org.jmol.util.StringXBuilder ();
						 sb.append (format[0]);
						 for (var i = 1; i < format.length; i++) {
						     var f = "%" + format[i];
						     var pt;
						     if (f.length >= 3) {
							 if ((pt = f.indexOf ('p')) >= 0) f = org.jmol.util.TextFormat.fdup (f, pt, 3);
							 if ((pt = f.indexOf ('q')) >= 0) f = org.jmol.util.TextFormat.fdup (f, pt, 4);
						     }sb.append (f);
						 }
						 return sb.toString ().$replace ('\1', '%');
					     }, "~S");
	c$.fdup = Clazz.defineMethod (c$, "fdup", 
				      ($fz = function (f, pt, n) {
					  var ch;
					  var count = 0;
					  for (var i = pt; --i >= 1; ) {
					      if (Character.isDigit (ch = f.charAt (i))) continue;
					      switch (ch) {
					      case '.':
						  if (count++ != 0) return f;
						  continue;
					      case '-':
						  if (i != 1) return f;
						  continue;
					      default:
						  return f;
					      }
					  }
					  var s = f.substring (0, pt + 1);
					  var sb =  new org.jmol.util.StringXBuilder ();
					  for (var i = 0; i < n; i++) sb.append (s);

					  sb.append (f.substring (pt + 1));
					  return sb.toString ();
				      }, $fz.isPrivate = true, $fz), "~S,~N,~N");
	c$.splitChars = Clazz.defineMethod (c$, "splitChars", 
					    function (text, run) {
						if (text.length == 0) return  new Array (0);
						var n = 1;
						var i = text.indexOf (run);
						var lines;
						var runLen = run.length;
						if (i < 0 || runLen == 0) {
						    lines =  new Array (1);
						    lines[0] = text;
						    return lines;
						}var len = text.length - runLen;
						for (; i >= 0 && i < len; n++) i = text.indexOf (run, i + runLen);

						lines =  new Array (n);
						i = 0;
						var ipt = 0;
						var pt = 0;
						for (; (ipt = text.indexOf (run, i)) >= 0 && pt + 1 < n; ) {
						    lines[pt++] = text.substring (i, ipt);
						    i = ipt + runLen;
						}
						if (text.indexOf (run, len) != len) len += runLen;
						lines[pt] = text.substring (i, len);
						return lines;
					    }, "~S,~S");
	c$.replaceAllCharacters = Clazz.defineMethod (c$, "replaceAllCharacters", 
						      function (str, strFrom, strTo) {
							  for (var i = strFrom.length; --i >= 0; ) {
							      var chFrom = strFrom.substring (i, i + 1);
							      str = org.jmol.util.TextFormat.simpleReplace (str, chFrom, strTo);
							  }
							  return str;
						      }, "~S,~S,~S");
	c$.replaceAllCharacter = Clazz.defineMethod (c$, "replaceAllCharacter", 
						     function (str, strFrom, chTo) {
							 if (str == null) return null;
							 for (var i = strFrom.length; --i >= 0; ) str = str.$replace (strFrom.charAt (i), chTo);

							 return str;
						     }, "~S,~S,~S");
	c$.simpleReplace = Clazz.defineMethod (c$, "simpleReplace", 
					       function (str, strFrom, strTo) {
						   if (str == null || str.indexOf (strFrom) < 0 || strFrom.equals (strTo)) return str;
						   var fromLength = strFrom.length;
						   if (fromLength == 0) return str;
						   var isOnce = (strTo.indexOf (strFrom) >= 0);
						   var ipt;
						   while (str.indexOf (strFrom) >= 0) {
						       var s =  new org.jmol.util.StringXBuilder ();
						       var ipt0 = 0;
						       while ((ipt = str.indexOf (strFrom, ipt0)) >= 0) {
							   s.append (str.substring (ipt0, ipt)).append (strTo);
							   ipt0 = ipt + fromLength;
						       }
						       s.append (str.substring (ipt0));
						       str = s.toString ();
						       if (isOnce) break;
						   }
						   return str;
					       }, "~S,~S,~S");
	c$.trim = Clazz.defineMethod (c$, "trim", 
				      function (str, chars) {
					  if (chars.length == 0) return str.trim ();
					  var len = str.length;
					  var k = 0;
					  while (k < len && chars.indexOf (str.charAt (k)) >= 0) k++;

					  var m = str.length - 1;
					  while (m > k && chars.indexOf (str.charAt (m)) >= 0) m--;

					  return str.substring (k, m + 1);
				      }, "~S,~S");
	c$.split = Clazz.defineMethod (c$, "split", 
				       function (text, ch) {
					   return org.jmol.util.TextFormat.splitChars (text, "" + ch);
				       }, "~S,~S");
	c$.lFill = Clazz.defineMethod (c$, "lFill", 
				       function (s, s1, s2) {
					   s.append (s2);
					   var n = s1.length - s2.length;
					   if (n > 0) s.append (s1.substring (0, n));
				       }, "org.jmol.util.StringXBuilder,~S,~S");
	c$.rFill = Clazz.defineMethod (c$, "rFill", 
				       function (s, s1, s2) {
					   var n = s1.length - s2.length;
					   if (n > 0) s.append (s1.substring (0, n));
					   s.append (s2);
				       }, "org.jmol.util.StringXBuilder,~S,~S");
	c$.safeTruncate = Clazz.defineMethod (c$, "safeTruncate", 
					      function (f, n) {
						  if (f > -0.0010 && f < 0.001) f = 0;
						  return (f + "         ").substring (0, n);
					      }, "~N,~N");
	c$.isWild = Clazz.defineMethod (c$, "isWild", 
					function (s) {
					    return s != null && (s.indexOf ("*") >= 0 || s.indexOf ("?") >= 0);
					}, "~S");
	c$.isMatch = Clazz.defineMethod (c$, "isMatch", 
					 function (s, strWildcard, checkStar, allowInitialStar) {
					     var ich = 0;
					     var cchWildcard = strWildcard.length;
					     var cchs = s.length;
					     if (cchs == 0 || cchWildcard == 0) return (cchs == cchWildcard || cchWildcard == 1 && strWildcard.charAt (0) == '*');
					     var isStar0 = (checkStar && allowInitialStar ? strWildcard.charAt (0) == '*' : false);
					     if (isStar0 && strWildcard.charAt (cchWildcard - 1) == '*') return (cchWildcard < 3 || s.indexOf (strWildcard.substring (1, cchWildcard - 1)) >= 0);
					     var qqq = "????";
					     while (qqq.length < s.length) qqq += qqq;

					     if (checkStar) {
						 if (allowInitialStar && isStar0) strWildcard = qqq + strWildcard.substring (1);
						 if (strWildcard.charAt (ich = strWildcard.length - 1) == '*') strWildcard = strWildcard.substring (0, ich) + qqq;
						 cchWildcard = strWildcard.length;
					     }if (cchWildcard < cchs) return false;
					     ich = 0;
					     while (cchWildcard > cchs) {
						 if (allowInitialStar && strWildcard.charAt (ich) == '?') {
						     ++ich;
						 } else if (strWildcard.charAt (ich + cchWildcard - 1) != '?') {
						     return false;
						 }--cchWildcard;
					     }
					     for (var i = cchs; --i >= 0; ) {
						 var charWild = strWildcard.charAt (ich + i);
						 if (charWild == '?') continue;
						 if (charWild != s.charAt (i) && (charWild != '\1' || s.charAt (i) != '?')) return false;
					     }
					     return true;
					 }, "~S,~S,~B,~B");
	c$.join = Clazz.defineMethod (c$, "join", 
				      function (s, c, i0) {
					  if (s.length < i0) return null;
					  var sb =  new org.jmol.util.StringXBuilder ();
					  sb.append (s[i0++]);
					  for (var i = i0; i < s.length; i++) sb.appendC (c).append (s[i]);

					  return sb.toString ();
				      }, "~A,~S,~N");
	c$.replaceQuotedStrings = Clazz.defineMethod (c$, "replaceQuotedStrings", 
						      function (s, list, newList) {
							  var n = list.size ();
							  for (var i = 0; i < n; i++) {
							      var name = list.get (i);
							      var newName = newList.get (i);
							      if (!newName.equals (name)) s = org.jmol.util.TextFormat.simpleReplace (s, "\"" + name + "\"", "\"" + newName + "\"");
							  }
							  return s;
						      }, "~S,java.util.List,java.util.List");
	c$.replaceStrings = Clazz.defineMethod (c$, "replaceStrings", 
						function (s, list, newList) {
						    var n = list.size ();
						    for (var i = 0; i < n; i++) {
							var name = list.get (i);
							var newName = newList.get (i);
							if (!newName.equals (name)) s = org.jmol.util.TextFormat.simpleReplace (s, name, newName);
						    }
						    return s;
						}, "~S,java.util.List,java.util.List");
	Clazz.defineStatics (c$,
			     "formattingStrings", ["0", "0.0", "0.00", "0.000", "0.0000", "0.00000", "0.000000", "0.0000000", "0.00000000", "0.000000000"],
			     "zeros", "0000000000000000000000000000000000000000",
			     "formatAdds", [0.5, 0.05, 0.005, 0.0005, 0.00005, 0.000005, 0.0000005, 0.00000005, 0.000000005, 0.0000000005]);
	c$.useNumberLocalization = c$.prototype.useNumberLocalization =  new Array (1);
    });
    // 
    //// org\jmol\util\StringXBuilder.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    c$ = Clazz.decorateAsClass (function () {
	this.sb = null;
	this.s = null;
	Clazz.instantialize (this, arguments);
    }, org.jmol.util, "StringXBuilder");
    Clazz.makeConstructor (c$, 
			   function () {
			       {
				   this.s = "";
			       }});
    c$.newN = Clazz.defineMethod (c$, "newN", 
				  function (n) {
				      {
					  return new org.jmol.util.StringXBuilder();
				      }}, "~N");
    c$.newS = Clazz.defineMethod (c$, "newS", 
				  function (s) {
				      {
					  var sb = new org.jmol.util.StringXBuilder();
					  sb.s = s;
					  return sb;
				      }}, "~S");
    Clazz.defineMethod (c$, "append", 
			function (s) {
			    {
				this.s += s
			    }return this;
			}, "~S");
    Clazz.defineMethod (c$, "appendC", 
			function (c) {
			    {
				this.s += c;
			    }return this;
			}, "~S");
    Clazz.defineMethod (c$, "appendI", 
			function (i) {
			    {
				this.s += i
			    }return this;
			}, "~N");
    Clazz.defineMethod (c$, "appendB", 
			function (b) {
			    {
				this.s += b
			    }return this;
			}, "~B");
    Clazz.defineMethod (c$, "appendF", 
			function (f) {
			    {
				var sf = "" + f;
				if (sf.indexOf(".") < 0 && sf.indexOf("e") < 0)
				    sf += ".0" ;
				this.s += sf;
			    }return this;
			}, "~N");
    Clazz.defineMethod (c$, "appendD", 
			function (d) {
			    {
				var sf = "" + d;
				if (sf.indexOf(".") < 0 && sf.indexOf("e") < 0)
				    sf += ".0" ;
				this.s += sf;
			    }return this;
			}, "~N");
    Clazz.defineMethod (c$, "appendSB", 
			function (buf) {
			    {
				this.s += buf.s;
			    }return this;
			}, "org.jmol.util.StringXBuilder");
    Clazz.defineMethod (c$, "appendO", 
			function (data) {
			    {
				this.s += data.toString();
			    }return this;
			}, "~O");
    Clazz.defineMethod (c$, "appendCB", 
			function (cb, off, len) {
			    {
				for (var i = len,j=off; --i >= 0;)
				    this.s += cb[j++];
			    }}, "~A,~N,~N");
    Clazz.overrideMethod (c$, "toString", 
			  function () {
			      {
				  return this.s;
			      }});
    Clazz.defineMethod (c$, "length", 
			function () {
			    {
				return this.s.length;
			    }});
    Clazz.defineMethod (c$, "indexOf", 
			function (s) {
			    {
				return this.s.indexOf(s);
			    }}, "~S");
    Clazz.defineMethod (c$, "charAt", 
			function (i) {
			    {
				return this.s.charAt(i);
			    }}, "~N");
    Clazz.defineMethod (c$, "setLength", 
			function (n) {
			    {
				this.s = this.s.substring(0, n);
			    }}, "~N");
    Clazz.defineMethod (c$, "lastIndexOf", 
			function (s) {
			    {
				return this.s.lastIndexOf(s);
			    }}, "~S");
    Clazz.defineMethod (c$, "indexOf2", 
			function (s, i) {
			    {
				return this.s.indexOf(s, i);
			    }}, "~S,~N");
    Clazz.defineMethod (c$, "substring", 
			function (i) {
			    {
				return this.s.substring(i);
			    }}, "~N");
    Clazz.defineMethod (c$, "substring2", 
			function (i, j) {
			    {
				return this.s.substring(i, j);
			    }}, "~N,~N");
    Clazz.defineMethod (c$, "toBytes", 
			function (off, len) {
			    if (len < 0) len = this.length () - off;
			    var b =  Clazz.newByteArray (len, 0);
			    for (var i = off + len, j = i - off; --i >= off; ) b[--j] = (this.charAt (i)).charCodeAt (0);

			    return b;
			}, "~N,~N");
    // 
    //// java\text\MessageFormat.js 
    // 
    ﻿$_J("java.text");
    c$=$_C(function(){
	this.pattern=null;
	$_Z(this,arguments);
    },java.text,"MessageFormat");
    $_K(c$,
	function(pattern){
	    this.pattern=pattern;
	},"~S");
    $_K(c$,
	function(pattern,locale){
	    this.pattern=pattern;
	},"~S,java.util.Locale");
    c$.format=$_M(c$,"format",
		  function(pattern,args){
		      return pattern.replace(/\{(\d+)\}/g,function($0,$1){
			  var i=parseInt($1);
			  if(args==null)return null;
			  return args[i];
		      });
		  },"~S,~A");
    $_M(c$,"format",
	function(obj){
	    return java.text.MessageFormat.format(this.pattern,[obj]);
	},"~O");
    // 
    //// org\jmol\script\Token.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["java.util.Hashtable"], "org.jmol.script.Token", ["java.lang.Boolean", "java.util.ArrayList", "$.Arrays", "org.jmol.util.ArrayUtil", "$.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.tok = 0;
	    this.value = null;
	    this.intValue = 2147483647;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "Token");
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.makeConstructor (c$, 
			       function (tok) {
				   this.tok = tok;
			       }, "~N");
	c$.newTokenIntVal = Clazz.defineMethod (c$, "newTokenIntVal", 
						function (tok, intValue, value) {
						    var token =  new org.jmol.script.Token (tok);
						    token.intValue = intValue;
						    token.value = value;
						    return token;
						}, "~N,~N,~O");
	c$.newTokenObj = Clazz.defineMethod (c$, "newTokenObj", 
					     function (tok, value) {
						 var token =  new org.jmol.script.Token (tok);
						 token.value = value;
						 return token;
					     }, "~N,~O");
	c$.newToken = Clazz.defineMethod (c$, "newToken", 
					  function (tok, intValue) {
					      var token =  new org.jmol.script.Token (tok);
					      token.intValue = intValue;
					      return token;
					  }, "~N,~N");
	c$.intToken = Clazz.defineMethod (c$, "intToken", 
					  function (intValue) {
					      var token =  new org.jmol.script.Token (2);
					      token.intValue = intValue;
					      return token;
					  }, "~N");
	c$.tokAttr = Clazz.defineMethod (c$, "tokAttr", 
					 function (a, b) {
					     return (a & b) == (b & b);
					 }, "~N,~N");
	c$.tokAttrOr = Clazz.defineMethod (c$, "tokAttrOr", 
					   function (a, b1, b2) {
					       return (a & b1) == (b1 & b1) || (a & b2) == (b2 & b2);
					   }, "~N,~N,~N");
	c$.getPrecedence = Clazz.defineMethod (c$, "getPrecedence", 
					       function (tokOperator) {
						   return ((tokOperator >> 4) & 0xF);
					       }, "~N");
	c$.getMaxMathParams = Clazz.defineMethod (c$, "getMaxMathParams", 
						  function (tokCommand) {
						      return ((tokCommand >> 9) & 0x7);
						  }, "~N");
	c$.addToken = Clazz.defineMethod (c$, "addToken", 
					  function (ident, token) {
					      org.jmol.script.Token.tokenMap.put (ident, token);
					  }, "~S,org.jmol.script.Token");
	c$.getTokenFromName = Clazz.defineMethod (c$, "getTokenFromName", 
						  function (name) {
						      return org.jmol.script.Token.tokenMap.get (name);
						  }, "~S");
	c$.getTokFromName = Clazz.defineMethod (c$, "getTokFromName", 
						function (name) {
						    var token = org.jmol.script.Token.getTokenFromName (name.toLowerCase ());
						    return (token == null ? 0 : token.tok);
						}, "~S");
	c$.nameOf = Clazz.defineMethod (c$, "nameOf", 
					function (tok) {
					    for (var token, $token = org.jmol.script.Token.tokenMap.values ().iterator (); $token.hasNext () && ((token = $token.next ()) || true);) {
						if (token.tok == tok) return "" + token.value;
					    }
					    return "0x" + Integer.toHexString (tok);
					}, "~N");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "Token[" + org.jmol.script.Token.astrType[this.tok < 14 ? this.tok : 14] + "(" + (this.tok % (512)) + "/0x" + Integer.toHexString (this.tok) + ")" + ((this.intValue == 2147483647) ? "" : " intValue=" + this.intValue + "(0x" + Integer.toHexString (this.intValue) + ")") + ((this.value == null) ? "" : Clazz.instanceOf (this.value, String) ? " value=\"" + this.value + "\"" : " value=" + this.value) + "]";
			      });
	c$.getCommandSet = Clazz.defineMethod (c$, "getCommandSet", 
					       function (strBegin) {
						   var cmds = "";
						   var htSet =  new java.util.Hashtable ();
						   var nCmds = 0;
						   var s = (strBegin == null || strBegin.length == 0 ? null : strBegin.toLowerCase ());
						   var isMultiCharacter = (s != null && s.length > 1);
						   for (var entry, $entry = org.jmol.script.Token.tokenMap.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
						       var name = entry.getKey ();
						       var token = entry.getValue ();
						       if ((token.tok & 4096) != 0 && (s == null || name.indexOf (s) == 0) && (isMultiCharacter || (token.value).equals (name))) htSet.put (name, Boolean.TRUE);
						   }
						   for (var entry, $entry = htSet.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
						       var name = entry.getKey ();
						       if (name.charAt (name.length - 1) != 's' || !htSet.containsKey (name.substring (0, name.length - 1))) cmds += (nCmds++ == 0 ? "" : ";") + name;
						   }
						   return cmds;
					       }, "~S");
	c$.getAtomPropertiesLike = Clazz.defineMethod (c$, "getAtomPropertiesLike", 
						       function (type) {
							   type = type.toLowerCase ();
							   var v =  new java.util.ArrayList ();
							   var isAll = (type.length == 0);
							   for (var entry, $entry = org.jmol.script.Token.tokenMap.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
							       var name = entry.getKey ();
							       if (name.charAt (0) == '_') continue;
							       var token = entry.getValue ();
							       if (org.jmol.script.Token.tokAttr (token.tok, 1078984704) && (isAll || name.toLowerCase ().startsWith (type))) {
								   if (isAll || !(token.value).toLowerCase ().startsWith (type)) token = org.jmol.script.Token.newTokenObj (token.tok, name);
								   v.add (token);
							       }}
							   return (v.size () == 0 ? null : v);
						       }, "~S");
	c$.getTokensLike = Clazz.defineMethod (c$, "getTokensLike", 
					       function (type) {
						   var attr = (type.equals ("setparam") ? 536870912 : type.equals ("misc") ? 1073741824 : type.equals ("mathfunc") ? 135266304 : 4096);
						   var notattr = (attr == 536870912 ? 1610612736 : 0);
						   var v =  new java.util.ArrayList ();
						   for (var entry, $entry = org.jmol.script.Token.tokenMap.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
						       var name = entry.getKey ();
						       var token = entry.getValue ();
						       if (org.jmol.script.Token.tokAttr (token.tok, attr) && (notattr == 0 || !org.jmol.script.Token.tokAttr (token.tok, notattr))) v.add (name);
						   }
						   var a = v.toArray ( new Array (v.size ()));
						   java.util.Arrays.sort (a);
						   return a;
					       }, "~S");
	c$.getSettableTokFromString = Clazz.defineMethod (c$, "getSettableTokFromString", 
							  function (s) {
							      var tok = org.jmol.script.Token.getTokFromName (s);
							      return (tok != 0 && org.jmol.script.Token.tokAttr (tok, 2048) && !org.jmol.script.Token.tokAttr (tok, 1141899264) ? tok : 0);
							  }, "~S");
	c$.completeCommand = Clazz.defineMethod (c$, "completeCommand", 
						 function (map, isSet, asCommand, str, n) {
						     if (map == null) map = org.jmol.script.Token.tokenMap;
						     else asCommand = false;
						     var v =  new java.util.ArrayList ();
						     str = str.toLowerCase ();
						     for (var name, $name = map.keySet ().iterator (); $name.hasNext () && ((name = $name.next ()) || true);) {
							 if (!name.startsWith (str)) continue;
							 var tok = org.jmol.script.Token.getTokFromName (name);
							 if (asCommand ? org.jmol.script.Token.tokAttr (tok, 4096) : isSet ? org.jmol.script.Token.tokAttr (tok, 536870912) && !org.jmol.script.Token.tokAttr (tok, 1610612736) : true) v.add (name);
						     }
						     return org.jmol.util.ArrayUtil.sortedItem (v, n);
						 }, "java.util.Map,~B,~B,~S,~N");
	c$.getParamType = Clazz.defineMethod (c$, "getParamType", 
					      function (tok) {
						  if (!org.jmol.script.Token.tokAttr (tok, 536870912)) return 0;
						  return tok & 662700032;
					      }, "~N");
	Clazz.defineStatics (c$,
			     "nada", 0,
			     "integer", 2,
			     "decimal", 3,
			     "string", 4,
			     "seqcode", 5,
			     "hash", 6,
			     "varray", 7,
			     "point3f", 8,
			     "point4f", 9,
			     "bitset", 10,
			     "matrix3f", 11,
			     "matrix4f", 12,
			     "listf", 13,
			     "keyword", 14,
			     "astrType", ["nada", "identifier", "integer", "decimal", "string", "seqcode", "hash", "array", "point", "point4", "bitset", "matrix3f", "matrix4f", "listf", "keyword"],
			     "setparam", (536870912),
			     "misc", (1073741824),
			     "deprecatedparam", 1610612736,
			     "identifier", 1073741824,
			     "scriptCommand", (4096),
			     "atomExpressionCommand", 12288,
			     "implicitStringCommand", 20480,
			     "mathExpressionCommand", 36864,
			     "flowCommand", 102400,
			     "shapeCommand", 135168,
			     "noArgs", (262144),
			     "defaultON", (524288),
			     "expression", (1048576),
			     "predefinedset", 3145728,
			     "atomproperty", 1078984704,
			     "strproperty", 1087373312,
			     "intproperty", 1095761920,
			     "floatproperty", 1112539136,
			     "PROPERTYFLAGS", 1137704960,
			     "strparam", 545259520,
			     "intparam", 553648128,
			     "floatparam", 570425344,
			     "booleanparam", 603979776,
			     "paramTypes", (662700032),
			     "mathproperty", 1141899264,
			     "mathfunc", 135266304,
			     "mathop", 269484032,
			     "comparator", 269484288,
			     "center", 12289,
			     "define", 1060866,
			     "$delete", 12291,
			     "display", 1610625028,
			     "fixed", 1060869,
			     "hide", 12294,
			     "restrict", 12295,
			     "subset", 3158024,
			     "zap", 1060873,
			     "print", 36865,
			     "returncmd", 36866,
			     "set", 1085443,
			     "$var", 36868,
			     "log", 36869,
			     "echo", 537022465,
			     "help", 20482,
			     "hover", 544771,
			     "message", 20485,
			     "pause", 20487,
			     "elseif", 102402,
			     "elsecmd", 364547,
			     "endifcmd", 364548,
			     "whilecmd", 102406,
			     "breakcmd", 102407,
			     "continuecmd", 102408,
			     "end", 1150985,
			     "switchcmd", 102410,
			     "casecmd", 102411,
			     "catchcmd", 102412,
			     "defaultcmd", 102413,
			     "trycmd", 364558,
			     "animation", 4097,
			     "assign", 4098,
			     "background", 1610616835,
			     "bind", 4100,
			     "bondorder", 4101,
			     "calculate", 4102,
			     "cd", 1069064,
			     "centerAt", 4105,
			     "connect", 4106,
			     "console", 528395,
			     "delay", 528397,
			     "depth", 554176526,
			     "exit", 266255,
			     "exitjmol", 266256,
			     "font", 4114,
			     "frame", 4115,
			     "gotocmd", 20500,
			     "hbond", 1612189718,
			     "history", 1610616855,
			     "initialize", 266264,
			     "invertSelected", 4121,
			     "loop", 528410,
			     "mapProperty", 1052700,
			     "minimize", 4126,
			     "move", 4128,
			     "moveto", 4130,
			     "navigate", 4131,
			     "parallel", 102436,
			     "plot", 4133,
			     "pop", 266278,
			     "process", 102439,
			     "push", 266280,
			     "quit", 266281,
			     "ramachandran", 1052714,
			     "redomove", 4139,
			     "refresh", 266284,
			     "reset", 4141,
			     "restore", 4142,
			     "resume", 266287,
			     "rotate", 528432,
			     "rotateSelected", 4145,
			     "save", 4146,
			     "selectionhalos", 1611141171,
			     "show", 4148,
			     "slab", 554176565,
			     "spin", 1611141175,
			     "ssbond", 1611141176,
			     "step", 266298,
			     "stereo", 528443,
			     "sync", 4156,
			     "timeout", 536875070,
			     "translate", 4160,
			     "translateSelected", 4162,
			     "unbind", 4164,
			     "undomove", 4165,
			     "vibration", 4166,
			     "zoom", 4168,
			     "zoomTo", 4170,
			     "axes", 1611272194,
			     "dipole", 135174,
			     "draw", 135176,
			     "frank", 1611272202,
			     "isosurface", 135180,
			     "lcaocartoon", 135182,
			     "measurements", 537006096,
			     "mo", 1183762,
			     "pmesh", 135188,
			     "plot3d", 135190,
			     "polyhedra", 135192,
			     "struts", 1708058,
			     "unitcell", 1614417948,
			     "vector", 135198,
			     "wireframe", 659488,
			     "expressionBegin", 1048577,
			     "expressionEnd", 1048578,
			     "all", 1048579,
			     "branch", 1048580,
			     "coord", 1048582,
			     "dollarsign", 1048583,
			     "per", 1048584,
			     "isaromatic", 1048585,
			     "leftbrace", 1048586,
			     "none", 1048587,
			     "off", 1048588,
			     "on", 1048589,
			     "rightbrace", 1048590,
			     "semicolon", 1048591,
			     "spec_alternate", 1048607,
			     "spec_atom", 1048608,
			     "spec_chain", 1048609,
			     "spec_model", 1048610,
			     "spec_model2", 1048611,
			     "spec_name_pattern", 1048612,
			     "spec_resid", 1048613,
			     "spec_seqcode", 1048614,
			     "spec_seqcode_range", 1048615,
			     "amino", 3145730,
			     "dna", 3145732,
			     "hetero", 1613758470,
			     "helixalpha", 3145735,
			     "helix310", 3145736,
			     "helixpi", 3145738,
			     "hydrogen", 1613758476,
			     "nucleic", 3145742,
			     "protein", 3145744,
			     "purine", 3145746,
			     "pyrimidine", 3145748,
			     "rna", 3145750,
			     "solvent", 1613758488,
			     "sidechain", 3145754,
			     "surface", 3145756,
			     "thismodel", 3145758,
			     "sheet", 3145760,
			     "spine", 3145762,
			     "carbohydrate", 3145764,
			     "clickable", 3145766,
			     "displayed", 3145768,
			     "hidden", 3145770,
			     "specialposition", 3145772,
			     "visible", 3145774,
			     "basemodel", 3145776,
			     "leftparen", 269484048,
			     "rightparen", 269484049,
			     "opIf", 806354977,
			     "colon", 269484066,
			     "comma", 269484080,
			     "leftsquare", 269484096,
			     "rightsquare", 269484097,
			     "opOr", 269484112,
			     "opXor", 269484113,
			     "opToggle", 269484114,
			     "opAnd", 269484128,
			     "opNot", 269484144,
			     "opAND", 269484160,
			     "opGT", 269484432,
			     "opGE", 269484433,
			     "opLE", 269484434,
			     "opLT", 269484435,
			     "opEQ", 269484436,
			     "opNE", 269484438,
			     "minus", 269484192,
			     "plus", 269484193,
			     "divide", 269484208,
			     "times", 269484209,
			     "percent", 269484210,
			     "leftdivide", 269484211,
			     "unaryMinus", 269484224,
			     "minusMinus", 269484225,
			     "plusPlus", 269484226,
			     "timestimes", 269484227,
			     "propselector", 269484241,
			     "andequals", 269484242,
			     "minmaxmask", 480,
			     "min", 32,
			     "max", 64,
			     "average", 96,
			     "sum", 128,
			     "sum2", 160,
			     "stddev", 192,
			     "selectedfloat", 224,
			     "allfloat", 256,
			     "settable", 2048,
			     "atoms", 1141899265,
			     "bonds", 1678770178,
			     "length", 1141899267,
			     "lines", 1141899268,
			     "reverse", 1141899269,
			     "size", 1141899270,
			     "type", 1141899272,
			     "boundbox", 1679429641,
			     "xyz", 1146095626,
			     "fracxyz", 1146095627,
			     "screenxyz", 1146095628,
			     "fuxyz", 1146095629,
			     "unitxyz", 1146093582,
			     "vibxyz", 1146095631,
			     "w", 1141899280,
			     "keys", 1141899281,
			     "occupancy", 1129318401,
			     "radius", 1666189314,
			     "structure", 1641025539,
			     "atomtype", 1087375361,
			     "atomname", 1087375362,
			     "altloc", 1087373315,
			     "chain", 1087373316,
			     "element", 1087375365,
			     "group", 1087373318,
			     "group1", 1087373319,
			     "sequence", 1087373320,
			     "identify", 1087373321,
			     "insertion", 1087373322,
			     "shape", 1087373323,
			     "strucid", 1087373324,
			     "symbol", 1087375373,
			     "symmetry", 1089470478,
			     "atomno", 1095763969,
			     "atomid", 1095761922,
			     "atomindex", 1095761923,
			     "bondcount", 1095761924,
			     "cell", 1095761925,
			     "configuration", 1095766022,
			     "elemisono", 1095761927,
			     "elemno", 1095763976,
			     "formalcharge", 1632634889,
			     "groupid", 1095761930,
			     "groupindex", 1095761931,
			     "model", 1095766028,
			     "modelindex", 1095761933,
			     "molecule", 1095761934,
			     "polymer", 1095761935,
			     "polymerlength", 1095761936,
			     "resno", 1095761937,
			     "site", 1095761938,
			     "strucno", 1095761939,
			     "valence", 1095763988,
			     "adpmax", 1112539137,
			     "adpmin", 1112539138,
			     "covalent", 1112539139,
			     "eta", 1112539140,
			     "mass", 1112539141,
			     "omega", 1112539142,
			     "phi", 1112539143,
			     "psi", 1112539144,
			     "screenx", 1112539145,
			     "screeny", 1112539146,
			     "screenz", 1112539147,
			     "straightness", 1112539148,
			     "surfacedistance", 1112539149,
			     "theta", 1112539150,
			     "unitx", 1112539151,
			     "unity", 1112539152,
			     "unitz", 1112539153,
			     "atomx", 1112541185,
			     "atomy", 1112541186,
			     "atomz", 1112541187,
			     "fracx", 1112541188,
			     "fracy", 1112541189,
			     "fracz", 1112541190,
			     "fux", 1112541191,
			     "fuy", 1112541192,
			     "fuz", 1112541193,
			     "hydrophobic", 1114638346,
			     "ionic", 1112541195,
			     "partialcharge", 1112541196,
			     "property", 1716520973,
			     "selected", 1114638350,
			     "temperature", 1112541199,
			     "vanderwaals", 1649412112,
			     "vectorscale", 1649410065,
			     "vibx", 1112541202,
			     "viby", 1112541203,
			     "vibz", 1112541204,
			     "x", 1112541205,
			     "y", 1112541206,
			     "z", 1112541207,
			     "backbone", 1115297793,
			     "cartoon", 1113200642,
			     "dots", 1113198595,
			     "ellipsoid", 1113198596,
			     "geosurface", 1113198597,
			     "halo", 1113200646,
			     "meshRibbon", 1113200647,
			     "ribbon", 1113200649,
			     "rocket", 1113200650,
			     "spacefill", 1113200651,
			     "star", 1113200652,
			     "strands", 1650071565,
			     "trace", 1113200654,
			     "angle", 135266305,
			     "array", 135266306,
			     "axisangle", 135266307,
			     "color", 1766856708,
			     "compare", 135270405,
			     "connected", 135266310,
			     "data", 135270407,
			     "format", 1288701960,
			     "$function", 135368713,
			     "getproperty", 135270410,
			     "label", 1826248715,
			     "helix", 137363468,
			     "measure", 1746538509,
			     "now", 135266318,
			     "plane", 135266319,
			     "point", 135266320,
			     "quaternion", 135270417,
			     "sort", 1276117010,
			     "count", 1276117011,
			     "within", 135266324,
			     "write", 135270421,
			     "cache", 135270422,
			     "acos", 135266819,
			     "sin", 135266820,
			     "cos", 135266821,
			     "sqrt", 135266822,
			     "file", 1229984263,
			     "forcmd", 135369224,
			     "ifcmd", 135369225,
			     "abs", 135266826,
			     "javascript", 135287308,
			     "div", 1276117504,
			     "dot", 1276117505,
			     "join", 1276117506,
			     "mul", 1276117507,
			     "split", 1276117508,
			     "sub", 1276117509,
			     "trim", 1276117510,
			     "volume", 1313866247,
			     "col", 1276117512,
			     "row", 1276117513,
			     "cross", 135267329,
			     "load", 135271426,
			     "random", 135267332,
			     "script", 135271429,
			     "substructure", 1238369286,
			     "search", 135267335,
			     "smiles", 135267336,
			     "contact", 135402505,
			     "add", 1276118017,
			     "distance", 1276118018,
			     "find", 1276118532,
			     "replace", 1276118019,
			     "hkl", 135267841,
			     "intersection", 135267842,
			     "prompt", 135304707,
			     "select", 135280132,
			     "bin", 1276118529,
			     "symop", 1297090050,
			     "bondmode", 1610612737,
			     "fontsize", 1610612738,
			     "measurementnumbers", 1610612739,
			     "scale3d", 1610612740,
			     "togglelabel", 1610612741,
			     "backgroundmodel", 536870914,
			     "debug", 536870916,
			     "defaultlattice", 536870918,
			     "highlight", 536870920,
			     "showscript", 536870922,
			     "specular", 536870924,
			     "trajectory", 536870926,
			     "undo", 536870928,
			     "usercolorscheme", 536870930,
			     "appletproxy", 545259522,
			     "atomtypes", 545259524,
			     "axescolor", 545259526,
			     "axis1color", 545259528,
			     "axis2color", 545259530,
			     "axis3color", 545259532,
			     "backgroundcolor", 545259534,
			     "boundboxcolor", 545259536,
			     "currentlocalpath", 545259538,
			     "dataseparator", 545259540,
			     "defaultanglelabel", 545259542,
			     "defaultlabelpdb", 545259543,
			     "defaultlabelxyz", 545259544,
			     "defaultcolorscheme", 545259545,
			     "defaultdirectory", 545259546,
			     "defaultdistancelabel", 545259547,
			     "defaultdropscript", 545259548,
			     "defaultloadfilter", 545259549,
			     "defaultloadscript", 545259550,
			     "defaults", 545259552,
			     "defaulttorsionlabel", 545259554,
			     "defaultvdw", 545259555,
			     "edsurlcutoff", 545259556,
			     "edsurlformat", 545259557,
			     "energyunits", 545259558,
			     "filecachedirectory", 545259559,
			     "forcefield", 545259560,
			     "helppath", 545259561,
			     "hoverlabel", 545259562,
			     "language", 545259564,
			     "loadformat", 545259565,
			     "loadligandformat", 545259566,
			     "logfile", 545259567,
			     "measurementunits", 545259568,
			     "nmrurlformat", 545259569,
			     "pathforallfiles", 545259570,
			     "picking", 545259572,
			     "pickingstyle", 545259574,
			     "picklabel", 545259576,
			     "propertycolorscheme", 545259578,
			     "quaternionframe", 545259580,
			     "smilesurlformat", 545259582,
			     "smiles2dimageformat", 545259584,
			     "unitcellcolor", 545259586,
			     "axesscale", 570425346,
			     "bondtolerance", 570425348,
			     "cameradepth", 570425350,
			     "defaultdrawarrowscale", 570425352,
			     "defaulttranslucent", 570425354,
			     "dipolescale", 570425356,
			     "ellipsoidaxisdiameter", 570425358,
			     "gestureswipefactor", 570425359,
			     "hbondsangleminimum", 570425360,
			     "hbondsdistancemaximum", 570425361,
			     "hoverdelay", 570425362,
			     "loadatomdatatolerance", 570425363,
			     "minbonddistance", 570425364,
			     "minimizationcriterion", 570425365,
			     "mousedragfactor", 570425366,
			     "mousewheelfactor", 570425367,
			     "multiplebondradiusfactor", 570425368,
			     "multiplebondspacing", 570425369,
			     "navfps", 570425370,
			     "navigationdepth", 570425371,
			     "navigationslab", 570425372,
			     "navigationspeed", 570425374,
			     "navx", 570425376,
			     "navy", 570425378,
			     "navz", 570425380,
			     "pointgroupdistancetolerance", 570425382,
			     "pointgrouplineartolerance", 570425384,
			     "rotationradius", 570425388,
			     "scaleangstromsperinch", 570425390,
			     "sheetsmoothing", 570425392,
			     "slabrange", 570425393,
			     "solventproberadius", 570425394,
			     "spinfps", 570425396,
			     "spinx", 570425398,
			     "spiny", 570425400,
			     "spinz", 570425402,
			     "stereodegrees", 570425404,
			     "strutdefaultradius", 570425406,
			     "strutlengthmaximum", 570425408,
			     "vibrationperiod", 570425412,
			     "vibrationscale", 570425414,
			     "visualrange", 570425416,
			     "ambientpercent", 553648130,
			     "animationfps", 553648132,
			     "axesmode", 553648134,
			     "bondradiusmilliangstroms", 553648136,
			     "delaymaximumms", 553648138,
			     "diffusepercent", 553648142,
			     "dotdensity", 553648143,
			     "dotscale", 553648144,
			     "ellipsoiddotcount", 553648145,
			     "helixstep", 553648146,
			     "hermitelevel", 553648147,
			     "historylevel", 553648148,
			     "isosurfacepropertysmoothingpower", 553648149,
			     "loglevel", 553648150,
			     "meshscale", 553648151,
			     "minimizationsteps", 553648152,
			     "minpixelselradius", 553648153,
			     "percentvdwatom", 553648154,
			     "perspectivemodel", 553648155,
			     "phongexponent", 553648156,
			     "pickingspinrate", 553648158,
			     "propertyatomnumberfield", 553648159,
			     "propertyatomnumbercolumncount", 553648160,
			     "propertydatacolumncount", 553648162,
			     "propertydatafield", 553648164,
			     "repaintwaitms", 553648165,
			     "ribbonaspectratio", 553648166,
			     "scriptreportinglevel", 553648168,
			     "smallmoleculemaxatoms", 553648170,
			     "specularexponent", 553648172,
			     "specularpercent", 553648174,
			     "specularpower", 553648176,
			     "strandcount", 553648178,
			     "strandcountformeshribbon", 553648180,
			     "strandcountforstrands", 553648182,
			     "strutspacing", 553648184,
			     "zdepth", 553648186,
			     "zslab", 553648188,
			     "zshadepower", 553648190,
			     "allowembeddedscripts", 603979778,
			     "allowgestures", 603979780,
			     "allowkeystrokes", 603979781,
			     "allowmodelkit", 603979782,
			     "allowmoveatoms", 603979783,
			     "allowmultitouch", 603979784,
			     "allowrotateselected", 603979785,
			     "antialiasdisplay", 603979786,
			     "antialiasimages", 603979788,
			     "antialiastranslucent", 603979790,
			     "appendnew", 603979792,
			     "applysymmetrytobonds", 603979794,
			     "atompicking", 603979796,
			     "autobond", 603979798,
			     "autofps", 603979800,
			     "axesmolecular", 603979804,
			     "axesorientationrasmol", 603979806,
			     "axesunitcell", 603979808,
			     "axeswindow", 603979810,
			     "bondmodeor", 603979812,
			     "bondpicking", 603979814,
			     "cartoonbaseedges", 603979818,
			     "cartoonrockets", 603979819,
			     "cartoonfancy", 603979820,
			     "chaincasesensitive", 603979821,
			     "colorrasmol", 603979822,
			     "debugscript", 603979824,
			     "defaultstructuredssp", 603979825,
			     "disablepopupmenu", 603979826,
			     "displaycellparameters", 603979828,
			     "dotsselectedonly", 603979829,
			     "dotsurface", 603979830,
			     "dragselected", 603979831,
			     "drawhover", 603979832,
			     "drawpicking", 603979833,
			     "dsspcalchydrogen", 603979834,
			     "dynamicmeasurements", 603979835,
			     "ellipsoidarcs", 603979836,
			     "ellipsoidaxes", 603979837,
			     "ellipsoidball", 603979838,
			     "ellipsoiddots", 603979839,
			     "ellipsoidfill", 603979840,
			     "filecaching", 603979842,
			     "fontcaching", 603979844,
			     "fontscaling", 603979845,
			     "forceautobond", 603979846,
			     "fractionalrelative", 603979848,
			     "greyscalerendering", 603979850,
			     "hbondsbackbone", 603979852,
			     "hbondsrasmol", 603979853,
			     "hbondssolid", 603979854,
			     "hidenameinpopup", 603979858,
			     "hidenavigationpoint", 603979860,
			     "hidenotselected", 603979862,
			     "highresolution", 603979864,
			     "imagestate", 603979868,
			     "iskiosk", 603979869,
			     "isosurfacekey", 603979870,
			     "isosurfacepropertysmoothing", 603979871,
			     "justifymeasurements", 603979872,
			     "languagetranslation", 603979873,
			     "legacyautobonding", 603979874,
			     "logcommands", 603979875,
			     "loggestures", 603979876,
			     "measureallmodels", 603979877,
			     "measurementlabels", 603979878,
			     "messagestylechime", 603979879,
			     "minimizationrefresh", 603979880,
			     "minimizationsilent", 603979881,
			     "modelkitmode", 603979882,
			     "monitorenergy", 603979883,
			     "multiprocessor", 603979884,
			     "navigatesurface", 603979885,
			     "navigationmode", 603979886,
			     "navigationperiodic", 603979887,
			     "partialdots", 603979888,
			     "pdbaddhydrogens", 603979889,
			     "pdbgetheader", 603979890,
			     "pdbsequential", 603979891,
			     "perspectivedepth", 603979892,
			     "preservestate", 603979893,
			     "rangeselected", 603979894,
			     "refreshing", 603979896,
			     "ribbonborder", 603979898,
			     "rocketbarrels", 603979900,
			     "saveproteinstructurestate", 603979902,
			     "scriptqueue", 603979904,
			     "selectallmodels", 603979906,
			     "selecthetero", 603979908,
			     "selecthydrogen", 603979910,
			     "showaxes", 603979914,
			     "showboundbox", 603979916,
			     "showfrank", 603979918,
			     "showhiddenselectionhalos", 603979920,
			     "showhydrogens", 603979922,
			     "showkeystrokes", 603979924,
			     "showmeasurements", 603979926,
			     "showmultiplebonds", 603979928,
			     "shownavigationpointalways", 603979930,
			     "showtiming", 603979934,
			     "showunitcell", 603979936,
			     "slabbyatom", 603979938,
			     "slabbymolecule", 603979940,
			     "slabenabled", 603979942,
			     "smartaromatic", 603979944,
			     "solventprobe", 603979948,
			     "ssbondsbackbone", 603979952,
			     "statusreporting", 603979954,
			     "strutsmultiple", 603979955,
			     "syncmouse", 603979956,
			     "syncscript", 603979958,
			     "testflag1", 603979960,
			     "testflag2", 603979962,
			     "testflag3", 603979964,
			     "testflag4", 603979966,
			     "tracealpha", 603979967,
			     "usearcball", 603979969,
			     "useminimizationthread", 603979970,
			     "usenumberlocalization", 603979972,
			     "vectorsymmetry", 603979973,
			     "waitformoveto", 603979974,
			     "windowcentered", 603979975,
			     "wireframerotation", 603979976,
			     "zerobasedxyzrasmol", 603979978,
			     "zoomenabled", 603979980,
			     "zoomlarge", 603979982,
			     "zshade", 603979984,
			     "absolute", 1073741826,
			     "addhydrogens", 1073741828,
			     "adjust", 1073741830,
			     "align", 1073741832,
			     "allconnected", 1073741834,
			     "angstroms", 1073741836,
			     "anisotropy", 1073741838,
			     "append", 1073741839,
			     "arc", 1074790416,
			     "area", 1073741842,
			     "aromatic", 1076887572,
			     "arrow", 1073741846,
			     "as", 1073741848,
			     "atomicorbital", 1073741850,
			     "auto", 1073741852,
			     "axis", 1073741854,
			     "babel", 1073741856,
			     "babel21", 1073741858,
			     "back", 1073741860,
			     "barb", 1073741861,
			     "backlit", 1073741862,
			     "basepair", 1073741864,
			     "binary", 1073741866,
			     "blockdata", 1073741868,
			     "bondset", 1073741870,
			     "bottom", 1073741871,
			     "brillouin", 1073741872,
			     "cancel", 1073741874,
			     "cap", 1074790451,
			     "cavity", 1073741876,
			     "centroid", 1073741877,
			     "check", 1073741878,
			     "chemical", 1073741879,
			     "circle", 1073741880,
			     "clash", 1073741881,
			     "clear", 1073741882,
			     "clipboard", 1073741884,
			     "collapsed", 1073741886,
			     "colorscheme", 1073741888,
			     "command", 1073741890,
			     "commands", 1073741892,
			     "constraint", 1073741894,
			     "contour", 1073741896,
			     "contourlines", 1073741898,
			     "contours", 1073741900,
			     "corners", 1073741902,
			     "create", 1073741904,
			     "criterion", 1073741905,
			     "crossed", 1073741906,
			     "curve", 1073741908,
			     "cutoff", 1073741910,
			     "cylinder", 1073741912,
			     "density", 1073741914,
			     "dssp", 1073741915,
			     "diameter", 1073741916,
			     "direction", 1073741918,
			     "discrete", 1073741920,
			     "displacement", 1073741922,
			     "distancefactor", 1073741924,
			     "dotted", 1073741926,
			     "downsample", 1073741928,
			     "drawing", 1073741929,
			     "eccentricity", 1073741930,
			     "ed", 1074790508,
			     "edges", 1073741934,
			     "energy", 1073741935,
			     "error", 1073741936,
			     "facecenteroffset", 1073741937,
			     "fill", 1073741938,
			     "filter", 1073741940,
			     "first", 1073741942,
			     "fixedtemp", 1073741946,
			     "flat", 1073741948,
			     "fps", 1074790526,
			     "from", 1073741952,
			     "front", 1073741954,
			     "frontedges", 1073741956,
			     "frontlit", 1073741958,
			     "frontonly", 1073741960,
			     "full", 1073741961,
			     "fullplane", 1073741962,
			     "fullylit", 1073741964,
			     "functionxy", 1073741966,
			     "functionxyz", 1073741968,
			     "gridpoints", 1073741970,
			     "homo", 1073741973,
			     "id", 1074790550,
			     "ignore", 1073741976,
			     "inchi", 1073741977,
			     "inchikey", 1073741978,
			     "image", 1073741979,
			     "$in", 1073741980,
			     "increment", 1073741981,
			     "info", 1073741982,
			     "inline", 1073741983,
			     "insideout", 1073741984,
			     "interior", 1073741986,
			     "internal", 1073741988,
			     "intramolecular", 1073741989,
			     "intermolecular", 1073741990,
			     "jmol", 1073741992,
			     "last", 1073741993,
			     "lattice", 1073741994,
			     "lighting", 1073741995,
			     "left", 1073741996,
			     "line", 1073741998,
			     "link", 1073741999,
			     "linedata", 1073742000,
			     "list", 1073742001,
			     "lobe", 1073742002,
			     "lonepair", 1073742004,
			     "lp", 1073742006,
			     "lumo", 1073742008,
			     "manifest", 1073742010,
			     "maxset", 1073742014,
			     "menu", 1073742015,
			     "mep", 1073742016,
			     "mesh", 1073742018,
			     "middle", 1073742019,
			     "minset", 1073742020,
			     "mlp", 1073742022,
			     "mode", 1073742024,
			     "modify", 1073742025,
			     "modifyorcreate", 1073742026,
			     "modelbased", 1073742028,
			     "molecular", 1073742030,
			     "monomer", 1073742032,
			     "mrc", 1073742033,
			     "msms", 1073742034,
			     "name", 1073742035,
			     "nci", 1073742036,
			     "next", 1073742037,
			     "nmr", 1073742038,
			     "nocontourlines", 1073742039,
			     "nocross", 1073742040,
			     "nodebug", 1073742041,
			     "nodots", 1073742042,
			     "noedges", 1073742044,
			     "nofill", 1073742046,
			     "nohead", 1073742048,
			     "noload", 1073742050,
			     "nomesh", 1073742052,
			     "noplane", 1073742054,
			     "normal", 1073742056,
			     "notfrontonly", 1073742058,
			     "notriangles", 1073742060,
			     "obj", 1073742062,
			     "object", 1073742064,
			     "offset", 1073742066,
			     "offsetside", 1073742068,
			     "once", 1073742070,
			     "only", 1073742072,
			     "opaque", 1073742074,
			     "orbital", 1073742076,
			     "orientation", 1073742077,
			     "origin", 1073742078,
			     "out", 1073742079,
			     "packed", 1073742080,
			     "palindrome", 1073742082,
			     "parameters", 1073742083,
			     "path", 1073742084,
			     "pdb", 1074790662,
			     "pdbheader", 1073742088,
			     "period", 1073742090,
			     "perpendicular", 1073742092,
			     "phase", 1073742094,
			     "play", 1073742096,
			     "playrev", 1073742098,
			     "pocket", 1073742100,
			     "pointgroup", 1073742102,
			     "pointsperangstrom", 1073742104,
			     "polygon", 1073742106,
			     "prev", 1073742108,
			     "probe", 1073742109,
			     "rad", 1073742110,
			     "radical", 1073742112,
			     "range", 1073742114,
			     "rasmol", 1073742116,
			     "reference", 1073742118,
			     "remove", 1073742119,
			     "residue", 1073742120,
			     "resolution", 1073742122,
			     "reversecolor", 1073742124,
			     "rewind", 1073742126,
			     "right", 1073742128,
			     "rotate45", 1073742130,
			     "rotation", 1073742132,
			     "rubberband", 1073742134,
			     "sasurface", 1073742136,
			     "scale", 1073742138,
			     "scene", 1073742139,
			     "selection", 1073742140,
			     "shapely", 1073742144,
			     "sigma", 1073742146,
			     "sign", 1073742147,
			     "silent", 1073742148,
			     "solid", 1073742150,
			     "spacegroup", 1073742152,
			     "sphere", 1073742154,
			     "squared", 1073742156,
			     "state", 1073742158,
			     "stop", 1073742162,
			     "supercell", 1073742163,
			     "ticks", 1073742164,
			     "title", 1073742166,
			     "titleformat", 1073742168,
			     "to", 1074790746,
			     "top", 1074790748,
			     "torsion", 1073742174,
			     "transform", 1073742176,
			     "translation", 1073742178,
			     "translucent", 1073742180,
			     "triangles", 1073742182,
			     "url", 1074790760,
			     "user", 1073742186,
			     "val", 1073742188,
			     "variable", 1073742190,
			     "variables", 1073742192,
			     "vertices", 1073742194,
			     "spacebeforesquare", 1073742195,
			     "width", 1073742196);
	c$.tokenSpaceBeforeSquare = c$.prototype.tokenSpaceBeforeSquare = org.jmol.script.Token.newTokenObj (1073742195, " ");
	c$.tokenOn = c$.prototype.tokenOn = org.jmol.script.Token.newTokenIntVal (1048589, 1, "on");
	c$.tokenOff = c$.prototype.tokenOff = org.jmol.script.Token.newTokenIntVal (1048588, 0, "off");
	c$.tokenAll = c$.prototype.tokenAll = org.jmol.script.Token.newTokenObj (1048579, "all");
	c$.tokenIf = c$.prototype.tokenIf = org.jmol.script.Token.newTokenObj (135369225, "if");
	c$.tokenAnd = c$.prototype.tokenAnd = org.jmol.script.Token.newTokenObj (269484128, "and");
	c$.tokenAND = c$.prototype.tokenAND = org.jmol.script.Token.newTokenObj (269484160, "");
	c$.tokenOr = c$.prototype.tokenOr = org.jmol.script.Token.newTokenObj (269484112, "or");
	c$.tokenAndFALSE = c$.prototype.tokenAndFALSE = org.jmol.script.Token.newTokenObj (269484128, "and");
	c$.tokenOrTRUE = c$.prototype.tokenOrTRUE = org.jmol.script.Token.newTokenObj (269484112, "or");
	c$.tokenOpIf = c$.prototype.tokenOpIf = org.jmol.script.Token.newTokenObj (806354977, "?");
	c$.tokenComma = c$.prototype.tokenComma = org.jmol.script.Token.newTokenObj (269484080, ",");
	c$.tokenDefineString = c$.prototype.tokenDefineString = org.jmol.script.Token.newTokenIntVal (1060866, 4, "@");
	c$.tokenPlus = c$.prototype.tokenPlus = org.jmol.script.Token.newTokenObj (269484193, "+");
	c$.tokenMinus = c$.prototype.tokenMinus = org.jmol.script.Token.newTokenObj (269484192, "-");
	c$.tokenTimes = c$.prototype.tokenTimes = org.jmol.script.Token.newTokenObj (269484209, "*");
	c$.tokenDivide = c$.prototype.tokenDivide = org.jmol.script.Token.newTokenObj (269484208, "/");
	c$.tokenLeftParen = c$.prototype.tokenLeftParen = org.jmol.script.Token.newTokenObj (269484048, "(");
	c$.tokenRightParen = c$.prototype.tokenRightParen = org.jmol.script.Token.newTokenObj (269484049, ")");
	c$.tokenArraySquare = c$.prototype.tokenArraySquare = org.jmol.script.Token.newTokenObj (135266306, "[");
	c$.tokenArraySelector = c$.prototype.tokenArraySelector = org.jmol.script.Token.newTokenObj (269484096, "[");
	c$.tokenExpressionBegin = c$.prototype.tokenExpressionBegin = org.jmol.script.Token.newTokenObj (1048577, "expressionBegin");
	c$.tokenExpressionEnd = c$.prototype.tokenExpressionEnd = org.jmol.script.Token.newTokenObj (1048578, "expressionEnd");
	c$.tokenConnected = c$.prototype.tokenConnected = org.jmol.script.Token.newTokenObj (135266310, "connected");
	c$.tokenCoordinateBegin = c$.prototype.tokenCoordinateBegin = org.jmol.script.Token.newTokenObj (1048586, "{");
	c$.tokenRightBrace = c$.prototype.tokenRightBrace = org.jmol.script.Token.newTokenObj (1048590, "}");
	c$.tokenCoordinateEnd = c$.prototype.tokenCoordinateEnd = org.jmol.script.Token.tokenRightBrace;
	c$.tokenColon = c$.prototype.tokenColon = org.jmol.script.Token.newTokenObj (269484066, ":");
	c$.tokenSetCmd = c$.prototype.tokenSetCmd = org.jmol.script.Token.newTokenObj (1085443, "set");
	c$.tokenSet = c$.prototype.tokenSet = org.jmol.script.Token.newTokenIntVal (1085443, 61, "");
	c$.tokenSetArray = c$.prototype.tokenSetArray = org.jmol.script.Token.newTokenIntVal (1085443, 91, "");
	c$.tokenSetProperty = c$.prototype.tokenSetProperty = org.jmol.script.Token.newTokenIntVal (1085443, 46, "");
	c$.tokenSetVar = c$.prototype.tokenSetVar = org.jmol.script.Token.newTokenIntVal (1085443, 61, "var");
	c$.tokenEquals = c$.prototype.tokenEquals = org.jmol.script.Token.newTokenObj (269484436, "=");
	c$.tokenScript = c$.prototype.tokenScript = org.jmol.script.Token.newTokenObj (135271429, "script");
	c$.tokenSwitch = c$.prototype.tokenSwitch = org.jmol.script.Token.newTokenObj (102410, "switch");
	c$.tokenMap = c$.prototype.tokenMap =  new java.util.Hashtable ();
	{
	    var arrayPairs = ["(", org.jmol.script.Token.tokenLeftParen, ")", org.jmol.script.Token.tokenRightParen, "and", org.jmol.script.Token.tokenAnd, "&", null, "&&", null, "or", org.jmol.script.Token.tokenOr, "|", null, "||", null, "?", org.jmol.script.Token.tokenOpIf, ",", org.jmol.script.Token.tokenComma, "+=",  new org.jmol.script.Token (269484242), "-=", null, "*=", null, "/=", null, "\\=", null, "&=", null, "|=", null, "not",  new org.jmol.script.Token (269484144), "!", null, "xor",  new org.jmol.script.Token (269484113), "tog",  new org.jmol.script.Token (269484114), "<",  new org.jmol.script.Token (269484435), "<=",  new org.jmol.script.Token (269484434), ">=",  new org.jmol.script.Token (269484433), ">",  new org.jmol.script.Token (269484432), "=", org.jmol.script.Token.tokenEquals, "==", null, "!=",  new org.jmol.script.Token (269484438), "<>", null, "within",  new org.jmol.script.Token (135266324), ".",  new org.jmol.script.Token (1048584), "[",  new org.jmol.script.Token (269484096), "]",  new org.jmol.script.Token (269484097), "{",  new org.jmol.script.Token (1048586), "}",  new org.jmol.script.Token (1048590), "$",  new org.jmol.script.Token (1048583), "%",  new org.jmol.script.Token (269484210), ":", org.jmol.script.Token.tokenColon, ";",  new org.jmol.script.Token (1048591), "++",  new org.jmol.script.Token (269484226), "--",  new org.jmol.script.Token (269484225), "**",  new org.jmol.script.Token (269484227), "+", org.jmol.script.Token.tokenPlus, "-", org.jmol.script.Token.tokenMinus, "*", org.jmol.script.Token.tokenTimes, "/", org.jmol.script.Token.tokenDivide, "\\",  new org.jmol.script.Token (269484211), "animation",  new org.jmol.script.Token (4097), "anim", null, "assign",  new org.jmol.script.Token (4098), "axes",  new org.jmol.script.Token (1611272194), "backbone",  new org.jmol.script.Token (1115297793), "background",  new org.jmol.script.Token (1610616835), "bind",  new org.jmol.script.Token (4100), "bondorder",  new org.jmol.script.Token (4101), "boundbox",  new org.jmol.script.Token (1679429641), "boundingBox", null, "break",  new org.jmol.script.Token (102407), "calculate",  new org.jmol.script.Token (4102), "cartoon",  new org.jmol.script.Token (1113200642), "cartoons", null, "case",  new org.jmol.script.Token (102411), "catch",  new org.jmol.script.Token (102412), "cd",  new org.jmol.script.Token (1069064), "center",  new org.jmol.script.Token (12289), "centre", null, "centerat",  new org.jmol.script.Token (4105), "color",  new org.jmol.script.Token (1766856708), "colour", null, "compare",  new org.jmol.script.Token (135270405), "configuration",  new org.jmol.script.Token (1095766022), "conformation", null, "config", null, "connect",  new org.jmol.script.Token (4106), "console",  new org.jmol.script.Token (528395), "contact",  new org.jmol.script.Token (135402505), "contacts", null, "continue",  new org.jmol.script.Token (102408), "data",  new org.jmol.script.Token (135270407), "default",  new org.jmol.script.Token (102413), "define",  new org.jmol.script.Token (1060866), "@", null, "delay",  new org.jmol.script.Token (528397), "delete",  new org.jmol.script.Token (12291), "density",  new org.jmol.script.Token (1073741914), "depth",  new org.jmol.script.Token (554176526), "dipole",  new org.jmol.script.Token (135174), "dipoles", null, "display",  new org.jmol.script.Token (1610625028), "dot",  new org.jmol.script.Token (1276117505), "dots",  new org.jmol.script.Token (1113198595), "draw",  new org.jmol.script.Token (135176), "echo",  new org.jmol.script.Token (537022465), "ellipsoid",  new org.jmol.script.Token (1113198596), "ellipsoids", null, "else",  new org.jmol.script.Token (364547), "elseif",  new org.jmol.script.Token (102402), "end",  new org.jmol.script.Token (1150985), "endif",  new org.jmol.script.Token (364548), "exit",  new org.jmol.script.Token (266255), "file",  new org.jmol.script.Token (1229984263), "files", null, "font",  new org.jmol.script.Token (4114), "for",  new org.jmol.script.Token (135369224), "format",  new org.jmol.script.Token (1288701960), "frame",  new org.jmol.script.Token (4115), "frames", null, "frank",  new org.jmol.script.Token (1611272202), "function",  new org.jmol.script.Token (135368713), "functions", null, "geosurface",  new org.jmol.script.Token (1113198597), "getProperty",  new org.jmol.script.Token (135270410), "goto",  new org.jmol.script.Token (20500), "halo",  new org.jmol.script.Token (1113200646), "halos", null, "helix",  new org.jmol.script.Token (137363468), "helixalpha",  new org.jmol.script.Token (3145735), "helix310",  new org.jmol.script.Token (3145736), "helixpi",  new org.jmol.script.Token (3145738), "hbond",  new org.jmol.script.Token (1612189718), "hbonds", null, "help",  new org.jmol.script.Token (20482), "hide",  new org.jmol.script.Token (12294), "history",  new org.jmol.script.Token (1610616855), "hover",  new org.jmol.script.Token (544771), "if",  new org.jmol.script.Token (135369225), "in",  new org.jmol.script.Token (1073741980), "initialize",  new org.jmol.script.Token (266264), "invertSelected",  new org.jmol.script.Token (4121), "isosurface",  new org.jmol.script.Token (135180), "javascript",  new org.jmol.script.Token (135287308), "label",  new org.jmol.script.Token (1826248715), "labels", null, "lcaoCartoon",  new org.jmol.script.Token (135182), "lcaoCartoons", null, "load",  new org.jmol.script.Token (135271426), "log",  new org.jmol.script.Token (36869), "loop",  new org.jmol.script.Token (528410), "measure",  new org.jmol.script.Token (1746538509), "measures", null, "monitor", null, "monitors", null, "meshribbon",  new org.jmol.script.Token (1113200647), "meshribbons", null, "message",  new org.jmol.script.Token (20485), "minimize",  new org.jmol.script.Token (4126), "minimization", null, "mo",  new org.jmol.script.Token (1183762), "model",  new org.jmol.script.Token (1095766028), "models", null, "move",  new org.jmol.script.Token (4128), "moveTo",  new org.jmol.script.Token (4130), "navigate",  new org.jmol.script.Token (4131), "navigation", null, "origin",  new org.jmol.script.Token (1073742078), "out",  new org.jmol.script.Token (1073742079), "parallel",  new org.jmol.script.Token (102436), "pause",  new org.jmol.script.Token (20487), "wait", null, "plot",  new org.jmol.script.Token (4133), "plot3d",  new org.jmol.script.Token (135190), "pmesh",  new org.jmol.script.Token (135188), "polygon",  new org.jmol.script.Token (1073742106), "polyhedra",  new org.jmol.script.Token (135192), "print",  new org.jmol.script.Token (36865), "process",  new org.jmol.script.Token (102439), "prompt",  new org.jmol.script.Token (135304707), "quaternion",  new org.jmol.script.Token (135270417), "quaternions", null, "quit",  new org.jmol.script.Token (266281), "ramachandran",  new org.jmol.script.Token (1052714), "rama", null, "refresh",  new org.jmol.script.Token (266284), "reset",  new org.jmol.script.Token (4141), "unset", null, "restore",  new org.jmol.script.Token (4142), "restrict",  new org.jmol.script.Token (12295), "return",  new org.jmol.script.Token (36866), "ribbon",  new org.jmol.script.Token (1113200649), "ribbons", null, "rocket",  new org.jmol.script.Token (1113200650), "rockets", null, "rotate",  new org.jmol.script.Token (528432), "rotateSelected",  new org.jmol.script.Token (4145), "save",  new org.jmol.script.Token (4146), "script", org.jmol.script.Token.tokenScript, "source", null, "select",  new org.jmol.script.Token (135280132), "selectionHalos",  new org.jmol.script.Token (1611141171), "selectionHalo", null, "showSelections", null, "set", org.jmol.script.Token.tokenSetCmd, "sheet",  new org.jmol.script.Token (3145760), "show",  new org.jmol.script.Token (4148), "slab",  new org.jmol.script.Token (554176565), "spacefill",  new org.jmol.script.Token (1113200651), "cpk", null, "spin",  new org.jmol.script.Token (1611141175), "ssbond",  new org.jmol.script.Token (1611141176), "ssbonds", null, "star",  new org.jmol.script.Token (1113200652), "stars", null, "step",  new org.jmol.script.Token (266298), "steps", null, "stereo",  new org.jmol.script.Token (528443), "strand",  new org.jmol.script.Token (1650071565), "strands", null, "structure",  new org.jmol.script.Token (1641025539), "_structure", null, "strucNo",  new org.jmol.script.Token (1095761939), "struts",  new org.jmol.script.Token (1708058), "strut", null, "subset",  new org.jmol.script.Token (3158024), "switch", org.jmol.script.Token.tokenSwitch, "synchronize",  new org.jmol.script.Token (4156), "sync", null, "trace",  new org.jmol.script.Token (1113200654), "translate",  new org.jmol.script.Token (4160), "translateSelected",  new org.jmol.script.Token (4162), "try",  new org.jmol.script.Token (364558), "unbind",  new org.jmol.script.Token (4164), "unitcell",  new org.jmol.script.Token (1614417948), "var",  new org.jmol.script.Token (36868), "vector",  new org.jmol.script.Token (135198), "vectors", null, "vibration",  new org.jmol.script.Token (4166), "while",  new org.jmol.script.Token (102406), "wireframe",  new org.jmol.script.Token (659488), "write",  new org.jmol.script.Token (135270421), "zap",  new org.jmol.script.Token (1060873), "zoom",  new org.jmol.script.Token (4168), "zoomTo",  new org.jmol.script.Token (4170), "atom",  new org.jmol.script.Token (1141899265), "atoms", null, "axis",  new org.jmol.script.Token (1073741854), "axisangle",  new org.jmol.script.Token (135266307), "basepair",  new org.jmol.script.Token (1073741864), "basepairs", null, "orientation",  new org.jmol.script.Token (1073742077), "orientations", null, "pdbheader",  new org.jmol.script.Token (1073742088), "polymer",  new org.jmol.script.Token (1095761935), "polymers", null, "residue",  new org.jmol.script.Token (1073742120), "residues", null, "rotation",  new org.jmol.script.Token (1073742132), "row",  new org.jmol.script.Token (1276117513), "sequence",  new org.jmol.script.Token (1087373320), "shape",  new org.jmol.script.Token (1087373323), "state",  new org.jmol.script.Token (1073742158), "symbol",  new org.jmol.script.Token (1087375373), "symmetry",  new org.jmol.script.Token (1089470478), "spaceGroup",  new org.jmol.script.Token (1073742152), "transform",  new org.jmol.script.Token (1073742176), "translation",  new org.jmol.script.Token (1073742178), "url",  new org.jmol.script.Token (1074790760), "abs",  new org.jmol.script.Token (135266826), "absolute",  new org.jmol.script.Token (1073741826), "acos",  new org.jmol.script.Token (135266819), "add",  new org.jmol.script.Token (1276118017), "adpmax",  new org.jmol.script.Token (1112539137), "adpmin",  new org.jmol.script.Token (1112539138), "align",  new org.jmol.script.Token (1073741832), "all", org.jmol.script.Token.tokenAll, "altloc",  new org.jmol.script.Token (1087373315), "altlocs", null, "amino",  new org.jmol.script.Token (3145730), "angle",  new org.jmol.script.Token (135266305), "array",  new org.jmol.script.Token (135266306), "as",  new org.jmol.script.Token (1073741848), "atomID",  new org.jmol.script.Token (1095761922), "_atomID", null, "_a", null, "atomIndex",  new org.jmol.script.Token (1095761923), "atomName",  new org.jmol.script.Token (1087375362), "atomno",  new org.jmol.script.Token (1095763969), "atomType",  new org.jmol.script.Token (1087375361), "atomX",  new org.jmol.script.Token (1112541185), "atomY",  new org.jmol.script.Token (1112541186), "atomZ",  new org.jmol.script.Token (1112541187), "average",  new org.jmol.script.Token (96), "babel",  new org.jmol.script.Token (1073741856), "babel21",  new org.jmol.script.Token (1073741858), "back",  new org.jmol.script.Token (1073741860), "backlit",  new org.jmol.script.Token (1073741862), "baseModel",  new org.jmol.script.Token (3145776), "bin",  new org.jmol.script.Token (1276118529), "bondCount",  new org.jmol.script.Token (1095761924), "bottom",  new org.jmol.script.Token (1073741871), "branch",  new org.jmol.script.Token (1048580), "brillouin",  new org.jmol.script.Token (1073741872), "bzone", null, "wignerSeitz", null, "cache",  new org.jmol.script.Token (135270422), "carbohydrate",  new org.jmol.script.Token (3145764), "cell",  new org.jmol.script.Token (1095761925), "chain",  new org.jmol.script.Token (1087373316), "chains", null, "clash",  new org.jmol.script.Token (1073741881), "clear",  new org.jmol.script.Token (1073741882), "clickable",  new org.jmol.script.Token (3145766), "clipboard",  new org.jmol.script.Token (1073741884), "connected",  new org.jmol.script.Token (135266310), "constraint",  new org.jmol.script.Token (1073741894), "contourLines",  new org.jmol.script.Token (1073741898), "coord",  new org.jmol.script.Token (1048582), "coordinates", null, "coords", null, "cos",  new org.jmol.script.Token (135266821), "cross",  new org.jmol.script.Token (135267329), "covalent",  new org.jmol.script.Token (1112539139), "direction",  new org.jmol.script.Token (1073741918), "displacement",  new org.jmol.script.Token (1073741922), "displayed",  new org.jmol.script.Token (3145768), "distance",  new org.jmol.script.Token (1276118018), "div",  new org.jmol.script.Token (1276117504), "DNA",  new org.jmol.script.Token (3145732), "dotted",  new org.jmol.script.Token (1073741926), "DSSP",  new org.jmol.script.Token (1073741915), "element",  new org.jmol.script.Token (1087375365), "elemno",  new org.jmol.script.Token (1095763976), "_e",  new org.jmol.script.Token (1095761927), "error",  new org.jmol.script.Token (1073741936), "fill",  new org.jmol.script.Token (1073741938), "find",  new org.jmol.script.Token (1276118532), "fixedTemperature",  new org.jmol.script.Token (1073741946), "forcefield",  new org.jmol.script.Token (545259560), "formalCharge",  new org.jmol.script.Token (1632634889), "charge", null, "eta",  new org.jmol.script.Token (1112539140), "front",  new org.jmol.script.Token (1073741954), "frontlit",  new org.jmol.script.Token (1073741958), "frontOnly",  new org.jmol.script.Token (1073741960), "fullylit",  new org.jmol.script.Token (1073741964), "fx",  new org.jmol.script.Token (1112541188), "fy",  new org.jmol.script.Token (1112541189), "fz",  new org.jmol.script.Token (1112541190), "fxyz",  new org.jmol.script.Token (1146095627), "fux",  new org.jmol.script.Token (1112541191), "fuy",  new org.jmol.script.Token (1112541192), "fuz",  new org.jmol.script.Token (1112541193), "fuxyz",  new org.jmol.script.Token (1146095629), "group",  new org.jmol.script.Token (1087373318), "groups", null, "group1",  new org.jmol.script.Token (1087373319), "groupID",  new org.jmol.script.Token (1095761930), "_groupID", null, "_g", null, "groupIndex",  new org.jmol.script.Token (1095761931), "hidden",  new org.jmol.script.Token (3145770), "highlight",  new org.jmol.script.Token (536870920), "hkl",  new org.jmol.script.Token (135267841), "hydrophobic",  new org.jmol.script.Token (1114638346), "hydrophobicity", null, "hydro", null, "id",  new org.jmol.script.Token (1074790550), "identify",  new org.jmol.script.Token (1087373321), "ident", null, "image",  new org.jmol.script.Token (1073741979), "info",  new org.jmol.script.Token (1073741982), "inline",  new org.jmol.script.Token (1073741983), "insertion",  new org.jmol.script.Token (1087373322), "insertions", null, "intramolecular",  new org.jmol.script.Token (1073741989), "intra", null, "intermolecular",  new org.jmol.script.Token (1073741990), "inter", null, "ionic",  new org.jmol.script.Token (1112541195), "ionicRadius", null, "isAromatic",  new org.jmol.script.Token (1048585), "Jmol",  new org.jmol.script.Token (1073741992), "join",  new org.jmol.script.Token (1276117506), "keys",  new org.jmol.script.Token (1141899281), "last",  new org.jmol.script.Token (1073741993), "left",  new org.jmol.script.Token (1073741996), "length",  new org.jmol.script.Token (1141899267), "lines",  new org.jmol.script.Token (1141899268), "list",  new org.jmol.script.Token (1073742001), "mass",  new org.jmol.script.Token (1112539141), "max",  new org.jmol.script.Token (64), "mep",  new org.jmol.script.Token (1073742016), "mesh",  new org.jmol.script.Token (1073742018), "middle",  new org.jmol.script.Token (1073742019), "min",  new org.jmol.script.Token (32), "mlp",  new org.jmol.script.Token (1073742022), "mode",  new org.jmol.script.Token (1073742024), "modify",  new org.jmol.script.Token (1073742025), "modifyOrCreate",  new org.jmol.script.Token (1073742026), "molecule",  new org.jmol.script.Token (1095761934), "molecules", null, "modelIndex",  new org.jmol.script.Token (1095761933), "monomer",  new org.jmol.script.Token (1073742032), "mul",  new org.jmol.script.Token (1276117507), "nci",  new org.jmol.script.Token (1073742036), "next",  new org.jmol.script.Token (1073742037), "noDots",  new org.jmol.script.Token (1073742042), "noFill",  new org.jmol.script.Token (1073742046), "noMesh",  new org.jmol.script.Token (1073742052), "none",  new org.jmol.script.Token (1048587), "null", null, "inherit", null, "normal",  new org.jmol.script.Token (1073742056), "noContourLines",  new org.jmol.script.Token (1073742039), "notFrontOnly",  new org.jmol.script.Token (1073742058), "noTriangles",  new org.jmol.script.Token (1073742060), "now",  new org.jmol.script.Token (135266318), "nucleic",  new org.jmol.script.Token (3145742), "occupancy",  new org.jmol.script.Token (1129318401), "off", org.jmol.script.Token.tokenOff, "false", null, "on", org.jmol.script.Token.tokenOn, "true", null, "omega",  new org.jmol.script.Token (1112539142), "only",  new org.jmol.script.Token (1073742072), "opaque",  new org.jmol.script.Token (1073742074), "partialCharge",  new org.jmol.script.Token (1112541196), "phi",  new org.jmol.script.Token (1112539143), "plane",  new org.jmol.script.Token (135266319), "planar", null, "play",  new org.jmol.script.Token (1073742096), "playRev",  new org.jmol.script.Token (1073742098), "point",  new org.jmol.script.Token (135266320), "points", null, "pointGroup",  new org.jmol.script.Token (1073742102), "polymerLength",  new org.jmol.script.Token (1095761936), "previous",  new org.jmol.script.Token (1073742108), "prev", null, "probe",  new org.jmol.script.Token (1073742109), "property",  new org.jmol.script.Token (1716520973), "properties", null, "protein",  new org.jmol.script.Token (3145744), "psi",  new org.jmol.script.Token (1112539144), "purine",  new org.jmol.script.Token (3145746), "pyrimidine",  new org.jmol.script.Token (3145748), "random",  new org.jmol.script.Token (135267332), "range",  new org.jmol.script.Token (1073742114), "rasmol",  new org.jmol.script.Token (1073742116), "replace",  new org.jmol.script.Token (1276118019), "resno",  new org.jmol.script.Token (1095761937), "resume",  new org.jmol.script.Token (266287), "rewind",  new org.jmol.script.Token (1073742126), "reverse",  new org.jmol.script.Token (1141899269), "right",  new org.jmol.script.Token (1073742128), "RNA",  new org.jmol.script.Token (3145750), "rubberband",  new org.jmol.script.Token (1073742134), "saSurface",  new org.jmol.script.Token (1073742136), "scale",  new org.jmol.script.Token (1073742138), "scene",  new org.jmol.script.Token (1073742139), "search",  new org.jmol.script.Token (135267335), "smarts", null, "selected",  new org.jmol.script.Token (1114638350), "shapely",  new org.jmol.script.Token (1073742144), "sidechain",  new org.jmol.script.Token (3145754), "sin",  new org.jmol.script.Token (135266820), "site",  new org.jmol.script.Token (1095761938), "size",  new org.jmol.script.Token (1141899270), "smiles",  new org.jmol.script.Token (135267336), "substructure",  new org.jmol.script.Token (1238369286), "solid",  new org.jmol.script.Token (1073742150), "sort",  new org.jmol.script.Token (1276117010), "specialPosition",  new org.jmol.script.Token (3145772), "sqrt",  new org.jmol.script.Token (135266822), "split",  new org.jmol.script.Token (1276117508), "stddev",  new org.jmol.script.Token (192), "straightness",  new org.jmol.script.Token (1112539148), "structureId",  new org.jmol.script.Token (1087373324), "supercell",  new org.jmol.script.Token (1073742163), "sub",  new org.jmol.script.Token (1276117509), "sum",  new org.jmol.script.Token (128), "sum2",  new org.jmol.script.Token (160), "surface",  new org.jmol.script.Token (3145756), "surfaceDistance",  new org.jmol.script.Token (1112539149), "symop",  new org.jmol.script.Token (1297090050), "sx",  new org.jmol.script.Token (1112539145), "sy",  new org.jmol.script.Token (1112539146), "sz",  new org.jmol.script.Token (1112539147), "sxyz",  new org.jmol.script.Token (1146095628), "temperature",  new org.jmol.script.Token (1112541199), "relativeTemperature", null, "theta",  new org.jmol.script.Token (1112539150), "thisModel",  new org.jmol.script.Token (3145758), "ticks",  new org.jmol.script.Token (1073742164), "top",  new org.jmol.script.Token (1074790748), "torsion",  new org.jmol.script.Token (1073742174), "trajectory",  new org.jmol.script.Token (536870926), "trajectories", null, "translucent",  new org.jmol.script.Token (1073742180), "triangles",  new org.jmol.script.Token (1073742182), "trim",  new org.jmol.script.Token (1276117510), "type",  new org.jmol.script.Token (1141899272), "ux",  new org.jmol.script.Token (1112539151), "uy",  new org.jmol.script.Token (1112539152), "uz",  new org.jmol.script.Token (1112539153), "uxyz",  new org.jmol.script.Token (1146093582), "user",  new org.jmol.script.Token (1073742186), "valence",  new org.jmol.script.Token (1095763988), "vanderWaals",  new org.jmol.script.Token (1649412112), "vdw", null, "vdwRadius", null, "visible",  new org.jmol.script.Token (3145774), "volume",  new org.jmol.script.Token (1313866247), "vx",  new org.jmol.script.Token (1112541202), "vy",  new org.jmol.script.Token (1112541203), "vz",  new org.jmol.script.Token (1112541204), "vxyz",  new org.jmol.script.Token (1146095631), "xyz",  new org.jmol.script.Token (1146095626), "w",  new org.jmol.script.Token (1141899280), "x",  new org.jmol.script.Token (1112541205), "y",  new org.jmol.script.Token (1112541206), "z",  new org.jmol.script.Token (1112541207), "addHydrogens",  new org.jmol.script.Token (1073741828), "allConnected",  new org.jmol.script.Token (1073741834), "angstroms",  new org.jmol.script.Token (1073741836), "anisotropy",  new org.jmol.script.Token (1073741838), "append",  new org.jmol.script.Token (1073741839), "arc",  new org.jmol.script.Token (1074790416), "area",  new org.jmol.script.Token (1073741842), "aromatic",  new org.jmol.script.Token (1076887572), "arrow",  new org.jmol.script.Token (1073741846), "auto",  new org.jmol.script.Token (1073741852), "barb",  new org.jmol.script.Token (1073741861), "binary",  new org.jmol.script.Token (1073741866), "blockData",  new org.jmol.script.Token (1073741868), "cancel",  new org.jmol.script.Token (1073741874), "cap",  new org.jmol.script.Token (1074790451), "cavity",  new org.jmol.script.Token (1073741876), "centroid",  new org.jmol.script.Token (1073741877), "check",  new org.jmol.script.Token (1073741878), "chemical",  new org.jmol.script.Token (1073741879), "circle",  new org.jmol.script.Token (1073741880), "collapsed",  new org.jmol.script.Token (1073741886), "col",  new org.jmol.script.Token (1276117512), "colorScheme",  new org.jmol.script.Token (1073741888), "command",  new org.jmol.script.Token (1073741890), "commands",  new org.jmol.script.Token (1073741892), "contour",  new org.jmol.script.Token (1073741896), "contours",  new org.jmol.script.Token (1073741900), "corners",  new org.jmol.script.Token (1073741902), "count",  new org.jmol.script.Token (1276117011), "criterion",  new org.jmol.script.Token (1073741905), "create",  new org.jmol.script.Token (1073741904), "crossed",  new org.jmol.script.Token (1073741906), "curve",  new org.jmol.script.Token (1073741908), "cutoff",  new org.jmol.script.Token (1073741910), "cylinder",  new org.jmol.script.Token (1073741912), "diameter",  new org.jmol.script.Token (1073741916), "discrete",  new org.jmol.script.Token (1073741920), "distanceFactor",  new org.jmol.script.Token (1073741924), "downsample",  new org.jmol.script.Token (1073741928), "drawing",  new org.jmol.script.Token (1073741929), "eccentricity",  new org.jmol.script.Token (1073741930), "ed",  new org.jmol.script.Token (1074790508), "edges",  new org.jmol.script.Token (1073741934), "energy",  new org.jmol.script.Token (1073741935), "exitJmol",  new org.jmol.script.Token (266256), "faceCenterOffset",  new org.jmol.script.Token (1073741937), "filter",  new org.jmol.script.Token (1073741940), "first",  new org.jmol.script.Token (1073741942), "fixed",  new org.jmol.script.Token (1060869), "fix", null, "flat",  new org.jmol.script.Token (1073741948), "fps",  new org.jmol.script.Token (1074790526), "from",  new org.jmol.script.Token (1073741952), "frontEdges",  new org.jmol.script.Token (1073741956), "full",  new org.jmol.script.Token (1073741961), "fullPlane",  new org.jmol.script.Token (1073741962), "functionXY",  new org.jmol.script.Token (1073741966), "functionXYZ",  new org.jmol.script.Token (1073741968), "gridPoints",  new org.jmol.script.Token (1073741970), "homo",  new org.jmol.script.Token (1073741973), "ignore",  new org.jmol.script.Token (1073741976), "InChI",  new org.jmol.script.Token (1073741977), "InChIKey",  new org.jmol.script.Token (1073741978), "increment",  new org.jmol.script.Token (1073741981), "insideout",  new org.jmol.script.Token (1073741984), "interior",  new org.jmol.script.Token (1073741986), "intersection",  new org.jmol.script.Token (135267842), "intersect", null, "internal",  new org.jmol.script.Token (1073741988), "lattice",  new org.jmol.script.Token (1073741994), "line",  new org.jmol.script.Token (1073741998), "lineData",  new org.jmol.script.Token (1073742000), "link",  new org.jmol.script.Token (1073741999), "lobe",  new org.jmol.script.Token (1073742002), "lonePair",  new org.jmol.script.Token (1073742004), "lp",  new org.jmol.script.Token (1073742006), "lumo",  new org.jmol.script.Token (1073742008), "manifest",  new org.jmol.script.Token (1073742010), "mapProperty",  new org.jmol.script.Token (1052700), "map", null, "maxSet",  new org.jmol.script.Token (1073742014), "menu",  new org.jmol.script.Token (1073742015), "minSet",  new org.jmol.script.Token (1073742020), "modelBased",  new org.jmol.script.Token (1073742028), "molecular",  new org.jmol.script.Token (1073742030), "mrc",  new org.jmol.script.Token (1073742033), "msms",  new org.jmol.script.Token (1073742034), "name",  new org.jmol.script.Token (1073742035), "nmr",  new org.jmol.script.Token (1073742038), "noCross",  new org.jmol.script.Token (1073742040), "noDebug",  new org.jmol.script.Token (1073742041), "noEdges",  new org.jmol.script.Token (1073742044), "noHead",  new org.jmol.script.Token (1073742048), "noLoad",  new org.jmol.script.Token (1073742050), "noPlane",  new org.jmol.script.Token (1073742054), "object",  new org.jmol.script.Token (1073742064), "obj",  new org.jmol.script.Token (1073742062), "offset",  new org.jmol.script.Token (1073742066), "offsetSide",  new org.jmol.script.Token (1073742068), "once",  new org.jmol.script.Token (1073742070), "orbital",  new org.jmol.script.Token (1073742076), "atomicOrbital",  new org.jmol.script.Token (1073741850), "packed",  new org.jmol.script.Token (1073742080), "palindrome",  new org.jmol.script.Token (1073742082), "parameters",  new org.jmol.script.Token (1073742083), "path",  new org.jmol.script.Token (1073742084), "pdb",  new org.jmol.script.Token (1074790662), "period",  new org.jmol.script.Token (1073742090), "periodic", null, "perpendicular",  new org.jmol.script.Token (1073742092), "perp", null, "phase",  new org.jmol.script.Token (1073742094), "pocket",  new org.jmol.script.Token (1073742100), "pointsPerAngstrom",  new org.jmol.script.Token (1073742104), "radical",  new org.jmol.script.Token (1073742112), "rad",  new org.jmol.script.Token (1073742110), "reference",  new org.jmol.script.Token (1073742118), "remove",  new org.jmol.script.Token (1073742119), "resolution",  new org.jmol.script.Token (1073742122), "reverseColor",  new org.jmol.script.Token (1073742124), "rotate45",  new org.jmol.script.Token (1073742130), "selection",  new org.jmol.script.Token (1073742140), "sigma",  new org.jmol.script.Token (1073742146), "sign",  new org.jmol.script.Token (1073742147), "silent",  new org.jmol.script.Token (1073742148), "sphere",  new org.jmol.script.Token (1073742154), "squared",  new org.jmol.script.Token (1073742156), "stop",  new org.jmol.script.Token (1073742162), "title",  new org.jmol.script.Token (1073742166), "titleFormat",  new org.jmol.script.Token (1073742168), "to",  new org.jmol.script.Token (1074790746), "value",  new org.jmol.script.Token (1073742188), "variable",  new org.jmol.script.Token (1073742190), "variables",  new org.jmol.script.Token (1073742192), "vertices",  new org.jmol.script.Token (1073742194), "width",  new org.jmol.script.Token (1073742196), "backgroundModel",  new org.jmol.script.Token (536870914), "debug",  new org.jmol.script.Token (536870916), "defaultLattice",  new org.jmol.script.Token (536870918), "measurements",  new org.jmol.script.Token (537006096), "measurement", null, "scale3D",  new org.jmol.script.Token (1610612740), "toggleLabel",  new org.jmol.script.Token (1610612741), "userColorScheme",  new org.jmol.script.Token (536870930), "timeout",  new org.jmol.script.Token (536875070), "timeouts", null, "appletProxy",  new org.jmol.script.Token (545259522), "atomTypes",  new org.jmol.script.Token (545259524), "axesColor",  new org.jmol.script.Token (545259526), "axis1Color",  new org.jmol.script.Token (545259528), "axis2Color",  new org.jmol.script.Token (545259530), "axis3Color",  new org.jmol.script.Token (545259532), "backgroundColor",  new org.jmol.script.Token (545259534), "bondmode",  new org.jmol.script.Token (1610612737), "boundBoxColor",  new org.jmol.script.Token (545259536), "boundingBoxColor", null, "currentLocalPath",  new org.jmol.script.Token (545259538), "dataSeparator",  new org.jmol.script.Token (545259540), "defaultAngleLabel",  new org.jmol.script.Token (545259542), "defaultColorScheme",  new org.jmol.script.Token (545259545), "defaultColors", null, "defaultDirectory",  new org.jmol.script.Token (545259546), "defaultDistanceLabel",  new org.jmol.script.Token (545259547), "defaultDropScript",  new org.jmol.script.Token (545259548), "defaultLabelPDB",  new org.jmol.script.Token (545259543), "defaultLabelXYZ",  new org.jmol.script.Token (545259544), "defaultLoadFilter",  new org.jmol.script.Token (545259549), "defaultLoadScript",  new org.jmol.script.Token (545259550), "defaults",  new org.jmol.script.Token (545259552), "defaultTorsionLabel",  new org.jmol.script.Token (545259554), "defaultVDW",  new org.jmol.script.Token (545259555), "edsUrlCutoff",  new org.jmol.script.Token (545259556), "edsUrlFormat",  new org.jmol.script.Token (545259557), "energyUnits",  new org.jmol.script.Token (545259558), "fileCacheDirectory",  new org.jmol.script.Token (545259559), "fontsize",  new org.jmol.script.Token (1610612738), "helpPath",  new org.jmol.script.Token (545259561), "hoverLabel",  new org.jmol.script.Token (545259562), "language",  new org.jmol.script.Token (545259564), "loadFormat",  new org.jmol.script.Token (545259565), "loadLigandFormat",  new org.jmol.script.Token (545259566), "logFile",  new org.jmol.script.Token (545259567), "measurementUnits",  new org.jmol.script.Token (545259568), "nmrUrlFormat",  new org.jmol.script.Token (545259569), "pathForAllFiles",  new org.jmol.script.Token (545259570), "picking",  new org.jmol.script.Token (545259572), "pickingStyle",  new org.jmol.script.Token (545259574), "pickLabel",  new org.jmol.script.Token (545259576), "propertyColorScheme",  new org.jmol.script.Token (545259578), "quaternionFrame",  new org.jmol.script.Token (545259580), "smilesUrlFormat",  new org.jmol.script.Token (545259582), "smiles2dImageFormat",  new org.jmol.script.Token (545259584), "unitCellColor",  new org.jmol.script.Token (545259586), "axesScale",  new org.jmol.script.Token (570425346), "axisScale", null, "bondTolerance",  new org.jmol.script.Token (570425348), "cameraDepth",  new org.jmol.script.Token (570425350), "defaultDrawArrowScale",  new org.jmol.script.Token (570425352), "defaultTranslucent",  new org.jmol.script.Token (570425354), "dipoleScale",  new org.jmol.script.Token (570425356), "ellipsoidAxisDiameter",  new org.jmol.script.Token (570425358), "gestureSwipeFactor",  new org.jmol.script.Token (570425359), "hbondsAngleMinimum",  new org.jmol.script.Token (570425360), "hbondsDistanceMaximum",  new org.jmol.script.Token (570425361), "hoverDelay",  new org.jmol.script.Token (570425362), "loadAtomDataTolerance",  new org.jmol.script.Token (570425363), "minBondDistance",  new org.jmol.script.Token (570425364), "minimizationCriterion",  new org.jmol.script.Token (570425365), "mouseDragFactor",  new org.jmol.script.Token (570425366), "mouseWheelFactor",  new org.jmol.script.Token (570425367), "navFPS",  new org.jmol.script.Token (570425370), "navigationDepth",  new org.jmol.script.Token (570425371), "navigationSlab",  new org.jmol.script.Token (570425372), "navigationSpeed",  new org.jmol.script.Token (570425374), "navX",  new org.jmol.script.Token (570425376), "navY",  new org.jmol.script.Token (570425378), "navZ",  new org.jmol.script.Token (570425380), "pointGroupDistanceTolerance",  new org.jmol.script.Token (570425382), "pointGroupLinearTolerance",  new org.jmol.script.Token (570425384), "radius",  new org.jmol.script.Token (1666189314), "rotationRadius",  new org.jmol.script.Token (570425388), "scaleAngstromsPerInch",  new org.jmol.script.Token (570425390), "sheetSmoothing",  new org.jmol.script.Token (570425392), "slabRange",  new org.jmol.script.Token (570425393), "solventProbeRadius",  new org.jmol.script.Token (570425394), "spinFPS",  new org.jmol.script.Token (570425396), "spinX",  new org.jmol.script.Token (570425398), "spinY",  new org.jmol.script.Token (570425400), "spinZ",  new org.jmol.script.Token (570425402), "stereoDegrees",  new org.jmol.script.Token (570425404), "strutDefaultRadius",  new org.jmol.script.Token (570425406), "strutLengthMaximum",  new org.jmol.script.Token (570425408), "vectorScale",  new org.jmol.script.Token (1649410065), "vectorSymmetry",  new org.jmol.script.Token (603979973), "vibrationPeriod",  new org.jmol.script.Token (570425412), "vibrationScale",  new org.jmol.script.Token (570425414), "visualRange",  new org.jmol.script.Token (570425416), "ambientPercent",  new org.jmol.script.Token (553648130), "ambient", null, "animationFps",  new org.jmol.script.Token (553648132), "axesMode",  new org.jmol.script.Token (553648134), "bondRadiusMilliAngstroms",  new org.jmol.script.Token (553648136), "delayMaximumMs",  new org.jmol.script.Token (553648138), "diffusePercent",  new org.jmol.script.Token (553648142), "diffuse", null, "dotDensity",  new org.jmol.script.Token (553648143), "dotScale",  new org.jmol.script.Token (553648144), "ellipsoidDotCount",  new org.jmol.script.Token (553648145), "helixStep",  new org.jmol.script.Token (553648146), "hermiteLevel",  new org.jmol.script.Token (553648147), "historyLevel",  new org.jmol.script.Token (553648148), "lighting",  new org.jmol.script.Token (1073741995), "logLevel",  new org.jmol.script.Token (553648150), "meshScale",  new org.jmol.script.Token (553648151), "minimizationSteps",  new org.jmol.script.Token (553648152), "minPixelSelRadius",  new org.jmol.script.Token (553648153), "percentVdwAtom",  new org.jmol.script.Token (553648154), "perspectiveModel",  new org.jmol.script.Token (553648155), "phongExponent",  new org.jmol.script.Token (553648156), "pickingSpinRate",  new org.jmol.script.Token (553648158), "propertyAtomNumberField",  new org.jmol.script.Token (553648159), "propertyAtomNumberColumnCount",  new org.jmol.script.Token (553648160), "propertyDataColumnCount",  new org.jmol.script.Token (553648162), "propertyDataField",  new org.jmol.script.Token (553648164), "repaintWaitMs",  new org.jmol.script.Token (553648165), "ribbonAspectRatio",  new org.jmol.script.Token (553648166), "scriptReportingLevel",  new org.jmol.script.Token (553648168), "showScript",  new org.jmol.script.Token (536870922), "smallMoleculeMaxAtoms",  new org.jmol.script.Token (553648170), "specular",  new org.jmol.script.Token (536870924), "specularExponent",  new org.jmol.script.Token (553648172), "specularPercent",  new org.jmol.script.Token (553648174), "specPercent", null, "specularPower",  new org.jmol.script.Token (553648176), "specpower", null, "strandCount",  new org.jmol.script.Token (553648178), "strandCountForMeshRibbon",  new org.jmol.script.Token (553648180), "strandCountForStrands",  new org.jmol.script.Token (553648182), "strutSpacing",  new org.jmol.script.Token (553648184), "zDepth",  new org.jmol.script.Token (553648186), "zSlab",  new org.jmol.script.Token (553648188), "zshadePower",  new org.jmol.script.Token (553648190), "allowEmbeddedScripts",  new org.jmol.script.Token (603979778), "allowGestures",  new org.jmol.script.Token (603979780), "allowKeyStrokes",  new org.jmol.script.Token (603979781), "allowModelKit",  new org.jmol.script.Token (603979782), "allowMoveAtoms",  new org.jmol.script.Token (603979783), "allowMultiTouch",  new org.jmol.script.Token (603979784), "allowRotateSelected",  new org.jmol.script.Token (603979785), "antialiasDisplay",  new org.jmol.script.Token (603979786), "antialiasImages",  new org.jmol.script.Token (603979788), "antialiasTranslucent",  new org.jmol.script.Token (603979790), "appendNew",  new org.jmol.script.Token (603979792), "applySymmetryToBonds",  new org.jmol.script.Token (603979794), "atomPicking",  new org.jmol.script.Token (603979796), "autobond",  new org.jmol.script.Token (603979798), "autoFPS",  new org.jmol.script.Token (603979800), "axesMolecular",  new org.jmol.script.Token (603979804), "axesOrientationRasmol",  new org.jmol.script.Token (603979806), "axesUnitCell",  new org.jmol.script.Token (603979808), "axesWindow",  new org.jmol.script.Token (603979810), "bondModeOr",  new org.jmol.script.Token (603979812), "bondPicking",  new org.jmol.script.Token (603979814), "bonds",  new org.jmol.script.Token (1678770178), "bond", null, "cartoonBaseEdges",  new org.jmol.script.Token (603979818), "cartoonFancy",  new org.jmol.script.Token (603979820), "cartoonRockets",  new org.jmol.script.Token (603979819), "chainCaseSensitive",  new org.jmol.script.Token (603979821), "colorRasmol",  new org.jmol.script.Token (603979822), "debugScript",  new org.jmol.script.Token (603979824), "defaultStructureDssp",  new org.jmol.script.Token (603979825), "disablePopupMenu",  new org.jmol.script.Token (603979826), "displayCellParameters",  new org.jmol.script.Token (603979828), "dotsSelectedOnly",  new org.jmol.script.Token (603979829), "dotSurface",  new org.jmol.script.Token (603979830), "dragSelected",  new org.jmol.script.Token (603979831), "drawHover",  new org.jmol.script.Token (603979832), "drawPicking",  new org.jmol.script.Token (603979833), "dsspCalculateHydrogenAlways",  new org.jmol.script.Token (603979834), "dynamicMeasurements",  new org.jmol.script.Token (603979835), "ellipsoidArcs",  new org.jmol.script.Token (603979836), "ellipsoidAxes",  new org.jmol.script.Token (603979837), "ellipsoidBall",  new org.jmol.script.Token (603979838), "ellipsoidDots",  new org.jmol.script.Token (603979839), "ellipsoidFill",  new org.jmol.script.Token (603979840), "fileCaching",  new org.jmol.script.Token (603979842), "fontCaching",  new org.jmol.script.Token (603979844), "fontScaling",  new org.jmol.script.Token (603979845), "forceAutoBond",  new org.jmol.script.Token (603979846), "fractionalRelative",  new org.jmol.script.Token (603979848), "greyscaleRendering",  new org.jmol.script.Token (603979850), "hbondsBackbone",  new org.jmol.script.Token (603979852), "hbondsRasmol",  new org.jmol.script.Token (603979853), "hbondsSolid",  new org.jmol.script.Token (603979854), "hetero",  new org.jmol.script.Token (1613758470), "hideNameInPopup",  new org.jmol.script.Token (603979858), "hideNavigationPoint",  new org.jmol.script.Token (603979860), "hideNotSelected",  new org.jmol.script.Token (603979862), "highResolution",  new org.jmol.script.Token (603979864), "hydrogen",  new org.jmol.script.Token (1613758476), "hydrogens", null, "imageState",  new org.jmol.script.Token (603979868), "isKiosk",  new org.jmol.script.Token (603979869), "isosurfaceKey",  new org.jmol.script.Token (603979870), "isosurfacePropertySmoothing",  new org.jmol.script.Token (603979871), "isosurfacePropertySmoothingPower",  new org.jmol.script.Token (553648149), "justifyMeasurements",  new org.jmol.script.Token (603979872), "languageTranslation",  new org.jmol.script.Token (603979873), "legacyAutoBonding",  new org.jmol.script.Token (603979874), "logCommands",  new org.jmol.script.Token (603979875), "logGestures",  new org.jmol.script.Token (603979876), "measureAllModels",  new org.jmol.script.Token (603979877), "measurementLabels",  new org.jmol.script.Token (603979878), "measurementNumbers",  new org.jmol.script.Token (1610612739), "messageStyleChime",  new org.jmol.script.Token (603979879), "minimizationRefresh",  new org.jmol.script.Token (603979880), "minimizationSilent",  new org.jmol.script.Token (603979881), "modelkitMode",  new org.jmol.script.Token (603979882), "monitorEnergy",  new org.jmol.script.Token (603979883), "multipleBondRadiusFactor",  new org.jmol.script.Token (570425368), "multipleBondSpacing",  new org.jmol.script.Token (570425369), "multiProcessor",  new org.jmol.script.Token (603979884), "navigateSurface",  new org.jmol.script.Token (603979885), "navigationMode",  new org.jmol.script.Token (603979886), "navigationPeriodic",  new org.jmol.script.Token (603979887), "partialDots",  new org.jmol.script.Token (603979888), "pdbAddHydrogens",  new org.jmol.script.Token (603979889), "pdbGetHeader",  new org.jmol.script.Token (603979890), "pdbSequential",  new org.jmol.script.Token (603979891), "perspectiveDepth",  new org.jmol.script.Token (603979892), "preserveState",  new org.jmol.script.Token (603979893), "rangeSelected",  new org.jmol.script.Token (603979894), "redoMove",  new org.jmol.script.Token (4139), "refreshing",  new org.jmol.script.Token (603979896), "ribbonBorder",  new org.jmol.script.Token (603979898), "rocketBarrels",  new org.jmol.script.Token (603979900), "saveProteinStructureState",  new org.jmol.script.Token (603979902), "scriptQueue",  new org.jmol.script.Token (603979904), "selectAllModels",  new org.jmol.script.Token (603979906), "selectHetero",  new org.jmol.script.Token (603979908), "selectHydrogen",  new org.jmol.script.Token (603979910), "showAxes",  new org.jmol.script.Token (603979914), "showBoundBox",  new org.jmol.script.Token (603979916), "showBoundingBox", null, "showFrank",  new org.jmol.script.Token (603979918), "showHiddenSelectionHalos",  new org.jmol.script.Token (603979920), "showHydrogens",  new org.jmol.script.Token (603979922), "showKeyStrokes",  new org.jmol.script.Token (603979924), "showMeasurements",  new org.jmol.script.Token (603979926), "showMultipleBonds",  new org.jmol.script.Token (603979928), "showNavigationPointAlways",  new org.jmol.script.Token (603979930), "showTiming",  new org.jmol.script.Token (603979934), "showUnitcell",  new org.jmol.script.Token (603979936), "slabByAtom",  new org.jmol.script.Token (603979938), "slabByMolecule",  new org.jmol.script.Token (603979940), "slabEnabled",  new org.jmol.script.Token (603979942), "smartAromatic",  new org.jmol.script.Token (603979944), "solvent",  new org.jmol.script.Token (1613758488), "solventProbe",  new org.jmol.script.Token (603979948), "ssBondsBackbone",  new org.jmol.script.Token (603979952), "statusReporting",  new org.jmol.script.Token (603979954), "strutsMultiple",  new org.jmol.script.Token (603979955), "syncMouse",  new org.jmol.script.Token (603979956), "syncScript",  new org.jmol.script.Token (603979958), "testFlag1",  new org.jmol.script.Token (603979960), "testFlag2",  new org.jmol.script.Token (603979962), "testFlag3",  new org.jmol.script.Token (603979964), "testFlag4",  new org.jmol.script.Token (603979966), "traceAlpha",  new org.jmol.script.Token (603979967), "undo",  new org.jmol.script.Token (536870928), "undoMove",  new org.jmol.script.Token (4165), "useArcBall",  new org.jmol.script.Token (603979969), "useMinimizationThread",  new org.jmol.script.Token (603979970), "useNumberLocalization",  new org.jmol.script.Token (603979972), "waitForMoveTo",  new org.jmol.script.Token (603979974), "windowCentered",  new org.jmol.script.Token (603979975), "wireframeRotation",  new org.jmol.script.Token (603979976), "zeroBasedXyzRasmol",  new org.jmol.script.Token (603979978), "zoomEnabled",  new org.jmol.script.Token (603979980), "zoomLarge",  new org.jmol.script.Token (603979982), "zShade",  new org.jmol.script.Token (603979984)];
	    var tokenLast = null;
	    var stringThis;
	    var tokenThis;
	    var lcase;
	    for (var i = 0; i + 1 < arrayPairs.length; i += 2) {
		stringThis = arrayPairs[i];
		lcase = stringThis.toLowerCase ();
		tokenThis = arrayPairs[i + 1];
		if (tokenThis == null) tokenThis = tokenLast;
		if (tokenThis.value == null) tokenThis.value = stringThis;
		if (org.jmol.script.Token.tokenMap.get (lcase) != null) org.jmol.util.Logger.error ("duplicate token definition:" + lcase);
		org.jmol.script.Token.tokenMap.put (lcase, tokenThis);
		tokenLast = tokenThis;
	    }
	}});
    // 
    //// org\jmol\util\Point3f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Tuple3f"], "org.jmol.util.Point3f", null, function () {
	c$ = Clazz.declareType (org.jmol.util, "Point3f", org.jmol.util.Tuple3f);
	c$.newP = Clazz.defineMethod (c$, "newP", 
				      function (t) {
					  var p =  new org.jmol.util.Point3f ();
					  p.x = t.x;
					  p.y = t.y;
					  p.z = t.z;
					  return p;
				      }, "org.jmol.util.Tuple3f");
	c$.new3 = Clazz.defineMethod (c$, "new3", 
				      function (x, y, z) {
					  var p =  new org.jmol.util.Point3f ();
					  p.x = x;
					  p.y = y;
					  p.z = z;
					  return p;
				      }, "~N,~N,~N");
	Clazz.defineMethod (c$, "distanceSquared", 
			    function (p1) {
				var dx = this.x - p1.x;
				var dy = this.y - p1.y;
				var dz = this.z - p1.z;
				return (dx * dx + dy * dy + dz * dz);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "distance", 
			    function (p1) {
				return Math.sqrt (this.distanceSquared (p1));
			    }, "org.jmol.util.Point3f");
    });
    // 
    //// org\jmol\script\ScriptVariable.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["org.jmol.script.Token", "org.jmol.util.Point3f"], "org.jmol.script.ScriptVariable", ["java.lang.Boolean", "$.Float", "java.util.ArrayList", "$.Arrays", "$.Collections", "$.Hashtable", "org.jmol.modelset.Bond", "org.jmol.util.BitSet", "$.BitSetUtil", "$.Escape", "$.Measure", "$.Parser", "$.StringXBuilder", "$.TextFormat"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.index = 2147483647;
	    this.flags = 2;
	    this.myName = null;
	    if (!Clazz.isClassDefined ("org.jmol.script.ScriptVariable.Sort")) {
		org.jmol.script.ScriptVariable.$ScriptVariable$Sort$ ();
	    }
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptVariable", org.jmol.script.Token);
	Clazz.makeConstructor (c$, 
			       function (tok) {
				   Clazz.superConstructor (this, org.jmol.script.ScriptVariable, []);
				   this.tok = tok;
			       }, "~N");
	c$.newVariable = Clazz.defineMethod (c$, "newVariable", 
					     function (tok, value) {
						 var sv =  new org.jmol.script.ScriptVariable (tok);
						 sv.value = value;
						 return sv;
					     }, "~N,~O");
	c$.newScriptVariableBs = Clazz.defineMethod (c$, "newScriptVariableBs", 
						     function (bs, index) {
							 var sv =  new org.jmol.script.ScriptVariable (10);
							 sv.value = bs;
							 if (index >= 0) sv.index = index;
							 return sv;
						     }, "org.jmol.util.BitSet,~N");
	c$.newScriptVariableToken = Clazz.defineMethod (c$, "newScriptVariableToken", 
							function (x) {
							    var sv =  new org.jmol.script.ScriptVariable (x.tok);
							    sv.intValue = x.intValue;
							    sv.value = x.value;
							    return sv;
							}, "org.jmol.script.Token");
	c$.newScriptVariableIntValue = Clazz.defineMethod (c$, "newScriptVariableIntValue", 
							   function (tok, intValue, value) {
							       var sv =  new org.jmol.script.ScriptVariable (tok);
							       sv.intValue = intValue;
							       sv.value = value;
							       return sv;
							   }, "~N,~N,~O");
	c$.typeOf = Clazz.defineMethod (c$, "typeOf", 
					function (x) {
					    var tok = (x == null ? 0 : x.tok);
					    switch (tok) {
					    case 1048589:
					    case 1048588:
						return "boolean";
					    case 10:
						return (Clazz.instanceOf (x.value, org.jmol.modelset.Bond.BondSet) ? "bondset" : "bitset");
					    case 2:
					    case 3:
					    case 8:
					    case 9:
					    case 4:
					    case 7:
					    case 6:
					    case 11:
					    case 12:
						return org.jmol.script.Token.astrType[tok];
					    }
					    return "?";
					}, "org.jmol.script.ScriptVariable");
	c$.sizeOf = Clazz.defineMethod (c$, "sizeOf", 
					function (x) {
					    switch (x == null ? 0 : x.tok) {
					    case 10:
						return org.jmol.util.BitSetUtil.cardinalityOf (org.jmol.script.ScriptVariable.bsSelectToken (x));
					    case 1048589:
					    case 1048588:
						return -1;
					    case 2:
						return -2;
					    case 3:
						return -4;
					    case 8:
						return -8;
					    case 9:
						return -16;
					    case 11:
						return -32;
					    case 12:
						return -64;
					    case 4:
						return (x.value).length;
					    case 7:
						return x.intValue == 2147483647 ? (x).getList ().size () : org.jmol.script.ScriptVariable.sizeOf (org.jmol.script.ScriptVariable.selectItemTok (x));
					    case 6:
						return (x.value).size ();
					    default:
						return 0;
					    }
					}, "org.jmol.script.Token");
	c$.isVariableType = Clazz.defineMethod (c$, "isVariableType", 
						function (x) {
						    return (Clazz.instanceOf (x, org.jmol.script.ScriptVariable) || Clazz.instanceOf (x, org.jmol.util.BitSet) || Clazz.instanceOf (x, Boolean) || Clazz.instanceOf (x, Float) || Clazz.instanceOf (x, Integer) || Clazz.instanceOf (x, org.jmol.util.Point3f) || Clazz.instanceOf (x, org.jmol.util.Vector3f) || Clazz.instanceOf (x, org.jmol.util.Point4f) || Clazz.instanceOf (x, org.jmol.util.Quaternion) || Clazz.instanceOf (x, String) || Clazz.instanceOf (x, java.util.Map) || Clazz.instanceOf (x, java.util.List) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array) || Clazz.instanceOf (x, Array));
						}, "~O");
	c$.getVariable = Clazz.defineMethod (c$, "getVariable", 
					     function (x) {
						 if (x == null) return org.jmol.script.ScriptVariable.newVariable (4, "");
						 if (Clazz.instanceOf (x, org.jmol.script.ScriptVariable)) return x;
						 if (Clazz.instanceOf (x, Boolean)) return org.jmol.script.ScriptVariable.getBoolean ((x).booleanValue ());
						 if (Clazz.instanceOf (x, Integer)) return  new org.jmol.script.ScriptVariableInt ((x).intValue ());
						 if (Clazz.instanceOf (x, Float)) return org.jmol.script.ScriptVariable.newVariable (3, x);
						 if (Clazz.instanceOf (x, String)) {
						     x = org.jmol.script.ScriptVariable.unescapePointOrBitsetAsVariable (x);
						     if (Clazz.instanceOf (x, org.jmol.script.ScriptVariable)) return x;
						     return org.jmol.script.ScriptVariable.newVariable (4, x);
						 }if (Clazz.instanceOf (x, org.jmol.util.Point3f)) return org.jmol.script.ScriptVariable.newVariable (8, x);
						 if (Clazz.instanceOf (x, org.jmol.util.Vector3f)) return org.jmol.script.ScriptVariable.newVariable (8, org.jmol.util.Point3f.newP (x));
						 if (Clazz.instanceOf (x, org.jmol.util.BitSet)) return org.jmol.script.ScriptVariable.newVariable (10, x);
						 if (Clazz.instanceOf (x, org.jmol.util.Point4f)) return org.jmol.script.ScriptVariable.newVariable (9, x);
						 if (Clazz.instanceOf (x, org.jmol.util.Quaternion)) return org.jmol.script.ScriptVariable.newVariable (9, (x).toPoint4f ());
						 if (Clazz.instanceOf (x, org.jmol.util.Matrix3f)) return org.jmol.script.ScriptVariable.newVariable (11, x);
						 if (Clazz.instanceOf (x, org.jmol.util.Matrix4f)) return org.jmol.script.ScriptVariable.newVariable (12, x);
						 if (org.jmol.util.Escape.isAFloat (x)) return org.jmol.script.ScriptVariable.newVariable (13, x);
						 if (Clazz.instanceOf (x, java.util.Map)) return org.jmol.script.ScriptVariable.getVariableMap (x);
						 if (Clazz.instanceOf (x, java.util.List)) return org.jmol.script.ScriptVariable.getVariableList (x);
						 if (org.jmol.util.Escape.isAI (x)) return org.jmol.script.ScriptVariable.getVariableAI (x);
						 if (org.jmol.util.Escape.isAF (x)) return org.jmol.script.ScriptVariable.getVariableAF (x);
						 if (org.jmol.util.Escape.isAD (x)) return org.jmol.script.ScriptVariable.getVariableAD (x);
						 if (org.jmol.util.Escape.isAII (x)) return org.jmol.script.ScriptVariable.getVariableAII (x);
						 if (org.jmol.util.Escape.isAFF (x)) return org.jmol.script.ScriptVariable.getVariableAFF (x);
						 if (org.jmol.util.Escape.isAS (x)) return org.jmol.script.ScriptVariable.getVariableAS (x);
						 if (org.jmol.util.Escape.isAV (x)) return org.jmol.script.ScriptVariable.getVariableAV (x);
						 if (org.jmol.util.Escape.isAP (x)) return org.jmol.script.ScriptVariable.getVariableAP (x);
						 return org.jmol.script.ScriptVariable.newVariable (4, org.jmol.util.Escape.toReadable (null, x));
					     }, "~O");
	c$.getVariableMap = Clazz.defineMethod (c$, "getVariableMap", 
						function (x) {
						    var ht = x;
						    var e = ht.keySet ().iterator ();
						    while (e.hasNext ()) {
							if (!(Clazz.instanceOf (ht.get (e.next ()), org.jmol.script.ScriptVariable))) {
							    var x2 =  new java.util.Hashtable ();
							    for (var entry, $entry = ht.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
								var key = entry.getKey ();
								var o = entry.getValue ();
								if (org.jmol.script.ScriptVariable.isVariableType (o)) x2.put (key, org.jmol.script.ScriptVariable.getVariable (o));
								else x2.put (key, org.jmol.script.ScriptVariable.newVariable (4, org.jmol.util.Escape.toReadable (null, o)));
							    }
							    x = x2;
							}break;
						    }
						    return org.jmol.script.ScriptVariable.newVariable (6, x);
						}, "~O");
	c$.getVariableList = Clazz.defineMethod (c$, "getVariableList", 
						 function (v) {
						     var len = v.size ();
						     if (len > 0 && Clazz.instanceOf (v.get (0), org.jmol.script.ScriptVariable)) return org.jmol.script.ScriptVariable.newVariable (7, v);
						     var objects =  new java.util.ArrayList ();
						     for (var i = 0; i < len; i++) objects.add (org.jmol.script.ScriptVariable.getVariable (v.get (i)));

						     return org.jmol.script.ScriptVariable.newVariable (7, objects);
						 }, "java.util.List");
	c$.getVariableAV = Clazz.defineMethod (c$, "getVariableAV", 
					       function (v) {
						   var objects =  new java.util.ArrayList ();
						   for (var i = 0; i < v.length; i++) objects.add (v[i]);

						   return org.jmol.script.ScriptVariable.newVariable (7, objects);
					       }, "~A");
	c$.getVariableAD = Clazz.defineMethod (c$, "getVariableAD", 
					       function (f) {
						   var objects =  new java.util.ArrayList ();
						   for (var i = 0; i < f.length; i++) objects.add (org.jmol.script.ScriptVariable.newVariable (3, Float.$valueOf (f[i])));

						   return org.jmol.script.ScriptVariable.newVariable (7, objects);
					       }, "~A");
	c$.getVariableAS = Clazz.defineMethod (c$, "getVariableAS", 
					       function (s) {
						   var objects =  new java.util.ArrayList ();
						   for (var i = 0; i < s.length; i++) objects.add (org.jmol.script.ScriptVariable.newVariable (4, s[i]));

						   return org.jmol.script.ScriptVariable.newVariable (7, objects);
					       }, "~A");
	c$.getVariableAP = Clazz.defineMethod (c$, "getVariableAP", 
					       function (p) {
						   var objects =  new java.util.ArrayList ();
						   for (var i = 0; i < p.length; i++) objects.add (org.jmol.script.ScriptVariable.newVariable (8, p[i]));

						   return org.jmol.script.ScriptVariable.newVariable (7, objects);
					       }, "~A");
	c$.getVariableAFF = Clazz.defineMethod (c$, "getVariableAFF", 
						function (fx) {
						    var objects =  new java.util.ArrayList ();
						    for (var i = 0; i < fx.length; i++) objects.add (org.jmol.script.ScriptVariable.getVariableAF (fx[i]));

						    return org.jmol.script.ScriptVariable.newVariable (7, objects);
						}, "~A");
	c$.getVariableAII = Clazz.defineMethod (c$, "getVariableAII", 
						function (ix) {
						    var objects =  new java.util.ArrayList ();
						    for (var i = 0; i < ix.length; i++) objects.add (org.jmol.script.ScriptVariable.getVariableAI (ix[i]));

						    return org.jmol.script.ScriptVariable.newVariable (7, objects);
						}, "~A");
	c$.getVariableAF = Clazz.defineMethod (c$, "getVariableAF", 
					       function (f) {
						   var objects =  new java.util.ArrayList ();
						   for (var i = 0; i < f.length; i++) objects.add (org.jmol.script.ScriptVariable.newVariable (3, Float.$valueOf (f[i])));

						   return org.jmol.script.ScriptVariable.newVariable (7, objects);
					       }, "~A");
	c$.getVariableAI = Clazz.defineMethod (c$, "getVariableAI", 
					       function (ix) {
						   var objects =  new java.util.ArrayList ();
						   for (var i = 0; i < ix.length; i++) objects.add (org.jmol.script.ScriptVariable.newVariable (2, Integer.$valueOf (ix[i])));

						   return org.jmol.script.ScriptVariable.newVariable (7, objects);
					       }, "~A");
	Clazz.defineMethod (c$, "set", 
			    function (v, asCopy) {
				this.index = v.index;
				this.intValue = v.intValue;
				this.tok = v.tok;
				this.value = v.value;
				if (asCopy) {
				    switch (this.tok) {
				    case 6:
					this.value =  new java.util.Hashtable (v.value);
					break;
				    case 7:
					var o2 =  new java.util.ArrayList ();
					var o1 = v.getList ();
					for (var i = 0; i < o1.size (); i++) o2.add (o1.get (i));

					this.value = o2;
					break;
				    }
				}return this;
			    }, "org.jmol.script.ScriptVariable,~B");
	Clazz.defineMethod (c$, "setName", 
			    function (name) {
				this.myName = name;
				this.flags |= 1;
				return this;
			    }, "~S");
	Clazz.defineMethod (c$, "setGlobal", 
			    function () {
				this.flags &= -3;
				return this;
			    });
	Clazz.defineMethod (c$, "canIncrement", 
			    function () {
				return org.jmol.script.Token.tokAttr (this.flags, 1);
			    });
	Clazz.defineMethod (c$, "increment", 
			    function (n) {
				if (!this.canIncrement ()) return false;
				switch (this.tok) {
				case 2:
				    this.intValue += n;
				    break;
				case 3:
				    this.value =  new Float ((this.value).floatValue () + n);
				    break;
				default:
				    this.value = org.jmol.script.ScriptVariable.nValue (this);
				    if (Clazz.instanceOf (this.value, Integer)) {
					this.tok = 2;
					this.intValue = (this.value).intValue ();
				    } else {
					this.tok = 3;
				    }}
				return true;
			    }, "~N");
	Clazz.defineMethod (c$, "asBoolean", 
			    function () {
				return org.jmol.script.ScriptVariable.bValue (this);
			    });
	Clazz.defineMethod (c$, "asInt", 
			    function () {
				return org.jmol.script.ScriptVariable.iValue (this);
			    });
	Clazz.defineMethod (c$, "asFloat", 
			    function () {
				return org.jmol.script.ScriptVariable.fValue (this);
			    });
	Clazz.defineMethod (c$, "asString", 
			    function () {
				return org.jmol.script.ScriptVariable.sValue (this);
			    });
	c$.oValue = Clazz.defineMethod (c$, "oValue", 
					function (x) {
					    switch (x == null ? 0 : x.tok) {
					    case 1048589:
						return Boolean.TRUE;
					    case 0:
					    case 1048588:
						return Boolean.FALSE;
					    case 2:
						return Integer.$valueOf (x.intValue);
					    case 10:
					    case 135266306:
						return org.jmol.script.ScriptVariable.selectItemVar (x).value;
					    default:
						return x.value;
					    }
					}, "org.jmol.script.ScriptVariable");
	c$.nValue = Clazz.defineMethod (c$, "nValue", 
					function (x) {
					    var iValue;
					    switch (x == null ? 0 : x.tok) {
					    case 3:
						return x.value;
					    case 2:
						iValue = x.intValue;
						break;
					    case 4:
						if ((x.value).indexOf (".") >= 0) return  new Float (org.jmol.script.ScriptVariable.toFloat (x.value));
						iValue = Clazz.floatToInt (org.jmol.script.ScriptVariable.toFloat (x.value));
						break;
					    default:
						iValue = 0;
					    }
					    return Integer.$valueOf (iValue);
					}, "org.jmol.script.Token");
	c$.bValue = Clazz.defineMethod (c$, "bValue", 
					($fz = function (x) {
					    switch (x == null ? 0 : x.tok) {
					    case 1048589:
					    case 6:
						return true;
					    case 1048588:
						return false;
					    case 2:
						return x.intValue != 0;
					    case 3:
					    case 4:
					    case 7:
						return org.jmol.script.ScriptVariable.fValue (x) != 0;
					    case 10:
						return org.jmol.script.ScriptVariable.iValue (x) != 0;
					    case 8:
					    case 9:
					    case 11:
					    case 12:
						return Math.abs (org.jmol.script.ScriptVariable.fValue (x)) > 0.0001;
					    default:
						return false;
					    }
					}, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	c$.iValue = Clazz.defineMethod (c$, "iValue", 
					function (x) {
					    switch (x == null ? 0 : x.tok) {
					    case 1048589:
						return 1;
					    case 1048588:
						return 0;
					    case 2:
						return x.intValue;
					    case 3:
					    case 7:
					    case 4:
					    case 8:
					    case 9:
					    case 11:
					    case 12:
						return Clazz.floatToInt (org.jmol.script.ScriptVariable.fValue (x));
					    case 10:
						return org.jmol.util.BitSetUtil.cardinalityOf (org.jmol.script.ScriptVariable.bsSelectToken (x));
					    default:
						return 0;
					    }
					}, "org.jmol.script.Token");
	c$.fValue = Clazz.defineMethod (c$, "fValue", 
					function (x) {
					    switch (x == null ? 0 : x.tok) {
					    case 1048589:
						return 1;
					    case 1048588:
						return 0;
					    case 2:
						return x.intValue;
					    case 3:
						return (x.value).floatValue ();
					    case 7:
						var i = x.intValue;
						if (i == 2147483647) return (x).getList ().size ();
					    case 4:
						return org.jmol.script.ScriptVariable.toFloat (org.jmol.script.ScriptVariable.sValue (x));
					    case 10:
						return org.jmol.script.ScriptVariable.iValue (x);
					    case 8:
						return (x.value).distance (org.jmol.script.ScriptVariable.pt0);
					    case 9:
						return org.jmol.util.Measure.distanceToPlane (x.value, org.jmol.script.ScriptVariable.pt0);
					    case 11:
						var pt =  new org.jmol.util.Point3f ();
						(x.value).transform (pt);
						return pt.distance (org.jmol.script.ScriptVariable.pt0);
					    case 12:
						var pt1 =  new org.jmol.util.Point3f ();
						(x.value).transform (pt1);
						return pt1.distance (org.jmol.script.ScriptVariable.pt0);
					    default:
						return 0;
					    }
					}, "org.jmol.script.Token");
	c$.sValue = Clazz.defineMethod (c$, "sValue", 
					function (x) {
					    if (x == null) return "";
					    var i;
					    var sb;
					    var map;
					    switch (x.tok) {
					    case 1048589:
						return "true";
					    case 1048588:
						return "false";
					    case 2:
						return "" + x.intValue;
					    case 10:
						return org.jmol.util.Escape.escapeBs (org.jmol.script.ScriptVariable.bsSelectToken (x), !(Clazz.instanceOf (x.value, org.jmol.modelset.Bond.BondSet)));
					    case 7:
						var sv = (x).getList ();
						i = x.intValue;
						if (i <= 0) i = sv.size () - i;
						if (i != 2147483647) return (i < 1 || i > sv.size () ? "" : org.jmol.script.ScriptVariable.sValue (sv.get (i - 1)));
					    case 6:
						sb =  new org.jmol.util.StringXBuilder ();
						map =  new java.util.Hashtable ();
						org.jmol.script.ScriptVariable.sValueArray (sb, x, map, 0, false);
						return sb.toString ();
					    case 4:
						var s = x.value;
						i = x.intValue;
						if (i <= 0) i = s.length - i;
						if (i == 2147483647) return s;
						if (i < 1 || i > s.length) return "";
						return "" + s.charAt (i - 1);
					    case 8:
					    case 9:
					    case 11:
					    case 12:
						return org.jmol.util.Escape.escape (x.value);
					    default:
						return x.value.toString ();
					    }
					}, "org.jmol.script.Token");
	c$.sValueArray = Clazz.defineMethod (c$, "sValueArray", 
					     ($fz = function (sb, vx, map, level, isEscaped) {
						 switch (vx.tok) {
						 case 6:
						     if (map.containsKey (vx)) {
							 sb.append (isEscaped ? "{}" : vx.myName == null ? "<circular reference>" : "<" + vx.myName + ">");
							 break;
						     }map.put (vx, Boolean.TRUE);
						     var ht = vx.value;
						     var keys = ht.keySet ().toArray ();
						     java.util.Arrays.sort (keys);
						     if (isEscaped) {
							 sb.append ("{ ");
							 var sep = "";
							 for (var i = 0; i < keys.length; i++) {
							     var key = keys[i];
							     sb.append (sep).append (org.jmol.util.Escape.escapeStr (key)).appendC (':');
							     org.jmol.script.ScriptVariable.sValueArray (sb, ht.get (key), map, level + 1, true);
							     sep = ", ";
							 }
							 sb.append (" }");
							 break;
						     }for (var i = 0; i < keys.length; i++) {
							 sb.append (keys[i]).append ("\t:");
							 var v = ht.get (keys[i]);
							 var sb2 =  new org.jmol.util.StringXBuilder ();
							 org.jmol.script.ScriptVariable.sValueArray (sb2, v, map, level + 1, isEscaped);
							 var value = sb2.toString ();
							 sb.append (value.indexOf ("\n") >= 0 ? "\n" : "\t");
							 sb.append (value).append ("\n");
						     }
						     break;
						 case 7:
						     if (map.containsKey (vx)) {
							 sb.append (isEscaped ? "[]" : vx.myName == null ? "<circular reference>" : "<" + vx.myName + ">");
							 break;
						     }map.put (vx, Boolean.TRUE);
						     if (isEscaped) sb.append ("[");
						     var sx = vx.getList ();
						     for (var i = 0; i < sx.size (); i++) {
							 if (isEscaped && i > 0) sb.append (",");
							 var sv = sx.get (i);
							 org.jmol.script.ScriptVariable.sValueArray (sb, sv, map, level + 1, isEscaped);
							 if (!isEscaped) sb.append ("\n");
						     }
						     if (isEscaped) sb.append ("]");
						     break;
						 default:
						     if (!isEscaped) for (var j = 0; j < level - 1; j++) sb.append ("\t");

						     sb.append (isEscaped ? vx.escape () : org.jmol.script.ScriptVariable.sValue (vx));
						 }
					     }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,org.jmol.script.ScriptVariable,java.util.Map,~N,~B");
	c$.ptValue = Clazz.defineMethod (c$, "ptValue", 
					 function (x) {
					     switch (x.tok) {
					     case 8:
						 return x.value;
					     case 4:
						 var o = org.jmol.util.Escape.unescapePoint (x.value);
						 if (Clazz.instanceOf (o, org.jmol.util.Point3f)) return o;
					     }
					     return null;
					 }, "org.jmol.script.ScriptVariable");
	c$.pt4Value = Clazz.defineMethod (c$, "pt4Value", 
					  function (x) {
					      switch (x.tok) {
					      case 9:
						  return x.value;
					      case 4:
						  var o = org.jmol.util.Escape.unescapePoint (x.value);
						  if (!(Clazz.instanceOf (o, org.jmol.util.Point4f))) break;
						  return o;
					      }
					      return null;
					  }, "org.jmol.script.ScriptVariable");
	c$.toFloat = Clazz.defineMethod (c$, "toFloat", 
					 ($fz = function (s) {
					     if (s.equalsIgnoreCase ("true")) return 1;
					     if (s.equalsIgnoreCase ("false") || s.length == 0) return 0;
					     return org.jmol.util.Parser.parseFloatStrict (s);
					 }, $fz.isPrivate = true, $fz), "~S");
	c$.concatList = Clazz.defineMethod (c$, "concatList", 
					    function (x1, x2, asNew) {
						var v1 = x1.getList ();
						var v2 = x2.getList ();
						if (!asNew) {
						    if (v2 == null) v1.add (org.jmol.script.ScriptVariable.newScriptVariableToken (x2));
						    else for (var i = 0; i < v2.size (); i++) v1.add (v2.get (i));

						    return x1;
						}var vlist =  new java.util.ArrayList ((v1 == null ? 1 : v1.size ()) + (v2 == null ? 1 : v2.size ()));
						if (v1 == null) vlist.add (x1);
						else for (var i = 0; i < v1.size (); i++) vlist.add (v1.get (i));

						if (v2 == null) vlist.add (x2);
						else for (var i = 0; i < v2.size (); i++) vlist.add (v2.get (i));

						return org.jmol.script.ScriptVariable.getVariableList (vlist);
					    }, "org.jmol.script.ScriptVariable,org.jmol.script.ScriptVariable,~B");
	c$.bsSelectToken = Clazz.defineMethod (c$, "bsSelectToken", 
					       function (x) {
						   x = org.jmol.script.ScriptVariable.selectItemTok (x, -2147483648);
						   return x.value;
					       }, "org.jmol.script.Token");
	c$.bsSelectVar = Clazz.defineMethod (c$, "bsSelectVar", 
					     function ($var) {
						 if ($var.index == 2147483647) $var = org.jmol.script.ScriptVariable.selectItemVar ($var);
						 return $var.value;
					     }, "org.jmol.script.ScriptVariable");
	c$.bsSelectRange = Clazz.defineMethod (c$, "bsSelectRange", 
					       function (x, n) {
						   x = org.jmol.script.ScriptVariable.selectItemTok (x);
						   x = org.jmol.script.ScriptVariable.selectItemTok (x, (n <= 0 ? n : 1));
						   x = org.jmol.script.ScriptVariable.selectItemTok (x, (n <= 0 ? 2147483646 : n));
						   return x.value;
					       }, "org.jmol.script.Token,~N");
	c$.selectItemVar = Clazz.defineMethod (c$, "selectItemVar", 
					       function ($var) {
						   if ($var.index != 2147483647 || $var.tok == 7 && $var.intValue == 2147483647) return $var;
						   return org.jmol.script.ScriptVariable.selectItemVar2 ($var, -2147483648);
					       }, "org.jmol.script.ScriptVariable");
	c$.selectItemTok = Clazz.defineMethod (c$, "selectItemTok", 
					       function ($var) {
						   return org.jmol.script.ScriptVariable.selectItemTok ($var, -2147483648);
					       }, "org.jmol.script.Token");
	c$.selectItemVar2 = Clazz.defineMethod (c$, "selectItemVar2", 
						function ($var, i2) {
						    return org.jmol.script.ScriptVariable.selectItemTok ($var, i2);
						}, "org.jmol.script.ScriptVariable,~N");
	c$.selectItemTok = Clazz.defineMethod (c$, "selectItemTok", 
					       function (tokenIn, i2) {
						   switch (tokenIn.tok) {
						   case 11:
						   case 12:
						   case 10:
						   case 7:
						   case 4:
						       break;
						   default:
						       return tokenIn;
						   }
						   var bs = null;
						   var s = null;
						   var i1 = tokenIn.intValue;
						   if (i1 == 2147483647) {
						       if (i2 == -2147483648) i2 = i1;
						       var v = org.jmol.script.ScriptVariable.newScriptVariableIntValue (tokenIn.tok, i2, tokenIn.value);
						       return v;
						   }var len = 0;
						   var isInputSelected = (Clazz.instanceOf (tokenIn, org.jmol.script.ScriptVariable) && (tokenIn).index != 2147483647);
						   var tokenOut =  new org.jmol.script.ScriptVariableInt (2147483647);
						   switch (tokenIn.tok) {
						   case 10:
						       if (Clazz.instanceOf (tokenIn.value, org.jmol.modelset.Bond.BondSet)) {
							   tokenOut.value =  new org.jmol.modelset.Bond.BondSet (tokenIn.value, (tokenIn.value).getAssociatedAtoms ());
							   bs = tokenOut.value;
							   len = org.jmol.util.BitSetUtil.cardinalityOf (bs);
							   break;
						       }bs = org.jmol.util.BitSetUtil.copy (tokenIn.value);
						       len = (isInputSelected ? 1 : org.jmol.util.BitSetUtil.cardinalityOf (bs));
						       tokenOut.value = bs;
						       break;
						   case 7:
						       len = (tokenIn).getList ().size ();
						       break;
						   case 4:
						       s = tokenIn.value;
						       len = s.length;
						       break;
						   case 11:
						       len = -3;
						       break;
						   case 12:
						       len = -4;
						       break;
						   }
						   if (len < 0) {
						       len = -len;
						       if (i1 > 0 && Math.abs (i1) > len) {
							   var col = i1 % 10;
							   var row = Clazz.doubleToInt ((i1 - col) / 10);
							   if (col > 0 && col <= len && row <= len) {
							       if (tokenIn.tok == 11) return org.jmol.script.ScriptVariable.newVariable (3,  new Float ((tokenIn.value).getElement (row - 1, col - 1)));
							       return org.jmol.script.ScriptVariable.newVariable (3,  new Float ((tokenIn.value).getElement (row - 1, col - 1)));
							   }return org.jmol.script.ScriptVariable.newVariable (4, "");
						       }if (Math.abs (i1) > len) return org.jmol.script.ScriptVariable.newVariable (4, "");
						       var data =  Clazz.newFloatArray (len, 0);
						       if (len == 3) {
							   if (i1 < 0) (tokenIn.value).getColumn (-1 - i1, data);
							   else (tokenIn.value).getRow (i1 - 1, data);
						       } else {
							   if (i1 < 0) (tokenIn.value).getColumn (-1 - i1, data);
							   else (tokenIn.value).getRow (i1 - 1, data);
						       }if (i2 == -2147483648) return org.jmol.script.ScriptVariable.getVariableAF (data);
						       if (i2 < 1 || i2 > len) return org.jmol.script.ScriptVariable.newVariable (4, "");
						       return org.jmol.script.ScriptVariable.newVariable (3,  new Float (data[i2 - 1]));
						   }if (i1 <= 0) i1 = len + i1;
						   if (i1 < 1) i1 = 1;
						   if (i2 == 0) i2 = len;
						   else if (i2 < 0) i2 = len + i2;
						   if (i2 > len) i2 = len;
						   else if (i2 < i1) i2 = i1;
						   switch (tokenIn.tok) {
						   case 10:
						       if (isInputSelected) {
							   if (i1 > 1) bs.clearAll ();
							   break;
						       }var n = 0;
						       for (var j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1)) if (++n < i1 || n > i2) bs.clear (j);

						       break;
						   case 4:
						       if (i1 < 1 || i1 > len) tokenOut.value = "";
						       else tokenOut.value = s.substring (i1 - 1, i2);
						       break;
						   case 7:
						       if (i1 < 1 || i1 > len || i2 > len) return org.jmol.script.ScriptVariable.newVariable (4, "");
						       if (i2 == i1) return (tokenIn).getList ().get (i1 - 1);
						       var o2 =  new java.util.ArrayList ();
						       var o1 = (tokenIn).getList ();
						       n = i2 - i1 + 1;
						       for (var i = 0; i < n; i++) o2.add (org.jmol.script.ScriptVariable.newScriptVariableToken (o1.get (i + i1 - 1)));

						       tokenOut.value = o2;
						       break;
						   }
						   return tokenOut;
					       }, "org.jmol.script.Token,~N");
	Clazz.defineMethod (c$, "setSelectedValue", 
			    function (selector, $var) {
				if (selector == 2147483647) return false;
				var len;
				switch (this.tok) {
				case 11:
				case 12:
				    len = (this.tok == 11 ? 3 : 4);
				    if (selector > 10) {
					var col = selector % 10;
					var row = Clazz.doubleToInt ((selector - col) / 10);
					if (col > 0 && col <= len && row <= len) {
					    if (this.tok == 11) (this.value).setElement (row - 1, col - 1, org.jmol.script.ScriptVariable.fValue ($var));
					    else (this.value).setElement (row - 1, col - 1, org.jmol.script.ScriptVariable.fValue ($var));
					    return true;
					}}if (selector != 0 && Math.abs (selector) <= len && $var.tok == 7) {
					    var sv = $var.getList ();
					    if (sv.size () == len) {
						var data =  Clazz.newFloatArray (len, 0);
						for (var i = 0; i < len; i++) data[i] = org.jmol.script.ScriptVariable.fValue (sv.get (i));

						if (selector > 0) {
						    if (this.tok == 11) (this.value).setRow (selector - 1, data);
						    else (this.value).setRow (selector - 1, data);
						} else {
						    if (this.tok == 11) (this.value).setColumn (-1 - selector, data);
						    else (this.value).setColumn (-1 - selector, data);
						}return true;
					    }}return false;
				case 4:
				    var str = this.value;
				    var pt = str.length;
				    if (selector <= 0) selector = pt + selector;
				    if (--selector < 0) selector = 0;
				    while (selector >= str.length) str += " ";

				    this.value = str.substring (0, selector) + org.jmol.script.ScriptVariable.sValue ($var) + str.substring (selector + 1);
				    return true;
				case 7:
				    len = this.getList ().size ();
				    if (selector <= 0) selector = len + selector;
				    if (--selector < 0) selector = 0;
				    if (len <= selector) {
					for (var i = len; i <= selector; i++) this.getList ().add (org.jmol.script.ScriptVariable.newVariable (4, ""));

				    }this.getList ().set (selector, $var);
				    return true;
				}
				return false;
			    }, "~N,org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "escape", 
			    function () {
				switch (this.tok) {
				case 4:
				    return org.jmol.util.Escape.escape (this.value);
				case 7:
				case 6:
				    var sb =  new org.jmol.util.StringXBuilder ();
				    var map =  new java.util.Hashtable ();
				    org.jmol.script.ScriptVariable.sValueArray (sb, this, map, 0, true);
				    return sb.toString ();
				default:
				    return org.jmol.script.ScriptVariable.sValue (this);
				}
			    });
	c$.unescapePointOrBitsetAsVariable = Clazz.defineMethod (c$, "unescapePointOrBitsetAsVariable", 
								 function (o) {
								     if (o == null) return o;
								     var v = null;
								     var s = null;
								     if (Clazz.instanceOf (o, org.jmol.script.ScriptVariable)) {
									 var sv = o;
									 switch (sv.tok) {
									 case 8:
									 case 9:
									 case 11:
									 case 12:
									 case 10:
									     v = sv.value;
									     break;
									 case 4:
									     s = sv.value;
									     break;
									 default:
									     s = org.jmol.script.ScriptVariable.sValue (sv);
									     break;
									 }
								     } else if (Clazz.instanceOf (o, String)) {
									 s = o;
								     }if (s != null && s.length == 0) return s;
								     if (v == null) v = org.jmol.util.Escape.unescapePointOrBitsetOrMatrixOrArray (s);
								     if (Clazz.instanceOf (v, org.jmol.util.Point3f)) return (org.jmol.script.ScriptVariable.newVariable (8, v));
								     if (Clazz.instanceOf (v, org.jmol.util.Point4f)) return org.jmol.script.ScriptVariable.newVariable (9, v);
								     if (Clazz.instanceOf (v, org.jmol.util.BitSet)) {
									 if (s != null && s.indexOf ("[{") == 0) v =  new org.jmol.modelset.Bond.BondSet (v);
									 return org.jmol.script.ScriptVariable.newVariable (10, v);
								     }if (Clazz.instanceOf (v, org.jmol.util.Matrix3f)) return (org.jmol.script.ScriptVariable.newVariable (11, v));
								     if (Clazz.instanceOf (v, org.jmol.util.Matrix4f)) return org.jmol.script.ScriptVariable.newVariable (12, v);
								     return o;
								 }, "~O");
	c$.getBoolean = Clazz.defineMethod (c$, "getBoolean", 
					    function (value) {
						return org.jmol.script.ScriptVariable.newScriptVariableToken (value ? org.jmol.script.ScriptVariable.vT : org.jmol.script.ScriptVariable.vF);
					    }, "~B");
	c$.sprintf = Clazz.defineMethod (c$, "sprintf", 
					 function (strFormat, $var) {
					     if ($var == null) return strFormat;
					     var vd = (strFormat.indexOf ("d") >= 0 || strFormat.indexOf ("i") >= 0 ?  Clazz.newIntArray (1, 0) : null);
					     var vf = (strFormat.indexOf ("f") >= 0 ?  Clazz.newFloatArray (1, 0) : null);
					     var ve = (strFormat.indexOf ("e") >= 0 ?  Clazz.newDoubleArray (1, 0) : null);
					     var getS = (strFormat.indexOf ("s") >= 0);
					     var getP = (strFormat.indexOf ("p") >= 0 && $var.tok == 8);
					     var getQ = (strFormat.indexOf ("q") >= 0 && $var.tok == 9);
					     var of = [vd, vf, ve, null, null, null];
					     if ($var.tok != 7) return org.jmol.script.ScriptVariable.sprintf (strFormat, $var, of, vd, vf, ve, getS, getP, getQ);
					     var sv = $var.getList ();
					     var list2 =  new Array (sv.size ());
					     for (var i = 0; i < list2.length; i++) list2[i] = org.jmol.script.ScriptVariable.sprintf (strFormat, sv.get (i), of, vd, vf, ve, getS, getP, getQ);

					     return list2;
					 }, "~S,org.jmol.script.ScriptVariable");
	c$.sprintf = Clazz.defineMethod (c$, "sprintf", 
					 ($fz = function (strFormat, $var, of, vd, vf, ve, getS, getP, getQ) {
					     if (vd != null) vd[0] = org.jmol.script.ScriptVariable.iValue ($var);
					     if (vf != null) vf[0] = org.jmol.script.ScriptVariable.fValue ($var);
					     if (ve != null) ve[0] = org.jmol.script.ScriptVariable.fValue ($var);
					     if (getS) of[3] = org.jmol.script.ScriptVariable.sValue ($var);
					     if (getP) of[4] = $var.value;
					     if (getQ) of[5] = $var.value;
					     return org.jmol.util.TextFormat.sprintf (strFormat, "IFDspq", of);
					 }, $fz.isPrivate = true, $fz), "~S,org.jmol.script.ScriptVariable,~A,~A,~A,~A,~B,~B,~B");
	c$.sprintfArray = Clazz.defineMethod (c$, "sprintfArray", 
					      function (args) {
						  switch (args.length) {
						  case 0:
						      return "";
						  case 1:
						      return org.jmol.script.ScriptVariable.sValue (args[0]);
						  }
						  var format = org.jmol.util.TextFormat.split (org.jmol.util.TextFormat.simpleReplace (org.jmol.script.ScriptVariable.sValue (args[0]), "%%", "\1"), '%');
						  var sb =  new org.jmol.util.StringXBuilder ();
						  sb.append (format[0]);
						  for (var i = 1; i < format.length; i++) {
						      var ret = org.jmol.script.ScriptVariable.sprintf (org.jmol.util.TextFormat.formatCheck ("%" + format[i]), (i < args.length ? args[i] : null));
						      if (org.jmol.util.Escape.isAS (ret)) {
							  var list = ret;
							  for (var j = 0; j < list.length; j++) sb.append (list[j]).append ("\n");

							  continue;
						      }sb.append (ret);
						  }
						  return sb.toString ();
					      }, "~A");
	Clazz.defineMethod (c$, "toString", 
			    function () {
				return Clazz.superCall (this, org.jmol.script.ScriptVariable, "toString", []) + "[" + this.myName + " index =" + this.index + " intValue=" + this.intValue + "]";
			    });
	c$.getBitSet = Clazz.defineMethod (c$, "getBitSet", 
					   function (x, allowNull) {
					       switch (x.tok) {
					       case 10:
						   return org.jmol.script.ScriptVariable.bsSelectVar (x);
					       case 7:
						   var bs =  new org.jmol.util.BitSet ();
						   var sv = x.value;
						   for (var i = 0; i < sv.size (); i++) if (!sv.get (i).unEscapeBitSetArray (bs) && allowNull) return null;

						   return bs;
					       }
					       return (allowNull ? null :  new org.jmol.util.BitSet ());
					   }, "org.jmol.script.ScriptVariable,~B");
	c$.areEqual = Clazz.defineMethod (c$, "areEqual", 
					  function (x1, x2) {
					      if (x1 == null || x2 == null) return false;
					      if (x1.tok == 4 && x2.tok == 4) return org.jmol.script.ScriptVariable.sValue (x1).equalsIgnoreCase (org.jmol.script.ScriptVariable.sValue (x2));
					      if (x1.tok == 8 && x2.tok == 8) return ((x1.value).distance (x2.value) < 0.000001);
					      if (x1.tok == 9 && x2.tok == 9) return ((x1.value).distance (x2.value) < 0.000001);
					      return (Math.abs (org.jmol.script.ScriptVariable.fValue (x1) - org.jmol.script.ScriptVariable.fValue (x2)) < 0.000001);
					  }, "org.jmol.script.ScriptVariable,org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "sortOrReverse", 
			    function (arrayPt) {
				var x = this.getList ();
				if (x == null || x.size () < 2) return this;
				if (arrayPt == -2147483648) {
				    var n = x.size ();
				    for (var i = 0; i < n; i++) {
					var v = x.get (i);
					x.set (i, x.get (--n));
					x.set (n, v);
				    }
				} else {
				    java.util.Collections.sort (this.getList (), Clazz.innerTypeInstance (org.jmol.script.ScriptVariable.Sort, this, null, --arrayPt));
				}return this;
			    }, "~N");
	Clazz.defineMethod (c$, "unEscapeBitSetArray", 
			    function (bs) {
				switch (this.tok) {
				case 4:
				    var bs1 = org.jmol.util.Escape.unescapeBitset (this.value);
				    if (bs1 == null) return false;
				    bs.or (bs1);
				    return true;
				case 10:
				    bs.or (this.value);
				    return true;
				}
				return false;
			    }, "org.jmol.util.BitSet");
	c$.unEscapeBitSetArray = Clazz.defineMethod (c$, "unEscapeBitSetArray", 
						     function (x, allowNull) {
							 var bs =  new org.jmol.util.BitSet ();
							 for (var i = 0; i < x.size (); i++) if (!x.get (i).unEscapeBitSetArray (bs) && allowNull) return null;

							 return bs;
						     }, "java.util.ArrayList,~B");
	c$.listValue = Clazz.defineMethod (c$, "listValue", 
					   function (x) {
					       if (x.tok != 7) return [org.jmol.script.ScriptVariable.sValue (x)];
					       var sv = (x).getList ();
					       var list =  new Array (sv.size ());
					       for (var i = sv.size (); --i >= 0; ) list[i] = org.jmol.script.ScriptVariable.sValue (sv.get (i));

					       return list;
					   }, "org.jmol.script.Token");
	c$.flistValue = Clazz.defineMethod (c$, "flistValue", 
					    function (x, nMin) {
						if (x.tok != 7) return [org.jmol.script.ScriptVariable.fValue (x)];
						var sv = (x).getList ();
						var list;
						list =  Clazz.newFloatArray (Math.max (nMin, sv.size ()), 0);
						if (nMin == 0) nMin = list.length;
						for (var i = Math.min (sv.size (), nMin); --i >= 0; ) list[i] = org.jmol.script.ScriptVariable.fValue (sv.get (i));

						return list;
					    }, "org.jmol.script.Token,~N");
	Clazz.defineMethod (c$, "toArray", 
			    function () {
				var dim;
				var m3 = null;
				var m4 = null;
				switch (this.tok) {
				case 11:
				    m3 = this.value;
				    dim = 3;
				    break;
				case 12:
				    m4 = this.value;
				    dim = 4;
				    break;
				default:
				    return;
				}
				this.tok = 7;
				var o2 =  new java.util.ArrayList (dim);
				for (var i = 0; i < dim; i++) {
				    var a =  Clazz.newFloatArray (dim, 0);
				    if (m3 == null) m4.getRow (i, a);
				    else m3.getRow (i, a);
				    o2.set (i, org.jmol.script.ScriptVariable.getVariableAF (a));
				}
				this.value = o2;
			    });
	Clazz.defineMethod (c$, "mapValue", 
			    function (key) {
				return (this.tok == 6 ? (this.value).get (key) : null);
			    }, "~S");
	Clazz.defineMethod (c$, "getList", 
			    function () {
				return (this.tok == 7 ? this.value : null);
			    });
	c$.$ScriptVariable$Sort$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.arrayPt = 0;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.script.ScriptVariable, "Sort", null, java.util.Comparator);
	    Clazz.makeConstructor (c$, 
				   function (a) {
				       this.arrayPt = a;
				   }, "~N");
	    Clazz.overrideMethod (c$, "compare", 
				  function (a, b) {
				      if (a.tok != b.tok) {
					  if (a.tok == 3 || a.tok == 2 || b.tok == 3 || b.tok == 2) {
					      var c = org.jmol.script.ScriptVariable.fValue (a);
					      var d = org.jmol.script.ScriptVariable.fValue (b);
					      return (c < d ? -1 : c > d ? 1 : 0);
					  }if (a.tok == 4 || b.tok == 4) return org.jmol.script.ScriptVariable.sValue (a).compareTo (org.jmol.script.ScriptVariable.sValue (b));
				      }switch (a.tok) {
				      case 4:
					  return org.jmol.script.ScriptVariable.sValue (a).compareTo (org.jmol.script.ScriptVariable.sValue (b));
				      case 7:
					  var c = a.getList ();
					  var d = b.getList ();
					  if (c.size () != d.size ()) return (c.size () < d.size () ? -1 : 1);
					  var e = this.arrayPt;
					  if (e < 0) e += c.size ();
					  if (e < 0 || e >= c.size ()) return 0;
					  return this.compare (c.get (e), d.get (e));
				      default:
					  var f = org.jmol.script.ScriptVariable.fValue (a);
					  var g = org.jmol.script.ScriptVariable.fValue (b);
					  return (f < g ? -1 : f > g ? 1 : 0);
				      }
				  }, "org.jmol.script.ScriptVariable,org.jmol.script.ScriptVariable");
	    c$ = Clazz.p0p ();
	};
	c$.vT = c$.prototype.vT = org.jmol.script.ScriptVariable.newScriptVariableIntValue (1048589, 1, "true");
	c$.vF = c$.prototype.vF = org.jmol.script.ScriptVariable.newScriptVariableIntValue (1048588, 0, "false");
	c$.vAll = c$.prototype.vAll = org.jmol.script.ScriptVariable.newVariable (1048579, "all");
	Clazz.defineStatics (c$,
			     "FLAG_CANINCREMENT", 1,
			     "FLAG_LOCALVAR", 2);
	c$.pt0 = c$.prototype.pt0 =  new org.jmol.util.Point3f ();
    });
    // 
    //// org\jmol\util\ArrayUtil.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.ArrayUtil", ["java.util.Arrays"], function () {
	c$ = Clazz.declareType (org.jmol.util, "ArrayUtil");
	c$.ensureLength = Clazz.defineMethod (c$, "ensureLength", 
					      function (array, minimumLength) {
						  if (array != null && org.jmol.util.ArrayUtil.getLength (array) >= minimumLength) return array;
						  return org.jmol.util.ArrayUtil.arrayCopyObject (array, minimumLength);
					      }, "~O,~N");
	c$.ensureLengthS = Clazz.defineMethod (c$, "ensureLengthS", 
					       function (array, minimumLength) {
						   if (array != null && array.length >= minimumLength) return array;
						   return org.jmol.util.ArrayUtil.arrayCopyS (array, minimumLength);
					       }, "~A,~N");
	c$.ensureLengthA = Clazz.defineMethod (c$, "ensureLengthA", 
					       function (array, minimumLength) {
						   if (array != null && array.length >= minimumLength) return array;
						   return org.jmol.util.ArrayUtil.arrayCopyF (array, minimumLength);
					       }, "~A,~N");
	c$.ensureLengthI = Clazz.defineMethod (c$, "ensureLengthI", 
					       function (array, minimumLength) {
						   if (array != null && array.length >= minimumLength) return array;
						   return org.jmol.util.ArrayUtil.arrayCopyI (array, minimumLength);
					       }, "~A,~N");
	c$.ensureLengthShort = Clazz.defineMethod (c$, "ensureLengthShort", 
						   function (array, minimumLength) {
						       if (array != null && array.length >= minimumLength) return array;
						       return org.jmol.util.ArrayUtil.arrayCopyShort (array, minimumLength);
						   }, "~A,~N");
	c$.ensureLengthByte = Clazz.defineMethod (c$, "ensureLengthByte", 
						  function (array, minimumLength) {
						      if (array != null && array.length >= minimumLength) return array;
						      return org.jmol.util.ArrayUtil.arrayCopyByte (array, minimumLength);
						  }, "~A,~N");
	c$.doubleLength = Clazz.defineMethod (c$, "doubleLength", 
					      function (array) {
						  return org.jmol.util.ArrayUtil.arrayCopyObject (array, (array == null ? 16 : 2 * org.jmol.util.ArrayUtil.getLength (array)));
					      }, "~O");
	c$.doubleLengthS = Clazz.defineMethod (c$, "doubleLengthS", 
					       function (array) {
						   return org.jmol.util.ArrayUtil.arrayCopyS (array, (array == null ? 16 : 2 * array.length));
					       }, "~A");
	c$.doubleLengthF = Clazz.defineMethod (c$, "doubleLengthF", 
					       function (array) {
						   return org.jmol.util.ArrayUtil.arrayCopyF (array, (array == null ? 16 : 2 * array.length));
					       }, "~A");
	c$.doubleLengthI = Clazz.defineMethod (c$, "doubleLengthI", 
					       function (array) {
						   return org.jmol.util.ArrayUtil.arrayCopyI (array, (array == null ? 16 : 2 * array.length));
					       }, "~A");
	c$.doubleLengthShort = Clazz.defineMethod (c$, "doubleLengthShort", 
						   function (array) {
						       return org.jmol.util.ArrayUtil.arrayCopyShort (array, (array == null ? 16 : 2 * array.length));
						   }, "~A");
	c$.doubleLengthByte = Clazz.defineMethod (c$, "doubleLengthByte", 
						  function (array) {
						      return org.jmol.util.ArrayUtil.arrayCopyByte (array, (array == null ? 16 : 2 * array.length));
						  }, "~A");
	c$.doubleLengthBool = Clazz.defineMethod (c$, "doubleLengthBool", 
						  function (array) {
						      return org.jmol.util.ArrayUtil.arrayCopyBool (array, (array == null ? 16 : 2 * array.length));
						  }, "~A");
	c$.deleteElements = Clazz.defineMethod (c$, "deleteElements", 
						function (array, firstElement, nElements) {
						    if (nElements == 0 || array == null) return array;
						    var oldLength = org.jmol.util.ArrayUtil.getLength (array);
						    if (firstElement >= oldLength) return array;
						    var n = oldLength - (firstElement + nElements);
						    if (n < 0) n = 0;
						    var t = org.jmol.util.ArrayUtil.newInstanceO (array, firstElement + n);
						    if (firstElement > 0) System.arraycopy (array, 0, t, 0, firstElement);
						    if (n > 0) System.arraycopy (array, firstElement + nElements, t, firstElement, n);
						    return t;
						}, "~O,~N,~N");
	c$.arrayCopyObject = Clazz.defineMethod (c$, "arrayCopyObject", 
						 function (array, newLength) {
						     if (array == null) {
							 return null;
						     }var oldLength = org.jmol.util.ArrayUtil.getLength (array);
						     if (newLength == oldLength) return array;
						     var t = org.jmol.util.ArrayUtil.newInstanceO (array, newLength);
						     System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						     return t;
						 }, "~O,~N");
	c$.newInstanceO = Clazz.defineMethod (c$, "newInstanceO", 
					      ($fz = function (array, n) {
						  {
						      return new Array(n);
						  }}, $fz.isPrivate = true, $fz), "~O,~N");
	c$.getLength = Clazz.defineMethod (c$, "getLength", 
					   ($fz = function (array) {
					       {
						   return array.length
					       }}, $fz.isPrivate = true, $fz), "~O");
	c$.arrayCopyS = Clazz.defineMethod (c$, "arrayCopyS", 
					    function (array, newLength) {
						if (newLength < 0) newLength = array.length;
						var t =  new Array (newLength);
						if (array != null) {
						    var oldLength = array.length;
						    System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						}return t;
					    }, "~A,~N");
	c$.arrayCopyII = Clazz.defineMethod (c$, "arrayCopyII", 
					     function (array, newLength) {
						 var t = org.jmol.util.ArrayUtil.newInt2 (newLength);
						 if (array != null) {
						     var oldLength = array.length;
						     System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						 }return t;
					     }, "~A,~N");
	c$.arrayCopyPt = Clazz.defineMethod (c$, "arrayCopyPt", 
					     function (array, newLength) {
						 if (newLength < 0) newLength = array.length;
						 var t =  new Array (newLength);
						 if (array != null) {
						     var oldLength = array.length;
						     System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						 }return t;
					     }, "~A,~N");
	c$.arrayCopyF = Clazz.defineMethod (c$, "arrayCopyF", 
					    function (array, newLength) {
						if (newLength < 0) newLength = array.length;
						var t =  Clazz.newFloatArray (newLength, 0);
						if (array != null) {
						    var oldLength = array.length;
						    System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						}return t;
					    }, "~A,~N");
	c$.arrayCopyI = Clazz.defineMethod (c$, "arrayCopyI", 
					    function (array, newLength) {
						if (newLength < 0) newLength = array.length;
						var t =  Clazz.newIntArray (newLength, 0);
						if (array != null) {
						    var oldLength = array.length;
						    System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						}return t;
					    }, "~A,~N");
	c$.arrayCopyRangeI = Clazz.defineMethod (c$, "arrayCopyRangeI", 
						 function (array, i0, n) {
						     if (array == null) return null;
						     var oldLength = array.length;
						     if (n == -1) n = oldLength;
						     if (n == -2) n = Clazz.doubleToInt (oldLength / 2);
						     n = n - i0;
						     var t =  Clazz.newIntArray (n, 0);
						     System.arraycopy (array, i0, t, 0, n);
						     return t;
						 }, "~A,~N,~N");
	c$.arrayCopyRangeRevI = Clazz.defineMethod (c$, "arrayCopyRangeRevI", 
						    function (array, i0, n) {
							if (array == null) return null;
							var t = org.jmol.util.ArrayUtil.arrayCopyRangeI (array, i0, n);
							if (n < 0) n = array.length;
							for (var i = Clazz.doubleToInt (n / 2); --i >= 0; ) org.jmol.util.ArrayUtil.swapInt (t, i, n - 1 - i);

							return t;
						    }, "~A,~N,~N");
	c$.arrayCopyShort = Clazz.defineMethod (c$, "arrayCopyShort", 
						function (array, newLength) {
						    if (newLength < 0) newLength = array.length;
						    var t =  Clazz.newShortArray (newLength, 0);
						    if (array != null) {
							var oldLength = array.length;
							System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						    }return t;
						}, "~A,~N");
	c$.arrayCopyByte = Clazz.defineMethod (c$, "arrayCopyByte", 
					       function (array, newLength) {
						   if (newLength < 0) newLength = array.length;
						   var t =  Clazz.newByteArray (newLength, 0);
						   if (array != null) {
						       var oldLength = array.length;
						       System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						   }return t;
					       }, "~A,~N");
	c$.arrayCopyBool = Clazz.defineMethod (c$, "arrayCopyBool", 
					       function (array, newLength) {
						   if (newLength < 0) newLength = array.length;
						   var t =  Clazz.newBooleanArray (newLength, false);
						   if (array != null) {
						       var oldLength = array.length;
						       System.arraycopy (array, 0, t, 0, oldLength < newLength ? oldLength : newLength);
						   }return t;
					       }, "~A,~N");
	c$.swapInt = Clazz.defineMethod (c$, "swapInt", 
					 function (array, indexA, indexB) {
					     var t = array[indexA];
					     array[indexA] = array[indexB];
					     array[indexB] = t;
					 }, "~A,~N,~N");
	c$.dumpArray = Clazz.defineMethod (c$, "dumpArray", 
					   function (msg, A, x1, x2, y1, y2) {
					       var s = "dumpArray: " + msg + "\n";
					       for (var x = x1; x <= x2; x++) s += "\t*" + x + "*";

					       for (var y = y2; y >= y1; y--) {
						   s += "\n*" + y + "*";
						   for (var x = x1; x <= x2; x++) s += "\t" + (x < A.length && y < A[x].length ? A[x][y] : NaN);

					       }
					       return s;
					   }, "~S,~A,~N,~N,~N,~N");
	c$.dumpIntArray = Clazz.defineMethod (c$, "dumpIntArray", 
					      function (A, n) {
						  var str = "";
						  for (var i = 0; i < n; i++) str += " " + A[i];

						  return str;
					      }, "~A,~N");
	c$.sortedItem = Clazz.defineMethod (c$, "sortedItem", 
					    function (v, n) {
						if (v.size () == 0) return null;
						if (v.size () == 1) return v.get (0);
						var keys = v.toArray ( new Array (v.size ()));
						java.util.Arrays.sort (keys);
						return keys[n % keys.length];
					    }, "java.util.List,~N");
	c$.createArrayOfArrayList = Clazz.defineMethod (c$, "createArrayOfArrayList", 
							function (size) {
							    return  new Array (size);
							}, "~N");
	c$.createArrayOfHashtable = Clazz.defineMethod (c$, "createArrayOfHashtable", 
							function (size) {
							    return  new Array (size);
							}, "~N");
	c$.swap = Clazz.defineMethod (c$, "swap", 
				      function (o, i, j) {
					  var oi = o[i];
					  o[i] = o[j];
					  o[j] = oi;
				      }, "~A,~N,~N");
	c$.newFloat2 = Clazz.defineMethod (c$, "newFloat2", 
					   function (n) {
					       {
						   return Clazz.newArray(n, null);
					       }}, "~N");
	c$.newInt2 = Clazz.defineMethod (c$, "newInt2", 
					 function (n) {
					     {
						 return Clazz.newArray(n, null);
					     }}, "~N");
	c$.newFloat3 = Clazz.defineMethod (c$, "newFloat3", 
					   function (nx, ny) {
					       {
						   return Clazz.newArray(nx, null);
					       }}, "~N,~N");
	c$.newInt4 = Clazz.defineMethod (c$, "newInt4", 
					 function (n) {
					     {
						 return Clazz.newArray(n, null);
					     }}, "~N");
	c$.newShort2 = Clazz.defineMethod (c$, "newShort2", 
					   function (n) {
					       {
						   return Clazz.newArray(n, null);
					       }}, "~N");
	c$.newByte2 = Clazz.defineMethod (c$, "newByte2", 
					  function (n) {
					      {
						  return Clazz.newArray(n, null);
					      }}, "~N");
    });
    // 
    //// org\jmol\util\BitSet.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.BitSet", ["java.lang.IndexOutOfBoundsException", "$.InternalError", "$.NegativeArraySizeException", "org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.words = null;
	    this.wordsInUse = 0;
	    this.sizeIsSticky = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "BitSet", null, Cloneable);
	c$.wordIndex = Clazz.defineMethod (c$, "wordIndex", 
					   ($fz = function (bitIndex) {
					       return bitIndex >> 5;
					   }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "recalculateWordsInUse", 
			    ($fz = function () {
				var i;
				for (i = this.wordsInUse - 1; i >= 0; i--) if (this.words[i] != 0) break;

				this.wordsInUse = i + 1;
			    }, $fz.isPrivate = true, $fz));
	Clazz.makeConstructor (c$, 
			       function () {
				   this.initWords (32);
				   this.sizeIsSticky = false;
			       });
	c$.newN = Clazz.defineMethod (c$, "newN", 
				      function (nbits) {
					  var bs =  new org.jmol.util.BitSet ();
					  bs.init (nbits);
					  return bs;
				      }, "~N");
	Clazz.defineMethod (c$, "init", 
			    ($fz = function (nbits) {
				if (nbits < 0) throw  new NegativeArraySizeException ("nbits < 0: " + nbits);
				this.initWords (nbits);
				this.sizeIsSticky = true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "initWords", 
			    ($fz = function (nbits) {
				this.words =  Clazz.newIntArray (org.jmol.util.BitSet.wordIndex (nbits - 1) + 1, 0);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "ensureCapacity", 
			    ($fz = function (wordsRequired) {
				if (this.words.length < wordsRequired) {
				    var request = Math.max (2 * this.words.length, wordsRequired);
				    this.setLength (request);
				    this.sizeIsSticky = false;
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "expandTo", 
			    ($fz = function (wordIndex) {
				var wordsRequired = wordIndex + 1;
				if (this.wordsInUse < wordsRequired) {
				    this.ensureCapacity (wordsRequired);
				    this.wordsInUse = wordsRequired;
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "set", 
			    function (bitIndex) {
				if (bitIndex < 0) throw  new IndexOutOfBoundsException ("bitIndex < 0: " + bitIndex);
				var wordIndex = org.jmol.util.BitSet.wordIndex (bitIndex);
				this.expandTo (wordIndex);
				this.words[wordIndex] |= (1 << bitIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "setBitTo", 
			    function (bitIndex, value) {
				if (value) this.set (bitIndex);
				else this.clear (bitIndex);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setBits", 
			    function (fromIndex, toIndex) {
				if (fromIndex == toIndex) return;
				var startWordIndex = org.jmol.util.BitSet.wordIndex (fromIndex);
				var endWordIndex = org.jmol.util.BitSet.wordIndex (toIndex - 1);
				this.expandTo (endWordIndex);
				var firstWordMask = -1 << fromIndex;
				var lastWordMask = -1 >>> -toIndex;
				if (startWordIndex == endWordIndex) {
				    this.words[startWordIndex] |= (firstWordMask & lastWordMask);
				} else {
				    this.words[startWordIndex] |= firstWordMask;
				    for (var i = startWordIndex + 1; i < endWordIndex; i++) this.words[i] = -1;

				    this.words[endWordIndex] |= lastWordMask;
				}}, "~N,~N");
	Clazz.defineMethod (c$, "clear", 
			    function (bitIndex) {
				if (bitIndex < 0) throw  new IndexOutOfBoundsException ("bitIndex < 0: " + bitIndex);
				var wordIndex = org.jmol.util.BitSet.wordIndex (bitIndex);
				if (wordIndex >= this.wordsInUse) return;
				this.words[wordIndex] &= ~(1 << bitIndex);
				this.recalculateWordsInUse ();
			    }, "~N");
	Clazz.defineMethod (c$, "clearBits", 
			    function (fromIndex, toIndex) {
				if (fromIndex == toIndex) return;
				var startWordIndex = org.jmol.util.BitSet.wordIndex (fromIndex);
				if (startWordIndex >= this.wordsInUse) return;
				var endWordIndex = org.jmol.util.BitSet.wordIndex (toIndex - 1);
				if (endWordIndex >= this.wordsInUse) {
				    toIndex = this.length ();
				    endWordIndex = this.wordsInUse - 1;
				}var firstWordMask = -1 << fromIndex;
				var lastWordMask = -1 >>> -toIndex;
				if (startWordIndex == endWordIndex) {
				    this.words[startWordIndex] &= ~(firstWordMask & lastWordMask);
				} else {
				    this.words[startWordIndex] &= ~firstWordMask;
				    for (var i = startWordIndex + 1; i < endWordIndex; i++) this.words[i] = 0;

				    this.words[endWordIndex] &= ~lastWordMask;
				}this.recalculateWordsInUse ();
			    }, "~N,~N");
	Clazz.defineMethod (c$, "clearAll", 
			    function () {
				while (this.wordsInUse > 0) this.words[--this.wordsInUse] = 0;

			    });
	Clazz.defineMethod (c$, "get", 
			    function (bitIndex) {
				if (bitIndex < 0) throw  new IndexOutOfBoundsException ("bitIndex < 0: " + bitIndex);
				var wordIndex = org.jmol.util.BitSet.wordIndex (bitIndex);
				return (wordIndex < this.wordsInUse) && ((this.words[wordIndex] & (1 << bitIndex)) != 0);
			    }, "~N");
	Clazz.defineMethod (c$, "nextSetBit", 
			    function (fromIndex) {
				if (fromIndex < 0) throw  new IndexOutOfBoundsException ("fromIndex < 0: " + fromIndex);
				var u = org.jmol.util.BitSet.wordIndex (fromIndex);
				if (u >= this.wordsInUse) return -1;
				var word = this.words[u] & (-1 << fromIndex);
				while (true) {
				    if (word != 0) return (u * 32) + Integer.numberOfTrailingZeros (word);
				    if (++u == this.wordsInUse) return -1;
				    word = this.words[u];
				}
			    }, "~N");
	Clazz.defineMethod (c$, "nextClearBit", 
			    function (fromIndex) {
				if (fromIndex < 0) throw  new IndexOutOfBoundsException ("fromIndex < 0: " + fromIndex);
				var u = org.jmol.util.BitSet.wordIndex (fromIndex);
				if (u >= this.wordsInUse) return fromIndex;
				var word = ~this.words[u] & (-1 << fromIndex);
				while (true) {
				    if (word != 0) return (u * 32) + Integer.numberOfTrailingZeros (word);
				    if (++u == this.wordsInUse) return this.wordsInUse * 32;
				    word = ~this.words[u];
				}
			    }, "~N");
	Clazz.defineMethod (c$, "length", 
			    function () {
				if (this.wordsInUse == 0) return 0;
				return 32 * (this.wordsInUse - 1) + (32 - Integer.numberOfLeadingZeros (this.words[this.wordsInUse - 1]));
			    });
	Clazz.defineMethod (c$, "isEmpty", 
			    function () {
				return this.wordsInUse == 0;
			    });
	Clazz.defineMethod (c$, "intersects", 
			    function (set) {
				for (var i = Math.min (this.wordsInUse, set.wordsInUse) - 1; i >= 0; i--) if ((this.words[i] & set.words[i]) != 0) return true;

				return false;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "cardinality", 
			    function () {
				var sum = 0;
				for (var i = 0; i < this.wordsInUse; i++) sum += Integer.bitCount (this.words[i]);

				return sum;
			    });
	Clazz.defineMethod (c$, "and", 
			    function (set) {
				if (this === set) return;
				while (this.wordsInUse > set.wordsInUse) this.words[--this.wordsInUse] = 0;

				for (var i = 0; i < this.wordsInUse; i++) this.words[i] &= set.words[i];

				this.recalculateWordsInUse ();
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "or", 
			    function (set) {
				if (this === set) return;
				var wordsInCommon = Math.min (this.wordsInUse, set.wordsInUse);
				if (this.wordsInUse < set.wordsInUse) {
				    this.ensureCapacity (set.wordsInUse);
				    this.wordsInUse = set.wordsInUse;
				}for (var i = 0; i < wordsInCommon; i++) this.words[i] |= set.words[i];

				if (wordsInCommon < set.wordsInUse) System.arraycopy (set.words, wordsInCommon, this.words, wordsInCommon, this.wordsInUse - wordsInCommon);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "xor", 
			    function (set) {
				var wordsInCommon = Math.min (this.wordsInUse, set.wordsInUse);
				if (this.wordsInUse < set.wordsInUse) {
				    this.ensureCapacity (set.wordsInUse);
				    this.wordsInUse = set.wordsInUse;
				}for (var i = 0; i < wordsInCommon; i++) this.words[i] ^= set.words[i];

				if (wordsInCommon < set.wordsInUse) System.arraycopy (set.words, wordsInCommon, this.words, wordsInCommon, set.wordsInUse - wordsInCommon);
				this.recalculateWordsInUse ();
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "andNot", 
			    function (set) {
				for (var i = Math.min (this.wordsInUse, set.wordsInUse) - 1; i >= 0; i--) this.words[i] &= ~set.words[i];

				this.recalculateWordsInUse ();
			    }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  var h = 1234;
				  for (var i = this.wordsInUse; --i >= 0; ) h ^= this.words[i] * (i + 1);

				  return ((h >> 32) ^ h);
			      });
	Clazz.defineMethod (c$, "size", 
			    function () {
				return this.words.length * 32;
			    });
	Clazz.overrideMethod (c$, "equals", 
			      function (obj) {
				  if (!(Clazz.instanceOf (obj, org.jmol.util.BitSet))) return false;
				  if (this === obj) return true;
				  var set = obj;
				  if (this.wordsInUse != set.wordsInUse) return false;
				  for (var i = 0; i < this.wordsInUse; i++) if (this.words[i] != set.words[i]) return false;

				  return true;
			      }, "~O");
	Clazz.defineMethod (c$, "clone", 
			    function () {
				if (!this.sizeIsSticky && this.wordsInUse != this.words.length) this.setLength (this.wordsInUse);
				return org.jmol.util.BitSet.copy (this);
			    });
	Clazz.defineMethod (c$, "setLength", 
			    ($fz = function (n) {
				var a =  Clazz.newIntArray (n, 0);
				System.arraycopy (this.words, 0, a, 0, Math.min (this.wordsInUse, n));
				this.words = a;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  var numBits = (this.wordsInUse > 128) ? this.cardinality () : this.wordsInUse * 32;
				  var b = org.jmol.util.StringXBuilder.newN (6 * numBits + 2);
				  b.appendC ('{');
				  var i = this.nextSetBit (0);
				  if (i != -1) {
				      b.appendI (i);
				      for (i = this.nextSetBit (i + 1); i >= 0; i = this.nextSetBit (i + 1)) {
					  var endOfRun = this.nextClearBit (i);
					  do {
					      b.append (", ").appendI (i);
					  } while (++i < endOfRun);
				      }
				  }b.appendC ('}');
				  return b.toString ();
			      });
	c$.copy = Clazz.defineMethod (c$, "copy", 
				      function (bitsetToCopy) {
					  try {
					      var bs = bitsetToCopy.superClone ();
					      var wordCount = bitsetToCopy.wordsInUse;
					      if (wordCount == 0) bs.words = org.jmol.util.BitSet.emptyBitmap;
					      else {
						  bs.words =  Clazz.newIntArray (wordCount, 0);
						  System.arraycopy (bitsetToCopy.words, 0, bs.words, 0, wordCount);
					      }return bs;
					  } catch (e) {
					      if (Clazz.exceptionOf (e, CloneNotSupportedException)) {
						  throw  new InternalError ();
					      } else {
						  throw e;
					      }
					  }
				      }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "superClone", 
			    ($fz = function () {
				return Clazz.superCall (this, org.jmol.util.BitSet, "clone", []);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "cardinalityN", 
			    function (max) {
				var n = this.cardinality ();
				for (var i = this.length (); --i >= max; ) if (this.get (i)) n--;

				return n;
			    }, "~N");
	Clazz.defineStatics (c$,
			     "ADDRESS_BITS_PER_WORD", 5,
			     "BITS_PER_WORD", 32,
			     "WORD_MASK", 0xffffffff,
			     "emptyBitmap",  Clazz.newIntArray (0, 0));
    });
    // 
    //// org\jmol\util\BitSetUtil.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.BitSet"], "org.jmol.util.BitSetUtil", null, function () {
	c$ = Clazz.declareType (org.jmol.util, "BitSetUtil");
	c$.newAndSetBit = Clazz.defineMethod (c$, "newAndSetBit", 
					      function (i) {
						  var bs = org.jmol.util.BitSetUtil.newBitSet (i + 1);
						  bs.set (i);
						  return bs;
					      }, "~N");
	c$.areEqual = Clazz.defineMethod (c$, "areEqual", 
					  function (a, b) {
					      return (a == null || b == null ? a == null && b == null : a.equals (b));
					  }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	c$.haveCommon = Clazz.defineMethod (c$, "haveCommon", 
					    function (a, b) {
						return (a == null || b == null ? false : a.intersects (b));
					    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	c$.cardinalityOf = Clazz.defineMethod (c$, "cardinalityOf", 
					       function (bs) {
						   return (bs == null ? 0 : bs.cardinality ());
					       }, "org.jmol.util.BitSet");
	c$.newBitSet2 = Clazz.defineMethod (c$, "newBitSet2", 
					    function (i0, i1) {
						var bs = org.jmol.util.BitSetUtil.newBitSet (i1);
						bs.setBits (i0, i1);
						return bs;
					    }, "~N,~N");
	c$.setAll = Clazz.defineMethod (c$, "setAll", 
					function (n) {
					    var bs = org.jmol.util.BitSetUtil.newBitSet (n);
					    bs.setBits (0, n);
					    return bs;
					}, "~N");
	c$.andNot = Clazz.defineMethod (c$, "andNot", 
					function (a, b) {
					    if (b != null && a != null) a.andNot (b);
					    return a;
					}, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	c$.copy = Clazz.defineMethod (c$, "copy", 
				      function (bs) {
					  return bs == null ? null : bs.clone ();
				      }, "org.jmol.util.BitSet");
	c$.copy2 = Clazz.defineMethod (c$, "copy2", 
				       function (a, b) {
					   if (a == null || b == null) return null;
					   b.clearAll ();
					   b.or (a);
					   return b;
				       }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	c$.copyInvert = Clazz.defineMethod (c$, "copyInvert", 
					    function (bs, n) {
						return (bs == null ? null : org.jmol.util.BitSetUtil.andNot (org.jmol.util.BitSetUtil.setAll (n), bs));
					    }, "org.jmol.util.BitSet,~N");
	c$.invertInPlace = Clazz.defineMethod (c$, "invertInPlace", 
					       function (bs, n) {
						   return org.jmol.util.BitSetUtil.copy2 (org.jmol.util.BitSetUtil.copyInvert (bs, n), bs);
					       }, "org.jmol.util.BitSet,~N");
	c$.toggleInPlace = Clazz.defineMethod (c$, "toggleInPlace", 
					       function (a, b) {
						   if (a.equals (b)) {
						       a.clearAll ();
						   } else if (org.jmol.util.BitSetUtil.andNot (org.jmol.util.BitSetUtil.copy (b), a).length () == 0) {
						       org.jmol.util.BitSetUtil.andNot (a, b);
						   } else {
						       a.or (b);
						   }return a;
					       }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	c$.deleteBits = Clazz.defineMethod (c$, "deleteBits", 
					    function (bs, bsDelete) {
						if (bs == null || bsDelete == null) return bs;
						var ipt = bsDelete.nextSetBit (0);
						if (ipt < 0) return bs;
						var len = bs.length ();
						var lend = Math.min (len, bsDelete.length ());
						var i;
						for (i = bsDelete.nextClearBit (ipt); i < lend && i >= 0; i = bsDelete.nextClearBit (i + 1)) bs.setBitTo (ipt++, bs.get (i));

						for (i = lend; i < len; i++) bs.setBitTo (ipt++, bs.get (i));

						if (ipt < len) bs.clearBits (ipt, len);
						return bs;
					    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	c$.newBitSet = Clazz.defineMethod (c$, "newBitSet", 
					   function (nFree) {
					       return org.jmol.util.BitSet.newN (nFree);
					   }, "~N");
	c$.bsNull = c$.prototype.bsNull =  new org.jmol.util.BitSet ();
	c$.emptySet = c$.prototype.emptySet =  new org.jmol.util.BitSet ();
    });
    // 
    //// org\jmol\util\Matrix3f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Matrix3f", ["java.lang.ArrayIndexOutOfBoundsException", "org.jmol.util.Tuple3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.m00 = 0;
	    this.m01 = 0;
	    this.m02 = 0;
	    this.m10 = 0;
	    this.m11 = 0;
	    this.m12 = 0;
	    this.m20 = 0;
	    this.m21 = 0;
	    this.m22 = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Matrix3f", null, java.io.Serializable);
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	c$.newA = Clazz.defineMethod (c$, "newA", 
				      function (v) {
					  var m =  new org.jmol.util.Matrix3f ();
					  m.setA (v);
					  return m;
				      }, "~A");
	c$.newM = Clazz.defineMethod (c$, "newM", 
				      function (m1) {
					  var m =  new org.jmol.util.Matrix3f ();
					  m.m00 = m1.m00;
					  m.m01 = m1.m01;
					  m.m02 = m1.m02;
					  m.m10 = m1.m10;
					  m.m11 = m1.m11;
					  m.m12 = m1.m12;
					  m.m20 = m1.m20;
					  m.m21 = m1.m21;
					  m.m22 = m1.m22;
					  return m;
				      }, "org.jmol.util.Matrix3f");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "[\n  [" + this.m00 + "\t" + this.m01 + "\t" + this.m02 + "]" + "\n  [" + this.m10 + "\t" + this.m11 + "\t" + this.m12 + "]" + "\n  [" + this.m20 + "\t" + this.m21 + "\t" + this.m22 + "] ]";
			      });
	Clazz.defineMethod (c$, "setIdentity", 
			    function () {
				this.m00 = 1.0;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m10 = 0.0;
				this.m11 = 1.0;
				this.m12 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = 1.0;
			    });
	Clazz.defineMethod (c$, "setElement", 
			    function (row, column, value) {
				if (row == 0) if (column == 0) this.m00 = value;
				else if (column == 1) this.m01 = value;
				else if (column == 2) this.m02 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				else if (row == 1) if (column == 0) this.m10 = value;
				else if (column == 1) this.m11 = value;
				else if (column == 2) this.m12 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				else if (row == 2) if (column == 0) this.m20 = value;
				else if (column == 1) this.m21 = value;
				else if (column == 2) this.m22 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				else throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "getElement", 
			    function (row, column) {
				if (row == 0) if (column == 0) return this.m00;
				else if (column == 1) return this.m01;
				else if (column == 2) return this.m02;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				else if (row == 1) if (column == 0) return this.m10;
				else if (column == 1) return this.m11;
				else if (column == 2) return this.m12;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				else if (row == 2) if (column == 0) return this.m20;
				else if (column == 1) return this.m21;
				else if (column == 2) return this.m22;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				else throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setRow", 
			    function (row, x, y, z) {
				if (row == 0) {
				    this.m00 = x;
				    this.m01 = y;
				    this.m02 = z;
				} else if (row == 1) {
				    this.m10 = x;
				    this.m11 = y;
				    this.m12 = z;
				} else if (row == 2) {
				    this.m20 = x;
				    this.m21 = y;
				    this.m22 = z;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
				}}, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setRow", 
			    function (row, v) {
				if (row == 0) {
				    this.m00 = v.x;
				    this.m01 = v.y;
				    this.m02 = v.z;
				} else if (row == 1) {
				    this.m10 = v.x;
				    this.m11 = v.y;
				    this.m12 = v.z;
				} else if (row == 2) {
				    this.m20 = v.x;
				    this.m21 = v.y;
				    this.m22 = v.z;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
				}}, "~N,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "getRow", 
			    function (row, v) {
				if (row == 0) {
				    v[0] = this.m00;
				    v[1] = this.m01;
				    v[2] = this.m02;
				} else if (row == 1) {
				    v[0] = this.m10;
				    v[1] = this.m11;
				    v[2] = this.m12;
				} else if (row == 2) {
				    v[0] = this.m20;
				    v[1] = this.m21;
				    v[2] = this.m22;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "setRow", 
			    function (row, v) {
				if (row == 0) {
				    this.m00 = v[0];
				    this.m01 = v[1];
				    this.m02 = v[2];
				} else if (row == 1) {
				    this.m10 = v[0];
				    this.m11 = v[1];
				    this.m12 = v[2];
				} else if (row == 2) {
				    this.m20 = v[0];
				    this.m21 = v[1];
				    this.m22 = v[2];
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "setColumn", 
			    function (column, x, y, z) {
				if (column == 0) {
				    this.m00 = x;
				    this.m10 = y;
				    this.m20 = z;
				} else if (column == 1) {
				    this.m01 = x;
				    this.m11 = y;
				    this.m21 = z;
				} else if (column == 2) {
				    this.m02 = x;
				    this.m12 = y;
				    this.m22 = z;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				}}, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setColumnV", 
			    function (column, v) {
				if (column == 0) {
				    this.m00 = v.x;
				    this.m10 = v.y;
				    this.m20 = v.z;
				} else if (column == 1) {
				    this.m01 = v.x;
				    this.m11 = v.y;
				    this.m21 = v.z;
				} else if (column == 2) {
				    this.m02 = v.x;
				    this.m12 = v.y;
				    this.m22 = v.z;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				}}, "~N,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "setColumn", 
			    function (column, v) {
				if (column == 0) {
				    this.m00 = v[0];
				    this.m10 = v[1];
				    this.m20 = v[2];
				} else if (column == 1) {
				    this.m01 = v[0];
				    this.m11 = v[1];
				    this.m21 = v[2];
				} else if (column == 2) {
				    this.m02 = v[0];
				    this.m12 = v[1];
				    this.m22 = v[2];
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "getColumnV", 
			    function (column, v) {
				if (column == 0) {
				    v.x = this.m00;
				    v.y = this.m10;
				    v.z = this.m20;
				} else if (column == 1) {
				    v.x = this.m01;
				    v.y = this.m11;
				    v.z = this.m21;
				} else if (column == 2) {
				    v.x = this.m02;
				    v.y = this.m12;
				    v.z = this.m22;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				}}, "~N,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "getColumn", 
			    function (column, v) {
				if (column == 0) {
				    v[0] = this.m00;
				    v[1] = this.m10;
				    v[2] = this.m20;
				} else if (column == 1) {
				    v[0] = this.m01;
				    v[1] = this.m11;
				    v[2] = this.m21;
				} else if (column == 2) {
				    v[0] = this.m02;
				    v[1] = this.m12;
				    v[2] = this.m22;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 2 and is " + column);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "add", 
			    function (m1) {
				this.m00 += m1.m00;
				this.m01 += m1.m01;
				this.m02 += m1.m02;
				this.m10 += m1.m10;
				this.m11 += m1.m11;
				this.m12 += m1.m12;
				this.m20 += m1.m20;
				this.m21 += m1.m21;
				this.m22 += m1.m22;
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "sub", 
			    function (m1) {
				this.m00 -= m1.m00;
				this.m01 -= m1.m01;
				this.m02 -= m1.m02;
				this.m10 -= m1.m10;
				this.m11 -= m1.m11;
				this.m12 -= m1.m12;
				this.m20 -= m1.m20;
				this.m21 -= m1.m21;
				this.m22 -= m1.m22;
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "transpose", 
			    function () {
				var tmp = this.m01;
				this.m01 = this.m10;
				this.m10 = tmp;
				tmp = this.m02;
				this.m02 = this.m20;
				this.m20 = tmp;
				tmp = this.m12;
				this.m12 = this.m21;
				this.m21 = tmp;
			    });
	Clazz.defineMethod (c$, "transposeM", 
			    function (m1) {
				this.set (m1);
				this.transpose ();
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setAA", 
			    function (a1) {
				this.setFromAxisAngle (a1.x, a1.y, a1.z, a1.angle);
			    }, "org.jmol.util.AxisAngle4f");
	Clazz.defineMethod (c$, "setFromAxisAngle", 
			    ($fz = function (x, y, z, angle) {
				var n = Math.sqrt (x * x + y * y + z * z);
				n = 1 / n;
				x *= n;
				y *= n;
				z *= n;
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				var omc = 1.0 - c;
				this.m00 = (c + x * x * omc);
				this.m11 = (c + y * y * omc);
				this.m22 = (c + z * z * omc);
				var tmp1 = x * y * omc;
				var tmp2 = z * s;
				this.m01 = (tmp1 - tmp2);
				this.m10 = (tmp1 + tmp2);
				tmp1 = x * z * omc;
				tmp2 = y * s;
				this.m02 = (tmp1 + tmp2);
				this.m20 = (tmp1 - tmp2);
				tmp1 = y * z * omc;
				tmp2 = x * s;
				this.m12 = (tmp1 - tmp2);
				this.m21 = (tmp1 + tmp2);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "set", 
			    function (m1) {
				this.m00 = m1.m00;
				this.m01 = m1.m01;
				this.m02 = m1.m02;
				this.m10 = m1.m10;
				this.m11 = m1.m11;
				this.m12 = m1.m12;
				this.m20 = m1.m20;
				this.m21 = m1.m21;
				this.m22 = m1.m22;
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setA", 
			    function (m) {
				this.m00 = m[0];
				this.m01 = m[1];
				this.m02 = m[2];
				this.m10 = m[3];
				this.m11 = m[4];
				this.m12 = m[5];
				this.m20 = m[6];
				this.m21 = m[7];
				this.m22 = m[8];
			    }, "~A");
	Clazz.defineMethod (c$, "invertM", 
			    function (m1) {
				this.set (m1);
				this.invert ();
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "invert", 
			    function () {
				var s = this.determinant ();
				if (s == 0.0) return;
				s = 1 / s;
				this.set (this.m11 * this.m22 - this.m12 * this.m21, this.m02 * this.m21 - this.m01 * this.m22, this.m01 * this.m12 - this.m02 * this.m11, this.m12 * this.m20 - this.m10 * this.m22, this.m00 * this.m22 - this.m02 * this.m20, this.m02 * this.m10 - this.m00 * this.m12, this.m10 * this.m21 - this.m11 * this.m20, this.m01 * this.m20 - this.m00 * this.m21, this.m00 * this.m11 - this.m01 * this.m10);
				this.mulf (s);
			    });
	Clazz.defineMethod (c$, "determinant", 
			    function () {
				return this.m00 * (this.m11 * this.m22 - this.m21 * this.m12) - this.m01 * (this.m10 * this.m22 - this.m20 * this.m12) + this.m02 * (this.m10 * this.m21 - this.m20 * this.m11);
			    });
	Clazz.defineMethod (c$, "set", 
			    function (scale) {
				this.m00 = scale;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m10 = 0.0;
				this.m11 = scale;
				this.m12 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = scale;
			    }, "~N");
	Clazz.defineMethod (c$, "rotX", 
			    function (angle) {
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				this.m00 = 1.0;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m10 = 0.0;
				this.m11 = c;
				this.m12 = -s;
				this.m20 = 0.0;
				this.m21 = s;
				this.m22 = c;
			    }, "~N");
	Clazz.defineMethod (c$, "rotY", 
			    function (angle) {
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				this.m00 = c;
				this.m01 = 0.0;
				this.m02 = s;
				this.m10 = 0.0;
				this.m11 = 1.0;
				this.m12 = 0.0;
				this.m20 = -s;
				this.m21 = 0.0;
				this.m22 = c;
			    }, "~N");
	Clazz.defineMethod (c$, "rotZ", 
			    function (angle) {
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				this.m00 = c;
				this.m01 = -s;
				this.m02 = 0.0;
				this.m10 = s;
				this.m11 = c;
				this.m12 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = 1.0;
			    }, "~N");
	Clazz.defineMethod (c$, "mulf", 
			    function (scalar) {
				this.m00 *= scalar;
				this.m01 *= scalar;
				this.m02 *= scalar;
				this.m10 *= scalar;
				this.m11 *= scalar;
				this.m12 *= scalar;
				this.m20 *= scalar;
				this.m21 *= scalar;
				this.m22 *= scalar;
			    }, "~N");
	Clazz.defineMethod (c$, "mul", 
			    function (m1) {
				this.mul2 (this, m1);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "mul2", 
			    function (m1, m2) {
				this.set (m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20, m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21, m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22, m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20, m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21, m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22, m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20, m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21, m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22);
			    }, "org.jmol.util.Matrix3f,org.jmol.util.Matrix3f");
	Clazz.overrideMethod (c$, "equals", 
			      function (o) {
				  if (!(Clazz.instanceOf (o, org.jmol.util.Matrix3f))) return false;
				  var m = o;
				  return this.m00 == m.m00 && this.m01 == m.m01 && this.m02 == m.m02 && this.m10 == m.m10 && this.m11 == m.m11 && this.m12 == m.m12 && this.m20 == m.m20 && this.m21 == m.m21 && this.m22 == m.m22;
			      }, "~O");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  return org.jmol.util.Tuple3f.floatToIntBits0 (this.m00) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m01) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m02) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m10) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m11) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m12) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m20) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m21) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m22);
			      });
	Clazz.defineMethod (c$, "setZero", 
			    function () {
				this.m00 = 0.0;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m10 = 0.0;
				this.m11 = 0.0;
				this.m12 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = 0.0;
			    });
	Clazz.defineMethod (c$, "transform", 
			    function (t) {
				this.transform2 (t, t);
			    }, "org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "transform2", 
			    function (t, result) {
				result.set (this.m00 * t.x + this.m01 * t.y + this.m02 * t.z, this.m10 * t.x + this.m11 * t.y + this.m12 * t.z, this.m20 * t.x + this.m21 * t.y + this.m22 * t.z);
			    }, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "set", 
			    ($fz = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
				this.m00 = m00;
				this.m01 = m01;
				this.m02 = m02;
				this.m10 = m10;
				this.m11 = m11;
				this.m12 = m12;
				this.m20 = m20;
				this.m21 = m21;
				this.m22 = m22;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,~N,~N,~N");
    });
    // 
    //// org\jmol\util\Matrix4f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Matrix4f", ["java.lang.ArrayIndexOutOfBoundsException", "org.jmol.util.Tuple3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.m00 = 0;
	    this.m01 = 0;
	    this.m02 = 0;
	    this.m03 = 0;
	    this.m10 = 0;
	    this.m11 = 0;
	    this.m12 = 0;
	    this.m13 = 0;
	    this.m20 = 0;
	    this.m21 = 0;
	    this.m22 = 0;
	    this.m23 = 0;
	    this.m30 = 0;
	    this.m31 = 0;
	    this.m32 = 0;
	    this.m33 = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Matrix4f", null, java.io.Serializable);
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	c$.newA = Clazz.defineMethod (c$, "newA", 
				      function (v) {
					  var m =  new org.jmol.util.Matrix4f ();
					  m.m00 = v[0];
					  m.m01 = v[1];
					  m.m02 = v[2];
					  m.m03 = v[3];
					  m.m10 = v[4];
					  m.m11 = v[5];
					  m.m12 = v[6];
					  m.m13 = v[7];
					  m.m20 = v[8];
					  m.m21 = v[9];
					  m.m22 = v[10];
					  m.m23 = v[11];
					  m.m30 = v[12];
					  m.m31 = v[13];
					  m.m32 = v[14];
					  m.m33 = v[15];
					  return m;
				      }, "~A");
	c$.newM = Clazz.defineMethod (c$, "newM", 
				      function (m1) {
					  var m =  new org.jmol.util.Matrix4f ();
					  m.m00 = m1.m00;
					  m.m01 = m1.m01;
					  m.m02 = m1.m02;
					  m.m03 = m1.m03;
					  m.m10 = m1.m10;
					  m.m11 = m1.m11;
					  m.m12 = m1.m12;
					  m.m13 = m1.m13;
					  m.m20 = m1.m20;
					  m.m21 = m1.m21;
					  m.m22 = m1.m22;
					  m.m23 = m1.m23;
					  m.m30 = m1.m30;
					  m.m31 = m1.m31;
					  m.m32 = m1.m32;
					  m.m33 = m1.m33;
					  return m;
				      }, "org.jmol.util.Matrix4f");
	c$.newMV = Clazz.defineMethod (c$, "newMV", 
				       function (m1, t) {
					   var m =  new org.jmol.util.Matrix4f ();
					   m.setMV (m1, t);
					   return m;
				       }, "org.jmol.util.Matrix3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "setMV", 
			    function (m1, t) {
				this.set (m1);
				this.setTranslation (t);
			    }, "org.jmol.util.Matrix3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "setAA", 
			    function (a1) {
				this.setFromAxisAngle (a1.x, a1.y, a1.z, a1.angle);
			    }, "org.jmol.util.AxisAngle4f");
	Clazz.defineMethod (c$, "setFromAxisAngle", 
			    ($fz = function (x, y, z, angle) {
				var n = Math.sqrt (x * x + y * y + z * z);
				n = 1 / n;
				x *= n;
				y *= n;
				z *= n;
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				var omc = 1.0 - c;
				this.m00 = (c + x * x * omc);
				this.m11 = (c + y * y * omc);
				this.m22 = (c + z * z * omc);
				var tmp1 = x * y * omc;
				var tmp2 = z * s;
				this.m01 = (tmp1 - tmp2);
				this.m10 = (tmp1 + tmp2);
				tmp1 = x * z * omc;
				tmp2 = y * s;
				this.m02 = (tmp1 + tmp2);
				this.m20 = (tmp1 - tmp2);
				tmp1 = y * z * omc;
				tmp2 = x * s;
				this.m12 = (tmp1 - tmp2);
				this.m21 = (tmp1 + tmp2);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setM", 
			    function (m1) {
				this.m00 = m1.m00;
				this.m01 = m1.m01;
				this.m02 = m1.m02;
				this.m03 = m1.m03;
				this.m10 = m1.m10;
				this.m11 = m1.m11;
				this.m12 = m1.m12;
				this.m13 = m1.m13;
				this.m20 = m1.m20;
				this.m21 = m1.m21;
				this.m22 = m1.m22;
				this.m23 = m1.m23;
				this.m30 = m1.m30;
				this.m31 = m1.m31;
				this.m32 = m1.m32;
				this.m33 = m1.m33;
			    }, "org.jmol.util.Matrix4f");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "[\n  [" + this.m00 + "\t" + this.m01 + "\t" + this.m02 + "\t" + this.m03 + "]" + "\n  [" + this.m10 + "\t" + this.m11 + "\t" + this.m12 + "\t" + this.m13 + "]" + "\n  [" + this.m20 + "\t" + this.m21 + "\t" + this.m22 + "\t" + this.m23 + "]" + "\n  [" + this.m30 + "\t" + this.m31 + "\t" + this.m32 + "\t" + this.m33 + "] ]";
			      });
	Clazz.defineMethod (c$, "setIdentity", 
			    function () {
				this.m00 = 1.0;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m03 = 0.0;
				this.m10 = 0.0;
				this.m11 = 1.0;
				this.m12 = 0.0;
				this.m13 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = 1.0;
				this.m23 = 0.0;
				this.m30 = 0.0;
				this.m31 = 0.0;
				this.m32 = 0.0;
				this.m33 = 1.0;
			    });
	Clazz.defineMethod (c$, "setElement", 
			    function (row, column, value) {
				if (row == 0) if (column == 0) this.m00 = value;
				else if (column == 1) this.m01 = value;
				else if (column == 2) this.m02 = value;
				else if (column == 3) this.m03 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else if (row == 1) if (column == 0) this.m10 = value;
				else if (column == 1) this.m11 = value;
				else if (column == 2) this.m12 = value;
				else if (column == 3) this.m13 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else if (row == 2) if (column == 0) this.m20 = value;
				else if (column == 1) this.m21 = value;
				else if (column == 2) this.m22 = value;
				else if (column == 3) this.m23 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else if (row == 3) if (column == 0) this.m30 = value;
				else if (column == 1) this.m31 = value;
				else if (column == 2) this.m32 = value;
				else if (column == 3) this.m33 = value;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 2 and is " + row);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "getElement", 
			    function (row, column) {
				if (row == 0) if (column == 0) return this.m00;
				else if (column == 1) return this.m01;
				else if (column == 2) return this.m02;
				else if (column == 3) return this.m03;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else if (row == 1) if (column == 0) return this.m10;
				else if (column == 1) return this.m11;
				else if (column == 2) return this.m12;
				else if (column == 3) return this.m13;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else if (row == 2) if (column == 0) return this.m20;
				else if (column == 1) return this.m21;
				else if (column == 2) return this.m22;
				else if (column == 3) return this.m23;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else if (row == 3) if (column == 0) return this.m30;
				else if (column == 1) return this.m31;
				else if (column == 2) return this.m32;
				else if (column == 3) return this.m33;
				else throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				else throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 3 and is " + row);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "get", 
			    function (trans) {
				trans.x = this.m03;
				trans.y = this.m13;
				trans.z = this.m23;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "getRotationScale", 
			    function (m1) {
				m1.m00 = this.m00;
				m1.m01 = this.m01;
				m1.m02 = this.m02;
				m1.m10 = this.m10;
				m1.m11 = this.m11;
				m1.m12 = this.m12;
				m1.m20 = this.m20;
				m1.m21 = this.m21;
				m1.m22 = this.m22;
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setRotationScale", 
			    function (m1) {
				this.m00 = m1.m00;
				this.m01 = m1.m01;
				this.m02 = m1.m02;
				this.m10 = m1.m10;
				this.m11 = m1.m11;
				this.m12 = m1.m12;
				this.m20 = m1.m20;
				this.m21 = m1.m21;
				this.m22 = m1.m22;
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setRow", 
			    function (row, v) {
				if (row == 0) {
				    this.m00 = v[0];
				    this.m01 = v[1];
				    this.m02 = v[2];
				    this.m03 = v[3];
				} else if (row == 1) {
				    this.m10 = v[0];
				    this.m11 = v[1];
				    this.m12 = v[2];
				    this.m13 = v[3];
				} else if (row == 2) {
				    this.m20 = v[0];
				    this.m21 = v[1];
				    this.m22 = v[2];
				    this.m23 = v[3];
				} else if (row == 3) {
				    this.m30 = v[0];
				    this.m31 = v[1];
				    this.m32 = v[2];
				    this.m33 = v[3];
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 3 and is " + row);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "getRow", 
			    function (row, v) {
				if (row == 0) {
				    v[0] = this.m00;
				    v[1] = this.m01;
				    v[2] = this.m02;
				    v[3] = this.m03;
				} else if (row == 1) {
				    v[0] = this.m10;
				    v[1] = this.m11;
				    v[2] = this.m12;
				    v[3] = this.m13;
				} else if (row == 2) {
				    v[0] = this.m20;
				    v[1] = this.m21;
				    v[2] = this.m22;
				    v[3] = this.m23;
				} else if (row == 3) {
				    v[0] = this.m30;
				    v[1] = this.m31;
				    v[2] = this.m32;
				    v[3] = this.m33;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("row must be 0 to 3 and is " + row);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "setColumn4", 
			    function (column, x, y, z, w) {
				if (column == 0) {
				    this.m00 = x;
				    this.m10 = y;
				    this.m20 = z;
				    this.m30 = w;
				} else if (column == 1) {
				    this.m01 = x;
				    this.m11 = y;
				    this.m21 = z;
				    this.m31 = w;
				} else if (column == 2) {
				    this.m02 = x;
				    this.m12 = y;
				    this.m22 = z;
				    this.m32 = w;
				} else if (column == 3) {
				    this.m03 = x;
				    this.m13 = y;
				    this.m23 = z;
				    this.m33 = w;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				}}, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setColumn", 
			    function (column, v) {
				if (column == 0) {
				    this.m00 = v[0];
				    this.m10 = v[1];
				    this.m20 = v[2];
				    this.m30 = v[3];
				} else if (column == 1) {
				    this.m01 = v[0];
				    this.m11 = v[1];
				    this.m21 = v[2];
				    this.m31 = v[3];
				} else if (column == 2) {
				    this.m02 = v[0];
				    this.m12 = v[1];
				    this.m22 = v[2];
				    this.m32 = v[3];
				} else if (column == 3) {
				    this.m03 = v[0];
				    this.m13 = v[1];
				    this.m23 = v[2];
				    this.m33 = v[3];
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "getColumn", 
			    function (column, v) {
				if (column == 0) {
				    v[0] = this.m00;
				    v[1] = this.m10;
				    v[2] = this.m20;
				    v[3] = this.m30;
				} else if (column == 1) {
				    v[0] = this.m01;
				    v[1] = this.m11;
				    v[2] = this.m21;
				    v[3] = this.m31;
				} else if (column == 2) {
				    v[0] = this.m02;
				    v[1] = this.m12;
				    v[2] = this.m22;
				    v[3] = this.m32;
				} else if (column == 3) {
				    v[0] = this.m03;
				    v[1] = this.m13;
				    v[2] = this.m23;
				    v[3] = this.m33;
				} else {
				    throw  new ArrayIndexOutOfBoundsException ("column must be 0 to 3 and is " + column);
				}}, "~N,~A");
	Clazz.defineMethod (c$, "sub", 
			    function (m1) {
				this.m00 -= m1.m00;
				this.m01 -= m1.m01;
				this.m02 -= m1.m02;
				this.m03 -= m1.m03;
				this.m10 -= m1.m10;
				this.m11 -= m1.m11;
				this.m12 -= m1.m12;
				this.m13 -= m1.m13;
				this.m20 -= m1.m20;
				this.m21 -= m1.m21;
				this.m22 -= m1.m22;
				this.m23 -= m1.m23;
				this.m30 -= m1.m30;
				this.m31 -= m1.m31;
				this.m32 -= m1.m32;
				this.m33 -= m1.m33;
			    }, "org.jmol.util.Matrix4f");
	Clazz.defineMethod (c$, "transpose", 
			    function () {
				var tmp = this.m01;
				this.m01 = this.m10;
				this.m10 = tmp;
				tmp = this.m02;
				this.m02 = this.m20;
				this.m20 = tmp;
				tmp = this.m03;
				this.m03 = this.m30;
				this.m30 = tmp;
				tmp = this.m12;
				this.m12 = this.m21;
				this.m21 = tmp;
				tmp = this.m13;
				this.m13 = this.m31;
				this.m31 = tmp;
				tmp = this.m23;
				this.m23 = this.m32;
				this.m32 = tmp;
			    });
	Clazz.defineMethod (c$, "invertM", 
			    function (m1) {
				this.setM (m1);
				this.invert ();
			    }, "org.jmol.util.Matrix4f");
	Clazz.defineMethod (c$, "invert", 
			    function () {
				var s = this.determinant ();
				if (s == 0.0) return;
				s = 1 / s;
				this.set (this.m11 * (this.m22 * this.m33 - this.m23 * this.m32) + this.m12 * (this.m23 * this.m31 - this.m21 * this.m33) + this.m13 * (this.m21 * this.m32 - this.m22 * this.m31), this.m21 * (this.m02 * this.m33 - this.m03 * this.m32) + this.m22 * (this.m03 * this.m31 - this.m01 * this.m33) + this.m23 * (this.m01 * this.m32 - this.m02 * this.m31), this.m31 * (this.m02 * this.m13 - this.m03 * this.m12) + this.m32 * (this.m03 * this.m11 - this.m01 * this.m13) + this.m33 * (this.m01 * this.m12 - this.m02 * this.m11), this.m01 * (this.m13 * this.m22 - this.m12 * this.m23) + this.m02 * (this.m11 * this.m23 - this.m13 * this.m21) + this.m03 * (this.m12 * this.m21 - this.m11 * this.m22), this.m12 * (this.m20 * this.m33 - this.m23 * this.m30) + this.m13 * (this.m22 * this.m30 - this.m20 * this.m32) + this.m10 * (this.m23 * this.m32 - this.m22 * this.m33), this.m22 * (this.m00 * this.m33 - this.m03 * this.m30) + this.m23 * (this.m02 * this.m30 - this.m00 * this.m32) + this.m20 * (this.m03 * this.m32 - this.m02 * this.m33), this.m32 * (this.m00 * this.m13 - this.m03 * this.m10) + this.m33 * (this.m02 * this.m10 - this.m00 * this.m12) + this.m30 * (this.m03 * this.m12 - this.m02 * this.m13), this.m02 * (this.m13 * this.m20 - this.m10 * this.m23) + this.m03 * (this.m10 * this.m22 - this.m12 * this.m20) + this.m00 * (this.m12 * this.m23 - this.m13 * this.m22), this.m13 * (this.m20 * this.m31 - this.m21 * this.m30) + this.m10 * (this.m21 * this.m33 - this.m23 * this.m31) + this.m11 * (this.m23 * this.m30 - this.m20 * this.m33), this.m23 * (this.m00 * this.m31 - this.m01 * this.m30) + this.m20 * (this.m01 * this.m33 - this.m03 * this.m31) + this.m21 * (this.m03 * this.m30 - this.m00 * this.m33), this.m33 * (this.m00 * this.m11 - this.m01 * this.m10) + this.m30 * (this.m01 * this.m13 - this.m03 * this.m11) + this.m31 * (this.m03 * this.m10 - this.m00 * this.m13), this.m03 * (this.m11 * this.m20 - this.m10 * this.m21) + this.m00 * (this.m13 * this.m21 - this.m11 * this.m23) + this.m01 * (this.m10 * this.m23 - this.m13 * this.m20), this.m10 * (this.m22 * this.m31 - this.m21 * this.m32) + this.m11 * (this.m20 * this.m32 - this.m22 * this.m30) + this.m12 * (this.m21 * this.m30 - this.m20 * this.m31), this.m20 * (this.m02 * this.m31 - this.m01 * this.m32) + this.m21 * (this.m00 * this.m32 - this.m02 * this.m30) + this.m22 * (this.m01 * this.m30 - this.m00 * this.m31), this.m30 * (this.m02 * this.m11 - this.m01 * this.m12) + this.m31 * (this.m00 * this.m12 - this.m02 * this.m10) + this.m32 * (this.m01 * this.m10 - this.m00 * this.m11), this.m00 * (this.m11 * this.m22 - this.m12 * this.m21) + this.m01 * (this.m12 * this.m20 - this.m10 * this.m22) + this.m02 * (this.m10 * this.m21 - this.m11 * this.m20));
				this.mul (s);
			    });
	Clazz.defineMethod (c$, "determinant", 
			    function () {
				return (this.m00 * this.m11 - this.m01 * this.m10) * (this.m22 * this.m33 - this.m23 * this.m32) - (this.m00 * this.m12 - this.m02 * this.m10) * (this.m21 * this.m33 - this.m23 * this.m31) + (this.m00 * this.m13 - this.m03 * this.m10) * (this.m21 * this.m32 - this.m22 * this.m31) + (this.m01 * this.m12 - this.m02 * this.m11) * (this.m20 * this.m33 - this.m23 * this.m30) - (this.m01 * this.m13 - this.m03 * this.m11) * (this.m20 * this.m32 - this.m22 * this.m30) + (this.m02 * this.m13 - this.m03 * this.m12) * (this.m20 * this.m31 - this.m21 * this.m30);
			    });
	Clazz.defineMethod (c$, "set", 
			    function (m1) {
				this.m00 = m1.m00;
				this.m01 = m1.m01;
				this.m02 = m1.m02;
				this.m03 = 0.0;
				this.m10 = m1.m10;
				this.m11 = m1.m11;
				this.m12 = m1.m12;
				this.m13 = 0.0;
				this.m20 = m1.m20;
				this.m21 = m1.m21;
				this.m22 = m1.m22;
				this.m23 = 0.0;
				this.m30 = 0.0;
				this.m31 = 0.0;
				this.m32 = 0.0;
				this.m33 = 1.0;
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setA", 
			    function (m) {
				this.m00 = m[0];
				this.m01 = m[1];
				this.m02 = m[2];
				this.m03 = m[3];
				this.m10 = m[4];
				this.m11 = m[5];
				this.m12 = m[6];
				this.m13 = m[7];
				this.m20 = m[8];
				this.m21 = m[9];
				this.m22 = m[10];
				this.m23 = m[11];
				this.m30 = m[12];
				this.m31 = m[13];
				this.m32 = m[14];
				this.m33 = m[15];
			    }, "~A");
	Clazz.defineMethod (c$, "setTranslation", 
			    function (trans) {
				this.m03 = trans.x;
				this.m13 = trans.y;
				this.m23 = trans.z;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "rotX", 
			    function (angle) {
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				this.m00 = 1.0;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m03 = 0.0;
				this.m10 = 0.0;
				this.m11 = c;
				this.m12 = -s;
				this.m13 = 0.0;
				this.m20 = 0.0;
				this.m21 = s;
				this.m22 = c;
				this.m23 = 0.0;
				this.m30 = 0.0;
				this.m31 = 0.0;
				this.m32 = 0.0;
				this.m33 = 1.0;
			    }, "~N");
	Clazz.defineMethod (c$, "rotY", 
			    function (angle) {
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				this.m00 = c;
				this.m01 = 0.0;
				this.m02 = s;
				this.m03 = 0.0;
				this.m10 = 0.0;
				this.m11 = 1.0;
				this.m12 = 0.0;
				this.m13 = 0.0;
				this.m20 = -s;
				this.m21 = 0.0;
				this.m22 = c;
				this.m23 = 0.0;
				this.m30 = 0.0;
				this.m31 = 0.0;
				this.m32 = 0.0;
				this.m33 = 1.0;
			    }, "~N");
	Clazz.defineMethod (c$, "rotZ", 
			    function (angle) {
				var c = Math.cos (angle);
				var s = Math.sin (angle);
				this.m00 = c;
				this.m01 = -s;
				this.m02 = 0.0;
				this.m03 = 0.0;
				this.m10 = s;
				this.m11 = c;
				this.m12 = 0.0;
				this.m13 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = 1.0;
				this.m23 = 0.0;
				this.m30 = 0.0;
				this.m31 = 0.0;
				this.m32 = 0.0;
				this.m33 = 1.0;
			    }, "~N");
	Clazz.defineMethod (c$, "mul", 
			    ($fz = function (scalar) {
				this.m00 *= scalar;
				this.m01 *= scalar;
				this.m02 *= scalar;
				this.m03 *= scalar;
				this.m10 *= scalar;
				this.m11 *= scalar;
				this.m12 *= scalar;
				this.m13 *= scalar;
				this.m20 *= scalar;
				this.m21 *= scalar;
				this.m22 *= scalar;
				this.m23 *= scalar;
				this.m30 *= scalar;
				this.m31 *= scalar;
				this.m32 *= scalar;
				this.m33 *= scalar;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "mul", 
			    function (m1) {
				this.mul2 (this, m1);
			    }, "org.jmol.util.Matrix4f");
	Clazz.defineMethod (c$, "mul2", 
			    function (m1, m2) {
				this.set (m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20 + m1.m03 * m2.m30, m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21 + m1.m03 * m2.m31, m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22 + m1.m03 * m2.m32, m1.m00 * m2.m03 + m1.m01 * m2.m13 + m1.m02 * m2.m23 + m1.m03 * m2.m33, m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20 + m1.m13 * m2.m30, m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31, m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32, m1.m10 * m2.m03 + m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33, m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20 + m1.m23 * m2.m30, m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31, m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32, m1.m20 * m2.m03 + m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33, m1.m30 * m2.m00 + m1.m31 * m2.m10 + m1.m32 * m2.m20 + m1.m33 * m2.m30, m1.m30 * m2.m01 + m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31, m1.m30 * m2.m02 + m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32, m1.m30 * m2.m03 + m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33);
			    }, "org.jmol.util.Matrix4f,org.jmol.util.Matrix4f");
	Clazz.overrideMethod (c$, "equals", 
			      function (o) {
				  if (!(Clazz.instanceOf (o, org.jmol.util.Matrix4f))) return false;
				  var m = o;
				  return (this.m00 == m.m00 && this.m01 == m.m01 && this.m02 == m.m02 && this.m03 == m.m03 && this.m10 == m.m10 && this.m11 == m.m11 && this.m12 == m.m12 && this.m13 == m.m13 && this.m20 == m.m20 && this.m21 == m.m21 && this.m22 == m.m22 && this.m23 == m.m23 && this.m30 == m.m30 && this.m31 == m.m31 && this.m32 == m.m32 && this.m33 == m.m33);
			      }, "~O");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  return org.jmol.util.Tuple3f.floatToIntBits0 (this.m00) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m01) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m02) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m03) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m10) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m11) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m12) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m13) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m20) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m21) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m22) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m23) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m30) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m31) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m32) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.m33);
			      });
	Clazz.defineMethod (c$, "transformT2", 
			    function (vec, vecOut) {
				vecOut.set (this.m00 * vec.x + this.m01 * vec.y + this.m02 * vec.z + this.m03 * vec.w, this.m10 * vec.x + this.m11 * vec.y + this.m12 * vec.z + this.m13 * vec.w, this.m20 * vec.x + this.m21 * vec.y + this.m22 * vec.z + this.m23 * vec.w, this.m30 * vec.x + this.m31 * vec.y + this.m32 * vec.z + this.m33 * vec.w);
			    }, "org.jmol.util.Tuple4f,org.jmol.util.Tuple4f");
	Clazz.defineMethod (c$, "transform4", 
			    function (vec) {
				this.transformT2 (vec, vec);
			    }, "org.jmol.util.Tuple4f");
	Clazz.defineMethod (c$, "transform2", 
			    function (point, pointOut) {
				try {
				    pointOut.set (this.m00 * point.x + this.m01 * point.y + this.m02 * point.z + this.m03, this.m10 * point.x + this.m11 * point.y + this.m12 * point.z + this.m13, this.m20 * point.x + this.m21 * point.y + this.m22 * point.z + this.m23);
				} catch (e) {
				    if (Clazz.exceptionOf (e, NullPointerException)) {
				    } else {
					throw e;
				    }
				}
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transform", 
			    function (point) {
				this.transform2 (point, point);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformV2", 
			    function (normal, normalOut) {
				normalOut.set (this.m00 * normal.x + this.m01 * normal.y + this.m02 * normal.z, this.m10 * normal.x + this.m11 * normal.y + this.m12 * normal.z, this.m20 * normal.x + this.m21 * normal.y + this.m22 * normal.z);
			    }, "org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "transformV", 
			    function (normal) {
				this.transformV2 (normal, normal);
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "setZero", 
			    function () {
				this.m00 = 0.0;
				this.m01 = 0.0;
				this.m02 = 0.0;
				this.m03 = 0.0;
				this.m10 = 0.0;
				this.m11 = 0.0;
				this.m12 = 0.0;
				this.m13 = 0.0;
				this.m20 = 0.0;
				this.m21 = 0.0;
				this.m22 = 0.0;
				this.m23 = 0.0;
				this.m30 = 0.0;
				this.m31 = 0.0;
				this.m32 = 0.0;
				this.m33 = 0.0;
			    });
	Clazz.defineMethod (c$, "set", 
			    ($fz = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
				this.m00 = m00;
				this.m01 = m01;
				this.m02 = m02;
				this.m03 = m03;
				this.m10 = m10;
				this.m11 = m11;
				this.m12 = m12;
				this.m13 = m13;
				this.m20 = m20;
				this.m21 = m21;
				this.m22 = m22;
				this.m23 = m23;
				this.m30 = m30;
				this.m31 = m31;
				this.m32 = m32;
				this.m33 = m33;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N");
    });
    // 
    //// org\jmol\util\JmolEdge.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["java.lang.Enum"], "org.jmol.util.JmolEdge", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.index = -1;
	    this.order = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "JmolEdge");
	c$.getArgbHbondType = Clazz.defineMethod (c$, "getArgbHbondType", 
						  function (order) {
						      var argbIndex = ((order & 30720) >> 11);
						      return org.jmol.util.JmolEdge.argbsHbondType[argbIndex];
						  }, "~N");
	c$.getBondOrderNumberFromOrder = Clazz.defineMethod (c$, "getBondOrderNumberFromOrder", 
							     function (order) {
								 order &= -131073;
								 if (order == 131071 || order == 65535) return "0";
								 if (org.jmol.modelset.Bond.isHydrogen (order) || (order & 256) != 0) return org.jmol.util.JmolEdge.EnumBondOrder.SINGLE.number;
								 if ((order & 224) != 0) return (order >> 5) + "." + (order & 0x1F);
								 return org.jmol.util.JmolEdge.EnumBondOrder.getNumberFromCode (order);
							     }, "~N");
	c$.getCmlBondOrder = Clazz.defineMethod (c$, "getCmlBondOrder", 
						 function (order) {
						     var sname = org.jmol.util.JmolEdge.getBondOrderNameFromOrder (order);
						     switch (sname.charAt (0)) {
						     case 's':
						     case 'd':
						     case 't':
							 return "" + sname.toUpperCase ().charAt (0);
						     case 'a':
							 if (sname.indexOf ("Double") >= 0) return "D";
							 else if (sname.indexOf ("Single") >= 0) return "S";
							 return "aromatic";
						     case 'p':
							 if (sname.indexOf (" ") >= 0) return sname.substring (sname.indexOf (" ") + 1);
							 return "partial12";
						     }
						     return null;
						 }, "~N");
	c$.getBondOrderNameFromOrder = Clazz.defineMethod (c$, "getBondOrderNameFromOrder", 
							   function (order) {
							       order &= -131073;
							       switch (order) {
							       case 65535:
							       case 131071:
								   return "";
							       case 32768:
								   return org.jmol.util.JmolEdge.EnumBondOrder.STRUT.$$name;
							       case 1:
								   return org.jmol.util.JmolEdge.EnumBondOrder.SINGLE.$$name;
							       case 2:
								   return org.jmol.util.JmolEdge.EnumBondOrder.DOUBLE.$$name;
							       }
							       if ((order & 224) != 0) return "partial " + org.jmol.util.JmolEdge.getBondOrderNumberFromOrder (order);
							       if (org.jmol.modelset.Bond.isHydrogen (order)) return org.jmol.util.JmolEdge.EnumBondOrder.H_REGULAR.$$name;
							       if ((order & 256) != 0) return org.jmol.util.JmolEdge.EnumBondOrder.SINGLE.$$name;
							       return org.jmol.util.JmolEdge.EnumBondOrder.getNameFromCode (order);
							   }, "~N");
	c$.getPartialBondDotted = Clazz.defineMethod (c$, "getPartialBondDotted", 
						      function (order) {
							  return (order & 0x1F);
						      }, "~N");
	c$.getPartialBondOrder = Clazz.defineMethod (c$, "getPartialBondOrder", 
						     function (order) {
							 return ((order & -131073) >> 5);
						     }, "~N");
	c$.getCovalentBondOrder = Clazz.defineMethod (c$, "getCovalentBondOrder", 
						      function (order) {
							  if ((order & 1023) == 0) return 0;
							  order &= -131073;
							  if ((order & 224) != 0) return org.jmol.util.JmolEdge.getPartialBondOrder (order);
							  if ((order & 256) != 0) order &= -257;
							  if ((order & 0xF8) != 0) order = 1;
							  return order & 7;
						      }, "~N");
	c$.getBondOrderFromFloat = Clazz.defineMethod (c$, "getBondOrderFromFloat", 
						       function (fOrder) {
							   switch (Clazz.floatToInt (fOrder * 10)) {
							   case 10:
							       return 1;
							   case 5:
							   case -10:
							       return 33;
							   case 15:
							       return 515;
							   case -15:
							       return 66;
							   case 20:
							       return 2;
							   case 25:
							       return 97;
							   case -25:
							       return 100;
							   case 30:
							       return 3;
							   case 40:
							       return 4;
							   }
							   return 131071;
						       }, "~N");
	c$.getBondOrderFromString = Clazz.defineMethod (c$, "getBondOrderFromString", 
							function (name) {
							    return org.jmol.util.JmolEdge.EnumBondOrder.getCodeFromName (name);
							}, "~S");
	Clazz.pu$h ();
	c$ = Clazz.decorateAsClass (function () {
	    this.code = 0;
	    this.number = null;
	    this.$$name = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util.JmolEdge, "EnumBondOrder", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (a, b, c) {
				   this.code = a;
				   this.number = b;
				   this.$$name = c;
			       }, $fz.isPrivate = true, $fz), "~N,~S,~S");
	c$.getCodeFromName = Clazz.defineMethod (c$, "getCodeFromName", 
						 function (a) {
						     for (var item, $item = 0, $$item = org.jmol.util.JmolEdge.EnumBondOrder.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.$$name.equalsIgnoreCase (a)) return item.code;

						     return 131071;
						 }, "~S");
	c$.getNameFromCode = Clazz.defineMethod (c$, "getNameFromCode", 
						 function (a) {
						     for (var item, $item = 0, $$item = org.jmol.util.JmolEdge.EnumBondOrder.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.code == a) return item.$$name;

						     return "?";
						 }, "~N");
	c$.getNumberFromCode = Clazz.defineMethod (c$, "getNumberFromCode", 
						   function (a) {
						       for (var item, $item = 0, $$item = org.jmol.util.JmolEdge.EnumBondOrder.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.code == a) return item.number;

						       return "?";
						   }, "~N");
	Clazz.defineEnumConstant (c$, "SINGLE", 0, [1, "1", "single"]);
	Clazz.defineEnumConstant (c$, "DOUBLE", 1, [2, "2", "double"]);
	Clazz.defineEnumConstant (c$, "TRIPLE", 2, [3, "3", "triple"]);
	Clazz.defineEnumConstant (c$, "QUADRUPLE", 3, [4, "4", "quadruple"]);
	Clazz.defineEnumConstant (c$, "AROMATIC", 4, [515, "1.5", "aromatic"]);
	Clazz.defineEnumConstant (c$, "STRUT", 5, [32768, "1", "struts"]);
	Clazz.defineEnumConstant (c$, "H_REGULAR", 6, [2048, "1", "hbond"]);
	Clazz.defineEnumConstant (c$, "PARTIAL01", 7, [33, "0.5", "partial"]);
	Clazz.defineEnumConstant (c$, "PARTIAL12", 8, [66, "1.5", "partialDouble"]);
	Clazz.defineEnumConstant (c$, "PARTIAL23", 9, [97, "2.5", "partialTriple"]);
	Clazz.defineEnumConstant (c$, "PARTIAL32", 10, [100, "2.5", "partialTriple2"]);
	Clazz.defineEnumConstant (c$, "AROMATIC_SINGLE", 11, [513, "1", "aromaticSingle"]);
	Clazz.defineEnumConstant (c$, "AROMATIC_DOUBLE", 12, [514, "2", "aromaticDouble"]);
	Clazz.defineEnumConstant (c$, "UNSPECIFIED", 13, [17, "1", "unspecified"]);
	c$ = Clazz.p0p ();
	Clazz.defineStatics (c$,
			     "BOND_STEREO_MASK", 0x400,
			     "BOND_STEREO_NEAR", 0x401,
			     "BOND_STEREO_FAR", 0x411,
			     "BOND_AROMATIC_MASK", 0x200,
			     "BOND_AROMATIC_SINGLE", 0x201,
			     "BOND_AROMATIC_DOUBLE", 0x202,
			     "BOND_AROMATIC", 0x203,
			     "BOND_SULFUR_MASK", 0x100,
			     "BOND_PARTIAL_MASK", 0xE0,
			     "BOND_PARTIAL01", 0x21,
			     "BOND_PARTIAL12", 0x42,
			     "BOND_PARTIAL23", 0x61,
			     "BOND_PARTIAL32", 0x64,
			     "BOND_COVALENT_MASK", 0x3FF,
			     "BOND_COVALENT_SINGLE", 1,
			     "BOND_COVALENT_DOUBLE", 2,
			     "BOND_COVALENT_TRIPLE", 3,
			     "BOND_COVALENT_QUADRUPLE", 4,
			     "BOND_ORDER_UNSPECIFIED", 0x11,
			     "BOND_ORDER_ANY", 0xFFFF,
			     "BOND_ORDER_NULL", 0x1FFFF,
			     "BOND_NEW", 0x20000,
			     "BOND_STRUT", 0x8000,
			     "BOND_HBOND_SHIFT", 11,
			     "BOND_HYDROGEN_MASK", 30720,
			     "BOND_H_REGULAR", 2048,
			     "BOND_H_CALC_MASK", 28672,
			     "BOND_H_CALC", 4096,
			     "BOND_H_PLUS_2", 6144,
			     "BOND_H_PLUS_3", 8192,
			     "BOND_H_PLUS_4", 10240,
			     "BOND_H_PLUS_5", 12288,
			     "BOND_H_MINUS_3", 14336,
			     "BOND_H_MINUS_4", 16384,
			     "BOND_H_NUCLEOTIDE", 18432,
			     "argbsHbondType", [0xFFFF69B4, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFFFF, 0xFFFF00FF, 0xFFFF0000, 0xFFFFA500, 0xFF00FFFF, 0xFF00FF00, 0xFFFF8080],
			     "FLAG_AROMATIC_DOUBLE", 16,
			     "FLAG_AROMATIC_DEFINED", 8,
			     "FLAG_AROMATIC_STRICT", 4,
			     "FLAG_IGNORE_STEREOCHEMISTRY", 2,
			     "FLAG_NO_AROMATIC", 1);
    });
    // 
    //// org\jmol\modelset\Bond.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.util.BitSet", "$.JmolEdge", "org.jmol.viewer.JmolConstants"], "org.jmol.modelset.Bond", ["org.jmol.util.BitSetUtil", "$.Colix"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.atom1 = null;
	    this.atom2 = null;
	    this.mad = 0;
	    this.colix = 0;
	    this.shapeVisibilityFlags = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "Bond", org.jmol.util.JmolEdge);
	Clazz.defineMethod (c$, "getMad", 
			    function () {
				return this.mad;
			    });
	Clazz.defineMethod (c$, "getColix", 
			    function () {
				return this.colix;
			    });
	Clazz.makeConstructor (c$, 
			       function (atom1, atom2, order, mad, colix) {
				   Clazz.superConstructor (this, org.jmol.modelset.Bond, []);
				   this.atom1 = atom1;
				   this.atom2 = atom2;
				   this.colix = colix;
				   this.setOrder (order);
				   this.setMad (mad);
			       }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N,~N");
	Clazz.defineMethod (c$, "setMad", 
			    function (mad) {
				this.mad = mad;
				this.setShapeVisibility (mad != 0);
			    }, "~N");
	Clazz.defineMethod (c$, "setShapeVisibilityFlags", 
			    function (shapeVisibilityFlags) {
				this.shapeVisibilityFlags = shapeVisibilityFlags;
			    }, "~N");
	Clazz.defineMethod (c$, "getShapeVisibilityFlags", 
			    function () {
				return this.shapeVisibilityFlags;
			    });
	Clazz.defineMethod (c$, "setShapeVisibility", 
			    function (isVisible) {
				var wasVisible = ((this.shapeVisibilityFlags & org.jmol.modelset.Bond.myVisibilityFlag) != 0);
				if (wasVisible == isVisible) return;
				this.atom1.addDisplayedBond (org.jmol.modelset.Bond.myVisibilityFlag, isVisible);
				this.atom2.addDisplayedBond (org.jmol.modelset.Bond.myVisibilityFlag, isVisible);
				if (isVisible) this.shapeVisibilityFlags |= org.jmol.modelset.Bond.myVisibilityFlag;
				else this.shapeVisibilityFlags &= ~org.jmol.modelset.Bond.myVisibilityFlag;
			    }, "~B");
	Clazz.defineMethod (c$, "getIdentity", 
			    function () {
				return (this.index + 1) + " " + this.getOrderNumberAsString () + " " + this.atom1.getInfo () + " -- " + this.atom2.getInfo () + " " + this.atom1.distance (this.atom2);
			    });
	Clazz.overrideMethod (c$, "isCovalent", 
			      function () {
				  return (this.order & 1023) != 0;
			      });
	Clazz.defineMethod (c$, "isHydrogen", 
			    function () {
				return org.jmol.modelset.Bond.isHydrogen (this.order);
			    });
	c$.isHydrogen = Clazz.defineMethod (c$, "isHydrogen", 
					    function (order) {
						return (order & 30720) != 0;
					    }, "~N");
	Clazz.defineMethod (c$, "isStereo", 
			    function () {
				return (this.order & 1024) != 0;
			    });
	Clazz.defineMethod (c$, "isPartial", 
			    function () {
				return (this.order & 224) != 0;
			    });
	Clazz.defineMethod (c$, "isAromatic", 
			    function () {
				return (this.order & 512) != 0;
			    });
	Clazz.defineMethod (c$, "setPaletteID", 
			    function (pid) {
			    }, "~N");
	Clazz.defineMethod (c$, "getEnergy", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "getValence", 
			    function () {
				return (!this.isCovalent () ? 0 : this.isPartial () || this.is (515) ? 1 : this.order & 7);
			    });
	Clazz.defineMethod (c$, "deleteAtomReferences", 
			    function () {
				if (this.atom1 != null) this.atom1.deleteBond (this);
				if (this.atom2 != null) this.atom2.deleteBond (this);
				this.atom1 = this.atom2 = null;
			    });
	Clazz.defineMethod (c$, "setColix", 
			    function (colix) {
				this.colix = colix;
			    }, "~N");
	Clazz.defineMethod (c$, "setTranslucent", 
			    function (isTranslucent, translucentLevel) {
				this.colix = org.jmol.util.Colix.getColixTranslucent3 (this.colix, isTranslucent, translucentLevel);
			    }, "~B,~N");
	Clazz.defineMethod (c$, "isTranslucent", 
			    function () {
				return org.jmol.util.Colix.isColixTranslucent (this.colix);
			    });
	Clazz.defineMethod (c$, "setOrder", 
			    function (order) {
				if (this.atom1.getElementNumber () == 16 && this.atom2.getElementNumber () == 16) order |= 256;
				if (order == 512) order = 515;
				this.order = order | (this.order & 131072);
			    }, "~N");
	Clazz.defineMethod (c$, "getAtom1", 
			    function () {
				return this.atom1;
			    });
	Clazz.defineMethod (c$, "getAtom2", 
			    function () {
				return this.atom2;
			    });
	Clazz.overrideMethod (c$, "getAtomIndex1", 
			      function () {
				  return this.atom1.index;
			      });
	Clazz.overrideMethod (c$, "getAtomIndex2", 
			      function () {
				  return this.atom2.index;
			      });
	Clazz.defineMethod (c$, "getRadius", 
			    function () {
				return this.mad / 2000;
			    });
	Clazz.overrideMethod (c$, "getCovalentOrder", 
			      function () {
				  return org.jmol.util.JmolEdge.getCovalentBondOrder (this.order);
			      });
	Clazz.defineMethod (c$, "getOrderName", 
			    function () {
				return org.jmol.util.JmolEdge.getBondOrderNameFromOrder (this.order);
			    });
	Clazz.defineMethod (c$, "getOrderNumberAsString", 
			    function () {
				return org.jmol.util.JmolEdge.getBondOrderNumberFromOrder (this.order);
			    });
	Clazz.defineMethod (c$, "getColix1", 
			    function () {
				return org.jmol.util.Colix.getColixInherited (this.colix, this.atom1.colixAtom);
			    });
	Clazz.defineMethod (c$, "getColix2", 
			    function () {
				return org.jmol.util.Colix.getColixInherited (this.colix, this.atom2.colixAtom);
			    });
	Clazz.defineMethod (c$, "getOtherAtom", 
			    function (thisAtom) {
				return (this.atom1 === thisAtom ? this.atom2 : this.atom2 === thisAtom ? this.atom1 : null);
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "setIndex", 
			    function (i) {
				this.index = i;
			    }, "~N");
	Clazz.defineMethod (c$, "is", 
			    function (bondType) {
				return (this.order & -131073) == bondType;
			    }, "~N");
	Clazz.overrideMethod (c$, "getOtherAtomNode", 
			      function (thisAtom) {
				  return (this.atom1 === thisAtom ? this.atom2 : this.atom2 === thisAtom ? this.atom1 : null);
			      }, "org.jmol.util.JmolNode");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return this.atom1 + " - " + this.atom2;
			      });
	Clazz.pu$h ();
	c$ = Clazz.decorateAsClass (function () {
	    this.associatedAtoms = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset.Bond, "BondSet", org.jmol.util.BitSet);
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.modelset.Bond.BondSet, []);
			       });
	Clazz.defineMethod (c$, "getAssociatedAtoms", 
			    function () {
				return this.associatedAtoms;
			    });
	Clazz.makeConstructor (c$, 
			       function (a) {
				   Clazz.superConstructor (this, org.jmol.modelset.Bond.BondSet, []);
				   org.jmol.util.BitSetUtil.copy2 (a, this);
			       }, "org.jmol.util.BitSet");
	Clazz.makeConstructor (c$, 
			       function (a, b) {
				   this.construct (a);
				   this.associatedAtoms = b;
			       }, "org.jmol.util.BitSet,~A");
	c$ = Clazz.p0p ();
	c$.myVisibilityFlag = c$.prototype.myVisibilityFlag = org.jmol.viewer.JmolConstants.getShapeVisibilityFlag (1);
    });
    // 
    //// org\jmol\util\Measure.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Measure", ["java.lang.Float", "java.util.ArrayList", "org.jmol.util.Eigen", "$.Escape", "$.Logger", "$.Point3f", "$.Point4f", "$.Quaternion", "$.Vector3f", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Measure");
	c$.computeAngle = Clazz.defineMethod (c$, "computeAngle", 
					      function (pointA, pointB, pointC, vectorBA, vectorBC, asDegrees) {
						  vectorBA.sub2 (pointA, pointB);
						  vectorBC.sub2 (pointC, pointB);
						  var angle = vectorBA.angle (vectorBC);
						  return (asDegrees ? angle / 0.017453292 : angle);
					      }, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~B");
	c$.computeAngleABC = Clazz.defineMethod (c$, "computeAngleABC", 
						 function (pointA, pointB, pointC, asDegrees) {
						     var vectorBA =  new org.jmol.util.Vector3f ();
						     var vectorBC =  new org.jmol.util.Vector3f ();
						     return org.jmol.util.Measure.computeAngle (pointA, pointB, pointC, vectorBA, vectorBC, asDegrees);
						 }, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,~B");
	c$.computeTorsion = Clazz.defineMethod (c$, "computeTorsion", 
						function (p1, p2, p3, p4, asDegrees) {
						    var ijx = p1.x - p2.x;
						    var ijy = p1.y - p2.y;
						    var ijz = p1.z - p2.z;
						    var kjx = p3.x - p2.x;
						    var kjy = p3.y - p2.y;
						    var kjz = p3.z - p2.z;
						    var klx = p3.x - p4.x;
						    var kly = p3.y - p4.y;
						    var klz = p3.z - p4.z;
						    var ax = ijy * kjz - ijz * kjy;
						    var ay = ijz * kjx - ijx * kjz;
						    var az = ijx * kjy - ijy * kjx;
						    var cx = kjy * klz - kjz * kly;
						    var cy = kjz * klx - kjx * klz;
						    var cz = kjx * kly - kjy * klx;
						    var ai2 = 1 / (ax * ax + ay * ay + az * az);
						    var ci2 = 1 / (cx * cx + cy * cy + cz * cz);
						    var ai = Math.sqrt (ai2);
						    var ci = Math.sqrt (ci2);
						    var denom = ai * ci;
						    var cross = ax * cx + ay * cy + az * cz;
						    var cosang = cross * denom;
						    if (cosang > 1) {
							cosang = 1;
						    }if (cosang < -1) {
							cosang = -1;
						    }var torsion = Math.acos (cosang);
						    var dot = ijx * cx + ijy * cy + ijz * cz;
						    var absDot = Math.abs (dot);
						    torsion = (dot / absDot > 0) ? torsion : -torsion;
						    return (asDegrees ? torsion / 0.017453292 : torsion);
						}, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,~B");
	c$.computeHelicalAxis = Clazz.defineMethod (c$, "computeHelicalAxis", 
						    function (id, tokType, a, b, dq) {
							var vab =  new org.jmol.util.Vector3f ();
							vab.sub2 (b, a);
							var theta = dq.getTheta ();
							var n = dq.getNormal ();
							var v_dot_n = vab.dot (n);
							if (Math.abs (v_dot_n) < 0.0001) v_dot_n = 0;
							if (tokType == 1073741854) {
							    if (v_dot_n != 0) n.scale (v_dot_n);
							    return n;
							}var va_prime_d =  new org.jmol.util.Vector3f ();
							va_prime_d.cross (vab, n);
							if (va_prime_d.dot (va_prime_d) != 0) va_prime_d.normalize ();
							var vda =  new org.jmol.util.Vector3f ();
							var vcb = org.jmol.util.Vector3f.newV (n);
							if (v_dot_n == 0) v_dot_n = 1.4E-45;
							vcb.scale (v_dot_n);
							vda.sub2 (vcb, vab);
							vda.scale (0.5);
							va_prime_d.scale (theta == 0 ? 0 : (vda.length () / Math.tan (theta / 2 / 180 * 3.141592653589793)));
							var r = org.jmol.util.Vector3f.newV (va_prime_d);
							if (theta != 0) r.add (vda);
							if (tokType == 1666189314) return r;
							var pt_a_prime = org.jmol.util.Point3f.newP (a);
							pt_a_prime.sub (r);
							if (tokType == 135266320) {
							    return pt_a_prime;
							}if (v_dot_n != 1.4E-45) n.scale (v_dot_n);
							var pt_b_prime = org.jmol.util.Point3f.newP (pt_a_prime);
							pt_b_prime.add (n);
							theta = org.jmol.util.Measure.computeTorsion (a, pt_a_prime, pt_b_prime, b, true);
							if (Float.isNaN (theta) || r.length () < 0.0001) theta = dq.getThetaDirectedV (n);
							if (tokType == 135266305) return  new Float (theta);
							if (tokType == 135176) return "draw ID \"" + id + "\" VECTOR " + org.jmol.util.Escape.escapePt (pt_a_prime) + " " + org.jmol.util.Escape.escapePt (n) + " color " + (theta < 0 ? "{255.0 200.0 0.0}" : "{255.0 0.0 128.0}");
							if (tokType == 1746538509) return "measure " + org.jmol.util.Escape.escapePt (a) + org.jmol.util.Escape.escapePt (pt_a_prime) + org.jmol.util.Escape.escapePt (pt_b_prime) + org.jmol.util.Escape.escapePt (b);
							var residuesPerTurn = Math.abs (theta == 0 ? 0 : 360 / theta);
							var pitch = Math.abs (v_dot_n == 1.4E-45 ? 0 : n.length () * (theta == 0 ? 1 : 360 / theta));
							switch (tokType) {
							case 135266306:
							    return [pt_a_prime, n, r, org.jmol.util.Point3f.new3 (theta, pitch, residuesPerTurn)];
							case 1073742001:
							    return [org.jmol.util.Escape.escapePt (pt_a_prime), org.jmol.util.Escape.escapePt (n), org.jmol.util.Escape.escapePt (r), org.jmol.util.Escape.escapePt (org.jmol.util.Point3f.new3 (theta, pitch, residuesPerTurn))];
							default:
							    return null;
							}
						    }, "~S,~N,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Quaternion");
	c$.getPlaneThroughPoints = Clazz.defineMethod (c$, "getPlaneThroughPoints", 
						       function (pointA, pointB, pointC, vNorm, vAB, vAC, plane) {
							   var w = org.jmol.util.Measure.getNormalThroughPoints (pointA, pointB, pointC, vNorm, vAB, vAC);
							   plane.set (vNorm.x, vNorm.y, vNorm.z, w);
						       }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Point4f");
	c$.getPlaneThroughPoint = Clazz.defineMethod (c$, "getPlaneThroughPoint", 
						      function (pt, normal, plane) {
							  plane.set (normal.x, normal.y, normal.z, -normal.dot (org.jmol.util.Vector3f.newV (pt)));
						      }, "org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Point4f");
	c$.distanceToPlane = Clazz.defineMethod (c$, "distanceToPlane", 
						 function (plane, pt) {
						     return (plane == null ? NaN : (plane.x * pt.x + plane.y * pt.y + plane.z * pt.z + plane.w) / Math.sqrt (plane.x * plane.x + plane.y * plane.y + plane.z * plane.z));
						 }, "org.jmol.util.Point4f,org.jmol.util.Point3f");
	c$.distanceToPlaneD = Clazz.defineMethod (c$, "distanceToPlaneD", 
						  function (plane, d, pt) {
						      return (plane == null ? NaN : (plane.x * pt.x + plane.y * pt.y + plane.z * pt.z + plane.w) / d);
						  }, "org.jmol.util.Point4f,~N,org.jmol.util.Point3f");
	c$.distanceToPlane = Clazz.defineMethod (c$, "distanceToPlane", 
						 function (norm, w, pt) {
						     return (norm == null ? NaN : (norm.x * pt.x + norm.y * pt.y + norm.z * pt.z + w) / Math.sqrt (norm.x * norm.x + norm.y * norm.y + norm.z * norm.z));
						 }, "org.jmol.util.Vector3f,~N,org.jmol.util.Point3f");
	c$.calcNormalizedNormal = Clazz.defineMethod (c$, "calcNormalizedNormal", 
						      function (pointA, pointB, pointC, vNormNorm, vAB, vAC) {
							  vAB.sub2 (pointB, pointA);
							  vAC.sub2 (pointC, pointA);
							  vNormNorm.cross (vAB, vAC);
							  vNormNorm.normalize ();
						      }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.getDirectedNormalThroughPoints = Clazz.defineMethod (c$, "getDirectedNormalThroughPoints", 
								function (pointA, pointB, pointC, ptRef, vNorm, vAB, vAC) {
								    var nd = org.jmol.util.Measure.getNormalThroughPoints (pointA, pointB, pointC, vNorm, vAB, vAC);
								    if (ptRef != null) {
									var pt0 = org.jmol.util.Point3f.newP (pointA);
									pt0.add (vNorm);
									var d = pt0.distance (ptRef);
									pt0.setT (pointA);
									pt0.sub (vNorm);
									if (d > pt0.distance (ptRef)) {
									    vNorm.scale (-1);
									    nd = -nd;
									}}return nd;
								}, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.getNormalThroughPoints = Clazz.defineMethod (c$, "getNormalThroughPoints", 
							function (pointA, pointB, pointC, vNorm, vAB, vAC) {
							    org.jmol.util.Measure.calcNormalizedNormal (pointA, pointB, pointC, vNorm, vAB, vAC);
							    vAB.setT (pointA);
							    return -vAB.dot (vNorm);
							}, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.getPlaneProjection = Clazz.defineMethod (c$, "getPlaneProjection", 
						    function (pt, plane, ptProj, vNorm) {
							var dist = org.jmol.util.Measure.distanceToPlane (plane, pt);
							vNorm.set (plane.x, plane.y, plane.z);
							vNorm.normalize ();
							vNorm.scale (-dist);
							ptProj.setT (pt);
							ptProj.add (vNorm);
						    }, "org.jmol.util.Point3f,org.jmol.util.Point4f,org.jmol.util.Point3f,org.jmol.util.Vector3f");
	c$.getNormalFromCenter = Clazz.defineMethod (c$, "getNormalFromCenter", 
						     function (ptCenter, ptA, ptB, ptC, isOutward, normal) {
							 var vAB =  new org.jmol.util.Vector3f ();
							 var vAC =  new org.jmol.util.Vector3f ();
							 var d = org.jmol.util.Measure.getNormalThroughPoints (ptA, ptB, ptC, normal, vAB, vAC);
							 var isReversed = (org.jmol.util.Measure.distanceToPlane (normal, d, ptCenter) > 0);
							 if (isReversed == isOutward) normal.scale (-1.0);
							 return !isReversed;
						     }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,~B,org.jmol.util.Vector3f");
	c$.getNormalToLine = Clazz.defineMethod (c$, "getNormalToLine", 
						 function (pointA, pointB, vNormNorm) {
						     vNormNorm.sub2 (pointA, pointB);
						     vNormNorm.cross (vNormNorm, org.jmol.viewer.JmolConstants.axisY);
						     vNormNorm.normalize ();
						     if (Float.isNaN (vNormNorm.x)) vNormNorm.set (1, 0, 0);
						 }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f");
	c$.getBisectingPlane = Clazz.defineMethod (c$, "getBisectingPlane", 
						   function (pointA, vAB, ptTemp, vTemp, plane) {
						       ptTemp.scaleAdd2 (0.5, vAB, pointA);
						       vTemp.setT (vAB);
						       vTemp.normalize ();
						       org.jmol.util.Measure.getPlaneThroughPoint (ptTemp, vTemp, plane);
						   }, "org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Point4f");
	c$.projectOntoAxis = Clazz.defineMethod (c$, "projectOntoAxis", 
						 function (point, axisA, axisUnitVector, vectorProjection) {
						     vectorProjection.sub2 (point, axisA);
						     var projectedLength = vectorProjection.dot (axisUnitVector);
						     point.setT (axisUnitVector);
						     point.scaleAdd (projectedLength, axisA);
						     vectorProjection.sub2 (point, axisA);
						 }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.calcBestAxisThroughPoints = Clazz.defineMethod (c$, "calcBestAxisThroughPoints", 
							   function (points, axisA, axisUnitVector, vectorProjection, nTriesMax) {
							       var nPoints = points.length;
							       axisA.setT (points[0]);
							       axisUnitVector.sub2 (points[nPoints - 1], axisA);
							       axisUnitVector.normalize ();
							       org.jmol.util.Measure.calcAveragePointN (points, nPoints, axisA);
							       var nTries = 0;
							       while (nTries++ < nTriesMax && org.jmol.util.Measure.findAxis (points, nPoints, axisA, axisUnitVector, vectorProjection) > 0.001) {
							       }
							       var tempA = org.jmol.util.Point3f.newP (points[0]);
							       org.jmol.util.Measure.projectOntoAxis (tempA, axisA, axisUnitVector, vectorProjection);
							       axisA.setT (tempA);
							   }, "~A,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~N");
	c$.findAxis = Clazz.defineMethod (c$, "findAxis", 
					  function (points, nPoints, axisA, axisUnitVector, vectorProjection) {
					      var sumXiYi =  new org.jmol.util.Vector3f ();
					      var vTemp =  new org.jmol.util.Vector3f ();
					      var pt =  new org.jmol.util.Point3f ();
					      var ptProj =  new org.jmol.util.Point3f ();
					      var a = org.jmol.util.Vector3f.newV (axisUnitVector);
					      var sum_Xi2 = 0;
					      var sum_Yi2 = 0;
					      for (var i = nPoints; --i >= 0; ) {
						  pt.setT (points[i]);
						  ptProj.setT (pt);
						  org.jmol.util.Measure.projectOntoAxis (ptProj, axisA, axisUnitVector, vectorProjection);
						  vTemp.sub2 (pt, ptProj);
						  sum_Yi2 += vTemp.lengthSquared ();
						  vTemp.cross (vectorProjection, vTemp);
						  sumXiYi.add (vTemp);
						  sum_Xi2 += vectorProjection.lengthSquared ();
					      }
					      var m = org.jmol.util.Vector3f.newV (sumXiYi);
					      m.scale (1 / sum_Xi2);
					      vTemp.cross (m, axisUnitVector);
					      axisUnitVector.add (vTemp);
					      axisUnitVector.normalize ();
					      vTemp.setT (axisUnitVector);
					      vTemp.sub (a);
					      return vTemp.length ();
					  }, "~A,~N,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.calcAveragePoint = Clazz.defineMethod (c$, "calcAveragePoint", 
						  function (pointA, pointB, pointC) {
						      pointC.set ((pointA.x + pointB.x) / 2, (pointA.y + pointB.y) / 2, (pointA.z + pointB.z) / 2);
						  }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	c$.calcAveragePointN = Clazz.defineMethod (c$, "calcAveragePointN", 
						   function (points, nPoints, averagePoint) {
						       averagePoint.setT (points[0]);
						       for (var i = 1; i < nPoints; i++) averagePoint.add (points[i]);

						       averagePoint.scale (1 / nPoints);
						   }, "~A,~N,org.jmol.util.Point3f");
	c$.getCenterAndPoints = Clazz.defineMethod (c$, "getCenterAndPoints", 
						    function (vPts) {
							var n = vPts.size ();
							var pts =  new Array (n + 1);
							pts[0] =  new org.jmol.util.Point3f ();
							if (n > 0) {
							    for (var i = 0; i < n; i++) {
								pts[0].add (pts[i + 1] = vPts.get (i));
							    }
							    pts[0].scale (1 / n);
							}return pts;
						    }, "java.util.List");
	c$.getTransformMatrix4 = Clazz.defineMethod (c$, "getTransformMatrix4", 
						     function (ptsA, ptsB, m, centerA) {
							 var cptsA = org.jmol.util.Measure.getCenterAndPoints (ptsA);
							 var cptsB = org.jmol.util.Measure.getCenterAndPoints (ptsB);
							 var retStddev =  Clazz.newFloatArray (2, 0);
							 var q = org.jmol.util.Measure.calculateQuaternionRotation ([cptsA, cptsB], retStddev, false);
							 var v = org.jmol.util.Vector3f.newV (cptsB[0]);
							 v.sub (cptsA[0]);
							 m.setMV (q.getMatrix (), v);
							 if (centerA != null) centerA.setT (cptsA[0]);
							 return retStddev[1];
						     }, "java.util.List,java.util.List,org.jmol.util.Matrix4f,org.jmol.util.Point3f");
	c$.calculateQuaternionRotation = Clazz.defineMethod (c$, "calculateQuaternionRotation", 
							     function (centerAndPoints, retStddev, doReport) {
								 retStddev[1] = NaN;
								 var q =  new org.jmol.util.Quaternion ();
								 if (centerAndPoints[0].length == 1 || centerAndPoints[0].length != centerAndPoints[1].length) return q;
								 var n = centerAndPoints[0].length - 1;
								 if (doReport) for (var i = 1; i <= n; i++) {
								     var aij = centerAndPoints[0][i];
								     var bij = centerAndPoints[1][i];
								     if (Clazz.instanceOf (aij, org.jmol.modelset.Atom)) org.jmol.util.Logger.info (" atom 1 " + (aij).getInfo () + "\tatom 2 " + (bij).getInfo ());
								     else break;
								 }
								 if (n < 2) return q;
								 var Sxx = 0;
								 var Sxy = 0;
								 var Sxz = 0;
								 var Syx = 0;
								 var Syy = 0;
								 var Syz = 0;
								 var Szx = 0;
								 var Szy = 0;
								 var Szz = 0;
								 for (var i = n + 1; --i >= 1; ) {
								     var aij = centerAndPoints[0][i];
								     var bij = centerAndPoints[1][i];
								     var ptA = org.jmol.util.Point3f.newP (aij);
								     ptA.sub (centerAndPoints[0][0]);
								     var ptB = org.jmol.util.Point3f.newP (bij);
								     ptB.sub (centerAndPoints[0][1]);
								     Sxx += ptA.x * ptB.x;
								     Sxy += ptA.x * ptB.y;
								     Sxz += ptA.x * ptB.z;
								     Syx += ptA.y * ptB.x;
								     Syy += ptA.y * ptB.y;
								     Syz += ptA.y * ptB.z;
								     Szx += ptA.z * ptB.x;
								     Szy += ptA.z * ptB.y;
								     Szz += ptA.z * ptB.z;
								 }
								 retStddev[0] = org.jmol.util.Measure.getRmsd (centerAndPoints, q);
								 var N =  Clazz.newDoubleArray (4, 4, 0);
								 N[0][0] = Sxx + Syy + Szz;
								 N[0][1] = N[1][0] = Syz - Szy;
								 N[0][2] = N[2][0] = Szx - Sxz;
								 N[0][3] = N[3][0] = Sxy - Syx;
								 N[1][1] = Sxx - Syy - Szz;
								 N[1][2] = N[2][1] = Sxy + Syx;
								 N[1][3] = N[3][1] = Szx + Sxz;
								 N[2][2] = -Sxx + Syy - Szz;
								 N[2][3] = N[3][2] = Syz + Szy;
								 N[3][3] = -Sxx - Syy + Szz;
								 var eigen = org.jmol.util.Eigen.newM (N);
								 var v = eigen.getEigenvectorsFloatTransposed ()[3];
								 q = org.jmol.util.Quaternion.newP4 (org.jmol.util.Point4f.new4 (v[1], v[2], v[3], v[0]));
								 retStddev[1] = org.jmol.util.Measure.getRmsd (centerAndPoints, q);
								 return q;
							     }, "~A,~A,~B");
	c$.getRmsd = Clazz.defineMethod (c$, "getRmsd", 
					 function (centerAndPoints, q) {
					     var sum = 0;
					     var sum2 = 0;
					     var n = centerAndPoints[0].length - 1;
					     var ptAnew =  new org.jmol.util.Point3f ();
					     for (var i = n + 1; --i >= 1; ) {
						 ptAnew.setT (centerAndPoints[0][i]);
						 ptAnew.sub (centerAndPoints[0][0]);
						 q.transformP2 (ptAnew, ptAnew);
						 ptAnew.add (centerAndPoints[1][0]);
						 var d = ptAnew.distance (centerAndPoints[1][i]);
						 sum += d;
						 sum2 += d * d;
					     }
					     return Math.sqrt ((sum2 - sum * sum / n) / (n - 1));
					 }, "~A,org.jmol.util.Quaternion");
	c$.transformPoints = Clazz.defineMethod (c$, "transformPoints", 
						 function (vPts, m4, center) {
						     var v =  new java.util.ArrayList ();
						     for (var i = 0; i < vPts.size (); i++) {
							 var pt = org.jmol.util.Point3f.newP (vPts.get (i));
							 pt.sub (center);
							 m4.transform2 (pt, pt);
							 pt.add (center);
							 v.add (pt);
						     }
						     return v;
						 }, "java.util.List,org.jmol.util.Matrix4f,org.jmol.util.Point3f");
	c$.isInTetrahedron = Clazz.defineMethod (c$, "isInTetrahedron", 
						 function (pt, ptA, ptB, ptC, ptD, plane, vTemp, vTemp2, vTemp3, fullyEnclosed) {
						     org.jmol.util.Measure.getPlaneThroughPoints (ptC, ptD, ptA, vTemp, vTemp2, vTemp3, plane);
						     var b = (org.jmol.util.Measure.distanceToPlane (plane, pt) >= 0);
						     org.jmol.util.Measure.getPlaneThroughPoints (ptA, ptD, ptB, vTemp, vTemp2, vTemp3, plane);
						     if (b != (org.jmol.util.Measure.distanceToPlane (plane, pt) >= 0)) return false;
						     org.jmol.util.Measure.getPlaneThroughPoints (ptB, ptD, ptC, vTemp, vTemp2, vTemp3, plane);
						     if (b != (org.jmol.util.Measure.distanceToPlane (plane, pt) >= 0)) return false;
						     org.jmol.util.Measure.getPlaneThroughPoints (ptA, ptB, ptC, vTemp, vTemp2, vTemp3, plane);
						     var d = org.jmol.util.Measure.distanceToPlane (plane, pt);
						     if (fullyEnclosed) return (b == (d >= 0));
						     var d1 = org.jmol.util.Measure.distanceToPlane (plane, ptD);
						     return d1 * d <= 0 || Math.abs (d1) > Math.abs (d);
						 }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point4f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~B");
	c$.getIntersectionPP = Clazz.defineMethod (c$, "getIntersectionPP", 
						   function (plane1, plane2) {
						       var a1 = plane1.x;
						       var b1 = plane1.y;
						       var c1 = plane1.z;
						       var d1 = plane1.w;
						       var a2 = plane2.x;
						       var b2 = plane2.y;
						       var c2 = plane2.z;
						       var d2 = plane2.w;
						       var norm1 = org.jmol.util.Vector3f.new3 (a1, b1, c1);
						       var norm2 = org.jmol.util.Vector3f.new3 (a2, b2, c2);
						       var nxn =  new org.jmol.util.Vector3f ();
						       nxn.cross (norm1, norm2);
						       var ax = Math.abs (nxn.x);
						       var ay = Math.abs (nxn.y);
						       var az = Math.abs (nxn.z);
						       var x;
						       var y;
						       var z;
						       var diff;
						       var type = (ax > ay ? (ax > az ? 1 : 3) : ay > az ? 2 : 3);
						       switch (type) {
						       case 1:
							   x = 0;
							   diff = (b1 * c2 - b2 * c1);
							   if (Math.abs (diff) < 0.01) return null;
							   y = (c1 * d2 - c2 * d1) / diff;
							   z = (b2 * d1 - d2 * b1) / diff;
							   break;
						       case 2:
							   diff = (a1 * c2 - a2 * c1);
							   if (Math.abs (diff) < 0.01) return null;
							   x = (c1 * d2 - c2 * d1) / diff;
							   y = 0;
							   z = (a2 * d1 - d2 * a1) / diff;
							   break;
						       case 3:
						       default:
							   diff = (a1 * b2 - a2 * b1);
							   if (Math.abs (diff) < 0.01) return null;
							   x = (b1 * d2 - b2 * d1) / diff;
							   y = (a2 * d1 - d2 * a1) / diff;
							   z = 0;
						       }
						       var list =  new java.util.ArrayList ();
						       list.add (org.jmol.util.Point3f.new3 (x, y, z));
						       nxn.normalize ();
						       list.add (nxn);
						       return list;
						   }, "org.jmol.util.Point4f,org.jmol.util.Point4f");
	c$.getIntersection = Clazz.defineMethod (c$, "getIntersection", 
						 function (pt1, v, plane, ptRet, tempNorm, vTemp) {
						     org.jmol.util.Measure.getPlaneProjection (pt1, plane, ptRet, tempNorm);
						     tempNorm.set (plane.x, plane.y, plane.z);
						     tempNorm.normalize ();
						     if (v == null) v = org.jmol.util.Vector3f.newV (tempNorm);
						     var l_dot_n = v.dot (tempNorm);
						     if (Math.abs (l_dot_n) < 0.01) return null;
						     vTemp.setT (ptRet);
						     vTemp.sub (pt1);
						     ptRet.scaleAdd2 (vTemp.dot (tempNorm) / l_dot_n, v, pt1);
						     return ptRet;
						 }, "org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Point4f,org.jmol.util.Point3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	Clazz.defineStatics (c$,
			     "radiansPerDegree", (0.017453292519943295));
    });
    // 
    //// org\jmol\util\Tuple3f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Tuple3f", ["java.lang.Float"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.x = 0;
	    this.y = 0;
	    this.z = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Tuple3f", null, java.io.Serializable);
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.defineMethod (c$, "set", 
			    function (x, y, z) {
				this.x = x;
				this.y = y;
				this.z = z;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "setA", 
			    function (t) {
				this.x = t[0];
				this.y = t[1];
				this.z = t[2];
			    }, "~A");
	Clazz.defineMethod (c$, "setT", 
			    function (t1) {
				this.x = t1.x;
				this.y = t1.y;
				this.z = t1.z;
			    }, "org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "add2", 
			    function (t1, t2) {
				this.x = t1.x + t2.x;
				this.y = t1.y + t2.y;
				this.z = t1.z + t2.z;
			    }, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "add", 
			    function (t1) {
				this.x += t1.x;
				this.y += t1.y;
				this.z += t1.z;
			    }, "org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "sub2", 
			    function (t1, t2) {
				this.x = t1.x - t2.x;
				this.y = t1.y - t2.y;
				this.z = t1.z - t2.z;
			    }, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "sub", 
			    function (t1) {
				this.x -= t1.x;
				this.y -= t1.y;
				this.z -= t1.z;
			    }, "org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "scale", 
			    function (s) {
				this.x *= s;
				this.y *= s;
				this.z *= s;
			    }, "~N");
	Clazz.defineMethod (c$, "scaleAdd2", 
			    function (s, t1, t2) {
				this.x = s * t1.x + t2.x;
				this.y = s * t1.y + t2.y;
				this.z = s * t1.z + t2.z;
			    }, "~N,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "scaleAdd", 
			    function (s, t1) {
				this.x = s * this.x + t1.x;
				this.y = s * this.y + t1.y;
				this.z = s * this.z + t1.z;
			    }, "~N,org.jmol.util.Tuple3f");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  var bits = 1;
				  bits = 31 * bits + org.jmol.util.Tuple3f.floatToIntBits0 (this.x);
				  bits = 31 * bits + org.jmol.util.Tuple3f.floatToIntBits0 (this.y);
				  bits = 31 * bits + org.jmol.util.Tuple3f.floatToIntBits0 (this.z);
				  return (bits ^ (bits >> 32));
			      });
	c$.floatToIntBits0 = Clazz.defineMethod (c$, "floatToIntBits0", 
						 function (f) {
						     return (f == 0 ? 0 : Float.floatToIntBits (f));
						 }, "~N");
	Clazz.overrideMethod (c$, "equals", 
			      function (t1) {
				  if (!(Clazz.instanceOf (t1, org.jmol.util.Tuple3f))) return false;
				  var t2 = t1;
				  return (this.x == t2.x && this.y == t2.y && this.z == t2.z);
			      }, "~O");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "(" + this.x + ", " + this.y + ", " + this.z + ")";
			      });
    });
    // 
    //// org\jmol\util\Tuple4f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Tuple4f", ["org.jmol.util.Tuple3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.x = 0;
	    this.y = 0;
	    this.z = 0;
	    this.w = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Tuple4f", null, java.io.Serializable);
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.defineMethod (c$, "set", 
			    function (x, y, z, w) {
				this.x = x;
				this.y = y;
				this.z = z;
				this.w = w;
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "scale", 
			    function (s) {
				this.x *= s;
				this.y *= s;
				this.z *= s;
				this.w *= s;
			    }, "~N");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  return org.jmol.util.Tuple3f.floatToIntBits0 (this.x) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.y) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.z) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.w);
			      });
	Clazz.overrideMethod (c$, "equals", 
			      function (o) {
				  if (!(Clazz.instanceOf (o, org.jmol.util.Tuple4f))) return false;
				  var t = o;
				  return (this.x == t.x && this.y == t.y && this.z == t.z && this.w == t.w);
			      }, "~O");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
			      });
    });
    // 
    //// org\jmol\util\Point4f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Tuple4f"], "org.jmol.util.Point4f", null, function () {
	c$ = Clazz.declareType (org.jmol.util, "Point4f", org.jmol.util.Tuple4f);
	c$.new4 = Clazz.defineMethod (c$, "new4", 
				      function (x, y, z, w) {
					  var pt =  new org.jmol.util.Point4f ();
					  pt.set (x, y, z, w);
					  return pt;
				      }, "~N,~N,~N,~N");
	c$.newPt = Clazz.defineMethod (c$, "newPt", 
				       function (value) {
					   var pt =  new org.jmol.util.Point4f ();
					   pt.set (value.x, value.y, value.z, value.w);
					   return pt;
				       }, "org.jmol.util.Point4f");
	Clazz.defineMethod (c$, "distance", 
			    function (p1) {
				var dx = this.x - p1.x;
				var dy = this.y - p1.y;
				var dz = this.z - p1.z;
				var dw = this.w - p1.w;
				return Math.sqrt (dx * dx + dy * dy + dz * dz + dw * dw);
			    }, "org.jmol.util.Point4f");
    });
    // 
    //// java\io\FilterInputStream.js 
    // 
    ﻿Clazz.load (["java.io.InputStream"], "java.io.FilterInputStream", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$in = null;
	    Clazz.instantialize (this, arguments);
	}, java.io, "FilterInputStream", java.io.InputStream);
	Clazz.makeConstructor (c$, 
			       function ($in) {
				   Clazz.superConstructor (this, java.io.FilterInputStream, []);
				   this.$in = $in;
			       }, "java.io.InputStream");
	Clazz.defineMethod (c$, "readByteAsInt", 
			    function () {
				return this.$in.readByteAsInt ();
			    });
	Clazz.defineMethod (c$, "read", 
			    function (b, off, len) {
				return this.$in.read (b, off, len);
			    }, "~A,~N,~N");
	Clazz.defineMethod (c$, "skip", 
			    function (n) {
				return this.$in.skip (n);
			    }, "~N");
	Clazz.defineMethod (c$, "available", 
			    function () {
				return this.$in.available ();
			    });
	Clazz.defineMethod (c$, "close", 
			    function () {
				this.$in.close ();
			    });
	Clazz.defineMethod (c$, "mark", 
			    function (readlimit) {
				this.$in.mark (readlimit);
			    }, "~N");
	Clazz.defineMethod (c$, "reset", 
			    function () {
				this.$in.reset ();
			    });
	Clazz.defineMethod (c$, "markSupported", 
			    function () {
				return this.$in.markSupported ();
			    });
    });
    // 
    //// java\io\BufferedInputStream.js 
    // 
    ﻿Clazz.load (["java.io.FilterInputStream"], "java.io.BufferedInputStream", ["java.io.IOException", "java.lang.IndexOutOfBoundsException"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.buf = null;
	    this.count = 0;
	    this.pos = 0;
	    this.markpos = -1;
	    this.marklimit = 0;
	    Clazz.instantialize (this, arguments);
	}, java.io, "BufferedInputStream", java.io.FilterInputStream);
	Clazz.defineMethod (c$, "getInIfOpen", 
			    ($fz = function () {
				var input = this.$in;
				if (input == null) throw  new java.io.IOException ("Stream closed");
				return input;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getBufIfOpen", 
			    ($fz = function () {
				var buffer = this.buf;
				if (buffer == null) throw  new java.io.IOException ("Stream closed");
				return buffer;
			    }, $fz.isPrivate = true, $fz));
	Clazz.makeConstructor (c$, 
			       function ($in) {
				   Clazz.superConstructor (this, java.io.BufferedInputStream, [$in]);
				   this.buf =  Clazz.newByteArray (java.io.BufferedInputStream.defaultBufferSize, 0);
			       }, "java.io.InputStream");
	Clazz.defineMethod (c$, "fill", 
			    ($fz = function () {
				var buffer = this.getBufIfOpen ();
				if (this.markpos < 0) this.pos = 0;
				else if (this.pos >= buffer.length) if (this.markpos > 0) {
				    var sz = this.pos - this.markpos;
				    System.arraycopy (buffer, this.markpos, buffer, 0, sz);
				    this.pos = sz;
				    this.markpos = 0;
				} else if (buffer.length >= this.marklimit) {
				    this.markpos = -1;
				    this.pos = 0;
				} else {
				    var nsz = this.pos * 2;
				    if (nsz > this.marklimit) nsz = this.marklimit;
				    var nbuf =  Clazz.newByteArray (nsz, 0);
				    System.arraycopy (buffer, 0, nbuf, 0, this.pos);
				    buffer = nbuf;
				}this.count = this.pos;
				var n = this.getInIfOpen ().read (buffer, this.pos, buffer.length - this.pos);
				if (n > 0) this.count = n + this.pos;
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "readByteAsInt", 
			      function () {
				  if (this.pos >= this.count) {
				      this.fill ();
				      if (this.pos >= this.count) return -1;
				  }return this.getBufIfOpen ()[this.pos++] & 0xff;
			      });
	Clazz.defineMethod (c$, "read1", 
			    ($fz = function (b, off, len) {
				var avail = this.count - this.pos;
				if (avail <= 0) {
				    if (len >= this.getBufIfOpen ().length && this.markpos < 0) {
					return this.getInIfOpen ().read (b, off, len);
				    }this.fill ();
				    avail = this.count - this.pos;
				    if (avail <= 0) return -1;
				}var cnt = (avail < len) ? avail : len;
				System.arraycopy (this.getBufIfOpen (), this.pos, b, off, cnt);
				this.pos += cnt;
				return cnt;
			    }, $fz.isPrivate = true, $fz), "~A,~N,~N");
	Clazz.overrideMethod (c$, "read", 
			      function (b, off, len) {
				  this.getBufIfOpen ();
				  if ((off | len | (off + len) | (b.length - (off + len))) < 0) {
				      throw  new IndexOutOfBoundsException ();
				  } else if (len == 0) {
				      return 0;
				  }var n = 0;
				  for (; ; ) {
				      var nread = this.read1 (b, off + n, len - n);
				      if (nread <= 0) return (n == 0) ? nread : n;
				      n += nread;
				      if (n >= len) return n;
				      var input = this.$in;
				      if (input != null && input.available () <= 0) return n;
				  }
			      }, "~A,~N,~N");
	Clazz.overrideMethod (c$, "skip", 
			      function (n) {
				  this.getBufIfOpen ();
				  if (n <= 0) {
				      return 0;
				  }var avail = this.count - this.pos;
				  if (avail <= 0) {
				      if (this.markpos < 0) return this.getInIfOpen ().skip (n);
				      this.fill ();
				      avail = this.count - this.pos;
				      if (avail <= 0) return 0;
				  }var skipped = (avail < n) ? avail : n;
				  this.pos += skipped;
				  return skipped;
			      }, "~N");
	Clazz.overrideMethod (c$, "available", 
			      function () {
				  var n = this.count - this.pos;
				  var avail = this.getInIfOpen ().available ();
				  return n > (2147483647 - avail) ? 2147483647 : n + avail;
			      });
	Clazz.overrideMethod (c$, "mark", 
			      function (readlimit) {
				  this.marklimit = readlimit;
				  this.markpos = this.pos;
			      }, "~N");
	Clazz.overrideMethod (c$, "reset", 
			      function () {
				  this.getBufIfOpen ();
				  if (this.markpos < 0) throw  new java.io.IOException ("Resetting to invalid mark");
				  this.pos = this.markpos;
			      });
	Clazz.overrideMethod (c$, "markSupported", 
			      function () {
				  return true;
			      });
	Clazz.overrideMethod (c$, "close", 
			      function () {
				  var input = this.$in;
				  this.$in = null;
				  if (input != null) input.close ();
				  return;
			      });
	Clazz.defineStatics (c$,
			     "defaultBufferSize", 8192);
    });
    // 
    //// java\util\Properties.js 
    // 
    $_L(["java.util.Hashtable"],"java.util.Properties",["java.lang.NullPointerException","$.StringBuffer"],function(){
	c$=$_C(function(){
	    this.builder=null;
	    this.defaults=null;
	    $_Z(this,arguments);
	},java.util,"Properties",java.util.Hashtable);

	$_K(c$,
	    function(properties){
		$_R(this,java.util.Properties,[]);
		this.defaults=properties;
	    },"java.util.Properties");
	$_M(c$,"dumpString",
	    ($fz=function(buffer,string,key){
		var i=0;
		if(!key&&i<string.length&&(string.charAt(i)).charCodeAt(0)==(' ').charCodeAt(0)){
		    buffer.append("\\ ");
		    i++;
		}for(;i<string.length;i++){
		    var ch=string.charAt(i);
		    switch(ch){
		    case'\t':
			buffer.append("\\t");
			break;
		    case'\n':
			buffer.append("\\n");
			break;
		    case'\f':
			buffer.append("\\f");
			break;
		    case'\r':
			buffer.append("\\r");
			break;
		    default:
			if("\\#!=:".indexOf(ch)>=0||(key&&(ch).charCodeAt(0)==(' ').charCodeAt(0))){
			    buffer.append('\\');
			}if((ch).charCodeAt(0)>=(' ').charCodeAt (0) && (ch).charCodeAt (0) <= ('~').charCodeAt(0)){
			    buffer.append(ch);
			}else{
			    var hex=Integer.toHexString(ch.charCodeAt(0));
			    buffer.append("\\u");
			    for(var j=0;j<4-hex.length;j++){
				buffer.append("0");
			    }
			    buffer.append(hex);
			}}
		}
	    },$fz.isPrivate=true,$fz),"StringBuilder,~S,~B");
	$_M(c$,"getProperty",
	    function(name){
		var result=this.get(name);
		var property=$_O(result,String)?result:null;
		if(property==null&&this.defaults!=null){
		    property=this.defaults.getProperty(name);
		}return property;
	    },"~S");
	$_M(c$,"getProperty",
	    function(name,defaultValue){
		var result=this.get(name);
		var property=$_O(result,String)?result:null;
		if(property==null&&this.defaults!=null){
		    property=this.defaults.getProperty(name);
		}if(property==null){
		    return defaultValue;
		}return property;
	    },"~S,~S");
	$_M(c$,"list",
	    function(out){
		if(out==null){
		    throw new NullPointerException();
		}var buffer=new StringBuffer(80);
		var keys=this.propertyNames();
		while(keys.hasMoreElements()){
		    var key=keys.nextElement();
		    buffer.append(key);
		    buffer.append('=');
		    var property=this.get(key);
		    var def=this.defaults;
		    while(property==null){
			property=def.get(key);
			def=def.defaults;
		    }
		    if(property.length>40){
			buffer.append(property.substring(0,37));
			buffer.append("...");
		    }else{
			buffer.append(property);
		    }out.println(buffer.toString());
		    buffer.setLength(0);
		}
	    },"java.io.PrintStream");
	$_M(c$,"list",
	    function(writer){
		if(writer==null){
		    throw new NullPointerException();
		}var buffer=new StringBuffer(80);
		var keys=this.propertyNames();
		while(keys.hasMoreElements()){
		    var key=keys.nextElement();
		    buffer.append(key);
		    buffer.append('=');
		    var property=this.get(key);
		    var def=this.defaults;
		    while(property==null){
			property=def.get(key);
			def=def.defaults;
		    }
		    if(property.length>40){
			buffer.append(property.substring(0,37));
			buffer.append("...");
		    }else{
			buffer.append(property);
		    }writer.println(buffer.toString());
		    buffer.setLength(0);
		}
	    },"java.io.PrintWriter");
	$_M(c$,"load",
	    function($in){

	    },"java.io.InputStream");
	$_M(c$,"propertyNames",
	    function(){
		if(this.defaults==null){
		    return this.keys();
		}var set=new java.util.Hashtable(this.defaults.size()+this.size());
		var keys=this.defaults.propertyNames();
		while(keys.hasMoreElements()){
		    set.put(keys.nextElement(),set);
		}
		keys=this.keys();
		while(keys.hasMoreElements()){
		    set.put(keys.nextElement(),set);
		}
		return set.keys();
	    });
	$_M(c$,"save",
	    function(out,comment){
		try{
		    this.store(out,comment);
		}catch(e){
		    if($_O(e,java.io.IOException)){
		    }else{
			throw e;
		    }
		}
	    },"java.io.OutputStream,~S");
	$_M(c$,"setProperty",
	    function(name,value){
		return this.put(name,value);
	    },"~S,~S");
	$_M(c$,"store",
	    function(out,comment){

	    },"java.io.OutputStream,~S");
	$_M(c$,"loadFromXML",
	    function($in){

	    },"java.io.InputStream");
	$_M(c$,"storeToXML",
	    function(os,comment){

	    },"java.io.OutputStream,~S");
	$_M(c$,"storeToXML",
	    function(os,comment,encoding){

	    },"java.io.OutputStream,~S,~S");
	$_M(c$,"substitutePredefinedEntries",
	    ($fz=function(s){
		return s.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll("\u0027","&apos;").replaceAll("\"","&quot;");
	    },$fz.isPrivate=true,$fz),"~S");
	$_S(c$,
	    "PROP_DTD_NAME","http://java.sun.com/dtd/properties.dtd",
	    "PROP_DTD","<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <!ELEMENT properties (comment?, entry*) >    <!ATTLIST properties version CDATA #FIXED \"1.0\" >    <!ELEMENT comment (#PCDATA) >    <!ELEMENT entry (#PCDATA) >    <!ATTLIST entry key CDATA #REQUIRED >",
	    "NONE",0,
	    "SLASH",1,
	    "UNICODE",2,
	    "CONTINUE",3,
	    "KEY_DONE",4,
	    "IGNORE",5,
	    "lineSeparator",null);

    });
    // 
    //// org\jmol\util\Elements.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.BitSet"], "org.jmol.util.Elements", ["java.util.Hashtable", "org.jmol.util.Logger"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Elements");
	c$.getAtomicMass = Clazz.defineMethod (c$, "getAtomicMass", 
					       function (i) {
						   return (i < 1 || i >= org.jmol.util.Elements.atomicMass.length ? 0 : org.jmol.util.Elements.atomicMass[i]);
					       }, "~N");
	c$.elementNumberFromSymbol = Clazz.defineMethod (c$, "elementNumberFromSymbol", 
							 function (elementSymbol, isSilent) {
							     if (org.jmol.util.Elements.htElementMap == null) {
								 var map =  new java.util.Hashtable ();
								 for (var elementNumber = org.jmol.util.Elements.elementNumberMax; --elementNumber >= 0; ) {
								     var symbol = org.jmol.util.Elements.elementSymbols[elementNumber];
								     var boxed = Integer.$valueOf (elementNumber);
								     map.put (symbol, boxed);
								     if (symbol.length == 2) map.put (symbol.toUpperCase (), boxed);
								 }
								 for (var i = org.jmol.util.Elements.altElementMax; --i >= 4; ) {
								     var symbol = org.jmol.util.Elements.altElementSymbols[i];
								     var boxed = Integer.$valueOf (org.jmol.util.Elements.altElementNumbers[i]);
								     map.put (symbol, boxed);
								     if (symbol.length == 2) map.put (symbol.toUpperCase (), boxed);
								 }
								 ($t$ = org.jmol.util.Elements.htElementMap = map, org.jmol.util.Elements.prototype.htElementMap = org.jmol.util.Elements.htElementMap, $t$);
							     }if (elementSymbol == null) return 0;
							     var boxedAtomicNumber = org.jmol.util.Elements.htElementMap.get (elementSymbol);
							     if (boxedAtomicNumber != null) return boxedAtomicNumber.intValue ();
							     if (!isSilent) org.jmol.util.Logger.error ("'" + elementSymbol + "' is not a recognized symbol");
							     return 0;
							 }, "~S,~B");
	c$.elementSymbolFromNumber = Clazz.defineMethod (c$, "elementSymbolFromNumber", 
							 function (elementNumber) {
							     if (elementNumber >= org.jmol.util.Elements.elementNumberMax) {
								 for (var j = org.jmol.util.Elements.altElementMax; --j >= 0; ) if (elementNumber == org.jmol.util.Elements.altElementNumbers[j]) return org.jmol.util.Elements.altElementSymbols[j];

								 elementNumber %= 128;
							     }if (elementNumber < 0 || elementNumber >= org.jmol.util.Elements.elementNumberMax) elementNumber = 0;
							     return org.jmol.util.Elements.elementSymbols[elementNumber];
							 }, "~N");
	c$.elementNameFromNumber = Clazz.defineMethod (c$, "elementNameFromNumber", 
						       function (elementNumber) {
							   if (elementNumber >= org.jmol.util.Elements.elementNumberMax) {
							       for (var j = org.jmol.util.Elements.altElementMax; --j >= 0; ) if (elementNumber == org.jmol.util.Elements.altElementNumbers[j]) return org.jmol.util.Elements.altElementNames[j];

							       elementNumber %= 128;
							   }if (elementNumber < 0 || elementNumber >= org.jmol.util.Elements.elementNumberMax) elementNumber = 0;
							   return org.jmol.util.Elements.elementNames[elementNumber];
						       }, "~N");
	c$.altElementNameFromIndex = Clazz.defineMethod (c$, "altElementNameFromIndex", 
							 function (i) {
							     return org.jmol.util.Elements.altElementNames[i];
							 }, "~N");
	c$.altElementNumberFromIndex = Clazz.defineMethod (c$, "altElementNumberFromIndex", 
							   function (i) {
							       return org.jmol.util.Elements.altElementNumbers[i];
							   }, "~N");
	c$.altElementSymbolFromIndex = Clazz.defineMethod (c$, "altElementSymbolFromIndex", 
							   function (i) {
							       return org.jmol.util.Elements.altElementSymbols[i];
							   }, "~N");
	c$.altIsotopeSymbolFromIndex = Clazz.defineMethod (c$, "altIsotopeSymbolFromIndex", 
							   function (i) {
							       var code = org.jmol.util.Elements.altElementNumbers[i];
							       return (code >> 7) + org.jmol.util.Elements.elementSymbolFromNumber (code & 127);
							   }, "~N");
	c$.altIsotopeSymbolFromIndex2 = Clazz.defineMethod (c$, "altIsotopeSymbolFromIndex2", 
							    function (i) {
								var code = org.jmol.util.Elements.altElementNumbers[i];
								return org.jmol.util.Elements.elementSymbolFromNumber (code & 127) + (code >> 7);
							    }, "~N");
	c$.getElementNumber = Clazz.defineMethod (c$, "getElementNumber", 
						  function (atomicAndIsotopeNumber) {
						      return (atomicAndIsotopeNumber % 128);
						  }, "~N");
	c$.getIsotopeNumber = Clazz.defineMethod (c$, "getIsotopeNumber", 
						  function (atomicAndIsotopeNumber) {
						      return (atomicAndIsotopeNumber >> 7);
						  }, "~N");
	c$.getAtomicAndIsotopeNumber = Clazz.defineMethod (c$, "getAtomicAndIsotopeNumber", 
							   function (n, mass) {
							       return ((n < 0 ? 0 : n) + (mass <= 0 ? 0 : mass << 7));
							   }, "~N,~N");
	c$.altElementIndexFromNumber = Clazz.defineMethod (c$, "altElementIndexFromNumber", 
							   function (atomicAndIsotopeNumber) {
							       for (var i = 0; i < org.jmol.util.Elements.altElementMax; i++) if (org.jmol.util.Elements.altElementNumbers[i] == atomicAndIsotopeNumber) return i;

							       return 0;
							   }, "~N");
	c$.getNaturalIsotope = Clazz.defineMethod (c$, "getNaturalIsotope", 
						   function (elementNumber) {
						       for (var i = 0; i < org.jmol.util.Elements.naturalIsotopeMasses.length; i += 2) if (org.jmol.util.Elements.naturalIsotopeMasses[i] == elementNumber) return org.jmol.util.Elements.naturalIsotopeMasses[++i];

						       return 0;
						   }, "~N");
	c$.isNaturalIsotope = Clazz.defineMethod (c$, "isNaturalIsotope", 
						  function (isotopeSymbol) {
						      return ("1H,12C,14N,".indexOf (isotopeSymbol + ",") >= 0);
						  }, "~S");
	c$.getBondingRadiusFloat = Clazz.defineMethod (c$, "getBondingRadiusFloat", 
						       function (atomicNumberAndIsotope, charge) {
							   var atomicNumber = org.jmol.util.Elements.getElementNumber (atomicNumberAndIsotope);
							   if (charge > 0 && org.jmol.util.Elements.bsCations.get (atomicNumber)) return org.jmol.util.Elements.getBondingRadFromTable (atomicNumber, charge, org.jmol.util.Elements.cationLookupTable);
							   if (charge < 0 && org.jmol.util.Elements.bsAnions.get (atomicNumber)) return org.jmol.util.Elements.getBondingRadFromTable (atomicNumber, charge, org.jmol.util.Elements.anionLookupTable);
							   return org.jmol.util.Elements.covalentMars[atomicNumber] / 1000;
						       }, "~N,~N");
	c$.getBondingRadFromTable = Clazz.defineMethod (c$, "getBondingRadFromTable", 
							function (atomicNumber, charge, table) {
							    var ionic = ((atomicNumber << 4) + (charge + 4));
							    var iVal = 0;
							    var iMid = 0;
							    var iMin = 0;
							    var iMax = Clazz.doubleToInt (table.length / 2);
							    while (iMin != iMax) {
								iMid = Clazz.doubleToInt ((iMin + iMax) / 2);
								iVal = table[iMid << 1];
								if (iVal > ionic) iMax = iMid;
								else if (iVal < ionic) iMin = iMid + 1;
								else return table[(iMid << 1) + 1] / 1000;
							    }
							    if (iVal > ionic) iMid--;
							    iVal = table[iMid << 1];
							    if (atomicNumber != (iVal >> 4)) iMid++;
							    return table[(iMid << 1) + 1] / 1000;
							}, "~N,~N,~A");
	c$.getVanderwaalsMar = Clazz.defineMethod (c$, "getVanderwaalsMar", 
						   function (i, type) {
						       return org.jmol.util.Elements.vanderwaalsMars[(i << 2) + (type.pt % 4)];
						   }, "~N,org.jmol.constant.EnumVdw");
	c$.getHydrophobicity = Clazz.defineMethod (c$, "getHydrophobicity", 
						   function (i) {
						       return (i < 1 || i >= org.jmol.util.Elements.hydrophobicities.length ? 0 : org.jmol.util.Elements.hydrophobicities[i]);
						   }, "~N");
	c$.getAllredRochowElectroNeg = Clazz.defineMethod (c$, "getAllredRochowElectroNeg", 
							   function (elemno) {
							       return (elemno > 0 && elemno < org.jmol.util.Elements.electroNegativities.length ? org.jmol.util.Elements.electroNegativities[elemno] : 0);
							   }, "~N");
	Clazz.defineStatics (c$,
			     "elementSymbols", ["Xx", "H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne", "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca", "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As", "Se", "Br", "Kr", "Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te", "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th", "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr", "Rf", "Db", "Sg", "Bh", "Hs", "Mt"],
			     "atomicMass", [0, 1.008, 4.003, 6.941, 9.012, 10.81, 12.011, 14.007, 15.999, 18.998, 20.18, 22.99, 24.305, 26.981, 28.086, 30.974, 32.07, 35.453, 39.948, 39.1, 40.08, 44.956, 47.88, 50.941, 52, 54.938, 55.847, 58.93, 58.69, 63.55, 65.39, 69.72, 72.61, 74.92, 78.96, 79.9, 83.8, 85.47, 87.62, 88.91, 91.22, 92.91, 95.94, 98.91, 101.07, 102.91, 106.42, 107.87, 112.41, 114.82, 118.71, 121.75, 127.6, 126.91, 131.29, 132.91, 137.33, 138.91, 140.12, 140.91, 144.24, 144.9, 150.36, 151.96, 157.25, 158.93, 162.5, 164.93, 167.26, 168.93, 173.04, 174.97, 178.49, 180.95, 183.85, 186.21, 190.2, 192.22, 195.08, 196.97, 200.59, 204.38, 207.2, 208.98, 210, 210, 222, 223, 226.03, 227.03, 232.04, 231.04, 238.03, 237.05, 239.1, 243.1, 247.1, 247.1, 252.1, 252.1, 257.1, 256.1, 259.1, 260.1, 261, 262, 263, 262, 265, 268]);
	c$.elementNumberMax = c$.prototype.elementNumberMax = org.jmol.util.Elements.elementSymbols.length;
	Clazz.defineStatics (c$,
			     "htElementMap", null,
			     "elementNames", ["unknown", "hydrogen", "helium", "lithium", "beryllium", "boron", "carbon", "nitrogen", "oxygen", "fluorine", "neon", "sodium", "magnesium", "aluminum", "silicon", "phosphorus", "sulfur", "chlorine", "argon", "potassium", "calcium", "scandium", "titanium", "vanadium", "chromium", "manganese", "iron", "cobalt", "nickel", "copper", "zinc", "gallium", "germanium", "arsenic", "selenium", "bromine", "krypton", "rubidium", "strontium", "yttrium", "zirconium", "niobium", "molybdenum", "technetium", "ruthenium", "rhodium", "palladium", "silver", "cadmium", "indium", "tin", "antimony", "tellurium", "iodine", "xenon", "cesium", "barium", "lanthanum", "cerium", "praseodymium", "neodymium", "promethium", "samarium", "europium", "gadolinium", "terbium", "dysprosium", "holmium", "erbium", "thulium", "ytterbium", "lutetium", "hafnium", "tantalum", "tungsten", "rhenium", "osmium", "iridium", "platinum", "gold", "mercury", "thallium", "lead", "bismuth", "polonium", "astatine", "radon", "francium", "radium", "actinium", "thorium", "protactinium", "uranium", "neptunium", "plutonium", "americium", "curium", "berkelium", "californium", "einsteinium", "fermium", "mendelevium", "nobelium", "lawrencium", "rutherfordium", "dubnium", "seaborgium", "bohrium", "hassium", "meitnerium"],
			     "naturalIsotopeMasses", [1, 1, 6, 12, 7, 14, 8, 16],
			     "naturalIsotopes", "1H,12C,14N,",
			     "firstIsotope", 4,
			     "altElementNumbers", [0, 13, 16, 55, 257, 385, 1414, 1670, 1798, 1927]);
	c$.altElementMax = c$.prototype.altElementMax = org.jmol.util.Elements.altElementNumbers.length;
	Clazz.defineStatics (c$,
			     "altElementSymbols", ["Xx", "Al", "S", "Cs", "D", "T", "11C", "13C", "14C", "15N"],
			     "altElementNames", ["dummy", "aluminium", "sulphur", "caesium", "deuterium", "tritium", "", "", "", ""],
			     "VdwPROBE", "#VDW radii for PROBE;{_H}.vdw = 1.0;{_H and connected(_C) and not connected(within(smiles,\'[a]\'))}.vdw = 1.17;{_C}.vdw = 1.75;{_C and connected(3) and connected(_O)}.vdw = 1.65;{_N}.vdw = 1.55;{_O}.vdw = 1.4;{_P}.vdw = 1.8;{_S}.vdw = 1.8;message VDW radii for H, C, N, O, P, and S set according to Word, et al., J. Mol. Biol. (1999) 285, 1711-1733",
			     "vanderwaalsMars", [1000, 1000, 1000, 1000, 1200, 1100, 1100, 1200, 1400, 1400, 2200, 1400, 1820, 1810, 1220, 2200, 1700, 1530, 628, 1900, 2080, 1920, 1548, 1800, 1950, 1700, 1548, 1700, 1850, 1550, 1400, 1600, 1700, 1520, 1348, 1550, 1730, 1470, 1300, 1500, 1540, 1540, 2020, 1540, 2270, 2270, 2200, 2400, 1730, 1730, 1500, 2200, 2050, 1840, 1500, 2100, 2100, 2100, 2200, 2100, 2080, 1800, 1880, 1950, 2000, 1800, 1808, 1800, 1970, 1750, 1748, 1800, 1880, 1880, 2768, 1880, 2750, 2750, 2388, 2800, 1973, 2310, 1948, 2400, 1700, 2300, 1320, 2300, 1700, 2150, 1948, 2150, 1700, 2050, 1060, 2050, 1700, 2050, 1128, 2050, 1700, 2050, 1188, 2050, 1700, 2050, 1948, 2050, 1700, 2000, 1128, 2000, 1630, 2000, 1240, 2000, 1400, 2000, 1148, 2000, 1390, 2100, 1148, 2100, 1870, 1870, 1548, 2100, 1700, 2110, 3996, 2100, 1850, 1850, 828, 2050, 1900, 1900, 900, 1900, 2100, 1830, 1748, 1900, 2020, 2020, 1900, 2020, 1700, 3030, 2648, 2900, 1700, 2490, 2020, 2550, 1700, 2400, 1608, 2400, 1700, 2300, 1420, 2300, 1700, 2150, 1328, 2150, 1700, 2100, 1748, 2100, 1700, 2050, 1800, 2050, 1700, 2050, 1200, 2050, 1700, 2000, 1220, 2000, 1630, 2050, 1440, 2050, 1720, 2100, 1548, 2100, 1580, 2200, 1748, 2200, 1930, 2200, 1448, 2200, 2170, 1930, 1668, 2250, 2200, 2170, 1120, 2200, 2060, 2060, 1260, 2100, 2150, 1980, 1748, 2100, 2160, 2160, 2100, 2160, 1700, 3430, 3008, 3000, 1700, 2680, 2408, 2700, 1700, 2500, 1828, 2500, 1700, 2480, 1860, 2480, 1700, 2470, 1620, 2470, 1700, 2450, 1788, 2450, 1700, 2430, 1760, 2430, 1700, 2420, 1740, 2420, 1700, 2400, 1960, 2400, 1700, 2380, 1688, 2380, 1700, 2370, 1660, 2370, 1700, 2350, 1628, 2350, 1700, 2330, 1608, 2330, 1700, 2320, 1588, 2320, 1700, 2300, 1568, 2300, 1700, 2280, 1540, 2280, 1700, 2270, 1528, 2270, 1700, 2250, 1400, 2250, 1700, 2200, 1220, 2200, 1700, 2100, 1260, 2100, 1700, 2050, 1300, 2050, 1700, 2000, 1580, 2000, 1700, 2000, 1220, 2000, 1720, 2050, 1548, 2050, 1660, 2100, 1448, 2100, 1550, 2050, 1980, 2050, 1960, 1960, 1708, 2200, 2020, 2020, 2160, 2300, 1700, 2070, 1728, 2300, 1700, 1970, 1208, 2000, 1700, 2020, 1120, 2000, 1700, 2200, 2300, 2000, 1700, 3480, 3240, 2000, 1700, 2830, 2568, 2000, 1700, 2000, 2120, 2000, 1700, 2400, 1840, 2400, 1700, 2000, 1600, 2000, 1860, 2300, 1748, 2300, 1700, 2000, 1708, 2000, 1700, 2000, 1668, 2000, 1700, 2000, 1660, 2000, 1700, 2000, 1648, 2000, 1700, 2000, 1640, 2000, 1700, 2000, 1628, 2000, 1700, 2000, 1620, 2000, 1700, 2000, 1608, 2000, 1700, 2000, 1600, 2000, 1700, 2000, 1588, 2000, 1700, 2000, 1580, 2000, 1700, 2000, 1600, 2000, 1700, 2000, 1600, 2000, 1700, 2000, 1600, 2000, 1700, 2000, 1600, 2000, 1700, 2000, 1600, 2000, 1700, 2000, 1600, 2000],
			     "covalentMars", [0, 230, 930, 680, 350, 830, 680, 680, 680, 640, 1120, 970, 1100, 1350, 1200, 750, 1020, 990, 1570, 1330, 990, 1440, 1470, 1330, 1350, 1350, 1340, 1330, 1500, 1520, 1450, 1220, 1170, 1210, 1220, 1210, 1910, 1470, 1120, 1780, 1560, 1480, 1470, 1350, 1400, 1450, 1500, 1590, 1690, 1630, 1460, 1460, 1470, 1400, 1980, 1670, 1340, 1870, 1830, 1820, 1810, 1800, 1800, 1990, 1790, 1760, 1750, 1740, 1730, 1720, 1940, 1720, 1570, 1430, 1370, 1350, 1370, 1320, 1500, 1500, 1700, 1550, 1540, 1540, 1680, 1700, 2400, 2000, 1900, 1880, 1790, 1610, 1580, 1550, 1530, 1510, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1600, 1600, 1600, 1600, 1600, 1600],
			     "FORMAL_CHARGE_MIN", -4,
			     "FORMAL_CHARGE_MAX", 7,
			     "cationLookupTable", [53, 680, 69, 440, 70, 350, 85, 350, 87, 230, 104, 160, 117, 680, 119, 160, 121, 130, 133, 220, 138, 90, 155, 80, 165, 1120, 181, 970, 197, 820, 198, 660, 215, 510, 229, 650, 232, 420, 247, 440, 249, 350, 262, 2190, 264, 370, 266, 300, 281, 340, 283, 270, 293, 1540, 309, 1330, 325, 1180, 326, 990, 343, 732, 357, 960, 358, 940, 359, 760, 360, 680, 374, 880, 375, 740, 376, 630, 377, 590, 389, 810, 390, 890, 391, 630, 394, 520, 406, 800, 407, 660, 408, 600, 411, 460, 422, 740, 423, 640, 438, 720, 439, 630, 454, 690, 469, 960, 470, 720, 485, 880, 486, 740, 501, 810, 503, 620, 518, 730, 520, 530, 535, 580, 537, 460, 549, 660, 552, 500, 554, 420, 569, 470, 571, 390, 597, 1470, 614, 1120, 631, 893, 645, 1090, 648, 790, 661, 1000, 664, 740, 665, 690, 677, 930, 680, 700, 682, 620, 699, 979, 712, 670, 727, 680, 742, 800, 744, 650, 757, 1260, 758, 890, 773, 1140, 774, 970, 791, 810, 806, 930, 808, 710, 823, 760, 825, 620, 837, 820, 840, 700, 842, 560, 857, 620, 859, 500, 885, 1670, 901, 1530, 902, 1340, 917, 1390, 919, 1016, 933, 1270, 935, 1034, 936, 920, 951, 1013, 952, 900, 967, 995, 983, 979, 999, 964, 1014, 1090, 1015, 950, 1031, 938, 1047, 923, 1048, 840, 1063, 908, 1079, 894, 1095, 881, 1111, 870, 1126, 930, 1127, 858, 1143, 850, 1160, 780, 1177, 680, 1192, 700, 1194, 620, 1208, 720, 1211, 560, 1224, 880, 1226, 690, 1240, 680, 1254, 800, 1256, 650, 1269, 1370, 1271, 850, 1285, 1270, 1286, 1100, 1301, 1470, 1303, 950, 1318, 1200, 1320, 840, 1333, 980, 1335, 960, 1337, 740, 1354, 670, 1371, 620, 1397, 1800, 1414, 1430, 1431, 1180, 1448, 1020, 1463, 1130, 1464, 980, 1465, 890, 1480, 970, 1482, 800, 1495, 1100, 1496, 950, 1499, 710, 1511, 1080, 1512, 930, 1527, 1070, 1528, 920],
			     "anionLookupTable", [19, 1540, 96, 2600, 113, 1710, 130, 1360, 131, 680, 147, 1330, 241, 2120, 258, 1840, 275, 1810, 512, 2720, 529, 2220, 546, 1980, 563, 1960, 800, 2940, 803, 3700, 817, 2450, 834, 2110, 835, 2500, 851, 2200]);
	c$.bsCations = c$.prototype.bsCations =  new org.jmol.util.BitSet ();
	c$.bsAnions = c$.prototype.bsAnions =  new org.jmol.util.BitSet ();
	{
	    for (var i = 0; i < org.jmol.util.Elements.anionLookupTable.length; i += 2) org.jmol.util.Elements.bsAnions.set (org.jmol.util.Elements.anionLookupTable[i] >> 4);

	    for (var i = 0; i < org.jmol.util.Elements.cationLookupTable.length; i += 2) org.jmol.util.Elements.bsCations.set (org.jmol.util.Elements.cationLookupTable[i] >> 4);

	}Clazz.defineStatics (c$,
			      "hydrophobicities", [0, 0.62, -2.53, -0.78, -0.9, 0.29, -0.85, -0.74, 0.48, -0.4, 1.38, 1.06, -1.5, 0.64, 1.19, 0.12, -0.18, -0.05, 0.81, 0.26, 1.08]);
	{
	    if ((org.jmol.util.Elements.elementNames.length != org.jmol.util.Elements.elementNumberMax) || (Clazz.doubleToInt (org.jmol.util.Elements.vanderwaalsMars.length / 4) != org.jmol.util.Elements.elementNumberMax) || (org.jmol.util.Elements.covalentMars.length != org.jmol.util.Elements.elementNumberMax)) {
		org.jmol.util.Logger.error ("ERROR!!! Element table length mismatch:\n elementSymbols.length=" + org.jmol.util.Elements.elementSymbols.length + "\n elementNames.length=" + org.jmol.util.Elements.elementNames.length + "\n vanderwaalsMars.length=" + org.jmol.util.Elements.vanderwaalsMars.length + "\n covalentMars.length=" + org.jmol.util.Elements.covalentMars.length);
	    }}Clazz.defineStatics (c$,
				   "electroNegativities", [0, 2.2, 0, 0.97, 1.47, 2.01, 2.5, 3.07, 3.5, 4.1, 0, 1.01, 1.23, 1.47, 1.74, 2.06, 2.44, 2.83, 0, 0.91, 1.04, 1.2, 1.32, 1.45, 1.56, 1.6, 1.64, 1.7, 1.75, 1.75, 1.66, 1.82, 2.02, 2.2, 2.48, 2.74, 0, 0.89, 0.99, 1.11, 1.22, 1.23, 1.3, 1.36, 1.42, 1.45, 1.35, 1.42, 1.46, 1.49, 1.72, 1.82, 2.01, 2.21]);
    });
    // 
    //// org\jmol\util\Vector3f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Tuple3f"], "org.jmol.util.Vector3f", null, function () {
	c$ = Clazz.declareType (org.jmol.util, "Vector3f", org.jmol.util.Tuple3f);
	c$.newV = Clazz.defineMethod (c$, "newV", 
				      function (t) {
					  var v =  new org.jmol.util.Vector3f ();
					  v.x = t.x;
					  v.y = t.y;
					  v.z = t.z;
					  return v;
				      }, "org.jmol.util.Tuple3f");
	c$.new3 = Clazz.defineMethod (c$, "new3", 
				      function (x, y, z) {
					  var v =  new org.jmol.util.Vector3f ();
					  v.x = x;
					  v.y = y;
					  v.z = z;
					  return v;
				      }, "~N,~N,~N");
	Clazz.defineMethod (c$, "lengthSquared", 
			    function () {
				return this.x * this.x + this.y * this.y + this.z * this.z;
			    });
	Clazz.defineMethod (c$, "length", 
			    function () {
				return Math.sqrt (this.lengthSquared ());
			    });
	Clazz.defineMethod (c$, "cross", 
			    function (v1, v2) {
				this.set (v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
			    }, "org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "dot", 
			    function (v) {
				return this.x * v.x + this.y * v.y + this.z * v.z;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "normalize", 
			    function () {
				var d = this.length ();
				this.x /= d;
				this.y /= d;
				this.z /= d;
			    });
	Clazz.defineMethod (c$, "angle", 
			    function (v1) {
				var xx = this.y * v1.z - this.z * v1.y;
				var yy = this.z * v1.x - this.x * v1.z;
				var zz = this.x * v1.y - this.y * v1.x;
				var cross = Math.sqrt (xx * xx + yy * yy + zz * zz);
				return Math.abs (Math.atan2 (cross, this.dot (v1)));
			    }, "org.jmol.util.Vector3f");
    });
    // 
    //// org\jmol\viewer\JmolConstants.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.io.BufferedInputStream", "java.util.Properties", "org.jmol.util.Elements", "$.StringXBuilder", "$.Vector3f"], "org.jmol.viewer.JmolConstants", ["java.lang.NullPointerException", "java.util.Hashtable", "org.jmol.util.Logger", "$.Parser"], function () {
	c$ = Clazz.declareType (org.jmol.viewer, "JmolConstants");
	c$.embedScript = Clazz.defineMethod (c$, "embedScript", 
					     function (s) {
						 return "\n/**" + "**** Jmol Embedded Script ****" + " \n" + s + "\n**/";
					     }, "~S");
	c$.getSpecialAtomName = Clazz.defineMethod (c$, "getSpecialAtomName", 
						    function (atomID) {
							return org.jmol.viewer.JmolConstants.specialAtomNames[atomID];
						    }, "~N");
	c$.getSpecialAtomNames = Clazz.defineMethod (c$, "getSpecialAtomNames", 
						     ($fz = function () {
							 ($t$ = org.jmol.viewer.JmolConstants.htSpecialAtoms =  new java.util.Hashtable (), org.jmol.viewer.JmolConstants.prototype.htSpecialAtoms = org.jmol.viewer.JmolConstants.htSpecialAtoms, $t$);
							 for (var i = org.jmol.viewer.JmolConstants.specialAtomNames.length; --i >= 0; ) {
							     var specialAtomName = org.jmol.viewer.JmolConstants.specialAtomNames[i];
							     if (specialAtomName != null) org.jmol.viewer.JmolConstants.htSpecialAtoms.put (specialAtomName, Integer.$valueOf (i));
							 }
						     }, $fz.isPrivate = true, $fz));
	c$.lookupSpecialAtomID = Clazz.defineMethod (c$, "lookupSpecialAtomID", 
						     function (atomName) {
							 if (org.jmol.viewer.JmolConstants.htSpecialAtoms == null) org.jmol.viewer.JmolConstants.getSpecialAtomNames ();
							 var boxedAtomID = org.jmol.viewer.JmolConstants.htSpecialAtoms.get (atomName);
							 if (boxedAtomID != null) return (boxedAtomID.intValue ());
							 return 0;
						     }, "~S");
	c$.getAminoAcidValenceAndCharge = Clazz.defineMethod (c$, "getAminoAcidValenceAndCharge", 
							      function (res, name, ret) {
								  if (res == null || res.length == 0 || res.length > 3 || name.equals ("CA") || name.equals ("CB")) return false;
								  var ch0 = name.charAt (0);
								  var ch1 = (name.length == 1 ? '\0' : name.charAt (1));
								  var isSp2 = false;
								  var bondCount = ret[3];
								  switch (res.length) {
								  case 3:
								      if (name.length == 1) {
									  switch (ch0) {
									  case 'N':
									      if (bondCount > 1) return false;
									      ret[1] = 1;
									      break;
									  case 'O':
									      isSp2 = ("HOH;DOD;WAT".indexOf (res) < 0);
									      break;
									  default:
									      isSp2 = true;
									  }
								      } else {
									  var id = res + ch0;
									  isSp2 = ("ARGN;ASNN;ASNO;ASPO;GLNN;GLNO;GLUO;HISN;HISC;PHECTRPC;TRPN;TYRC".indexOf (id) >= 0);
									  if ("LYSN".indexOf (id) >= 0) {
									      ret[1] = 1;
									  } else if (ch0 == 'O' && ch1 == 'X') {
									      ret[1] = -1;
									  }}break;
								  case 1:
								  case 2:
								      if (name.length > 2 && name.charAt (2) == '\'') return false;
								      switch (ch0) {
								      case 'C':
									  if (ch1 == '7') return false;
									  break;
								      case 'N':
									  switch (ch1) {
									  case '1':
									  case '3':
									      if ("A3;A1;C3;G3;I3".indexOf ("" + res.charAt (res.length - 1) + ch1) >= 0) ret[0]--;
									      break;
									  case '7':
									      ret[0]--;
									      break;
									  }
									  break;
								      }
								      isSp2 = true;
								  }
								  if (isSp2) {
								      switch (ch0) {
								      case 'N':
									  ret[2] = 2;
									  break;
								      case 'C':
									  ret[2] = 2;
									  ret[0]--;
									  break;
								      case 'O':
									  ret[0]--;
									  break;
								      }
								  }return true;
							      }, "~S,~S,~A");
	c$.getStandardPdbHydrogenCount = Clazz.defineMethod (c$, "getStandardPdbHydrogenCount", 
							     function (pt) {
								 return (pt < 0 || pt >= org.jmol.viewer.JmolConstants.pdbHydrogenCount.length ? -1 : org.jmol.viewer.JmolConstants.pdbHydrogenCount[pt]);
							     }, "~N");
	c$.getPdbBondInfo = Clazz.defineMethod (c$, "getPdbBondInfo", 
						function (pt) {
						    if (pt < 0 || pt > org.jmol.viewer.JmolConstants.pdbBondInfo.length) return null;
						    var s = org.jmol.viewer.JmolConstants.pdbBondInfo[pt];
						    var temp = org.jmol.util.Parser.getTokens (s);
						    var info =  new Array (Clazz.doubleToInt (temp.length / 2));
						    for (var i = 0, p = 0; i < info.length; i++) {
							var source = temp[p++];
							var target = temp[p++];
							if (target.length == 1) switch (target.charAt (0)) {
							case 'N':
							    target = "H@H2";
							    break;
							case 'B':
							    target = "HB3@HB2";
							    break;
							case 'D':
							    target = "HD2@HD3";
							    break;
							case 'G':
							    target = "HG3@HG2";
							    break;
							case '2':
							    target = "H2''@H2'";
							    break;
							case '5':
							    target = "H5''@H5'";
							    break;
							}
							if (target.charAt (0) != 'H' && source.compareTo (target) > 0) {
							    s = target;
							    target = source;
							    source = s;
							}info[i] = [source, target, (target.startsWith ("H") ? "1" : "2")];
						    }
						    return info;
						}, "~N");
	c$.checkCarbohydrate = Clazz.defineMethod (c$, "checkCarbohydrate", 
						   function (group3) {
						       return (group3 != null && ",[AHR],[AMU],[ARA],[ARB],[BDF],[BDR],[BGC],[BMA],[FCA],[FCB],[FRU],[FUC],[FUL],[GAL],[GLA],[GLC],[GUP],[LXC],[MAN],[RAM],[RIB],[RIP],[XYP],[XYS],[CBI],[CT3],[CTR],[CTT],[LAT],[MAB],[MAL],[MLR],[MTT],[SUC],[TRE],[GCU],[MTL],[NAG],[NDG],[RHA],[SOR],[SOL],[SOE],[XYL],[A2G],[LBT],[NGA],[SIA],[SLB],[AFL],[AGC],[GLB],[NAN],[RAA]".indexOf ("[" + group3.toUpperCase () + "]") >= 0);
						   }, "~S");
	c$.getGroup3List = Clazz.defineMethod (c$, "getGroup3List", 
					       function () {
						   if (org.jmol.viewer.JmolConstants.group3List != null) return org.jmol.viewer.JmolConstants.group3List;
						   var s =  new org.jmol.util.StringXBuilder ();
						   for (var i = 1; i < 42; i++) s.append (",[").append ((org.jmol.viewer.JmolConstants.predefinedGroup3Names[i] + "   ").substring (0, 3) + "]");

						   s.append (",[AHR],[AMU],[ARA],[ARB],[BDF],[BDR],[BGC],[BMA],[FCA],[FCB],[FRU],[FUC],[FUL],[GAL],[GLA],[GLC],[GUP],[LXC],[MAN],[RAM],[RIB],[RIP],[XYP],[XYS],[CBI],[CT3],[CTR],[CTT],[LAT],[MAB],[MAL],[MLR],[MTT],[SUC],[TRE],[GCU],[MTL],[NAG],[NDG],[RHA],[SOR],[SOL],[SOE],[XYL],[A2G],[LBT],[NGA],[SIA],[SLB],[AFL],[AGC],[GLB],[NAN],[RAA]");
						   ($t$ = org.jmol.viewer.JmolConstants.group3Count = Clazz.doubleToInt (s.length () / 6), org.jmol.viewer.JmolConstants.prototype.group3Count = org.jmol.viewer.JmolConstants.group3Count, $t$);
						   return ($t$ = org.jmol.viewer.JmolConstants.group3List = s.toString (), org.jmol.viewer.JmolConstants.prototype.group3List = org.jmol.viewer.JmolConstants.group3List, $t$);
					       });
	c$.isHetero = Clazz.defineMethod (c$, "isHetero", 
					  function (group3) {
					      return org.jmol.viewer.JmolConstants.getGroup3Pt (group3) >= 42;
					  }, "~S");
	c$.getGroup3Pt = Clazz.defineMethod (c$, "getGroup3Pt", 
					     ($fz = function (group3) {
						 org.jmol.viewer.JmolConstants.getGroup3List ();
						 var sb =  new org.jmol.util.StringXBuilder ().append ("[");
						 sb.append (group3);
						 switch (group3.length) {
						 case 1:
						     sb.append ("  ");
						     break;
						 case 2:
						     sb.append (" ");
						     break;
						 }
						 var pt = org.jmol.viewer.JmolConstants.group3List.indexOf (sb.toString ());
						 return (pt < 0 ? 2147483647 : Clazz.doubleToInt (pt / 6) + 1);
					     }, $fz.isPrivate = true, $fz), "~S");
	c$.getGroup3Count = Clazz.defineMethod (c$, "getGroup3Count", 
						function () {
						    if (org.jmol.viewer.JmolConstants.group3Count > 0) return org.jmol.viewer.JmolConstants.group3Count;
						    org.jmol.viewer.JmolConstants.getGroup3List ();
						    return ($t$ = org.jmol.viewer.JmolConstants.group3Count = Clazz.doubleToInt (org.jmol.viewer.JmolConstants.group3List.length / 6), org.jmol.viewer.JmolConstants.prototype.group3Count = org.jmol.viewer.JmolConstants.group3Count, $t$);
						});
	c$.isShapeSecondary = Clazz.defineMethod (c$, "isShapeSecondary", 
						  function (i) {
						      return i >= 9 && i < 16;
						  }, "~N");
	c$.shapeTokenIndex = Clazz.defineMethod (c$, "shapeTokenIndex", 
						 function (tok) {
						     switch (tok) {
						     case 1141899265:
							 return 0;
						     case 1678770178:
						     case 659488:
							 return 1;
						     case 1612189718:
							 return 2;
						     case 1611141176:
							 return 3;
						     case 1708058:
							 return 4;
						     case 1826248715:
							 return 5;
						     case 1746538509:
						     case 537006096:
							 return 6;
						     case 1113200652:
							 return 7;
						     case 1113200646:
							 return 8;
						     case 1115297793:
							 return 9;
						     case 1113200654:
							 return 10;
						     case 1113200642:
							 return 11;
						     case 1650071565:
							 return 12;
						     case 1113200647:
							 return 13;
						     case 1113200649:
							 return 14;
						     case 1113200650:
							 return 15;
						     case 1113198595:
							 return 16;
						     case 135174:
							 return 17;
						     case 135198:
							 return 18;
						     case 1113198597:
							 return 19;
						     case 1113198596:
							 return 20;
						     case 135192:
							 return 21;
						     case 135176:
							 return 22;
						     case 135180:
							 return 23;
						     case 135402505:
							 return 24;
						     case 135182:
							 return 25;
						     case 1183762:
							 return 26;
						     case 135188:
							 return 27;
						     case 135190:
							 return 28;
						     case 537022465:
							 return 29;
						     case 1611272194:
							 return 30;
						     case 1679429641:
							 return 31;
						     case 1614417948:
							 return 32;
						     case 544771:
							 return 33;
						     case 1611272202:
							 return 34;
						     }
						     return -1;
						 }, "~N");
	c$.getShapeClassName = Clazz.defineMethod (c$, "getShapeClassName", 
						   function (shapeID, isRenderer) {
						       if (shapeID < 0) return org.jmol.viewer.JmolConstants.shapeClassBases[~shapeID];
						       return "org.jmol." + (isRenderer ? "render" : "shape") + (shapeID >= 9 && shapeID < 16 ? "bio." : shapeID >= 16 && shapeID < 23 ? "special." : shapeID >= 23 && shapeID < 29 ? "surface." : ".") + org.jmol.viewer.JmolConstants.shapeClassBases[shapeID];
						   }, "~N,~B");
	c$.getShapeVisibilityFlag = Clazz.defineMethod (c$, "getShapeVisibilityFlag", 
							function (shapeID) {
							    return (4 << shapeID);
							}, "~N");
	Clazz.defineStatics (c$,
			     "copyright", "(C) 2012 Jmol Development",
			     "version", null,
			     "date", null);
	{
	    var tmpVersion = null;
	    var tmpDate = null;
	    var props =  new java.util.Properties ();
	    var bis = null;
	    var is = null;
	    try {
		is = org.jmol.viewer.JmolConstants.getClassLoader ().getResourceAsStream ("org/jmol/viewer/Jmol.properties");
		bis =  new java.io.BufferedInputStream (is);
		props.load (bis);
		tmpVersion = props.getProperty ("___version", tmpVersion);
		tmpDate = props.getProperty ("___date", tmpDate);
		if (tmpDate != null) {
		    tmpDate = tmpDate.substring (7, 23);
		}} catch (e) {
		    if (Clazz.exceptionOf (e, Exception)) {
		    } else {
			throw e;
		    }
		} finally {
		    if (bis != null) {
			try {
			    bis.close ();
			} catch (e) {
			    if (Clazz.exceptionOf (e, Exception)) {
			    } else {
				throw e;
			    }
			}
		    }if (is != null) {
			try {
			    is.close ();
			} catch (e) {
			    if (Clazz.exceptionOf (e, Exception)) {
			    } else {
				throw e;
			    }
			}
		    }}
	    ($t$ = org.jmol.viewer.JmolConstants.version = (tmpVersion != null ? tmpVersion : "(Unknown version)"), org.jmol.viewer.JmolConstants.prototype.version = org.jmol.viewer.JmolConstants.version, $t$);
	    ($t$ = org.jmol.viewer.JmolConstants.date = (tmpDate != null ? tmpDate : "(Unknown date)"), org.jmol.viewer.JmolConstants.prototype.date = org.jmol.viewer.JmolConstants.date, $t$);
	}Clazz.defineStatics (c$,
			      "officialRelease", false,
			      "CLASSBASE_OPTIONS", "org.jmol.",
			      "DEFAULT_HELP_PATH", "http://chemapps.stolaf.edu/jmol/docs/index.htm",
			      "EMBEDDED_SCRIPT_TAG", "**** Jmol Embedded Script ****",
			      "NOTE_SCRIPT_FILE", "NOTE: file recognized as a script file: ",
			      "SCRIPT_EDITOR_IGNORE", "\1## EDITOR_IGNORE ##",
			      "LOAD_ATOM_DATA_TYPES", "xyz;vxyz;vibration;temperature;occupancy;partialcharge",
			      "radiansPerDegree", (0.017453292519943295),
			      "allowedQuaternionFrames", "RC;RP;a;b;c;n;p;q;x;",
			      "EXPORT_DRIVER_LIST", "Idtf;Maya;Povray;Vrml;X3d;Tachyon;Obj");
	c$.center = c$.prototype.center = org.jmol.util.Vector3f.new3 (0, 0, 0);
	c$.axisX = c$.prototype.axisX = org.jmol.util.Vector3f.new3 (1, 0, 0);
	c$.axisY = c$.prototype.axisY = org.jmol.util.Vector3f.new3 (0, 1, 0);
	c$.axisZ = c$.prototype.axisZ = org.jmol.util.Vector3f.new3 (0, 0, 1);
	c$.axisNX = c$.prototype.axisNX = org.jmol.util.Vector3f.new3 (-1, 0, 0);
	c$.axisNY = c$.prototype.axisNY = org.jmol.util.Vector3f.new3 (0, -1, 0);
	c$.axisNZ = c$.prototype.axisNZ = org.jmol.util.Vector3f.new3 (0, 0, -1);
	c$.unitAxisVectors = c$.prototype.unitAxisVectors = [org.jmol.viewer.JmolConstants.axisX, org.jmol.viewer.JmolConstants.axisY, org.jmol.viewer.JmolConstants.axisZ, org.jmol.viewer.JmolConstants.axisNX, org.jmol.viewer.JmolConstants.axisNY, org.jmol.viewer.JmolConstants.axisNZ];
	Clazz.defineStatics (c$,
			     "XY_ZTOP", 100,
			     "DEFAULT_PERCENT_VDW_ATOM", 23,
			     "DEFAULT_BOND_RADIUS", 0.15,
			     "DEFAULT_BOND_MILLIANGSTROM_RADIUS", Clazz.floatToShort (150.0),
			     "DEFAULT_STRUT_RADIUS", 0.3,
			     "DEFAULT_BOND_TOLERANCE", 0.45,
			     "DEFAULT_MIN_BOND_DISTANCE", 0.4,
			     "DEFAULT_MAX_CONNECT_DISTANCE", 100000000,
			     "DEFAULT_MIN_CONNECT_DISTANCE", 0.1,
			     "MINIMIZATION_ATOM_MAX", 200,
			     "MINIMIZE_FIXED_RANGE", 5.0,
			     "MOUSE_NONE", -1,
			     "MULTIBOND_NEVER", 0,
			     "MULTIBOND_WIREFRAME", 1,
			     "MULTIBOND_NOTSMALL", 2,
			     "MULTIBOND_ALWAYS", 3,
			     "MAXIMUM_AUTO_BOND_COUNT", 20,
			     "madMultipleBondSmallMaximum", 500,
			     "ANGSTROMS_PER_BOHR", 0.5291772,
			     "altArgbsCpk", [0xFFFF1493, 0xFFBFA6A6, 0xFFFFFF30, 0xFF57178F, 0xFFFFFFC0, 0xFFFFFFA0, 0xFFD8D8D8, 0xFF505050, 0xFF404040, 0xFF105050],
			     "argbsAmino", [0xFFBEA06E, 0xFFC8C8C8, 0xFF145AFF, 0xFF00DCDC, 0xFFE60A0A, 0xFFE6E600, 0xFF00DCDC, 0xFFE60A0A, 0xFFEBEBEB, 0xFF8282D2, 0xFF0F820F, 0xFF0F820F, 0xFF145AFF, 0xFFE6E600, 0xFF3232AA, 0xFFDC9682, 0xFFFA9600, 0xFFFA9600, 0xFFB45AB4, 0xFF3232AA, 0xFF0F820F, 0xFFFF69B4, 0xFFFF69B4, 0xFFBEA06E],
			     "argbShapelyBackbone", 0xFFB8B8B8,
			     "argbShapelySpecial", 0xFF5E005E,
			     "argbShapelyDefault", 0xFFFF00FF,
			     "argbsChainAtom", [0xFFffffff, 0xFFC0D0FF, 0xFFB0FFB0, 0xFFFFC0C8, 0xFFFFFF80, 0xFFFFC0FF, 0xFFB0F0F0, 0xFFFFD070, 0xFFF08080, 0xFFF5DEB3, 0xFF00BFFF, 0xFFCD5C5C, 0xFF66CDAA, 0xFF9ACD32, 0xFFEE82EE, 0xFF00CED1, 0xFF00FF7F, 0xFF3CB371, 0xFF00008B, 0xFFBDB76B, 0xFF006400, 0xFF800000, 0xFF808000, 0xFF800080, 0xFF008080, 0xFFB8860B, 0xFFB22222],
			     "argbsChainHetero", [0xFFffffff, -7298865, -8335464, -3174224, -3158160, -3174193, -8339264, -3170208, -4173712, -3821949, -16734257, -4895668, -11094638, -7686870, -4296002, -16730463, -16724113, -13329567, -16777029, -5922981, -16739328, -5242880, -5197824, -5242704, -16731984, -1526253, -4050382]);
	c$.FORMAL_CHARGE_COLIX_RED = c$.prototype.FORMAL_CHARGE_COLIX_RED = org.jmol.util.Elements.elementSymbols.length;
	c$.FORMAL_CHARGE_COLIX_WHITE = c$.prototype.FORMAL_CHARGE_COLIX_WHITE = (org.jmol.viewer.JmolConstants.FORMAL_CHARGE_COLIX_RED + 4);
	c$.FORMAL_CHARGE_COLIX_BLUE = c$.prototype.FORMAL_CHARGE_COLIX_BLUE = (org.jmol.viewer.JmolConstants.FORMAL_CHARGE_COLIX_WHITE + 7);
	Clazz.defineStatics (c$,
			     "FORMAL_CHARGE_RANGE_SIZE", 12,
			     "argbsFormalCharge", [0xFFFF0000, 0xFFFF4040, 0xFFFF8080, 0xFFFFC0C0, 0xFFFFFFFF, 0xFFD8D8FF, 0xFFB4B4FF, 0xFF9090FF, 0xFF6C6CFF, 0xFF4848FF, 0xFF2424FF, 0xFF0000FF],
			     "FORMAL_CHARGE_INDEX_WHITE", 4);
	c$.FORMAL_CHARGE_INDEX_MAX = c$.prototype.FORMAL_CHARGE_INDEX_MAX = org.jmol.viewer.JmolConstants.argbsFormalCharge.length;
	c$.PARTIAL_CHARGE_COLIX_RED = c$.prototype.PARTIAL_CHARGE_COLIX_RED = (org.jmol.viewer.JmolConstants.FORMAL_CHARGE_COLIX_BLUE + 1);
	c$.PARTIAL_CHARGE_COLIX_WHITE = c$.prototype.PARTIAL_CHARGE_COLIX_WHITE = (org.jmol.viewer.JmolConstants.PARTIAL_CHARGE_COLIX_RED + 15);
	c$.PARTIAL_CHARGE_COLIX_BLUE = c$.prototype.PARTIAL_CHARGE_COLIX_BLUE = (org.jmol.viewer.JmolConstants.PARTIAL_CHARGE_COLIX_WHITE + 15);
	Clazz.defineStatics (c$,
			     "PARTIAL_CHARGE_RANGE_SIZE", 31,
			     "argbsRwbScale", [0xFFFF0000, 0xFFFF1010, 0xFFFF2020, 0xFFFF3030, 0xFFFF4040, 0xFFFF5050, 0xFFFF6060, 0xFFFF7070, 0xFFFF8080, 0xFFFF9090, 0xFFFFA0A0, 0xFFFFB0B0, 0xFFFFC0C0, 0xFFFFD0D0, 0xFFFFE0E0, 0xFFFFFFFF, 0xFFE0E0FF, 0xFFD0D0FF, 0xFFC0C0FF, 0xFFB0B0FF, 0xFFA0A0FF, 0xFF9090FF, 0xFF8080FF, 0xFF7070FF, 0xFF6060FF, 0xFF5050FF, 0xFF4040FF, 0xFF3030FF, 0xFF2020FF, 0xFF1010FF, 0xFF0000FF],
			     "argbsRoygbScale", [0xFFFF0000, 0xFFFF2000, 0xFFFF4000, 0xFFFF6000, 0xFFFF8000, 0xFFFFA000, 0xFFFFC000, 0xFFFFE000, 0xFFFFF000, 0xFFFFFF00, 0xFFF0F000, 0xFFE0FF00, 0xFFC0FF00, 0xFFA0FF00, 0xFF80FF00, 0xFF60FF00, 0xFF40FF00, 0xFF20FF00, 0xFF00FF00, 0xFF00FF20, 0xFF00FF40, 0xFF00FF60, 0xFF00FF80, 0xFF00FFA0, 0xFF00FFC0, 0xFF00FFE0, 0xFF00FFFF, 0xFF00E0FF, 0xFF00C0FF, 0xFF00A0FF, 0xFF0080FF, 0xFF0060FF, 0xFF0040FF, 0xFF0020FF, 0xFF0000FF],
			     "argbsIsosurfacePositive", 0xFF5020A0,
			     "argbsIsosurfaceNegative", 0xFFA02050,
			     "specialAtomNames", [null, "N", "CA", "C", "O", "O1", "O5'", "C5'", "C4'", "C3'", "O3'", "C2'", "C1'", "P", "OD1", "OD2", "OE1", "OE2", "SG", null, null, null, null, null, null, null, null, null, null, null, null, null, "N1", "C2", "N3", "C4", "C5", "C6", "O2", "N7", "C8", "N9", "N4", "N2", "N6", "C5M", "O6", "O4", "S4", "C7", "H1", "H2", "H3", null, null, null, null, null, null, null, null, null, null, null, "OXT", "H", "1H", "2H", "3H", "HA", "1HA", "2HA", "H5T", "O5T", "O1P", "OP1", "O2P", "OP2", "O4'", "O2'", "1H5'", "2H5'", "H4'", "H3'", "1H2'", "2H2'", "2HO'", "H1'", "H3T", "HO3'", "HO5'", "HA2", "HA3", "HA2", "H5'", "H5''", "H2'", "H2''", "HO2'", "O3P", "OP3"]);
	c$.ATOMID_MAX = c$.prototype.ATOMID_MAX = org.jmol.viewer.JmolConstants.specialAtomNames.length;
	Clazz.defineStatics (c$,
			     "ATOMID_AMINO_NITROGEN", 1,
			     "ATOMID_ALPHA_CARBON", 2,
			     "ATOMID_CARBONYL_CARBON", 3,
			     "ATOMID_CARBONYL_OXYGEN", 4,
			     "ATOMID_O1", 5,
			     "ATOMID_ALPHA_ONLY_MASK", 4,
			     "ATOMID_PROTEIN_MASK", 14,
			     "ATOMID_O5_PRIME", 6,
			     "ATOMID_C4_PRIME", 8,
			     "ATOMID_C3_PRIME", 9,
			     "ATOMID_O3_PRIME", 10,
			     "ATOMID_C1_PRIME", 12,
			     "ATOMID_NUCLEIC_MASK", 8128,
			     "ATOMID_NUCLEIC_PHOSPHORUS", 13,
			     "ATOMID_PHOSPHORUS_ONLY_MASK", 8192,
			     "ATOMID_DISTINGUISHING_ATOM_MAX", 14,
			     "ATOMID_CARBONYL_OD1", 14,
			     "ATOMID_CARBONYL_OD2", 15,
			     "ATOMID_CARBONYL_OE1", 16,
			     "ATOMID_CARBONYL_OE2", 17,
			     "ATOMID_SG", 18,
			     "ATOMID_N1", 32,
			     "ATOMID_C2", 33,
			     "ATOMID_N3", 34,
			     "ATOMID_C4", 35,
			     "ATOMID_C5", 36,
			     "ATOMID_C6", 37,
			     "ATOMID_O2", 38,
			     "ATOMID_N7", 39,
			     "ATOMID_C8", 40,
			     "ATOMID_N9", 41,
			     "ATOMID_N4", 42,
			     "ATOMID_N2", 43,
			     "ATOMID_N6", 44,
			     "ATOMID_C5M", 45,
			     "ATOMID_O6", 46,
			     "ATOMID_O4", 47,
			     "ATOMID_S4", 48,
			     "ATOMID_C7", 49,
			     "ATOMID_BACKBONE_MIN", 64,
			     "ATOMID_TERMINATING_OXT", 64,
			     "ATOMID_H5T_TERMINUS", 72,
			     "ATOMID_O5T_TERMINUS", 73,
			     "ATOMID_O1P", 74,
			     "ATOMID_OP1", 75,
			     "ATOMID_O2P", 76,
			     "ATOMID_OP2", 77,
			     "ATOMID_O2_PRIME", 79,
			     "ATOMID_H3T_TERMINUS", 88,
			     "ATOMID_HO3_PRIME", 89,
			     "ATOMID_HO5_PRIME", 90,
			     "htSpecialAtoms", null,
			     "GROUPID_ARGININE", 2,
			     "GROUPID_ASPARAGINE", 3,
			     "GROUPID_ASPARTATE", 4,
			     "GROUPID_CYSTEINE", 5,
			     "GROUPID_GLUTAMINE", 6,
			     "GROUPID_GLUTAMATE", 7,
			     "GROUPID_HISTIDINE", 9,
			     "GROUPID_LYSINE", 12,
			     "GROUPID_PROLINE", 15,
			     "GROUPID_TRYPTOPHAN", 19,
			     "GROUPID_AMINO_MAX", 24,
			     "GROUPID_NUCLEIC_MAX", 42,
			     "GROUPID_WATER", 42,
			     "GROUPID_SOLVENT_MIN", 45,
			     "GROUPID_ION_MIN", 46,
			     "GROUPID_ION_MAX", 48,
			     "predefinedGroup3Names", ["", "ALA", "ARG", "ASN", "ASP", "CYS", "GLN", "GLU", "GLY", "HIS", "ILE", "LEU", "LYS", "MET", "PHE", "PRO", "SER", "THR", "TRP", "TYR", "VAL", "ASX", "GLX", "UNK", "G", "C", "A", "T", "U", "I", "DG", "DC", "DA", "DT", "DU", "DI", "+G", "+C", "+A", "+T", "+U", "+I", "HOH", "DOD", "WAT", "UREA", "PO4", "SO4"],
			     "naNoH", "A3;A1;C3;G3;I3",
			     "aaSp2", "ARGN;ASNN;ASNO;ASPO;GLNN;GLNO;GLUO;HISN;HISC;PHECTRPC;TRPN;TYRC",
			     "aaPlus", "LYSN",
			     "pdbBondInfo", ["", "N N CA HA C O CB HB?", "N N CA HA C O CB HB2@HB3 CG HG2@HG3 CD D NE HE CZ NH1 NH1 HH11@HH12 NH2 HH21@HH22", "N N CA HA C O CB B CG OD1 ND2 HD21@HD22", "N N CA HA C O CB B CG OD1", "N N CA HA C O CB B SG HG", "N N CA HA C O CB B CG G CD OE1 NE2 HE21@HE22", "N N CA HA C O CB B CG G CD OE1", "N N CA HA2@HA3 C O", "N N CA HA C O CB B CG CD2 ND1 CE1 ND1 HD1 CD2 HD2 CE1 HE1 NE2 HE2", "N N CA HA C O CB HB CG1 HG12@HG13 CG2 HG2? CD1 HD1?", "N N CA HA C O CB HB2@HB3 CG HG CD1 HD1? CD2 HD2?", "N N CA HA C O CB B CG G CD HD2@HD3 CE HE3@HE2 NZ HZ?", "N N CA HA C O CB HB2@HB3 CG HG2@HG3 CE HE?", "N N CA HA C O CB B CG CD1 CD1 HD1 CD2 CE2 CD2 HD2 CE1 CZ CE1 HE1 CE2 HE2 CZ HZ", "N H CA HA C O CB B CG G CD HD2@HD3", "N N CA HA C O CB B OG HG", "N N CA HA C O CB HB OG1 HG1 CG2 HG2?", "N N CA HA C O CB B CG CD1 CD1 HD1 CD2 CE2 NE1 HE1 CE3 CZ3 CE3 HE3 CZ2 CH2 CZ2 HZ2 CZ3 HZ3 CH2 HH2", "N N CA HA C O CB B CG CD1 CD1 HD1 CD2 CE2 CD2 HD2 CE1 CZ CE1 HE1 CE2 HE2 OH HH", "N N CA HA C O CB HB CG1 HG1? CG2 HG2?", "CA HA C O CB HB2@HB1 C H", "CA HA C O CB HB1 CB HB2 CG HG1 CG HG2", "", "P OP1 C5' 5 C4' H4' C3' H3' C2' H2' O2' HO2' C1' H1' C8 N7 C8 H8 C5 C4 C6 O6 N1 H1 C2 N3 N2 H21@H22", "P OP1 C5' 5 C4' H4' C3' H3' C2' H2' O2' HO2' C1' H1' C2 O2 N3 C4 N4 H41@H42 C5 C6 C5 H5 C6 H6", "P OP1 C5' 5 C4' H4' C3' H3' C2' H2' O2' HO2' C1' H1' C8 N7 C8 H8 C5 C4 C6 N1 N6 H61@H62 C2 N3 C2 H2", "P OP1 C5' 5 C4' H4' C3' H3' C2' 2 C1' H1' C2 O2 N3 H3 C4 O4 C5 C6 C7 H7? C6 H6", "P OP1 C5' 5 C4' H4' C3' H3' C2' H2' O2' HO2' C1' H1' C2 O2 N3 H3 C4 O4 C5 C6 C5 H5 C6 H6", "P OP1 C5' 5 C4' H4' C3' H3' C2' H2' O2' HO2' C1' H1' C8 N7 C8 H8 C5 C4 C6 O6 N1 H1 C2 N3 C2 H2", "P OP1 C5' 5 C4' H4' C3' H3' C2' 2 C1' H1' C8 N7 C8 H8 C5 C4 C6 O6 N1 H1 C2 N3 N2 H21@H22", "P OP1 C5' 5 C4' H4' C3' H3' C2' 2 C1' H1' C2 O2 N3 C4 N4 H41@H42 C5 C6 C5 H5 C6 H6", "P OP1 C5' 5 C4' H4' C3' H3' C2' 2 C1' H1' C8 N7 C8 H8 C5 C4 C6 N1 N6 H61@H62 C2 N3 C2 H2", "P OP1 C5' H5'@H5'' C4' H4' C3' H3' C2' H2'@H2'' C1' H1' C2 O2 N3 H3 C4 O4 C5 C6 C7 H7? C6 H6", "P OP1 C5' 5 C4' H4' C3' H3' C2' H2'@H2'' C1' H1' C2 O2 N3 H3 C4 O4 C5 C6 C5 H5 C6 H6", "P OP1 C5' 5 C4' H4' C3' H3' C2' 2 C1' H1' C8 N7 C8 H8 C5 C4 C6 O6 N1 H1 C2 N3 C2 H2"],
			     "pdbHydrogenCount", [0, 6, 16, 7, 6, 6, 9, 8, 4, 9, 12, 12, 14, 10, 10, 8, 6, 8, 11, 10, 10, 3, 5, 0, 13, 13, 13, -1, 12, 12, 13, 13, 13, 14, 12, 12],
			     "argbsShapely", [0xFFFF00FF, 0xFF00007C, 0xFFFF7C70, 0xFF8CFF8C, 0xFFA00042, 0xFFFFFF70, 0xFFFF4C4C, 0xFF660000, 0xFFFFFFFF, 0xFF7070FF, 0xFF004C00, 0xFF455E45, 0xFF4747B8, 0xFF534C52, 0xFFB8A042, 0xFF525252, 0xFFFF7042, 0xFFB84C00, 0xFF4F4600, 0xFF8C704C, 0xFFFF8CFF, 0xFFFF00FF, 0xFFFF00FF, 0xFFFF00FF, 0xFFFF7070, 0xFFFF8C4B, 0xFFA0A0FF, 0xFFA0FFA0, 0xFFFF8080, 0xFF80FFFF, 0xFFFF7070, 0xFFFF8C4B, 0xFFA0A0FF, 0xFFA0FFA0, 0xFFFF8080, 0xFF80FFFF, 0xFFFF7070, 0xFFFF8C4B, 0xFFA0A0FF, 0xFFA0FFA0, 0xFFFF8080, 0xFF80FFFF],
			     "allCarbohydrates", ",[AHR],[AMU],[ARA],[ARB],[BDF],[BDR],[BGC],[BMA],[FCA],[FCB],[FRU],[FUC],[FUL],[GAL],[GLA],[GLC],[GUP],[LXC],[MAN],[RAM],[RIB],[RIP],[XYP],[XYS],[CBI],[CT3],[CTR],[CTT],[LAT],[MAB],[MAL],[MLR],[MTT],[SUC],[TRE],[GCU],[MTL],[NAG],[NDG],[RHA],[SOR],[SOL],[SOE],[XYL],[A2G],[LBT],[NGA],[SIA],[SLB],[AFL],[AGC],[GLB],[NAN],[RAA]",
			     "group3List", null,
			     "group3Count", 0,
			     "predefinedGroup1Names", ['\0', 'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V', 'A', 'G', '?', 'G', 'C', 'A', 'T', 'U', 'I', 'G', 'C', 'A', 'T', 'U', 'I', 'G', 'C', 'A', 'T', 'U', 'I', 'I'],
			     "predefinedVariable", ["@_1H _H & !(_2H,_3H)", "@_12C _C & !(_13C,_14C)", "@_14N _N & !(_15N)", "@water _g>=42 & _g<45, oxygen & connected(2) & connected(2, hydrogen), (hydrogen) & connected(oxygen & connected(2) & connected(2, hydrogen))", "@solvent water, (_g>=45 & _g<48)", "@ligand !(_g<46,protein,nucleic,water)", "@turn structure=1", "@sheet structure=2", "@helix structure=3", "@helix310 substructure=7", "@helixalpha substructure=8", "@helixpi substructure=9", "@bonded bondcount>0"],
			     "predefinedStatic", ["@amino _g>0 & _g<=23", "@acidic asp,glu", "@basic arg,his,lys", "@charged acidic,basic", "@negative acidic", "@positive basic", "@neutral amino&!(acidic,basic)", "@polar amino&!hydrophobic", "@cyclic his,phe,pro,trp,tyr", "@acyclic amino&!cyclic", "@aliphatic ala,gly,ile,leu,val", "@aromatic his,phe,trp,tyr", "@cystine within(group, (cys.sg or cyx.sg) and connected(cys.sg or cyx.sg))", "@buried ala,cys,ile,leu,met,phe,trp,val", "@surface amino&!buried", "@hydrophobic ala,gly,ile,leu,met,phe,pro,trp,tyr,val", "@mainchain backbone", "@small ala,gly,ser", "@medium asn,asp,cys,pro,thr,val", "@large arg,glu,gln,his,ile,leu,lys,met,phe,trp,tyr", "@c nucleic & ([C] or [DC] or within(group,_a=42))", "@g nucleic & ([G] or [DG] or within(group,_a=43))", "@cg c,g", "@a nucleic & ([A] or [DA] or within(group,_a=44))", "@t nucleic & ([T] or [DT] or within(group,_a=45 | _a=49))", "@at a,t", "@i nucleic & ([I] or [DI] or within(group,_a=46) & !g)", "@u nucleic & ([U] or [DU] or within(group,_a=47) & !t)", "@tu nucleic & within(group,_a=48)", "@ions _g>=46&_g<48", "@alpha _a=2", "@backbone (protein,nucleic) & (_a>0 & _a<14 || _a>=64) | _H & protein & connected(*.N)", "@spine protein & _a>0 & _a<= 3 || nucleic & (_a >= 6 & _a <= 10 || _a=13)", "@sidechain (protein,nucleic) & !backbone", "@base nucleic & !backbone", "@dynamic_flatring search('[a]')"],
			     "MODELKIT_ZAP_STRING", "1 0 C 0 0",
			     "MODELKIT_ZAP_TITLE", "Jmol Model Kit",
			     "ADD_HYDROGEN_TITLE", "Viewer.AddHydrogens",
			     "DEFAULT_FONTFACE", "SansSerif",
			     "DEFAULT_FONTSTYLE", "Plain",
			     "LABEL_MINIMUM_FONTSIZE", 6,
			     "LABEL_MAXIMUM_FONTSIZE", 63,
			     "LABEL_DEFAULT_FONTSIZE", 13,
			     "LABEL_DEFAULT_X_OFFSET", 4,
			     "LABEL_DEFAULT_Y_OFFSET", 4,
			     "MEASURE_DEFAULT_FONTSIZE", 15,
			     "AXES_DEFAULT_FONTSIZE", 14,
			     "SHAPE_BALLS", 0,
			     "SHAPE_STICKS", 1,
			     "SHAPE_HSTICKS", 2,
			     "SHAPE_SSSTICKS", 3,
			     "SHAPE_STRUTS", 4,
			     "SHAPE_LABELS", 5,
			     "SHAPE_MEASURES", 6,
			     "SHAPE_STARS", 7,
			     "SHAPE_HALOS", 8,
			     "SHAPE_MIN_SECONDARY", 9,
			     "SHAPE_BACKBONE", 9,
			     "SHAPE_TRACE", 10,
			     "SHAPE_CARTOON", 11,
			     "SHAPE_STRANDS", 12,
			     "SHAPE_MESHRIBBON", 13,
			     "SHAPE_RIBBONS", 14,
			     "SHAPE_ROCKETS", 15,
			     "SHAPE_MAX_SECONDARY", 16,
			     "SHAPE_MIN_SPECIAL", 16,
			     "SHAPE_DOTS", 16,
			     "SHAPE_DIPOLES", 17,
			     "SHAPE_VECTORS", 18,
			     "SHAPE_GEOSURFACE", 19,
			     "SHAPE_ELLIPSOIDS", 20,
			     "SHAPE_MAX_SIZE_ZERO_ON_RESTRICT", 21,
			     "SHAPE_POLYHEDRA", 21,
			     "SHAPE_MIN_HAS_ID", 22,
			     "SHAPE_MIN_MESH_COLLECTION", 22,
			     "SHAPE_DRAW", 22,
			     "SHAPE_MAX_SPECIAL", 23,
			     "SHAPE_MIN_SURFACE", 23,
			     "SHAPE_ISOSURFACE", 23,
			     "SHAPE_CONTACT", 24,
			     "SHAPE_LCAOCARTOON", 25,
			     "SHAPE_MO", 26,
			     "SHAPE_PMESH", 27,
			     "SHAPE_PLOT3D", 28,
			     "SHAPE_MAX_SURFACE", 29,
			     "SHAPE_MAX_MESH_COLLECTION", 29,
			     "SHAPE_ECHO", 29,
			     "SHAPE_MAX_HAS_ID", 30,
			     "SHAPE_AXES", 30,
			     "SHAPE_BBCAGE", 31,
			     "SHAPE_UCCAGE", 32,
			     "SHAPE_HOVER", 33,
			     "SHAPE_FRANK", 34,
			     "SHAPE_MAX", 35,
			     "shapeClassBases", ["Balls", "Sticks", "Hsticks", "Sssticks", "Struts", "Labels", "Measures", "Stars", "Halos", "Backbone", "Trace", "Cartoon", "Strands", "MeshRibbon", "Ribbons", "Rockets", "Dots", "Dipoles", "Vectors", "GeoSurface", "Ellipsoids", "Polyhedra", "Draw", "Isosurface", "Contact", "LcaoCartoon", "MolecularOrbital", "Pmesh", "Plot3D", "Echo", "Axes", "Bbcage", "Uccage", "Hover", "Frank"],
			     "ATOM_IN_FRAME", 1,
			     "ATOM_SLABBED", 2,
			     "CURSOR_DEFAULT", 0,
			     "CURSOR_HAND", 1,
			     "CURSOR_CROSSHAIR", 2,
			     "CURSOR_MOVE", 3,
			     "CURSOR_WAIT", 4,
			     "CURSOR_ZOOM", 5);
	{
	    if (org.jmol.viewer.JmolConstants.argbsFormalCharge.length != 12) {
		org.jmol.util.Logger.error ("formal charge color table length");
		throw  new NullPointerException ();
	    }if (org.jmol.viewer.JmolConstants.shapeClassBases.length != 35) {
		org.jmol.util.Logger.error ("shapeClassBases wrong length");
		throw  new NullPointerException ();
	    }if (org.jmol.viewer.JmolConstants.argbsAmino.length != 24) {
		org.jmol.util.Logger.error ("argbsAmino wrong length");
		throw  new NullPointerException ();
	    }if (org.jmol.viewer.JmolConstants.argbsShapely.length != 42) {
		org.jmol.util.Logger.error ("argbsShapely wrong length");
		throw  new NullPointerException ();
	    }if (org.jmol.viewer.JmolConstants.argbsChainHetero.length != org.jmol.viewer.JmolConstants.argbsChainAtom.length) {
		org.jmol.util.Logger.error ("argbsChainHetero wrong length");
		throw  new NullPointerException ();
	    }if (org.jmol.viewer.JmolConstants.shapeClassBases.length != 35) {
		org.jmol.util.Logger.error ("the shapeClassBases array has the wrong length");
		throw  new NullPointerException ();
	    }}});
    // 
    //// org\jmol\util\Int2IntHash.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    c$ = Clazz.decorateAsClass (function () {
	this.entryCount = 0;
	this.entries = null;
	Clazz.instantialize (this, arguments);
    }, org.jmol.util, "Int2IntHash");
    Clazz.makeConstructor (c$, 
			   function (initialCapacity) {
			       this.entries =  new Array (initialCapacity);
			   }, "~N");
    Clazz.defineMethod (c$, "get", 
			function (key) {
			    var entries = this.entries;
			    var hash = (key & 0x7FFFFFFF) % entries.length;
			    for (var e = entries[hash]; e != null; e = e.next) if (e.key == key) return e.value;

			    return -2147483648;
			}, "~N");
    Clazz.defineMethod (c$, "put", 
			function (key, value) {
			    var entries = this.entries;
			    var hash = (key & 0x7FFFFFFF) % entries.length;
			    for (var e = entries[hash]; e != null; e = e.next) if (e.key == key) {
				e.value = value;
				return;
			    }
			    if (this.entryCount > entries.length) this.rehash ();
			    entries = this.entries;
			    hash = (key & 0x7FFFFFFF) % entries.length;
			    entries[hash] =  new org.jmol.util.Int2IntHash.Entry (key, value, entries[hash]);
			    ++this.entryCount;
			}, "~N,~N");
    Clazz.defineMethod (c$, "rehash", 
			($fz = function () {
			    var oldEntries = this.entries;
			    var oldSize = oldEntries.length;
			    var newSize = oldSize * 2 + 1;
			    var newEntries =  new Array (newSize);
			    for (var i = oldSize; --i >= 0; ) {
				for (var e = oldEntries[i]; e != null; ) {
				    var t = e;
				    e = e.next;
				    var hash = (t.key & 0x7FFFFFFF) % newSize;
				    t.next = newEntries[hash];
				    newEntries[hash] = t;
				}
			    }
			    this.entries = newEntries;
			}, $fz.isPrivate = true, $fz));
    Clazz.pu$h ();
    c$ = Clazz.decorateAsClass (function () {
	this.key = 0;
	this.value = 0;
	this.next = null;
	Clazz.instantialize (this, arguments);
    }, org.jmol.util.Int2IntHash, "Entry");
    Clazz.makeConstructor (c$, 
			   function (a, b, c) {
			       this.key = a;
			       this.value = b;
			       this.next = c;
			   }, "~N,~N,org.jmol.util.Int2IntHash.Entry");
    c$ = Clazz.p0p ();
    // 
    //// org\jmol\util\Colix.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.ArrayUtil", "$.Int2IntHash"], "org.jmol.util.Colix", ["java.lang.Float", "$.IndexOutOfBoundsException", "org.jmol.constant.EnumPalette", "org.jmol.util.ColorUtil", "$.Escape", "$.Logger", "$.Parser", "$.Shader", "$.StringXBuilder"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Colix");
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	c$.getColix = Clazz.defineMethod (c$, "getColix", 
					  function (argb) {
					      if (argb == 0) return 0;
					      var translucentFlag = 0;
					      if ((argb & 0xFF000000) != (-16777216)) {
						  argb |= 0xFF000000;
						  translucentFlag = 8192;
					      }var c = org.jmol.util.Colix.colixHash.get (argb);
					      if ((c & 3) == 3) translucentFlag = 0;
					      return (c > 0 ? (c | translucentFlag) : (org.jmol.util.Colix.allocateColix (argb) | translucentFlag));
					  }, "~N");
	c$.allocateColix = Clazz.defineMethod (c$, "allocateColix", 
					       function (argb) {
						   if ((argb & 0xFF000000) != (-16777216)) throw  new IndexOutOfBoundsException ();
						   for (var i = org.jmol.util.Colix.colixMax; --i >= 4; ) if (argb == org.jmol.util.Colix.argbs[i]) return i;

						   if (org.jmol.util.Colix.colixMax == org.jmol.util.Colix.argbs.length) {
						       var oldSize = org.jmol.util.Colix.colixMax;
						       var newSize = oldSize * 2;
						       if (newSize > 2048) newSize = 2048;
						       ($t$ = org.jmol.util.Colix.argbs = org.jmol.util.ArrayUtil.arrayCopyI (org.jmol.util.Colix.argbs, newSize), org.jmol.util.Colix.prototype.argbs = org.jmol.util.Colix.argbs, $t$);
						       if (org.jmol.util.Colix.argbsGreyscale != null) ($t$ = org.jmol.util.Colix.argbsGreyscale = org.jmol.util.ArrayUtil.arrayCopyI (org.jmol.util.Colix.argbsGreyscale, newSize), org.jmol.util.Colix.prototype.argbsGreyscale = org.jmol.util.Colix.argbsGreyscale, $t$);
						       ($t$ = org.jmol.util.Colix.ashades = org.jmol.util.ArrayUtil.arrayCopyII (org.jmol.util.Colix.ashades, newSize), org.jmol.util.Colix.prototype.ashades = org.jmol.util.Colix.ashades, $t$);
						       if (org.jmol.util.Colix.ashadesGreyscale != null) ($t$ = org.jmol.util.Colix.ashadesGreyscale = org.jmol.util.ArrayUtil.arrayCopyII (org.jmol.util.Colix.ashadesGreyscale, newSize), org.jmol.util.Colix.prototype.ashadesGreyscale = org.jmol.util.Colix.ashadesGreyscale, $t$);
						   }org.jmol.util.Colix.argbs[org.jmol.util.Colix.colixMax] = argb;
						   if (org.jmol.util.Colix.argbsGreyscale != null) org.jmol.util.Colix.argbsGreyscale[org.jmol.util.Colix.colixMax] = org.jmol.util.ColorUtil.calcGreyscaleRgbFromRgb (argb);
						   org.jmol.util.Colix.colixHash.put (argb, org.jmol.util.Colix.colixMax);
						   return (org.jmol.util.Colix.colixMax < 2047 ? ($t$ = org.jmol.util.Colix.colixMax ++, org.jmol.util.Colix.prototype.colixMax = org.jmol.util.Colix.colixMax, $t$) : org.jmol.util.Colix.colixMax);
					       }, "~N");
	c$.calcArgbsGreyscale = Clazz.defineMethod (c$, "calcArgbsGreyscale", 
						    ($fz = function () {
							if (org.jmol.util.Colix.argbsGreyscale != null) return;
							var a =  Clazz.newIntArray (org.jmol.util.Colix.argbs.length, 0);
							for (var i = org.jmol.util.Colix.argbs.length; --i >= 4; ) a[i] = org.jmol.util.ColorUtil.calcGreyscaleRgbFromRgb (org.jmol.util.Colix.argbs[i]);

							($t$ = org.jmol.util.Colix.argbsGreyscale = a, org.jmol.util.Colix.prototype.argbsGreyscale = org.jmol.util.Colix.argbsGreyscale, $t$);
						    }, $fz.isPrivate = true, $fz));
	c$.getArgbGreyscale = Clazz.defineMethod (c$, "getArgbGreyscale", 
						  function (colix) {
						      if (org.jmol.util.Colix.argbsGreyscale == null) org.jmol.util.Colix.calcArgbsGreyscale ();
						      return org.jmol.util.Colix.argbsGreyscale[colix & -30721];
						  }, "~N");
	c$.getShadesArgb = Clazz.defineMethod (c$, "getShadesArgb", 
					       function (argb, asGrey) {
						   if (asGrey) {
						       if (org.jmol.util.Colix.argbsGreyscale == null) org.jmol.util.Colix.calcArgbsGreyscale ();
						       org.jmol.util.Colix.argbsGreyscale[2047] = org.jmol.util.ColorUtil.calcGreyscaleRgbFromRgb (argb);
						   }return org.jmol.util.Colix.ashades[2047] = org.jmol.util.Shader.getShades (argb, false);
					       }, "~N,~B");
	c$.getShades = Clazz.defineMethod (c$, "getShades", 
					   function (colix) {
					       colix &= -30721;
					       var shades = org.jmol.util.Colix.ashades[colix];
					       if (shades == null) shades = org.jmol.util.Colix.ashades[colix] = org.jmol.util.Shader.getShades (org.jmol.util.Colix.argbs[colix], false);
					       return shades;
					   }, "~N");
	c$.getShadesGreyscale = Clazz.defineMethod (c$, "getShadesGreyscale", 
						    function (colix) {
							colix &= -30721;
							if (org.jmol.util.Colix.ashadesGreyscale == null) ($t$ = org.jmol.util.Colix.ashadesGreyscale = org.jmol.util.ArrayUtil.newInt2 (org.jmol.util.Colix.ashades.length), org.jmol.util.Colix.prototype.ashadesGreyscale = org.jmol.util.Colix.ashadesGreyscale, $t$);
							var shadesGreyscale = org.jmol.util.Colix.ashadesGreyscale[colix];
							if (shadesGreyscale == null) shadesGreyscale = org.jmol.util.Colix.ashadesGreyscale[colix] = org.jmol.util.Shader.getShades (org.jmol.util.Colix.argbs[colix], true);
							return shadesGreyscale;
						    }, "~N");
	c$.flushShades = Clazz.defineMethod (c$, "flushShades", 
					     function () {
						 for (var i = org.jmol.util.Colix.colixMax; --i >= 0; ) org.jmol.util.Colix.ashades[i] = null;

						 ($t$ = org.jmol.util.Shader.sphereShadingCalculated = false, org.jmol.util.Shader.prototype.sphereShadingCalculated = org.jmol.util.Shader.sphereShadingCalculated, $t$);
					     });
	c$.getColixO = Clazz.defineMethod (c$, "getColixO", 
					   function (obj) {
					       if (obj == null) return 0;
					       if (Clazz.instanceOf (obj, org.jmol.constant.EnumPalette)) return ((obj) === org.jmol.constant.EnumPalette.NONE ? 0 : 2);
					       if (Clazz.instanceOf (obj, Integer)) return org.jmol.util.Colix.getColix ((obj).intValue ());
					       if (Clazz.instanceOf (obj, String)) return org.jmol.util.Colix.getColixS (obj);
					       if (Clazz.instanceOf (obj, Byte)) return ((obj).byteValue () == 0 ? 0 : 2);
					       if (org.jmol.util.Logger.debugging) {
						   org.jmol.util.Logger.debug ("?? getColix(" + obj + ")");
					       }return 22;
					   }, "~O");
	c$.applyColorTranslucencyLevel = Clazz.defineMethod (c$, "applyColorTranslucencyLevel", 
							     function (colix, translucentLevel) {
								 if (translucentLevel == 0) return (colix & -30721);
								 if (translucentLevel < 0) return (colix & -30721 | 30720);
								 if (Float.isNaN (translucentLevel) || translucentLevel >= 255 || translucentLevel == 1.0) return ((colix & -30721) | 16384);
								 var iLevel = Clazz.doubleToInt (Math.floor (translucentLevel < 1 ? translucentLevel * 256 : translucentLevel <= 9 ? (Clazz.doubleToInt (Math.floor (translucentLevel - 1))) << 5 : translucentLevel < 15 ? 256 : translucentLevel));
								 iLevel = (iLevel >> 5) % 16;
								 return (colix & -30721 | (iLevel << 11));
							     }, "~N,~N");
	c$.isColixLastAvailable = Clazz.defineMethod (c$, "isColixLastAvailable", 
						      function (colix) {
							  return (colix > 0 && (colix & 2047) == 2047);
						      }, "~N");
	c$.getArgb = Clazz.defineMethod (c$, "getArgb", 
					 function (colix) {
					     return org.jmol.util.Colix.argbs[colix & -30721];
					 }, "~N");
	c$.isColixColorInherited = Clazz.defineMethod (c$, "isColixColorInherited", 
						       function (colix) {
							   switch (colix) {
							   case 0:
							   case 1:
							       return true;
							   default:
							       return (colix & -30721) == 1;
							   }
						       }, "~N");
	c$.getColixInherited = Clazz.defineMethod (c$, "getColixInherited", 
						   function (myColix, parentColix) {
						       switch (myColix) {
						       case 0:
							   return parentColix;
						       case 1:
							   return (parentColix & -30721);
						       default:
							   return ((myColix & -30721) == 1 ? (parentColix & -30721 | myColix & 30720) : myColix);
						       }
						   }, "~N,~N");
	c$.isColixTranslucent = Clazz.defineMethod (c$, "isColixTranslucent", 
						    function (colix) {
							return ((colix & 30720) != 0);
						    }, "~N");
	c$.getChangeableColixIndex = Clazz.defineMethod (c$, "getChangeableColixIndex", 
							 function (colix) {
							     return (colix >= 0 ? -1 : (colix & 2047));
							 }, "~N");
	c$.getColixTranslucent3 = Clazz.defineMethod (c$, "getColixTranslucent3", 
						      function (colix, isTranslucent, translucentLevel) {
							  if (colix == 0) colix = 1;
							  colix &= -30721;
							  return (isTranslucent ? org.jmol.util.Colix.applyColorTranslucencyLevel (colix, translucentLevel) : colix);
						      }, "~N,~B,~N");
	c$.copyColixTranslucency = Clazz.defineMethod (c$, "copyColixTranslucency", 
						       function (colixFrom, colixTo) {
							   return org.jmol.util.Colix.getColixTranslucent3 (colixTo, org.jmol.util.Colix.isColixTranslucent (colixFrom), org.jmol.util.Colix.getColixTranslucencyLevel (colixFrom));
						       }, "~N,~N");
	c$.getColixTranslucencyFractional = Clazz.defineMethod (c$, "getColixTranslucencyFractional", 
								function (colix) {
								    var translevel = org.jmol.util.Colix.getColixTranslucencyLevel (colix);
								    return (translevel == -1 ? 0.5 : translevel == 0 ? 0 : translevel == 255 ? 1 : translevel / 256);
								}, "~N");
	c$.getColixTranslucencyLevel = Clazz.defineMethod (c$, "getColixTranslucencyLevel", 
							   function (colix) {
							       var logAlpha = (colix >> 11) & 0xF;
							       switch (logAlpha) {
							       case 0:
								   return 0;
							       case 1:
							       case 2:
							       case 3:
							       case 4:
							       case 5:
							       case 6:
							       case 7:
								   return logAlpha << 5;
							       case 15:
								   return -1;
							       default:
								   return 255;
							       }
							   }, "~N");
	c$.getColixS = Clazz.defineMethod (c$, "getColixS", 
					   function (colorName) {
					       var argb = org.jmol.util.ColorUtil.getArgbFromString (colorName);
					       if (argb != 0) return org.jmol.util.Colix.getColix (argb);
					       if ("none".equalsIgnoreCase (colorName)) return 0;
					       if ("opaque".equalsIgnoreCase (colorName)) return 1;
					       return 2;
					   }, "~S");
	c$.getColixArray = Clazz.defineMethod (c$, "getColixArray", 
					       function (colorNames) {
						   if (colorNames == null || colorNames.length == 0) return null;
						   var colors = org.jmol.util.Parser.getTokens (colorNames);
						   var colixes =  Clazz.newShortArray (colors.length, 0);
						   for (var j = 0; j < colors.length; j++) {
						       colixes[j] = org.jmol.util.Colix.getColix (org.jmol.util.ColorUtil.getArgbFromString (colors[j]));
						       if (colixes[j] == 0) return null;
						   }
						   return colixes;
					       }, "~S");
	c$.getHexCode = Clazz.defineMethod (c$, "getHexCode", 
					    function (colix) {
						return org.jmol.util.Escape.escapeColor (org.jmol.util.Colix.getArgb (colix));
					    }, "~N");
	c$.getHexCodes = Clazz.defineMethod (c$, "getHexCodes", 
					     function (colixes) {
						 if (colixes == null) return null;
						 var s =  new org.jmol.util.StringXBuilder ();
						 for (var i = 0; i < colixes.length; i++) s.append (i == 0 ? "" : " ").append (org.jmol.util.Colix.getHexCode (colixes[i]));

						 return s.toString ();
					     }, "~A");
	c$.getColixTranslucent = Clazz.defineMethod (c$, "getColixTranslucent", 
						     function (argb) {
							 var a = (argb >> 24) & 0xFF;
							 if (a == 0xFF) return org.jmol.util.Colix.getColix (argb);
							 return org.jmol.util.Colix.getColixTranslucent3 (org.jmol.util.Colix.getColix (argb), true, a / 255);
						     }, "~N");
	Clazz.defineStatics (c$,
			     "INHERIT_ALL", 0,
			     "INHERIT_COLOR", 1,
			     "USE_PALETTE", 2,
			     "RAW_RGB", 3,
			     "SPECIAL_COLIX_MAX", 4,
			     "colixMax", 4,
			     "argbs",  Clazz.newIntArray (128, 0),
			     "argbsGreyscale", null);
	c$.ashades = c$.prototype.ashades = org.jmol.util.ArrayUtil.newInt2 (128);
	Clazz.defineStatics (c$,
			     "ashadesGreyscale", null);
	c$.colixHash = c$.prototype.colixHash =  new org.jmol.util.Int2IntHash (256);
	Clazz.defineStatics (c$,
			     "RAW_RGB_INT", 3,
			     "UNMASK_CHANGEABLE_TRANSLUCENT", 0x07FF,
			     "CHANGEABLE_MASK", 0x8000,
			     "LAST_AVAILABLE_COLIX", 2047,
			     "TRANSLUCENT_SHIFT", 11,
			     "ALPHA_SHIFT", 13,
			     "TRANSLUCENT_MASK", 30720,
			     "TRANSLUCENT_SCREENED", 30720,
			     "TRANSPARENT", 16384,
			     "TRANSLUCENT_50", 8192,
			     "OPAQUE_MASK", -30721,
			     "BLACK", 4,
			     "ORANGE", 5,
			     "PINK", 6,
			     "BLUE", 7,
			     "WHITE", 8,
			     "CYAN", 9,
			     "RED", 10,
			     "GREEN", 11,
			     "GRAY", 12,
			     "SILVER", 13,
			     "LIME", 14,
			     "MAROON", 15,
			     "NAVY", 16,
			     "OLIVE", 17,
			     "PURPLE", 18,
			     "TEAL", 19,
			     "MAGENTA", 20,
			     "YELLOW", 21,
			     "HOTPINK", 22,
			     "GOLD", 23,
			     "predefinedArgbs", [0xFF000000, 0xFFFFA500, 0xFFFFC0CB, 0xFF0000FF, 0xFFFFFFFF, 0xFF00FFFF, 0xFFFF0000, 0xFF008000, 0xFF808080, 0xFFC0C0C0, 0xFF00FF00, 0xFF800000, 0xFF000080, 0xFF808000, 0xFF800080, 0xFF008080, 0xFFFF00FF, 0xFFFFFF00, 0xFFFF69B4, 0xFFFFD700]);
	{
	    for (var i = 0; i < org.jmol.util.Colix.predefinedArgbs.length; ++i) org.jmol.util.Colix.getColix (org.jmol.util.Colix.predefinedArgbs[i]);

	}});
    // 
    //// org\jmol\util\Eigen.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Eigen", ["java.lang.Float", "java.util.Arrays", "org.jmol.util.Escape", "$.Logger", "$.Matrix3f", "$.Quadric", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.n = 0;
	    this.d = null;
	    this.e = null;
	    this.V = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Eigen");
	Clazz.makeConstructor (c$, 
			       function (n) {
				   this.n = n;
				   this.V =  Clazz.newDoubleArray (n, n, 0);
				   this.d =  Clazz.newDoubleArray (n, 0);
				   this.e =  Clazz.newDoubleArray (n, 0);
			       }, "~N");
	c$.newM = Clazz.defineMethod (c$, "newM", 
				      function (m) {
					  var e =  new org.jmol.util.Eigen (m.length);
					  e.calc (m);
					  return e;
				      }, "~A");
	c$.getUnitVectors = Clazz.defineMethod (c$, "getUnitVectors", 
						function (m, unitVectors, lengths) {
						    org.jmol.util.Eigen.newM (m).set (unitVectors, lengths);
						    org.jmol.util.Eigen.sort (unitVectors, lengths);
						}, "~A,~A,~A");
	Clazz.defineMethod (c$, "set", 
			    ($fz = function (unitVectors, lengths) {
				var eigenVectors = this.getEigenvectorsFloatTransposed ();
				var eigenValues = this.getRealEigenvalues ();
				for (var i = 0; i < this.n; i++) {
				    if (unitVectors[i] == null) unitVectors[i] =  new org.jmol.util.Vector3f ();
				    unitVectors[i].setA (eigenVectors[i]);
				    lengths[i] = Math.sqrt (Math.abs (eigenValues[i]));
				}
			    }, $fz.isPrivate = true, $fz), "~A,~A");
	Clazz.defineMethod (c$, "calc", 
			    function (A) {
				for (var i = 0; i < this.n; i++) {
				    for (var j = 0; j < this.n; j++) {
					this.V[i][j] = A[i][j];
				    }
				}
				this.tred2 ();
				this.tql2 ();
			    }, "~A");
	Clazz.defineMethod (c$, "getRealEigenvalues", 
			    function () {
				return this.d;
			    });
	Clazz.defineMethod (c$, "getImagEigenvalues", 
			    function () {
				return this.e;
			    });
	Clazz.defineMethod (c$, "getEigenvalues", 
			    function () {
				return this.d;
			    });
	Clazz.defineMethod (c$, "getEigenvectorsFloatTransposed", 
			    function () {
				var f =  Clazz.newFloatArray (this.n, this.n, 0);
				for (var i = this.n; --i >= 0; ) for (var j = this.n; --j >= 0; ) f[j][i] = this.V[i][j];


				return f;
			    });
	Clazz.defineMethod (c$, "getEigenVectors3", 
			    function () {
				var v =  new Array (3);
				for (var i = 0; i < 3; i++) {
				    v[i] = org.jmol.util.Vector3f.new3 (this.V[0][i], this.V[1][i], this.V[2][i]);
				}
				return v;
			    });
	Clazz.defineMethod (c$, "tred2", 
			    ($fz = function () {
				for (var j = 0; j < this.n; j++) {
				    this.d[j] = this.V[this.n - 1][j];
				}
				for (var i = this.n - 1; i > 0; i--) {
				    var scale = 0.0;
				    var h = 0.0;
				    for (var k = 0; k < i; k++) {
					scale = scale + Math.abs (this.d[k]);
				    }
				    if (scale == 0.0) {
					this.e[i] = this.d[i - 1];
					for (var j = 0; j < i; j++) {
					    this.d[j] = this.V[i - 1][j];
					    this.V[i][j] = 0.0;
					    this.V[j][i] = 0.0;
					}
				    } else {
					for (var k = 0; k < i; k++) {
					    this.d[k] /= scale;
					    h += this.d[k] * this.d[k];
					}
					var f = this.d[i - 1];
					var g = Math.sqrt (h);
					if (f > 0) {
					    g = -g;
					}this.e[i] = scale * g;
					h = h - f * g;
					this.d[i - 1] = f - g;
					for (var j = 0; j < i; j++) {
					    this.e[j] = 0.0;
					}
					for (var j = 0; j < i; j++) {
					    f = this.d[j];
					    this.V[j][i] = f;
					    g = this.e[j] + this.V[j][j] * f;
					    for (var k = j + 1; k <= i - 1; k++) {
						g += this.V[k][j] * this.d[k];
						this.e[k] += this.V[k][j] * f;
					    }
					    this.e[j] = g;
					}
					f = 0.0;
					for (var j = 0; j < i; j++) {
					    this.e[j] /= h;
					    f += this.e[j] * this.d[j];
					}
					var hh = f / (h + h);
					for (var j = 0; j < i; j++) {
					    this.e[j] -= hh * this.d[j];
					}
					for (var j = 0; j < i; j++) {
					    f = this.d[j];
					    g = this.e[j];
					    for (var k = j; k <= i - 1; k++) {
						this.V[k][j] -= (f * this.e[k] + g * this.d[k]);
					    }
					    this.d[j] = this.V[i - 1][j];
					    this.V[i][j] = 0.0;
					}
				    }this.d[i] = h;
				}
				for (var i = 0; i < this.n - 1; i++) {
				    this.V[this.n - 1][i] = this.V[i][i];
				    this.V[i][i] = 1.0;
				    var h = this.d[i + 1];
				    if (h != 0.0) {
					for (var k = 0; k <= i; k++) {
					    this.d[k] = this.V[k][i + 1] / h;
					}
					for (var j = 0; j <= i; j++) {
					    var g = 0.0;
					    for (var k = 0; k <= i; k++) {
						g += this.V[k][i + 1] * this.V[k][j];
					    }
					    for (var k = 0; k <= i; k++) {
						this.V[k][j] -= g * this.d[k];
					    }
					}
				    }for (var k = 0; k <= i; k++) {
					this.V[k][i + 1] = 0.0;
				    }
				}
				for (var j = 0; j < this.n; j++) {
				    this.d[j] = this.V[this.n - 1][j];
				    this.V[this.n - 1][j] = 0.0;
				}
				this.V[this.n - 1][this.n - 1] = 1.0;
				this.e[0] = 0.0;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "tql2", 
			    ($fz = function () {
				for (var i = 1; i < this.n; i++) {
				    this.e[i - 1] = this.e[i];
				}
				this.e[this.n - 1] = 0.0;
				var f = 0.0;
				var tst1 = 0.0;
				var eps = Math.pow (2.0, -52.0);
				for (var l = 0; l < this.n; l++) {
				    tst1 = Math.max (tst1, Math.abs (this.d[l]) + Math.abs (this.e[l]));
				    var m = l;
				    while (m < this.n) {
					if (Math.abs (this.e[m]) <= eps * tst1) {
					    break;
					}m++;
				    }
				    if (m > l) {
					var iter = 0;
					do {
					    iter = iter + 1;
					    var g = this.d[l];
					    var p = (this.d[l + 1] - g) / (2.0 * this.e[l]);
					    var r = org.jmol.util.Eigen.hypot (p, 1.0);
					    if (p < 0) {
						r = -r;
					    }this.d[l] = this.e[l] / (p + r);
					    this.d[l + 1] = this.e[l] * (p + r);
					    var dl1 = this.d[l + 1];
					    var h = g - this.d[l];
					    for (var i = l + 2; i < this.n; i++) {
						this.d[i] -= h;
					    }
					    f = f + h;
					    p = this.d[m];
					    var c = 1.0;
					    var c2 = c;
					    var c3 = c;
					    var el1 = this.e[l + 1];
					    var s = 0.0;
					    var s2 = 0.0;
					    for (var i = m - 1; i >= l; i--) {
						c3 = c2;
						c2 = c;
						s2 = s;
						g = c * this.e[i];
						h = c * p;
						r = org.jmol.util.Eigen.hypot (p, this.e[i]);
						this.e[i + 1] = s * r;
						s = this.e[i] / r;
						c = p / r;
						p = c * this.d[i] - s * g;
						this.d[i + 1] = h + s * (c * g + s * this.d[i]);
						for (var k = 0; k < this.n; k++) {
						    h = this.V[k][i + 1];
						    this.V[k][i + 1] = s * this.V[k][i] + c * h;
						    this.V[k][i] = c * this.V[k][i] - s * h;
						}
					    }
					    p = -s * s2 * c3 * el1 * this.e[l] / dl1;
					    this.e[l] = s * p;
					    this.d[l] = c * p;
					} while (Math.abs (this.e[l]) > eps * tst1);
				    }this.d[l] = this.d[l] + f;
				    this.e[l] = 0.0;
				}
				for (var i = 0; i < this.n - 1; i++) {
				    var k = i;
				    var p = this.d[i];
				    for (var j = i + 1; j < this.n; j++) {
					if (this.d[j] < p) {
					    k = j;
					    p = this.d[j];
					}}
				    if (k != i) {
					this.d[k] = this.d[i];
					this.d[i] = p;
					for (var j = 0; j < this.n; j++) {
					    p = this.V[j][i];
					    this.V[j][i] = this.V[j][k];
					    this.V[j][k] = p;
					}
				    }}
			    }, $fz.isPrivate = true, $fz));
	c$.hypot = Clazz.defineMethod (c$, "hypot", 
				       ($fz = function (a, b) {
					   var r;
					   if (Math.abs (a) > Math.abs (b)) {
					       r = b / a;
					       r = Math.abs (a) * Math.sqrt (1 + r * r);
					   } else if (b != 0) {
					       r = a / b;
					       r = Math.abs (b) * Math.sqrt (1 + r * r);
					   } else {
					       r = 0.0;
					   }return r;
				       }, $fz.isPrivate = true, $fz), "~N,~N");
	c$.getEllipsoidDD = Clazz.defineMethod (c$, "getEllipsoidDD", 
						function (a) {
						    var eigen =  new org.jmol.util.Eigen (3);
						    eigen.calc (a);
						    var m =  new org.jmol.util.Matrix3f ();
						    var mm =  Clazz.newFloatArray (9, 0);
						    for (var i = 0, p = 0; i < 3; i++) for (var j = 0; j < 3; j++) mm[p++] = a[i][j];


						    m.setA (mm);
						    var evec = eigen.getEigenVectors3 ();
						    var n =  new org.jmol.util.Vector3f ();
						    var cross =  new org.jmol.util.Vector3f ();
						    for (var i = 0; i < 3; i++) {
							n.setT (evec[i]);
							m.transform (n);
							cross.cross (n, evec[i]);
							org.jmol.util.Logger.info ("v[i], n, n x v[i]" + evec[i] + " " + n + " " + cross);
							n.setT (evec[i]);
							n.normalize ();
							cross.cross (evec[i], evec[(i + 1) % 3]);
							org.jmol.util.Logger.info ("draw id eigv" + i + " " + org.jmol.util.Escape.escapePt (evec[i]) + " color " + (i == 0 ? "red" : i == 1 ? "green" : "blue") + " # " + n + " " + cross);
						    }
						    org.jmol.util.Logger.info ("eigVl (" + eigen.d[0] + " + " + eigen.e[0] + "I) (" + eigen.d[1] + " + " + eigen.e[1] + "I) (" + eigen.d[2] + " + " + eigen.e[2] + "I)");
						    var unitVectors =  new Array (3);
						    var lengths =  Clazz.newFloatArray (3, 0);
						    eigen.set (unitVectors, lengths);
						    org.jmol.util.Eigen.sort (unitVectors, lengths);
						    return  new org.jmol.util.Quadric (unitVectors, lengths, false);
						}, "~A");
	c$.getEllipsoid = Clazz.defineMethod (c$, "getEllipsoid", 
					      function (vectors, lengths, isThermal) {
						  var unitVectors =  new Array (vectors.length);
						  for (var i = vectors.length; --i >= 0; ) unitVectors[i] = org.jmol.util.Vector3f.newV (vectors[i]);

						  org.jmol.util.Eigen.sort (unitVectors, lengths);
						  return  new org.jmol.util.Quadric (unitVectors, lengths, isThermal);
					      }, "~A,~A,~B");
	c$.sort = Clazz.defineMethod (c$, "sort", 
				      ($fz = function (vectors, lengths) {
					  var o = [[vectors[0], Float.$valueOf (Math.abs (lengths[0]))], [vectors[1], Float.$valueOf (Math.abs (lengths[1]))], [vectors[2], Float.$valueOf (Math.abs (lengths[2]))]];
					  java.util.Arrays.sort (o,  new org.jmol.util.Eigen.EigenSort ());
					  for (var i = 0; i < 3; i++) {
					      vectors[i] = org.jmol.util.Vector3f.newV (o[i][0]);
					      vectors[i].normalize ();
					      lengths[i] = (o[i][1]).floatValue ();
					  }
				      }, $fz.isPrivate = true, $fz), "~A,~A");
	Clazz.pu$h ();
	c$ = Clazz.declareType (org.jmol.util.Eigen, "EigenSort", null, java.util.Comparator);
	Clazz.overrideMethod (c$, "compare", 
			      function (a, b) {
				  var c = (a[1]).floatValue ();
				  var d = (b[1]).floatValue ();
				  return (c < d ? -1 : c > d ? 1 : 0);
			      }, "~A,~A");
	c$ = Clazz.p0p ();
    });
    // 
    //// org\jmol\util\Quaternion.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Point4f"], "org.jmol.util.Quaternion", ["java.lang.Float", "org.jmol.util.AxisAngle4f", "$.Escape", "$.Logger", "$.Matrix3f", "$.Point3f", "$.TextFormat", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.q0 = 0;
	    this.q1 = 0;
	    this.q2 = 0;
	    this.q3 = 0;
	    this.mat = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Quaternion");
	Clazz.makeConstructor (c$, 
			       function () {
				   this.q0 = 1;
			       });
	c$.newQ = Clazz.defineMethod (c$, "newQ", 
				      function (q) {
					  var q1 =  new org.jmol.util.Quaternion ();
					  q1.set (q);
					  return q1;
				      }, "org.jmol.util.Quaternion");
	c$.newVA = Clazz.defineMethod (c$, "newVA", 
				       function (pt, theta) {
					   var q =  new org.jmol.util.Quaternion ();
					   q.setTA (pt, theta);
					   return q;
				       }, "org.jmol.util.Tuple3f,~N");
	c$.newM = Clazz.defineMethod (c$, "newM", 
				      function (mat) {
					  var q =  new org.jmol.util.Quaternion ();
					  q.setM (mat);
					  return q;
				      }, "org.jmol.util.Matrix3f");
	c$.newAA = Clazz.defineMethod (c$, "newAA", 
				       function (a) {
					   var q =  new org.jmol.util.Quaternion ();
					   q.setAA (a);
					   return q;
				       }, "org.jmol.util.AxisAngle4f");
	c$.newP4 = Clazz.defineMethod (c$, "newP4", 
				       function (pt) {
					   var q =  new org.jmol.util.Quaternion ();
					   q.setP4 (pt);
					   return q;
				       }, "org.jmol.util.Point4f");
	c$.new4 = Clazz.defineMethod (c$, "new4", 
				      function (q0, q1, q2, q3) {
					  var q =  new org.jmol.util.Quaternion ();
					  if (q0 < -1) {
					      q.q0 = -1;
					      return q;
					  }if (q0 > 1) {
					      q.q0 = 1;
					      return q;
					  }q.q0 = q0;
					  q.q1 = q1;
					  q.q2 = q2;
					  q.q3 = q3;
					  return q;
				      }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "set", 
			    function (q) {
				this.q0 = q.q0;
				this.q1 = q.q1;
				this.q2 = q.q2;
				this.q3 = q.q3;
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "setP4", 
			    ($fz = function (pt) {
				var factor = (pt == null ? 0 : pt.distance (org.jmol.util.Quaternion.qZero));
				if (factor == 0) {
				    this.q0 = 1;
				    return;
				}this.q0 = pt.w / factor;
				this.q1 = pt.x / factor;
				this.q2 = pt.y / factor;
				this.q3 = pt.z / factor;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point4f");
	Clazz.defineMethod (c$, "setTA", 
			    function (pt, theta) {
				if (pt.x == 0 && pt.y == 0 && pt.z == 0) {
				    this.q0 = 1;
				    return;
				}var fact = (Math.sin (theta / 2 * 3.141592653589793 / 180) / Math.sqrt (pt.x * pt.x + pt.y * pt.y + pt.z * pt.z));
				this.q0 = (Math.cos (theta / 2 * 3.141592653589793 / 180));
				this.q1 = (pt.x * fact);
				this.q2 = (pt.y * fact);
				this.q3 = (pt.z * fact);
			    }, "org.jmol.util.Tuple3f,~N");
	Clazz.defineMethod (c$, "setAA", 
			    function (a) {
				var aa = org.jmol.util.AxisAngle4f.newAA (a);
				if (aa.angle == 0) aa.y = 1;
				var m3 =  new org.jmol.util.Matrix3f ();
				m3.setAA (aa);
				this.setM (m3);
			    }, "org.jmol.util.AxisAngle4f");
	Clazz.defineMethod (c$, "setM", 
			    function (mat) {
				this.mat = mat;
				var trace = mat.m00 + mat.m11 + mat.m22;
				var temp;
				var w;
				var x;
				var y;
				var z;
				if (trace >= 0.5) {
				    w = Math.sqrt (1.0 + trace);
				    x = (mat.m21 - mat.m12) / w;
				    y = (mat.m02 - mat.m20) / w;
				    z = (mat.m10 - mat.m01) / w;
				} else if ((temp = mat.m00 + mat.m00 - trace) >= 0.5) {
				    x = Math.sqrt (1.0 + temp);
				    w = (mat.m21 - mat.m12) / x;
				    y = (mat.m10 + mat.m01) / x;
				    z = (mat.m20 + mat.m02) / x;
				} else if ((temp = mat.m11 + mat.m11 - trace) >= 0.5 || mat.m11 > mat.m22) {
				    y = Math.sqrt (1.0 + temp);
				    w = (mat.m02 - mat.m20) / y;
				    x = (mat.m10 + mat.m01) / y;
				    z = (mat.m21 + mat.m12) / y;
				} else {
				    z = Math.sqrt (1.0 + mat.m22 + mat.m22 - trace);
				    w = (mat.m10 - mat.m01) / z;
				    x = (mat.m20 + mat.m02) / z;
				    y = (mat.m21 + mat.m12) / z;
				}this.q0 = (w * 0.5);
				this.q1 = (x * 0.5);
				this.q2 = (y * 0.5);
				this.q3 = (z * 0.5);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setRef", 
			    function (qref) {
				if (qref == null) {
				    this.mul (this.getFixFactor ());
				    return;
				}if (this.dot (qref) >= 0) return;
				this.q0 *= -1;
				this.q1 *= -1;
				this.q2 *= -1;
				this.q3 *= -1;
			    }, "org.jmol.util.Quaternion");
	c$.getQuaternionFrame = Clazz.defineMethod (c$, "getQuaternionFrame", 
						    function (center, x, xy) {
							var vA = org.jmol.util.Vector3f.newV (x);
							vA.sub (center);
							var vB = org.jmol.util.Vector3f.newV (xy);
							vB.sub (center);
							return org.jmol.util.Quaternion.getQuaternionFrameV (vA, vB, null, false);
						    }, "org.jmol.util.Point3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f");
	c$.getQuaternionFrameV = Clazz.defineMethod (c$, "getQuaternionFrameV", 
						     function (vA, vB, vC, yBased) {
							 if (vC == null) {
							     vC =  new org.jmol.util.Vector3f ();
							     vC.cross (vA, vB);
							     if (yBased) vA.cross (vB, vC);
							 }var vBprime =  new org.jmol.util.Vector3f ();
							 vBprime.cross (vC, vA);
							 vA.normalize ();
							 vBprime.normalize ();
							 vC.normalize ();
							 var mat =  new org.jmol.util.Matrix3f ();
							 mat.setColumnV (0, vA);
							 mat.setColumnV (1, vBprime);
							 mat.setColumnV (2, vC);
							 var q = org.jmol.util.Quaternion.newM (mat);
							 return q;
						     }, "org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~B");
	Clazz.defineMethod (c$, "getMatrix", 
			    function () {
				if (this.mat == null) this.setMatrix ();
				return this.mat;
			    });
	Clazz.defineMethod (c$, "setMatrix", 
			    ($fz = function () {
				this.mat =  new org.jmol.util.Matrix3f ();
				this.mat.m00 = this.q0 * this.q0 + this.q1 * this.q1 - this.q2 * this.q2 - this.q3 * this.q3;
				this.mat.m01 = 2 * this.q1 * this.q2 - 2 * this.q0 * this.q3;
				this.mat.m02 = 2 * this.q1 * this.q3 + 2 * this.q0 * this.q2;
				this.mat.m10 = 2 * this.q1 * this.q2 + 2 * this.q0 * this.q3;
				this.mat.m11 = this.q0 * this.q0 - this.q1 * this.q1 + this.q2 * this.q2 - this.q3 * this.q3;
				this.mat.m12 = 2 * this.q2 * this.q3 - 2 * this.q0 * this.q1;
				this.mat.m20 = 2 * this.q1 * this.q3 - 2 * this.q0 * this.q2;
				this.mat.m21 = 2 * this.q2 * this.q3 + 2 * this.q0 * this.q1;
				this.mat.m22 = this.q0 * this.q0 - this.q1 * this.q1 - this.q2 * this.q2 + this.q3 * this.q3;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "add", 
			    function (x) {
				return org.jmol.util.Quaternion.newVA (this.getNormal (), this.getTheta () + x);
			    }, "~N");
	Clazz.defineMethod (c$, "mul", 
			    function (x) {
				return (x == 1 ? org.jmol.util.Quaternion.new4 (this.q0, this.q1, this.q2, this.q3) : org.jmol.util.Quaternion.newVA (this.getNormal (), this.getTheta () * x));
			    }, "~N");
	Clazz.defineMethod (c$, "mulQ", 
			    function (p) {
				return org.jmol.util.Quaternion.new4 (this.q0 * p.q0 - this.q1 * p.q1 - this.q2 * p.q2 - this.q3 * p.q3, this.q0 * p.q1 + this.q1 * p.q0 + this.q2 * p.q3 - this.q3 * p.q2, this.q0 * p.q2 + this.q2 * p.q0 + this.q3 * p.q1 - this.q1 * p.q3, this.q0 * p.q3 + this.q3 * p.q0 + this.q1 * p.q2 - this.q2 * p.q1);
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "div", 
			    function (p) {
				return this.mulQ (p.inv ());
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "divLeft", 
			    function (p) {
				return this.inv ().mulQ (p);
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "dot", 
			    function (q) {
				return this.q0 * q.q0 + this.q1 * q.q1 + this.q2 * q.q2 + this.q3 * q.q3;
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "inv", 
			    function () {
				return org.jmol.util.Quaternion.new4 (this.q0, -this.q1, -this.q2, -this.q3);
			    });
	Clazz.defineMethod (c$, "negate", 
			    function () {
				return org.jmol.util.Quaternion.new4 (-this.q0, -this.q1, -this.q2, -this.q3);
			    });
	Clazz.defineMethod (c$, "getFixFactor", 
			    ($fz = function () {
				return (this.q0 < 0 || this.q0 == 0 && (this.q1 < 0 || this.q1 == 0 && (this.q2 < 0 || this.q2 == 0 && this.q3 < 0)) ? -1 : 1);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getVector", 
			    function (i) {
				return this.getVectorS (i, 1);
			    }, "~N");
	Clazz.defineMethod (c$, "getVectorS", 
			    ($fz = function (i, scale) {
				if (i == -1) {
				    scale *= this.getFixFactor ();
				    return org.jmol.util.Vector3f.new3 (this.q1 * scale, this.q2 * scale, this.q3 * scale);
				}if (this.mat == null) this.setMatrix ();
				var v =  new org.jmol.util.Vector3f ();
				this.mat.getColumnV (i, v);
				if (scale != 1) v.scale (scale);
				return v;
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "getNormal", 
			    function () {
				var v = org.jmol.util.Quaternion.getRawNormal (this);
				v.scale (this.getFixFactor ());
				return v;
			    });
	c$.getRawNormal = Clazz.defineMethod (c$, "getRawNormal", 
					      ($fz = function (q) {
						  var v = org.jmol.util.Vector3f.new3 (q.q1, q.q2, q.q3);
						  if (v.length () == 0) return org.jmol.util.Vector3f.new3 (0, 0, 1);
						  v.normalize ();
						  return v;
					      }, $fz.isPrivate = true, $fz), "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "getTheta", 
			    function () {
				return (Math.acos (Math.abs (this.q0)) * 2 * 180 / 3.141592653589793);
			    });
	Clazz.defineMethod (c$, "getThetaRadians", 
			    function () {
				return (Math.acos (Math.abs (this.q0)) * 2);
			    });
	Clazz.defineMethod (c$, "getNormalDirected", 
			    function (v0) {
				var v = this.getNormal ();
				if (v.x * v0.x + v.y * v0.y + v.z * v0.z < 0) {
				    v.scale (-1);
				}return v;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "get3dProjection", 
			    function (v3d) {
				v3d.set (this.q1, this.q2, this.q3);
				return v3d;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "getThetaDirected", 
			    function (axisAngle) {
				var theta = this.getTheta ();
				var v = this.getNormal ();
				if (axisAngle.x * this.q1 + axisAngle.y * this.q2 + axisAngle.z * this.q3 < 0) {
				    v.scale (-1);
				    theta = -theta;
				}axisAngle.set (v.x, v.y, v.z, theta);
				return axisAngle;
			    }, "org.jmol.util.Point4f");
	Clazz.defineMethod (c$, "getThetaDirectedV", 
			    function (vector) {
				var theta = this.getTheta ();
				var v = this.getNormal ();
				if (vector.x * this.q1 + vector.y * this.q2 + vector.z * this.q3 < 0) {
				    v.scale (-1);
				    theta = -theta;
				}return theta;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "toPoint4f", 
			    function () {
				return org.jmol.util.Point4f.new4 (this.q1, this.q2, this.q3, this.q0);
			    });
	Clazz.defineMethod (c$, "toAxisAngle4f", 
			    function () {
				var theta = 2 * Math.acos (Math.abs (this.q0));
				var sinTheta2 = Math.sin (theta / 2);
				var v = this.getNormal ();
				if (sinTheta2 < 0) {
				    v.scale (-1);
				    theta = 3.141592653589793 - theta;
				}return org.jmol.util.AxisAngle4f.newVA (v, theta);
			    });
	Clazz.defineMethod (c$, "transformPt", 
			    function (pt) {
				if (this.mat == null) this.setMatrix ();
				var ptNew = org.jmol.util.Point3f.newP (pt);
				this.mat.transform (ptNew);
				return ptNew;
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformP2", 
			    function (pt, ptNew) {
				if (this.mat == null) this.setMatrix ();
				this.mat.transform2 (pt, ptNew);
			    }, "org.jmol.util.Tuple3f,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "transform", 
			    function (v) {
				if (this.mat == null) this.setMatrix ();
				var vNew = org.jmol.util.Vector3f.newV (v);
				this.mat.transform (vNew);
				return vNew;
			    }, "org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "leftDifference", 
			    function (q2) {
				var q2adjusted = (this.dot (q2) < 0 ? q2.negate () : q2);
				return this.inv ().mulQ (q2adjusted);
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "rightDifference", 
			    function (q2) {
				var q2adjusted = (this.dot (q2) < 0 ? q2.negate () : q2);
				return this.mulQ (q2adjusted.inv ());
			    }, "org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "getInfo", 
			    function () {
				var axis = this.toAxisAngle4f ();
				return org.jmol.util.TextFormat.sprintf ("%10.6f%10.6f%10.6f%10.6f  %6.2f  %10.5f %10.5f %10.5f", "F", [[this.q0, this.q1, this.q2, this.q3, (axis.angle * 180 / 3.141592653589793), axis.x, axis.y, axis.z]]);
			    });
	Clazz.defineMethod (c$, "draw", 
			    function (prefix, id, ptCenter, scale) {
				var strV = " VECTOR " + org.jmol.util.Escape.escapePt (ptCenter) + " ";
				if (scale == 0) scale = 1;
				return "draw " + prefix + "x" + id + strV + org.jmol.util.Escape.escapePt (this.getVectorS (0, scale)) + " color red\n" + "draw " + prefix + "y" + id + strV + org.jmol.util.Escape.escapePt (this.getVectorS (1, scale)) + " color green\n" + "draw " + prefix + "z" + id + strV + org.jmol.util.Escape.escapePt (this.getVectorS (2, scale)) + " color blue\n";
			    }, "~S,~S,org.jmol.util.Point3f,~N");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "{" + this.q1 + " " + this.q2 + " " + this.q3 + " " + this.q0 + "}";
			      });
	c$.div = Clazz.defineMethod (c$, "div", 
				     function (data1, data2, nMax, isRelative) {
					 var n;
					 if (data1 == null || data2 == null || (n = Math.min (data1.length, data2.length)) == 0) return null;
					 if (nMax > 0 && n > nMax) n = nMax;
					 var dqs =  new Array (n);
					 for (var i = 0; i < n; i++) {
					     if (data1[i] == null || data2[i] == null) return null;
					     dqs[i] = (isRelative ? data1[i].divLeft (data2[i]) : data1[i].div (data2[i]));
					 }
					 return dqs;
				     }, "~A,~A,~N,~B");
	c$.sphereMean = Clazz.defineMethod (c$, "sphereMean", 
					    function (data, retStddev, criterion) {
						if (data == null || data.length == 0) return  new org.jmol.util.Quaternion ();
						if (retStddev == null) retStddev =  Clazz.newFloatArray (1, 0);
						if (data.length == 1) {
						    retStddev[0] = 0;
						    return org.jmol.util.Quaternion.newQ (data[0]);
						}var diff = 3.4028235E38;
						var lastStddev = 3.4028235E38;
						var qMean = org.jmol.util.Quaternion.simpleAverage (data);
						var maxIter = 100;
						var iter = 0;
						while (diff > criterion && lastStddev != 0 && iter < maxIter) {
						    qMean = org.jmol.util.Quaternion.newMean (data, qMean);
						    retStddev[0] = org.jmol.util.Quaternion.stdDev (data, qMean);
						    diff = Math.abs (retStddev[0] - lastStddev);
						    lastStddev = retStddev[0];
						    org.jmol.util.Logger.info (++iter + " sphereMean " + qMean + " stddev=" + lastStddev + " diff=" + diff);
						}
						return qMean;
					    }, "~A,~A,~N");
	c$.simpleAverage = Clazz.defineMethod (c$, "simpleAverage", 
					       ($fz = function (ndata) {
						   var mean = org.jmol.util.Vector3f.new3 (0, 0, 1);
						   var v = ndata[0].getNormal ();
						   mean.add (v);
						   for (var i = ndata.length; --i >= 0; ) mean.add (ndata[i].getNormalDirected (mean));

						   mean.sub (v);
						   mean.normalize ();
						   var f = 0;
						   for (var i = ndata.length; --i >= 0; ) f += Math.abs (ndata[i].get3dProjection (v).dot (mean));

						   if (f != 0) mean.scale (f / ndata.length);
						   f = Math.sqrt (1 - mean.lengthSquared ());
						   if (Float.isNaN (f)) f = 0;
						   return org.jmol.util.Quaternion.newP4 (org.jmol.util.Point4f.new4 (mean.x, mean.y, mean.z, f));
					       }, $fz.isPrivate = true, $fz), "~A");
	c$.newMean = Clazz.defineMethod (c$, "newMean", 
					 ($fz = function (data, mean) {
					     var sum =  new org.jmol.util.Vector3f ();
					     var v;
					     var q;
					     var dq;
					     for (var i = data.length; --i >= 0; ) {
						 q = data[i];
						 dq = q.div (mean);
						 v = dq.getNormal ();
						 v.scale (dq.getTheta ());
						 sum.add (v);
					     }
					     sum.scale (1 / data.length);
					     var dqMean = org.jmol.util.Quaternion.newVA (sum, sum.length ());
					     return dqMean.mulQ (mean);
					 }, $fz.isPrivate = true, $fz), "~A,org.jmol.util.Quaternion");
	c$.stdDev = Clazz.defineMethod (c$, "stdDev", 
					($fz = function (data, mean) {
					    var sum = 0;
					    var sum2 = 0;
					    var n = data.length;
					    for (var i = n; --i >= 0; ) {
						var dq = data[i].div (mean);
						var theta = dq.getTheta ();
						sum += theta;
						sum2 += theta * theta;
					    }
					    sum2 = sum2 - sum * sum / n;
					    if (sum2 < 0) sum2 = 0;
					    return Math.sqrt (sum2 / (n - 1));
					}, $fz.isPrivate = true, $fz), "~A,org.jmol.util.Quaternion");
	c$.qZero = c$.prototype.qZero =  new org.jmol.util.Point4f ();
    });
    // 
    //// org\jmol\constant\EnumPalette.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumPalette", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$$name = null;
	    this.id = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumPalette", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (name, id) {
				   this.$$name = name;
				   this.id = id;
			       }, $fz.isPrivate = true, $fz), "~S,~N");
	c$.pidOf = Clazz.defineMethod (c$, "pidOf", 
				       function (value) {
					   return (Clazz.instanceOf (value, org.jmol.constant.EnumPalette) ? (value).id : Clazz.instanceOf (value, Byte) ? (value).byteValue () : org.jmol.constant.EnumPalette.UNKNOWN.id);
				       }, "~O");
	c$.isPaletteVariable = Clazz.defineMethod (c$, "isPaletteVariable", 
						   function (pid) {
						       return ((pid & 64) != 0);
						   }, "~N");
	c$.getPalette = Clazz.defineMethod (c$, "getPalette", 
					    function (paletteName) {
						if (paletteName.indexOf ('_') < 0) for (var item, $item = 0, $$item = org.jmol.constant.EnumPalette.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (paletteName.equalsIgnoreCase (item.$$name)) return item;

						return (paletteName.indexOf ("property_") == 0 ? org.jmol.constant.EnumPalette.PROPERTY : org.jmol.constant.EnumPalette.UNKNOWN);
					    }, "~S");
	c$.getPaletteID = Clazz.defineMethod (c$, "getPaletteID", 
					      function (paletteName) {
						  if (paletteName.indexOf ('_') < 0) for (var item, $item = 0, $$item = org.jmol.constant.EnumPalette.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (paletteName.equalsIgnoreCase (item.$$name)) return item.id;

						  return (paletteName.indexOf ("property_") == 0 ? org.jmol.constant.EnumPalette.PROPERTY.id : org.jmol.constant.EnumPalette.UNKNOWN.id);
					      }, "~S");
	c$.getPaletteName = Clazz.defineMethod (c$, "getPaletteName", 
						function (pid) {
						    for (var item, $item = 0, $$item = org.jmol.constant.EnumPalette.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.id == pid) return item.$$name;

						    return null;
						}, "~N");
	c$.argbsCpkRasmol = [16716947, 33554431, 50315467, 62005794, 83951360, 113821896, 126849023, 149946368, 165324064, 184549631, 203590434, 226525328, 249210144, 268412160, 285198386, 285277952, 343965840, 377520272, 411074704, 427851920, 452961536, 480586282, 497363498, 514140714, 598026794, 796950672, 899686640, 956278016, 1339729184];
	c$.argbsCpk = [0xFFFF1493, 0xFFFFFFFF, 0xFFD9FFFF, 0xFFCC80FF, 0xFFC2FF00, 0xFFFFB5B5, 0xFF909090, 0xFF3050F8, 0xFFFF0D0D, 0xFF90E050, 0xFFB3E3F5, 0xFFAB5CF2, 0xFF8AFF00, 0xFFBFA6A6, 0xFFF0C8A0, 0xFFFF8000, 0xFFFFFF30, 0xFF1FF01F, 0xFF80D1E3, 0xFF8F40D4, 0xFF3DFF00, 0xFFE6E6E6, 0xFFBFC2C7, 0xFFA6A6AB, 0xFF8A99C7, 0xFF9C7AC7, 0xFFE06633, 0xFFF090A0, 0xFF50D050, 0xFFC88033, 0xFF7D80B0, 0xFFC28F8F, 0xFF668F8F, 0xFFBD80E3, 0xFFFFA100, 0xFFA62929, 0xFF5CB8D1, 0xFF702EB0, 0xFF00FF00, 0xFF94FFFF, 0xFF94E0E0, 0xFF73C2C9, 0xFF54B5B5, 0xFF3B9E9E, 0xFF248F8F, 0xFF0A7D8C, 0xFF006985, 0xFFC0C0C0, 0xFFFFD98F, 0xFFA67573, 0xFF668080, 0xFF9E63B5, 0xFFD47A00, 0xFF940094, 0xFF429EB0, 0xFF57178F, 0xFF00C900, 0xFF70D4FF, 0xFFFFFFC7, 0xFFD9FFC7, 0xFFC7FFC7, 0xFFA3FFC7, 0xFF8FFFC7, 0xFF61FFC7, 0xFF45FFC7, 0xFF30FFC7, 0xFF1FFFC7, 0xFF00FF9C, 0xFF00E675, 0xFF00D452, 0xFF00BF38, 0xFF00AB24, 0xFF4DC2FF, 0xFF4DA6FF, 0xFF2194D6, 0xFF267DAB, 0xFF266696, 0xFF175487, 0xFFD0D0E0, 0xFFFFD123, 0xFFB8B8D0, 0xFFA6544D, 0xFF575961, 0xFF9E4FB5, 0xFFAB5C00, 0xFF754F45, 0xFF428296, 0xFF420066, 0xFF007D00, 0xFF70ABFA, 0xFF00BAFF, 0xFF00A1FF, 0xFF008FFF, 0xFF0080FF, 0xFF006BFF, 0xFF545CF2, 0xFF785CE3, 0xFF8A4FE3, 0xFFA136D4, 0xFFB31FD4, 0xFFB31FBA, 0xFFB30DA6, 0xFFBD0D87, 0xFFC70066, 0xFFCC0059, 0xFFD1004F, 0xFFD90045, 0xFFE00038, 0xFFE6002E, 0xFFEB0026];
	Clazz.defineEnumConstant (c$, "UNKNOWN", 0, [null, 0xFF]);
	Clazz.defineEnumConstant (c$, "NONE", 1, ["none", 0]);
	Clazz.defineEnumConstant (c$, "CPK", 2, ["cpk", 1]);
	Clazz.defineEnumConstant (c$, "PARTIAL_CHARGE", 3, ["partialcharge", 2]);
	Clazz.defineEnumConstant (c$, "FORMAL_CHARGE", 4, ["formalcharge", 3]);
	Clazz.defineEnumConstant (c$, "TEMP", 5, ["temperature", 68]);
	Clazz.defineEnumConstant (c$, "FIXEDTEMP", 6, ["fixedtemperature", 5]);
	Clazz.defineEnumConstant (c$, "SURFACE", 7, ["surfacedistance", 70]);
	Clazz.defineEnumConstant (c$, "STRUCTURE", 8, ["structure", 7]);
	Clazz.defineEnumConstant (c$, "AMINO", 9, ["amino", 8]);
	Clazz.defineEnumConstant (c$, "SHAPELY", 10, ["shapely", 9]);
	Clazz.defineEnumConstant (c$, "CHAIN", 11, ["chain", 10]);
	Clazz.defineEnumConstant (c$, "GROUP", 12, ["group", 75]);
	Clazz.defineEnumConstant (c$, "MONOMER", 13, ["monomer", 76]);
	Clazz.defineEnumConstant (c$, "MOLECULE", 14, ["molecule", 77]);
	Clazz.defineEnumConstant (c$, "ALTLOC", 15, ["altloc", 14]);
	Clazz.defineEnumConstant (c$, "INSERTION", 16, ["insertion", 15]);
	Clazz.defineEnumConstant (c$, "JMOL", 17, ["jmol", 16]);
	Clazz.defineEnumConstant (c$, "RASMOL", 18, ["rasmol", 17]);
	Clazz.defineEnumConstant (c$, "TYPE", 19, ["type", 18]);
	Clazz.defineEnumConstant (c$, "ENERGY", 20, ["energy", 19]);
	Clazz.defineEnumConstant (c$, "PROPERTY", 21, ["property", 84]);
	Clazz.defineEnumConstant (c$, "VARIABLE", 22, ["variable", 85]);
	Clazz.defineEnumConstant (c$, "STRAIGHTNESS", 23, ["straightness", 86]);
	Clazz.defineEnumConstant (c$, "POLYMER", 24, ["polymer", 87]);
    });
    // 
    //// org\jmol\util\ColorUtil.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["java.util.Hashtable"], "org.jmol.util.ColorUtil", ["org.jmol.util.Parser", "$.Point3f", "$.TextFormat"], function () {
	c$ = Clazz.declareType (org.jmol.util, "ColorUtil");
	c$.getArgbFromString = Clazz.defineMethod (c$, "getArgbFromString", 
						   function (strColor) {
						       var len = 0;
						       if (strColor == null || (len = strColor.length) == 0) return 0;
						       var red;
						       var grn;
						       var blu;
						       if (strColor.charAt (0) == '[' && strColor.charAt (len - 1) == ']') {
							   var check;
							   if (strColor.indexOf (",") >= 0) {
							       var tokens = org.jmol.util.TextFormat.splitChars (strColor.substring (1, strColor.length - 1), ",");
							       if (tokens.length != 3) return 0;
							       red = org.jmol.util.Parser.parseFloatStr (tokens[0]);
							       grn = org.jmol.util.Parser.parseFloatStr (tokens[1]);
							       blu = org.jmol.util.Parser.parseFloatStr (tokens[2]);
							       return org.jmol.util.ColorUtil.colorTriadToInt (red, grn, blu);
							   }switch (len) {
							   case 9:
							       check = "x";
							       break;
							   case 10:
							       check = "0x";
							       break;
							   default:
							       return 0;
							   }
							   if (strColor.indexOf (check) != 1) return 0;
							   strColor = "#" + strColor.substring (len - 7, len - 1);
							   len = 7;
						       }if (len == 7 && strColor.charAt (0) == '#') {
							   try {
							       red = org.jmol.util.Parser.parseIntRadix (strColor.substring (1, 3), 16);
							       grn = org.jmol.util.Parser.parseIntRadix (strColor.substring (3, 5), 16);
							       blu = org.jmol.util.Parser.parseIntRadix (strColor.substring (5, 7), 16);
							       return org.jmol.util.ColorUtil.colorTriadToInt (red, grn, blu);
							   } catch (e) {
							       if (Clazz.exceptionOf (e, NumberFormatException)) {
								   return 0;
							       } else {
								   throw e;
							       }
							   }
						       }var boxedArgb = org.jmol.util.ColorUtil.mapJavaScriptColors.get (strColor.toLowerCase ());
						       return (boxedArgb == null ? 0 : boxedArgb.intValue ());
						   }, "~S");
	c$.colorTriadToInt = Clazz.defineMethod (c$, "colorTriadToInt", 
						 function (x, y, z) {
						     if (x <= 1 && y <= 1 && z <= 1) {
							 if (x > 0) x = x * 256 - 1;
							 if (y > 0) y = y * 256 - 1;
							 if (z > 0) z = z * 256 - 1;
						     }return org.jmol.util.ColorUtil.rgb (Clazz.floatToInt (x), Clazz.floatToInt (y), Clazz.floatToInt (z));
						 }, "~N,~N,~N");
	c$.rgb = Clazz.defineMethod (c$, "rgb", 
				     function (red, grn, blu) {
					 return 0xFF000000 | (red << 16) | (grn << 8) | blu;
				     }, "~N,~N,~N");
	c$.colorPointFromString = Clazz.defineMethod (c$, "colorPointFromString", 
						      function (colorName, pt) {
							  return org.jmol.util.ColorUtil.colorPointFromInt (org.jmol.util.ColorUtil.getArgbFromString (colorName), pt);
						      }, "~S,org.jmol.util.Point3f");
	c$.colorPointFromInt2 = Clazz.defineMethod (c$, "colorPointFromInt2", 
						    function (color) {
							return org.jmol.util.Point3f.new3 ((color >> 16) & 0xFF, (color >> 8) & 0xFF, color & 0xFF);
						    }, "~N");
	c$.colorPtToInt = Clazz.defineMethod (c$, "colorPtToInt", 
					      function (pt) {
						  return org.jmol.util.ColorUtil.colorTriadToInt (pt.x, pt.y, pt.z);
					      }, "org.jmol.util.Point3f");
	c$.colorPointFromInt = Clazz.defineMethod (c$, "colorPointFromInt", 
						   function (color, pt) {
						       pt.z = color & 0xFF;
						       pt.y = (color >> 8) & 0xFF;
						       pt.x = (color >> 16) & 0xFF;
						       return pt;
						   }, "~N,org.jmol.util.Point3f");
	c$.calcGreyscaleRgbFromRgb = Clazz.defineMethod (c$, "calcGreyscaleRgbFromRgb", 
							 function (rgb) {
							     var grey = (Clazz.doubleToInt (((2989 * ((rgb >> 16) & 0xFF)) + (5870 * ((rgb >> 8) & 0xFF)) + (1140 * (rgb & 0xFF)) + 5000) / 10000)) & 0xFFFFFF;
							     return org.jmol.util.ColorUtil.rgb (grey, grey, grey);
							 }, "~N");
	Clazz.defineStatics (c$,
			     "colorNames", ["black", "pewhite", "pecyan", "pepurple", "pegreen", "peblue", "peviolet", "pebrown", "pepink", "peyellow", "pedarkgreen", "peorange", "pelightblue", "pedarkcyan", "pedarkgray", "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgreen", "lightgrey", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen", "bluetint", "greenblue", "greentint", "grey", "pinktint", "redorange", "yellowtint"],
			     "colorArgbs", [0xFF000000, 0xFFffffff, 0xFF00ffff, 0xFFd020ff, 0xFF00ff00, 0xFF6060ff, 0xFFff80c0, 0xFFa42028, 0xFFffd8d8, 0xFFffff00, 0xFF00c000, 0xFFffb000, 0xFFb0b0ff, 0xFF00a0a0, 0xFF606060, 0xFFF0F8FF, 0xFFFAEBD7, 0xFF00FFFF, 0xFF7FFFD4, 0xFFF0FFFF, 0xFFF5F5DC, 0xFFFFE4C4, 0xFFFFEBCD, 0xFF0000FF, 0xFF8A2BE2, 0xFFA52A2A, 0xFFDEB887, 0xFF5F9EA0, 0xFF7FFF00, 0xFFD2691E, 0xFFFF7F50, 0xFF6495ED, 0xFFFFF8DC, 0xFFDC143C, 0xFF00FFFF, 0xFF00008B, 0xFF008B8B, 0xFFB8860B, 0xFFA9A9A9, 0xFF006400, 0xFFBDB76B, 0xFF8B008B, 0xFF556B2F, 0xFFFF8C00, 0xFF9932CC, 0xFF8B0000, 0xFFE9967A, 0xFF8FBC8F, 0xFF483D8B, 0xFF2F4F4F, 0xFF00CED1, 0xFF9400D3, 0xFFFF1493, 0xFF00BFFF, 0xFF696969, 0xFF1E90FF, 0xFFB22222, 0xFFFFFAF0, 0xFF228B22, 0xFFFF00FF, 0xFFDCDCDC, 0xFFF8F8FF, 0xFFFFD700, 0xFFDAA520, 0xFF808080, 0xFF008000, 0xFFADFF2F, 0xFFF0FFF0, 0xFFFF69B4, 0xFFCD5C5C, 0xFF4B0082, 0xFFFFFFF0, 0xFFF0E68C, 0xFFE6E6FA, 0xFFFFF0F5, 0xFF7CFC00, 0xFFFFFACD, 0xFFADD8E6, 0xFFF08080, 0xFFE0FFFF, 0xFFFAFAD2, 0xFF90EE90, 0xFFD3D3D3, 0xFFFFB6C1, 0xFFFFA07A, 0xFF20B2AA, 0xFF87CEFA, 0xFF778899, 0xFFB0C4DE, 0xFFFFFFE0, 0xFF00FF00, 0xFF32CD32, 0xFFFAF0E6, 0xFFFF00FF, 0xFF800000, 0xFF66CDAA, 0xFF0000CD, 0xFFBA55D3, 0xFF9370DB, 0xFF3CB371, 0xFF7B68EE, 0xFF00FA9A, 0xFF48D1CC, 0xFFC71585, 0xFF191970, 0xFFF5FFFA, 0xFFFFE4E1, 0xFFFFE4B5, 0xFFFFDEAD, 0xFF000080, 0xFFFDF5E6, 0xFF808000, 0xFF6B8E23, 0xFFFFA500, 0xFFFF4500, 0xFFDA70D6, 0xFFEEE8AA, 0xFF98FB98, 0xFFAFEEEE, 0xFFDB7093, 0xFFFFEFD5, 0xFFFFDAB9, 0xFFCD853F, 0xFFFFC0CB, 0xFFDDA0DD, 0xFFB0E0E6, 0xFF800080, 0xFFFF0000, 0xFFBC8F8F, 0xFF4169E1, 0xFF8B4513, 0xFFFA8072, 0xFFF4A460, 0xFF2E8B57, 0xFFFFF5EE, 0xFFA0522D, 0xFFC0C0C0, 0xFF87CEEB, 0xFF6A5ACD, 0xFF708090, 0xFFFFFAFA, 0xFF00FF7F, 0xFF4682B4, 0xFFD2B48C, 0xFF008080, 0xFFD8BFD8, 0xFFFF6347, 0xFF40E0D0, 0xFFEE82EE, 0xFFF5DEB3, 0xFFFFFFFF, 0xFFF5F5F5, 0xFFFFFF00, 0xFF9ACD32, 0xFFAFD7FF, 0xFF2E8B57, 0xFF98FFB3, 0xFF808080, 0xFFFFABBB, 0xFFFF4500, 0xFFF6F675]);
	c$.mapJavaScriptColors = c$.prototype.mapJavaScriptColors =  new java.util.Hashtable ();
	{
	    for (var i = org.jmol.util.ColorUtil.colorNames.length; --i >= 0; ) org.jmol.util.ColorUtil.mapJavaScriptColors.put (org.jmol.util.ColorUtil.colorNames[i], Integer.$valueOf (org.jmol.util.ColorUtil.colorArgbs[i]));

	}});
    // 
    //// org\jmol\util\Shader.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.ArrayUtil"], "org.jmol.util.Shader", ["org.jmol.util.ColorUtil"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Shader");
	c$.getShades = Clazz.defineMethod (c$, "getShades", 
					   function (rgb, greyScale) {
					       var shades =  Clazz.newIntArray (64, 0);
					       if (rgb == 0) return shades;
					       var red0 = ((rgb >> 16) & 0xFF);
					       var grn0 = ((rgb >> 8) & 0xFF);
					       var blu0 = (rgb & 0xFF);
					       var red = 0;
					       var grn = 0;
					       var blu = 0;
					       var f = org.jmol.util.Shader.ambientFraction;
					       while (true) {
						   red = red0 * f + 0.5;
						   grn = grn0 * f + 0.5;
						   blu = blu0 * f + 0.5;
						   if (f > 0 && red < 4 && grn < 4 && blu < 4) {
						       red0++;
						       grn0++;
						       blu0++;
						       if (f < 0.1) f += 0.1;
						       rgb = org.jmol.util.ColorUtil.rgb (Clazz.doubleToInt (Math.floor (red0)), Clazz.doubleToInt (Math.floor (grn0)), Clazz.doubleToInt (Math.floor (blu0)));
						       continue;
						   }break;
					       }
					       f = (1 - f) / 52;
					       var redStep = red0 * f;
					       var grnStep = grn0 * f;
					       var bluStep = blu0 * f;
					       var i;
					       for (i = 0; i < 52; ++i) {
						   shades[i] = org.jmol.util.ColorUtil.rgb (Clazz.doubleToInt (Math.floor (red)), Clazz.doubleToInt (Math.floor (grn)), Clazz.doubleToInt (Math.floor (blu)));
						   red += redStep;
						   grn += grnStep;
						   blu += bluStep;
					       }
					       shades[i++] = rgb;
					       f = org.jmol.util.Shader.intenseFraction / (64 - i);
					       redStep = (255.5 - red) * f;
					       grnStep = (255.5 - grn) * f;
					       bluStep = (255.5 - blu) * f;
					       for (; i < 64; i++) {
						   red += redStep;
						   grn += grnStep;
						   blu += bluStep;
						   shades[i] = org.jmol.util.ColorUtil.rgb (Clazz.doubleToInt (Math.floor (red)), Clazz.doubleToInt (Math.floor (grn)), Clazz.doubleToInt (Math.floor (blu)));
					       }
					       if (greyScale) for (; --i >= 0; ) shades[i] = org.jmol.util.ColorUtil.calcGreyscaleRgbFromRgb (shades[i]);

					       return shades;
					   }, "~N,~B");
	c$.getShadeIndex = Clazz.defineMethod (c$, "getShadeIndex", 
					       function (x, y, z) {
						   var magnitude = Math.sqrt (x * x + y * y + z * z);
						   return Math.round (org.jmol.util.Shader.getFloatShadeIndexNormalized ((x / magnitude), (y / magnitude), (z / magnitude)) * 63);
					       }, "~N,~N,~N");
	c$.getShadeIndexNormalized = Clazz.defineMethod (c$, "getShadeIndexNormalized", 
							 function (x, y, z) {
							     return Math.round (org.jmol.util.Shader.getFloatShadeIndexNormalized (x, y, z) * 63);
							 }, "~N,~N,~N");
	c$.getFp8ShadeIndex = Clazz.defineMethod (c$, "getFp8ShadeIndex", 
						  function (x, y, z) {
						      var magnitude = Math.sqrt (x * x + y * y + z * z);
						      return Clazz.doubleToInt (Math.floor (org.jmol.util.Shader.getFloatShadeIndexNormalized ((x / magnitude), (y / magnitude), (z / magnitude)) * 63 * (256)));
						  }, "~N,~N,~N");
	c$.getFloatShadeIndexNormalized = Clazz.defineMethod (c$, "getFloatShadeIndexNormalized", 
							      ($fz = function (x, y, z) {
								  var NdotL = x * org.jmol.util.Shader.xLight + y * org.jmol.util.Shader.yLight + z * org.jmol.util.Shader.zLight;
								  if (NdotL <= 0) return 0;
								  var intensity = NdotL * org.jmol.util.Shader.diffuseFactor;
								  if (org.jmol.util.Shader.specularOn) {
								      var k_specular = 2 * NdotL * z - org.jmol.util.Shader.zLight;
								      if (k_specular > 0) {
									  if (org.jmol.util.Shader.usePhongExponent) {
									      k_specular = Math.pow (k_specular, org.jmol.util.Shader.phongExponent);
									  } else {
									      for (var n = org.jmol.util.Shader.specularExponent; --n >= 0 && k_specular > .0001; ) k_specular *= k_specular;

									  }intensity += k_specular * org.jmol.util.Shader.specularFactor;
								      }}if (intensity > 1) return 1;
								  return intensity;
							      }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	c$.getDitheredNoisyShadeIndex = Clazz.defineMethod (c$, "getDitheredNoisyShadeIndex", 
							    function (x, y, z, r) {
								var fp8ShadeIndex = Clazz.doubleToInt (Math.floor (org.jmol.util.Shader.getFloatShadeIndexNormalized (x / r, y / r, z / r) * 63 * (256)));
								var shadeIndex = fp8ShadeIndex >> 8;
								if ((fp8ShadeIndex & 0xFF) > org.jmol.util.Shader.nextRandom8Bit ()) ++shadeIndex;
								var random16bit = org.jmol.util.Shader.seed & 0xFFFF;
								if (random16bit < 21845 && shadeIndex > 0) --shadeIndex;
								else if (random16bit > 43690 && shadeIndex < 63) ++shadeIndex;
								return shadeIndex;
							    }, "~N,~N,~N,~N");
	c$.calcSphereShading = Clazz.defineMethod (c$, "calcSphereShading", 
						   function () {
						       var xF = -127.5;
						       for (var i = 0; i < 256; ++xF, ++i) {
							   var yF = -127.5;
							   for (var j = 0; j < 256; ++yF, ++j) {
							       var shadeIndex = 0;
							       var z2 = 16900 - xF * xF - yF * yF;
							       if (z2 > 0) {
								   var z = Math.sqrt (z2);
								   shadeIndex = org.jmol.util.Shader.getDitheredNoisyShadeIndex (xF, yF, z, 130);
							       }org.jmol.util.Shader.sphereShadeIndexes[(j << 8) + i] = shadeIndex;
							   }
						       }
						       ($t$ = org.jmol.util.Shader.sphereShadingCalculated = true, org.jmol.util.Shader.prototype.sphereShadingCalculated = org.jmol.util.Shader.sphereShadingCalculated, $t$);
						   });
	c$.nextRandom8Bit = Clazz.defineMethod (c$, "nextRandom8Bit", 
						function () {
						    var t = org.jmol.util.Shader.seed;
						    ($t$ = org.jmol.util.Shader.seed = t = ((t << 16) + (t << 1) + t) & 0x7FFFFFFF, org.jmol.util.Shader.prototype.seed = org.jmol.util.Shader.seed, $t$);
						    return t >> 23;
						});
	c$.getEllipsoidShade = Clazz.defineMethod (c$, "getEllipsoidShade", 
						   function (x, y, z, radius, mDeriv) {
						       var tx = mDeriv.m00 * x + mDeriv.m01 * y + mDeriv.m02 * z + mDeriv.m03;
						       var ty = mDeriv.m10 * x + mDeriv.m11 * y + mDeriv.m12 * z + mDeriv.m13;
						       var tz = mDeriv.m20 * x + mDeriv.m21 * y + mDeriv.m22 * z + mDeriv.m23;
						       var f = Math.min (radius / 2, 45) / Math.sqrt (tx * tx + ty * ty + tz * tz);
						       var i = Clazz.floatToInt (-tx * f);
						       var j = Clazz.floatToInt (-ty * f);
						       var k = Clazz.floatToInt (tz * f);
						       var outside = i < -20 || i >= 20 || j < -20 || j >= 20 || k < 0 || k >= 40;
						       if (outside) {
							   while (i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && i + j + k > 0) {
							       i >>= 1;
							       j >>= 1;
							       k >>= 1;
							   }
							   outside = i < -20 || i >= 20 || j < -20 || j >= 20 || k < 0 || k >= 40;
						       }if (outside) ($t$ = org.jmol.util.Shader.nOut ++, org.jmol.util.Shader.prototype.nOut = org.jmol.util.Shader.nOut, $t$);
						       else ($t$ = org.jmol.util.Shader.nIn ++, org.jmol.util.Shader.prototype.nIn = org.jmol.util.Shader.nIn, $t$);
						       return (outside ? org.jmol.util.Shader.getShadeIndex (i, j, k) : org.jmol.util.Shader.ellipsoidShades[i + 20][j + 20][k]);
						   }, "~N,~N,~N,~N,org.jmol.util.Matrix4f");
	c$.createEllipsoidShades = Clazz.defineMethod (c$, "createEllipsoidShades", 
						       function () {
							   ($t$ = org.jmol.util.Shader.ellipsoidShades =  Clazz.newByteArray (40, 40, 40, 0), org.jmol.util.Shader.prototype.ellipsoidShades = org.jmol.util.Shader.ellipsoidShades, $t$);
							   for (var ii = 0; ii < 40; ii++) for (var jj = 0; jj < 40; jj++) for (var kk = 0; kk < 40; kk++) org.jmol.util.Shader.ellipsoidShades[ii][jj][kk] = org.jmol.util.Shader.getShadeIndex (ii - 20, jj - 20, kk);



						       });
	c$.flushSphereCache = Clazz.defineMethod (c$, "flushSphereCache", 
						  function () {
						      for (var i = 128; --i >= 0; ) org.jmol.util.Shader.sphereShapeCache[i] = null;

						      ($t$ = org.jmol.util.Shader.ellipsoidShades = null, org.jmol.util.Shader.prototype.ellipsoidShades = org.jmol.util.Shader.ellipsoidShades, $t$);
						  });
	Clazz.defineStatics (c$,
			     "shadeIndexMax", 64,
			     "shadeIndexLast", 63,
			     "shadeIndexNormal", 52,
			     "shadeIndexNoisyLimit", 56,
			     "xLightsource", -1,
			     "yLightsource", -1,
			     "zLightsource", 2.5);
	c$.magnitudeLight = c$.prototype.magnitudeLight = Math.sqrt (8.25);
	c$.xLight = c$.prototype.xLight = -1.0 / org.jmol.util.Shader.magnitudeLight;
	c$.yLight = c$.prototype.yLight = -1.0 / org.jmol.util.Shader.magnitudeLight;
	c$.zLight = c$.prototype.zLight = 2.5 / org.jmol.util.Shader.magnitudeLight;
	Clazz.defineStatics (c$,
			     "specularOn", true,
			     "usePhongExponent", false,
			     "ambientPercent", 45,
			     "diffusePercent", 84,
			     "specularExponent", 6,
			     "specularPercent", 22,
			     "specularPower", 40,
			     "phongExponent", 64);
	c$.ambientFraction = c$.prototype.ambientFraction = org.jmol.util.Shader.ambientPercent / 100;
	c$.diffuseFactor = c$.prototype.diffuseFactor = org.jmol.util.Shader.diffusePercent / 100;
	c$.intenseFraction = c$.prototype.intenseFraction = org.jmol.util.Shader.specularPower / 100;
	c$.specularFactor = c$.prototype.specularFactor = org.jmol.util.Shader.specularPercent / 100;
	Clazz.defineStatics (c$,
			     "sphereShadingCalculated", false,
			     "sphereShadeIndexes",  Clazz.newByteArray (65536, 0),
			     "seed", 0x12345679,
			     "SLIM", 20,
			     "SDIM", 40,
			     "maxSphereCache", 128);
	c$.sphereShapeCache = c$.prototype.sphereShapeCache = org.jmol.util.ArrayUtil.newInt2 (128);
	Clazz.defineStatics (c$,
			     "ellipsoidShades", null,
			     "nOut", 0,
			     "nIn", 0);
    });
    // 
    //// org\jmol\util\Quadric.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Quadric", ["org.jmol.util.Eigen"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.lengths = null;
	    this.vectors = null;
	    this.isThermalEllipsoid = true;
	    this.$scale = 1;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Quadric");
	Clazz.defineMethod (c$, "scale", 
			    function (f) {
				for (var i = 0; i < 3; i++) this.lengths[i] *= f;

			    }, "~N");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return (this.vectors == null ? "" + this.lengths[0] : this.vectors[0] + "\t" + this.lengths[0] + "\n" + this.vectors[1] + "\t" + this.lengths[1] + "\n" + this.vectors[2] + "\t" + this.lengths[2] + "\n");
			      });
	Clazz.makeConstructor (c$, 
			       function (vectors, lengths, isThermal) {
				   this.vectors = vectors;
				   this.lengths = lengths;
				   this.isThermalEllipsoid = isThermal;
			       }, "~A,~A,~B");
	Clazz.makeConstructor (c$, 
			       function (bcart) {
				   this.isThermalEllipsoid = true;
				   this.lengths =  Clazz.newFloatArray (3, 0);
				   this.vectors =  new Array (3);
				   org.jmol.util.Quadric.getAxesForEllipsoid (bcart, this.vectors, this.lengths);
				   for (var i = 0; i < 3; i++) this.lengths[i] *= org.jmol.util.Quadric.ONE_OVER_ROOT2_PI;

			       }, "~A");
	Clazz.defineMethod (c$, "rotate", 
			    function (mat) {
				if (this.vectors != null) for (var i = 0; i < 3; i++) mat.transformV (this.vectors[i]);

			    }, "org.jmol.util.Matrix4f");
	Clazz.defineMethod (c$, "setSize", 
			    function (size) {
				this.$scale = (this.isThermalEllipsoid ? org.jmol.util.Quadric.getRadius (size) : size < 1 ? 0 : size / 100.0);
			    }, "~N");
	c$.getAxesForEllipsoid = Clazz.defineMethod (c$, "getAxesForEllipsoid", 
						     function (coef, unitVectors, lengths) {
							 var mat =  Clazz.newDoubleArray (3, 3, 0);
							 mat[0][0] = coef[0];
							 mat[1][1] = coef[1];
							 mat[2][2] = coef[2];
							 mat[0][1] = mat[1][0] = coef[3] / 2;
							 mat[0][2] = mat[2][0] = coef[4] / 2;
							 mat[1][2] = mat[2][1] = coef[5] / 2;
							 org.jmol.util.Eigen.getUnitVectors (mat, unitVectors, lengths);
						     }, "~A,~A,~A");
	c$.setEllipsoidMatrix = Clazz.defineMethod (c$, "setEllipsoidMatrix", 
						    function (unitAxes, lengths, vTemp, mat) {
							for (var i = 0; i < 3; i++) {
							    vTemp.setT (unitAxes[i]);
							    vTemp.scale (lengths[i]);
							    mat.setColumnV (i, vTemp);
							}
							mat.invertM (mat);
							return mat;
						    }, "~A,~A,org.jmol.util.Vector3f,org.jmol.util.Matrix3f");
	c$.getEquationForQuadricWithCenter = Clazz.defineMethod (c$, "getEquationForQuadricWithCenter", 
								 function (x, y, z, mToElliptical, vTemp, mTemp, coef, mDeriv) {
								     vTemp.set (x, y, z);
								     mToElliptical.transform (vTemp);
								     var f = 1 - vTemp.dot (vTemp);
								     mTemp.transposeM (mToElliptical);
								     mTemp.transform (vTemp);
								     mTemp.mul (mToElliptical);
								     coef[0] = mTemp.m00 / f;
								     coef[1] = mTemp.m11 / f;
								     coef[2] = mTemp.m22 / f;
								     coef[3] = mTemp.m01 * 2 / f;
								     coef[4] = mTemp.m02 * 2 / f;
								     coef[5] = mTemp.m12 * 2 / f;
								     coef[6] = -2 * vTemp.x / f;
								     coef[7] = -2 * vTemp.y / f;
								     coef[8] = -2 * vTemp.z / f;
								     coef[9] = -1;
								     if (mDeriv == null) return;
								     mDeriv.setIdentity ();
								     mDeriv.m00 = (2 * coef[0]);
								     mDeriv.m11 = (2 * coef[1]);
								     mDeriv.m22 = (2 * coef[2]);
								     mDeriv.m01 = mDeriv.m10 = coef[3];
								     mDeriv.m02 = mDeriv.m20 = coef[4];
								     mDeriv.m12 = mDeriv.m21 = coef[5];
								     mDeriv.m03 = coef[6];
								     mDeriv.m13 = coef[7];
								     mDeriv.m23 = coef[8];
								 }, "~N,~N,~N,org.jmol.util.Matrix3f,org.jmol.util.Vector3f,org.jmol.util.Matrix3f,~A,org.jmol.util.Matrix4f");
	c$.getQuardricZ = Clazz.defineMethod (c$, "getQuardricZ", 
					      function (x, y, coef, zroot) {
						  var b_2a = (coef[4] * x + coef[5] * y + coef[8]) / coef[2] / 2;
						  var c_a = (coef[0] * x * x + coef[1] * y * y + coef[3] * x * y + coef[6] * x + coef[7] * y - 1) / coef[2];
						  var f = b_2a * b_2a - c_a;
						  if (f < 0) return false;
						  f = Math.sqrt (f);
						  zroot[0] = (-b_2a - f);
						  zroot[1] = (-b_2a + f);
						  return true;
					      }, "~N,~N,~A,~A");
	c$.getOctant = Clazz.defineMethod (c$, "getOctant", 
					   function (pt) {
					       var i = 0;
					       if (pt.x < 0) i += 1;
					       if (pt.y < 0) i += 2;
					       if (pt.z < 0) i += 4;
					       return i;
					   }, "org.jmol.util.Point3f");
	c$.getRadius = Clazz.defineMethod (c$, "getRadius", 
					   function (prob) {
					       return org.jmol.util.Quadric.crtval[prob < 1 ? 0 : prob > 99 ? 98 : prob - 1];
					   }, "~N");
	c$.ONE_OVER_ROOT2_PI = c$.prototype.ONE_OVER_ROOT2_PI = (Math.sqrt (0.5) / 3.141592653589793);
	Clazz.defineStatics (c$,
			     "crtval", [0.3389, 0.4299, 0.4951, 0.5479, 0.5932, 0.6334, 0.6699, 0.7035, 0.7349, 0.7644, 0.7924, 0.8192, 0.8447, 0.8694, 0.8932, 0.9162, 0.9386, 0.9605, 0.9818, 1.0026, 1.0230, 1.0430, 1.0627, 1.0821, 1.1012, 1.1200, 1.1386, 1.1570, 1.1751, 1.1932, 1.2110, 1.2288, 1.2464, 1.2638, 1.2812, 1.2985, 1.3158, 1.3330, 1.3501, 1.3672, 1.3842, 1.4013, 1.4183, 1.4354, 1.4524, 1.4695, 1.4866, 1.5037, 1.5209, 1.5382, 1.5555, 1.5729, 1.5904, 1.6080, 1.6257, 1.6436, 1.6616, 1.6797, 1.6980, 1.7164, 1.7351, 1.7540, 1.7730, 1.7924, 1.8119, 1.8318, 1.8519, 1.8724, 1.8932, 1.9144, 1.9360, 1.9580, 1.9804, 2.0034, 2.0269, 2.0510, 2.0757, 2.1012, 2.1274, 2.1544, 2.1824, 2.2114, 2.2416, 2.2730, 2.3059, 2.3404, 2.3767, 2.4153, 2.4563, 2.5003, 2.5478, 2.5997, 2.6571, 2.7216, 2.7955, 2.8829, 2.9912, 3.1365, 3.3682]);
    });
    // 
    //// org\jmol\util\AxisAngle4f.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.AxisAngle4f", ["org.jmol.util.Tuple3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.x = 0;
	    this.y = 0;
	    this.z = 0;
	    this.angle = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "AxisAngle4f", null, java.io.Serializable);
	Clazz.makeConstructor (c$, 
			       function () {
				   this.z = 1.0;
			       });
	c$.new4 = Clazz.defineMethod (c$, "new4", 
				      function (x, y, z, angle) {
					  var a =  new org.jmol.util.AxisAngle4f ();
					  a.set4 (x, y, z, angle);
					  return a;
				      }, "~N,~N,~N,~N");
	c$.newAA = Clazz.defineMethod (c$, "newAA", 
				       function (a1) {
					   var a =  new org.jmol.util.AxisAngle4f ();
					   a.set4 (a1.x, a1.y, a1.z, a1.angle);
					   return a;
				       }, "org.jmol.util.AxisAngle4f");
	c$.newVA = Clazz.defineMethod (c$, "newVA", 
				       function (axis, angle) {
					   var a =  new org.jmol.util.AxisAngle4f ();
					   a.setVA (axis, angle);
					   return a;
				       }, "org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "setVA", 
			    function (axis, angle) {
				this.x = axis.x;
				this.y = axis.y;
				this.z = axis.z;
				this.angle = angle;
			    }, "org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "set4", 
			    function (x, y, z, angle) {
				this.x = x;
				this.y = y;
				this.z = z;
				this.angle = angle;
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAA", 
			    function (a) {
				this.x = a.x;
				this.y = a.y;
				this.z = a.z;
				this.angle = a.angle;
			    }, "org.jmol.util.AxisAngle4f");
	Clazz.defineMethod (c$, "setM", 
			    function (m1) {
				this.setFromMat (m1.m00, m1.m01, m1.m02, m1.m10, m1.m11, m1.m12, m1.m20, m1.m21, m1.m22);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "setFromMat", 
			    ($fz = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
				var cos = (m00 + m11 + m22 - 1.0) * 0.5;
				this.x = (m21 - m12);
				this.y = (m02 - m20);
				this.z = (m10 - m01);
				var sin = 0.5 * Math.sqrt (this.x * this.x + this.y * this.y + this.z * this.z);
				this.angle = Math.atan2 (sin, cos);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.angle + ")";
			      });
	Clazz.overrideMethod (c$, "equals", 
			      function (o) {
				  if (!(Clazz.instanceOf (o, org.jmol.util.AxisAngle4f))) return false;
				  var a1 = o;
				  return this.x == a1.x && this.y == a1.y && this.z == a1.z && this.angle == a1.angle;
			      }, "~O");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  return org.jmol.util.Tuple3f.floatToIntBits0 (this.x) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.y) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.z) ^ org.jmol.util.Tuple3f.floatToIntBits0 (this.angle);
			      });
    });
    // 
    //// org\jmol\api\JmolViewer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.load (null, "org.jmol.api.JmolViewer", ["java.util.Hashtable"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.menuStructure = null;
	    this.apiPlatform = null;
	    this.fileAdapter = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.api, "JmolViewer");
	c$.allocateViewer = Clazz.defineMethod (c$, "allocateViewer", 
						function (display, modelAdapter, fullName, documentBase, codeBase, commandOptions, statusListener, implementedPlatform) {
						    var info =  new java.util.Hashtable ();
						    if (display != null) info.put ("display", display);
						    if (modelAdapter != null) info.put ("adapter", modelAdapter);
						    if (statusListener != null) info.put ("statusListener", statusListener);
						    if (implementedPlatform != null) info.put ("platform", implementedPlatform);
						    if (commandOptions != null) info.put ("options", commandOptions);
						    if (fullName != null) info.put ("fullName", fullName);
						    if (documentBase != null) info.put ("documentBase", documentBase);
						    if (codeBase != null) info.put ("codeBase", codeBase);
						    return  new org.jmol.viewer.Viewer (info);
						}, "~O,org.jmol.api.JmolAdapter,~S,java.net.URL,java.net.URL,~S,org.jmol.api.JmolStatusListener,org.jmol.api.ApiPlatform");
	c$.allocateViewer = Clazz.defineMethod (c$, "allocateViewer", 
						function (container, jmolAdapter) {
						    return org.jmol.api.JmolViewer.allocateViewer (container, jmolAdapter, null, null, null, null, null, null);
						}, "~O,org.jmol.api.JmolAdapter");
	c$.allocateViewer = Clazz.defineMethod (c$, "allocateViewer", 
						function (display, modelAdapter, fullName, documentBase, codeBase, commandOptions, statusListener) {
						    return org.jmol.api.JmolViewer.allocateViewer (display, modelAdapter, fullName, documentBase, codeBase, commandOptions, statusListener, null);
						}, "~O,org.jmol.api.JmolAdapter,~S,java.net.URL,java.net.URL,~S,org.jmol.api.JmolStatusListener");
	Clazz.defineMethod (c$, "setConsole", 
			    function (console) {
				this.getProperty ("DATA_API", "getAppConsole", console);
			    }, "org.jmol.api.JmolAppConsoleInterface");
	c$.getJmolVersion = Clazz.defineMethod (c$, "getJmolVersion", 
						function () {
						    return org.jmol.viewer.Viewer.getJmolVersion ();
						});
	c$.checkOption = Clazz.defineMethod (c$, "checkOption", 
					     function (viewer, option) {
						 var testFlag = viewer.getParameter (option);
						 return (Clazz.instanceOf (testFlag, Boolean) && (testFlag).booleanValue () || Clazz.instanceOf (testFlag, Integer) && (testFlag).intValue () != 0);
					     }, "org.jmol.api.JmolViewer,~S");
	Clazz.defineMethod (c$, "openFileAsync", 
			    function (fileName) {
				this.openFileAsyncPDB (fileName, false);
			    }, "~S");
	Clazz.defineMethod (c$, "mouseEvent", 
			    function (id, x, y, modifiers, when) {
				this.handleOldJvm10Event (id, x, y, modifiers, when);
			    }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "getFileAdapter", 
			    function () {
				return (this.fileAdapter == null ? this.fileAdapter = this.apiPlatform.getFileAdapter () : this.fileAdapter);
			    });
	Clazz.defineMethod (c$, "renderScreenImage", 
			    function (g, currentSize, rectClip) {
				this.apiPlatform.renderScreenImage (this, g, currentSize);
			    }, "~O,~O,~O");
	Clazz.defineMethod (c$, "getJsObjectInfo", 
			    function (jsObject, method, args) {
				return this.apiPlatform.getJsObjectInfo (jsObject, method, args);
			    }, "~O,~S,~A");
	c$.getJmolValueAsString = Clazz.defineMethod (c$, "getJmolValueAsString", 
						      function (jmolViewer, $var) {
							  return (jmolViewer == null ? "" : "" + jmolViewer.getParameter ($var));
						      }, "org.jmol.api.JmolViewer,~S");
    });
    // 
    //// org\jmol\atomdata\AtomDataServer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.atomdata");
    Clazz.declareInterface (org.jmol.atomdata, "AtomDataServer");
    // 
    //// org\jmol\constant\EnumVdw.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumVdw", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.pt = 0;
	    this.type = null;
	    this.type2 = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumVdw", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (pt, type, type2) {
				   this.pt = pt;
				   this.type = type;
				   this.type2 = type2;
			       }, $fz.isPrivate = true, $fz), "~N,~S,~S");
	Clazz.defineMethod (c$, "getVdwLabel", 
			    function () {
				return (this.type == null ? this.type2 : this.type);
			    });
	c$.getVdwType = Clazz.defineMethod (c$, "getVdwType", 
					    function (label) {
						if (label != null) for (var item, $item = 0, $$item = org.jmol.constant.EnumVdw.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (label.equalsIgnoreCase (item.type)) return item;

						return null;
					    }, "~S");
	c$.getVdwType2 = Clazz.defineMethod (c$, "getVdwType2", 
					     function (label) {
						 if (label != null) for (var item, $item = 0, $$item = org.jmol.constant.EnumVdw.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (label.equalsIgnoreCase (item.type2)) return item;

						 return null;
					     }, "~S");
	Clazz.defineEnumConstant (c$, "JMOL", 0, [0, "Jmol", null]);
	Clazz.defineEnumConstant (c$, "BABEL", 1, [1, "Babel", null]);
	Clazz.defineEnumConstant (c$, "RASMOL", 2, [2, "RasMol", null]);
	Clazz.defineEnumConstant (c$, "BABEL21", 3, [3, "Babel21", null]);
	Clazz.defineEnumConstant (c$, "AUTO_JMOL", 4, [0, null, "Jmol"]);
	Clazz.defineEnumConstant (c$, "AUTO_BABEL", 5, [1, null, "Babel"]);
	Clazz.defineEnumConstant (c$, "AUTO_RASMOL", 6, [2, null, "RasMol"]);
	Clazz.defineEnumConstant (c$, "AUTO", 7, [0, "Auto", null]);
	Clazz.defineEnumConstant (c$, "USER", 8, [-1, "User", null]);
	Clazz.defineEnumConstant (c$, "ADPMAX", 9, [-1, null, "adpmax"]);
	Clazz.defineEnumConstant (c$, "ADPMIN", 10, [-1, null, "adpmin"]);
	Clazz.defineEnumConstant (c$, "HYDRO", 11, [-1, null, "hydrophobic"]);
	Clazz.defineEnumConstant (c$, "IONIC", 12, [-1, null, "ionic"]);
	Clazz.defineEnumConstant (c$, "TEMP", 13, [-1, null, "temperature"]);
	Clazz.defineEnumConstant (c$, "NOJMOL", 14, [-1, null, null]);
	Clazz.defineEnumConstant (c$, "NADA", 15, [-1, null, null]);
    });
    // 
    //// org\jmol\atomdata\RadiusData.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.atomdata");
    Clazz.load (["java.lang.Enum", "org.jmol.constant.EnumVdw"], "org.jmol.atomdata.RadiusData", ["java.lang.Float", "org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.info = null;
	    this.factorType = null;
	    this.vdwType = null;
	    this.value = NaN;
	    this.valueExtended = 0;
	    this.values = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.atomdata, "RadiusData");
	Clazz.prepareFields (c$, function () {
	    this.factorType = org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE;
	    this.vdwType = org.jmol.constant.EnumVdw.AUTO;
	});
	Clazz.makeConstructor (c$, 
			       function (values, value, factorType, vdwType) {
				   if (values != null) {
				       this.values = values;
				       this.value = 2147483647;
				       return;
				   }if (factorType == null) return;
				   this.factorType = factorType;
				   this.value = value;
				   if (vdwType != null) this.vdwType = vdwType;
			       }, "~A,~N,org.jmol.atomdata.RadiusData.EnumType,org.jmol.constant.EnumVdw");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  if (Float.isNaN (this.value)) return "";
				  var sb =  new org.jmol.util.StringXBuilder ();
				  switch (this.factorType) {
				  case org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE:
				      sb.appendF (this.value);
				      break;
				  case org.jmol.atomdata.RadiusData.EnumType.OFFSET:
				      sb.append (this.value > 0 ? "+" : "").appendF (this.value);
				      break;
				  case org.jmol.atomdata.RadiusData.EnumType.FACTOR:
				      sb.appendI (Clazz.floatToInt (this.value * 100)).append ("%");
				      if (this.vdwType !== org.jmol.constant.EnumVdw.AUTO) sb.append (this.vdwType.getVdwLabel ());
				      break;
				  case org.jmol.atomdata.RadiusData.EnumType.SCREEN:
				      sb.appendI (Clazz.floatToInt (this.value));
				  }
				  return sb.toString ();
			      });
	Clazz.pu$h ();
	c$ = Clazz.declareType (org.jmol.atomdata.RadiusData, "EnumType", Enum);
	Clazz.defineEnumConstant (c$, "ABSOLUTE", 0, []);
	Clazz.defineEnumConstant (c$, "OFFSET", 1, []);
	Clazz.defineEnumConstant (c$, "FACTOR", 2, []);
	Clazz.defineEnumConstant (c$, "SCREEN", 3, []);
	c$ = Clazz.p0p ();
    });
    // 
    //// org\jmol\util\CommandHistory.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.CommandHistory", ["java.util.ArrayList"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.commandList = null;
	    this.maxSize = 100;
	    this.nextCommand = 0;
	    this.cursorPos = 0;
	    this.isOn = true;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "CommandHistory");
	Clazz.makeConstructor (c$, 
			       function () {
				   this.reset (100);
			       });
	Clazz.makeConstructor (c$, 
			       function (maxSize) {
				   this.reset (maxSize);
			       }, "~N");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.reset (this.maxSize);
			    });
	Clazz.defineMethod (c$, "reset", 
			    function (maxSize) {
				this.maxSize = maxSize;
				this.commandList =  new java.util.ArrayList ();
				this.nextCommand = 0;
				this.commandList.add ("");
				this.cursorPos = 0;
			    }, "~N");
	Clazz.defineMethod (c$, "setMaxSize", 
			    function (maxSize) {
				if (maxSize == this.maxSize) return;
				if (maxSize < 2) maxSize = 2;
				while (this.nextCommand > maxSize) {
				    this.commandList.remove (0);
				    this.nextCommand--;
				}
				if (this.nextCommand > maxSize) this.nextCommand = maxSize - 1;
				this.cursorPos = this.nextCommand;
				this.maxSize = maxSize;
			    }, "~N");
	Clazz.defineMethod (c$, "getCommandUp", 
			    function () {
				if (this.cursorPos <= 0) return null;
				this.cursorPos--;
				var str = this.getCommand ();
				if (str.endsWith ("#??")) this.removeCommand (this.cursorPos--);
				if (this.cursorPos < 0) this.cursorPos = 0;
				return str;
			    });
	Clazz.defineMethod (c$, "getCommandDown", 
			    function () {
				if (this.cursorPos >= this.nextCommand) return null;
				this.cursorPos++;
				return this.getCommand ();
			    });
	Clazz.defineMethod (c$, "getCommand", 
			    ($fz = function () {
				return this.commandList.get (this.cursorPos);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "addCommand", 
			    function (strCommand) {
				if (!this.isOn && !strCommand.endsWith ("#??")) return;
				if (strCommand.endsWith ("#----")) return;
				var i;
				while ((i = strCommand.indexOf ("\n")) >= 0) {
				    var str = strCommand.substring (0, i);
				    if (str.length > 0) this.addCommandLine (str);
				    strCommand = strCommand.substring (i + 1);
				}
				if (strCommand.length > 0) this.addCommandLine (strCommand);
			    }, "~S");
	Clazz.defineMethod (c$, "getSetHistory", 
			    function (n) {
				this.isOn = (n == -2 ? this.isOn : true);
				switch (n) {
				case 0:
				    this.isOn = false;
				    this.clear ();
				    return "";
				case -2147483648:
				case -2:
				    this.clear ();
				    return "";
				case -1:
				    return this.getCommandUp ();
				case 1:
				    return this.getCommandDown ();
				default:
				    if (n < 0) {
					this.setMaxSize (-2 - n);
					return "";
				    }n = Math.max (this.nextCommand - n, 0);
				}
				var str = "";
				for (var i = n; i < this.nextCommand; i++) if (!this.commandList.get (i).toUpperCase ().startsWith ("WRITE HISTORY")) str += this.commandList.get (i) + "\n";

				return str;
			    }, "~N");
	Clazz.defineMethod (c$, "removeCommand", 
			    function () {
				return this.removeCommand (this.nextCommand - 1);
			    });
	Clazz.defineMethod (c$, "removeCommand", 
			    function (n) {
				if (n < 0 || n >= this.nextCommand) return "";
				var str = this.commandList.remove (n);
				this.nextCommand--;
				return str;
			    }, "~N");
	Clazz.defineMethod (c$, "addCommandLine", 
			    ($fz = function (command) {
				if (command == null || command.length == 0) return;
				if (command.endsWith ("#--")) return;
				if (this.nextCommand >= this.maxSize) {
				    this.commandList.remove (0);
				    this.nextCommand = this.maxSize - 1;
				}this.commandList.add (this.nextCommand, command);
				this.nextCommand++;
				this.cursorPos = this.nextCommand;
				this.commandList.add (this.nextCommand, "");
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineStatics (c$,
			     "ERROR_FLAG", "#??",
			     "NOHISTORYLINE_FLAG", "#--",
			     "NOHISTORYATALL_FLAG", "#----",
			     "DEFAULT_MAX_SIZE", 100);
    });
    // 
    //// org\jmol\util\Dimension.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    c$ = Clazz.decorateAsClass (function () {
	this.height = 0;
	this.width = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.util, "Dimension");
    // 
    //// org\jmol\viewer\Viewer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.lang.Enum", "org.jmol.api.JmolViewer", "org.jmol.atomdata.AtomDataServer", "java.util.ArrayList", "org.jmol.atomdata.RadiusData", "org.jmol.i18n.GT", "org.jmol.util.CommandHistory", "$.Dimension"], "org.jmol.viewer.Viewer", ["java.io.BufferedOutputStream", "$.BufferedReader", "$.BufferedWriter", "$.File", "$.FileWriter", "$.StringReader", "java.lang.Boolean", "$.Character", "$.Double", "$.Float", "$.Runtime", "$.Thread", "java.util.Date", "$.Hashtable", "org.jmol.adapter.smarter.SmarterJmolAdapter", "org.jmol.api.Interface", "org.jmol.constant.EnumAxesMode", "$.EnumFileStatus", "$.EnumStereoMode", "$.EnumVdw", "org.jmol.io.Base64", "$.CifDataReader", "$.JmolBinary", "$.OutputStringBuilder", "org.jmol.modelset.Group", "org.jmol.script.ScriptCompiler", "$.ScriptEvaluator", "$.ScriptVariable", "$.ScriptVariableInt", "$.Token", "org.jmol.shape.Shape", "org.jmol.thread.ScriptParallelProcessor", "$.TimeoutThread", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Colix", "$.ColorUtil", "$.Elements", "$.Escape", "$.GData", "$.JmolMolecule", "$.Logger", "$.Measure", "$.Parser", "$.Point3f", "$.Point3i", "$.StringXBuilder", "$.TempArray", "$.TextFormat", "$.Vector3f", "org.jmol.viewer.ActionManager", "$.AnimationManager", "$.ColorManager", "$.DataManager", "$.FileManager", "$.JmolConstants", "$.ModelManager", "$.PropertyManager", "$.ScriptManager", "$.SelectionManager", "$.ShapeManager", "$.StateManager", "$.StatusManager", "$.TransformManager10", "$.TransformManager11", "org.jmol.viewer.binding.Binding"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.display = null;
	    this.gdata = null;
	    this.modelAdapter = null;
	    this.isJS2D = false;
	    this.isJS3D = false;
	    this.access = null;
	    this.commandHistory = null;
	    this.colorManager = null;
	    this.compiler = null;
	    this.definedAtomSets = null;
	    this.symmetry = null;
	    this.smilesMatcher = null;
	    this.$eval = null;
	    this.animationManager = null;
	    this.dataManager = null;
	    this.fileManager = null;
	    this.actionManager = null;
	    this.shapeManager = null;
	    this.modelManager = null;
	    this.modelSet = null;
	    this.repaintManager = null;
	    this.scriptManager = null;
	    this.selectionManager = null;
	    this.stateManager = null;
	    this.global = null;
	    this.statusManager = null;
	    this.tempManager = null;
	    this.transformManager = null;
	    this.htmlName = "";
	    this.fullName = "";
	    this.syncId = "";
	    this.appletDocumentBase = "";
	    this.appletCodeBase = "";
	    this.logFilePath = "";
	    this.multiTouch = false;
	    this.isSilent = false;
	    this.$isApplet = false;
	    this.applet = null;
	    this.viewerOptions = null;
	    this.$isPreviewOnly = false;
	    this.haveDisplay = false;
	    this.autoExit = false;
	    this.mustRender = false;
	    this.isPrintOnly = false;
	    this.isSyntaxAndFileCheck = false;
	    this.isSyntaxCheck = false;
	    this.listCommands = false;
	    this.useCommandThread = false;
	    this.$isSignedApplet = false;
	    this.isSignedAppletLocal = false;
	    this.commandOptions = null;
	    this.$noGraphicsAllowed = false;
	    this.mouse = null;
	    this.mouseEnabled = true;
	    this.noneSelected = false;
	    this.ligandModels = null;
	    this.ligandModelSet = null;
	    this.bsFrameOffsets = null;
	    this.frameOffsets = null;
	    this.wasInMotion = false;
	    this.motionEventNumber = 0;
	    this.refreshing = true;
	    this.axesAreTainted = false;
	    this.dimScreen = null;
	    this.maximumSize = 2147483647;
	    this.imageFontScaling = 1;
	    this.antialiasDisplay = false;
	    this.interruptScript = "";
	    this.scriptIndex = 0;
	    this.isScriptQueued = true;
	    this.hoverAtomIndex = -1;
	    this.hoverText = null;
	    this.hoverEnabled = true;
	    this.currentCursor = 0;
	    this.prevFrame = -2147483648;
	    this.language = null;
	    this.rd = null;
	    this.frankOn = true;
	    this.scriptEditorVisible = false;
	    this.appConsole = null;
	    this.scriptEditor = null;
	    this.jmolpopup = null;
	    this.modelkitPopup = null;
	    this.headlessImage = null;
	    this.isTainted = true;
	    this.movingSelected = false;
	    this.showSelected = false;
	    this.rotateBondIndex = -1;
	    this.rotatePrev1 = -1;
	    this.rotatePrev2 = -1;
	    this.bsRotateBranch = null;
	    this.creatingImage = false;
	    this.errorMessage = null;
	    this.errorMessageUntranslated = null;
	    this.currentShapeID = -1;
	    this.currentShapeState = null;
	    this.privateKey = 0;
	    this.logFile = null;
	    this.$isKiosk = false;
	    this.minimizer = null;
	    this.executor = null;
	    this.displayLoadErrors = true;
	    this.$isParallel = false;
	    this.actionStates = null;
	    this.actionStatesRedo = null;
	    this.undoWorking = false;
	    this.stateScriptVersionInt = 0;
	    this.jsExporter3D = null;
	    this.htPdbBondInfo = null;
	    this.timeouts = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "Viewer", org.jmol.api.JmolViewer, org.jmol.atomdata.AtomDataServer);
	Clazz.prepareFields (c$, function () {
	    this.commandHistory =  new org.jmol.util.CommandHistory ();
	    this.dimScreen =  new org.jmol.util.Dimension ();
	    this.language = org.jmol.i18n.GT.getLanguage ();
	    this.rd =  new org.jmol.atomdata.RadiusData (null, 0, null, null);
	    this.privateKey = Math.random ();
	    this.actionStates =  new java.util.ArrayList ();
	    this.actionStatesRedo =  new java.util.ArrayList ();
	});
	Clazz.defineMethod (c$, "finalize", 
			    function () {
				org.jmol.util.Logger.debug ("viewer finalize " + this);
				Clazz.superCall (this, org.jmol.viewer.Viewer, "finalize", []);
			    });
	Clazz.defineMethod (c$, "isRestricted", 
			    function (a) {
				return this.access === a;
			    }, "org.jmol.viewer.Viewer.ACCESS");
	Clazz.overrideMethod (c$, "getModelAdapter", 
			      function () {
				  if (this.modelAdapter == null) this.modelAdapter =  new org.jmol.adapter.smarter.SmarterJmolAdapter ();
				  return this.modelAdapter;
			      });
	Clazz.defineMethod (c$, "getSymmetry", 
			    function () {
				if (this.symmetry == null) this.symmetry = org.jmol.api.Interface.getOptionInterface ("symmetry.Symmetry");
				return this.symmetry;
			    });
	Clazz.defineMethod (c$, "getSymmetryInfo", 
			    function (bsAtoms, xyz, op, pt, pt2, id, type) {
				return this.modelSet.getSymmetryInfo (bsAtoms, xyz, op, pt, pt2, id, type);
			    }, "org.jmol.util.BitSet,~S,~N,org.jmol.util.Point3f,org.jmol.util.Point3f,~S,~N");
	Clazz.defineMethod (c$, "clearModelDependentObjects", 
			    ($fz = function () {
				this.setFrameOffsets (null);
				this.stopMinimization ();
				this.minimizer = null;
				if (this.smilesMatcher != null) {
				    this.smilesMatcher = null;
				}if (this.symmetry != null) {
				    this.symmetry = null;
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getSmilesMatcher", 
			    function () {
				if (this.smilesMatcher == null) {
				    this.smilesMatcher = org.jmol.api.Interface.getOptionInterface ("smiles.SmilesMatcher");
				}return this.smilesMatcher;
			    });
	Clazz.overrideMethod (c$, "getSmartsMatch", 
			      function (smarts, bsSelected) {
				  if (bsSelected == null) bsSelected = this.getSelectionSet (false);
				  return this.getSmilesMatcher ().getSubstructureSet (smarts, this.getModelSet ().atoms, this.getAtomCount (), bsSelected, true, false);
			      }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getGlobalSettings", 
			    function () {
				return this.global;
			    });
	Clazz.defineMethod (c$, "getStatusManager", 
			    function () {
				return this.statusManager;
			    });
	Clazz.overrideMethod (c$, "isApplet", 
			      function () {
				  return this.$isApplet;
			      });
	c$.allocateViewer = Clazz.defineMethod (c$, "allocateViewer", 
						function (display, modelAdapter, fullName, documentBase, codeBase, commandOptions, statusListener, implementedPlatform) {
						    var info =  new java.util.Hashtable ();
						    info.put ("display", display);
						    info.put ("adapter", modelAdapter);
						    info.put ("statusListener", statusListener);
						    info.put ("platform", implementedPlatform);
						    info.put ("options", commandOptions);
						    info.put ("fullName", fullName);
						    info.put ("documentBase", documentBase);
						    info.put ("codeBase", codeBase);
						    return  new org.jmol.viewer.Viewer (info);
						}, "~O,org.jmol.api.JmolAdapter,~S,java.net.URL,java.net.URL,~S,org.jmol.api.JmolStatusListener,org.jmol.api.ApiPlatform");
	Clazz.makeConstructor (c$, 
			       function (info) {
				   Clazz.superConstructor (this, org.jmol.viewer.Viewer, []);
				   this.setOptions (info);
			       }, "java.util.Map");
	Clazz.defineMethod (c$, "getViewerOptions", 
			    function () {
				return this.viewerOptions;
			    });
	Clazz.defineMethod (c$, "setOptions", 
			    ($fz = function (info) {
				this.viewerOptions = info;
				if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.debug ("Viewer constructor " + this);
				}this.modelAdapter = info.get ("adapter");
				var statusListener = info.get ("statusListener");
				this.fullName = info.get ("fullName");
				if (this.fullName == null) this.fullName = "";
				var o = info.get ("codeBase");
				this.appletCodeBase = (o == null ? "" : o.toString ());
				o = info.get ("documentBase");
				this.appletDocumentBase = (o == null ? "" : o.toString ());
				o = info.get ("options");
				this.commandOptions = (o == null ? "" : o.toString ());
				if (info.containsKey ("debug") || this.commandOptions.indexOf ("-debug") >= 0) org.jmol.util.Logger.setLogLevel (5);
				this.$isSignedApplet = this.checkOption ("signedApplet", "-signed");
				this.$isApplet = this.$isSignedApplet || this.checkOption ("applet", "-applet");
				var i = this.fullName.indexOf ("__");
				this.htmlName = (i < 0 ? this.fullName : this.fullName.substring (0, i));
				this.syncId = (i < 0 ? "" : this.fullName.substring (i + 2, this.fullName.length - 2));
				if (this.$isApplet) {
				    {
					if(typeof Jmol != "undefined") this.applet =
					    Jmol._applets[this.htmlName.split("_object")[0]];
				    }if (info.containsKey ("maximumSize")) this.setMaximumSize ((info.get ("maximumSize")).intValue ());
				}this.access = (this.checkOption ("access:READSPT", "-r") ? org.jmol.viewer.Viewer.ACCESS.READSPT : this.checkOption ("access:NONE", "-R") ? org.jmol.viewer.Viewer.ACCESS.NONE : org.jmol.viewer.Viewer.ACCESS.ALL);
				this.$isPreviewOnly = info.containsKey ("previewOnly");
				if (this.$isPreviewOnly) info.remove ("previewOnly");
				this.isPrintOnly = this.checkOption ("printOnly", "-p");
				o = info.get ("platform");
				var platform = "unknown";
				if (o == null) {
				    o = (this.commandOptions.contains ("platform=") ? this.commandOptions.substring (this.commandOptions.indexOf ("platform=") + 9) : "org.jmol.awt.Platform");
				}if (Clazz.instanceOf (o, String)) {
				    platform = o;
				    this.isJS3D = (platform.indexOf (".awtjs.") >= 0);
				    this.isJS2D = (platform.indexOf ("2d") >= 0);
				    o = org.jmol.api.Interface.getInterface (platform);
				}this.apiPlatform = o;
				this.display = info.get ("display");
				this.$noGraphicsAllowed = (this.display == null && this.checkOption ("noGraphics", "-n"));
				this.haveDisplay = (!this.$noGraphicsAllowed && !this.isHeadless () && !this.checkOption ("isDataOnly", "\0"));
				if (this.haveDisplay) {
				    this.mustRender = true;
				    this.multiTouch = this.checkOption ("multiTouch", "-multitouch");
				    {
					if (this.isJS2D) this.display =
					    document.getElementById(this.display);
				    }} else {
					this.display = null;
				    }this.apiPlatform.setViewer (this, this.display);
				o = info.get ("graphicsAdapter");
				if (o == null && !this.isJS3D) o = org.jmol.api.Interface.getInterface ("org.jmol.g3d.Graphics3D");
				this.gdata = (o == null ?  new org.jmol.util.GData () : o);
				this.gdata.initialize (this.apiPlatform);
				this.stateManager =  new org.jmol.viewer.StateManager (this);
				this.colorManager =  new org.jmol.viewer.ColorManager (this, this.gdata);
				this.statusManager =  new org.jmol.viewer.StatusManager (this);
				this.scriptManager =  new org.jmol.viewer.ScriptManager (this);
				this.transformManager =  new org.jmol.viewer.TransformManager11 (this);
				this.selectionManager =  new org.jmol.viewer.SelectionManager (this);
				if (this.haveDisplay) {
				    this.actionManager = (this.multiTouch ? org.jmol.api.Interface.getOptionInterface ("multitouch.ActionManagerMT") :  new org.jmol.viewer.ActionManager ());
				    this.actionManager.setViewer (this, this.commandOptions + "-multitouch-" + info.get ("multiTouch"));
				    this.mouse = this.apiPlatform.getMouseManager (this, this.actionManager);
				    if (this.multiTouch && !this.checkOption ("-simulated", "-simulated")) this.apiPlatform.setTransparentCursor (this.display);
				}this.modelManager =  new org.jmol.viewer.ModelManager (this);
				this.shapeManager =  new org.jmol.viewer.ShapeManager (this);
				this.tempManager =  new org.jmol.util.TempArray ();
				this.dataManager =  new org.jmol.viewer.DataManager (this);
				this.animationManager =  new org.jmol.viewer.AnimationManager (this);
				o = info.get ("repaintManager");
				if (o == null) o = (org.jmol.api.Interface.getOptionInterface ("render.RepaintManager"));
				if (o != null && !o.equals ("")) (this.repaintManager = o).set (this, this.shapeManager);
				this.initialize (true);
				this.fileManager =  new org.jmol.viewer.FileManager (this);
				this.compiler =  new org.jmol.script.ScriptCompiler (this);
				this.definedAtomSets =  new java.util.Hashtable ();
				this.$eval =  new org.jmol.script.ScriptEvaluator (this);
				this.setJmolStatusListener (statusListener);
				if (this.$isApplet) {
				    org.jmol.util.Logger.info ("viewerOptions: \n" + org.jmol.util.Escape.escapeMap (this.viewerOptions));
				    ($t$ = org.jmol.viewer.Viewer.jsDocumentBase = this.appletDocumentBase, org.jmol.viewer.Viewer.prototype.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase, $t$);
				    i = org.jmol.viewer.Viewer.jsDocumentBase.indexOf ("#");
				    if (i >= 0) ($t$ = org.jmol.viewer.Viewer.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase.substring (0, i), org.jmol.viewer.Viewer.prototype.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase, $t$);
				    i = org.jmol.viewer.Viewer.jsDocumentBase.lastIndexOf ("?");
				    if (i >= 0) ($t$ = org.jmol.viewer.Viewer.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase.substring (0, i), org.jmol.viewer.Viewer.prototype.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase, $t$);
				    i = org.jmol.viewer.Viewer.jsDocumentBase.lastIndexOf ("/");
				    if (i >= 0) ($t$ = org.jmol.viewer.Viewer.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase.substring (0, i), org.jmol.viewer.Viewer.prototype.jsDocumentBase = org.jmol.viewer.Viewer.jsDocumentBase, $t$);
				    this.fileManager.setAppletContext (this.appletDocumentBase);
				    var appletProxy = info.get ("appletProxy");
				    if (appletProxy != null) this.setStringProperty ("appletProxy", appletProxy);
				    if (this.$isSignedApplet) {
					this.logFilePath = org.jmol.util.TextFormat.simpleReplace (this.appletCodeBase, "file://", "");
					this.logFilePath = org.jmol.util.TextFormat.simpleReplace (this.logFilePath, "file:/", "");
					if (this.logFilePath.indexOf ("//") >= 0) this.logFilePath = null;
					else this.isSignedAppletLocal = true;
				    } else {
					this.logFilePath = null;
				    }} else {
					this.gdata.setBackgroundTransparent (this.checkOption ("backgroundTransparent", "-b"));
					this.isSilent = this.checkOption ("silent", "-i");
					if (this.isSilent) org.jmol.util.Logger.setLogLevel (3);
					this.isSyntaxAndFileCheck = this.checkOption ("checkLoad", "-C");
					this.isSyntaxCheck = this.isSyntaxAndFileCheck || this.checkOption ("check", "-c");
					this.listCommands = this.checkOption ("listCommands", "-l");
					this.autoExit = this.checkOption ("exit", "-x");
					this.cd (".");
					if (this.isHeadless ()) {
					    this.headlessImage = info.get ("headlessImage");
					    o = info.get ("headlistMaxTimeMs");
					    if (o == null) o = Integer.$valueOf (60000);
					    this.setTimeout ("" + Math.random (), (o).intValue (), "exitJmol");
					}}this.useCommandThread = !this.isHeadless () && this.checkOption ("useCommandThread", "-threaded");
				if (this.useCommandThread) this.scriptManager.startCommandWatcher (true);
				this.setStartupBooleans ();
				this.setIntProperty ("_nProcessors", org.jmol.viewer.Viewer.nProcessors);
				o = info.get ("menuFile");
				if (o != null) this.getProperty ("DATA_API", "setMenu", this.getFileAsString (o));
				if (!this.isSilent) {
				    org.jmol.util.Logger.info ("(C) 2012 Jmol Development" + "\nJmol Version: " + org.jmol.viewer.Viewer.getJmolVersion () + "\njava.vendor: " + org.jmol.viewer.Viewer.strJavaVendor + "\njava.version: " + org.jmol.viewer.Viewer.strJavaVersion + "\nos.name: " + org.jmol.viewer.Viewer.strOSName + "\nAccess: " + this.access + "\nmemory: " + this.getParameter ("_memory") + "\nprocessors available: " + org.jmol.viewer.Viewer.nProcessors + "\nuseCommandThread: " + this.useCommandThread + (!this.$isApplet ? "" : "\nappletId:" + this.htmlName + (this.$isSignedApplet ? " (signed)" : "")));
				}this.zap (false, true, false);
				this.global.setParamS ("language", org.jmol.i18n.GT.getLanguage ());
				this.stateManager.setJmolDefaults ();
			    }, $fz.isPrivate = true, $fz), "java.util.Map");
	Clazz.defineMethod (c$, "checkOption", 
			    ($fz = function (key1, key2) {
				return (this.viewerOptions.containsKey (key1) || this.commandOptions.indexOf (key2) >= 0);
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "isPreviewOnly", 
			    function () {
				return this.$isPreviewOnly;
			    });
	Clazz.defineMethod (c$, "isHeadless", 
			    function () {
				return this.apiPlatform.isHeadless ();
			    });
	Clazz.defineMethod (c$, "setStartupBooleans", 
			    ($fz = function () {
				this.setBooleanProperty ("_applet", this.$isApplet);
				this.setBooleanProperty ("_signedApplet", this.$isSignedApplet);
				this.setBooleanProperty ("_headless", this.apiPlatform.isHeadless ());
				this.setStringProperty ("_restrict", "\"" + this.access + "\"");
				this.setBooleanProperty ("_useCommandThread", this.useCommandThread);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "noGraphicsAllowed", 
			    function () {
				return this.$noGraphicsAllowed;
			    });
	c$.getJmolVersion = Clazz.overrideMethod (c$, "getJmolVersion", 
						  function () {
						      return org.jmol.viewer.JmolConstants.version + "  " + org.jmol.viewer.JmolConstants.date;
						  });
	Clazz.defineMethod (c$, "getExportDriverList", 
			    function () {
				return (this.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL) ? this.global.getParameter ("exportDrivers") : "");
			    });
	Clazz.defineMethod (c$, "getHtmlName", 
			    function () {
				return this.htmlName;
			    });
	Clazz.overrideMethod (c$, "getDisplay", 
			      function () {
				  return this.display;
			      });
	Clazz.defineMethod (c$, "clearMouse", 
			    function () {
				this.mouse.clear ();
			    });
	Clazz.defineMethod (c$, "disposeMouse", 
			    function () {
				this.mouse.dispose ();
				this.mouse = null;
			    });
	Clazz.overrideMethod (c$, "handleOldJvm10Event", 
			      function (id, x, y, modifiers, time) {
				  return this.mouse.handleOldJvm10Event (id, x, y, modifiers, time);
			      }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "reset", 
			    function (includingSpin) {
				this.modelSet.calcBoundBoxDimensions (null, 1);
				this.axesAreTainted = true;
				this.transformManager.homePosition (includingSpin);
				if (this.modelSet.setCrystallographicDefaults ()) this.stateManager.setCrystallographicDefaults ();
				else this.setAxesModeMolecular (false);
				this.prevFrame = -2147483648;
				if (!this.getSpinOn ()) this.refresh (1, "Viewer:homePosition()");
			    }, "~B");
	Clazz.overrideMethod (c$, "homePosition", 
			      function () {
				  this.evalString ("reset spin");
			      });
	Clazz.defineMethod (c$, "getAppletInfo", 
			    function () {
				var info =  new java.util.Hashtable ();
				info.put ("htmlName", this.htmlName);
				info.put ("syncId", this.syncId);
				info.put ("fullName", this.fullName);
				if (this.$isApplet) {
				    info.put ("documentBase", this.appletDocumentBase);
				    info.put ("codeBase", this.appletCodeBase);
				    info.put ("registry", this.statusManager.getRegistryInfo ());
				}info.put ("version", org.jmol.viewer.JmolConstants.version);
				info.put ("date", org.jmol.viewer.JmolConstants.date);
				info.put ("javaVendor", org.jmol.viewer.Viewer.strJavaVendor);
				info.put ("javaVersion", org.jmol.viewer.Viewer.strJavaVersion);
				info.put ("operatingSystem", org.jmol.viewer.Viewer.strOSName);
				return info;
			    });
	Clazz.defineMethod (c$, "initialize", 
			    function (clearUserVariables) {
				this.global = this.stateManager.getGlobalSettings (this.global, clearUserVariables);
				this.setStartupBooleans ();
				this.global.setParamI ("_width", this.dimScreen.width);
				this.global.setParamI ("_height", this.dimScreen.height);
				if (this.haveDisplay) {
				    this.global.setParamB ("_is2D", this.isJS2D);
				    this.global.setParamB ("_multiTouchClient", this.actionManager.isMTClient ());
				    this.global.setParamB ("_multiTouchServer", this.actionManager.isMTServer ());
				}this.colorManager.resetElementColors ();
				this.setObjectColor ("background", "black");
				this.setObjectColor ("axis1", "red");
				this.setObjectColor ("axis2", "green");
				this.setObjectColor ("axis3", "blue");
				org.jmol.util.GData.setAmbientPercent (this.global.ambientPercent);
				org.jmol.util.GData.setDiffusePercent (this.global.diffusePercent);
				org.jmol.util.GData.setSpecular (this.global.specular);
				org.jmol.util.GData.setSpecularPercent (this.global.specularPercent);
				org.jmol.util.GData.setSpecularPower (-this.global.specularExponent);
				org.jmol.util.GData.setPhongExponent (this.global.phongExponent);
				org.jmol.util.GData.setSpecularPower (this.global.specularPower);
				if (this.modelSet != null) this.animationManager.setAnimationOn (false);
				this.animationManager.setAnimationFps (this.global.animationFps);
				this.statusManager.setAllowStatusReporting (this.global.statusReporting);
				this.setBooleanProperty ("antialiasDisplay", this.global.antialiasDisplay);
				this.setTransformManagerDefaults ();
			    }, "~B");
	Clazz.defineMethod (c$, "listSavedStates", 
			    function () {
				return this.stateManager.listSavedStates ();
			    });
	Clazz.defineMethod (c$, "saveOrientation", 
			    function (saveName) {
				this.stateManager.saveOrientation (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "restoreOrientation", 
			    function (saveName, timeSeconds) {
				return this.stateManager.restoreOrientation (saveName, timeSeconds, true);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "restoreRotation", 
			    function (saveName, timeSeconds) {
				this.stateManager.restoreOrientation (saveName, timeSeconds, false);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "saveModelOrientation", 
			    function () {
				this.modelSet.saveModelOrientation (this.animationManager.currentModelIndex, this.stateManager.getOrientation ());
			    });
	Clazz.defineMethod (c$, "getOrientation", 
			    function () {
				return this.stateManager.getOrientation ();
			    });
	Clazz.defineMethod (c$, "getSavedOrienationText", 
			    function (name) {
				return this.stateManager.getSavedOrientationText (name);
			    }, "~S");
	Clazz.defineMethod (c$, "restoreModelOrientation", 
			    function (modelIndex) {
				var o = this.modelSet.getModelOrientation (modelIndex);
				if (o != null) o.restore (-1, true);
			    }, "~N");
	Clazz.defineMethod (c$, "restoreModelRotation", 
			    function (modelIndex) {
				var o = this.modelSet.getModelOrientation (modelIndex);
				if (o != null) o.restore (-1, false);
			    }, "~N");
	Clazz.defineMethod (c$, "saveBonds", 
			    function (saveName) {
				this.stateManager.saveBonds (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "restoreBonds", 
			    function (saveName) {
				this.clearModelDependentObjects ();
				return this.stateManager.restoreBonds (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "saveState", 
			    function (saveName) {
				this.stateManager.saveState (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "deleteSavedState", 
			    function (saveName) {
				this.stateManager.deleteSaved ("State_" + saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "getSavedState", 
			    function (saveName) {
				return this.stateManager.getSavedState (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "saveStructure", 
			    function (saveName) {
				this.stateManager.saveStructure (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "getSavedStructure", 
			    function (saveName) {
				return this.stateManager.getSavedStructure (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "saveCoordinates", 
			    function (saveName, bsSelected) {
				this.stateManager.saveCoordinates (saveName, bsSelected);
			    }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getSavedCoordinates", 
			    function (saveName) {
				return this.stateManager.getSavedCoordinates (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "saveSelection", 
			    function (saveName) {
				this.stateManager.saveSelection (saveName, this.getSelectionSet (false));
				this.stateManager.restoreSelection (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "restoreSelection", 
			    function (saveName) {
				return this.stateManager.restoreSelection (saveName);
			    }, "~S");
	Clazz.defineMethod (c$, "getMatrixtransform", 
			    function () {
				return this.transformManager.getMatrixtransform ();
			    });
	Clazz.defineMethod (c$, "getRotationQuaternion", 
			    function () {
				return this.transformManager.getRotationQuaternion ();
			    });
	Clazz.overrideMethod (c$, "getRotationRadius", 
			      function () {
				  return this.transformManager.getRotationRadius ();
			      });
	Clazz.defineMethod (c$, "setRotationRadius", 
			    function (angstroms, doAll) {
				if (doAll) angstroms = this.transformManager.setRotationRadius (angstroms, false);
				if (this.modelSet.setRotationRadius (this.animationManager.currentModelIndex, angstroms)) this.global.setParamF ("rotationRadius", angstroms);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getRotationCenter", 
			    function () {
				return this.transformManager.getRotationCenter ();
			    });
	Clazz.defineMethod (c$, "setCenterAt", 
			    function (relativeTo, pt) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.setCenterAt (relativeTo, pt);
			    }, "~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setCenterBitSet", 
			    function (bsCenter, doScale) {
				var center = (org.jmol.util.BitSetUtil.cardinalityOf (bsCenter) > 0 ? this.getAtomSetCenter (bsCenter) : null);
				if (this.isJmolDataFrame ()) return;
				this.transformManager.setNewRotationCenter (center, doScale);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "setNewRotationCenter", 
			    function (center) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.setNewRotationCenter (center, true);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getNavigationCenter", 
			    function () {
				return this.transformManager.getNavigationCenter ();
			    });
	Clazz.defineMethod (c$, "getNavigationDepthPercent", 
			    function () {
				return this.transformManager.getNavigationDepthPercent ();
			    });
	Clazz.defineMethod (c$, "navigate", 
			    function (keyWhere, modifiers) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navigate (keyWhere, modifiers);
				if (!this.transformManager.vibrationOn && keyWhere != 0) this.refresh (1, "Viewer:navigate()");
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getNavigationOffset", 
			    function () {
				return this.transformManager.getNavigationOffset ();
			    });
	Clazz.defineMethod (c$, "getNavigationOffsetPercent", 
			    function (XorY) {
				return this.transformManager.getNavigationOffsetPercent (XorY);
			    }, "~S");
	Clazz.defineMethod (c$, "isNavigating", 
			    function () {
				return this.transformManager.isNavigating ();
			    });
	Clazz.defineMethod (c$, "isInPosition", 
			    function (axis, degrees) {
				return this.transformManager.isInPosition (axis, degrees);
			    }, "org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "move", 
			    function (dRot, dZoom, dTrans, dSlab, floatSecondsTotal, fps) {
				this.transformManager.move (dRot, dZoom, dTrans, dSlab, floatSecondsTotal, fps);
				this.moveUpdate (floatSecondsTotal);
			    }, "org.jmol.util.Vector3f,~N,org.jmol.util.Vector3f,~N,~N,~N");
	Clazz.defineMethod (c$, "waitForMoveTo", 
			    function () {
				return this.global.waitForMoveTo;
			    });
	Clazz.defineMethod (c$, "stopMotion", 
			    function () {
				this.transformManager.stopMotion ();
			    });
	Clazz.defineMethod (c$, "setRotationMatrix", 
			    function (rotationMatrix) {
				this.transformManager.setRotation (rotationMatrix);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "moveTo", 
			    function (floatSecondsTotal, center, rotAxis, degrees, rotationMatrix, zoom, xTrans, yTrans, rotationRadius, navCenter, xNav, yNav, navDepth) {
				if (!this.haveDisplay) floatSecondsTotal = 0;
				this.setTainted (true);
				this.transformManager.moveTo (floatSecondsTotal, center, rotAxis, degrees, rotationMatrix, zoom, xTrans, yTrans, rotationRadius, navCenter, xNav, yNav, navDepth);
				this.moveUpdate (floatSecondsTotal);
				this.finalizeTransformParameters ();
			    }, "~N,org.jmol.util.Point3f,org.jmol.util.Vector3f,~N,org.jmol.util.Matrix3f,~N,~N,~N,~N,org.jmol.util.Point3f,~N,~N,~N");
	Clazz.defineMethod (c$, "moveUpdate", 
			    ($fz = function (floatSecondsTotal) {
				if (floatSecondsTotal > 0) this.requestRepaintAndWait ();
				else if (floatSecondsTotal == 0) this.setSync ();
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getMoveToText", 
			    function (timespan) {
				return this.transformManager.getMoveToText (timespan, false);
			    }, "~N");
	Clazz.defineMethod (c$, "navigatePath", 
			    function (timeSeconds, path, theta, indexStart, indexEnd) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navigatePath (timeSeconds, path, theta, indexStart, indexEnd);
				this.moveUpdate (timeSeconds);
			    }, "~N,~A,~A,~N,~N");
	Clazz.defineMethod (c$, "navigatePt", 
			    function (timeSeconds, center) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navigatePt (timeSeconds, center);
				this.moveUpdate (timeSeconds);
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "navigateGuide", 
			    function (timeSeconds, pathGuide) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navigateGuide (timeSeconds, pathGuide);
				this.moveUpdate (timeSeconds);
			    }, "~N,~A");
	Clazz.defineMethod (c$, "navigateSurface", 
			    function (timeSeconds, name) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navigateSurface (timeSeconds, name);
				this.moveUpdate (timeSeconds);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "navigateAxis", 
			    function (timeSeconds, rotAxis, degrees) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navigateAxis (timeSeconds, rotAxis, degrees);
				this.moveUpdate (timeSeconds);
			    }, "~N,org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "navTranslate", 
			    function (timeSeconds, center) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navTranslate (timeSeconds, center);
				this.moveUpdate (timeSeconds);
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "navTranslatePercent", 
			    function (timeSeconds, x, y) {
				if (this.isJmolDataFrame ()) return;
				this.transformManager.navTranslatePercent (timeSeconds, x, y);
				this.moveUpdate (timeSeconds);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "setMouseEnabled", 
			    function (TF) {
				this.mouseEnabled = TF;
			    }, "~B");
	Clazz.overrideMethod (c$, "processEvent", 
			      function (groupID, eventType, touchID, iData, pt, time) {
				  this.actionManager.processEvent (groupID, eventType, touchID, iData, pt, time);
			      }, "~N,~N,~N,~N,org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "zoomBy", 
			    function (pixels) {
				if (this.mouseEnabled) this.transformManager.zoomBy (pixels);
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: zoomBy " + pixels : "");
			    }, "~N");
	Clazz.defineMethod (c$, "zoomByFactor", 
			    function (factor, x, y) {
				if (this.mouseEnabled) this.transformManager.zoomByFactor (factor, x, y);
				this.refresh (2, !this.statusManager.syncingMouse ? "" : "Mouse: zoomByFactor " + factor + (x == 2147483647 ? "" : " " + x + " " + y));
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "rotateXYBy", 
			    function (xDelta, yDelta) {
				if (this.mouseEnabled) this.transformManager.rotateXYBy (xDelta, yDelta, null);
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: rotateXYBy " + xDelta + " " + yDelta : "");
			    }, "~N,~N");
	Clazz.defineMethod (c$, "spinXYBy", 
			    function (xDelta, yDelta, speed) {
				if (this.mouseEnabled) this.transformManager.spinXYBy (xDelta, yDelta, speed);
				if (xDelta == 0 && yDelta == 0) return;
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: spinXYBy " + xDelta + " " + yDelta + " " + speed : "");
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "rotateZBy", 
			    function (zDelta, x, y) {
				if (this.mouseEnabled) this.transformManager.rotateZBy (zDelta, x, y);
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: rotateZBy " + zDelta + (x == 2147483647 ? "" : " " + x + " " + y) : "");
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "rotateSelected", 
			    function (deltaX, deltaY, bsSelected) {
				if (this.isJmolDataFrame ()) return;
				if (this.mouseEnabled) {
				    this.transformManager.rotateXYBy (deltaX, deltaY, this.setMovableBitSet (bsSelected, false));
				    this.refreshMeasures (true);
				}this.refresh (2, this.statusManager.syncingMouse ? "Mouse: rotateMolecule " + deltaX + " " + deltaY : "");
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setMovableBitSet", 
			    ($fz = function (bsSelected, checkMolecule) {
				if (bsSelected == null) bsSelected = this.getSelectionSet (false);
				bsSelected = org.jmol.util.BitSetUtil.copy (bsSelected);
				org.jmol.util.BitSetUtil.andNot (bsSelected, this.getMotionFixedAtoms ());
				if (checkMolecule && !this.global.allowMoveAtoms) bsSelected = this.modelSet.getMoleculeBitSet (bsSelected);
				return bsSelected;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "translateXYBy", 
			    function (xDelta, yDelta) {
				if (this.mouseEnabled) this.transformManager.translateXYBy (xDelta, yDelta);
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: translateXYBy " + xDelta + " " + yDelta : "");
			    }, "~N,~N");
	Clazz.defineMethod (c$, "centerAt", 
			    function (x, y, pt) {
				if (this.mouseEnabled) this.transformManager.centerAt (x, y, pt);
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: centerAt " + x + " " + y + " " + pt.x + " " + pt.y + " " + pt.z : "");
			    }, "~N,~N,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "rotateFront", 
			      function () {
				  this.transformManager.rotateFront ();
				  this.refresh (1, "Viewer:rotateFront()");
			      });
	Clazz.overrideMethod (c$, "rotateX", 
			      function (angleRadians) {
				  this.transformManager.rotateX (angleRadians);
				  this.refresh (1, "Viewer:rotateX()");
			      }, "~N");
	Clazz.overrideMethod (c$, "rotateY", 
			      function (angleRadians) {
				  this.transformManager.rotateY (angleRadians);
				  this.refresh (1, "Viewer:rotateY()");
			      }, "~N");
	Clazz.overrideMethod (c$, "rotateZ", 
			      function (angleRadians) {
				  this.transformManager.rotateZ (angleRadians);
				  this.refresh (1, "Viewer:rotateZ()");
			      }, "~N");
	Clazz.overrideMethod (c$, "rotateXDeg", 
			      function (angleDegrees) {
				  this.rotateX (angleDegrees * 0.017453292);
			      }, "~N");
	Clazz.overrideMethod (c$, "rotateYDeg", 
			      function (angleDegrees) {
				  this.rotateY (angleDegrees * 0.017453292);
			      }, "~N");
	Clazz.defineMethod (c$, "translate", 
			    function (xyz, x, type, bsAtoms) {
				var xy = (type == '\0' ? Clazz.floatToInt (x) : type == '%' ? this.transformManager.percentToPixels (xyz, x) : this.transformManager.angstromsToPixels (x * (type == 'n' ? 10 : 1)));
				if (bsAtoms != null) {
				    if (xy == 0) return;
				    this.transformManager.setSelectedTranslation (bsAtoms, xyz, xy);
				} else {
				    switch (xyz) {
				    case 'X':
				    case 'x':
					if (type == '\0') this.transformManager.translateToPercent ('x', x);
					else this.transformManager.translateXYBy (xy, 0);
					break;
				    case 'Y':
				    case 'y':
					if (type == '\0') this.transformManager.translateToPercent ('y', x);
					else this.transformManager.translateXYBy (0, xy);
					break;
				    case 'Z':
				    case 'z':
					if (type == '\0') this.transformManager.translateToPercent ('z', x);
					else this.transformManager.translateZBy (xy);
					break;
				    }
				}this.refresh (1, "Viewer:translate()");
			    }, "~S,~N,~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getTranslationXPercent", 
			    function () {
				return this.transformManager.getTranslationXPercent ();
			    });
	Clazz.defineMethod (c$, "getTranslationYPercent", 
			    function () {
				return this.transformManager.getTranslationYPercent ();
			    });
	Clazz.defineMethod (c$, "getTranslationZPercent", 
			    function () {
				return this.transformManager.getTranslationZPercent ();
			    });
	Clazz.defineMethod (c$, "getTranslationScript", 
			    function () {
				return this.transformManager.getTranslationScript ();
			    });
	Clazz.overrideMethod (c$, "getZoomPercent", 
			      function () {
				  return Clazz.floatToInt (this.getZoomSetting ());
			      });
	Clazz.defineMethod (c$, "getZoomSetting", 
			    function () {
				return this.transformManager.getZoomSetting ();
			    });
	Clazz.overrideMethod (c$, "getZoomPercentFloat", 
			      function () {
				  return this.transformManager.getZoomPercentFloat ();
			      });
	Clazz.defineMethod (c$, "getMaxZoomPercent", 
			    function () {
				return 200000;
			    });
	Clazz.defineMethod (c$, "slabReset", 
			    function () {
				this.transformManager.slabReset ();
			    });
	Clazz.defineMethod (c$, "getZoomEnabled", 
			    function () {
				return this.transformManager.zoomEnabled;
			    });
	Clazz.defineMethod (c$, "getSlabEnabled", 
			    function () {
				return this.transformManager.slabEnabled;
			    });
	Clazz.defineMethod (c$, "getSlabByMolecule", 
			    function () {
				return this.global.slabByMolecule;
			    });
	Clazz.defineMethod (c$, "getSlabByAtom", 
			    function () {
				return this.global.slabByAtom;
			    });
	Clazz.defineMethod (c$, "slabByPixels", 
			    function (pixels) {
				this.transformManager.slabByPercentagePoints (pixels);
				this.refresh (3, "slabByPixels");
			    }, "~N");
	Clazz.defineMethod (c$, "depthByPixels", 
			    function (pixels) {
				this.transformManager.depthByPercentagePoints (pixels);
				this.refresh (3, "depthByPixels");
			    }, "~N");
	Clazz.defineMethod (c$, "slabDepthByPixels", 
			    function (pixels) {
				this.transformManager.slabDepthByPercentagePoints (pixels);
				this.refresh (3, "slabDepthByPixels");
			    }, "~N");
	Clazz.defineMethod (c$, "slabInternal", 
			    function (plane, isDepth) {
				this.transformManager.slabInternal (plane, isDepth);
			    }, "org.jmol.util.Point4f,~B");
	Clazz.defineMethod (c$, "slabToPercent", 
			    function (percentSlab) {
				this.transformManager.slabToPercent (percentSlab);
			    }, "~N");
	Clazz.defineMethod (c$, "depthToPercent", 
			    function (percentDepth) {
				this.transformManager.depthToPercent (percentDepth);
			    }, "~N");
	Clazz.defineMethod (c$, "setSlabDepthInternal", 
			    function (isDepth) {
				this.transformManager.setSlabDepthInternal (isDepth);
			    }, "~B");
	Clazz.defineMethod (c$, "zValueFromPercent", 
			    function (zPercent) {
				return this.transformManager.zValueFromPercent (zPercent);
			    }, "~N");
	Clazz.overrideMethod (c$, "getUnscaledTransformMatrix", 
			      function () {
				  return this.transformManager.getUnscaledTransformMatrix ();
			      });
	Clazz.defineMethod (c$, "finalizeTransformParameters", 
			    function () {
				this.transformManager.finalizeTransformParameters ();
				this.gdata.setSlab (this.transformManager.slabValue);
				this.gdata.setDepth (this.transformManager.depthValue);
				this.gdata.setZShade (this.transformManager.zShadeEnabled, this.transformManager.zSlabValue, this.transformManager.zDepthValue, this.global.zShadePower);
			    });
	Clazz.defineMethod (c$, "rotatePoint", 
			    function (pt, ptRot) {
				this.transformManager.rotatePoint (pt, ptRot);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPt", 
			    function (pointAngstroms) {
				return this.transformManager.transformPoint (pointAngstroms);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPtVib", 
			    function (pointAngstroms, vibrationVector) {
				return this.transformManager.transformPointVib (pointAngstroms, vibrationVector);
			    }, "org.jmol.util.Point3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "transformPtScr", 
			    function (pointAngstroms, pointScreen) {
				this.transformManager.transformPointScr (pointAngstroms, pointScreen);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "transformPtNoClip", 
			    function (pointAngstroms, pt) {
				this.transformManager.transformPointNoClip2 (pointAngstroms, pt);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPt3f", 
			    function (pointAngstroms, pointScreen) {
				this.transformManager.transformPoint2 (pointAngstroms, pointScreen);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPoints", 
			    function (pointsAngstroms, pointsScreens) {
				this.transformManager.transformPoints (pointsAngstroms.length, pointsAngstroms, pointsScreens);
			    }, "~A,~A");
	Clazz.defineMethod (c$, "transformVector", 
			    function (vectorAngstroms, vectorTransformed) {
				this.transformManager.transformVector (vectorAngstroms, vectorTransformed);
			    }, "org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "unTransformPoint", 
			    function (pointScreen, pointAngstroms) {
				this.transformManager.unTransformPoint (pointScreen, pointAngstroms);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getScalePixelsPerAngstrom", 
			    function (asAntialiased) {
				return this.transformManager.scalePixelsPerAngstrom * (asAntialiased || !this.antialiasDisplay ? 1 : 0.5);
			    }, "~B");
	Clazz.defineMethod (c$, "scaleToScreen", 
			    function (z, milliAngstroms) {
				return this.transformManager.scaleToScreen (z, milliAngstroms);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "unscaleToScreen", 
			    function (z, screenDistance) {
				return this.transformManager.unscaleToScreen (z, screenDistance);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "scaleToPerspective", 
			    function (z, sizeAngstroms) {
				return this.transformManager.scaleToPerspective (z, sizeAngstroms);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setSpin", 
			    function (key, value) {
				if (!org.jmol.util.Parser.isOneOf (key, "x;y;z;fps;X;Y;Z;FPS")) return;
				var i = "x;y;z;fps;X;Y;Z;FPS".indexOf (key);
				switch (i) {
				case 0:
				    this.transformManager.setSpinXYZ (value, NaN, NaN);
				    break;
				case 2:
				    this.transformManager.setSpinXYZ (NaN, value, NaN);
				    break;
				case 4:
				    this.transformManager.setSpinXYZ (NaN, NaN, value);
				    break;
				case 6:
				default:
				    this.transformManager.setSpinFps (value);
				    break;
				case 10:
				    this.transformManager.setNavXYZ (value, NaN, NaN);
				    break;
				case 12:
				    this.transformManager.setNavXYZ (NaN, value, NaN);
				    break;
				case 14:
				    this.transformManager.setNavXYZ (NaN, NaN, value);
				    break;
				case 16:
				    this.transformManager.setNavFps (value);
				    break;
				}
				this.global.setParamI ((i < 10 ? "spin" : "nav") + key, value);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getSpinState", 
			    function () {
				return this.transformManager.getSpinState (false);
			    });
	Clazz.defineMethod (c$, "setSpinOn", 
			    function (spinOn) {
				this.transformManager.setSpinOn (spinOn);
			    }, "~B");
	Clazz.defineMethod (c$, "getSpinOn", 
			    function () {
				return this.transformManager.getSpinOn ();
			    });
	Clazz.defineMethod (c$, "setNavOn", 
			    function (navOn) {
				this.transformManager.setNavOn (navOn);
			    }, "~B");
	Clazz.defineMethod (c$, "getNavOn", 
			    function () {
				return this.transformManager.getNavOn ();
			    });
	Clazz.defineMethod (c$, "setNavXYZ", 
			    function (x, y, z) {
				this.transformManager.setNavXYZ (Clazz.floatToInt (x), Clazz.floatToInt (y), Clazz.floatToInt (z));
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "getOrientationText", 
			    function (type, name) {
				return (name == null ? this.transformManager.getOrientationText (type) : this.stateManager.getSavedOrientationText (name));
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getOrientationInfo", 
			    function () {
				return this.transformManager.getOrientationInfo ();
			    });
	Clazz.defineMethod (c$, "getMatrixRotate", 
			    function () {
				return this.transformManager.getMatrixRotate ();
			    });
	Clazz.defineMethod (c$, "getAxisAngle", 
			    function (axisAngle) {
				this.transformManager.getAxisAngle (axisAngle);
			    }, "org.jmol.util.AxisAngle4f");
	Clazz.defineMethod (c$, "getTransformText", 
			    function () {
				return this.transformManager.getTransformText ();
			    });
	Clazz.defineMethod (c$, "getRotation", 
			    function (matrixRotation) {
				this.transformManager.getRotation (matrixRotation);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "getCurrentColorRange", 
			    function () {
				return this.colorManager.getPropertyColorRange ();
			    });
	Clazz.defineMethod (c$, "setDefaultColors", 
			    ($fz = function (isRasmol) {
				this.colorManager.setDefaultColors (isRasmol);
				this.global.setParamB ("colorRasmol", isRasmol);
				this.global.setParamS ("defaultColorScheme", (isRasmol ? "rasmol" : "jmol"));
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getDefaultTranslucent", 
			    function () {
				return this.global.defaultTranslucent;
			    });
	Clazz.defineMethod (c$, "getColorArgbOrGray", 
			    function (colix) {
				return this.gdata.getColorArgbOrGray (colix);
			    }, "~N");
	Clazz.defineMethod (c$, "setRubberbandArgb", 
			    function (argb) {
				this.colorManager.setRubberbandArgb (argb);
			    }, "~N");
	Clazz.defineMethod (c$, "getColixRubberband", 
			    function () {
				return this.colorManager.colixRubberband;
			    });
	Clazz.defineMethod (c$, "setElementArgb", 
			    function (elementNumber, argb) {
				this.global.setParamS ("=color " + org.jmol.util.Elements.elementNameFromNumber (elementNumber), org.jmol.util.Escape.escapeColor (argb));
				this.colorManager.setElementArgb (elementNumber, argb);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getVectorScale", 
			    function () {
				return this.global.vectorScale;
			    });
	Clazz.defineMethod (c$, "getVectorSymmetry", 
			    function () {
				return this.global.vectorSymmetry;
			    });
	Clazz.overrideMethod (c$, "setVectorScale", 
			      function (scale) {
				  this.global.setParamF ("vectorScale", scale);
				  this.global.vectorScale = scale;
			      }, "~N");
	Clazz.defineMethod (c$, "getDefaultDrawArrowScale", 
			    function () {
				return this.global.defaultDrawArrowScale;
			    });
	Clazz.defineMethod (c$, "getVibrationScale", 
			    function () {
				return this.global.vibrationScale;
			    });
	Clazz.defineMethod (c$, "getVibrationPeriod", 
			    function () {
				return this.global.vibrationPeriod;
			    });
	Clazz.defineMethod (c$, "isVibrationOn", 
			    function () {
				return this.transformManager.vibrationOn;
			    });
	Clazz.overrideMethod (c$, "setVibrationScale", 
			      function (scale) {
				  this.transformManager.setVibrationScale (scale);
				  this.global.vibrationScale = scale;
				  this.global.setParamF ("vibrationScale", scale);
			      }, "~N");
	Clazz.defineMethod (c$, "setVibrationOff", 
			    function () {
				this.transformManager.setVibrationPeriod (0);
			    });
	Clazz.overrideMethod (c$, "setVibrationPeriod", 
			      function (period) {
				  this.transformManager.setVibrationPeriod (period);
				  period = Math.abs (period);
				  this.global.vibrationPeriod = period;
				  this.global.setParamF ("vibrationPeriod", period);
			      }, "~N");
	Clazz.defineMethod (c$, "setObjectColor", 
			    function (name, colorName) {
				if (colorName == null || colorName.length == 0) return;
				this.setObjectArgb (name, org.jmol.util.ColorUtil.getArgbFromString (colorName));
			    }, "~S,~S");
	Clazz.defineMethod (c$, "setObjectArgb", 
			    function (name, argb) {
				var objId = org.jmol.viewer.StateManager.getObjectIdFromName (name);
				if (objId < 0) {
				    if (name.equalsIgnoreCase ("axes")) {
					this.setObjectArgb ("axis1", argb);
					this.setObjectArgb ("axis2", argb);
					this.setObjectArgb ("axis3", argb);
				    }return;
				}this.global.objColors[objId] = argb;
				switch (objId) {
				case 0:
				    this.gdata.setBackgroundArgb (argb);
				    this.colorManager.setColixBackgroundContrast (argb);
				    break;
				}
				this.global.setParamS (name + "Color", org.jmol.util.Escape.escapeColor (argb));
			    }, "~S,~N");
	Clazz.defineMethod (c$, "setBackgroundImage", 
			    function (fileName, image) {
				this.global.backgroundImageFileName = fileName;
				this.gdata.setBackgroundImage (image);
			    }, "~S,~O");
	Clazz.defineMethod (c$, "getObjectArgb", 
			    function (objId) {
				return this.global.objColors[objId];
			    }, "~N");
	Clazz.defineMethod (c$, "getObjectColix", 
			    function (objId) {
				var argb = this.getObjectArgb (objId);
				if (argb == 0) return this.getColixBackgroundContrast ();
				return org.jmol.util.Colix.getColix (argb);
			    }, "~N");
	Clazz.defineMethod (c$, "getObjectState", 
			    function (name) {
				var objId = org.jmol.viewer.StateManager.getObjectIdFromName (name.equalsIgnoreCase ("axes") ? "axis" : name);
				if (objId < 0) return "";
				var mad = this.getObjectMad (objId);
				var s =  new org.jmol.util.StringXBuilder ().append ("\n");
				org.jmol.shape.Shape.appendCmd (s, name + (mad == 0 ? " off" : mad == 1 ? " on" : mad == -1 ? " dotted" : mad < 20 ? " " + mad : " " + (mad / 2000)));
				return s.toString ();
			    }, "~S");
	Clazz.overrideMethod (c$, "setColorBackground", 
			      function (colorName) {
				  this.setObjectColor ("background", colorName);
			      }, "~S");
	Clazz.overrideMethod (c$, "getBackgroundArgb", 
			      function () {
				  return this.getObjectArgb (0);
			      });
	Clazz.defineMethod (c$, "setObjectMad", 
			    function (iShape, name, mad) {
				var objId = org.jmol.viewer.StateManager.getObjectIdFromName (name.equalsIgnoreCase ("axes") ? "axis" : name);
				if (objId < 0) return;
				if (mad == -2 || mad == -4) {
				    var m = mad + 3;
				    mad = this.getObjectMad (objId);
				    if (mad == 0) mad = m;
				}this.global.setParamB ("show" + name, mad != 0);
				this.global.objStateOn[objId] = (mad != 0);
				if (mad == 0) return;
				this.global.objMad[objId] = mad;
				this.setShapeSize (iShape, mad, null);
			    }, "~N,~S,~N");
	Clazz.defineMethod (c$, "getObjectMad", 
			    function (objId) {
				return (this.global.objStateOn[objId] ? this.global.objMad[objId] : 0);
			    }, "~N");
	Clazz.defineMethod (c$, "setPropertyColorScheme", 
			    function (scheme, isTranslucent, isOverloaded) {
				this.global.propertyColorScheme = scheme;
				if (scheme.startsWith ("translucent ")) {
				    isTranslucent = true;
				    scheme = scheme.substring (12).trim ();
				}this.colorManager.setPropertyColorScheme (scheme, isTranslucent, isOverloaded);
			    }, "~S,~B,~B");
	Clazz.defineMethod (c$, "getPropertyColorScheme", 
			    function () {
				return this.global.propertyColorScheme;
			    });
	Clazz.defineMethod (c$, "getColixBackgroundContrast", 
			    function () {
				return this.colorManager.colixBackgroundContrast;
			    });
	Clazz.defineMethod (c$, "getSpecularState", 
			    function () {
				return this.global.getSpecularState ();
			    });
	Clazz.defineMethod (c$, "getColixAtomPalette", 
			    function (atom, pid) {
				return this.colorManager.getColixAtomPalette (atom, pid);
			    }, "org.jmol.modelset.Atom,~N");
	Clazz.defineMethod (c$, "getColixBondPalette", 
			    function (bond, pid) {
				return this.colorManager.getColixBondPalette (bond, pid);
			    }, "org.jmol.modelset.Bond,~N");
	Clazz.defineMethod (c$, "getColorSchemeList", 
			    function (colorScheme) {
				return this.colorManager.getColorSchemeList (colorScheme);
			    }, "~S");
	Clazz.defineMethod (c$, "setUserScale", 
			    function (scale) {
				this.colorManager.setUserScale (scale);
			    }, "~A");
	Clazz.defineMethod (c$, "getColixForPropertyValue", 
			    function (val) {
				return this.colorManager.getColixForPropertyValue (val);
			    }, "~N");
	Clazz.defineMethod (c$, "getColorPointForPropertyValue", 
			    function (val) {
				return org.jmol.util.ColorUtil.colorPointFromInt2 (this.gdata.getColorArgbOrGray (this.colorManager.getColixForPropertyValue (val)));
			    }, "~N");
	Clazz.defineMethod (c$, "select", 
			    function (bs, isGroup, addRemove, isQuiet) {
				if (isGroup) bs = this.getUndeletedGroupAtomBits (bs);
				this.selectionManager.select (bs, addRemove, isQuiet);
				this.shapeManager.setShapeSizeBs (1, 2147483647, null, null);
			    }, "org.jmol.util.BitSet,~B,Boolean,~B");
	Clazz.overrideMethod (c$, "setSelectionSet", 
			      function (set) {
				  this.select (set, false, null, true);
			      }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "selectBonds", 
			    function (bs) {
				this.shapeManager.setShapeSizeBs (1, 2147483647, null, bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "displayAtoms", 
			    function (bs, isDisplay, isGroup, addRemove, isQuiet) {
				if (isGroup) bs = this.getUndeletedGroupAtomBits (bs);
				if (isDisplay) this.selectionManager.display (this.modelSet, bs, addRemove, isQuiet);
				else this.selectionManager.hide (this.modelSet, bs, addRemove, isQuiet);
			    }, "org.jmol.util.BitSet,~B,~B,Boolean,~B");
	Clazz.defineMethod (c$, "getUndeletedGroupAtomBits", 
			    ($fz = function (bs) {
				bs = this.getAtomBits (1087373318, bs);
				org.jmol.util.BitSetUtil.andNot (bs, this.selectionManager.getDeletedAtoms ());
				return bs;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getHiddenSet", 
			    function () {
				return this.selectionManager.getHiddenSet ();
			    });
	Clazz.defineMethod (c$, "isSelected", 
			    function (atomIndex) {
				return this.selectionManager.isSelected (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "isInSelectionSubset", 
			    function (atomIndex) {
				return this.selectionManager.isInSelectionSubset (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "reportSelection", 
			    function (msg) {
				if (this.modelSet.getSelectionHaloEnabled ()) this.setTainted (true);
				if (this.isScriptQueued || this.global.debugScript) this.scriptStatus (msg);
			    }, "~S");
	Clazz.defineMethod (c$, "getAtomSetCenter", 
			    function (bs) {
				return this.modelSet.getAtomSetCenter (bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "clearAtomSets", 
			    ($fz = function () {
				this.setSelectionSubset (null);
				this.definedAtomSets.clear ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "selectAll", 
			      function () {
				  this.selectionManager.selectAll (false);
			      });
	Clazz.defineMethod (c$, "setNoneSelected", 
			    function (noneSelected) {
				this.noneSelected = noneSelected;
			    }, "~B");
	Clazz.defineMethod (c$, "getNoneSelected", 
			    function () {
				return (this.noneSelected ? Boolean.TRUE : Boolean.FALSE);
			    });
	Clazz.overrideMethod (c$, "clearSelection", 
			      function () {
				  this.selectionManager.clearSelection (true);
				  this.global.setParamB ("hideNotSelected", false);
			      });
	Clazz.defineMethod (c$, "setSelectionSubset", 
			    function (subset) {
				this.selectionManager.setSelectionSubset (subset);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getSelectionSubset", 
			    function () {
				return this.selectionManager.getSelectionSubset ();
			    });
	Clazz.defineMethod (c$, "invertSelection", 
			    function () {
				this.selectionManager.invertSelection ();
			    });
	Clazz.defineMethod (c$, "getSelectionSet", 
			    function (includeDeleted) {
				return this.selectionManager.getSelectionSet (includeDeleted);
			    }, "~B");
	Clazz.defineMethod (c$, "setSelectedAtom", 
			    function (atomIndex, TF) {
				this.selectionManager.setSelectedAtom (atomIndex, TF);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "isAtomSelected", 
			    function (atomIndex) {
				return this.selectionManager.isAtomSelected (atomIndex);
			    }, "~N");
	Clazz.overrideMethod (c$, "getSelectionCount", 
			      function () {
				  return this.selectionManager.getSelectionCount ();
			      });
	Clazz.defineMethod (c$, "setFormalCharges", 
			    function (formalCharge) {
				this.modelSet.setFormalCharges (this.getSelectionSet (false), formalCharge);
			    }, "~N");
	Clazz.overrideMethod (c$, "addSelectionListener", 
			      function (listener) {
				  this.selectionManager.addListener (listener);
			      }, "org.jmol.api.JmolSelectionListener");
	Clazz.overrideMethod (c$, "removeSelectionListener", 
			      function (listener) {
				  this.selectionManager.addListener (listener);
			      }, "org.jmol.api.JmolSelectionListener");
	Clazz.defineMethod (c$, "getAtomBitSetEval", 
			    function (eval, atomExpression) {
				if (eval == null) eval =  new org.jmol.script.ScriptEvaluator (this);
				return org.jmol.script.ScriptEvaluator.getAtomBitSet (eval, atomExpression);
			    }, "org.jmol.script.ScriptEvaluator,~O");
	Clazz.defineMethod (c$, "getAtomBitSet", 
			    function (atomExpression) {
				return this.getAtomBitSetEval (this.$eval, atomExpression);
			    }, "~O");
	Clazz.defineMethod (c$, "getAtomBitSetVector", 
			    function (atomExpression) {
				return org.jmol.script.ScriptEvaluator.getAtomBitSetVector (this.$eval, this.getAtomCount (), atomExpression);
			    }, "~O");
	Clazz.overrideMethod (c$, "setModeMouse", 
			      function (modeMouse) {
				  if (modeMouse == -1) {
				      if (this.mouse != null) {
					  this.mouse.dispose ();
					  this.mouse = null;
				      }this.clearScriptQueue ();
				      this.haltScriptExecution ();
				      this.stopAnimationThreads ("setModeMouse NONE");
				      this.scriptManager.clear ();
				      this.gdata.destroy ();
				      if (this.jmolpopup != null) this.jmolpopup.dispose ();
				      if (this.modelkitPopup != null) this.modelkitPopup.dispose ();
				      try {
					  if (this.appConsole != null) {
					      this.appConsole.dispose ();
					      this.appConsole = null;
					  }if (this.scriptEditor != null) {
					      this.scriptEditor.dispose ();
					      this.scriptEditor = null;
					  }} catch (e) {
					      if (Clazz.exceptionOf (e, Exception)) {
					      } else {
						  throw e;
					      }
					  }
				  }}, "~N");
	Clazz.defineMethod (c$, "getRubberBandSelection", 
			    function () {
				return (this.haveDisplay ? this.actionManager.getRubberBand () : null);
			    });
	Clazz.defineMethod (c$, "isBound", 
			    function (action, gesture) {
				return (this.haveDisplay && this.actionManager.isBound (action, gesture));
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getCursorX", 
			    function () {
				return (this.haveDisplay ? this.actionManager.getCurrentX () : 0);
			    });
	Clazz.defineMethod (c$, "getCursorY", 
			    function () {
				return (this.haveDisplay ? this.actionManager.getCurrentY () : 0);
			    });
	Clazz.defineMethod (c$, "getDefaultDirectory", 
			    function () {
				return this.global.defaultDirectory;
			    });
	Clazz.overrideMethod (c$, "getBufferedInputStream", 
			      function (fullPathName) {
				  return this.fileManager.getBufferedInputStream (fullPathName);
			      }, "~S");
	Clazz.defineMethod (c$, "getBufferedReaderOrErrorMessageFromName", 
			    function (name, fullPathNameReturn, isBinary) {
				return this.fileManager.getBufferedReaderOrErrorMessageFromName (name, fullPathNameReturn, isBinary, true);
			    }, "~S,~A,~B");
	Clazz.defineMethod (c$, "setLoadParameters", 
			    ($fz = function (htParams, isAppend) {
				if (htParams == null) htParams =  new java.util.Hashtable ();
				htParams.put ("viewer", this);
				if (this.global.atomTypes.length > 0) htParams.put ("atomTypes", this.global.atomTypes);
				if (!htParams.containsKey ("lattice")) htParams.put ("lattice", this.global.getDefaultLattice ());
				if (this.global.applySymmetryToBonds) htParams.put ("applySymmetryToBonds", Boolean.TRUE);
				if (this.global.pdbGetHeader) htParams.put ("getHeader", Boolean.TRUE);
				if (this.global.pdbSequential) htParams.put ("isSequential", Boolean.TRUE);
				htParams.put ("stateScriptVersionInt", Integer.$valueOf (this.stateScriptVersionInt));
				if (!htParams.containsKey ("filter")) {
				    var filter = this.getDefaultLoadFilter ();
				    if (filter.length > 0) htParams.put ("filter", filter);
				}if (isAppend && !this.global.appendNew && this.getAtomCount () > 0) htParams.put ("merging", Boolean.TRUE);
				return htParams;
			    }, $fz.isPrivate = true, $fz), "java.util.Map,~B");
	Clazz.overrideMethod (c$, "openFileAsync", 
			      function (fileName) {
				  this.openFileAsyncPDB (fileName, false);
			      }, "~S");
	Clazz.overrideMethod (c$, "openFileAsyncPDB", 
			      function (fileName, pdbCartoons) {
				  fileName = fileName.trim ();
				  var allowScript = (!fileName.startsWith ("\t"));
				  if (!allowScript) fileName = fileName.substring (1);
				  fileName = fileName.$replace ('\\', '/');
				  if (this.$isApplet && fileName.indexOf ("://") < 0) fileName = "file://" + (fileName.startsWith ("/") ? "" : "/") + fileName;
				  var cmd = null;
				  if (fileName.endsWith ("jvxl")) cmd = "isosurface ";
				  else if (!fileName.endsWith (".spt")) {
				      var type = this.fileManager.getFileTypeName (fileName);
				      if (type == null) {
					  type = org.jmol.io.JmolBinary.determineSurfaceTypeIs (this.getBufferedInputStream (fileName));
					  if (type != null) {
					      this.evalString ("if (_filetype == 'Pdb') { isosurface sigma 1.0 within 2.0 {*} " + org.jmol.util.Escape.escapeStr (fileName) + " mesh nofill }; else; { isosurface " + org.jmol.util.Escape.escapeStr (fileName) + "}");
					      return;
					  }} else if (type.equals ("Jmol")) {
					      cmd = "load ";
					  } else if (type.equals ("Cube")) {
					      cmd = "isosurface sign red blue ";
					  } else if (!type.equals ("spt")) {
					      cmd = this.global.defaultDropScript;
					      cmd = org.jmol.util.TextFormat.simpleReplace (cmd, "%FILE", fileName);
					      cmd = org.jmol.util.TextFormat.simpleReplace (cmd, "%ALLOWCARTOONS", "" + pdbCartoons);
					      this.evalString (cmd);
					      return;
					  }}if (allowScript && this.scriptEditorVisible && cmd == null) this.showEditor ([fileName, this.getFileAsString (fileName)]);
				  else this.evalString ((cmd == null ? "script " : cmd) + org.jmol.util.Escape.escapeStr (fileName));
			      }, "~S,~B");
	Clazz.defineMethod (c$, "openFile", 
			    function (fileName) {
				this.zap (true, true, false);
				return this.loadModelFromFile (null, fileName, null, null, false, null, null, 0);
			    }, "~S");
	Clazz.overrideMethod (c$, "openFiles", 
			      function (fileNames) {
				  this.zap (true, true, false);
				  return this.loadModelFromFile (null, null, fileNames, null, false, null, null, 0);
			      }, "~A");
	Clazz.overrideMethod (c$, "openReader", 
			      function (fullPathName, fileName, reader) {
				  this.zap (true, true, false);
				  return this.loadModelFromFile (fullPathName, fileName, null, reader, false, null, null, 0);
			      }, "~S,~S,java.io.Reader");
	Clazz.overrideMethod (c$, "openDOM", 
			      function (DOMNode) {
				  this.zap (true, true, false);
				  return this.loadModelFromFile ("?", "?", null, DOMNode, false, null, null, 0);
			      }, "~O");
	Clazz.defineMethod (c$, "loadModelFromFile", 
			    function (fullPathName, fileName, fileNames, reader, isAppend, htParams, loadScript, tokType) {
				if (htParams == null) htParams = this.setLoadParameters (null, isAppend);
				var atomSetCollection;
				var saveInfo = this.fileManager.getFileInfo ();
				if (fileNames != null) {
				    if (loadScript == null) {
					loadScript =  new org.jmol.util.StringXBuilder ().append ("load files");
					for (var i = 0; i < fileNames.length; i++) loadScript.append (" /*file*/$FILENAME" + (i + 1) + "$");

				    }var timeBegin = System.currentTimeMillis ();
				    atomSetCollection = this.fileManager.createAtomSetCollectionFromFiles (fileNames, this.setLoadParameters (htParams, isAppend), isAppend);
				    var ms = System.currentTimeMillis () - timeBegin;
				    var msg = "";
				    for (var i = 0; i < fileNames.length; i++) msg += (i == 0 ? "" : ",") + fileNames[i];

				    org.jmol.util.Logger.info ("openFiles(" + fileNames.length + ") " + ms + " ms");
				    fileNames = htParams.get ("fullPathNames");
				    var fileTypes = htParams.get ("fileTypes");
				    var s = loadScript.toString ();
				    for (var i = 0; i < fileNames.length; i++) {
					var fname = fileNames[i];
					if (fileTypes != null && fileTypes[i] != null) fname = fileTypes[i] + "::" + fname;
					s = org.jmol.util.TextFormat.simpleReplace (s, "$FILENAME" + (i + 1) + "$", org.jmol.util.Escape.escapeStr (fname.$replace ('\\', '/')));
				    }
				    loadScript =  new org.jmol.util.StringXBuilder ().append (s);
				} else if (reader == null) {
				    if (loadScript == null) loadScript =  new org.jmol.util.StringXBuilder ().append ("load /*file*/$FILENAME$");
				    atomSetCollection = this.openFile (fileName, isAppend, htParams, loadScript);
				} else if (Clazz.instanceOf (reader, java.io.Reader)) {
				    atomSetCollection = this.fileManager.createAtomSetCollectionFromReader (fullPathName, fileName, reader, htParams);
				} else {
				    atomSetCollection = this.fileManager.createAtomSetCollectionFromDOM (reader, htParams);
				}if (tokType != 0) {
				    this.fileManager.setFileInfo (saveInfo);
				    return this.loadAtomDataAndReturnError (atomSetCollection, tokType);
				}if (htParams.containsKey ("isData")) return atomSetCollection;
				if (loadScript != null) {
				    var fname = htParams.get ("fullPathName");
				    if (fname == null) fname = "";
				    if (htParams.containsKey ("loadScript")) loadScript = htParams.get ("loadScript");
				    htParams.put ("loadScript", loadScript =  new org.jmol.util.StringXBuilder ().append (org.jmol.util.TextFormat.simpleReplace (loadScript.toString (), "$FILENAME$", org.jmol.util.Escape.escapeStr (fname.$replace ('\\', '/')))));
				}return this.createModelSetAndReturnError (atomSetCollection, isAppend, loadScript);
			    }, "~S,~S,~A,~O,~B,java.util.Map,org.jmol.util.StringXBuilder,~N");
	Clazz.defineMethod (c$, "setLigandModel", 
			    function (id, data) {
				id = id.toUpperCase ();
				if (this.ligandModels == null) this.ligandModels =  new java.util.Hashtable ();
				this.ligandModels.put (id + "_data", data);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getLigandModel", 
			    function (id) {
				if (id == null) {
				    if (this.ligandModelSet != null) {
					var e = this.ligandModels.entrySet ().iterator ();
					while (e.hasNext ()) {
					    var entry = e.next ();
					    if (Clazz.instanceOf (entry.getValue (), Boolean)) e.remove ();
					}
				    }return null;
				}id = id.toUpperCase ();
				if (this.ligandModelSet == null) this.ligandModelSet =  new java.util.Hashtable ();
				this.ligandModelSet.put (id, Boolean.TRUE);
				if (this.ligandModels == null) this.ligandModels =  new java.util.Hashtable ();
				var model = this.ligandModels.get (id);
				var data;
				var fname = null;
				if (Clazz.instanceOf (model, Boolean)) return null;
				if (model == null) model = this.ligandModels.get (id + "_data");
				var isError = false;
				if (model == null) {
				    fname = this.setLoadFormat ("#" + id, '#', false);
				    if (fname.length == 0) return null;
				    this.scriptEcho ("fetching " + fname);
				    model = this.getFileAsString (fname);
				    isError = ((model).indexOf ("java.") == 0);
				    if (!isError) this.ligandModels.put (id + "_data", model);
				}if (!isError && Clazz.instanceOf (model, String)) {
				    data = model;
				    if (data.length != 0) {
					var htParams =  new java.util.Hashtable ();
					htParams.put ("modelOnly", Boolean.TRUE);
					model = this.getModelAdapter ().getAtomSetCollectionReader ("ligand", null, org.jmol.io.JmolBinary.getBufferedReaderForString (data), htParams);
					isError = (Clazz.instanceOf (model, String));
					if (!isError) {
					    model = this.getModelAdapter ().getAtomSetCollection (model);
					    isError = (Clazz.instanceOf (model, String));
					    if (fname != null && !isError) this.scriptEcho (this.getModelAdapter ().getAtomSetCollectionAuxiliaryInfo (model).get ("modelLoadNote"));
					}}}if (isError) {
					    this.scriptEcho (model.toString ());
					    this.ligandModels.put (id, Boolean.FALSE);
					    return null;
					}return model;
			    }, "~S");
	Clazz.defineMethod (c$, "openFile", 
			    ($fz = function (fileName, isAppend, htParams, loadScript) {
				if (fileName == null) return null;
				if (fileName.indexOf ("[]") >= 0) {
				    return null;
				}var atomSetCollection;
				var msg = "openFile(" + fileName + ")";
				org.jmol.util.Logger.startTimer (msg);
				htParams = this.setLoadParameters (htParams, isAppend);
				var isLoadVariable = fileName.startsWith ("@");
				var haveFileData = (htParams.containsKey ("fileData"));
				if (fileName.indexOf ('$') == 0) htParams.put ("smilesString", fileName.substring (1));
				var isString = (fileName.equalsIgnoreCase ("string") || fileName.equals ("Jmol Model Kit"));
				var strModel = null;
				if (haveFileData) {
				    strModel = htParams.get ("fileData");
				    if (htParams.containsKey ("isData")) {
					return this.loadInlineScript (strModel, '\0', isAppend, htParams);
				    }} else if (isString) {
					strModel = this.modelSet.getInlineData (-1);
					if (strModel == null) if (this.isModelKitMode ()) strModel = "1 0 C 0 0";
					else return "cannot find string data";
					if (loadScript != null) htParams.put ("loadScript", loadScript =  new org.jmol.util.StringXBuilder ().append (org.jmol.util.TextFormat.simpleReplace (loadScript.toString (), "$FILENAME$", "data \"model inline\"\n" + strModel + "end \"model inline\"")));
				    }if (strModel != null) {
					if (!isAppend) this.zap (true, false, false);
					atomSetCollection = this.fileManager.createAtomSetCollectionFromString (strModel, loadScript, htParams, isAppend, isLoadVariable || haveFileData && !isString);
				    } else {
					atomSetCollection = this.fileManager.createAtomSetCollectionFromFile (fileName, htParams, isAppend);
				    }org.jmol.util.Logger.checkTimer (msg, false);
				return atomSetCollection;
			    }, $fz.isPrivate = true, $fz), "~S,~B,java.util.Map,org.jmol.util.StringXBuilder");
	Clazz.overrideMethod (c$, "openStringInline", 
			      function (strModel) {
				  return this.openStringInlineParams (strModel, null, false);
			      }, "~S");
	Clazz.defineMethod (c$, "loadInline", 
			    function (strModel) {
				return this.loadInlineScript (strModel, this.global.inlineNewlineChar, false, null);
			    }, "~S");
	Clazz.defineMethod (c$, "loadInline", 
			    function (strModel, newLine) {
				return this.loadInlineScript (strModel, newLine, false, null);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "loadInline", 
			    function (strModel, isAppend) {
				return this.loadInlineScript (strModel, '\0', isAppend, null);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "loadInline", 
			    function (arrayModels) {
				return this.loadInline (arrayModels, false);
			    }, "~A");
	Clazz.defineMethod (c$, "loadInline", 
			    function (arrayModels, isAppend) {
				if (arrayModels == null || arrayModels.length == 0) return null;
				return this.openStringsInline (arrayModels, null, isAppend);
			    }, "~A,~B");
	Clazz.defineMethod (c$, "loadInline", 
			    function (arrayData, isAppend) {
				if (arrayData == null || arrayData.size () == 0) return null;
				if (!isAppend) this.zap (true, false, false);
				var atomSetCollection = this.fileManager.createAtomSeCollectionFromArrayData (arrayData, this.setLoadParameters (null, isAppend), isAppend);
				return this.createModelSetAndReturnError (atomSetCollection, isAppend, null);
			    }, "java.util.List,~B");
	Clazz.defineMethod (c$, "loadInlineScript", 
			    ($fz = function (strModel, newLine, isAppend, htParams) {
				if (strModel == null || strModel.length == 0) return null;
				if (strModel.startsWith ("LOAD files")) {
				    this.script (strModel);
				    return null;
				}strModel = this.fixInlineString (strModel, newLine);
				if (newLine.charCodeAt (0) != 0) org.jmol.util.Logger.info ("loading model inline, " + strModel.length + " bytes, with newLine character " + (newLine).charCodeAt (0) + " isAppend=" + isAppend);
				org.jmol.util.Logger.debug (strModel);
				var datasep = this.getDataSeparator ();
				var i;
				if (datasep != null && datasep !== "" && (i = strModel.indexOf (datasep)) >= 0 && strModel.indexOf ("# Jmol state") < 0) {
				    var n = 2;
				    while ((i = strModel.indexOf (datasep, i + 1)) >= 0) n++;

				    var strModels =  new Array (n);
				    var pt = 0;
				    var pt0 = 0;
				    for (i = 0; i < n; i++) {
					pt = strModel.indexOf (datasep, pt0);
					if (pt < 0) pt = strModel.length;
					strModels[i] = strModel.substring (pt0, pt);
					pt0 = pt + datasep.length;
				    }
				    return this.openStringsInline (strModels, htParams, isAppend);
				}return this.openStringInlineParams (strModel, htParams, isAppend);
			    }, $fz.isPrivate = true, $fz), "~S,~S,~B,java.util.Map");
	Clazz.defineMethod (c$, "fixInlineString", 
			    function (strModel, newLine) {
				var i;
				if (strModel.indexOf ("\\/n") >= 0) {
				    strModel = org.jmol.util.TextFormat.simpleReplace (strModel, "\n", "");
				    strModel = org.jmol.util.TextFormat.simpleReplace (strModel, "\\/n", "\n");
				    newLine = String.fromCharCode ( 0);
				}if (newLine.charCodeAt (0) != 0 && newLine != '\n') {
				    var repEmpty = (strModel.indexOf ('\n') >= 0);
				    var len = strModel.length;
				    for (i = 0; i < len && strModel.charAt (i) == ' '; ++i) {
				    }
				    if (i < len && strModel.charAt (i) == newLine) strModel = strModel.substring (i + 1);
				    if (repEmpty) strModel = org.jmol.util.TextFormat.simpleReplace (strModel, "" + newLine, "");
				    else strModel = strModel.$replace (newLine, '\n');
				}return strModel;
			    }, "~S,~S");
	Clazz.defineMethod (c$, "openStringInlineParams", 
			    ($fz = function (strModel, htParams, isAppend) {
				var br =  new java.io.BufferedReader ( new java.io.StringReader (strModel));
				var type = this.getModelAdapter ().getFileTypeName (br);
				if (type == null) return "unknown file type";
				if (type.equals ("spt")) {
				    return "cannot open script inline";
				}htParams = this.setLoadParameters (htParams, isAppend);
				var loadScript = htParams.get ("loadScript");
				var isLoadCommand = htParams.containsKey ("isData");
				if (loadScript == null) loadScript =  new org.jmol.util.StringXBuilder ();
				if (!isAppend) this.zap (true, false, false);
				var atomSetCollection = this.fileManager.createAtomSetCollectionFromString (strModel, loadScript, htParams, isAppend, isLoadCommand);
				return this.createModelSetAndReturnError (atomSetCollection, isAppend, loadScript);
			    }, $fz.isPrivate = true, $fz), "~S,java.util.Map,~B");
	Clazz.defineMethod (c$, "openStringsInline", 
			    ($fz = function (arrayModels, htParams, isAppend) {
				var loadScript =  new org.jmol.util.StringXBuilder ();
				if (!isAppend) this.zap (true, false, false);
				var atomSetCollection = this.fileManager.createAtomSeCollectionFromStrings (arrayModels, loadScript, this.setLoadParameters (htParams, isAppend), isAppend);
				return this.createModelSetAndReturnError (atomSetCollection, isAppend, loadScript);
			    }, $fz.isPrivate = true, $fz), "~A,java.util.Map,~B");
	Clazz.defineMethod (c$, "getInlineChar", 
			    function () {
				return this.global.inlineNewlineChar;
			    });
	Clazz.defineMethod (c$, "getDataSeparator", 
			    function () {
				return this.global.getParameter ("dataseparator");
			    });
	Clazz.defineMethod (c$, "createModelSetAndReturnError", 
			    ($fz = function (atomSetCollection, isAppend, loadScript) {
				var fullPathName = this.fileManager.getFullPathName ();
				var fileName = this.fileManager.getFileName ();
				var errMsg;
				if (loadScript == null) {
				    this.setBooleanProperty ("preserveState", false);
				    loadScript =  new org.jmol.util.StringXBuilder ().append ("load \"???\"");
				}if (Clazz.instanceOf (atomSetCollection, String)) {
				    errMsg = atomSetCollection;
				    this.setFileLoadStatus (org.jmol.constant.EnumFileStatus.NOT_LOADED, fullPathName, null, null, errMsg);
				    if (this.displayLoadErrors && !isAppend && !errMsg.equals ("#CANCELED#")) this.zapMsg (errMsg);
				    return errMsg;
				}if (isAppend) this.clearAtomSets ();
				else if (this.getModelkitMode () && !fileName.equals ("Jmol Model Kit")) this.setModelKitMode (false);
				this.setFileLoadStatus (org.jmol.constant.EnumFileStatus.CREATING_MODELSET, fullPathName, fileName, null, null);
				this.pushHoldRepaintWhy ("createModelSet");
				this.setErrorMessage (null);
				try {
				    var bsNew =  new org.jmol.util.BitSet ();
				    this.modelSet = this.modelManager.createModelSet (fullPathName, fileName, loadScript, atomSetCollection, bsNew, isAppend);
				    if (bsNew.cardinality () > 0) {
					var jmolScript = this.modelSet.getModelSetAuxiliaryInfoValue ("jmolscript");
					if (this.modelSet.getModelSetAuxiliaryInfoBoolean ("doMinimize")) this.minimize (2147483647, 0, bsNew, null, 0, true, true, true);
					else this.addHydrogens (bsNew, false, true);
					if (jmolScript != null) this.modelSet.getModelSetAuxiliaryInfo ().put ("jmolscript", jmolScript);
				    }this.initializeModel (isAppend);
				} catch (er) {
				    if (Clazz.exceptionOf (er, Error)) {
					this.handleError (er, true);
					errMsg = this.getShapeErrorState ();
					errMsg = ("ERROR creating model: " + er + (errMsg.length == 0 ? "" : "|" + errMsg));
					this.zapMsg (errMsg);
					this.setErrorMessage (errMsg);
				    } else {
					throw er;
				    }
				}
				this.popHoldRepaintWhy ("createModelSet");
				errMsg = this.getErrorMessage ();
				this.setFileLoadStatus (org.jmol.constant.EnumFileStatus.CREATED, fullPathName, fileName, this.getModelSetName (), errMsg);
				if (isAppend) {
				    this.selectAll ();
				    this.setTainted (true);
				    this.axesAreTainted = true;
				}atomSetCollection = null;
				System.gc ();
				return errMsg;
			    }, $fz.isPrivate = true, $fz), "~O,~B,org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "loadAtomDataAndReturnError", 
			    ($fz = function (atomSetCollection, tokType) {
				if (Clazz.instanceOf (atomSetCollection, String)) return atomSetCollection;
				this.setErrorMessage (null);
				try {
				    this.modelManager.createAtomDataSet (atomSetCollection, tokType);
				    switch (tokType) {
				    case 4166:
					this.setStatusFrameChanged (-2147483648);
					break;
				    case 1649412112:
					this.shapeManager.deleteVdwDependentShapes (null);
					break;
				    }
				} catch (er) {
				    if (Clazz.exceptionOf (er, Error)) {
					this.handleError (er, true);
					var errMsg = this.getShapeErrorState ();
					errMsg = ("ERROR adding atom data: " + er + (errMsg.length == 0 ? "" : "|" + errMsg));
					this.zapMsg (errMsg);
					this.setErrorMessage (errMsg);
					this.setParallel (false);
				    } else {
					throw er;
				    }
				}
				return this.getErrorMessage ();
			    }, $fz.isPrivate = true, $fz), "~O,~N");
	Clazz.defineMethod (c$, "writeCurrentFile", 
			    function (os) {
				var filename = this.getFullPathName ();
				if (filename.equals ("string") || filename.indexOf ("[]") >= 0 || filename.equals ("JSNode")) {
				    var str = this.getCurrentFileAsString ();
				    var bos =  new java.io.BufferedOutputStream (os);
				    var sb =  new org.jmol.io.OutputStringBuilder (bos);
				    sb.append (str);
				    return sb.toString ();
				}var pathName = this.modelManager.getModelSetPathName ();
				return (pathName == null ? "" : this.getFileAsBytes (pathName, os));
			    }, "java.io.OutputStream");
	Clazz.overrideMethod (c$, "getEmbeddedFileState", 
			      function (filename) {
				  return this.fileManager.getEmbeddedFileState (filename);
			      }, "~S");
	Clazz.overrideMethod (c$, "getFileAsBytes", 
			      function (pathName, os) {
				  return this.fileManager.getFileAsBytes (pathName, os, true);
			      }, "~S,java.io.OutputStream");
	Clazz.defineMethod (c$, "getCurrentFileAsString", 
			    function () {
				var filename = this.getFullPathName ();
				if (filename.equals ("string") || filename.equals ("Jmol Model Kit")) return this.modelSet.getInlineData (this.getCurrentModelIndex ());
				if (filename.indexOf ("[]") >= 0) return filename;
				if (filename === "JSNode") return "<DOM NODE>";
				var pathName = this.modelManager.getModelSetPathName ();
				if (pathName == null) return null;
				return this.getFileAsStringBin (pathName, 2147483647, true, false);
			    });
	Clazz.defineMethod (c$, "getFullPathName", 
			    function () {
				return this.fileManager.getFullPathName ();
			    });
	Clazz.defineMethod (c$, "getFileName", 
			    function () {
				return this.fileManager.getFileName ();
			    });
	Clazz.defineMethod (c$, "getFullPathNameOrError", 
			    function (filename) {
				return this.fileManager.getFullPathNameOrError (filename);
			    }, "~S");
	Clazz.overrideMethod (c$, "getFileAsString", 
			      function (name) {
				  return this.getFileAsStringBin (name, 2147483647, false, false);
			      }, "~S");
	Clazz.defineMethod (c$, "getFileAsStringBin", 
			    function (name, nBytesMax, doSpecialLoad, allowBinary) {
				if (name == null) return this.getCurrentFileAsString ();
				var data =  new Array (2);
				data[0] = name;
				this.getFileAsStringFM (data, nBytesMax, doSpecialLoad, allowBinary);
				return data[1];
			    }, "~S,~N,~B,~B");
	Clazz.defineMethod (c$, "getFileAsStringBin", 
			    function (data, nBytesMax, doSpecialLoad) {
				return this.getFileAsStringFM (data, nBytesMax, doSpecialLoad, true);
			    }, "~A,~N,~B");
	Clazz.defineMethod (c$, "getFileAsStringFM", 
			    ($fz = function (data, nBytesMax, doSpecialLoad, allowBinary) {
				return this.fileManager.getFileDataOrErrorAsString (data, nBytesMax, doSpecialLoad, allowBinary);
			    }, $fz.isPrivate = true, $fz), "~A,~N,~B,~B");
	Clazz.defineMethod (c$, "getFilePath", 
			    function (name, asShortName) {
				return this.fileManager.getFilePath (name, false, asShortName);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "getFileInfo", 
			    function () {
				return this.fileManager.getFileInfo ();
			    });
	Clazz.defineMethod (c$, "setFileInfo", 
			    function (fileInfo) {
				this.fileManager.setFileInfo (fileInfo);
			    }, "~A");
	Clazz.defineMethod (c$, "autoCalculate", 
			    function (tokProperty) {
				switch (tokProperty) {
				case 1112539149:
				    this.modelSet.getSurfaceDistanceMax ();
				    break;
				case 1112539148:
				    this.modelSet.calculateStraightness ();
				    break;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "getSurfaceDistanceMax", 
			    function () {
				return this.modelSet.getSurfaceDistanceMax ();
			    });
	Clazz.defineMethod (c$, "calculateStraightness", 
			    function () {
				this.modelSet.setHaveStraightness (false);
				this.modelSet.calculateStraightness ();
			    });
	Clazz.defineMethod (c$, "calculateSurface", 
			    function (bsSelected, envelopeRadius) {
				if (bsSelected == null) bsSelected = this.getSelectionSet (false);
				if (envelopeRadius == 3.4028235E38 || envelopeRadius == -1) this.addStateScriptRet ("calculate surfaceDistance " + (envelopeRadius == 3.4028235E38 ? "FROM" : "WITHIN"), null, bsSelected, null, "", false, true);
				return this.modelSet.calculateSurface (bsSelected, envelopeRadius);
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getStructureList", 
			    function () {
				return this.global.getStructureList ();
			    });
	Clazz.defineMethod (c$, "setStructureList", 
			    function (list, type) {
				this.global.setStructureList (list, type);
				this.modelSet.setStructureList (this.getStructureList ());
			    }, "~A,org.jmol.constant.EnumStructure");
	Clazz.defineMethod (c$, "getDefaultStructureDSSP", 
			    function () {
				return this.global.defaultStructureDSSP;
			    });
	Clazz.defineMethod (c$, "getDefaultStructure", 
			    function (bsAtoms, bsAllAtoms) {
				if (bsAtoms == null) bsAtoms = this.getSelectionSet (false);
				return this.modelSet.getDefaultStructure (bsAtoms, bsAllAtoms);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calculateStructures", 
			    function (bsAtoms, asDSSP, setStructure) {
				if (bsAtoms == null) bsAtoms = this.getSelectionSet (false);
				return this.modelSet.calculateStructures (bsAtoms, asDSSP, this.global.dsspCalcHydrogen, setStructure);
			    }, "org.jmol.util.BitSet,~B,~B");
	Clazz.overrideMethod (c$, "getSelectedAtomIterator", 
			      function (bsSelected, isGreaterOnly, modelZeroBased, isMultiModel) {
				  return this.modelSet.getSelectedAtomIterator (bsSelected, isGreaterOnly, modelZeroBased, false, isMultiModel);
			      }, "org.jmol.util.BitSet,~B,~B,~B");
	Clazz.overrideMethod (c$, "setIteratorForAtom", 
			      function (iterator, atomIndex, distance) {
				  this.modelSet.setIteratorForAtom (iterator, -1, atomIndex, distance, null);
			      }, "org.jmol.api.AtomIndexIterator,~N,~N");
	Clazz.overrideMethod (c$, "setIteratorForPoint", 
			      function (iterator, modelIndex, pt, distance) {
				  this.modelSet.setIteratorForPoint (iterator, modelIndex, pt, distance);
			      }, "org.jmol.api.AtomIndexIterator,~N,org.jmol.util.Point3f,~N");
	Clazz.overrideMethod (c$, "fillAtomData", 
			      function (atomData, mode) {
				  atomData.programInfo = "Jmol Version " + org.jmol.viewer.Viewer.getJmolVersion ();
				  atomData.fileName = this.getFileName ();
				  this.modelSet.fillAtomData (atomData, mode);
			      }, "org.jmol.atomdata.AtomData,~N");
	Clazz.defineMethod (c$, "addStateScript", 
			    function (script, addFrameNumber, postDefinitions) {
				return this.addStateScriptRet (script, null, null, null, null, addFrameNumber, postDefinitions);
			    }, "~S,~B,~B");
	Clazz.defineMethod (c$, "addStateScriptRet", 
			    function (script1, bsBonds, bsAtoms1, bsAtoms2, script2, addFrameNumber, postDefinitions) {
				return this.modelSet.addStateScript (script1, bsBonds, bsAtoms1, bsAtoms2, script2, addFrameNumber, postDefinitions);
			    }, "~S,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~S,~B,~B");
	Clazz.defineMethod (c$, "getEchoStateActive", 
			    function () {
				return this.modelSet.getEchoStateActive ();
			    });
	Clazz.defineMethod (c$, "setEchoStateActive", 
			    function (TF) {
				this.modelSet.setEchoStateActive (TF);
			    }, "~B");
	Clazz.defineMethod (c$, "zap", 
			    function (notify, resetUndo, zapModelKit) {
				this.stopAnimationThreads ("zap");
				if (this.modelSet != null) {
				    this.ligandModelSet = null;
				    this.clearModelDependentObjects ();
				    this.fileManager.clear ();
				    this.clearRepaintManager (-1);
				    this.animationManager.clear ();
				    this.transformManager.clear ();
				    this.selectionManager.clear ();
				    this.clearAllMeasurements ();
				    this.clearMinimization ();
				    this.gdata.clear ();
				    this.modelSet = this.modelManager.zap ();
				    if (this.haveDisplay) {
					this.mouse.clear ();
					this.clearTimeouts ();
					this.actionManager.clear ();
				    }this.stateManager.clear (this.global);
				    this.tempManager.clear ();
				    this.colorManager.clear ();
				    this.definedAtomSets.clear ();
				    this.dataManager.clear ();
				    if (resetUndo) {
					if (zapModelKit && this.isModelKitMode ()) {
					    this.loadInline ("1 0 C 0 0");
					    this.setRotationRadius (5.0, true);
					    this.setStringProperty ("picking", "assignAtom_C");
					    this.setStringProperty ("picking", "assignBond_p");
					}this.undoClear ();
				    }System.gc ();
				} else {
				    this.modelSet = this.modelManager.zap ();
				}this.initializeModel (false);
				if (notify) this.setFileLoadStatus (org.jmol.constant.EnumFileStatus.ZAPPED, null, (resetUndo ? "resetUndo" : this.getZapName ()), null, null);
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.checkMemory ();
			    }, "~B,~B,~B");
	Clazz.defineMethod (c$, "zapMsg", 
			    ($fz = function (msg) {
				this.zap (true, true, false);
				this.echoMessage (msg);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "echoMessage", 
			    function (msg) {
				var iShape = 29;
				this.loadShape (iShape);
				this.setShapeProperty (iShape, "font", this.getFont3D ("SansSerif", "Plain", 9));
				this.setShapeProperty (iShape, "target", "error");
				this.setShapeProperty (iShape, "text", msg);
			    }, "~S");
	Clazz.defineMethod (c$, "initializeModel", 
			    ($fz = function (isAppend) {
				this.stopAnimationThreads ("stop from init model");
				if (isAppend) {
				    this.animationManager.initializePointers (1);
				    return;
				}this.reset (true);
				this.selectAll ();
				this.rotatePrev1 = this.rotateBondIndex = -1;
				this.movingSelected = false;
				this.noneSelected = false;
				this.hoverEnabled = true;
				this.transformManager.setCenter ();
				this.clearAtomSets ();
				this.animationManager.initializePointers (1);
				this.setCurrentModelIndex (0);
				this.setBackgroundModelIndex (-1);
				this.setFrankOn (this.getShowFrank ());
				if (this.haveDisplay) this.actionManager.startHoverWatcher (true);
				this.setTainted (true);
				this.finalizeTransformParameters ();
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.overrideMethod (c$, "getModelSetName", 
			      function () {
				  if (this.modelSet == null) return null;
				  return this.modelSet.getModelSetName ();
			      });
	Clazz.overrideMethod (c$, "getModelSetFileName", 
			      function () {
				  return this.modelManager.getModelSetFileName ();
			      });
	Clazz.defineMethod (c$, "getUnitCellInfoText", 
			    function () {
				return this.modelSet.getUnitCellInfoText ();
			    });
	Clazz.defineMethod (c$, "getUnitCellInfo", 
			    function (infoType) {
				var symmetry = this.getCurrentUnitCell ();
				if (symmetry == null) return NaN;
				return symmetry.getUnitCellInfoType (infoType);
			    }, "~N");
	Clazz.defineMethod (c$, "getSpaceGroupInfo", 
			    function (spaceGroup) {
				return this.modelSet.getSpaceGroupInfo (-1, spaceGroup, 0, null, null, null);
			    }, "~S");
	Clazz.defineMethod (c$, "getPolymerPointsAndVectors", 
			    function (bs, vList) {
				this.modelSet.getPolymerPointsAndVectors (bs, vList);
			    }, "org.jmol.util.BitSet,java.util.List");
	Clazz.defineMethod (c$, "getModelSetProperty", 
			    function (strProp) {
				return this.modelSet.getModelSetProperty (strProp);
			    }, "~S");
	Clazz.defineMethod (c$, "getModelSetAuxiliaryInfoValue", 
			    function (strKey) {
				return this.modelSet.getModelSetAuxiliaryInfoValue (strKey);
			    }, "~S");
	Clazz.overrideMethod (c$, "getModelSetPathName", 
			      function () {
				  return this.modelManager.getModelSetPathName ();
			      });
	Clazz.defineMethod (c$, "getModelSetTypeName", 
			    function () {
				return this.modelSet.getModelSetTypeName ();
			    });
	Clazz.overrideMethod (c$, "haveFrame", 
			      function () {
				  return this.haveModelSet ();
			      });
	Clazz.defineMethod (c$, "haveModelSet", 
			    function () {
				return this.modelSet != null;
			    });
	Clazz.defineMethod (c$, "clearBfactorRange", 
			    function () {
				this.modelSet.clearBfactorRange ();
			    });
	Clazz.defineMethod (c$, "getHybridizationAndAxes", 
			    function (atomIndex, z, x, lcaoType) {
				return this.modelSet.getHybridizationAndAxes (atomIndex, 0, z, x, lcaoType, true, true);
			    }, "~N,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~S");
	Clazz.defineMethod (c$, "getMoleculeBitSet", 
			    function (atomIndex) {
				return this.modelSet.getMoleculeBitSetForAtom (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getModelUndeletedAtomsBitSet", 
			    function (modelIndex) {
				var bs = this.modelSet.getModelAtomBitSetIncludingDeleted (modelIndex, true);
				this.excludeAtoms (bs, false);
				return bs;
			    }, "~N");
	Clazz.defineMethod (c$, "getModelBitSet", 
			    function (atomList, allTrajectories) {
				return this.modelSet.getModelBitSet (atomList, allTrajectories);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "getModelUndeletedAtomsBitSetBs", 
			    function (bsModels) {
				var bs = this.modelSet.getModelAtomBitSetIncludingDeletedBs (bsModels);
				this.excludeAtoms (bs, false);
				return bs;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "excludeAtoms", 
			    function (bs, ignoreSubset) {
				this.selectionManager.excludeAtoms (bs, ignoreSubset);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "getModelSet", 
			    function () {
				return this.modelSet;
			    });
	Clazz.defineMethod (c$, "getBoundBoxCommand", 
			    function (withOptions) {
				return this.modelSet.getBoundBoxCommand (withOptions);
			    }, "~B");
	Clazz.defineMethod (c$, "setBoundBox", 
			    function (pt1, pt2, byCorner, scale) {
				this.modelSet.setBoundBox (pt1, pt2, byCorner, scale);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~B,~N");
	Clazz.overrideMethod (c$, "getBoundBoxCenter", 
			      function () {
				  return this.modelSet.getBoundBoxCenter (this.animationManager.currentModelIndex);
			      });
	Clazz.defineMethod (c$, "getAverageAtomPoint", 
			    function () {
				return this.modelSet.getAverageAtomPoint ();
			    });
	Clazz.defineMethod (c$, "calcBoundBoxDimensions", 
			    function (bs, scale) {
				this.modelSet.calcBoundBoxDimensions (bs, scale);
				this.axesAreTainted = true;
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getBoxInfo", 
			    function (bs, scale) {
				return this.modelSet.getBoxInfo (bs, scale);
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "calcRotationRadius", 
			    function (center) {
				return this.modelSet.calcRotationRadius (this.animationManager.currentModelIndex, center);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "calcRotationRadiusBs", 
			    function (bs) {
				return this.modelSet.calcRotationRadiusBs (bs);
			    }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getBoundBoxCornerVector", 
			      function () {
				  return this.modelSet.getBoundBoxCornerVector ();
			      });
	Clazz.defineMethod (c$, "getBoundBoxVertices", 
			    function () {
				return this.modelSet.getBboxVertices ();
			    });
	Clazz.defineMethod (c$, "getBoundBoxInfo", 
			    function () {
				return this.modelSet.getBoundBoxInfo ();
			    });
	Clazz.defineMethod (c$, "getBoundBoxModels", 
			    function () {
				return this.modelSet.getBoundBoxModels ();
			    });
	Clazz.defineMethod (c$, "getBoundBoxCenterX", 
			    function () {
				return Clazz.doubleToInt (this.dimScreen.width / 2);
			    });
	Clazz.defineMethod (c$, "getBoundBoxCenterY", 
			    function () {
				return Clazz.doubleToInt (this.dimScreen.height / 2);
			    });
	Clazz.overrideMethod (c$, "getModelCount", 
			      function () {
				  return this.modelSet.getModelCount ();
			      });
	Clazz.defineMethod (c$, "getModelInfoAsString", 
			    function () {
				return this.modelSet.getModelInfoAsString ();
			    });
	Clazz.defineMethod (c$, "getSymmetryInfoAsString", 
			    function () {
				return this.modelSet.getSymmetryInfoAsString ();
			    });
	Clazz.defineMethod (c$, "getSymmetryOperation", 
			    function (spaceGroup, symop, pt1, pt2, labelOnly) {
				return this.modelSet.getSymmetryOperation (this.animationManager.currentModelIndex, spaceGroup, symop, pt1, pt2, null, labelOnly);
			    }, "~S,~N,org.jmol.util.Point3f,org.jmol.util.Point3f,~B");
	Clazz.overrideMethod (c$, "getModelSetProperties", 
			      function () {
				  return this.modelSet.getModelSetProperties ();
			      });
	Clazz.overrideMethod (c$, "getModelSetAuxiliaryInfo", 
			      function () {
				  return this.modelSet.getModelSetAuxiliaryInfo ();
			      });
	Clazz.overrideMethod (c$, "getModelNumber", 
			      function (modelIndex) {
				  if (modelIndex < 0) return modelIndex;
				  return this.modelSet.getModelNumber (modelIndex);
			      }, "~N");
	Clazz.defineMethod (c$, "getModelFileNumber", 
			    function (modelIndex) {
				if (modelIndex < 0) return 0;
				return this.modelSet.getModelFileNumber (modelIndex);
			    }, "~N");
	Clazz.overrideMethod (c$, "getModelNumberDotted", 
			      function (modelIndex) {
				  return modelIndex < 0 ? "0" : this.modelSet == null ? null : this.modelSet.getModelNumberDotted (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getModelName", 
			      function (modelIndex) {
				  return this.modelSet == null ? null : this.modelSet.getModelName (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getModelProperties", 
			      function (modelIndex) {
				  return this.modelSet.getModelProperties (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getModelProperty", 
			      function (modelIndex, propertyName) {
				  return this.modelSet.getModelProperty (modelIndex, propertyName);
			      }, "~N,~S");
	Clazz.defineMethod (c$, "getModelFileInfo", 
			    function () {
				return this.modelSet.getModelFileInfo (this.getVisibleFramesBitSet ());
			    });
	Clazz.defineMethod (c$, "getModelFileInfoAll", 
			    function () {
				return this.modelSet.getModelFileInfo (null);
			    });
	Clazz.overrideMethod (c$, "getModelAuxiliaryInfo", 
			      function (modelIndex) {
				  return this.modelSet.getModelAuxiliaryInfo (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getModelAuxiliaryInfoValue", 
			      function (modelIndex, keyName) {
				  return this.modelSet.getModelAuxiliaryInfoValue (modelIndex, keyName);
			      }, "~N,~S");
	Clazz.defineMethod (c$, "getModelNumberIndex", 
			    function (modelNumber, useModelNumber, doSetTrajectory) {
				return this.modelSet.getModelNumberIndex (modelNumber, useModelNumber, doSetTrajectory);
			    }, "~N,~B,~B");
	Clazz.defineMethod (c$, "modelSetHasVibrationVectors", 
			    function () {
				return this.modelSet.modelSetHasVibrationVectors ();
			    });
	Clazz.overrideMethod (c$, "modelHasVibrationVectors", 
			      function (modelIndex) {
				  return this.modelSet.modelHasVibrationVectors (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getChainCount", 
			      function () {
				  return this.modelSet.getChainCount (true);
			      });
	Clazz.overrideMethod (c$, "getChainCountInModel", 
			      function (modelIndex) {
				  return this.modelSet.getChainCountInModel (modelIndex, false);
			      }, "~N");
	Clazz.defineMethod (c$, "getChainCountInModelWater", 
			    function (modelIndex, countWater) {
				return this.modelSet.getChainCountInModel (modelIndex, countWater);
			    }, "~N,~B");
	Clazz.overrideMethod (c$, "getGroupCount", 
			      function () {
				  return this.modelSet.getGroupCount ();
			      });
	Clazz.overrideMethod (c$, "getGroupCountInModel", 
			      function (modelIndex) {
				  return this.modelSet.getGroupCountInModel (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getPolymerCount", 
			      function () {
				  return this.modelSet.getBioPolymerCount ();
			      });
	Clazz.overrideMethod (c$, "getPolymerCountInModel", 
			      function (modelIndex) {
				  return this.modelSet.getBioPolymerCountInModel (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getAtomCount", 
			      function () {
				  return this.modelSet.getAtomCount ();
			      });
	Clazz.overrideMethod (c$, "getAtomCountInModel", 
			      function (modelIndex) {
				  return this.modelSet.getAtomCountInModel (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getBondCount", 
			      function () {
				  return this.modelSet.getBondCount ();
			      });
	Clazz.overrideMethod (c$, "getBondCountInModel", 
			      function (modelIndex) {
				  return this.modelSet.getBondCountInModel (modelIndex);
			      }, "~N");
	Clazz.defineMethod (c$, "getBondsForSelectedAtoms", 
			    function (bsAtoms) {
				return this.modelSet.getBondsForSelectedAtoms (bsAtoms, this.global.bondModeOr || org.jmol.util.BitSetUtil.cardinalityOf (bsAtoms) == 1);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "frankClicked", 
			    function (x, y) {
				return !this.global.disablePopupMenu && this.getShowFrank () && this.shapeManager.checkFrankclicked (x, y);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "frankClickedModelKit", 
			    function (x, y) {
				return !this.global.disablePopupMenu && this.isModelKitMode () && x >= 0 && y >= 0 && x < 40 && y < 80;
			    }, "~N,~N");
	Clazz.overrideMethod (c$, "findNearestAtomIndex", 
			      function (x, y) {
				  return this.findNearestAtomIndexMovable (x, y, false);
			      }, "~N,~N");
	Clazz.defineMethod (c$, "findNearestAtomIndexMovable", 
			    function (x, y, mustBeMovable) {
				return (this.modelSet == null || !this.getAtomPicking () ? -1 : this.modelSet.findNearestAtomIndex (x, y, mustBeMovable ? this.selectionManager.getMotionFixedAtoms () : null));
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "findAtomsInRectangle", 
			    function (rect) {
				return this.modelSet.findAtomsInRectangle (rect, this.getVisibleFramesBitSet ());
			    }, "org.jmol.util.Rectangle");
	Clazz.defineMethod (c$, "toCartesian", 
			    function (pt, asAbsolute) {
				var unitCell = this.getCurrentUnitCell ();
				if (unitCell != null) unitCell.toCartesian (pt, asAbsolute);
			    }, "org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "toFractional", 
			    function (pt, asAbsolute) {
				var unitCell = this.getCurrentUnitCell ();
				if (unitCell != null) unitCell.toFractional (pt, asAbsolute);
			    }, "org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "toUnitCell", 
			    function (pt, offset) {
				var unitCell = this.getCurrentUnitCell ();
				if (unitCell != null) unitCell.toUnitCell (pt, offset);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setCurrentUnitCell", 
			    function (isosurfaceId) {
				var data = [isosurfaceId, null];
				this.shapeManager.getShapePropertyData (23, "unitCell", data);
				this.modelSet.setUnitCell (this.getCurrentModelIndex (), data[1]);
			    }, "~S");
	Clazz.defineMethod (c$, "setCurrentUnitCellPts", 
			    function (points) {
				this.modelSet.setUnitCell (this.getCurrentModelIndex (), this.getSymmetry ().getUnitCell (points));
			    }, "~A");
	Clazz.defineMethod (c$, "setCurrentUnitCellOffset", 
			    function (ijk) {
				this.modelSet.setUnitCellOffset (this.animationManager.currentModelIndex, null, ijk);
			    }, "~N");
	Clazz.defineMethod (c$, "setCurrentUnitCellOffsetPt", 
			    function (pt) {
				this.modelSet.setUnitCellOffset (this.animationManager.currentModelIndex, pt, 0);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getFractionalRelative", 
			    function () {
				return this.global.fractionalRelative;
			    });
	Clazz.defineMethod (c$, "addUnitCellOffset", 
			    function (pt) {
				var unitCell = this.getCurrentUnitCell ();
				if (unitCell == null) return;
				pt.add (unitCell.getCartesianOffset ());
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setAtomData", 
			    function (type, name, coordinateData, isDefault) {
				this.modelSet.setAtomData (type, name, coordinateData, isDefault);
				this.refreshMeasures (true);
			    }, "~N,~S,~S,~B");
	Clazz.overrideMethod (c$, "setCenterSelected", 
			      function () {
				  this.setCenterBitSet (this.getSelectionSet (false), true);
			      });
	Clazz.defineMethod (c$, "getApplySymmetryToBonds", 
			    function () {
				return this.global.applySymmetryToBonds;
			    });
	Clazz.defineMethod (c$, "setApplySymmetryToBonds", 
			    function (TF) {
				this.global.applySymmetryToBonds = TF;
			    }, "~B");
	Clazz.overrideMethod (c$, "setBondTolerance", 
			      function (bondTolerance) {
				  this.global.setParamF ("bondTolerance", bondTolerance);
				  this.global.bondTolerance = bondTolerance;
			      }, "~N");
	Clazz.overrideMethod (c$, "getBondTolerance", 
			      function () {
				  return this.global.bondTolerance;
			      });
	Clazz.overrideMethod (c$, "setMinBondDistance", 
			      function (minBondDistance) {
				  this.global.setParamF ("minBondDistance", minBondDistance);
				  this.global.minBondDistance = minBondDistance;
			      }, "~N");
	Clazz.overrideMethod (c$, "getMinBondDistance", 
			      function () {
				  return this.global.minBondDistance;
			      });
	Clazz.defineMethod (c$, "getAtomIndices", 
			    function (bs) {
				return this.modelSet.getAtomIndices (bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomBits", 
			    function (tokType, specInfo) {
				return this.modelSet.getAtomBits (tokType, specInfo);
			    }, "~N,~O");
	Clazz.defineMethod (c$, "getSequenceBits", 
			    function (specInfo, bs) {
				return this.modelSet.getSequenceBits (specInfo, bs);
			    }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomsNearPt", 
			    function (distance, coord) {
				var bs =  new org.jmol.util.BitSet ();
				this.modelSet.getAtomsWithin (distance, coord, bs, -1);
				return bs;
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getAtomsNearPts", 
			    function (distance, points, bsInclude) {
				return this.modelSet.getAtomsWithinBs (distance, points, bsInclude);
			    }, "~N,~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomsNearPlane", 
			    function (distance, plane) {
				return this.modelSet.getAtomsWithin (distance, plane);
			    }, "~N,org.jmol.util.Point4f");
	Clazz.defineMethod (c$, "getAtomsWithinRadius", 
			    function (distance, bs, withinAllModels, rd) {
				return this.modelSet.getAtomsWithinBs (distance, bs, withinAllModels, rd);
			    }, "~N,org.jmol.util.BitSet,~B,org.jmol.atomdata.RadiusData");
	Clazz.defineMethod (c$, "getAtomsConnected", 
			    function (min, max, intType, bs) {
				return this.modelSet.getAtomsConnected (min, max, intType, bs);
			    }, "~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getBranchBitSet", 
			    function (atomIndex, atomIndexNot) {
				if (atomIndex < 0 || atomIndex >= this.getAtomCount ()) return  new org.jmol.util.BitSet ();
				return org.jmol.util.JmolMolecule.getBranchBitSet (this.modelSet.atoms, atomIndex, this.getModelUndeletedAtomsBitSet (this.modelSet.atoms[atomIndex].modelIndex), null, atomIndexNot, true, true);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getAtomIndexFromAtomNumber", 
			    function (atomNumber) {
				return this.modelSet.getAtomIndexFromAtomNumber (atomNumber, this.getVisibleFramesBitSet ());
			    }, "~N");
	Clazz.overrideMethod (c$, "getElementsPresentBitSet", 
			      function (modelIndex) {
				  return this.modelSet.getElementsPresentBitSet (modelIndex);
			      }, "~N");
	Clazz.overrideMethod (c$, "getHeteroList", 
			      function (modelIndex) {
				  return this.modelSet.getHeteroList (modelIndex);
			      }, "~N");
	Clazz.defineMethod (c$, "getVisibleSet", 
			    function () {
				return this.modelSet.getVisibleSet ();
			    });
	Clazz.defineMethod (c$, "getClickableSet", 
			    function () {
				return this.modelSet.getClickableSet ();
			    });
	Clazz.defineMethod (c$, "calcSelectedGroupsCount", 
			    function () {
				this.modelSet.calcSelectedGroupsCount (this.getSelectionSet (false));
			    });
	Clazz.defineMethod (c$, "calcSelectedMonomersCount", 
			    function () {
				this.modelSet.calcSelectedMonomersCount (this.getSelectionSet (false));
			    });
	Clazz.defineMethod (c$, "calcSelectedMoleculesCount", 
			    function () {
				this.modelSet.calcSelectedMoleculesCount (this.getSelectionSet (false));
			    });
	Clazz.defineMethod (c$, "getFileHeader", 
			    function () {
				return this.modelSet.getFileHeader (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getFileData", 
			    function () {
				return this.modelSet.getFileData (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getCifData", 
			    function (modelIndex) {
				var name = this.getModelFileName (modelIndex);
				var data = this.getFileAsString (name);
				if (data == null) return null;
				return org.jmol.io.CifDataReader.readCifData ( new java.io.BufferedReader ( new java.io.StringReader (data)));
			    }, "~N");
	Clazz.defineMethod (c$, "getPDBHeader", 
			    function () {
				return this.modelSet.getPDBHeader (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getModelInfo", 
			    function (atomExpression) {
				return this.modelSet.getModelInfo (this.getModelBitSet (this.getAtomBitSet (atomExpression), false));
			    }, "~O");
	Clazz.defineMethod (c$, "getLigandInfo", 
			    function (atomExpression) {
				return this.modelSet.getLigandInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getAuxiliaryInfo", 
			    function (atomExpression) {
				return this.modelSet.getAuxiliaryInfo (this.getModelBitSet (this.getAtomBitSet (atomExpression), false));
			    }, "~O");
	Clazz.defineMethod (c$, "getAllAtomInfo", 
			    function (atomExpression) {
				return this.modelSet.getAllAtomInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getAllBondInfo", 
			    function (atomExpression) {
				return this.modelSet.getAllBondInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getMoleculeInfo", 
			    function (atomExpression) {
				return this.modelSet.getMoleculeInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getChimeInfo", 
			    function (tok) {
				return this.modelSet.getChimeInfo (tok, this.getSelectionSet (true));
			    }, "~N");
	Clazz.defineMethod (c$, "getAllChainInfo", 
			    function (atomExpression) {
				return this.modelSet.getAllChainInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getAllPolymerInfo", 
			    function (atomExpression) {
				return this.modelSet.getAllPolymerInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getWrappedState", 
			    function (fileName, scripts, isImage, asJmolZip, width, height) {
				if (isImage && !this.global.imageState && !asJmolZip || !this.global.preserveState) return "";
				var s = this.getStateInfo (null, width, height);
				if (asJmolZip) {
				    if (fileName != null) this.fileManager.clearPngjCache (fileName);
				    return org.jmol.io.JmolBinary.createZipSet (this.fileManager, this, null, s, scripts, true);
				}try {
				    s = org.jmol.viewer.JmolConstants.embedScript (org.jmol.viewer.FileManager.setScriptFileReferences (s, ".", null, null));
				} catch (e) {
				    org.jmol.util.Logger.error ("state could not be saved: " + e.getMessage ());
				    s = "Jmol " + org.jmol.viewer.Viewer.getJmolVersion ();
				}
				return s;
			    }, "~S,~A,~B,~B,~N,~N");
	Clazz.defineMethod (c$, "getStateInfo", 
			    function () {
				return this.getStateInfo (null, 0, 0);
			    });
	Clazz.defineMethod (c$, "getStateInfo", 
			    function (type, width, height) {
				if (!this.global.preserveState) return "";
				var isAll = (type == null || type.equalsIgnoreCase ("all"));
				var s =  new org.jmol.util.StringXBuilder ();
				var sfunc = (isAll ?  new org.jmol.util.StringXBuilder ().append ("function _setState() {\n") : null);
				if (isAll) s.append ("# Jmol state version " + org.jmol.viewer.Viewer.getJmolVersion () + ";\n");
				if (this.$isApplet && isAll) {
				    org.jmol.viewer.StateManager.appendCmd (s, "# fullName = " + org.jmol.util.Escape.escapeStr (this.fullName));
				    org.jmol.viewer.StateManager.appendCmd (s, "# documentBase = " + org.jmol.util.Escape.escapeStr (this.appletDocumentBase));
				    org.jmol.viewer.StateManager.appendCmd (s, "# codeBase = " + org.jmol.util.Escape.escapeStr (this.appletCodeBase));
				    s.append ("\n");
				}if (isAll || type.equalsIgnoreCase ("windowState")) s.append (this.global.getWindowState (sfunc, width, height));
				if (isAll || type.equalsIgnoreCase ("fileState")) s.append (this.fileManager.getState (sfunc));
				if (isAll || type.equalsIgnoreCase ("definedState")) s.append (this.modelSet.getDefinedState (sfunc, true));
				if (isAll || type.equalsIgnoreCase ("variableState")) s.append (this.global.getState (sfunc));
				if (isAll || type.equalsIgnoreCase ("dataState")) this.dataManager.getDataState (s, sfunc, this.modelSet.getAtomicPropertyState (-1, null));
				if (isAll || type.equalsIgnoreCase ("modelState")) s.append (this.modelSet.getState (sfunc, true, this.getBooleanProperty ("saveProteinStructureState")));
				if (isAll || type.equalsIgnoreCase ("colorState")) s.append (this.colorManager.getState (sfunc));
				if (isAll || type.equalsIgnoreCase ("frameState")) s.append (this.animationManager.getState (sfunc));
				if (isAll || type.equalsIgnoreCase ("perspectiveState")) s.append (this.transformManager.getState (sfunc));
				if (isAll || type.equalsIgnoreCase ("selectionState")) s.append (this.selectionManager.getState (sfunc));
				if (sfunc != null) {
				    org.jmol.viewer.StateManager.appendCmd (sfunc, "set refreshing true");
				    org.jmol.viewer.StateManager.appendCmd (sfunc, "set antialiasDisplay " + this.global.antialiasDisplay);
				    org.jmol.viewer.StateManager.appendCmd (sfunc, "set antialiasTranslucent " + this.global.antialiasTranslucent);
				    org.jmol.viewer.StateManager.appendCmd (sfunc, "set antialiasImages " + this.global.antialiasImages);
				    if (this.getSpinOn ()) org.jmol.viewer.StateManager.appendCmd (sfunc, "spin on");
				    sfunc.append ("}\n\n_setState;\n");
				}if (isAll) s.appendSB (sfunc);
				return s.toString ();
			    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "getStructureState", 
			    function () {
				return this.modelSet.getState (null, false, true);
			    });
	Clazz.defineMethod (c$, "getProteinStructureState", 
			    function () {
				return this.modelSet.getProteinStructureState (this.getSelectionSet (false), false, false, 3);
			    });
	Clazz.defineMethod (c$, "getCoordinateState", 
			    function (bsSelected) {
				return this.modelSet.getAtomicPropertyState (2, bsSelected);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setCurrentColorRange", 
			    function (label) {
				var data = this.getDataFloat (label);
				var bs = (data == null ? null : (this.dataManager.getData (label))[2]);
				if (bs != null && this.isRangeSelected ()) bs.and (this.getSelectionSet (false));
				this.setCurrentColorRangeData (data, bs);
			    }, "~S");
	Clazz.defineMethod (c$, "setCurrentColorRangeData", 
			    function (data, bs) {
				this.colorManager.setPropertyColorRangeData (data, bs, this.global.propertyColorScheme);
			    }, "~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setCurrentColorRange", 
			    function (min, max) {
				this.colorManager.setPropertyColorRange (min, max);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setData", 
			    function (type, data, arrayCount, matchField, matchFieldColumnCount, field, fieldColumnCount) {
				this.dataManager.setData (type, data, arrayCount, this.getAtomCount (), matchField, matchFieldColumnCount, field, fieldColumnCount);
			    }, "~S,~A,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "getData", 
			    function (type) {
				return this.dataManager.getData (type);
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloat", 
			    function (label) {
				return this.dataManager.getDataFloatA (label);
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloat2D", 
			    function (label) {
				return this.dataManager.getDataFloat2D (label);
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloat3D", 
			    function (label) {
				return this.dataManager.getDataFloat3D (label);
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloatAt", 
			    function (label, atomIndex) {
				return this.dataManager.getDataFloat (label, atomIndex);
			    }, "~S,~N");
	Clazz.overrideMethod (c$, "getAltLocListInModel", 
			      function (modelIndex) {
				  return this.modelSet.getAltLocListInModel (modelIndex);
			      }, "~N");
	Clazz.defineMethod (c$, "setConformation", 
			    function () {
				return this.modelSet.setConformation (this.getSelectionSet (false));
			    });
	Clazz.defineMethod (c$, "getConformation", 
			    function (iModel, conformationIndex, doSet) {
				return this.modelSet.getConformation (iModel, conformationIndex, doSet);
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "autoHbond", 
			    function (bsFrom, bsTo, onlyIfHaveCalculated) {
				if (bsFrom == null) bsFrom = bsTo = this.getSelectionSet (false);
				return this.modelSet.autoHbond (bsFrom, bsTo, onlyIfHaveCalculated);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "getHbondsAngleMin", 
			    function () {
				return this.global.hbondsAngleMinimum;
			    });
	Clazz.defineMethod (c$, "getHbondsDistanceMax", 
			    function () {
				return this.global.hbondsDistanceMaximum;
			    });
	Clazz.defineMethod (c$, "getHbondsRasmol", 
			    function () {
				return this.global.hbondsRasmol;
			    });
	Clazz.overrideMethod (c$, "havePartialCharges", 
			      function () {
				  return this.modelSet.getPartialCharges () != null;
			      });
	Clazz.defineMethod (c$, "getCurrentUnitCell", 
			    function () {
				return this.modelSet.getUnitCell (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getModelUnitCell", 
			    function (modelIndex) {
				return this.modelSet.getUnitCell (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getDefaultMeasurementLabel", 
			    function (nPoints) {
				switch (nPoints) {
				case 2:
				    return this.global.defaultDistanceLabel;
				case 3:
				    return this.global.defaultAngleLabel;
				default:
				    return this.global.defaultTorsionLabel;
				}
			    }, "~N");
	Clazz.overrideMethod (c$, "getMeasurementCount", 
			      function () {
				  var count = this.getShapePropertyAsInt (6, "count");
				  return count <= 0 ? 0 : count;
			      });
	Clazz.overrideMethod (c$, "getMeasurementStringValue", 
			      function (i) {
				  var str = "" + this.getShapePropertyIndex (6, "stringValue", i);
				  return str;
			      }, "~N");
	Clazz.defineMethod (c$, "getMeasurementInfo", 
			    function () {
				return this.getShapeProperty (6, "info");
			    });
	Clazz.defineMethod (c$, "getMeasurementInfoAsString", 
			    function () {
				return this.getShapeProperty (6, "infostring");
			    });
	Clazz.overrideMethod (c$, "getMeasurementCountPlusIndices", 
			      function (i) {
				  var List = this.getShapePropertyIndex (6, "countPlusIndices", i);
				  return List;
			      }, "~N");
	Clazz.defineMethod (c$, "setPendingMeasurement", 
			    function (measurementPending) {
				this.setShapeProperty (6, "pending", measurementPending);
			    }, "org.jmol.modelset.MeasurementPending");
	Clazz.defineMethod (c$, "getPendingMeasurement", 
			    function () {
				return this.getShapeProperty (6, "pending");
			    });
	Clazz.defineMethod (c$, "clearAllMeasurements", 
			    function () {
				this.setShapeProperty (6, "clear", null);
			    });
	Clazz.overrideMethod (c$, "clearMeasurements", 
			      function () {
				  this.evalString ("measures delete");
			      });
	Clazz.defineMethod (c$, "getJustifyMeasurements", 
			    function () {
				return this.global.justifyMeasurements;
			    });
	Clazz.defineMethod (c$, "setAnimation", 
			    function (tok) {
				switch (tok) {
				case 1073742098:
				    this.animationManager.reverseAnimation ();
				case 1073742096:
				case 266287:
				    if (!this.animationManager.$animationOn) this.animationManager.resumeAnimation ();
				    return;
				case 20487:
				    if (this.animationManager.$animationOn && !this.animationManager.animationPaused) this.animationManager.pauseAnimation ();
				    return;
				case 1073742037:
				    this.animationManager.setAnimationNext ();
				    return;
				case 1073742108:
				    this.animationManager.setAnimationPrevious ();
				    return;
				case 1073741942:
				case 1073742126:
				    this.animationManager.rewindAnimation ();
				    return;
				case 1073741993:
				    this.animationManager.setAnimationLast ();
				    return;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "setAnimationDirection", 
			    function (direction) {
				this.animationManager.setAnimationDirection (direction);
			    }, "~N");
	Clazz.defineMethod (c$, "getAnimationDirection", 
			    function () {
				return this.animationManager.animationDirection;
			    });
	Clazz.defineMethod (c$, "getAnimationInfo", 
			    function () {
				return this.animationManager.getAnimationInfo ();
			    });
	Clazz.overrideMethod (c$, "setAnimationFps", 
			      function (fps) {
				  if (fps < 1) fps = 1;
				  if (fps > 50) fps = 50;
				  this.global.setParamI ("animationFps", fps);
				  this.animationManager.setAnimationFps (fps);
			      }, "~N");
	Clazz.overrideMethod (c$, "getAnimationFps", 
			      function () {
				  return this.animationManager.animationFps;
			      });
	Clazz.defineMethod (c$, "setAnimationReplayMode", 
			    function (replayMode, firstFrameDelay, lastFrameDelay) {
				this.animationManager.setAnimationReplayMode (replayMode, firstFrameDelay, lastFrameDelay);
			    }, "org.jmol.constant.EnumAnimationMode,~N,~N");
	Clazz.defineMethod (c$, "getAnimationReplayMode", 
			    function () {
				return this.animationManager.animationReplayMode;
			    });
	Clazz.defineMethod (c$, "setAnimationOn", 
			    function (animationOn) {
				var wasAnimating = this.animationManager.$animationOn;
				if (animationOn == wasAnimating) return;
				this.animationManager.setAnimationOn (animationOn);
			    }, "~B");
	Clazz.defineMethod (c$, "setAnimationRange", 
			    function (modelIndex1, modelIndex2) {
				this.animationManager.setAnimationRange (modelIndex1, modelIndex2);
			    }, "~N,~N");
	Clazz.overrideMethod (c$, "getVisibleFramesBitSet", 
			      function () {
				  var bs = org.jmol.util.BitSetUtil.copy (this.animationManager.getVisibleFramesBitSet ());
				  this.modelSet.selectDisplayedTrajectories (bs);
				  return bs;
			      });
	Clazz.defineMethod (c$, "isAnimationOn", 
			    function () {
				return this.animationManager.$animationOn;
			    });
	Clazz.defineMethod (c$, "setCurrentModelIndex", 
			    function (modelIndex) {
				if (modelIndex == -2147483648) {
				    this.prevFrame = -2147483648;
				    this.setCurrentModelIndexClear (this.animationManager.currentModelIndex, true);
				    return;
				}this.animationManager.setCurrentModelIndex (modelIndex, true);
			    }, "~N");
	Clazz.defineMethod (c$, "setTrajectory", 
			    function (modelIndex) {
				this.modelSet.setTrajectory (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "setTrajectoryBs", 
			    function (bsModels) {
				this.modelSet.setTrajectoryBs (bsModels);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "isTrajectory", 
			    function (modelIndex) {
				return this.modelSet.isTrajectory (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getBitSetTrajectories", 
			    function () {
				return this.modelSet.getBitSetTrajectories ();
			    });
	Clazz.defineMethod (c$, "getTrajectoryInfo", 
			    function () {
				return this.modelSet.getTrajectoryInfo ();
			    });
	Clazz.defineMethod (c$, "setFrameOffset", 
			    function (modelIndex) {
				this.transformManager.setFrameOffset (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "setFrameOffsets", 
			    function (bsAtoms) {
				this.bsFrameOffsets = bsAtoms;
				this.transformManager.setFrameOffsets (this.frameOffsets = this.modelSet.getFrameOffsets (this.bsFrameOffsets));
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getFrameOffsets", 
			    function () {
				return this.bsFrameOffsets;
			    });
	Clazz.defineMethod (c$, "setCurrentModelIndexClear", 
			    function (modelIndex, clearBackground) {
				this.animationManager.setCurrentModelIndex (modelIndex, clearBackground);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getCurrentModelIndex", 
			    function () {
				return this.animationManager.currentModelIndex;
			    });
	Clazz.overrideMethod (c$, "getDisplayModelIndex", 
			      function () {
				  return this.animationManager.currentModelIndex;
			      });
	Clazz.defineMethod (c$, "haveFileSet", 
			    function () {
				return (this.getModelCount () > 1 && this.getModelNumber (2147483647) > 2000000);
			    });
	Clazz.defineMethod (c$, "setBackgroundModelIndex", 
			    function (modelIndex) {
				this.animationManager.setBackgroundModelIndex (modelIndex);
				this.global.setParamS ("backgroundModel", this.modelSet.getModelNumberDotted (modelIndex));
			    }, "~N");
	Clazz.defineMethod (c$, "setFrameVariables", 
			    function () {
				this.global.setParamS ("_firstFrame", this.getModelNumberDotted (this.animationManager.firstModelIndex));
				this.global.setParamS ("_lastFrame", this.getModelNumberDotted (this.animationManager.lastModelIndex));
				this.global.setParamF ("_animTimeSec", this.animationManager.getAnimRunTimeSeconds ());
			    });
	Clazz.overrideMethod (c$, "getMotionEventNumber", 
			      function () {
				  return this.motionEventNumber;
			      });
	Clazz.overrideMethod (c$, "setInMotion", 
			      function (inMotion) {
				  if ( new Boolean (this.wasInMotion ^ inMotion).valueOf ()) {
				      this.animationManager.inMotion = inMotion;
				      if (inMotion) {
					  ++this.motionEventNumber;
				      } else {
					  this.refresh (3, "viewer stInMotion " + inMotion);
				      }this.wasInMotion = inMotion;
				  }}, "~B");
	Clazz.defineMethod (c$, "getInMotion", 
			    function () {
				return this.animationManager.inMotion;
			    });
	Clazz.overrideMethod (c$, "pushHoldRepaint", 
			      function () {
				  this.pushHoldRepaintWhy (null);
			      });
	Clazz.defineMethod (c$, "setRefreshing", 
			    ($fz = function (TF) {
				this.refreshing = TF;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getRefreshing", 
			    function () {
				return this.refreshing;
			    });
	Clazz.defineMethod (c$, "pushHoldRepaintWhy", 
			    function (why) {
				if (this.repaintManager != null) this.repaintManager.pushHoldRepaint ();
			    }, "~S");
	Clazz.overrideMethod (c$, "popHoldRepaint", 
			      function () {
				  if (this.repaintManager != null) this.repaintManager.popHoldRepaint (true);
			      });
	Clazz.defineMethod (c$, "popHoldRepaintWhy", 
			    function (why) {
				if (this.repaintManager != null) this.repaintManager.popHoldRepaint (!why.equals ("pause"));
			    }, "~S");
	Clazz.overrideMethod (c$, "refresh", 
			      function (mode, strWhy) {
				  if (this.repaintManager == null || !this.refreshing) return;
				  if (mode == 6 && this.getInMotion ()) return;
				  {
				      if (typeof Jmol == "undefined") return;
				      if (this.isJS2D) {
					  if (mode == 7)return;
					  if (mode > 0) this.repaintManager.repaintIfReady();
				      } else if (mode == 2 || mode == 7) {
					  this.transformManager.finalizeTransformParameters();
					  if (Jmol._refresh)
					      Jmol._refresh(this.applet, mode, strWhy,
							    [this.transformManager.fixedRotationCenter,
							     this.transformManager.getRotationQuaternion(),
							     this.transformManager.xTranslationFraction,
							     this.transformManager.yTranslationFraction,
							     this.transformManager.modelRadius,
							     this.transformManager.scalePixelsPerAngstrom,
							     this.transformManager.zoomPercent
							    ]);
					  if (mode == 7)return;
				      }
				  }if (mode % 3 != 0 && this.statusManager.doSync ()) this.statusManager.setSync (mode == 2 ? strWhy : null);
			      }, "~N,~S");
	Clazz.defineMethod (c$, "requestRepaintAndWait", 
			    function () {
				if (!this.haveDisplay || this.repaintManager == null) return;
				this.repaintManager.requestRepaintAndWait ();
				this.setSync ();
			    });
	Clazz.defineMethod (c$, "clearShapeRenderers", 
			    function () {
				this.clearRepaintManager (-1);
			    });
	Clazz.defineMethod (c$, "isRepaintPending", 
			    function () {
				return (this.repaintManager == null ? false : this.repaintManager.isRepaintPending ());
			    });
	Clazz.overrideMethod (c$, "notifyViewerRepaintDone", 
			      function () {
				  if (this.repaintManager != null) this.repaintManager.repaintDone ();
				  this.animationManager.repaintDone ();
			      });
	Clazz.defineMethod (c$, "areAxesTainted", 
			    function () {
				var TF = this.axesAreTainted;
				this.axesAreTainted = false;
				return TF;
			    });
	Clazz.defineMethod (c$, "setMaximumSize", 
			    ($fz = function (x) {
				this.maximumSize = Math.max (x, 100);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "setScreenDimension", 
			      function (width, height) {
				  height = Math.min (height, this.maximumSize);
				  width = Math.min (width, this.maximumSize);
				  if (this.isStereoDouble ()) width = Clazz.doubleToInt ((width + 1) / 2);
				  if (this.dimScreen.width == width && this.dimScreen.height == height) return;
				  this.resizeImage (width, height, false, false, true);
			      }, "~N,~N");
	Clazz.defineMethod (c$, "getImageFontScaling", 
			    function () {
				return this.imageFontScaling;
			    });
	Clazz.defineMethod (c$, "resizeImage", 
			    ($fz = function (width, height, isImageWrite, isExport, isReset) {
				if (!isImageWrite && this.creatingImage) return;
				if (!isExport && !isImageWrite) this.setShapeProperty (5, "clearBoxes", null);
				this.antialiasDisplay = (isReset ? this.global.antialiasDisplay : isImageWrite && !isExport ? this.global.antialiasImages : false);
				this.imageFontScaling = (isReset || width <= 0 ? 1 : Clazz.doubleToInt ((this.global.zoomLarge == (height > width) ? height : width) / this.getScreenDim ())) * (this.antialiasDisplay ? 2 : 1);
				if (width > 0) {
				    this.dimScreen.width = width;
				    this.dimScreen.height = height;
				    if (!isImageWrite) {
					this.global.setParamI ("_width", width);
					this.global.setParamI ("_height", height);
					this.setStatusResized (width, height);
				    }} else {
					width = this.dimScreen.width;
					height = this.dimScreen.height;
				    }this.transformManager.setScreenParameters (width, height, isImageWrite || isReset ? this.global.zoomLarge : false, this.antialiasDisplay, false, false);
				this.gdata.setWindowParameters (width, height, this.antialiasDisplay);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~B,~B,~B");
	Clazz.overrideMethod (c$, "getScreenWidth", 
			      function () {
				  return this.dimScreen.width;
			      });
	Clazz.overrideMethod (c$, "getScreenHeight", 
			      function () {
				  return this.dimScreen.height;
			      });
	Clazz.defineMethod (c$, "getScreenDim", 
			    function () {
				return (this.global.zoomLarge == (this.dimScreen.height > this.dimScreen.width) ? this.dimScreen.height : this.dimScreen.width);
			    });
	Clazz.overrideMethod (c$, "generateOutput", 
			      function (type, fileName, width, height) {
				  if (this.$noGraphicsAllowed || this.repaintManager == null) return null;
				  var fName = null;
				  if (fileName != null) {
				      fileName[0] = this.getFileNameFromDialog (fileName[0], -2147483648);
				      if (fileName[0] == null) return null;
				      fName = fileName[0];
				  }this.mustRender = true;
				  var saveWidth = this.dimScreen.width;
				  var saveHeight = this.dimScreen.height;
				  this.resizeImage (width, height, true, true, false);
				  this.setModelVisibility ();
				  var data = this.repaintManager.renderExport (type, this.gdata, this.modelSet, fName);
				  this.resizeImage (saveWidth, saveHeight, true, true, true);
				  return data;
			      }, "~S,~A,~N,~N");
	Clazz.defineMethod (c$, "clearRepaintManager", 
			    ($fz = function (iShape) {
				if (this.repaintManager != null) this.repaintManager.clear (iShape);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "renderScreenImageStereo", 
			      function (gLeft, gRight, width, height) {
				  if (this.updateWindow (width, height)) {
				      if (gRight == null) {
					  this.getScreenImageBuffer (gLeft);
				      } else {
					  this.render1 (gRight, this.getImage (true), 0, 0);
					  this.render1 (gLeft, this.getImage (false), 0, 0);
				      }}this.notifyViewerRepaintDone ();
			      }, "~O,~O,~N,~N");
	Clazz.defineMethod (c$, "updateJS", 
			    function (width, height) {
				{
				    if (this.isJS2D) {
					this.renderScreenImageStereo(this.apiPlatform.context, null, width, height);
					return;
				    }
				    if (this.updateWindow(width, height)){ this.render(); }
				    this.notifyViewerRepaintDone();
				}}, "~N,~N");
	Clazz.defineMethod (c$, "updateWindow", 
			    ($fz = function (width, height) {
				if (!this.refreshing || this.creatingImage) return false;
				if (this.isTainted || this.getSlabEnabled ()) this.setModelVisibility ();
				this.isTainted = false;
				if (this.repaintManager != null) {
				    if (width != 0) this.setScreenDimension (width, height);
				}return true;
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "renderScreenImage", 
			    function (g, width, height) {
				this.renderScreenImageStereo (g, null, width, height);
			    }, "~O,~N,~N");
	Clazz.defineMethod (c$, "getImage", 
			    ($fz = function (isDouble) {
				{
				    if (!this.isJS2D)return null;
				}var image = null;
				try {
				    this.gdata.beginRendering (this.transformManager.getStereoRotationMatrix (isDouble));
				    this.render ();
				    this.gdata.endRendering ();
				    image = this.gdata.getScreenImage ();
				} catch (er) {
				    if (Clazz.exceptionOf (er, Error)) {
					this.handleError (er, false);
					this.setErrorMessage ("Error during rendering: " + er);
				    } else {
					throw er;
				    }
				}
				return image;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "isAntialiased", 
			    function () {
				return this.antialiasDisplay;
			    });
	Clazz.defineMethod (c$, "render", 
			    ($fz = function () {
				if (this.modelSet == null || !this.mustRender || !this.refreshing && !this.creatingImage || this.repaintManager == null) return;
				var antialias2 = this.antialiasDisplay && this.global.antialiasTranslucent;
				this.finalizeTransformParameters ();
				this.shapeManager.finalizeAtoms (this.transformManager.bsSelectedAtoms, this.transformManager.ptOffset);
				var minMax = this.shapeManager.transformAtoms ();
				this.transformManager.bsSelectedAtoms = null;
				{
				    if (!this.isJS2D) { this.repaintManager.renderExport("JS",
											 this.gdata, this.modelSet, null);
							this.notifyViewerRepaintDone(); return; }
				}this.repaintManager.render (this.gdata, this.modelSet, true, minMax);
				if (this.gdata.setPass2 (antialias2)) {
				    this.transformManager.setAntialias (antialias2);
				    this.repaintManager.render (this.gdata, this.modelSet, false, null);
				    this.transformManager.setAntialias (this.antialiasDisplay);
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getStereoImage", 
			    ($fz = function (stereoMode) {
				this.gdata.beginRendering (this.transformManager.getStereoRotationMatrix (true));
				this.render ();
				this.gdata.endRendering ();
				this.gdata.snapshotAnaglyphChannelBytes ();
				this.gdata.beginRendering (this.transformManager.getStereoRotationMatrix (false));
				this.render ();
				this.gdata.endRendering ();
				this.gdata.applyAnaglygh (stereoMode, this.transformManager.stereoColors);
				return this.gdata.getScreenImage ();
			    }, $fz.isPrivate = true, $fz), "org.jmol.constant.EnumStereoMode");
	Clazz.defineMethod (c$, "render1", 
			    ($fz = function (graphic, img, x, y) {
				if (graphic != null && img != null) {
				    this.apiPlatform.drawImage (graphic, img, x, y, this.dimScreen.width, this.dimScreen.height);
				}this.gdata.releaseScreenImage ();
			    }, $fz.isPrivate = true, $fz), "~O,~O,~N,~N");
	Clazz.overrideMethod (c$, "getScreenImageBuffer", 
			      function (graphic) {
				  {
				      if (!this.isJS2D)return null
				  }{
				      var mergeImages = (graphic == null && this.isStereoDouble ());
				      var imageBuffer = (this.transformManager.stereoMode.isBiColor () ? this.getStereoImage (this.transformManager.stereoMode) : this.getImage (this.isStereoDouble ()));
				      var imageBuffer2 = null;
				      if (mergeImages) {
					  imageBuffer2 = this.apiPlatform.newBufferedImage (imageBuffer, this.dimScreen.width << 1, this.dimScreen.height);
					  graphic = this.apiPlatform.getGraphics (imageBuffer2);
				      }if (graphic != null) {
					  if (this.isStereoDouble ()) {
					      this.render1 (graphic, imageBuffer, this.dimScreen.width, 0);
					      imageBuffer = this.getImage (false);
					  }this.render1 (graphic, imageBuffer, 0, 0);
				      }return (mergeImages ? imageBuffer2 : imageBuffer);
				  }}, "~O");
	Clazz.overrideMethod (c$, "getImageAs", 
			      function (type, quality, width, height, fileName, os) {
				  {
				      if (!this.isJS2D)return null
				  }return this.getImageAsWithComment (type, quality, width, height, fileName, null, os, "");
			      }, "~S,~N,~N,~N,~S,java.io.OutputStream");
	Clazz.defineMethod (c$, "getImageAsWithComment", 
			    function (type, quality, width, height, fileName, scripts, os, comment) {
				{
				    if (!this.isJS2D)return null
				}var saveWidth = this.dimScreen.width;
				var saveHeight = this.dimScreen.height;
				this.mustRender = true;
				this.resizeImage (width, height, true, false, false);
				this.setModelVisibility ();
				this.creatingImage = true;
				var c = null;
				var bytes = null;
				type = type.toLowerCase ();
				if (!org.jmol.util.Parser.isOneOf (type, "jpg;jpeg;jpg64;jpeg64")) try {
				    c = org.jmol.api.Interface.getOptionInterface ("export.image.ImageCreator");
				} catch (er) {
				    if (Clazz.exceptionOf (er, Error)) {
				    } else {
					throw er;
				    }
				}
				if (c == null) {
				    try {
					bytes = this.apiPlatform.getJpgImage (this, quality, comment);
					if (type.equals ("jpg64") || type.equals ("jpeg64")) bytes = (bytes == null ? "" : org.jmol.io.Base64.getBase64 (bytes).toString ());
				    } catch (er) {
					if (Clazz.exceptionOf (er, Error)) {
					    this.releaseScreenImage ();
					    this.handleError (er, false);
					    this.setErrorMessage ("Error creating image: " + er);
					    bytes = this.getErrorMessage ();
					} else {
					    throw er;
					}
				    }
				} else {
				    c.setViewer (this, this.privateKey);
				    try {
					bytes = c.getImageBytes (type, quality, fileName, scripts, null, os);
				    } catch (e$$) {
					if (Clazz.exceptionOf (e$$, java.io.IOException)) {
					    var e = e$$;
					    {
						bytes = e;
						this.setErrorMessage ("Error creating image: " + e);
					    }
					} else if (Clazz.exceptionOf (e$$, Error)) {
					    var er = e$$;
					    {
						this.handleError (er, false);
						this.setErrorMessage ("Error creating image: " + er);
						bytes = this.getErrorMessage ();
					    }
					} else {
					    throw e$$;
					}
				    }
				}this.creatingImage = false;
				this.resizeImage (saveWidth, saveHeight, true, false, true);
				return bytes;
			    }, "~S,~N,~N,~N,~S,~A,java.io.OutputStream,~S");
	Clazz.overrideMethod (c$, "releaseScreenImage", 
			      function () {
				  this.gdata.releaseScreenImage ();
			      });
	Clazz.defineMethod (c$, "getAllowEmbeddedScripts", 
			    function () {
				return this.global.allowEmbeddedScripts && !this.$isPreviewOnly;
			    });
	Clazz.overrideMethod (c$, "evalFile", 
			      function (strFilename) {
				  var ptWait = strFilename.indexOf (" -noqueue");
				  if (ptWait >= 0) {
				      return this.evalStringWaitStatusQueued ("String", strFilename.substring (0, ptWait), "", true, false, false);
				  }return this.scriptManager.addScript (strFilename, true, false);
			      }, "~S");
	Clazz.defineMethod (c$, "getInterruptScript", 
			    function () {
				var s = this.interruptScript;
				this.interruptScript = "";
				if (org.jmol.util.Logger.debugging && s !== "") org.jmol.util.Logger.debug ("interrupt: " + s);
				return s;
			    });
	Clazz.overrideMethod (c$, "script", 
			      function (strScript) {
				  return this.evalString (strScript);
			      }, "~S");
	Clazz.overrideMethod (c$, "evalString", 
			      function (strScript) {
				  return this.evalStringQuietSync (strScript, false, true);
			      }, "~S");
	Clazz.overrideMethod (c$, "evalStringQuiet", 
			      function (strScript) {
				  return this.evalStringQuietSync (strScript, true, true);
			      }, "~S");
	Clazz.defineMethod (c$, "evalStringQuietSync", 
			    function (strScript, isQuiet, allowSyncScript) {
				if (allowSyncScript && this.statusManager.syncingScripts && strScript.indexOf ("#NOSYNC;") < 0) this.syncScript (strScript + " #NOSYNC;", null, 0);
				if (this.$eval.isExecutionPaused () && strScript.charAt (0) != '!') strScript = '!' + org.jmol.util.TextFormat.trim (strScript, "\n\r\t ");
				var isInterrupt = (strScript.length > 0 && strScript.charAt (0) == '!');
				if (isInterrupt) strScript = strScript.substring (1);
				var msg = this.checkScriptExecution (strScript, isInterrupt);
				if (msg != null) return msg;
				if (this.isScriptExecuting () && (isInterrupt || this.$eval.isExecutionPaused ())) {
				    this.interruptScript = strScript;
				    if (strScript.indexOf ("moveto ") == 0) this.scriptManager.flushQueue ("moveto ");
				    return "!" + strScript;
				}this.interruptScript = "";
				if (isQuiet) strScript += "\u0001## EDITOR_IGNORE ##";
				return this.scriptManager.addScript (strScript, false, isQuiet && !this.getMessageStyleChime ());
			    }, "~S,~B,~B");
	Clazz.defineMethod (c$, "checkScriptExecution", 
			    ($fz = function (strScript, isInterrupt) {
				var str = strScript;
				if (str.indexOf ("\1##") >= 0) str = str.substring (0, str.indexOf ("\1##"));
				if (this.checkResume (str)) return "script processing resumed";
				if (this.checkStepping (str)) return "script processing stepped";
				if (this.checkHalt (str, isInterrupt)) return "script execution halted";
				return null;
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "usingScriptQueue", 
			    function () {
				return this.global.useScriptQueue;
			    });
	Clazz.defineMethod (c$, "clearScriptQueue", 
			    function () {
				this.scriptManager.clearQueue ();
			    });
	Clazz.defineMethod (c$, "setScriptQueue", 
			    ($fz = function (TF) {
				this.global.useScriptQueue = TF;
				if (!TF) this.clearScriptQueue ();
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "checkResume", 
			    function (str) {
				if (str.equalsIgnoreCase ("resume")) {
				    this.setScriptStatus ("", "execution resumed", 0, null);
				    this.resumeScriptExecution ();
				    return true;
				}return false;
			    }, "~S");
	Clazz.defineMethod (c$, "checkStepping", 
			    function (str) {
				if (str.equalsIgnoreCase ("step")) {
				    this.stepScriptExecution ();
				    return true;
				}if (str.equalsIgnoreCase ("?")) {
				    this.scriptStatus (this.$eval.getNextStatement ());
				    return true;
				}return false;
			    }, "~S");
	Clazz.overrideMethod (c$, "checkHalt", 
			      function (str, isInterrupt) {
				  if (str.equalsIgnoreCase ("pause")) {
				      this.pauseScriptExecution ();
				      if (this.scriptEditorVisible) this.setScriptStatus ("", "paused -- type RESUME to continue", 0, null);
				      return true;
				  }if (str.equalsIgnoreCase ("menu")) {
				      this.getProperty ("DATA_API", "getPopupMenu", "\0");
				      return true;
				  }str = str.toLowerCase ();
				  var exitScript = false;
				  var haltType = null;
				  if (str.startsWith ("exit")) {
				      this.haltScriptExecution ();
				      this.clearScriptQueue ();
				      this.clearTimeout (null);
				      exitScript = str.equals (haltType = "exit");
				  } else if (str.startsWith ("quit")) {
				      this.haltScriptExecution ();
				      exitScript = str.equals (haltType = "quit");
				  }if (haltType == null) return false;
				  if (isInterrupt) {
				      this.transformManager.setSpinOn (false);
				      this.stopMinimization ();
				  }if (isInterrupt || this.waitForMoveTo ()) {
				      this.stopMotion ();
				  }org.jmol.util.Logger.info (this.isSyntaxCheck ? haltType + " -- stops script checking" : (isInterrupt ? "!" : "") + haltType + " received");
				  this.isSyntaxCheck = false;
				  return exitScript;
			      }, "~S,~B");
	Clazz.overrideMethod (c$, "scriptWait", 
			      function (strScript) {
				  this.scriptManager.waitForQueue ();
				  var doTranslateTemp = org.jmol.i18n.GT.getDoTranslate ();
				  org.jmol.i18n.GT.setDoTranslate (false);
				  var str = this.evalStringWaitStatusQueued ("JSON", strScript, "+scriptStarted,+scriptStatus,+scriptEcho,+scriptTerminated", false, false, false);
				  org.jmol.i18n.GT.setDoTranslate (doTranslateTemp);
				  return str;
			      }, "~S");
	Clazz.overrideMethod (c$, "scriptWaitStatus", 
			      function (strScript, statusList) {
				  this.scriptManager.waitForQueue ();
				  var doTranslateTemp = org.jmol.i18n.GT.getDoTranslate ();
				  org.jmol.i18n.GT.setDoTranslate (false);
				  var ret = this.evalStringWaitStatusQueued ("object", strScript, statusList, false, false, false);
				  org.jmol.i18n.GT.setDoTranslate (doTranslateTemp);
				  return ret;
			      }, "~S,~S");
	Clazz.defineMethod (c$, "evalStringWaitStatus", 
			    function (returnType, strScript, statusList) {
				this.scriptManager.waitForQueue ();
				return this.evalStringWaitStatusQueued (returnType, strScript, statusList, false, false, false);
			    }, "~S,~S,~S");
	Clazz.defineMethod (c$, "evalStringWaitStatusQueued", 
			    function (returnType, strScript, statusList, isScriptFile, isQuiet, isQueued) {
				if (strScript == null) return null;
				var str = this.checkScriptExecution (strScript, false);
				if (str != null) return str;
				var outputBuffer = (statusList == null || statusList.equals ("output") ?  new org.jmol.util.StringXBuilder () : null);
				var oldStatusList = this.statusManager.getStatusList ();
				this.getProperty ("String", "jmolStatus", statusList);
				if (this.isSyntaxCheck) org.jmol.util.Logger.info ("--checking script:\n" + this.$eval.getScript () + "\n----\n");
				var historyDisabled = (strScript.indexOf (")") == 0);
				if (historyDisabled) strScript = strScript.substring (1);
				historyDisabled = historyDisabled || !isQueued;
				this.setErrorMessage (null);
				var isOK = (isScriptFile ? this.$eval.compileScriptFile (strScript, isQuiet) : this.$eval.compileScriptString (strScript, isQuiet));
				var strErrorMessage = this.$eval.getErrorMessage ();
				var strErrorMessageUntranslated = this.$eval.getErrorMessageUntranslated ();
				this.setErrorMessageUn (strErrorMessage, strErrorMessageUntranslated);
				this.refresh (7, "script complete");
				if (isOK) {
				    this.isScriptQueued = isQueued;
				    if (!isQuiet) this.setScriptStatus (null, strScript, -2 - (++this.scriptIndex), null);
				    this.$eval.evaluateCompiledScript (this.isSyntaxCheck, this.isSyntaxAndFileCheck, historyDisabled, this.listCommands, outputBuffer);
				    this.setErrorMessageUn (strErrorMessage = this.$eval.getErrorMessage (), strErrorMessageUntranslated = this.$eval.getErrorMessageUntranslated ());
				    if (!isQuiet) this.setScriptStatus ("Jmol script terminated", strErrorMessage, 1 + this.$eval.getExecutionWalltime (), strErrorMessageUntranslated);
				} else {
				    this.scriptStatus (strErrorMessage);
				    this.setScriptStatus ("Jmol script terminated", strErrorMessage, 1, strErrorMessageUntranslated);
				}this.setStateScriptVersion (null);
				if (strErrorMessage != null && this.autoExit) this.exitJmol ();
				if (this.isSyntaxCheck) {
				    if (strErrorMessage == null) org.jmol.util.Logger.info ("--script check ok");
				    else org.jmol.util.Logger.error ("--script check error\n" + strErrorMessageUntranslated);
				}if (this.isSyntaxCheck) org.jmol.util.Logger.info ("(use 'exit' to stop checking)");
				this.isScriptQueued = true;
				if (returnType.equalsIgnoreCase ("String")) return strErrorMessageUntranslated;
				if (outputBuffer != null) return (strErrorMessageUntranslated == null ? outputBuffer.toString () : strErrorMessageUntranslated);
				var info = this.getProperty (returnType, "jmolStatus", statusList);
				this.getProperty ("object", "jmolStatus", oldStatusList);
				return info;
			    }, "~S,~S,~S,~B,~B,~B");
	Clazz.defineMethod (c$, "exitJmol", 
			    function () {
				if (this.$isApplet) return;
				if (this.headlessImage != null) {
				    try {
					var p = this.headlessImage;
					if (this.isHeadless ()) this.createImage (p[0], p[1], null, (p[2]).intValue (), (p[3]).intValue (), (p[4]).intValue ());
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					} else {
					    throw e;
					}
				    }
				}org.jmol.util.Logger.debug ("exitJmol -- exiting");
				System.out.flush ();
				System.exit (0);
			    });
	Clazz.defineMethod (c$, "scriptCheckRet", 
			    ($fz = function (strScript, returnContext) {
				if (strScript.indexOf (")") == 0 || strScript.indexOf ("!") == 0) strScript = strScript.substring (1);
				var sc = ( new org.jmol.script.ScriptEvaluator (this)).checkScriptSilent (strScript);
				if (returnContext || sc.errorMessage == null) return sc;
				return sc.errorMessage;
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.overrideMethod (c$, "scriptCheck", 
			      function (strScript) {
				  return this.scriptCheckRet (strScript, false);
			      }, "~S");
	Clazz.overrideMethod (c$, "isScriptExecuting", 
			      function () {
				  return this.$eval.isScriptExecuting ();
			      });
	Clazz.overrideMethod (c$, "haltScriptExecution", 
			      function () {
				  this.$eval.haltExecution ();
				  this.setStringPropertyTok ("pathForAllFiles", 545259570, "");
				  this.clearTimeout (null);
			      });
	Clazz.defineMethod (c$, "resumeScriptExecution", 
			    function () {
				this.$eval.resumePausedExecution ();
			    });
	Clazz.defineMethod (c$, "stepScriptExecution", 
			    function () {
				this.$eval.stepPausedExecution ();
			    });
	Clazz.defineMethod (c$, "pauseScriptExecution", 
			    function () {
				this.$eval.pauseExecution (true);
			    });
	Clazz.defineMethod (c$, "getDefaultLoadFilter", 
			    function () {
				return this.global.defaultLoadFilter;
			    });
	Clazz.defineMethod (c$, "getDefaultLoadScript", 
			    function () {
				return this.global.defaultLoadScript;
			    });
	Clazz.defineMethod (c$, "resolveDatabaseFormat", 
			    function (fileName) {
				if (org.jmol.viewer.Viewer.hasDatabasePrefix (fileName)) fileName = this.setLoadFormat (fileName, fileName.charAt (0), false);
				return fileName;
			    }, "~S");
	c$.isDatabaseCode = Clazz.defineMethod (c$, "isDatabaseCode", 
						function (ch) {
						    return (ch == '$' || ch == '=' || ch == ':');
						}, "~S");
	c$.hasDatabasePrefix = Clazz.defineMethod (c$, "hasDatabasePrefix", 
						   function (fileName) {
						       return (fileName.length != 0 && org.jmol.viewer.Viewer.isDatabaseCode (fileName.charAt (0)));
						   }, "~S");
	Clazz.defineMethod (c$, "setLoadFormat", 
			    function (name, type, withPrefix) {
				var format;
				var f = name.substring (1);
				switch (type) {
				case '=':
				case '#':
				    if (name.startsWith ("==")) {
					f = f.substring (1);
					type = '#';
				    }var s = (type == '=' ? this.global.loadFormat : this.global.loadLigandFormat);
				    if (f.indexOf (".") > 0 && s.indexOf ("%FILE.") >= 0) s = s.substring (0, s.indexOf ("%FILE") + 5);
				    return org.jmol.util.TextFormat.formatStringS (s, "FILE", f);
				case ':':
				    format = this.global.pubChemFormat;
				    var fl = f.toLowerCase ();
				    try {
					f = "cid/" + String.valueOf (Integer.$valueOf (f).intValue ());
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    if (fl.startsWith ("smiles:")) {
						format += "?POST?smiles=" + f.substring (7);
						f = "smiles";
					    } else if (fl.startsWith ("cid:")) {
						f = "cid/" + f.substring (4);
					    } else {
						if (fl.startsWith ("name:")) f = f.substring (5);
						if (fl.startsWith ("cas:")) f = f.substring (4);
						f = "name/" + org.jmol.util.Escape.escapeUrl (f);
					    }} else {
						throw e;
					    }
				    }
				    return org.jmol.util.TextFormat.formatStringS (format, "FILE", f);
				case '$':
				    if (f.startsWith ("$")) {
					f = f.substring (1);
					format = org.jmol.util.TextFormat.simpleReplace (this.global.smilesUrlFormat, "&get3d=True", "");
					return org.jmol.util.TextFormat.formatStringS (format, "FILE", org.jmol.util.Escape.escapeUrl (f));
				    }case 'N':
				case '2':
				case 'I':
				case 'K':
				case '/':
				    f = org.jmol.util.Escape.escapeUrl (f);
				    switch (type) {
				    case 'N':
					format = this.global.nihResolverFormat + "/names";
					break;
				    case '2':
					format = this.global.nihResolverFormat + "/image";
					break;
				    case 'I':
					format = this.global.nihResolverFormat + "/stdinchi";
					break;
				    case 'K':
					format = this.global.nihResolverFormat + "/inchikey";
					break;
				    case '/':
					format = this.global.nihResolverFormat + "/";
					break;
				    default:
					format = this.global.smilesUrlFormat;
					break;
				    }
				    return (withPrefix ? "MOL3D::" : "") + org.jmol.util.TextFormat.formatStringS (format, "FILE", f);
				case '_':
				    var server = org.jmol.viewer.FileManager.fixFileNameVariables (this.global.edsUrlFormat, f);
				    var strCutoff = org.jmol.viewer.FileManager.fixFileNameVariables (this.global.edsUrlCutoff, f);
				    return [server, strCutoff];
				}
				return name.substring (1);
			    }, "~S,~S,~B");
	Clazz.defineMethod (c$, "getElectronDensityLoadInfo", 
			    function () {
				return [this.global.edsUrlFormat, this.global.edsUrlCutoff, this.global.edsUrlOptions];
			    });
	Clazz.defineMethod (c$, "getStandardLabelFormat", 
			    function (type) {
				switch (type) {
				default:
				case 0:
				    return "%[identify]";
				case 1:
				    return this.global.defaultLabelXYZ;
				case 2:
				    return this.global.defaultLabelPDB;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "getRibbonAspectRatio", 
			    function () {
				return this.global.ribbonAspectRatio;
			    });
	Clazz.defineMethod (c$, "getSheetSmoothing", 
			    function () {
				return this.global.sheetSmoothing;
			    });
	Clazz.defineMethod (c$, "getSsbondsBackbone", 
			    function () {
				return this.global.ssbondsBackbone;
			    });
	Clazz.defineMethod (c$, "getHbondsBackbone", 
			    function () {
				return this.global.hbondsBackbone;
			    });
	Clazz.defineMethod (c$, "getHbondsSolid", 
			    function () {
				return this.global.hbondsSolid;
			    });
	Clazz.defineMethod (c$, "getAdditionalHydrogens", 
			    function (bsAtoms, doAll, justCarbon, vConnections) {
				if (bsAtoms == null) bsAtoms = this.getSelectionSet (false);
				var nTotal =  Clazz.newIntArray (1, 0);
				var pts = this.modelSet.calculateHydrogens (bsAtoms, nTotal, doAll, justCarbon, vConnections);
				var points =  new Array (nTotal[0]);
				for (var i = 0, pt = 0; i < pts.length; i++) if (pts[i] != null) for (var j = 0; j < pts[i].length; j++) points[pt++] = pts[i][j];


				return points;
			    }, "org.jmol.util.BitSet,~B,~B,java.util.List");
	Clazz.defineMethod (c$, "addHydrogens", 
			    function (bsAtoms, asScript, isSilent) {
				var doAll = (bsAtoms == null);
				if (bsAtoms == null) bsAtoms = this.getModelUndeletedAtomsBitSet (this.getVisibleFramesBitSet ().length () - 1);
				var bsB =  new org.jmol.util.BitSet ();
				if (bsAtoms.cardinality () == 0) return bsB;
				var modelIndex = this.modelSet.atoms[bsAtoms.nextSetBit (0)].modelIndex;
				if (modelIndex != this.modelSet.getModelCount () - 1) return bsB;
				var vConnections =  new java.util.ArrayList ();
				var pts = this.getAdditionalHydrogens (bsAtoms, doAll, false, vConnections);
				var wasAppendNew = false;
				wasAppendNew = this.getAppendNew ();
				if (pts.length > 0) {
				    this.clearModelDependentObjects ();
				    try {
					bsB = (asScript ? this.modelSet.addHydrogens (vConnections, pts) : this.addHydrogensInline (bsAtoms, vConnections, pts));
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    System.out.println (e.getMessage ());
					} else {
					    throw e;
					}
				    }
				    if (wasAppendNew) this.setAppendNew (true);
				}if (!isSilent) this.scriptStatus (org.jmol.i18n.GT._ ("{0} hydrogens added", pts.length));
				return bsB;
			    }, "org.jmol.util.BitSet,~B,~B");
	Clazz.defineMethod (c$, "addHydrogensInline", 
			    ($fz = function (bsAtoms, vConnections, pts) {
				var modelIndex = this.getAtomModelIndex (bsAtoms.nextSetBit (0));
				if (modelIndex != this.modelSet.getModelCount () - 1) return  new org.jmol.util.BitSet ();
				var bsA = this.getModelUndeletedAtomsBitSet (modelIndex);
				this.setAppendNew (false);
				var atomIndex = this.modelSet.getAtomCount ();
				var atomno = this.modelSet.getAtomCountInModel (modelIndex);
				var sbConnect =  new org.jmol.util.StringXBuilder ();
				for (var i = 0; i < vConnections.size (); i++) {
				    var a = vConnections.get (i);
				    sbConnect.append (";  connect 0 100 ").append ("({" + (atomIndex++) + "}) ").append ("({" + a.index + "}) group;");
				}
				var sb =  new org.jmol.util.StringXBuilder ();
				sb.appendI (pts.length).append ("\n").append ("Viewer.AddHydrogens").append ("#noautobond").append ("\n");
				for (var i = 0; i < pts.length; i++) sb.append ("H ").appendF (pts[i].x).append (" ").appendF (pts[i].y).append (" ").appendF (pts[i].z).append (" - - - - ").appendI (++atomno).appendC ('\n');

				this.loadInlineScript (sb.toString (), '\n', true, null);
				this.$eval.runScriptBuffer (sbConnect.toString (), null);
				var bsB = this.getModelUndeletedAtomsBitSet (modelIndex);
				bsB.andNot (bsA);
				return bsB;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,java.util.List,~A");
	Clazz.overrideMethod (c$, "setMarBond", 
			      function (marBond) {
				  this.global.bondRadiusMilliAngstroms = marBond;
				  this.global.setParamI ("bondRadiusMilliAngstroms", marBond);
				  this.setShapeSize (1, marBond * 2, org.jmol.util.BitSetUtil.setAll (this.getAtomCount ()));
			      }, "~N");
	Clazz.defineMethod (c$, "isHoverEnabled", 
			    function () {
				return this.hoverEnabled;
			    });
	Clazz.defineMethod (c$, "setHoverLabel", 
			    function (strLabel) {
				this.loadShape (33);
				this.setShapeProperty (33, "label", strLabel);
				this.hoverEnabled = (strLabel != null);
			    }, "~S");
	Clazz.defineMethod (c$, "hoverOn", 
			    function (atomIndex, action) {
				this.setStatusAtomHovered (atomIndex, this.getAtomInfoXYZ (atomIndex, false));
				if (!this.hoverEnabled) return;
				if (this.isModelKitMode ()) {
				    if (this.isAtomAssignable (atomIndex)) this.highlight (org.jmol.util.BitSetUtil.newAndSetBit (atomIndex));
				    this.refresh (3, "hover on atom");
				    return;
				}if (this.$eval != null && this.isScriptExecuting () || atomIndex == this.hoverAtomIndex || this.global.hoverDelayMs == 0) return;
				if (!this.isInSelectionSubset (atomIndex)) return;
				this.loadShape (33);
				if (this.isBound (action, 30) && this.getPickingMode () == 2 && this.modelSet.atoms[atomIndex].isShapeVisible (org.jmol.viewer.JmolConstants.getShapeVisibilityFlag (5))) {
				    this.setShapeProperty (33, "specialLabel", org.jmol.i18n.GT._ ("Drag to move label"));
				}this.setShapeProperty (33, "text", null);
				this.setShapeProperty (33, "target", Integer.$valueOf (atomIndex));
				this.hoverText = null;
				this.hoverAtomIndex = atomIndex;
				this.refresh (3, "hover on atom");
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getHoverDelay", 
			    function () {
				return this.global.modelKitMode ? 20 : this.global.hoverDelayMs;
			    });
	Clazz.defineMethod (c$, "hoverOnPt", 
			    function (x, y, text, id, pt) {
				if (!this.isHoverEnabled ()) return;
				if (this.$eval != null && this.isScriptExecuting ()) return;
				this.loadShape (33);
				this.setShapeProperty (33, "xy", org.jmol.util.Point3i.new3 (x, y, 0));
				this.setShapeProperty (33, "target", null);
				this.setShapeProperty (33, "specialLabel", null);
				this.setShapeProperty (33, "text", text);
				this.hoverAtomIndex = -1;
				this.hoverText = text;
				if (id != null && pt != null) this.setStatusObjectHovered (id, text, pt);
				this.refresh (3, "hover on point");
			    }, "~N,~N,~S,~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "hoverOff", 
			    function () {
				if (this.isModelKitMode ()) this.highlight (null);
				if (!this.isHoverEnabled ()) return;
				var isHover = (this.hoverText != null || this.hoverAtomIndex >= 0);
				if (this.hoverAtomIndex >= 0) {
				    this.setShapeProperty (33, "target", null);
				    this.hoverAtomIndex = -1;
				}if (this.hoverText != null) {
				    this.setShapeProperty (33, "text", null);
				    this.hoverText = null;
				}this.setShapeProperty (33, "specialLabel", null);
				if (isHover) this.refresh (3, "hover off");
			    });
	Clazz.defineMethod (c$, "getBfactor100Hi", 
			    function () {
				return this.modelSet.getBfactor100Hi ();
			    });
	Clazz.defineMethod (c$, "getColix", 
			    function (object) {
				return org.jmol.util.Colix.getColixO (object);
			    }, "~O");
	Clazz.defineMethod (c$, "getRasmolSetting", 
			    function (tok) {
				switch (tok) {
				case 1613758476:
				    return this.global.rasmolHydrogenSetting;
				case 1613758470:
				    return this.global.rasmolHeteroSetting;
				}
				return false;
			    }, "~N");
	Clazz.defineMethod (c$, "getDebugScript", 
			    function () {
				return this.global.debugScript;
			    });
	Clazz.overrideMethod (c$, "setDebugScript", 
			      function (debugScript) {
				  this.global.debugScript = debugScript;
				  this.global.setParamB ("debugScript", debugScript);
				  this.$eval.setDebugging ();
			      }, "~B");
	Clazz.defineMethod (c$, "clearClickCount", 
			    function () {
				this.setTainted (true);
			    });
	Clazz.defineMethod (c$, "getCursor", 
			    function () {
				return this.currentCursor;
			    });
	Clazz.defineMethod (c$, "setCursor", 
			    function (cursor) {
				if (this.$isKiosk || this.currentCursor == cursor || this.multiTouch || !this.haveDisplay) return;
				this.apiPlatform.setCursor (this.currentCursor = cursor, this.display);
			    }, "~N");
	Clazz.defineMethod (c$, "setPickingMode", 
			    function (strMode, pickingMode) {
				if (!this.haveDisplay) return;
				this.showSelected = false;
				var option = null;
				if (strMode != null) {
				    var pt = strMode.indexOf ("_");
				    if (pt >= 0) {
					option = strMode.substring (pt + 1);
					strMode = strMode.substring (0, pt);
				    }pickingMode = org.jmol.viewer.ActionManager.getPickingMode (strMode);
				}if (pickingMode < 0) pickingMode = 1;
				this.actionManager.setPickingMode (pickingMode);
				this.global.setParamS ("picking", org.jmol.viewer.ActionManager.getPickingModeName (this.actionManager.getAtomPickingMode ()));
				if (option == null || option.length == 0) return;
				option = Character.toUpperCase (option.charAt (0)) + (option.length == 1 ? "" : option.substring (1, 2));
				switch (pickingMode) {
				case 32:
				    this.setAtomPickingOption (option);
				    break;
				case 33:
				    this.setBondPickingOption (option);
				    break;
				default:
				    org.jmol.util.Logger.error ("Bad picking mode: " + strMode + "_" + option);
				}
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getPickingMode", 
			    function () {
				return (this.haveDisplay ? this.actionManager.getAtomPickingMode () : 0);
			    });
	Clazz.defineMethod (c$, "getDrawPicking", 
			    function () {
				return this.global.drawPicking;
			    });
	Clazz.defineMethod (c$, "isModelKitMode", 
			    function () {
				return this.global.modelKitMode;
			    });
	Clazz.defineMethod (c$, "getBondPicking", 
			    function () {
				return this.global.bondPicking || this.global.modelKitMode;
			    });
	Clazz.defineMethod (c$, "getAtomPicking", 
			    ($fz = function () {
				return this.global.atomPicking;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setPickingStyle", 
			    function (style, pickingStyle) {
				if (!this.haveDisplay) return;
				if (style != null) pickingStyle = org.jmol.viewer.ActionManager.getPickingStyle (style);
				if (pickingStyle < 0) pickingStyle = 0;
				this.actionManager.setPickingStyle (pickingStyle);
				this.global.setParamS ("pickingStyle", org.jmol.viewer.ActionManager.getPickingStyleName (this.actionManager.getPickingStyle ()));
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getDrawHover", 
			    function () {
				return this.haveDisplay && this.global.drawHover;
			    });
	Clazz.overrideMethod (c$, "getAtomInfo", 
			      function (atomOrPointIndex) {
				  return (atomOrPointIndex >= 0 ? this.modelSet.getAtomInfo (atomOrPointIndex, null) : this.shapeManager.getShapePropertyIndex (6, "pointInfo", -atomOrPointIndex));
			      }, "~N");
	Clazz.defineMethod (c$, "getAtomInfoXYZ", 
			    function (atomIndex, useChimeFormat) {
				return this.modelSet.getAtomInfoXYZ (atomIndex, useChimeFormat);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setSync", 
			    ($fz = function () {
				if (this.statusManager.doSync ()) this.statusManager.setSync (null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "setJmolCallbackListener", 
			      function (jmolCallbackListener) {
				  this.statusManager.setJmolCallbackListener (jmolCallbackListener);
			      }, "org.jmol.api.JmolCallbackListener");
	Clazz.overrideMethod (c$, "setJmolStatusListener", 
			      function (jmolStatusListener) {
				  this.statusManager.setJmolStatusListener (jmolStatusListener, null);
			      }, "org.jmol.api.JmolStatusListener");
	Clazz.defineMethod (c$, "getMessageQueue", 
			    function () {
				return this.statusManager.getMessageQueue ();
			    });
	Clazz.defineMethod (c$, "getStatusChanged", 
			    function (statusNameList) {
				return this.statusManager.getStatusChanged (statusNameList);
			    }, "~S");
	Clazz.defineMethod (c$, "menuEnabled", 
			    function () {
				return !this.global.disablePopupMenu;
			    });
	Clazz.defineMethod (c$, "popupMenu", 
			    function (x, y, type) {
				if (!this.haveDisplay || !this.refreshing || this.$isPreviewOnly || this.global.disablePopupMenu) return;
				switch (type) {
				case 'j':
				    try {
					this.getPopupMenu ();
					this.jmolpopup.show (x, y);
				    } catch (e) {
					this.global.disablePopupMenu = true;
				    }
				    break;
				case 'a':
				case 'b':
				case 'm':
				    this.modelkitPopup = this.apiPlatform.getMenuPopup (this, null, type);
				    if (this.modelkitPopup != null) this.modelkitPopup.show (x, y);
				    break;
				}
			    }, "~N,~N,~S");
	Clazz.defineMethod (c$, "getMenu", 
			    function (type) {
				this.getPopupMenu ();
				if (type.equals ("\0")) {
				    this.popupMenu (this.dimScreen.width - 120, 0, 'j');
				    return "OK";
				}return (this.jmolpopup == null ? "" : this.jmolpopup.getMenuAsString ("Jmol version " + org.jmol.viewer.Viewer.getJmolVersion () + "|_GET_MENU|" + type));
			    }, "~S");
	Clazz.defineMethod (c$, "getPopupMenu", 
			    ($fz = function () {
				if (this.jmolpopup == null) {
				    this.jmolpopup = this.apiPlatform.getMenuPopup (this, this.menuStructure, 'j');
				    if (this.jmolpopup == null) {
					this.global.disablePopupMenu = true;
					return null;
				    }}return this.jmolpopup.getMenuAsObject ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setMenu", 
			    function (fileOrText, isFile) {
				if (isFile) org.jmol.util.Logger.info ("Setting menu " + (fileOrText.length == 0 ? "to Jmol defaults" : "from file " + fileOrText));
				if (fileOrText.length == 0) fileOrText = null;
				else if (isFile) fileOrText = this.getFileAsString (fileOrText);
				this.getProperty ("DATA_API", "setMenu", fileOrText);
				this.statusManager.setCallbackFunction ("menu", fileOrText);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "setStatusFrameChanged", 
			    function (frameNo) {
				var modelIndex = this.animationManager.currentModelIndex;
				if (frameNo == -2147483648) {
				    this.prevFrame = -2147483648;
				    frameNo = modelIndex;
				}this.transformManager.setVibrationPeriod (NaN);
				var firstIndex = this.animationManager.firstModelIndex;
				var lastIndex = this.animationManager.lastModelIndex;
				if (firstIndex == lastIndex) modelIndex = firstIndex;
				var frameID = this.getModelFileNumber (modelIndex);
				var fileNo = frameID;
				var modelNo = frameID % 1000000;
				var firstNo = this.getModelFileNumber (firstIndex);
				var lastNo = this.getModelFileNumber (lastIndex);
				var strModelNo;
				if (fileNo == 0) {
				    strModelNo = this.getModelNumberDotted (firstIndex);
				    if (firstIndex != lastIndex) strModelNo += " - " + this.getModelNumberDotted (lastIndex);
				    if (Clazz.doubleToInt (firstNo / 1000000) == Clazz.doubleToInt (lastNo / 1000000)) fileNo = firstNo;
				} else {
				    strModelNo = this.getModelNumberDotted (modelIndex);
				}if (fileNo != 0) fileNo = (fileNo < 1000000 ? 1 : Clazz.doubleToInt (fileNo / 1000000));
				this.global.setParamI ("_currentFileNumber", fileNo);
				this.global.setParamI ("_currentModelNumberInFile", modelNo);
				this.global.setParamI ("_frameID", frameID);
				this.global.setParamS ("_modelNumber", strModelNo);
				this.global.setParamS ("_modelName", (modelIndex < 0 ? "" : this.getModelName (modelIndex)));
				this.global.setParamS ("_modelTitle", (modelIndex < 0 ? "" : this.getModelTitle (modelIndex)));
				this.global.setParamS ("_modelFile", (modelIndex < 0 ? "" : this.getModelFileName (modelIndex)));
				if (modelIndex == this.prevFrame) {
				    return;
				}this.prevFrame = modelIndex;
				this.statusManager.setStatusFrameChanged (frameNo, fileNo, modelNo, (this.animationManager.animationDirection < 0 ? -firstNo : firstNo), (this.animationManager.currentDirection < 0 ? -lastNo : lastNo));
				this.sendJSpecViewModelChange (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "sendJSpecViewModelChange", 
			    ($fz = function (modelIndex) {
				var syncMode = ("sync on".equals (this.modelSet.getModelSetAuxiliaryInfoValue ("jmolscript")) ? 1 : this.statusManager.getSyncMode ());
				if (syncMode != 1) return;
				var peak = this.getModelAuxiliaryInfoValue (modelIndex, "jdxModelSelect");
				if (peak != null) this.sendJSpecView (peak);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "scriptEcho", 
			    function (strEcho) {
				if (!org.jmol.util.Logger.isActiveLevel (4)) return;
				{
				    System.out.println(strEcho);
				}this.statusManager.setScriptEcho (strEcho, this.isScriptQueued);
				if (this.listCommands && strEcho != null && strEcho.indexOf ("$[") == 0) org.jmol.util.Logger.info (strEcho);
			    }, "~S");
	Clazz.defineMethod (c$, "notifyError", 
			    function (errType, errMsg, errMsgUntranslated) {
				this.global.setParamS ("_errormessage", errMsgUntranslated);
				this.statusManager.notifyError (errType, errMsg, errMsgUntranslated);
			    }, "~S,~S,~S");
	Clazz.defineMethod (c$, "jsEval", 
			    function (strEval) {
				return this.statusManager.jsEval (strEval);
			    }, "~S");
	Clazz.defineMethod (c$, "setStatusAtomHovered", 
			    function (atomIndex, info) {
				this.global.setParamI ("_atomhovered", atomIndex);
				this.statusManager.setStatusAtomHovered (atomIndex, info);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setStatusObjectHovered", 
			    function (id, info, pt) {
				this.global.setParamS ("_objecthovered", id);
				this.statusManager.setStatusObjectHovered (id, info, pt);
			    }, "~S,~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setFileLoadStatus", 
			    ($fz = function (ptLoad, fullPathName, fileName, modelName, strError) {
				this.setErrorMessage (strError);
				this.global.setParamI ("_loadPoint", ptLoad.getCode ());
				var doCallback = (ptLoad !== org.jmol.constant.EnumFileStatus.CREATING_MODELSET);
				this.statusManager.setFileLoadStatus (fullPathName, fileName, modelName, strError, ptLoad.getCode (), doCallback);
				if (doCallback) this.sendJSpecViewModelChange (this.getCurrentModelIndex ());
			    }, $fz.isPrivate = true, $fz), "org.jmol.constant.EnumFileStatus,~S,~S,~S,~S");
	Clazz.defineMethod (c$, "getZapName", 
			    function () {
				return (this.getModelkitMode () ? "Jmol Model Kit" : "zapped");
			    });
	Clazz.defineMethod (c$, "setStatusMeasuring", 
			    function (status, intInfo, strMeasure, value) {
				this.statusManager.setStatusMeasuring (status, intInfo, strMeasure, value);
			    }, "~S,~N,~S,~N");
	Clazz.defineMethod (c$, "notifyMinimizationStatus", 
			    function () {
				var step = this.getParameter ("_minimizationStep");
				var ff = this.getParameter ("_minimizationForceField");
				this.statusManager.notifyMinimizationStatus (this.getParameter ("_minimizationStatus"), Clazz.instanceOf (step, String) ? Integer.$valueOf (0) : step, this.getParameter ("_minimizationEnergy"), this.getParameter ("_minimizationEnergyDiff"), ff);
			    });
	Clazz.defineMethod (c$, "setStatusAtomPicked", 
			    function (atomIndex, info) {
				if (info == null) {
				    info = this.global.pickLabel;
				    if (info.length == 0) info = this.getAtomInfoXYZ (atomIndex, this.getMessageStyleChime ());
				    else info = this.modelSet.getAtomInfo (atomIndex, info);
				}this.global.setPicked (atomIndex);
				this.global.setParamS ("_pickinfo", info);
				this.statusManager.setStatusAtomPicked (atomIndex, info);
				var syncMode = this.statusManager.getSyncMode ();
				if (syncMode != 1) return;
				var peak = this.modelSet.getPeakAtomRecord (atomIndex);
				if (peak != null) this.sendJSpecView (peak + " src=\"JmolAtomSelect\"");
			    }, "~N,~S");
	Clazz.defineMethod (c$, "sendJSpecView", 
			    ($fz = function (peak) {
				var msg = org.jmol.util.Parser.getQuotedAttribute (peak, "title");
				if (msg != null) this.scriptEcho (org.jmol.util.Logger.debugging ? peak : msg);
				peak = this.fullName + "JSpecView: " + peak;
				org.jmol.util.Logger.info ("Jmol>JSV " + peak);
				this.statusManager.syncSend (peak, ">", 0);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setStatusResized", 
			    function (width, height) {
				this.statusManager.setStatusResized (width, height);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "scriptStatus", 
			    function (strStatus) {
				this.setScriptStatus (strStatus, "", 0, null);
			    }, "~S");
	Clazz.defineMethod (c$, "scriptStatusMsg", 
			    function (strStatus, statusMessage) {
				this.setScriptStatus (strStatus, statusMessage, 0, null);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "setScriptStatus", 
			    function (strStatus, statusMessage, msWalltime, strErrorMessageUntranslated) {
				this.statusManager.setScriptStatus (strStatus, statusMessage, msWalltime, strErrorMessageUntranslated);
			    }, "~S,~S,~N,~S");
	Clazz.defineMethod (c$, "getModelTitle", 
			    ($fz = function (modelIndex) {
				return this.modelSet == null ? null : this.modelSet.getModelTitle (modelIndex);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "getModelFileName", 
			      function (modelIndex) {
				  return this.modelSet == null ? null : this.modelSet.getModelFileName (modelIndex);
			      }, "~N");
	Clazz.defineMethod (c$, "dialogAsk", 
			    function (type, fileName) {
				return (this.$isKiosk || !this.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL) ? null : this.statusManager.dialogAsk (type, fileName));
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getScriptDelay", 
			    function () {
				return this.global.scriptDelay;
			    });
	Clazz.overrideMethod (c$, "showUrl", 
			      function (urlString) {
				  if (urlString == null) return;
				  if (urlString.indexOf (":") < 0) {
				      var base = this.fileManager.getAppletDocumentBase ();
				      if (base === "") base = this.fileManager.getFullPathName ();
				      if (base.indexOf ("/") >= 0) {
					  base = base.substring (0, base.lastIndexOf ("/") + 1);
				      } else if (base.indexOf ("\\") >= 0) {
					  base = base.substring (0, base.lastIndexOf ("\\") + 1);
				      }urlString = base + urlString;
				  }org.jmol.util.Logger.info ("showUrl:" + urlString);
				  this.statusManager.showUrl (urlString);
			      }, "~S");
	Clazz.defineMethod (c$, "setMeshCreator", 
			    function (meshCreator) {
				this.loadShape (23);
				this.setShapeProperty (23, "meshCreator", meshCreator);
			    }, "~O");
	Clazz.defineMethod (c$, "showConsole", 
			    function (showConsole) {
				if (!this.haveDisplay) return;
				try {
				    if (this.appConsole == null) this.getProperty ("DATA_API", "getAppConsole", Boolean.TRUE);
				    this.appConsole.setVisible (showConsole);
				} catch (e) {
				}
			    }, "~B");
	Clazz.defineMethod (c$, "clearConsole", 
			    function () {
				this.statusManager.clearConsole ();
			    });
	Clazz.defineMethod (c$, "getParameterEscaped", 
			    function (key) {
				return this.global.getParameterEscaped (key, 0);
			    }, "~S");
	Clazz.overrideMethod (c$, "getParameter", 
			      function (key) {
				  return this.global.getParameter (key);
			      }, "~S");
	Clazz.defineMethod (c$, "getOrSetNewVariable", 
			    function (key, doSet) {
				return this.global.getOrSetNewVariable (key, doSet);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "setUserVariable", 
			    function (name, value) {
				return this.global.setUserVariable (name, value);
			    }, "~S,org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "unsetProperty", 
			    function (key) {
				key = key.toLowerCase ();
				if (key.equals ("all") || key.equals ("variables")) this.fileManager.setPathForAllFiles ("");
				this.global.unsetUserVariable (key);
			    }, "~S");
	Clazz.defineMethod (c$, "getVariableList", 
			    function () {
				return this.global.getVariableList ();
			    });
	Clazz.overrideMethod (c$, "getBooleanProperty", 
			      function (key) {
				  key = key.toLowerCase ();
				  if (this.global.htBooleanParameterFlags.containsKey (key)) return this.global.htBooleanParameterFlags.get (key).booleanValue ();
				  if (key.endsWith ("p!")) {
				      if (this.actionManager == null) return false;
				      var s = this.actionManager.getPickingState ().toLowerCase ();
				      key = key.substring (0, key.length - 2) + ";";
				      return (s.indexOf (key) >= 0);
				  }if (key.equalsIgnoreCase ("__appletReady")) {
				      this.statusManager.setStatusAppletReady (this.fullName, true);
				      return true;
				  }if (key.equalsIgnoreCase ("__appletDestroyed")) {
				      this.statusManager.setStatusAppletReady (this.htmlName, false);
				      return true;
				  }if (key.equalsIgnoreCase ("executionPaused")) return this.$eval.isExecutionPaused ();
				  if (key.equalsIgnoreCase ("executionStepping")) return this.$eval.isExecutionStepping ();
				  if (key.equalsIgnoreCase ("haveBFactors")) return (this.modelSet.getBFactors () != null);
				  if (key.equalsIgnoreCase ("colorRasmol")) return this.colorManager.getDefaultColorRasmol ();
				  if (key.equalsIgnoreCase ("frank")) return this.getShowFrank ();
				  if (key.equalsIgnoreCase ("spinOn")) return this.getSpinOn ();
				  if (key.equalsIgnoreCase ("isNavigating")) return this.isNavigating ();
				  if (key.equalsIgnoreCase ("showSelections")) return this.modelSet.getSelectionHaloEnabled ();
				  if (this.global.htUserVariables.containsKey (key)) {
				      var t = this.global.getUserVariable (key);
				      if (t.tok == 1048589) return true;
				      if (t.tok == 1048588) return false;
				  }org.jmol.util.Logger.error ("viewer.getBooleanProperty(" + key + ") - unrecognized");
				  return false;
			      }, "~S");
	Clazz.overrideMethod (c$, "setStringProperty", 
			      function (key, value) {
				  if (value == null) return;
				  if (key.charAt (0) == '_') {
				      this.global.setParamS (key, value);
				      return;
				  }var tok = org.jmol.script.Token.getTokFromName (key);
				  switch (org.jmol.script.Token.getParamType (tok)) {
				  case 603979776:
				      this.setBooleanPropertyTok (key, tok, org.jmol.script.ScriptVariable.newVariable (4, value).asBoolean ());
				      break;
				  case 553648128:
				      this.setIntPropertyTok (key, tok, org.jmol.script.ScriptVariable.newVariable (4, value).asInt ());
				      break;
				  case 570425344:
				      this.setFloatPropertyTok (key, tok, org.jmol.util.Parser.parseFloatStr (value));
				      break;
				  default:
				      this.setStringPropertyTok (key, tok, value);
				  }
			      }, "~S,~S");
	Clazz.defineMethod (c$, "setStringPropertyTok", 
			    ($fz = function (key, tok, value) {
				switch (tok) {
				case 545259548:
				    this.global.defaultDropScript = value;
				    break;
				case 545259570:
				    value = this.fileManager.setPathForAllFiles (value);
				    break;
				case 545259558:
				    this.setUnits (value, false);
				    return;
				case 545259560:
				    this.global.forceField = value;
				    this.minimizer = null;
				    break;
				case 545259569:
				    this.global.nmrUrlFormat = value;
				    break;
				case 545259568:
				    this.setUnits (value, true);
				    return;
				case 545259566:
				    this.global.loadLigandFormat = value;
				    break;
				case 545259543:
				    this.global.defaultLabelPDB = value;
				    break;
				case 545259544:
				    this.global.defaultLabelXYZ = value;
				    break;
				case 545259549:
				    this.global.defaultLoadFilter = value;
				    break;
				case 545259567:
				    value = this.setLogFile (value);
				    if (value == null) return;
				    break;
				case 545259559:
				    break;
				case 545259524:
				    this.global.atomTypes = value;
				    break;
				case 545259538:
				    break;
				case 545259576:
				    this.global.pickLabel = value;
				    break;
				case 545259580:
				    if (value.length == 2 && value.startsWith ("R")) this.global.quaternionFrame = value.substring (0, 2);
				    else this.global.quaternionFrame = "" + (value.toLowerCase () + "p").charAt (0);
				    if (!org.jmol.util.Parser.isOneOf (this.global.quaternionFrame, "RC;RP;a;b;c;n;p;q;x;")) this.global.quaternionFrame = "p";
				    this.modelSet.setHaveStraightness (false);
				    break;
				case 545259555:
				    this.setDefaultVdw (value);
				    return;
				case 545259564:
				    new org.jmol.i18n.GT (value);
				    this.language = org.jmol.i18n.GT.getLanguage ();
				    this.modelkitPopup = null;
				    if (this.jmolpopup != null) {
					this.jmolpopup.dispose ();
					this.jmolpopup = null;
					this.getPopupMenu ();
				    }this.statusManager.setCallbackFunction ("language", this.language);
				    value = org.jmol.i18n.GT.getLanguage ();
				    break;
				case 545259565:
				    this.global.loadFormat = value;
				    break;
				case 545259534:
				    this.setObjectColor ("background", value);
				    return;
				case 545259528:
				    this.setObjectColor ("axis1", value);
				    return;
				case 545259530:
				    this.setObjectColor ("axis2", value);
				    return;
				case 545259532:
				    this.setObjectColor ("axis3", value);
				    return;
				case 545259536:
				    this.setObjectColor ("boundbox", value);
				    return;
				case 545259586:
				    this.setObjectColor ("unitcell", value);
				    return;
				case 545259578:
				    this.setPropertyColorScheme (value, false, false);
				    break;
				case 545259562:
				    this.setShapeProperty (33, "atomLabel", value);
				    break;
				case 545259547:
				    this.global.defaultDistanceLabel = value;
				    break;
				case 545259542:
				    this.global.defaultAngleLabel = value;
				    break;
				case 545259554:
				    this.global.defaultTorsionLabel = value;
				    break;
				case 545259550:
				    this.global.defaultLoadScript = value;
				    break;
				case 545259522:
				    this.fileManager.setAppletProxy (value);
				    break;
				case 545259546:
				    if (value == null) value = "";
				    value = value.$replace ('\\', '/');
				    this.global.defaultDirectory = value;
				    break;
				case 545259561:
				    this.global.helpPath = value;
				    break;
				case 545259552:
				    if (!value.equalsIgnoreCase ("RasMol")) value = "Jmol";
				    this.setDefaultsType (value);
				    break;
				case 545259545:
				    this.setDefaultColors (value.equalsIgnoreCase ("rasmol"));
				    return;
				case 545259572:
				    this.setPickingMode (value, 0);
				    return;
				case 545259574:
				    this.setPickingStyle (value, 0);
				    return;
				case 545259540:
				    break;
				default:
				    if (key.toLowerCase ().endsWith ("callback")) {
					this.statusManager.setCallbackFunction (key, (value.length == 0 || value.equalsIgnoreCase ("none") ? null : value));
					break;
				    }if (!this.global.htNonbooleanParameterValues.containsKey (key.toLowerCase ())) {
					this.global.setUserVariable (key, org.jmol.script.ScriptVariable.newVariable (4, value));
					return;
				    }break;
				}
				this.global.setParamS (key, value);
			    }, $fz.isPrivate = true, $fz), "~S,~N,~S");
	Clazz.overrideMethod (c$, "setFloatProperty", 
			      function (key, value) {
				  if (Float.isNaN (value)) return;
				  if (key.charAt (0) == '_') {
				      this.global.setParamF (key, value);
				      return;
				  }var tok = org.jmol.script.Token.getTokFromName (key);
				  switch (org.jmol.script.Token.getParamType (tok)) {
				  case 545259520:
				      this.setStringPropertyTok (key, tok, "" + value);
				      break;
				  case 603979776:
				      this.setBooleanPropertyTok (key, tok, value != 0);
				      break;
				  case 553648128:
				      this.setIntPropertyTok (key, tok, Clazz.floatToInt (value));
				      break;
				  default:
				      this.setFloatPropertyTok (key, tok, value);
				  }
			      }, "~S,~N");
	Clazz.defineMethod (c$, "setFloatPropertyTok", 
			    ($fz = function (key, tok, value) {
				switch (tok) {
				case 570425368:
				    this.global.multipleBondRadiusFactor = value;
				    break;
				case 570425369:
				    this.global.multipleBondSpacing = value;
				    break;
				case 570425393:
				    this.transformManager.setSlabRange (value);
				    break;
				case 570425365:
				    this.global.minimizationCriterion = value;
				    break;
				case 570425359:
				    if (this.haveDisplay) this.actionManager.setGestureSwipeFactor (value);
				    break;
				case 570425366:
				    if (this.haveDisplay) this.actionManager.setMouseDragFactor (value);
				    break;
				case 570425367:
				    if (this.haveDisplay) this.actionManager.setMouseWheelFactor (value);
				    break;
				case 570425408:
				    this.global.strutLengthMaximum = value;
				    break;
				case 570425406:
				    this.global.strutDefaultRadius = value;
				    break;
				case 570425376:
				    this.setSpin ("X", Clazz.floatToInt (value));
				    break;
				case 570425378:
				    this.setSpin ("Y", Clazz.floatToInt (value));
				    break;
				case 570425380:
				    this.setSpin ("Z", Clazz.floatToInt (value));
				    break;
				case 570425370:
				    if (Float.isNaN (value)) return;
				    this.setSpin ("FPS", Clazz.floatToInt (value));
				    break;
				case 570425363:
				    this.global.loadAtomDataTolerance = value;
				    break;
				case 570425360:
				    this.global.hbondsAngleMinimum = value;
				    break;
				case 570425361:
				    this.global.hbondsDistanceMaximum = value;
				    break;
				case 570425382:
				    this.global.pointGroupDistanceTolerance = value;
				    break;
				case 570425384:
				    this.global.pointGroupLinearTolerance = value;
				    break;
				case 570425358:
				    this.global.ellipsoidAxisDiameter = value;
				    break;
				case 570425398:
				    this.setSpin ("x", Clazz.floatToInt (value));
				    break;
				case 570425400:
				    this.setSpin ("y", Clazz.floatToInt (value));
				    break;
				case 570425402:
				    this.setSpin ("z", Clazz.floatToInt (value));
				    break;
				case 570425396:
				    this.setSpin ("fps", Clazz.floatToInt (value));
				    break;
				case 570425352:
				    this.global.defaultDrawArrowScale = value;
				    break;
				case 570425354:
				    this.global.defaultTranslucent = value;
				    break;
				case 570425346:
				    this.setAxesScale (value);
				    break;
				case 570425416:
				    this.transformManager.setVisualRange (value);
				    this.refresh (1, "set visualRange");
				    break;
				case 570425371:
				    this.setNavigationDepthPercent (0, value);
				    break;
				case 570425374:
				    this.global.navigationSpeed = value;
				    break;
				case 570425372:
				    this.transformManager.setNavigationSlabOffsetPercent (value);
				    break;
				case 570425350:
				    this.transformManager.setCameraDepthPercent (value);
				    this.refresh (1, "set cameraDepth");
				    break;
				case 570425388:
				    this.setRotationRadius (value, true);
				    return;
				case 570425362:
				    this.global.hoverDelayMs = Clazz.floatToInt (value * 1000);
				    break;
				case 570425392:
				    this.global.sheetSmoothing = value;
				    break;
				case 570425356:
				    value = org.jmol.viewer.Viewer.checkFloatRange (value, -10, 10);
				    this.global.dipoleScale = value;
				    break;
				case 570425404:
				    this.transformManager.setStereoDegrees (value);
				    break;
				case 1649410065:
				    this.setVectorScale (value);
				    return;
				case 570425412:
				    this.setVibrationPeriod (value);
				    return;
				case 570425414:
				    this.setVibrationScale (value);
				    return;
				case 570425348:
				    this.setBondTolerance (value);
				    return;
				case 570425364:
				    this.setMinBondDistance (value);
				    return;
				case 570425390:
				    this.transformManager.setScaleAngstromsPerInch (value);
				    break;
				case 570425394:
				    value = org.jmol.viewer.Viewer.checkFloatRange (value, 0, 10);
				    this.global.solventProbeRadius = value;
				    break;
				default:
				    if (!this.global.htNonbooleanParameterValues.containsKey (key.toLowerCase ())) {
					this.global.setUserVariable (key, org.jmol.script.ScriptVariable.newVariable (3,  new Float (value)));
					return;
				    }}
				this.global.setParamF (key, value);
			    }, $fz.isPrivate = true, $fz), "~S,~N,~N");
	Clazz.overrideMethod (c$, "setIntProperty", 
			      function (key, value) {
				  if (value == -2147483648) return;
				  if (key.charAt (0) == '_') {
				      this.global.setParamI (key, value);
				      return;
				  }var tok = org.jmol.script.Token.getTokFromName (key);
				  switch (org.jmol.script.Token.getParamType (tok)) {
				  case 545259520:
				      this.setStringPropertyTok (key, tok, "" + value);
				      break;
				  case 603979776:
				      this.setBooleanPropertyTok (key, tok, value != 0);
				      break;
				  case 570425344:
				      this.setFloatPropertyTok (key, tok, value);
				      break;
				  default:
				      this.setIntPropertyTok (key, tok, value);
				  }
			      }, "~S,~N");
	Clazz.defineMethod (c$, "setIntPropertyTok", 
			    ($fz = function (key, tok, value) {
				switch (tok) {
				case 553648151:
				    this.global.meshScale = value;
				    break;
				case 553648153:
				    this.global.minPixelSelRadius = value;
				    break;
				case 553648149:
				    this.global.isosurfacePropertySmoothingPower = value;
				    break;
				case 553648165:
				    this.global.repaintWaitMs = value;
				    break;
				case 553648170:
				    this.global.smallMoleculeMaxAtoms = value;
				    break;
				case 553648152:
				    this.global.minimizationSteps = value;
				    break;
				case 553648184:
				    this.global.strutSpacing = value;
				    break;
				case 553648156:
				    value = org.jmol.viewer.Viewer.checkIntRange (value, 0, 1000);
				    org.jmol.util.GData.setPhongExponent (value);
				    break;
				case 553648146:
				    this.global.helixStep = value;
				    this.modelSet.setHaveStraightness (false);
				    break;
				case 553648144:
				    this.global.dotScale = value;
				    break;
				case 553648143:
				    this.global.dotDensity = value;
				    break;
				case 553648138:
				    this.global.delayMaximumMs = value;
				    break;
				case 553648150:
				    org.jmol.util.Logger.setLogLevel (value);
				    org.jmol.util.Logger.info ("logging level set to " + value);
				    this.global.setParamI ("logLevel", value);
				    this.$eval.setDebugging ();
				    return;
				case 553648134:
				    switch (org.jmol.constant.EnumAxesMode.getAxesMode (value)) {
				    case org.jmol.constant.EnumAxesMode.MOLECULAR:
					this.setAxesModeMolecular (true);
					return;
				    case org.jmol.constant.EnumAxesMode.BOUNDBOX:
					this.setAxesModeMolecular (false);
					return;
				    case org.jmol.constant.EnumAxesMode.UNITCELL:
					this.setAxesModeUnitCell (true);
					return;
				    }
				    return;
				case 553648178:
				    this.setStrandCount (0, value);
				    return;
				case 553648182:
				    this.setStrandCount (12, value);
				    return;
				case 553648180:
				    this.setStrandCount (13, value);
				    return;
				case 553648155:
				    this.setPerspectiveModel (value);
				    break;
				case 536870922:
				    this.global.scriptDelay = value;
				    break;
				case 553648176:
				    if (value < 0) value = org.jmol.viewer.Viewer.checkIntRange (value, -10, -1);
				    else value = org.jmol.viewer.Viewer.checkIntRange (value, 0, 100);
				    org.jmol.util.GData.setSpecularPower (value);
				    break;
				case 553648172:
				    value = org.jmol.viewer.Viewer.checkIntRange (-value, -10, -1);
				    org.jmol.util.GData.setSpecularPower (value);
				    break;
				case 553648136:
				    this.setMarBond (value);
				    return;
				case 536870924:
				    this.setBooleanPropertyTok (key, tok, value == 1);
				    return;
				case 553648174:
				    value = org.jmol.viewer.Viewer.checkIntRange (value, 0, 100);
				    org.jmol.util.GData.setSpecularPercent (value);
				    break;
				case 553648142:
				    value = org.jmol.viewer.Viewer.checkIntRange (value, 0, 100);
				    org.jmol.util.GData.setDiffusePercent (value);
				    break;
				case 553648130:
				    value = org.jmol.viewer.Viewer.checkIntRange (value, 0, 100);
				    org.jmol.util.GData.setAmbientPercent (value);
				    break;
				case 553648186:
				    this.transformManager.zDepthToPercent (value);
				    break;
				case 553648188:
				    this.transformManager.zSlabToPercent (value);
				    break;
				case 554176526:
				    this.transformManager.depthToPercent (value);
				    break;
				case 554176565:
				    this.transformManager.slabToPercent (value);
				    break;
				case 553648190:
				    this.global.zShadePower = Math.max (value, 1);
				    break;
				case 553648166:
				    this.global.ribbonAspectRatio = value;
				    break;
				case 553648158:
				    this.global.pickingSpinRate = (value < 1 ? 1 : value);
				    break;
				case 553648132:
				    this.setAnimationFps (value);
				    break;
				case 553648154:
				    this.setPercentVdwAtom (value);
				    break;
				case 553648147:
				    this.global.hermiteLevel = value;
				    break;
				case 553648145:
				case 553648148:
				case 553648160:
				case 553648159:
				case 553648162:
				case 553648164:
				    break;
				default:
				    if (!this.global.htNonbooleanParameterValues.containsKey (key)) {
					this.global.setUserVariable (key,  new org.jmol.script.ScriptVariableInt (value));
					return;
				    }}
				this.global.setParamI (key, value);
			    }, $fz.isPrivate = true, $fz), "~S,~N,~N");
	c$.checkIntRange = Clazz.defineMethod (c$, "checkIntRange", 
					       ($fz = function (value, min, max) {
						   return (value < min ? min : value > max ? max : value);
					       }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	c$.checkFloatRange = Clazz.defineMethod (c$, "checkFloatRange", 
						 ($fz = function (value, min, max) {
						     return (value < min ? min : value > max ? max : value);
						 }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.overrideMethod (c$, "setBooleanProperty", 
			      function (key, value) {
				  if (key.charAt (0) == '_') {
				      this.global.setParamB (key, value);
				      return;
				  }var tok = org.jmol.script.Token.getTokFromName (key);
				  switch (org.jmol.script.Token.getParamType (tok)) {
				  case 545259520:
				      this.setStringPropertyTok (key, tok, "" + value);
				      break;
				  case 553648128:
				      this.setIntPropertyTok (key, tok, value ? 1 : 0);
				      break;
				  case 570425344:
				      this.setFloatPropertyTok (key, tok, value ? 1 : 0);
				      break;
				  default:
				      this.setBooleanPropertyTok (key, tok, value);
				  }
			      }, "~S,~B");
	Clazz.defineMethod (c$, "setBooleanPropertyTok", 
			    ($fz = function (key, tok, value) {
				var doRepaint = true;
				switch (tok) {
				case 603979820:
				    this.global.cartoonFancy = value;
				    break;
				case 603979934:
				    this.global.showTiming = value;
				    break;
				case 603979973:
				    this.global.vectorSymmetry = value;
				    break;
				case 603979870:
				    this.global.isosurfaceKey = value;
				    break;
				case 603979888:
				    this.global.partialDots = value;
				    break;
				case 603979874:
				    this.global.legacyAutoBonding = value;
				    break;
				case 603979825:
				    this.global.defaultStructureDSSP = value;
				    break;
				case 603979834:
				    this.global.dsspCalcHydrogen = value;
				    break;
				case 603979782:
				    this.global.allowModelkit = value;
				    if (!value) this.setModelKitMode (false);
				    break;
				case 603979882:
				    this.setModelKitMode (value);
				    break;
				case 603979884:
				    this.global.multiProcessor = value && (org.jmol.viewer.Viewer.nProcessors > 1);
				    break;
				case 603979883:
				    this.global.monitorEnergy = value;
				    break;
				case 603979853:
				    this.global.hbondsRasmol = value;
				    break;
				case 603979880:
				    this.global.minimizationRefresh = value;
				    break;
				case 603979881:
				    this.global.minimizationSilent = value;
				    break;
				case 603979969:
				    this.global.useArcBall = value;
				    break;
				case 603979869:
				    if (value) {
					this.$isKiosk = true;
					this.global.disablePopupMenu = true;
					if (this.display != null) this.apiPlatform.setTransparentCursor (this.display);
				    }break;
				case 603979974:
				    this.global.waitForMoveTo = value;
				    break;
				case 603979875:
				    this.global.logCommands = true;
				    break;
				case 603979876:
				    this.global.logGestures = true;
				    break;
				case 603979784:
				    this.global.allowMultiTouch = value;
				    break;
				case 603979893:
				    this.global.preserveState = value;
				    this.modelSet.setPreserveState (value);
				    this.undoClear ();
				    break;
				case 603979955:
				    this.global.strutsMultiple = value;
				    break;
				case 603979842:
				    break;
				case 603979938:
				    this.global.slabByAtom = value;
				    break;
				case 603979940:
				    this.global.slabByMolecule = value;
				    break;
				case 603979902:
				    this.global.saveProteinStructureState = value;
				    break;
				case 603979780:
				    this.global.allowGestures = value;
				    break;
				case 603979868:
				    this.global.imageState = value;
				    break;
				case 603979970:
				    this.global.useMinimizationThread = value;
				    break;
				case 603979781:
				    if (this.global.disablePopupMenu) value = false;
				    this.global.allowKeyStrokes = value;
				    break;
				case 603979831:
				    this.global.dragSelected = value;
				    this.showSelected = false;
				    break;
				case 603979924:
				    this.global.showKeyStrokes = value;
				    break;
				case 603979844:
				    this.global.fontCaching = value;
				    break;
				case 603979796:
				    this.global.atomPicking = value;
				    break;
				case 603979814:
				    this.highlight (null);
				    this.global.bondPicking = value;
				    break;
				case 603979906:
				    this.global.selectAllModels = value;
				    break;
				case 603979879:
				    this.global.messageStyleChime = value;
				    break;
				case 603979891:
				    this.global.pdbSequential = value;
				    break;
				case 603979889:
				    this.global.pdbAddHydrogens = value;
				    break;
				case 603979890:
				    this.global.pdbGetHeader = value;
				    break;
				case 603979837:
				    this.global.ellipsoidAxes = value;
				    break;
				case 603979836:
				    this.global.ellipsoidArcs = value;
				    break;
				case 603979838:
				    this.global.ellipsoidBall = value;
				    break;
				case 603979839:
				    this.global.ellipsoidDots = value;
				    break;
				case 603979840:
				    this.global.ellipsoidFill = value;
				    break;
				case 603979845:
				    this.global.fontScaling = value;
				    break;
				case 603979956:
				    this.setSyncTarget (0, value);
				    break;
				case 603979958:
				    this.setSyncTarget (1, value);
				    break;
				case 603979976:
				    this.global.wireframeRotation = value;
				    break;
				case 603979871:
				    this.global.isosurfacePropertySmoothing = value;
				    break;
				case 603979833:
				    this.global.drawPicking = value;
				    break;
				case 603979786:
				    this.setAntialias (0, value);
				    break;
				case 603979790:
				    this.setAntialias (1, value);
				    break;
				case 603979788:
				    this.setAntialias (2, value);
				    break;
				case 603979944:
				    this.global.smartAromatic = value;
				    break;
				case 603979794:
				    this.setApplySymmetryToBonds (value);
				    break;
				case 603979792:
				    this.setAppendNew (value);
				    break;
				case 603979800:
				    this.global.autoFps = value;
				    break;
				case 603979972:
				    org.jmol.util.TextFormat.setUseNumberLocalization (this.global.useNumberLocalization = value);
				    break;
				case 1611272202:
				    key = "showFrank";
				    this.setFrankOn (value);
				    break;
				case 603979918:
				    this.setFrankOn (value);
				    break;
				case 1613758488:
				    key = "solventProbe";
				    this.global.solventOn = value;
				    break;
				case 603979948:
				    this.global.solventOn = value;
				    break;
				case 603979835:
				    this.setDynamicMeasurements (value);
				    break;
				case 603979785:
				    this.global.allowRotateSelected = value;
				    break;
				case 603979783:
				    this.global.allowMoveAtoms = value;
				    this.global.allowRotateSelected = value;
				    this.global.dragSelected = value;
				    this.showSelected = false;
				    break;
				case 536870922:
				    this.setIntPropertyTok ("showScript", tok, value ? 1 : 0);
				    return;
				case 603979778:
				    this.global.allowEmbeddedScripts = value;
				    break;
				case 603979887:
				    this.global.navigationPeriodic = value;
				    break;
				case 603979984:
				    this.transformManager.setZShadeEnabled (value);
				    return;
				case 603979832:
				    if (this.haveDisplay) this.global.drawHover = value;
				    break;
				case 603979886:
				    this.setNavigationMode (value);
				    break;
				case 603979885:
				    this.global.navigateSurface = value;
				    break;
				case 603979860:
				    this.global.hideNavigationPoint = value;
				    break;
				case 603979930:
				    this.global.showNavigationPointAlways = value;
				    break;
				case 603979896:
				    this.setRefreshing (value);
				    break;
				case 603979872:
				    this.global.justifyMeasurements = value;
				    break;
				case 603979952:
				    this.global.ssbondsBackbone = value;
				    break;
				case 603979852:
				    this.global.hbondsBackbone = value;
				    break;
				case 603979854:
				    this.global.hbondsSolid = value;
				    break;
				case 536870924:
				    org.jmol.util.GData.setSpecular (value);
				    break;
				case 603979942:
				    this.transformManager.setSlabEnabled (value);
				    return;
				case 603979980:
				    this.transformManager.setZoomEnabled (value);
				    return;
				case 603979864:
				    this.global.highResolutionFlag = value;
				    break;
				case 603979967:
				    this.global.traceAlpha = value;
				    break;
				case 603979982:
				    this.global.zoomLarge = value;
				    this.transformManager.scaleFitToScreen (false, value, false, true);
				    break;
				case 603979873:
				    org.jmol.i18n.GT.setDoTranslate (value);
				    break;
				case 603979862:
				    this.selectionManager.setHideNotSelected (value);
				    break;
				case 603979904:
				    this.setScriptQueue (value);
				    break;
				case 603979830:
				    this.global.dotSurface = value;
				    break;
				case 603979829:
				    this.global.dotsSelectedOnly = value;
				    break;
				case 1611141171:
				    this.setSelectionHalos (value);
				    break;
				case 603979910:
				    this.global.rasmolHydrogenSetting = value;
				    break;
				case 603979908:
				    this.global.rasmolHeteroSetting = value;
				    break;
				case 603979928:
				    this.global.showMultipleBonds = value;
				    break;
				case 603979920:
				    this.global.showHiddenSelectionHalos = value;
				    break;
				case 603979975:
				    this.transformManager.setWindowCentered (value);
				    break;
				case 603979828:
				    this.global.displayCellParameters = value;
				    break;
				case 603979960:
				    this.global.testFlag1 = value;
				    break;
				case 603979962:
				    this.global.testFlag2 = value;
				    break;
				case 603979964:
				    this.global.testFlag3 = value;
				    break;
				case 603979966:
				    this.jmolTest ();
				    this.global.testFlag4 = value;
				    break;
				case 603979898:
				    this.global.ribbonBorder = value;
				    break;
				case 603979818:
				    this.global.cartoonBaseEdges = value;
				    break;
				case 603979819:
				    this.global.cartoonRockets = value;
				    break;
				case 603979900:
				    this.global.rocketBarrels = value;
				    break;
				case 603979850:
				    this.gdata.setGreyscaleMode (this.global.greyscaleRendering = value);
				    break;
				case 603979878:
				    this.global.measurementLabels = value;
				    break;
				case 603979810:
				    this.setAxesModeMolecular (!value);
				    return;
				case 603979804:
				    this.setAxesModeMolecular (value);
				    return;
				case 603979808:
				    this.setAxesModeUnitCell (value);
				    return;
				case 603979806:
				    this.setAxesOrientationRasmol (value);
				    return;
				case 603979822:
				    this.setStringPropertyTok ("defaultcolorscheme", 545259545, value ? "rasmol" : "jmol");
				    return;
				case 603979824:
				    this.setDebugScript (value);
				    return;
				case 603979892:
				    this.setPerspectiveDepth (value);
				    return;
				case 603979798:
				    this.setAutoBond (value);
				    return;
				case 603979914:
				    this.setShowAxes (value);
				    return;
				case 603979916:
				    this.setShowBbcage (value);
				    return;
				case 603979922:
				    this.setShowHydrogens (value);
				    return;
				case 603979926:
				    this.setShowMeasurements (value);
				    return;
				case 603979936:
				    this.setShowUnitCell (value);
				    return;
				case 603979812:
				    doRepaint = false;
				    this.global.bondModeOr = value;
				    break;
				case 603979978:
				    doRepaint = false;
				    this.global.zeroBasedXyzRasmol = value;
				    this.reset (true);
				    break;
				case 603979894:
				    doRepaint = false;
				    this.global.rangeSelected = value;
				    break;
				case 603979877:
				    doRepaint = false;
				    this.global.measureAllModels = value;
				    break;
				case 603979954:
				    doRepaint = false;
				    this.statusManager.setAllowStatusReporting (value);
				    break;
				case 603979821:
				    doRepaint = false;
				    this.global.chainCaseSensitive = value;
				    break;
				case 603979858:
				    doRepaint = false;
				    this.global.hideNameInPopup = value;
				    break;
				case 603979826:
				    doRepaint = false;
				    this.global.disablePopupMenu = value;
				    break;
				case 603979846:
				    doRepaint = false;
				    this.global.forceAutoBond = value;
				    break;
				case 603979848:
				    doRepaint = false;
				    this.global.fractionalRelative = value;
				    break;
				default:
				    if (!this.global.htBooleanParameterFlags.containsKey (key.toLowerCase ())) {
					this.global.setUserVariable (key, org.jmol.script.ScriptVariable.getBoolean (value));
					return;
				    }}
				this.global.setParamB (key, value);
				if (doRepaint) this.setTainted (true);
			    }, $fz.isPrivate = true, $fz), "~S,~N,~B");
	Clazz.defineMethod (c$, "setModelKitMode", 
			    ($fz = function (value) {
				if (this.actionManager == null) return;
				if (value || this.global.modelKitMode) {
				    this.setPickingMode (null, value ? 33 : 1);
				    this.setPickingMode (null, value ? 32 : 1);
				}var isChange = (this.global.modelKitMode != value);
				this.global.modelKitMode = value;
				this.highlight (null);
				if (value) {
				    this.setNavigationMode (false);
				    this.selectAll ();
				    this.setAtomPickingOption ("C");
				    this.setBondPickingOption ("p");
				    if (!this.$isApplet) this.popupMenu (0, 0, 'm');
				    if (isChange) this.statusManager.setCallbackFunction ("modelkit", "ON");
				    this.global.modelKitMode = true;
				    if (this.getAtomCount () == 0) this.zap (false, true, true);
				} else {
				    this.actionManager.setPickingMode (-1);
				    this.setStringProperty ("pickingStyle", "toggle");
				    this.setBooleanProperty ("bondPicking", false);
				    if (isChange) this.statusManager.setCallbackFunction ("modelkit", "OFF");
				}}, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getModelkitMode", 
			    function () {
				return this.global.modelKitMode;
			    });
	Clazz.defineMethod (c$, "getLanguage", 
			    function () {
				return this.language;
			    });
	Clazz.defineMethod (c$, "setSmilesString", 
			    function (s) {
				if (s == null) this.global.removeParam ("_smilesString");
				else this.global.setParamS ("_smilesString", s);
			    }, "~S");
	Clazz.defineMethod (c$, "removeUserVariable", 
			    function (key) {
				this.global.removeUserVariable (key);
				if (key.endsWith ("callback")) this.statusManager.setCallbackFunction (key, null);
			    }, "~S");
	Clazz.defineMethod (c$, "isJmolVariable", 
			    function (key) {
				return this.global.isJmolVariable (key);
			    }, "~S");
	Clazz.defineMethod (c$, "jmolTest", 
			    ($fz = function () {
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "isPdbSequential", 
			    function () {
				return this.global.pdbSequential;
			    });
	Clazz.defineMethod (c$, "getSelectAllModels", 
			    function () {
				return this.global.selectAllModels;
			    });
	Clazz.defineMethod (c$, "getMessageStyleChime", 
			    function () {
				return this.global.messageStyleChime;
			    });
	Clazz.defineMethod (c$, "getFontCaching", 
			    function () {
				return this.global.fontCaching;
			    });
	Clazz.defineMethod (c$, "getFontScaling", 
			    function () {
				return this.global.fontScaling;
			    });
	Clazz.defineMethod (c$, "showParameter", 
			    function (key, ifNotSet, nMax) {
				var sv = "" + this.global.getParameterEscaped (key, nMax);
				if (ifNotSet || sv.indexOf ("<not defined>") < 0) this.showString (key + " = " + sv, false);
			    }, "~S,~B,~N");
	Clazz.defineMethod (c$, "showString", 
			    function (str, isPrint) {
				if (this.isScriptQueued && (!this.isSilent || isPrint)) org.jmol.util.Logger.warn (str);
				this.scriptEcho (str);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "getAllSettings", 
			    function (prefix) {
				return this.global.getAllSettings (prefix);
			    }, "~S");
	Clazz.defineMethod (c$, "getBindingInfo", 
			    function (qualifiers) {
				return (this.haveDisplay ? this.actionManager.getBindingInfo (qualifiers) : "");
			    }, "~S");
	Clazz.defineMethod (c$, "getDelayMaximum", 
			    function () {
				return (this.haveDisplay ? this.global.delayMaximumMs : 1);
			    });
	Clazz.defineMethod (c$, "getDotSurfaceFlag", 
			    function () {
				return this.global.dotSurface;
			    });
	Clazz.defineMethod (c$, "getDotsSelectedOnlyFlag", 
			    function () {
				return this.global.dotsSelectedOnly;
			    });
	Clazz.defineMethod (c$, "getDotDensity", 
			    function () {
				return this.global.dotDensity;
			    });
	Clazz.defineMethod (c$, "getDotScale", 
			    function () {
				return this.global.dotScale;
			    });
	Clazz.defineMethod (c$, "getMeshScale", 
			    function () {
				return this.global.meshScale;
			    });
	Clazz.defineMethod (c$, "isRangeSelected", 
			    function () {
				return this.global.rangeSelected;
			    });
	Clazz.defineMethod (c$, "getIsosurfaceKey", 
			    function () {
				return this.global.isosurfaceKey;
			    });
	Clazz.defineMethod (c$, "getIsosurfacePropertySmoothing", 
			    function (asPower) {
				return (asPower ? this.global.isosurfacePropertySmoothingPower : this.global.isosurfacePropertySmoothing ? 1 : 0);
			    }, "~B");
	Clazz.defineMethod (c$, "getWireframeRotation", 
			    function () {
				return this.global.wireframeRotation;
			    });
	Clazz.defineMethod (c$, "isWindowCentered", 
			    function () {
				return this.transformManager.isWindowCentered ();
			    });
	Clazz.defineMethod (c$, "setNavigationDepthPercent", 
			    function (timeSec, percent) {
				this.transformManager.setNavigationDepthPercent (timeSec, percent);
				this.refresh (1, "set navigationDepth");
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getNavigationSpeed", 
			    function () {
				return this.global.navigationSpeed;
			    });
	Clazz.defineMethod (c$, "getShowNavigationPoint", 
			    function () {
				if (!this.global.navigationMode || !this.transformManager.canNavigate ()) return false;
				return (this.isNavigating () && !this.global.hideNavigationPoint || this.global.showNavigationPointAlways || this.getInMotion ());
			    });
	Clazz.defineMethod (c$, "getSolventProbeRadius", 
			    function () {
				return this.global.solventProbeRadius;
			    });
	Clazz.defineMethod (c$, "getCurrentSolventProbeRadius", 
			    function () {
				return this.global.solventOn ? this.global.solventProbeRadius : 0;
			    });
	Clazz.defineMethod (c$, "getSolventOn", 
			    function () {
				return this.global.solventOn;
			    });
	Clazz.defineMethod (c$, "getShowTiming", 
			    function () {
				return this.global.showTiming;
			    });
	Clazz.defineMethod (c$, "getTestFlag", 
			    function (i) {
				switch (i) {
				case 1:
				    return this.global.testFlag1;
				case 2:
				    return this.global.testFlag2;
				case 3:
				    return this.global.testFlag3;
				case 4:
				    return this.global.testFlag4;
				}
				return false;
			    }, "~N");
	Clazz.overrideMethod (c$, "setPerspectiveDepth", 
			      function (perspectiveDepth) {
				  this.global.setParamB ("perspectiveDepth", perspectiveDepth);
				  this.transformManager.setPerspectiveDepth (perspectiveDepth);
			      }, "~B");
	Clazz.overrideMethod (c$, "setAxesOrientationRasmol", 
			      function (TF) {
				  this.global.setParamB ("axesOrientationRasmol", TF);
				  this.global.axesOrientationRasmol = TF;
				  this.reset (true);
			      }, "~B");
	Clazz.overrideMethod (c$, "getAxesOrientationRasmol", 
			      function () {
				  return this.global.axesOrientationRasmol;
			      });
	Clazz.defineMethod (c$, "setAxesScale", 
			    function (scale) {
				scale = org.jmol.viewer.Viewer.checkFloatRange (scale, -100, 100);
				this.global.axesScale = scale;
				this.axesAreTainted = true;
			    }, "~N");
	Clazz.defineMethod (c$, "getAxisPoints", 
			    function () {
				return (this.getObjectMad (1) == 0 || this.getAxesMode () !== org.jmol.constant.EnumAxesMode.UNITCELL || (this.getShapeProperty (30, "axesTypeXY")).booleanValue () || this.getShapeProperty (30, "origin") != null ? null : this.getShapeProperty (30, "axisPoints"));
			    });
	Clazz.defineMethod (c$, "getAxesScale", 
			    function () {
				return this.global.axesScale;
			    });
	Clazz.defineMethod (c$, "resetError", 
			    function () {
				this.global.removeParam ("_errormessage");
			    });
	Clazz.defineMethod (c$, "setAxesModeMolecular", 
			    ($fz = function (TF) {
				this.global.axesMode = (TF ? org.jmol.constant.EnumAxesMode.MOLECULAR : org.jmol.constant.EnumAxesMode.BOUNDBOX);
				this.axesAreTainted = true;
				this.global.removeParam ("axesunitcell");
				this.global.removeParam (TF ? "axeswindow" : "axesmolecular");
				this.global.setParamI ("axesMode", this.global.axesMode.getCode ());
				this.global.setParamB (TF ? "axesMolecular" : "axesWindow", true);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "setAxesModeUnitCell", 
			    function (TF) {
				this.global.axesMode = (TF ? org.jmol.constant.EnumAxesMode.UNITCELL : org.jmol.constant.EnumAxesMode.BOUNDBOX);
				this.axesAreTainted = true;
				this.global.removeParam ("axesmolecular");
				this.global.removeParam (TF ? "axeswindow" : "axesunitcell");
				this.global.setParamB (TF ? "axesUnitcell" : "axesWindow", true);
				this.global.setParamI ("axesMode", this.global.axesMode.getCode ());
			    }, "~B");
	Clazz.defineMethod (c$, "getAxesMode", 
			    function () {
				return this.global.axesMode;
			    });
	Clazz.defineMethod (c$, "getDisplayCellParameters", 
			    function () {
				return this.global.displayCellParameters;
			    });
	Clazz.overrideMethod (c$, "getPerspectiveDepth", 
			      function () {
				  return this.transformManager.getPerspectiveDepth ();
			      });
	Clazz.overrideMethod (c$, "setSelectionHalos", 
			      function (TF) {
				  if (this.modelSet == null || TF == this.modelSet.getSelectionHaloEnabled ()) return;
				  this.global.setParamB ("selectionHalos", TF);
				  this.loadShape (8);
				  this.modelSet.setSelectionHaloEnabled (TF);
			      }, "~B");
	Clazz.defineMethod (c$, "getSelectionHaloEnabled", 
			    function (isRenderer) {
				var flag = this.modelSet.getSelectionHaloEnabled () || isRenderer && this.showSelected;
				if (isRenderer) this.showSelected = false;
				return flag;
			    }, "~B");
	Clazz.defineMethod (c$, "getBondSelectionModeOr", 
			    function () {
				return this.global.bondModeOr;
			    });
	Clazz.defineMethod (c$, "getChainCaseSensitive", 
			    function () {
				return this.global.chainCaseSensitive;
			    });
	Clazz.defineMethod (c$, "getRibbonBorder", 
			    function () {
				return this.global.ribbonBorder;
			    });
	Clazz.defineMethod (c$, "getCartoonFlag", 
			    function (tok) {
				switch (tok) {
				case 603979819:
				    return this.global.cartoonRockets;
				case 603979820:
				    return this.global.cartoonFancy;
				case 603979900:
				    return this.global.rocketBarrels;
				case 603979818:
				    return this.global.cartoonBaseEdges;
				}
				return false;
			    }, "~N");
	Clazz.defineMethod (c$, "setStrandCount", 
			    ($fz = function (type, value) {
				value = org.jmol.viewer.Viewer.checkIntRange (value, 0, 20);
				switch (type) {
				case 12:
				    this.global.strandCountForStrands = value;
				    break;
				case 13:
				    this.global.strandCountForMeshRibbon = value;
				    break;
				default:
				    this.global.strandCountForStrands = value;
				    this.global.strandCountForMeshRibbon = value;
				    break;
				}
				this.global.setParamI ("strandCount", value);
				this.global.setParamI ("strandCountForStrands", this.global.strandCountForStrands);
				this.global.setParamI ("strandCountForMeshRibbon", this.global.strandCountForMeshRibbon);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "getStrandCount", 
			    function (type) {
				return (type == 12 ? this.global.strandCountForStrands : this.global.strandCountForMeshRibbon);
			    }, "~N");
	Clazz.defineMethod (c$, "getHideNameInPopup", 
			    function () {
				return this.global.hideNameInPopup;
			    });
	Clazz.defineMethod (c$, "getNavigationPeriodic", 
			    function () {
				return this.global.navigationPeriodic;
			    });
	Clazz.defineMethod (c$, "stopAnimationThreads", 
			    ($fz = function (fromWhere) {
				this.setVibrationOff ();
				this.setSpinOn (false);
				this.setNavOn (false);
				this.setAnimationOn (false);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setNavigationMode", 
			    ($fz = function (TF) {
				this.global.navigationMode = TF;
				if (TF && !this.transformManager.canNavigate ()) {
				    this.stopAnimationThreads ("setNavigationMode");
				    this.transformManager = this.transformManager.getNavigationManager (this, this.dimScreen.width, this.dimScreen.height);
				    this.transformManager.homePosition (true);
				}this.transformManager.setNavigationMode (TF);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getNavigationMode", 
			    function () {
				return this.global.navigationMode;
			    });
	Clazz.defineMethod (c$, "getNavigateSurface", 
			    function () {
				return this.global.navigateSurface;
			    });
	Clazz.defineMethod (c$, "setTransformManager", 
			    function (transformManager) {
				this.stopAnimationThreads ("setTransformMan");
				this.transformManager = transformManager;
				transformManager.setViewer (this, this.dimScreen.width, this.dimScreen.height);
				this.setTransformManagerDefaults ();
				transformManager.homePosition (true);
			    }, "org.jmol.viewer.TransformManager");
	Clazz.defineMethod (c$, "setPerspectiveModel", 
			    ($fz = function (mode) {
				if (this.transformManager.perspectiveModel == mode) return;
				this.stopAnimationThreads ("setPerspectivemodeg");
				switch (mode) {
				case 10:
				    this.transformManager =  new org.jmol.viewer.TransformManager10 (this, this.dimScreen.width, this.dimScreen.height);
				    break;
				default:
				    this.transformManager = this.transformManager.getNavigationManager (this, this.dimScreen.width, this.dimScreen.height);
				}
				this.setTransformManagerDefaults ();
				this.transformManager.homePosition (true);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setTransformManagerDefaults", 
			    ($fz = function () {
				this.transformManager.setCameraDepthPercent (this.global.cameraDepth);
				this.transformManager.setPerspectiveDepth (this.global.perspectiveDepth);
				this.transformManager.setStereoDegrees (-5);
				this.transformManager.setVisualRange (this.global.visualRange);
				this.transformManager.setSpinOn (false);
				this.transformManager.setVibrationPeriod (0);
				this.transformManager.setFrameOffsets (this.frameOffsets);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getCameraFactors", 
			    function () {
				return this.transformManager.getCameraFactors ();
			    });
	Clazz.defineMethod (c$, "getZoomLarge", 
			    function () {
				return this.global.zoomLarge;
			    });
	Clazz.defineMethod (c$, "getTraceAlpha", 
			    function () {
				return this.global.traceAlpha;
			    });
	Clazz.defineMethod (c$, "getHermiteLevel", 
			    function () {
				return (this.getSpinOn () ? 0 : this.global.hermiteLevel);
			    });
	Clazz.defineMethod (c$, "getHighResolution", 
			    function () {
				return this.global.highResolutionFlag;
			    });
	Clazz.defineMethod (c$, "getLoadState", 
			    function (htParams) {
				return this.global.getLoadState (htParams);
			    }, "java.util.Map");
	Clazz.overrideMethod (c$, "setAutoBond", 
			      function (TF) {
				  this.global.setParamB ("autobond", TF);
				  this.global.autoBond = TF;
			      }, "~B");
	Clazz.overrideMethod (c$, "getAutoBond", 
			      function () {
				  return this.global.autoBond;
			      });
	Clazz.defineMethod (c$, "makeConnections", 
			    function (minDistance, maxDistance, order, connectOperation, bsA, bsB, bsBonds, isBonds, addGroup, energy) {
				this.clearModelDependentObjects ();
				this.clearMinimization ();
				return this.modelSet.makeConnections (minDistance, maxDistance, order, connectOperation, bsA, bsB, bsBonds, isBonds, addGroup, energy);
			    }, "~N,~N,~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,~N");
	Clazz.overrideMethod (c$, "rebond", 
			      function () {
				  this.rebondState (false);
			      });
	Clazz.defineMethod (c$, "rebondState", 
			    function (isStateScript) {
				this.clearModelDependentObjects ();
				this.modelSet.deleteAllBonds ();
				var isLegacy = isStateScript && this.checkAutoBondLegacy ();
				this.modelSet.autoBondBs4 (null, null, null, null, this.getMadBond (), isLegacy);
				this.addStateScript ((isLegacy ? "set legacyAutoBonding TRUE;connect;set legacyAutoBonding FALSE;" : "connect;"), false, true);
			    }, "~B");
	Clazz.defineMethod (c$, "setPdbConectBonding", 
			    function (isAuto, isStateScript) {
				this.clearModelDependentObjects ();
				this.modelSet.deleteAllBonds ();
				var bsExclude =  new org.jmol.util.BitSet ();
				this.modelSet.setPdbConectBonding (0, 0, bsExclude);
				if (isAuto) {
				    var isLegacy = isStateScript && this.checkAutoBondLegacy ();
				    this.modelSet.autoBondBs4 (null, null, bsExclude, null, this.getMadBond (), isLegacy);
				    this.addStateScript ((isLegacy ? "set legacyAutoBonding TRUE;connect PDB AUTO;set legacyAutoBonding FALSE;" : "connect PDB auto;"), false, true);
				    return;
				}this.addStateScript ("connect PDB;", false, true);
			    }, "~B,~B");
	Clazz.defineMethod (c$, "getGreyscaleRendering", 
			    function () {
				return this.global.greyscaleRendering;
			    });
	Clazz.defineMethod (c$, "getDisablePopupMenu", 
			    function () {
				return this.global.disablePopupMenu;
			    });
	Clazz.defineMethod (c$, "getForceAutoBond", 
			    function () {
				return this.global.forceAutoBond;
			    });
	Clazz.overrideMethod (c$, "setPercentVdwAtom", 
			      function (value) {
				  this.global.setParamI ("percentVdwAtom", value);
				  this.global.percentVdwAtom = value;
				  this.rd.value = value / 100;
				  this.rd.factorType = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
				  this.rd.vdwType = org.jmol.constant.EnumVdw.AUTO;
				  this.setShapeSize (0, this.rd, null);
			      }, "~N");
	Clazz.overrideMethod (c$, "getPercentVdwAtom", 
			      function () {
				  return this.global.percentVdwAtom;
			      });
	Clazz.defineMethod (c$, "getDefaultRadiusData", 
			    function () {
				return this.rd;
			    });
	Clazz.overrideMethod (c$, "getMadBond", 
			      function () {
				  return (this.global.bondRadiusMilliAngstroms * 2);
			      });
	Clazz.defineMethod (c$, "getMarBond", 
			    function () {
				return this.global.bondRadiusMilliAngstroms;
			    });
	Clazz.defineMethod (c$, "getModeMultipleBond", 
			    function () {
				return this.global.modeMultipleBond;
			    });
	Clazz.defineMethod (c$, "getShowMultipleBonds", 
			    function () {
				return this.global.showMultipleBonds;
			    });
	Clazz.defineMethod (c$, "getMultipleBondSpacing", 
			    function () {
				return this.global.multipleBondSpacing;
			    });
	Clazz.defineMethod (c$, "getMultipleBondRadiusFactor", 
			    function () {
				return this.global.multipleBondRadiusFactor;
			    });
	Clazz.overrideMethod (c$, "setShowHydrogens", 
			      function (TF) {
				  this.global.setParamB ("showHydrogens", TF);
				  this.global.showHydrogens = TF;
			      }, "~B");
	Clazz.overrideMethod (c$, "getShowHydrogens", 
			      function () {
				  return this.global.showHydrogens;
			      });
	Clazz.defineMethod (c$, "getShowHiddenSelectionHalos", 
			    function () {
				return this.global.showHiddenSelectionHalos;
			    });
	Clazz.overrideMethod (c$, "setShowBbcage", 
			      function (value) {
				  this.setObjectMad (31, "boundbox", (value ? -4 : 0));
				  this.global.setParamB ("showBoundBox", value);
			      }, "~B");
	Clazz.overrideMethod (c$, "getShowBbcage", 
			      function () {
				  return this.getObjectMad (4) != 0;
			      });
	Clazz.defineMethod (c$, "setShowUnitCell", 
			    function (value) {
				this.setObjectMad (32, "unitcell", (value ? -2 : 0));
				this.global.setParamB ("showUnitCell", value);
			    }, "~B");
	Clazz.defineMethod (c$, "getShowUnitCell", 
			    function () {
				return this.getObjectMad (5) != 0;
			    });
	Clazz.overrideMethod (c$, "setShowAxes", 
			      function (value) {
				  this.setObjectMad (30, "axes", (value ? -2 : 0));
				  this.global.setParamB ("showAxes", value);
			      }, "~B");
	Clazz.overrideMethod (c$, "getShowAxes", 
			      function () {
				  return this.getObjectMad (1) != 0;
			      });
	Clazz.overrideMethod (c$, "setFrankOn", 
			      function (TF) {
				  if (this.$isPreviewOnly) TF = false;
				  this.frankOn = TF;
				  this.setObjectMad (34, "frank", (TF ? 1 : 0));
			      }, "~B");
	Clazz.defineMethod (c$, "getShowFrank", 
			    function () {
				if (this.$isPreviewOnly || this.$isApplet && this.creatingImage) return false;
				return (this.$isSignedApplet && !this.isSignedAppletLocal || this.frankOn);
			    });
	Clazz.defineMethod (c$, "isSignedApplet", 
			    function () {
				return this.$isSignedApplet;
			    });
	Clazz.overrideMethod (c$, "setShowMeasurements", 
			      function (TF) {
				  this.global.setParamB ("showMeasurements", TF);
				  this.global.showMeasurements = TF;
			      }, "~B");
	Clazz.overrideMethod (c$, "getShowMeasurements", 
			      function () {
				  return this.global.showMeasurements;
			      });
	Clazz.defineMethod (c$, "getShowMeasurementLabels", 
			    function () {
				return this.global.measurementLabels;
			    });
	Clazz.defineMethod (c$, "getMeasureAllModelsFlag", 
			    function () {
				return this.global.measureAllModels;
			    });
	Clazz.defineMethod (c$, "setUnits", 
			    function (units, isDistance) {
				this.global.setUnits (units);
				if (isDistance) {
				    this.global.setUnits (units);
				    this.setShapeProperty (6, "reformatDistances", null);
				} else {
				}}, "~S,~B");
	Clazz.defineMethod (c$, "getMeasureDistanceUnits", 
			    function () {
				return this.global.measureDistanceUnits;
			    });
	Clazz.defineMethod (c$, "getEnergyUnits", 
			    function () {
				return this.global.energyUnits;
			    });
	Clazz.defineMethod (c$, "setAppendNew", 
			    function (value) {
				this.global.appendNew = value;
			    }, "~B");
	Clazz.defineMethod (c$, "getAppendNew", 
			    function () {
				return this.global.appendNew;
			    });
	Clazz.defineMethod (c$, "getAutoFps", 
			    function () {
				return this.global.autoFps;
			    });
	Clazz.overrideMethod (c$, "setRasmolDefaults", 
			      function () {
				  this.setDefaultsType ("RasMol");
			      });
	Clazz.overrideMethod (c$, "setJmolDefaults", 
			      function () {
				  this.setDefaults ();
			      });
	Clazz.defineMethod (c$, "setDefaultsType", 
			    ($fz = function (type) {
				if (type.equalsIgnoreCase ("RasMol")) {
				    this.stateManager.setRasMolDefaults ();
				    return;
				}this.setDefaults ();
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setDefaults", 
			    ($fz = function () {
				this.setShapeSize (0, this.rd, this.getModelUndeletedAtomsBitSet (-1));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getZeroBasedXyzRasmol", 
			    function () {
				return this.global.zeroBasedXyzRasmol;
			    });
	Clazz.defineMethod (c$, "setAntialias", 
			    ($fz = function (mode, TF) {
				switch (mode) {
				case 0:
				    this.global.antialiasDisplay = TF;
				    break;
				case 1:
				    this.global.antialiasTranslucent = TF;
				    break;
				case 2:
				    this.global.antialiasImages = TF;
				    return;
				}
				this.resizeImage (0, 0, false, false, true);
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "allocTempPoints", 
			    function (size) {
				return this.tempManager.allocTempPoints (size);
			    }, "~N");
	Clazz.defineMethod (c$, "freeTempPoints", 
			    function (tempPoints) {
				this.tempManager.freeTempPoints (tempPoints);
			    }, "~A");
	Clazz.defineMethod (c$, "allocTempScreens", 
			    function (size) {
				return this.tempManager.allocTempScreens (size);
			    }, "~N");
	Clazz.defineMethod (c$, "freeTempScreens", 
			    function (tempScreens) {
				this.tempManager.freeTempScreens (tempScreens);
			    }, "~A");
	Clazz.defineMethod (c$, "allocTempEnum", 
			    function (size) {
				return this.tempManager.allocTempEnum (size);
			    }, "~N");
	Clazz.defineMethod (c$, "freeTempEnum", 
			    function (temp) {
				this.tempManager.freeTempEnum (temp);
			    }, "~A");
	Clazz.defineMethod (c$, "getFont3D", 
			    function (fontFace, fontStyle, fontSize) {
				return this.gdata.getFont3DFSS (fontFace, fontStyle, fontSize);
			    }, "~S,~S,~N");
	Clazz.defineMethod (c$, "formatText", 
			    function (text0) {
				var i;
				if ((i = text0.indexOf ("@{")) < 0 && (i = text0.indexOf ("%{")) < 0) return text0;
				var text = text0;
				var isEscaped = (text.indexOf ("\\") >= 0);
				if (isEscaped) {
				    text = org.jmol.util.TextFormat.simpleReplace (text, "\\%", "\1");
				    text = org.jmol.util.TextFormat.simpleReplace (text, "\\@", "\2");
				    isEscaped = !text.equals (text0);
				}text = org.jmol.util.TextFormat.simpleReplace (text, "%{", "@{");
				var name;
				while ((i = text.indexOf ("@{")) >= 0) {
				    i++;
				    var i0 = i + 1;
				    var len = text.length;
				    i = org.jmol.script.ScriptCompiler.ichMathTerminator (text, i, len);
				    if (i >= len) return text;
				    name = text.substring (i0, i);
				    if (name.length == 0) return text;
				    var v = this.evaluateExpression (name);
				    if (Clazz.instanceOf (v, org.jmol.util.Point3f)) v = org.jmol.util.Escape.escapePt (v);
				    text = text.substring (0, i0 - 2) + v.toString () + text.substring (i + 1);
				}
				if (isEscaped) {
				    text = org.jmol.util.TextFormat.simpleReplace (text, "\2", "@");
				    text = org.jmol.util.TextFormat.simpleReplace (text, "\1", "%");
				}return text;
			    }, "~S");
	Clazz.defineMethod (c$, "getElementSymbol", 
			    function (i) {
				return this.modelSet.getElementSymbol (i);
			    }, "~N");
	Clazz.defineMethod (c$, "getElementNumber", 
			    function (i) {
				return this.modelSet.getElementNumber (i);
			    }, "~N");
	Clazz.overrideMethod (c$, "getAtomName", 
			      function (i) {
				  return this.modelSet.getAtomName (i);
			      }, "~N");
	Clazz.overrideMethod (c$, "getAtomNumber", 
			      function (i) {
				  return this.modelSet.getAtomNumber (i);
			      }, "~N");
	Clazz.defineMethod (c$, "getAtomGroupQuaternions", 
			    function (bsAtoms, nMax) {
				return this.modelSet.getAtomGroupQuaternions (bsAtoms, nMax, this.getQuaternionFrame ());
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getAtomQuaternion", 
			    function (i) {
				return this.modelSet.getQuaternion (i, this.getQuaternionFrame ());
			    }, "~N");
	Clazz.overrideMethod (c$, "getAtomPoint3f", 
			      function (i) {
				  return this.modelSet.atoms[i];
			      }, "~N");
	Clazz.defineMethod (c$, "getAtomPointVector", 
			    function (bs) {
				return this.modelSet.getAtomPointVector (bs);
			    }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getAtomRadius", 
			      function (i) {
				  return this.modelSet.getAtomRadius (i);
			      }, "~N");
	Clazz.overrideMethod (c$, "getAtomArgb", 
			      function (i) {
				  return this.gdata.getColorArgbOrGray (this.modelSet.getAtomColix (i));
			      }, "~N");
	Clazz.defineMethod (c$, "getAtomChain", 
			    function (i) {
				return this.modelSet.getAtomChain (i);
			    }, "~N");
	Clazz.overrideMethod (c$, "getAtomModelIndex", 
			      function (i) {
				  return this.modelSet.atoms[i].modelIndex;
			      }, "~N");
	Clazz.defineMethod (c$, "getAtomSequenceCode", 
			    function (i) {
				return this.modelSet.atoms[i].getSeqcodeString ();
			    }, "~N");
	Clazz.overrideMethod (c$, "getBondRadius", 
			      function (i) {
				  return this.modelSet.getBondRadius (i);
			      }, "~N");
	Clazz.overrideMethod (c$, "getBondOrder", 
			      function (i) {
				  return this.modelSet.getBondOrder (i);
			      }, "~N");
	Clazz.defineMethod (c$, "assignAromaticBonds", 
			    function () {
				this.modelSet.assignAromaticBonds ();
			    });
	Clazz.defineMethod (c$, "getSmartAromatic", 
			    function () {
				return this.global.smartAromatic;
			    });
	Clazz.defineMethod (c$, "resetAromatic", 
			    function () {
				this.modelSet.resetAromatic ();
			    });
	Clazz.overrideMethod (c$, "getBondArgb1", 
			      function (i) {
				  return this.gdata.getColorArgbOrGray (this.modelSet.getBondColix1 (i));
			      }, "~N");
	Clazz.overrideMethod (c$, "getBondModelIndex", 
			      function (i) {
				  return this.modelSet.getBondModelIndex (i);
			      }, "~N");
	Clazz.overrideMethod (c$, "getBondArgb2", 
			      function (i) {
				  return this.gdata.getColorArgbOrGray (this.modelSet.getBondColix2 (i));
			      }, "~N");
	Clazz.overrideMethod (c$, "getPolymerLeadMidPoints", 
			      function (modelIndex, polymerIndex) {
				  return this.modelSet.getPolymerLeadMidPoints (modelIndex, polymerIndex);
			      }, "~N,~N");
	Clazz.defineMethod (c$, "setStereoMode", 
			    function (twoColors, stereoMode, degrees) {
				this.setFloatProperty ("stereoDegrees", degrees);
				this.setBooleanProperty ("greyscaleRendering", stereoMode.isBiColor ());
				if (twoColors != null) this.transformManager.setStereoMode2 (twoColors);
				else this.transformManager.setStereoMode (stereoMode);
			    }, "~A,org.jmol.constant.EnumStereoMode,~N");
	Clazz.defineMethod (c$, "isStereoDouble", 
			    function () {
				return this.transformManager.stereoMode === org.jmol.constant.EnumStereoMode.DOUBLE;
			    });
	Clazz.overrideMethod (c$, "getOperatingSystemName", 
			      function () {
				  return org.jmol.viewer.Viewer.strOSName;
			      });
	Clazz.overrideMethod (c$, "getJavaVendor", 
			      function () {
				  return org.jmol.viewer.Viewer.strJavaVendor;
			      });
	Clazz.overrideMethod (c$, "getJavaVersion", 
			      function () {
				  return org.jmol.viewer.Viewer.strJavaVersion;
			      });
	Clazz.defineMethod (c$, "getGraphicsData", 
			    function () {
				return this.gdata;
			    });
	Clazz.overrideMethod (c$, "showModelSetDownload", 
			      function () {
				  return true;
			      });
	Clazz.defineMethod (c$, "isScriptEditorVisible", 
			    function () {
				return this.scriptEditorVisible;
			    });
	Clazz.overrideMethod (c$, "getProperty", 
			      function (returnType, infoType, paramInfo) {
				  if (!"DATA_API".equals (returnType)) return org.jmol.viewer.PropertyManager.getProperty (this, returnType, infoType, paramInfo);
				  switch (("scriptCheck.........scriptContext.......scriptEditor........scriptEditorState...getAppConsole.......getScriptEditor.....setMenu.............spaceGroupInfo......disablePopupMenu....defaultDirectory....getPopupMenu........shapeManager........consoleText.........").indexOf (infoType)) {
				  case 0:
				      return this.scriptCheckRet (paramInfo, true);
				  case 20:
				      return this.$eval.getScriptContext ();
				  case 40:
				      this.showEditor (paramInfo);
				      return null;
				  case 60:
				      this.scriptEditorVisible = (paramInfo).booleanValue ();
				      return null;
				  case 80:
				      if (this.$isKiosk) {
					  this.appConsole = null;
				      } else if (Clazz.instanceOf (paramInfo, org.jmol.api.JmolAppConsoleInterface)) {
					  this.appConsole = paramInfo;
				      } else if (paramInfo != null && !(paramInfo).booleanValue ()) {
					  this.appConsole = null;
				      } else if (this.appConsole == null && paramInfo != null && (paramInfo).booleanValue ()) {
					  for (var i = 0; i < 4 && this.appConsole == null; i++) {
					      this.appConsole = (this.$isApplet ? org.jmol.api.Interface.getOptionInterface ("console.AppletConsole") : org.jmol.api.Interface.getApplicationInterface ("jmolpanel.AppConsole")).getAppConsole (this);
					      if (this.appConsole == null) try {
						  Thread.currentThread ().wait (100);
					      } catch (e) {
						  if (Clazz.exceptionOf (e, InterruptedException)) {
						  } else {
						      throw e;
						  }
					      }
					  }
				      }this.scriptEditor = (this.appConsole == null ? null : this.appConsole.getScriptEditor ());
				      return this.appConsole;
				  case 100:
				      if (this.appConsole == null && paramInfo != null && (paramInfo).booleanValue ()) {
					  this.getProperty ("DATA_API", "getAppConsole", Boolean.TRUE);
					  this.scriptEditor = (this.appConsole == null ? null : this.appConsole.getScriptEditor ());
				      }return this.scriptEditor;
				  case 120:
				      if (this.jmolpopup != null) this.jmolpopup.dispose ();
				      this.jmolpopup = null;
				      return this.menuStructure = paramInfo;
				  case 140:
				      return this.getSpaceGroupInfo (null);
				  case 160:
				      this.global.disablePopupMenu = true;
				      return null;
				  case 180:
				      return this.global.defaultDirectory;
				  case 200:
				      if (Clazz.instanceOf (paramInfo, String)) return this.getMenu (paramInfo);
				      return this.getPopupMenu ();
				  case 220:
				      return this.shapeManager.getProperty (paramInfo);
				  case 240:
				      return (this.appConsole == null ? "" : this.appConsole.getText ());
				  }
				  org.jmol.util.Logger.error ("ERROR in getProperty DATA_API: " + infoType);
				  return null;
			      }, "~S,~S,~O");
	Clazz.defineMethod (c$, "showEditor", 
			    function (file_text) {
				if (file_text == null) file_text = [null, null];
				if (file_text[1] == null) file_text[1] = "<no data>";
				var filename = file_text[0];
				var msg = file_text[1];
				var scriptEditor = this.getProperty ("DATA_API", "getScriptEditor", Boolean.TRUE);
				if (scriptEditor == null) return;
				if (msg != null) {
				    scriptEditor.setFilename (filename);
				    scriptEditor.output (org.jmol.io.JmolBinary.getEmbeddedScript (msg));
				}scriptEditor.setVisible (true);
			    }, "~A");
	Clazz.defineMethod (c$, "getModelExtract", 
			    function (atomExpression, doTransform, type) {
				return this.modelSet.getModelExtract (this.getAtomBitSet (atomExpression), doTransform, false, type);
			    }, "~O,~B,~S");
	Clazz.defineMethod (c$, "setTainted", 
			    function (TF) {
				this.isTainted = this.axesAreTainted = (TF && (this.refreshing || this.creatingImage));
			    }, "~B");
	Clazz.defineMethod (c$, "notifyMouseClicked", 
			    function (x, y, action, mode) {
				var modifiers = org.jmol.viewer.binding.Binding.getModifiers (action);
				var clickCount = org.jmol.viewer.binding.Binding.getClickCount (action);
				this.global.setParamI ("_mouseX", x);
				this.global.setParamI ("_mouseY", this.dimScreen.height - y);
				this.global.setParamI ("_mouseAction", action);
				this.global.setParamI ("_mouseModifiers", modifiers);
				this.global.setParamI ("_clickCount", clickCount);
				return this.statusManager.setStatusClicked (x, this.dimScreen.height - y, action, clickCount, mode);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "checkObjectClicked", 
			    function (x, y, modifiers) {
				return this.shapeManager.checkObjectClicked (x, y, modifiers, this.getVisibleFramesBitSet ());
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "checkObjectHovered", 
			    function (x, y) {
				return (this.shapeManager != null && this.shapeManager.checkObjectHovered (x, y, this.getVisibleFramesBitSet (), this.getBondPicking ()));
			    }, "~N,~N");
	Clazz.defineMethod (c$, "checkObjectDragged", 
			    function (prevX, prevY, x, y, action) {
				var iShape = 0;
				switch (this.getPickingMode ()) {
				case 2:
				    iShape = 5;
				    break;
				case 4:
				    iShape = 22;
				    break;
				}
				if (this.shapeManager.checkObjectDragged (prevX, prevY, x, y, action, this.getVisibleFramesBitSet (), iShape)) {
				    this.refresh (1, "checkObjectDragged");
				    if (iShape == 22) this.scriptEcho (this.getShapeProperty (22, "command"));
				}}, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "rotateAxisAngleAtCenter", 
			    function (rotCenter, rotAxis, degreesPerSecond, endDegrees, isSpin, bsSelected) {
				if (this.transformManager.rotateAxisAngleAtCenter (rotCenter, rotAxis, degreesPerSecond, endDegrees, isSpin, bsSelected)) this.refresh (-1, "rotateAxisAngleAtCenter");
			    }, "org.jmol.util.Point3f,org.jmol.util.Vector3f,~N,~N,~B,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateAboutPointsInternal", 
			    function (point1, point2, degreesPerSecond, endDegrees, isSpin, bsSelected, translation, finalPoints) {
				if (this.transformManager.rotateAboutPointsInternal (point1, point2, degreesPerSecond, endDegrees, false, isSpin, bsSelected, false, translation, finalPoints)) this.refresh (-1, "rotateAxisAboutPointsInternal");
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~N,~N,~B,org.jmol.util.BitSet,org.jmol.util.Vector3f,java.util.List");
	Clazz.defineMethod (c$, "getPickingSpinRate", 
			    function () {
				return this.global.pickingSpinRate;
			    });
	Clazz.defineMethod (c$, "startSpinningAxis", 
			    function (pt1, pt2, isClockwise) {
				if (this.getSpinOn () || this.getNavOn ()) {
				    this.setSpinOn (false);
				    this.setNavOn (false);
				    return;
				}this.transformManager.rotateAboutPointsInternal (pt1, pt2, this.global.pickingSpinRate, 3.4028235E38, isClockwise, true, null, false, null, null);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "getModelDipole", 
			    function () {
				return this.modelSet.getModelDipole (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "calculateMolecularDipole", 
			    function () {
				return this.modelSet.calculateMolecularDipole (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getDipoleScale", 
			    function () {
				return this.global.dipoleScale;
			    });
	Clazz.defineMethod (c$, "getAtomIdentityInfo", 
			    function (atomIndex, info) {
				this.modelSet.getAtomIdentityInfo (atomIndex, info);
			    }, "~N,java.util.Map");
	Clazz.defineMethod (c$, "setDefaultLattice", 
			    function (ptLattice) {
				this.global.setDefaultLattice (ptLattice);
				this.global.setParamS ("defaultLattice", org.jmol.util.Escape.escapePt (ptLattice));
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getDefaultLattice", 
			    function () {
				return this.global.getDefaultLattice ();
			    });
	Clazz.defineMethod (c$, "getTaintedAtoms", 
			    function (type) {
				return this.modelSet.getTaintedAtoms (type);
			    }, "~N");
	Clazz.defineMethod (c$, "setTaintedAtoms", 
			    function (bs, type) {
				this.modelSet.setTaintedAtoms (bs, type);
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getData", 
			    function (atomExpression, type) {
				var exp = "";
				if (type.equalsIgnoreCase ("MOL") || type.equalsIgnoreCase ("SDF") || type.equalsIgnoreCase ("V2000") || type.equalsIgnoreCase ("V3000") || type.equalsIgnoreCase ("XYZVIB") || type.equalsIgnoreCase ("CD")) return this.getModelExtract (atomExpression, false, type);
				if (type.toLowerCase ().indexOf ("property_") == 0) exp = "{selected}.label(\"%{" + type + "}\")";
				else if (type.equalsIgnoreCase ("CML")) return this.getModelCml (this.getAtomBitSet (atomExpression), 2147483647, true);
				else if (type.equalsIgnoreCase ("PDB")) exp = "{selected and not hetero}.label(\"ATOM  %5i %-4a%1A%3.3n %1c%4R%1E   %8.3x%8.3y%8.3z%6.2Q%6.2b          %2e  \").lines+{selected and hetero}.label(\"HETATM%5i %-4a%1A%3.3n %1c%4R%1E   %8.3x%8.3y%8.3z%6.2Q%6.2b          %2e  \").lines";
				else if (type.equalsIgnoreCase ("XYZRN")) exp = "\"\" + {selected}.size + \"\n\n\"+{selected}.label(\"%-2e %8.3x %8.3y %8.3z %4.2[vdw] 1 [%n]%r.%a#%i\").lines";
				else if (type.startsWith ("USER:")) exp = "{selected}.label(\"" + type.substring (5) + "\").lines";
				else exp = "\"\" + {selected}.size + \"\n\n\"+{selected}.label(\"%-2e %10.5x %10.5y %10.5z\").lines";
				if (!atomExpression.equals ("selected")) exp = org.jmol.util.TextFormat.simpleReplace (exp, "selected", atomExpression);
				return this.evaluateExpression (exp);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getModelCml", 
			    function (bs, nAtomsMax, addBonds) {
				return this.modelSet.getModelCml (bs, nAtomsMax, addBonds);
			    }, "org.jmol.util.BitSet,~N,~B");
	Clazz.defineMethod (c$, "evaluateExpression", 
			    function (stringOrTokens) {
				return org.jmol.script.ScriptEvaluator.evaluateExpression (this, stringOrTokens, false);
			    }, "~O");
	Clazz.defineMethod (c$, "evaluateExpressionAsVariable", 
			    function (stringOrTokens) {
				return org.jmol.script.ScriptEvaluator.evaluateExpression (this, stringOrTokens, true);
			    }, "~O");
	Clazz.defineMethod (c$, "getHelixData", 
			    function (bs, tokType) {
				return this.modelSet.getHelixData (bs, tokType);
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getPdbData", 
			    function (bs, sb) {
				if (bs == null) bs = this.getSelectionSet (true);
				return this.modelSet.getPdbAtomData (bs, sb);
			    }, "org.jmol.util.BitSet,org.jmol.io.OutputStringBuilder");
	Clazz.defineMethod (c$, "isJmolDataFrameForModel", 
			    function (modelIndex) {
				return this.modelSet.isJmolDataFrameForModel (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "isJmolDataFrame", 
			    function () {
				return this.modelSet.isJmolDataFrameForModel (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getJmolDataFrameIndex", 
			    function (modelIndex, type) {
				return this.modelSet.getJmolDataFrameIndex (modelIndex, type);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setJmolDataFrame", 
			    function (type, modelIndex, dataIndex) {
				this.modelSet.setJmolDataFrame (type, modelIndex, dataIndex);
			    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "setFrameTitle", 
			    function (modelIndex, title) {
				this.modelSet.setFrameTitle (org.jmol.util.BitSetUtil.newAndSetBit (modelIndex), title);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setFrameTitleObj", 
			    function (title) {
				this.loadShape (29);
				this.modelSet.setFrameTitle (this.getVisibleFramesBitSet (), title);
			    }, "~O");
	Clazz.defineMethod (c$, "getFrameTitle", 
			    function () {
				return this.modelSet.getFrameTitle (this.animationManager.currentModelIndex);
			    });
	Clazz.defineMethod (c$, "getJmolFrameType", 
			    function (modelIndex) {
				return this.modelSet.getJmolFrameType (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getJmolDataSourceFrame", 
			    function (modelIndex) {
				return this.modelSet.getJmolDataSourceFrame (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomProperty", 
			    function (bs, tok, iValue, fValue, sValue, values, list) {
				if (tok == 1649412112) this.shapeManager.deleteVdwDependentShapes (bs);
				this.clearMinimization ();
				this.modelSet.setAtomProperty (bs, tok, iValue, fValue, sValue, values, list);
				switch (tok) {
				case 1112541185:
				case 1112541186:
				case 1112541187:
				case 1112541188:
				case 1112541189:
				case 1112541190:
				case 1112539151:
				case 1112539152:
				case 1112539153:
				case 1087375365:
				    this.refreshMeasures (true);
				}
			    }, "org.jmol.util.BitSet,~N,~N,~N,~S,~A,~A");
	Clazz.defineMethod (c$, "checkCoordinatesChanged", 
			    function () {
				this.modelSet.recalculatePositionDependentQuantities (null, null);
				this.refreshMeasures (true);
			    });
	Clazz.defineMethod (c$, "setAtomCoord", 
			    function (atomIndex, x, y, z) {
				this.modelSet.setAtomCoord (atomIndex, x, y, z);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomCoordRelative", 
			    function (atomIndex, x, y, z) {
				this.modelSet.setAtomCoordRelative (atomIndex, x, y, z);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomCoord", 
			    function (bs, tokType, xyzValues) {
				if (bs.cardinality () == 0) return;
				this.modelSet.setAtomCoord (bs, tokType, xyzValues);
				this.checkMinimization ();
				this.statusManager.setStatusAtomMoved (bs);
			    }, "org.jmol.util.BitSet,~N,~O");
	Clazz.defineMethod (c$, "setAtomCoordRelative", 
			    function (offset, bs) {
				if (bs == null) bs = this.getSelectionSet (false);
				if (bs.cardinality () == 0) return;
				this.modelSet.setAtomCoordRelative (offset, bs);
				this.checkMinimization ();
				this.statusManager.setStatusAtomMoved (bs);
			    }, "org.jmol.util.Tuple3f,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "allowRotateSelected", 
			    function () {
				return this.global.allowRotateSelected;
			    });
	Clazz.defineMethod (c$, "invertAtomCoordPt", 
			    function (pt, bs) {
				this.modelSet.invertSelected (pt, null, -1, null, bs);
				this.checkMinimization ();
				this.statusManager.setStatusAtomMoved (bs);
			    }, "org.jmol.util.Point3f,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "invertAtomCoordPlane", 
			    function (plane, bs) {
				this.modelSet.invertSelected (null, plane, -1, null, bs);
				this.checkMinimization ();
				this.statusManager.setStatusAtomMoved (bs);
			    }, "org.jmol.util.Point4f,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "invertSelected", 
			    function (pt, plane, iAtom, invAtoms) {
				var bs = this.getSelectionSet (false);
				if (bs.cardinality () == 0) return;
				this.modelSet.invertSelected (pt, plane, iAtom, invAtoms, bs);
				this.checkMinimization ();
				this.statusManager.setStatusAtomMoved (bs);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point4f,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "moveAtoms", 
			    function (mNew, matrixRotate, translation, center, isInternal, bsAtoms) {
				if (bsAtoms.cardinality () == 0) return;
				this.modelSet.moveAtoms (mNew, matrixRotate, translation, bsAtoms, center, isInternal);
				this.checkMinimization ();
				this.statusManager.setStatusAtomMoved (bsAtoms);
			    }, "org.jmol.util.Matrix3f,org.jmol.util.Matrix3f,org.jmol.util.Vector3f,org.jmol.util.Point3f,~B,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "moveSelected", 
			    function (deltaX, deltaY, deltaZ, x, y, bsSelected, isTranslation, asAtoms) {
				if (deltaZ == 0) return;
				if (x == -2147483648) this.rotateBondIndex = -1;
				if (this.isJmolDataFrame ()) return;
				if (deltaX == -2147483648) {
				    this.showSelected = true;
				    this.loadShape (8);
				    this.refresh (6, "moveSelected");
				    return;
				}if (deltaX == 2147483647) {
				    if (!this.showSelected) return;
				    this.showSelected = false;
				    this.refresh (6, "moveSelected");
				    return;
				}if (this.movingSelected) return;
				this.movingSelected = true;
				this.stopMinimization ();
				if (this.rotateBondIndex >= 0 && x != -2147483648) {
				    this.actionRotateBond (deltaX, deltaY, x, y);
				} else {
				    bsSelected = this.setMovableBitSet (bsSelected, !asAtoms);
				    if (bsSelected.cardinality () != 0) {
					if (isTranslation) {
					    var ptCenter = this.getAtomSetCenter (bsSelected);
					    this.transformManager.finalizeTransformParameters ();
					    var f = (this.global.antialiasDisplay ? 2 : 1);
					    var ptScreen = this.transformPt (ptCenter);
					    var ptScreenNew;
					    if (deltaZ != -2147483648) ptScreenNew = org.jmol.util.Point3f.new3 (ptScreen.x, ptScreen.y, ptScreen.z + deltaZ + 0.5);
					    else ptScreenNew = org.jmol.util.Point3f.new3 (ptScreen.x + deltaX * f + 0.5, ptScreen.y + deltaY * f + 0.5, ptScreen.z);
					    var ptNew =  new org.jmol.util.Point3f ();
					    this.unTransformPoint (ptScreenNew, ptNew);
					    ptNew.sub (ptCenter);
					    this.setAtomCoordRelative (ptNew, bsSelected);
					} else {
					    this.transformManager.rotateXYBy (deltaX, deltaY, bsSelected);
					}}}this.refresh (2, "");
				this.movingSelected = false;
			    }, "~N,~N,~N,~N,~N,org.jmol.util.BitSet,~B,~B");
	Clazz.defineMethod (c$, "highlightBond", 
			    function (index, isHover) {
				if (isHover && !this.isHoverEnabled ()) return;
				var bs = null;
				if (index >= 0) {
				    var b = this.modelSet.getBonds ()[index];
				    var i = b.getAtomIndex2 ();
				    if (!this.isAtomAssignable (i)) return;
				    bs = org.jmol.util.BitSetUtil.newAndSetBit (i);
				    bs.set (b.getAtomIndex1 ());
				}this.highlight (bs);
				this.refresh (3, "highlightBond");
			    }, "~N,~B");
	Clazz.defineMethod (c$, "highlight", 
			    function (bs) {
				if (bs != null) this.loadShape (8);
				this.setShapeProperty (8, "highlight", bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setRotateBondIndex", 
			    function (index) {
				var haveBond = (this.rotateBondIndex >= 0);
				if (!haveBond && index < 0) return;
				this.rotatePrev1 = -1;
				this.bsRotateBranch = null;
				if (index == -2147483648) return;
				this.rotateBondIndex = index;
				this.highlightBond (index, false);
			    }, "~N");
	Clazz.defineMethod (c$, "getRotateBondIndex", 
			    function () {
				return this.rotateBondIndex;
			    });
	Clazz.defineMethod (c$, "actionRotateBond", 
			    function (deltaX, deltaY, x, y) {
				if (this.rotateBondIndex < 0) return;
				var bsBranch = this.bsRotateBranch;
				var atom1;
				var atom2;
				if (bsBranch == null) {
				    var b = this.modelSet.getBonds ()[this.rotateBondIndex];
				    atom1 = b.getAtom1 ();
				    atom2 = b.getAtom2 ();
				    this.undoMoveActionClear (atom1.index, 2, true);
				    var pt = org.jmol.util.Point3f.new3 (x, y, Clazz.doubleToInt ((atom1.screenZ + atom2.screenZ) / 2));
				    this.transformManager.unTransformPoint (pt, pt);
				    if (atom2.getCovalentBondCount () == 1 || pt.distance (atom1) < pt.distance (atom2) && atom1.getCovalentBondCount () != 1) {
					var a = atom1;
					atom1 = atom2;
					atom2 = a;
				    }if (org.jmol.util.Measure.computeAngleABC (pt, atom1, atom2, true) > 90 || org.jmol.util.Measure.computeAngleABC (pt, atom2, atom1, true) > 90) {
					bsBranch = this.getBranchBitSet (atom2.index, atom1.index);
				    }if (bsBranch != null) for (var n = 0, i = atom1.getBonds ().length; --i >= 0; ) {
					if (bsBranch.get (atom1.getBondedAtomIndex (i)) && ++n == 2) {
					    bsBranch = null;
					    break;
					}}
				    if (bsBranch == null) {
					bsBranch = this.getMoleculeBitSet (atom1.index);
				    }this.bsRotateBranch = bsBranch;
				    this.rotatePrev1 = atom1.index;
				    this.rotatePrev2 = atom2.index;
				} else {
				    atom1 = this.modelSet.atoms[this.rotatePrev1];
				    atom2 = this.modelSet.atoms[this.rotatePrev2];
				}var v1 = org.jmol.util.Vector3f.new3 (atom2.screenX - atom1.screenX, atom2.screenY - atom1.screenY, 0);
				var v2 = org.jmol.util.Vector3f.new3 (deltaX, deltaY, 0);
				v1.cross (v1, v2);
				var degrees = (v1.z > 0 ? 1 : -1) * v2.length ();
				var bs = org.jmol.util.BitSetUtil.copy (bsBranch);
				bs.andNot (this.selectionManager.getMotionFixedAtoms ());
				this.rotateAboutPointsInternal (atom1, atom2, 0, degrees, false, bs, null, null);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "refreshMeasures", 
			    function (andStopMinimization) {
				this.setShapeProperty (6, "refresh", null);
				if (andStopMinimization) this.stopMinimization ();
			    }, "~B");
	Clazz.defineMethod (c$, "setDynamicMeasurements", 
			    function (TF) {
				this.global.dynamicMeasurements = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "getDynamicMeasurements", 
			    function () {
				return this.global.dynamicMeasurements;
			    });
	Clazz.defineMethod (c$, "functionXY", 
			    function (functionName, nX, nY) {
				var data = null;
				if (functionName.indexOf ("file:") == 0) data = this.getFileAsString (functionName.substring (5));
				else if (functionName.indexOf ("data2d_") != 0) return this.statusManager.functionXY (functionName, nX, nY);
				nX = Math.abs (nX);
				nY = Math.abs (nY);
				var fdata;
				if (data == null) {
				    fdata = this.getDataFloat2D (functionName);
				    if (fdata != null) return fdata;
				    data = "";
				}fdata =  Clazz.newFloatArray (nX, nY, 0);
				var f =  Clazz.newFloatArray (nX * nY, 0);
				org.jmol.util.Parser.parseStringInfestedFloatArray (data, null, f);
				for (var i = 0, n = 0; i < nX; i++) for (var j = 0; j < nY; j++) fdata[i][j] = f[n++];


				return fdata;
			    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "functionXYZ", 
			    function (functionName, nX, nY, nZ) {
				var data = null;
				if (functionName.indexOf ("file:") == 0) data = this.getFileAsString (functionName.substring (5));
				else if (functionName.indexOf ("data3d_") != 0) return this.statusManager.functionXYZ (functionName, nX, nY, nZ);
				nX = Math.abs (nX);
				nY = Math.abs (nY);
				nZ = Math.abs (nZ);
				var xyzdata;
				if (data == null) {
				    xyzdata = this.getDataFloat3D (functionName);
				    if (xyzdata != null) return xyzdata;
				    data = "";
				}xyzdata =  Clazz.newFloatArray (nX, nY, nZ, 0);
				var f =  Clazz.newFloatArray (nX * nY * nZ, 0);
				org.jmol.util.Parser.parseStringInfestedFloatArray (data, null, f);
				for (var i = 0, n = 0; i < nX; i++) for (var j = 0; j < nY; j++) for (var k = 0; k < nZ; k++) xyzdata[i][j][k] = f[n++];



				return xyzdata;
			    }, "~S,~N,~N,~N");
	Clazz.defineMethod (c$, "showNMR", 
			    function (smiles) {
				this.showUrl (this.global.nmrUrlFormat + org.jmol.util.Escape.escapeUrl (this.getChemicalInfo (smiles, '/', "smiles")));
			    }, "~S");
	Clazz.defineMethod (c$, "getHelp", 
			    function (what) {
				if (this.global.helpPath.indexOf ("?") < 0) {
				    if (what.length > 0 && what.indexOf ("?") != 0) what = "?search=" + org.jmol.util.TextFormat.simpleReplace (what, " ", "%20");
				    what += (what.length == 0 ? "?ver=" : "&ver=") + org.jmol.viewer.JmolConstants.version;
				} else {
				    what = "&" + what;
				}this.showUrl (this.global.helpPath + what);
			    }, "~S");
	Clazz.defineMethod (c$, "show2D", 
			    function (smiles) {
				this.showUrl (this.setLoadFormat ("_" + smiles, '2', false));
			    }, "~S");
	Clazz.defineMethod (c$, "getChemicalInfo", 
			    function (smiles, type, info) {
				var s = this.setLoadFormat ("_" + smiles, type, false);
				if (type == '/') s += org.jmol.util.TextFormat.simpleReplace (info, " ", "%20");
				return this.getFileAsStringBin (s, 2147483647, false, false);
			    }, "~S,~S,~S");
	Clazz.defineMethod (c$, "addCommand", 
			    function (command) {
				if (this.autoExit || !this.haveDisplay || !this.getPreserveState ()) return;
				this.commandHistory.addCommand (org.jmol.util.TextFormat.replaceAllCharacters (command, "\r\n\t", " "));
			    }, "~S");
	Clazz.defineMethod (c$, "removeCommand", 
			    function () {
				return this.commandHistory.removeCommand ();
			    });
	Clazz.overrideMethod (c$, "getSetHistory", 
			      function (howFarBack) {
				  return this.commandHistory.getSetHistory (howFarBack);
			      }, "~N");
	Clazz.overrideMethod (c$, "writeTextFile", 
			      function (fileName, data) {
				  this.createImage (fileName, "txt", data, -2147483648, 0, 0);
			      }, "~S,~S");
	Clazz.overrideMethod (c$, "clipImage", 
			      function (text) {
				  if (!this.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL)) return "no";
				  var c;
				  try {
				      c = org.jmol.api.Interface.getOptionInterface ("export.image.ImageCreator");
				      c.setViewer (this, this.privateKey);
				      return c.clipImage (text);
				  } catch (er) {
				      if (Clazz.exceptionOf (er, Error)) {
					  return org.jmol.i18n.GT._ ("clipboard is not accessible -- use signed applet");
				      } else {
					  throw er;
				      }
				  }
			      }, "~S");
	Clazz.defineMethod (c$, "createImageSet", 
			    function (fileName, type, text_or_bytes, scripts, quality, width, height, bsFrames, nVibes, fullPath) {
				if (bsFrames == null && nVibes == 0) return this.createImagePathCheck (fileName, type, text_or_bytes, scripts, quality, width, height, fullPath, true);
				var info = "";
				var n = 0;
				fileName = this.getFileNameFromDialog (fileName, quality);
				if (fullPath != null) fullPath[0] = fileName;
				if (fileName == null) return null;
				var ptDot = fileName.indexOf (".");
				if (ptDot < 0) ptDot = fileName.length;
				var froot = fileName.substring (0, ptDot);
				var fext = fileName.substring (ptDot);
				var sb =  new org.jmol.util.StringXBuilder ();
				text_or_bytes = [""];
				if (bsFrames == null) {
				    this.transformManager.vibrationOn = true;
				    sb =  new org.jmol.util.StringXBuilder ();
				    for (var i = 0; i < nVibes; i++) {
					for (var j = 0; j < 20; j++) {
					    this.transformManager.setVibrationT (j / 20 + 0.2501);
					    if (!this.writeFrame (++n, froot, fext, fullPath, type, text_or_bytes, quality, width, height, sb)) return "ERROR WRITING FILE SET: \n" + info;
					}
				    }
				    this.setVibrationOff ();
				} else {
				    for (var i = bsFrames.nextSetBit (0); i >= 0; i = bsFrames.nextSetBit (i + 1)) {
					this.setCurrentModelIndex (i);
					if (!this.writeFrame (++n, froot, fext, fullPath, type, text_or_bytes, quality, width, height, sb)) return "ERROR WRITING FILE SET: \n" + info;
				    }
				}if (info.length == 0) info = "OK\n";
				return info + "\n" + n + " files created";
			    }, "~S,~S,~O,~A,~N,~N,~N,org.jmol.util.BitSet,~N,~A");
	Clazz.defineMethod (c$, "writeFrame", 
			    ($fz = function (n, froot, fext, fullPath, type, text_or_bytes, quality, width, height, sb) {
				var fileName = "0000" + n;
				fileName = froot + fileName.substring (fileName.length - 4) + fext;
				if (fullPath != null) fullPath[0] = fileName;
				var msg = this.createImagePathCheck (fileName, type, text_or_bytes, null, quality, width, height, null, false);
				this.scriptEcho (msg);
				sb.append (msg).append ("\n");
				return msg.startsWith ("OK");
			    }, $fz.isPrivate = true, $fz), "~N,~S,~S,~A,~S,~O,~N,~N,~N,org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "getCreatingImage", 
			    function () {
				return this.creatingImage;
			    });
	Clazz.defineMethod (c$, "createZip", 
			    function (fileName, type, stateInfo, scripts) {
				return this.createImagePathCheck (fileName, type, stateInfo, scripts, -2147483648, -1, -1, null, true);
			    }, "~S,~S,~S,~A");
	Clazz.overrideMethod (c$, "createImage", 
			      function (fileName, type, text_or_bytes, quality, width, height) {
				  return this.createImagePathCheck (fileName, type, text_or_bytes, null, quality, width, height, null, true);
			      }, "~S,~S,~O,~N,~N,~N");
	Clazz.defineMethod (c$, "createImagePathCheck", 
			    ($fz = function (fileName, type, text_or_bytes, scripts, quality, width, height, fullPath, doCheck) {
				if (type.equals ("JMOL")) type = "ZIPALL";
				var saveWidth = this.dimScreen.width;
				var saveHeight = this.dimScreen.height;
				this.creatingImage = true;
				if (quality != -2147483648) {
				    this.mustRender = true;
				    this.resizeImage (width, height, true, false, false);
				    this.setModelVisibility ();
				}var err = null;
				try {
				    if (fileName == null) {
					err = this.clipImage (text_or_bytes);
				    } else {
					if (doCheck) fileName = this.getFileNameFromDialog (fileName, quality);
					if (fullPath != null) fullPath[0] = fileName;
					if (fileName == null) {
					    err = "CANCELED";
					} else if (type.equals ("ZIP") || type.equals ("ZIPALL")) {
					    if (scripts != null && type.equals ("ZIP")) type = "ZIPALL";
					    err = org.jmol.io.JmolBinary.createZipSet (this.fileManager, this, fileName, text_or_bytes, scripts, type.equals ("ZIPALL"));
					} else if (type.equals ("SCENE")) {
					    err = this.createSceneSet (fileName, text_or_bytes, width, height);
					} else {
					    if (!type.equals ("OutputStream")) err = this.statusManager.createImage (fileName, type, text_or_bytes, quality);
					    if (err == null) {
						var c = org.jmol.api.Interface.getOptionInterface ("export.image.ImageCreator");
						c.setViewer (this, this.privateKey);
						err = c.createImage (fileName, type, text_or_bytes, scripts, quality);
						if (Clazz.instanceOf (err, String)) this.statusManager.createImage (err, type, null, quality);
					    }}}} catch (er) {
						er.printStackTrace ();
						org.jmol.util.Logger.error (this.setErrorMessage ((err = "ERROR creating image??: " + er)));
					    }
				this.creatingImage = false;
				if (quality != -2147483648) {
				    this.resizeImage (saveWidth, saveHeight, true, false, true);
				}return ("CANCELED".equals (err) ? null : err);
			    }, $fz.isPrivate = true, $fz), "~S,~S,~O,~A,~N,~N,~N,~A,~B");
	Clazz.defineMethod (c$, "getFileNameFromDialog", 
			    ($fz = function (fileName, quality) {
				if (fileName == null || this.$isKiosk) return null;
				var useDialog = (fileName.indexOf ("?") == 0);
				if (useDialog) fileName = fileName.substring (1);
				useDialog = new Boolean (useDialog | this.$isApplet).valueOf ();
				fileName = org.jmol.viewer.FileManager.getLocalPathForWritingFile (this, fileName);
				if (useDialog) fileName = this.dialogAsk (quality == -2147483648 ? "save" : "saveImage", fileName);
				return fileName;
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "setSyncTarget", 
			    ($fz = function (mode, TF) {
				switch (mode) {
				case 0:
				    this.statusManager.syncingMouse = TF;
				    break;
				case 1:
				    this.statusManager.syncingScripts = TF;
				    break;
				case 2:
				    this.statusManager.syncSend (TF ? "GET_GRAPHICS" : "SET_GRAPHICS_OFF", "*", 0);
				    if (Float.isNaN (this.transformManager.stereoDegrees)) this.setFloatProperty ("stereoDegrees", -5);
				    if (TF) {
					this.setBooleanProperty ("_syncMouse", false);
					this.setBooleanProperty ("_syncScript", false);
				    }return;
				}
				if (!this.statusManager.syncingScripts && !this.statusManager.syncingMouse) this.refresh (-1, "set sync");
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.overrideMethod (c$, "syncScript", 
			      function (script, applet, port) {
				  if ("GET_GRAPHICS".equalsIgnoreCase (script)) {
				      this.statusManager.setSyncDriver (5);
				      this.statusManager.syncSend (script, applet, 0);
				      this.setBooleanProperty ("_syncMouse", false);
				      this.setBooleanProperty ("_syncScript", false);
				      return;
				  }if ("=".equals (applet)) {
				      applet = "~";
				      this.statusManager.setSyncDriver (2);
				  }var disableSend = "~".equals (applet);
				  if (port > 0 || !disableSend && !".".equals (applet)) {
				      this.statusManager.syncSend (script, applet, port);
				      if (!"*".equals (applet) || script.startsWith ("{")) return;
				  }if (script.equalsIgnoreCase ("on") || script.equalsIgnoreCase ("true")) {
				      this.statusManager.setSyncDriver (1);
				      return;
				  }if (script.equalsIgnoreCase ("off") || script.equalsIgnoreCase ("false")) {
				      this.statusManager.setSyncDriver (0);
				      return;
				  }if (script.equalsIgnoreCase ("slave")) {
				      this.statusManager.setSyncDriver (2);
				      return;
				  }var syncMode = this.statusManager.getSyncMode ();
				  if (syncMode == 0) return;
				  if (syncMode != 1) disableSend = false;
				  if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug (this.htmlName + " syncing with script: " + script);
				  if (disableSend) this.statusManager.setSyncDriver (3);
				  if (script.indexOf ("Mouse: ") != 0) {
				      if (script.startsWith ("Select: ")) {
					  var filename = org.jmol.util.Parser.getQuotedAttribute (script, "file");
					  var modelID = org.jmol.util.Parser.getQuotedAttribute (script, "model");
					  var baseModel = org.jmol.util.Parser.getQuotedAttribute (script, "baseModel");
					  var atoms = org.jmol.util.Parser.getQuotedAttribute (script, "atoms");
					  var select = org.jmol.util.Parser.getQuotedAttribute (script, "select");
					  var script2 = org.jmol.util.Parser.getQuotedAttribute (script, "script");
					  var isNIH = (modelID != null && modelID.startsWith ("$"));
					  if (isNIH) filename = (modelID.substring (1).equals (this.getParameter ("_smilesstring")) ? null : modelID);
					  var id = (isNIH || modelID == null ? null : (filename == null ? "" : filename + "#") + modelID);
					  if ("".equals (baseModel)) id += ".baseModel";
					  var modelIndex = (id == null ? -3 : this.getModelIndexFromId (id));
					  if (modelIndex == -2) return;
					  script = (modelIndex == -1 && filename != null ? script = "load " + org.jmol.util.Escape.escapeStr (filename) : "");
					  if (id != null) script += ";model " + org.jmol.util.Escape.escapeStr (id);
					  if (atoms != null) script += ";select visible & (@" + org.jmol.util.TextFormat.simpleReplace (atoms, ",", " or @") + ")";
					  else if (select != null) script += ";select visible & (" + select + ")";
					  if (script2 != null) script += ";" + script2;
				      } else if (script.toLowerCase ().startsWith ("jspecview")) {
					  if (!disableSend) this.statusManager.syncSend (this.fullName + "JSpecView" + script.substring (9), ">", 0);
					  return;
				      }System.out.println ("Jmol executing script for JSpecView: " + script);
				      this.evalStringQuietSync (script, true, false);
				      return;
				  }var tokens = org.jmol.util.Parser.getTokens (script);
				  var key = tokens[1];
				  switch (tokens.length) {
				  case 3:
				      if (key.equals ("zoomByFactor")) this.zoomByFactor (org.jmol.util.Parser.parseFloatStr (tokens[2]), 2147483647, 2147483647);
				      else if (key.equals ("zoomBy")) this.zoomBy (org.jmol.util.Parser.parseInt (tokens[2]));
				      else if (key.equals ("rotateZBy")) this.rotateZBy (org.jmol.util.Parser.parseInt (tokens[2]), 2147483647, 2147483647);
				      break;
				  case 4:
				      if (key.equals ("rotateXYBy")) this.rotateXYBy (org.jmol.util.Parser.parseFloatStr (tokens[2]), org.jmol.util.Parser.parseFloatStr (tokens[3]));
				      else if (key.equals ("translateXYBy")) this.translateXYBy (org.jmol.util.Parser.parseInt (tokens[2]), org.jmol.util.Parser.parseInt (tokens[3]));
				      else if (key.equals ("rotateMolecule")) this.rotateSelected (org.jmol.util.Parser.parseFloatStr (tokens[2]), org.jmol.util.Parser.parseFloatStr (tokens[3]), null);
				      break;
				  case 5:
				      if (key.equals ("spinXYBy")) this.spinXYBy (org.jmol.util.Parser.parseInt (tokens[2]), org.jmol.util.Parser.parseInt (tokens[3]), org.jmol.util.Parser.parseFloatStr (tokens[4]));
				      else if (key.equals ("zoomByFactor")) this.zoomByFactor (org.jmol.util.Parser.parseFloatStr (tokens[2]), org.jmol.util.Parser.parseInt (tokens[3]), org.jmol.util.Parser.parseInt (tokens[4]));
				      else if (key.equals ("rotateZBy")) this.rotateZBy (org.jmol.util.Parser.parseInt (tokens[2]), org.jmol.util.Parser.parseInt (tokens[3]), org.jmol.util.Parser.parseInt (tokens[4]));
				      else if (key.equals ("rotateArcBall")) this.rotateArcBall (org.jmol.util.Parser.parseInt (tokens[2]), org.jmol.util.Parser.parseInt (tokens[3]), org.jmol.util.Parser.parseFloatStr (tokens[4]));
				      break;
				  case 7:
				      if (key.equals ("centerAt")) this.centerAt (org.jmol.util.Parser.parseInt (tokens[2]), org.jmol.util.Parser.parseInt (tokens[3]), org.jmol.util.Point3f.new3 (org.jmol.util.Parser.parseFloatStr (tokens[4]), org.jmol.util.Parser.parseFloatStr (tokens[5]), org.jmol.util.Parser.parseFloatStr (tokens[6])));
				  }
				  if (disableSend) this.setSyncDriver (4);
			      }, "~S,~S,~N");
	Clazz.defineMethod (c$, "getModelIndexFromId", 
			    function (id) {
				return this.modelSet.getModelIndexFromId (id);
			    }, "~S");
	Clazz.defineMethod (c$, "setSyncDriver", 
			    function (mode) {
				this.statusManager.setSyncDriver (mode);
			    }, "~N");
	Clazz.defineMethod (c$, "getPartialCharges", 
			    function () {
				return this.modelSet.getPartialCharges ();
			    });
	Clazz.defineMethod (c$, "getAtomicPotentials", 
			    function (isMep, bsSelected, bsIgnore, fileName) {
				var potentials =  Clazz.newFloatArray (this.getAtomCount (), 0);
				var m = org.jmol.api.Interface.getOptionInterface ("quantum.MlpCalculation");
				var data = (fileName == null ? null : this.getFileAsString (fileName));
				m.assignPotentials (this.modelSet.atoms, potentials, this.getSmartsMatch ("a", bsSelected), this.getSmartsMatch ("/noAromatic/[$(C=O),$(O=C),$(NC=O)]", bsSelected), bsIgnore, data);
				return potentials;
			    }, "~B,org.jmol.util.BitSet,org.jmol.util.BitSet,~S");
	Clazz.defineMethod (c$, "setProteinType", 
			    function (type, bs) {
				this.modelSet.setProteinType (bs == null ? this.getSelectionSet (false) : bs, type);
			    }, "org.jmol.constant.EnumStructure,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getBondPoint3f1", 
			      function (i) {
				  return this.modelSet.getBondAtom1 (i);
			      }, "~N");
	Clazz.overrideMethod (c$, "getBondPoint3f2", 
			      function (i) {
				  return this.modelSet.getBondAtom2 (i);
			      }, "~N");
	Clazz.defineMethod (c$, "getVibrationVector", 
			    function (atomIndex) {
				return this.modelSet.getVibrationVector (atomIndex, false);
			    }, "~N");
	Clazz.defineMethod (c$, "getVanderwaalsMar", 
			    function (i) {
				return (this.dataManager.defaultVdw === org.jmol.constant.EnumVdw.USER ? this.dataManager.userVdwMars[i] : org.jmol.util.Elements.getVanderwaalsMar (i, this.dataManager.defaultVdw));
			    }, "~N");
	Clazz.defineMethod (c$, "getVanderwaalsMarType", 
			    function (i, type) {
				if (type == null) type = this.dataManager.defaultVdw;
				else switch (type) {
				case org.jmol.constant.EnumVdw.USER:
				    if (this.dataManager.bsUserVdws == null) type = this.dataManager.defaultVdw;
				    else return this.dataManager.userVdwMars[i];
				    break;
				case org.jmol.constant.EnumVdw.AUTO:
				case org.jmol.constant.EnumVdw.JMOL:
				case org.jmol.constant.EnumVdw.BABEL:
				case org.jmol.constant.EnumVdw.RASMOL:
				    if (this.dataManager.defaultVdw !== org.jmol.constant.EnumVdw.AUTO) type = this.dataManager.defaultVdw;
				    break;
				}
				return (org.jmol.util.Elements.getVanderwaalsMar (i, type));
			    }, "~N,org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "setDefaultVdw", 
			    function (type) {
				var vType = org.jmol.constant.EnumVdw.getVdwType (type);
				if (vType == null) vType = org.jmol.constant.EnumVdw.AUTO;
				this.dataManager.setDefaultVdw (vType);
				this.global.setParamS ("defaultVDW", this.getDefaultVdwTypeNameOrData (-2147483648, null));
			    }, "~S");
	Clazz.defineMethod (c$, "getDefaultVdwTypeNameOrData", 
			    function (iMode, vType) {
				return this.dataManager.getDefaultVdwNameOrData (iMode, vType, null);
			    }, "~N,org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "deleteAtoms", 
			    function (bs, fullModels) {
				this.clearModelDependentObjects ();
				if (!fullModels) {
				    this.modelSet.deleteAtoms (bs);
				    var n = this.selectionManager.deleteAtoms (bs);
				    this.setTainted (true);
				    return n;
				}if (bs.cardinality () == 0) return 0;
				this.setCurrentModelIndexClear (0, false);
				this.animationManager.setAnimationOn (false);
				var bsD0 = org.jmol.util.BitSetUtil.copy (this.getDeletedAtoms ());
				var bsDeleted = this.modelSet.deleteModels (bs);
				this.selectionManager.processDeletedModelAtoms (bsDeleted);
				this.setAnimationRange (0, 0);
				this.$eval.deleteAtomsInVariables (bsDeleted);
				this.clearRepaintManager (-1);
				this.animationManager.clear ();
				this.animationManager.initializePointers (1);
				this.setCurrentModelIndexClear (this.getModelCount () > 1 ? -1 : 0, this.getModelCount () > 1);
				this.hoverAtomIndex = -1;
				this.setFileLoadStatus (org.jmol.constant.EnumFileStatus.DELETED, null, null, null, null);
				this.refreshMeasures (true);
				if (bsD0 != null) bsDeleted.andNot (bsD0);
				return org.jmol.util.BitSetUtil.cardinalityOf (bsDeleted);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "deleteBonds", 
			    function (bsDeleted) {
				this.modelSet.deleteBonds (bsDeleted, false);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteModelAtoms", 
			    function (firstAtomIndex, nAtoms, bsDeleted) {
				this.selectionManager.deleteModelAtoms (bsDeleted);
				org.jmol.util.BitSetUtil.deleteBits (this.getFrameOffsets (), bsDeleted);
				this.setFrameOffsets (this.getFrameOffsets ());
				this.dataManager.deleteModelAtoms (firstAtomIndex, nAtoms, bsDeleted);
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getDeletedAtoms", 
			    function () {
				return this.selectionManager.getDeletedAtoms ();
			    });
	Clazz.defineMethod (c$, "getQuaternionFrame", 
			    function () {
				return this.global.quaternionFrame.charAt (this.global.quaternionFrame.length == 2 ? 1 : 0);
			    });
	Clazz.defineMethod (c$, "getHelixStep", 
			    function () {
				return this.global.helixStep;
			    });
	Clazz.defineMethod (c$, "calculatePointGroup", 
			    function () {
				return this.modelSet.calculatePointGroup (this.getSelectionSet (false));
			    });
	Clazz.defineMethod (c$, "getPointGroupInfo", 
			    function (atomExpression) {
				return this.modelSet.getPointGroupInfo (this.getAtomBitSet (atomExpression));
			    }, "~O");
	Clazz.defineMethod (c$, "getPointGroupAsString", 
			    function (asDraw, type, index, scale) {
				return this.modelSet.getPointGroupAsString (this.getSelectionSet (false), asDraw, type, index, scale);
			    }, "~B,~S,~N,~N");
	Clazz.defineMethod (c$, "getPointGroupTolerance", 
			    function (type) {
				switch (type) {
				case 0:
				    return this.global.pointGroupDistanceTolerance;
				case 1:
				    return this.global.pointGroupLinearTolerance;
				}
				return 0;
			    }, "~N");
	Clazz.defineMethod (c$, "getFileAsImage", 
			    function (pathName, retFileNameOrError) {
				return this.fileManager.getFileAsImage (pathName, retFileNameOrError);
			    }, "~S,~A");
	Clazz.defineMethod (c$, "cd", 
			    function (dir) {
				if (dir == null) {
				    dir = ".";
				} else if (dir.length == 0) {
				    this.setStringProperty ("defaultDirectory", "");
				    dir = ".";
				}dir = this.fileManager.getDefaultDirectory (dir + (dir.equals ("=") ? "" : dir.endsWith ("/") ? "X.spt" : "/X.spt"));
				if (dir.length > 0) this.setStringProperty ("defaultDirectory", dir);
				var path = this.fileManager.getFilePath (dir + "/", true, false);
				if (path.startsWith ("file:/")) org.jmol.viewer.FileManager.setLocalPath (this, dir, false);
				return dir;
			    }, "~S");
	Clazz.defineMethod (c$, "setErrorMessage", 
			    ($fz = function (errMsg) {
				return this.setErrorMessageUn (errMsg, null);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setErrorMessageUn", 
			    ($fz = function (errMsg, errMsgUntranslated) {
				this.errorMessageUntranslated = errMsgUntranslated;
				return (this.errorMessage = errMsg);
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.overrideMethod (c$, "getErrorMessage", 
			      function () {
				  return this.errorMessage;
			      });
	Clazz.overrideMethod (c$, "getErrorMessageUn", 
			      function () {
				  return this.errorMessageUntranslated == null ? this.errorMessage : this.errorMessageUntranslated;
			      });
	Clazz.defineMethod (c$, "setShapeErrorState", 
			    function (shapeID, state) {
				this.currentShapeID = shapeID;
				this.currentShapeState = state;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getShapeErrorState", 
			    function () {
				if (this.currentShapeID < 0) return "";
				if (this.modelSet != null) this.shapeManager.releaseShape (this.currentShapeID);
				this.clearRepaintManager (this.currentShapeID);
				return org.jmol.viewer.JmolConstants.getShapeClassName (this.currentShapeID, false) + " " + this.currentShapeState;
			    });
	Clazz.defineMethod (c$, "handleError", 
			    function (er, doClear) {
				try {
				    if (doClear) this.zapMsg ("" + er);
				    this.undoClear ();
				    if (org.jmol.util.Logger.getLogLevel () == 0) org.jmol.util.Logger.setLogLevel (4);
				    this.setCursor (0);
				    this.setBooleanProperty ("refreshing", true);
				    this.fileManager.setPathForAllFiles ("");
				    org.jmol.util.Logger.error ("viewer handling error condition: " + er);
				    this.notifyError ("Error", "doClear=" + doClear + "; " + er, "" + er);
				} catch (e1) {
				    try {
					org.jmol.util.Logger.error ("Could not notify error " + er + ": due to " + e1);
				    } catch (er2) {
				    }
				}
			    }, "Error,~B");
	Clazz.defineMethod (c$, "getAtomicCharges", 
			    function () {
				return this.modelSet.getAtomicCharges ();
			    });
	Clazz.defineMethod (c$, "getFunction", 
			    function (name) {
				return this.stateManager.getFunction (name);
			    }, "~S");
	Clazz.defineMethod (c$, "addFunction", 
			    function (f) {
				this.stateManager.addFunction (f);
			    }, "org.jmol.script.ScriptFunction");
	Clazz.defineMethod (c$, "removeFunction", 
			    function (name) {
				this.stateManager.removeFunction (name);
			    }, "~S");
	Clazz.defineMethod (c$, "clearFunctions", 
			    function () {
				this.stateManager.clearFunctions ();
			    });
	Clazz.defineMethod (c$, "isFunction", 
			    function (name) {
				return this.stateManager.isFunction (name);
			    }, "~S");
	Clazz.defineMethod (c$, "getFunctionCalls", 
			    function (selectedFunction) {
				return this.stateManager.getFunctionCalls (selectedFunction);
			    }, "~S");
	Clazz.defineMethod (c$, "showMessage", 
			    function (s) {
				if (!this.isPrintOnly) org.jmol.util.Logger.warn (s);
			    }, "~S");
	Clazz.defineMethod (c$, "getMoInfo", 
			    function (modelIndex) {
				return this.modelSet.getMoInfo (modelIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getContextVariables", 
			    function () {
				return this.$eval.getContextVariables ();
			    });
	Clazz.overrideMethod (c$, "checkPrivateKey", 
			      function (privateKey) {
				  return privateKey == this.privateKey;
			      }, "~N");
	Clazz.defineMethod (c$, "bindAction", 
			    function (desc, name, range1, range2) {
				if (this.haveDisplay) this.actionManager.bindAction (desc, name, range1, range2);
			    }, "~S,~S,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "unBindAction", 
			    function (desc, name) {
				if (this.haveDisplay) this.actionManager.unbindAction (desc, name);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getMouseInfo", 
			    function () {
				return (this.haveDisplay ? this.actionManager.getMouseInfo () : null);
			    });
	Clazz.defineMethod (c$, "getFrontPlane", 
			    function () {
				return this.transformManager.getFrontPlane ();
			    });
	Clazz.defineMethod (c$, "getPlaneIntersection", 
			    function (type, plane, scale, flags) {
				return this.modelSet.getPlaneIntersection (type, plane, scale, flags, this.animationManager.currentModelIndex);
			    }, "~N,org.jmol.util.Point4f,~N,~N");
	Clazz.defineMethod (c$, "getOutputStream", 
			    function (localName, fullPath) {
				if (!this.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL)) return null;
				var ret = this.createImagePathCheck (localName, "OutputStream", null, null, -2147483648, 0, 0, fullPath, true);
				if (Clazz.instanceOf (ret, String)) {
				    org.jmol.util.Logger.error (ret);
				    return null;
				}return ret;
			    }, "~S,~A");
	Clazz.defineMethod (c$, "calculateStruts", 
			    function (bs1, bs2) {
				return this.modelSet.calculateStruts (bs1 == null ? this.getSelectionSet (false) : bs1, bs2 == null ? this.getSelectionSet (false) : bs2);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getStrutsMultiple", 
			    function () {
				return this.global.strutsMultiple;
			    });
	Clazz.defineMethod (c$, "getStrutSpacingMinimum", 
			    function () {
				return this.global.strutSpacing;
			    });
	Clazz.defineMethod (c$, "getStrutLengthMaximum", 
			    function () {
				return this.global.strutLengthMaximum;
			    });
	Clazz.defineMethod (c$, "getStrutDefaultRadius", 
			    function () {
				return this.global.strutDefaultRadius;
			    });
	Clazz.defineMethod (c$, "getPreserveState", 
			    function () {
				return this.global.preserveState;
			    });
	Clazz.defineMethod (c$, "getDragSelected", 
			    function () {
				return this.global.dragSelected && !this.global.modelKitMode;
			    });
	Clazz.defineMethod (c$, "getLoadAtomDataTolerance", 
			    function () {
				return this.global.loadAtomDataTolerance;
			    });
	Clazz.defineMethod (c$, "getAllowGestures", 
			    function () {
				return this.global.allowGestures;
			    });
	Clazz.defineMethod (c$, "getLogGestures", 
			    function () {
				return this.global.logGestures;
			    });
	Clazz.defineMethod (c$, "allowMultiTouch", 
			    function () {
				return this.global.allowMultiTouch;
			    });
	Clazz.defineMethod (c$, "logCommands", 
			    function () {
				return this.global.logCommands;
			    });
	Clazz.defineMethod (c$, "getLogFile", 
			    function () {
				return (this.logFile == null ? "" : this.logFile);
			    });
	Clazz.defineMethod (c$, "setLogFile", 
			    ($fz = function (value) {
				var path = null;
				if (this.logFilePath == null || value.indexOf ("\\") >= 0 || value.indexOf ("/") >= 0) {
				    value = null;
				} else if (value.length > 0) {
				    if (!value.startsWith ("JmolLog_")) value = "JmolLog_" + value;
				    try {
					path = (this.$isApplet ? this.logFilePath + value : ( new java.io.File (this.logFilePath + value).getAbsolutePath ()));
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    value = null;
					} else {
					    throw e;
					}
				    }
				}if (value == null || !this.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL)) {
				    org.jmol.util.Logger.info (org.jmol.i18n.GT._ ("Cannot set log file path."));
				    value = null;
				} else {
				    if (path != null) org.jmol.util.Logger.info (org.jmol.i18n.GT._ ("Setting log file to {0}", path));
				    this.logFile = path;
				}return value;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.overrideMethod (c$, "log", 
			      function (data) {
				  try {
				      if (data == null) return;
				      var doClear = (data.equals ("$CLEAR$"));
				      if (data.indexOf ("$NOW$") >= 0) data = org.jmol.util.TextFormat.simpleReplace (data, "$NOW$", ( new java.util.Date ()).toString ());
				      if (this.logFile == null) {
					  System.out.println (data);
					  return;
				      }var fstream =  new java.io.FileWriter (this.logFile, !doClear);
				      var out =  new java.io.BufferedWriter (fstream);
				      if (!doClear) {
					  out.write (data);
					  out.write (10);
				      }out.close ();
				  } catch (e) {
				      if (Clazz.exceptionOf (e, Exception)) {
					  org.jmol.util.Logger.debug ("cannot log " + data);
				      } else {
					  throw e;
				      }
				  }
			      }, "~S");
	Clazz.defineMethod (c$, "isKiosk", 
			    function () {
				return this.$isKiosk;
			    });
	Clazz.defineMethod (c$, "hasFocus", 
			    function () {
				return (this.haveDisplay && (this.$isKiosk || this.apiPlatform.hasFocus (this.display)));
			    });
	Clazz.defineMethod (c$, "setFocus", 
			    function () {
				if (this.haveDisplay && !this.apiPlatform.hasFocus (this.display)) this.apiPlatform.requestFocusInWindow (this.display);
			    });
	Clazz.defineMethod (c$, "getMinimizer", 
			    function (createNew) {
				if (this.minimizer == null && createNew) {
				    this.minimizer = org.jmol.api.Interface.getOptionInterface ("minimize.Minimizer");
				    this.minimizer.setProperty ("viewer", this);
				}return this.minimizer;
			    }, "~B");
	Clazz.defineMethod (c$, "stopMinimization", 
			    function () {
				if (this.minimizer != null) {
				    this.minimizer.setProperty ("stop", null);
				}});
	Clazz.defineMethod (c$, "clearMinimization", 
			    function () {
				if (this.minimizer != null) this.minimizer.setProperty ("clear", null);
			    });
	Clazz.defineMethod (c$, "getMinimizationInfo", 
			    function () {
				return (this.minimizer == null ? "" : this.minimizer.getProperty ("log", 0));
			    });
	Clazz.defineMethod (c$, "useMinimizationThread", 
			    function () {
				return this.global.useMinimizationThread && !this.autoExit;
			    });
	Clazz.defineMethod (c$, "checkMinimization", 
			    ($fz = function () {
				this.refreshMeasures (true);
				if (!this.global.monitorEnergy) return;
				this.minimize (0, 0, this.getModelUndeletedAtomsBitSet (-1), null, 0, false, true, false);
				this.echoMessage (this.getParameter ("_minimizationForceField") + " Energy = " + this.getParameter ("_minimizationEnergy"));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "minimize", 
			    function (steps, crit, bsSelected, bsFixed, rangeFixed, addHydrogen, isSilent, asScript) {
				var ff = this.global.forceField;
				var bsInFrame = this.getModelUndeletedAtomsBitSetBs (this.getVisibleFramesBitSet ());
				if (bsSelected == null) bsSelected = this.getModelUndeletedAtomsBitSet (this.getVisibleFramesBitSet ().length () - 1);
				else bsSelected.and (bsInFrame);
				if (rangeFixed <= 0) rangeFixed = 5.0;
				var bsMotionFixed = org.jmol.util.BitSetUtil.copy (bsFixed == null ? this.selectionManager.getMotionFixedAtoms () : bsFixed);
				var haveFixed = (bsMotionFixed.cardinality () > 0);
				if (haveFixed) bsSelected.andNot (bsMotionFixed);
				var bsNearby = this.getAtomsWithinRadius (rangeFixed, bsSelected, true, null);
				bsNearby.andNot (bsSelected);
				if (haveFixed) {
				    bsMotionFixed.and (bsNearby);
				} else {
				    bsMotionFixed = bsNearby;
				}bsMotionFixed.and (bsInFrame);
				if (addHydrogen) bsSelected.or (this.addHydrogens (bsSelected, asScript, isSilent));
				if (bsSelected.cardinality () > 200) {
				    org.jmol.util.Logger.error ("Too many atoms for minimization (>200)");
				    return;
				}try {
				    if (!isSilent) org.jmol.util.Logger.info ("Minimizing " + bsSelected.cardinality () + " atoms");
				    this.getMinimizer (true).minimize (steps, crit, bsSelected, bsMotionFixed, haveFixed, isSilent, ff);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.error ("Minimization error: " + e.getMessage ());
				    } else {
					throw e;
				    }
				}
			    }, "~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,~N,~B,~B,~B");
	Clazz.defineMethod (c$, "setMotionFixedAtoms", 
			    function (bs) {
				this.selectionManager.setMotionFixedAtoms (bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getMotionFixedAtoms", 
			    function () {
				return this.selectionManager.getMotionFixedAtoms ();
			    });
	Clazz.defineMethod (c$, "useArcBall", 
			    function () {
				return this.global.useArcBall;
			    });
	Clazz.defineMethod (c$, "rotateArcBall", 
			    function (x, y, factor) {
				this.transformManager.rotateArcBall (x, y, factor);
				this.refresh (2, this.statusManager.syncingMouse ? "Mouse: rotateArcBall " + x + " " + y + " " + factor : "");
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "getAtomicPropertyState", 
			    function (commands, type, bs, name, data) {
				this.modelSet.getAtomicPropertyStateBuffer (commands, type, bs, name, data);
			    }, "org.jmol.util.StringXBuilder,~N,org.jmol.util.BitSet,~S,~A");
	Clazz.defineMethod (c$, "getCenterAndPoints", 
			    function (atomSets, addCenter) {
				return this.modelSet.getCenterAndPoints (atomSets, addCenter);
			    }, "java.util.List,~B");
	Clazz.defineMethod (c$, "getSmallMoleculeMaxAtoms", 
			    function () {
				return this.global.smallMoleculeMaxAtoms;
			    });
	Clazz.defineMethod (c$, "streamFileData", 
			    function (fileName, type, type2, modelIndex, parameters) {
				var msg = null;
				var fullPath =  new Array (1);
				var os = this.getOutputStream (fileName, fullPath);
				if (os == null) return "";
				var sb;
				if (type.equals ("PDB") || type.equals ("PQR")) {
				    sb =  new org.jmol.io.OutputStringBuilder ( new java.io.BufferedOutputStream (os));
				    sb.type = type;
				    msg = this.getPdbData (null, sb);
				} else if (type.equals ("FILE")) {
				    msg = this.writeCurrentFile (os);
				} else if (type.equals ("PLOT")) {
				    sb =  new org.jmol.io.OutputStringBuilder ( new java.io.BufferedOutputStream (os));
				    msg = this.modelSet.getPdbData (modelIndex, type2, this.getSelectionSet (false), parameters, sb);
				}if (msg != null) msg = "OK " + msg + " " + fullPath[0];
				try {
				    os.flush ();
				    os.close ();
				} catch (e) {
				    if (Clazz.exceptionOf (e, java.io.IOException)) {
				    } else {
					throw e;
				    }
				}
				return msg;
			    }, "~S,~S,~S,~N,~A");
	Clazz.defineMethod (c$, "getPdbData", 
			    function (modelIndex, type, parameters) {
				return this.modelSet.getPdbData (modelIndex, type, this.getSelectionSet (false), parameters, null);
			    }, "~N,~S,~A");
	Clazz.defineMethod (c$, "getRepaintWait", 
			    function () {
				return this.global.repaintWaitMs;
			    });
	Clazz.defineMethod (c$, "getGroupsWithin", 
			    function (nResidues, bs) {
				return this.modelSet.getGroupsWithin (nResidues, bs);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getExecutor", 
			    function () {
				if (this.executor != null || org.jmol.viewer.Viewer.nProcessors < 2) return this.executor;
				try {
				    this.executor = org.jmol.thread.ScriptParallelProcessor.getExecutor ();
				} catch (e$$) {
				    if (Clazz.exceptionOf (e$$, Exception)) {
					var e = e$$;
					{
					    this.executor = null;
					}
				    } else if (Clazz.exceptionOf (e$$, Error)) {
					var er = e$$;
					{
					    this.executor = null;
					}
				    } else {
					throw e$$;
				    }
				}
				if (this.executor == null) org.jmol.util.Logger.error ("parallel processing is not available");
				return this.executor;
			    });
	Clazz.defineMethod (c$, "eval", 
			    function (context, shapeManager) {
				this.displayLoadErrors = false;
				var isOK = org.jmol.script.ScriptEvaluator.evaluateContext (this, context, (shapeManager == null ? this.shapeManager : shapeManager));
				this.displayLoadErrors = true;
				return isOK;
			    }, "org.jmol.script.ScriptContext,org.jmol.viewer.ShapeManager");
	Clazz.defineMethod (c$, "getShapeInfo", 
			    function () {
				return this.shapeManager.getShapeInfo ();
			    });
	Clazz.defineMethod (c$, "togglePickingLabel", 
			    function (bs) {
				if (bs == null) bs = this.getSelectionSet (false);
				this.loadShape (5);
				this.shapeManager.setShapePropertyBs (5, "toggleLabel", null, bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "loadShape", 
			    function (shapeID) {
				this.shapeManager.loadShape (shapeID);
			    }, "~N");
	Clazz.defineMethod (c$, "setShapeSize", 
			    function (shapeID, mad, bsSelected) {
				if (bsSelected == null) bsSelected = this.getSelectionSet (false);
				this.shapeManager.setShapeSizeBs (shapeID, mad, null, bsSelected);
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapeSize", 
			    function (shapeID, rd, bsAtoms) {
				this.shapeManager.setShapeSizeBs (shapeID, 0, rd, bsAtoms);
			    }, "~N,org.jmol.atomdata.RadiusData,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapeProperty", 
			    function (shapeID, propertyName, value) {
				if (shapeID < 0) return;
				this.shapeManager.setShapePropertyBs (shapeID, propertyName, value, null);
			    }, "~N,~S,~O");
	Clazz.defineMethod (c$, "getShapeProperty", 
			    function (shapeType, propertyName) {
				return this.shapeManager.getShapePropertyIndex (shapeType, propertyName, -2147483648);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getShapePropertyData", 
			    function (shapeType, propertyName, data) {
				return this.shapeManager.getShapePropertyData (shapeType, propertyName, data);
			    }, "~N,~S,~A");
	Clazz.defineMethod (c$, "getShapePropertyIndex", 
			    function (shapeType, propertyName, index) {
				return this.shapeManager.getShapePropertyIndex (shapeType, propertyName, index);
			    }, "~N,~S,~N");
	Clazz.defineMethod (c$, "getShapePropertyAsInt", 
			    ($fz = function (shapeID, propertyName) {
				var value = this.getShapeProperty (shapeID, propertyName);
				return value == null || !(Clazz.instanceOf (value, Integer)) ? -2147483648 : (value).intValue ();
			    }, $fz.isPrivate = true, $fz), "~N,~S");
	Clazz.defineMethod (c$, "setModelVisibility", 
			    function () {
				if (this.shapeManager == null) return;
				this.shapeManager.setModelVisibility ();
			    });
	Clazz.defineMethod (c$, "resetShapes", 
			    function (andCreateNew) {
				this.shapeManager.resetShapes ();
				if (andCreateNew) {
				    this.shapeManager.loadDefaultShapes (this.modelSet);
				    this.clearRepaintManager (-1);
				}}, "~B");
	Clazz.defineMethod (c$, "setAtomLabel", 
			    function (value, i) {
				this.shapeManager.setAtomLabel (value, i);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "deleteShapeAtoms", 
			    function (value, bs) {
				this.shapeManager.deleteShapeAtoms (value, bs);
			    }, "~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getShapeState", 
			    function (commands, isAll, iShape) {
				this.shapeManager.getShapeState (commands, isAll, iShape);
			    }, "org.jmol.util.StringXBuilder,~B,~N");
	Clazz.defineMethod (c$, "resetBioshapes", 
			    function (bsAllAtoms) {
				this.shapeManager.resetBioshapes (bsAllAtoms);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomShapeValue", 
			    function (tok, group, atomIndex) {
				return this.shapeManager.getAtomShapeValue (tok, group, atomIndex);
			    }, "~N,org.jmol.modelset.Group,~N");
	Clazz.defineMethod (c$, "mergeShapes", 
			    function (newShapes) {
				this.shapeManager.mergeShapes (newShapes);
			    }, "~A");
	Clazz.defineMethod (c$, "getShapeManager", 
			    function () {
				return this.shapeManager;
			    });
	Clazz.defineMethod (c$, "setParallel", 
			    function (TF) {
				return (this.$isParallel = this.global.multiProcessor && TF);
			    }, "~B");
	Clazz.defineMethod (c$, "isParallel", 
			    function () {
				return this.global.multiProcessor && this.$isParallel;
			    });
	Clazz.defineMethod (c$, "getRenderableBitSet", 
			    function () {
				return this.shapeManager.getRenderableBitSet ();
			    });
	Clazz.defineMethod (c$, "setAtomPickingOption", 
			    ($fz = function (option) {
				if (this.haveDisplay) this.actionManager.setAtomPickingOption (option);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setBondPickingOption", 
			    ($fz = function (option) {
				if (this.haveDisplay) this.actionManager.setBondPickingOption (option);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "undoClear", 
			    function () {
				this.actionStates.clear ();
				this.actionStatesRedo.clear ();
			    });
	Clazz.defineMethod (c$, "undoMoveAction", 
			    function (action, n) {
				switch (action) {
				case 4165:
				case 4139:
				    switch (n) {
				    case -2:
					this.undoClear ();
					break;
				    case -1:
					(action == 4165 ? this.actionStates : this.actionStatesRedo).clear ();
					break;
				    case 0:
					n = 2147483647;
				    default:
					if (n > 100) n = (action == 4165 ? this.actionStates : this.actionStatesRedo).size ();
					for (var i = 0; i < n; i++) this.undoMoveActionClear (0, action, true);

				    }
				    break;
				}
			    }, "~N,~N");
	Clazz.defineMethod (c$, "undoMoveActionClear", 
			    function (taintedAtom, type, clearRedo) {
				if (!this.global.preserveState) return;
				var modelIndex = (taintedAtom >= 0 ? this.modelSet.atoms[taintedAtom].modelIndex : this.modelSet.getModelCount () - 1);
				switch (type) {
				case 4139:
				case 4165:
				    this.stopMinimization ();
				    var s = "";
				    var list1;
				    var list2;
				    switch (type) {
				    default:
				    case 4165:
					list1 = this.actionStates;
					list2 = this.actionStatesRedo;
					break;
				    case 4139:
					list1 = this.actionStatesRedo;
					list2 = this.actionStates;
					if (this.actionStatesRedo.size () == 1) return;
					break;
				    }
				    if (list1.size () == 0 || this.undoWorking) return;
				    this.undoWorking = true;
				    list2.add (0, list1.remove (0));
				    s = this.actionStatesRedo.get (0);
				    if (type == 4165 && list2.size () == 1) {
					var pt = [1];
					type = org.jmol.util.Parser.parseIntNext (s, pt);
					taintedAtom = org.jmol.util.Parser.parseIntNext (s, pt);
					this.undoMoveActionClear (taintedAtom, type, false);
				    }if (this.modelSet.getModels ()[modelIndex].isModelkit () || s.indexOf ("zap ") < 0) {
					if (org.jmol.util.Logger.debugging) this.log (s);
					this.evalStringQuiet (s);
				    } else {
					this.actionStates.clear ();
				    }break;
				default:
				    if (this.undoWorking && clearRedo) return;
				    this.undoWorking = true;
				    var bs;
				    var sb =  new org.jmol.util.StringXBuilder ();
				    sb.append ("#" + type + " " + taintedAtom + " " + ( new java.util.Date ()) + "\n");
				    if (taintedAtom >= 0) {
					bs = this.getModelUndeletedAtomsBitSet (modelIndex);
					this.modelSet.taintAtoms (bs, type);
					sb.append (this.modelSet.getAtomicPropertyState (-1, null));
				    } else {
					bs = this.getModelUndeletedAtomsBitSet (modelIndex);
					sb.append ("zap ");
					sb.append (org.jmol.util.Escape.escape (bs)).append (";");
					org.jmol.viewer.DataManager.getInlineData (sb, this.modelSet.getModelExtract (bs, false, true, "MOL"), true, null);
					sb.append ("set refreshing false;").append (this.actionManager.getPickingState ()).append (this.transformManager.getMoveToText (0, false)).append ("set refreshing true;");
				    }if (clearRedo) {
					this.actionStates.add (0, sb.toString ());
					this.actionStatesRedo.clear ();
				    } else {
					this.actionStatesRedo.add (1, sb.toString ());
				    }if (this.actionStates.size () == 100) {
					this.actionStates.remove (99);
				    }}
				this.undoWorking = !clearRedo;
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "assignBond", 
			    function (bondIndex, type) {
				try {
				    var bsAtoms = this.modelSet.setBondOrder (bondIndex, type);
				    if (bsAtoms == null || type == '0') this.refresh (3, "setBondOrder");
				    else this.addHydrogens (bsAtoms, false, true);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.error ("assignBond failed");
				    } else {
					throw e;
				    }
				}
			    }, "~N,~S");
	Clazz.defineMethod (c$, "assignAtom", 
			    function (atomIndex, pt, type) {
				if (type.equals ("X")) this.setRotateBondIndex (-1);
				if (this.modelSet.atoms[atomIndex].modelIndex != this.modelSet.getModelCount () - 1) return;
				this.clearModelDependentObjects ();
				if (pt == null) {
				    this.modelSet.assignAtom (atomIndex, type, true);
				    this.modelSet.setAtomNamesAndNumbers (atomIndex, -1, null);
				    this.refresh (3, "assignAtom");
				    return;
				}var atom = this.modelSet.atoms[atomIndex];
				var bs = org.jmol.util.BitSetUtil.newAndSetBit (atomIndex);
				var pts = [pt];
				var vConnections =  new java.util.ArrayList ();
				vConnections.add (atom);
				try {
				    bs = this.addHydrogensInline (bs, vConnections, pts);
				    atomIndex = bs.nextSetBit (0);
				    this.modelSet.assignAtom (atomIndex, type, false);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				this.modelSet.setAtomNamesAndNumbers (atomIndex, -1, null);
			    }, "~N,org.jmol.util.Point3f,~S");
	Clazz.defineMethod (c$, "assignConnect", 
			    function (index, index2) {
				this.clearModelDependentObjects ();
				var connections = org.jmol.util.ArrayUtil.newFloat2 (1);
				connections[0] = [index, index2];
				this.modelSet.connect (connections);
				this.modelSet.assignAtom (index, ".", true);
				this.modelSet.assignAtom (index2, ".", true);
				this.refresh (3, "assignConnect");
			    }, "~N,~N");
	Clazz.defineMethod (c$, "moveAtomWithHydrogens", 
			    function (atomIndex, deltaX, deltaY, deltaZ, bsAtoms) {
				this.stopMinimization ();
				if (bsAtoms == null) {
				    var atom = this.modelSet.atoms[atomIndex];
				    bsAtoms = org.jmol.util.BitSetUtil.newAndSetBit (atomIndex);
				    var bonds = atom.getBonds ();
				    if (bonds != null) for (var i = 0; i < bonds.length; i++) {
					var atom2 = bonds[i].getOtherAtom (atom);
					if (atom2.getElementNumber () == 1) bsAtoms.set (atom2.index);
				    }
				}this.moveSelected (deltaX, deltaY, deltaZ, -2147483648, -2147483648, bsAtoms, true, true);
			    }, "~N,~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "appendLoadStates", 
			    function (commands) {
				if (this.ligandModelSet != null) {
				    for (var key, $key = this.ligandModelSet.keySet ().iterator (); $key.hasNext () && ((key = $key.next ()) || true);) {
					var data = this.ligandModels.get (key + "_data");
					if (data != null) commands.append ("  ").append (org.jmol.util.Escape.encapsulateData ("ligand_" + key, data.trim () + "\n", 0));
				    }
				}this.modelSet.appendLoadStates (commands);
			    }, "org.jmol.util.StringXBuilder");
	c$.getInlineData = Clazz.defineMethod (c$, "getInlineData", 
					       function (loadScript, strModel, isAppend) {
						   org.jmol.viewer.DataManager.getInlineData (loadScript, strModel, isAppend, null);
					       }, "org.jmol.util.StringXBuilder,~S,~B");
	Clazz.defineMethod (c$, "isAtomPDB", 
			    function (i) {
				return this.modelSet.isAtomPDB (i);
			    }, "~N");
	Clazz.defineMethod (c$, "isModelPDB", 
			    function (i) {
				return this.modelSet.getModels ()[i].isBioModel;
			    }, "~N");
	Clazz.defineMethod (c$, "isAtomAssignable", 
			    function (i) {
				return this.modelSet.isAtomAssignable (i);
			    }, "~N");
	Clazz.overrideMethod (c$, "deleteMeasurement", 
			      function (i) {
				  this.setShapeProperty (6, "delete", Integer.$valueOf (i));
			      }, "~N");
	Clazz.defineMethod (c$, "haveModelKit", 
			    function () {
				return this.modelSet.haveModelKit ();
			    });
	Clazz.defineMethod (c$, "getModelKitStateBitSet", 
			    function (bs, bsDeleted) {
				return this.modelSet.getModelKitStateBitset (bs, bsDeleted);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getSmiles", 
			    function (index1, index2, bsSelected, isBioSmiles, allowUnmatchedRings, addCrossLinks, addComment) {
				var atoms = this.getModelSet ().atoms;
				if (bsSelected == null) {
				    if (index1 < 0 || index2 < 0) {
					bsSelected = this.getSelectionSet (true);
				    } else {
					if (isBioSmiles) {
					    if (index1 > index2) {
						var i = index1;
						index1 = index2;
						index2 = i;
					    }index1 = atoms[index1].getGroup ().firstAtomIndex;
					    index2 = atoms[index2].getGroup ().lastAtomIndex;
					}bsSelected =  new org.jmol.util.BitSet ();
					bsSelected.setBits (index1, index2 + 1);
				    }}var comment = (addComment ? org.jmol.viewer.Viewer.getJmolVersion () + " " + this.getModelName (this.getCurrentModelIndex ()) : null);
				return this.getSmilesMatcher ().getSmiles (atoms, this.getAtomCount (), bsSelected, isBioSmiles, allowUnmatchedRings, addCrossLinks, comment);
			    }, "~N,~N,org.jmol.util.BitSet,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "connect", 
			    function (connections) {
				this.modelSet.connect (connections);
			    }, "~A");
	Clazz.defineMethod (c$, "prompt", 
			    function (label, data, list, asButtons) {
				return (this.$isKiosk ? "null" : this.apiPlatform.prompt (label, data, list, asButtons));
			    }, "~S,~S,~A,~B");
	Clazz.defineMethod (c$, "getMenuName", 
			    function (i) {
				var script = "" + this.getModelNumberDotted (i);
				var entryName = this.getModelName (i);
				if (!entryName.equals (script)) entryName = script + ": " + entryName;
				if (entryName.length > 50) entryName = entryName.substring (0, 45) + "...";
				return entryName;
			    }, "~N");
	Clazz.defineMethod (c$, "getColorEncoder", 
			    function (colorScheme) {
				return this.colorManager.getColorEncoder (colorScheme);
			    }, "~S");
	Clazz.defineMethod (c$, "displayBonds", 
			    function (bs, isDisplay) {
				this.modelSet.displayBonds (bs, isDisplay);
			    }, "org.jmol.modelset.Bond.BondSet,~B");
	Clazz.defineMethod (c$, "getModelAtomProperty", 
			    function (atom, text) {
				return this.modelSet.getModelAtomProperty (atom, text);
			    }, "org.jmol.modelset.Atom,~S");
	Clazz.defineMethod (c$, "setStateScriptVersion", 
			    function (version) {
				if (version != null) {
				    try {
					var tokens = org.jmol.util.Parser.getTokens (version.$replace ('.', ' ').$replace ('_', ' '));
					var main = Integer.$valueOf (tokens[0]).intValue ();
					var sub = Integer.$valueOf (tokens[1]).intValue ();
					var minor = Integer.$valueOf (tokens[2]).intValue ();
					if (minor == -2147483648) minor = 0;
					this.stateScriptVersionInt = main * 10000 + sub * 100 + minor;
					this.global.legacyAutoBonding = (this.stateScriptVersionInt < 110924);
					return;
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					} else {
					    throw e;
					}
				    }
				}this.setBooleanProperty ("legacyautobonding", false);
				this.stateScriptVersionInt = 2147483647;
			    }, "~S");
	Clazz.defineMethod (c$, "checkAutoBondLegacy", 
			    function () {
				return this.global.legacyAutoBonding;
			    });
	Clazz.defineMethod (c$, "initializeExporter", 
			    function (type, fileName) {
				if (this.jsExporter3D != null) {
				    this.jsExporter3D.initializeOutput (type, this, this.privateKey, this.gdata, null);
				    return this.jsExporter3D;
				}var isJS = type.equals ("JS");
				var output = (fileName == null ?  new org.jmol.util.StringXBuilder () : fileName);
				var export3D = null;
				try {
				    var export3Dclass = Class.forName (isJS ? "org.jmol.exportjs.Export3D" : "org.jmol.export.Export3D");
				    export3D = export3Dclass.newInstance ();
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					return null;
				    } else {
					throw e;
				    }
				}
				var exporter = export3D.initializeExporter (type, this, this.privateKey, this.gdata, output);
				if (isJS && exporter != null) this.jsExporter3D = export3D;
				return (exporter == null ? null : export3D);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "setPrivateKeyForShape", 
			    function (iShape) {
				this.setShapeProperty (iShape, "privateKey", Double.$valueOf (this.privateKey));
			    }, "~N");
	Clazz.defineMethod (c$, "getMouseEnabled", 
			    function () {
				return this.refreshing && !this.creatingImage;
			    });
	Clazz.defineMethod (c$, "getPartialDots", 
			    function () {
				return this.global.partialDots;
			    });
	Clazz.defineMethod (c$, "setZslabPoint", 
			    function (pt) {
				this.transformManager.setZslabPoint (pt);
			    }, "org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "calcAtomsMinMax", 
			      function (bs, boxInfo) {
				  this.modelSet.calcAtomsMinMax (bs, boxInfo);
			      }, "org.jmol.util.BitSet,org.jmol.util.BoxInfo");
	Clazz.overrideMethod (c$, "evalFunctionFloat", 
			      function (func, params, values) {
				  return this.$eval.evalFunctionFloat (func, params, values);
			      }, "~O,~O,~A");
	Clazz.overrideMethod (c$, "getObjectMap", 
			      function (map, withDollar) {
				  this.shapeManager.getObjectMap (map, withDollar);
			      }, "java.util.Map,~B");
	Clazz.defineMethod (c$, "getPdbBondInfo", 
			    function (group3) {
				if (this.htPdbBondInfo == null) this.htPdbBondInfo =  new java.util.Hashtable ();
				var info = this.htPdbBondInfo.get (group3);
				if (info != null) return info;
				info = org.jmol.viewer.JmolConstants.getPdbBondInfo (org.jmol.modelset.Group.lookupGroupID (group3));
				this.htPdbBondInfo.put (group3, info);
				return info;
			    }, "~S");
	Clazz.defineMethod (c$, "setPicked", 
			    function (iAtom) {
				this.global.setPicked (iAtom);
			    }, "~N");
	Clazz.defineMethod (c$, "runScriptImmediately", 
			    function (script) {
				try {
				    this.$eval.runScript (script);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					return false;
				    } else {
					throw e;
				    }
				}
				return true;
			    }, "~S");
	Clazz.defineMethod (c$, "allowSpecAtom", 
			    function () {
				return this.modelSet.allowSpecAtom ();
			    });
	Clazz.defineMethod (c$, "getMinPixelSelRadius", 
			    function () {
				return this.global.minPixelSelRadius;
			    });
	Clazz.defineMethod (c$, "setFrameDelayMs", 
			    function (millis) {
				this.modelSet.setFrameDelayMs (millis, this.getVisibleFramesBitSet ());
			    }, "~N");
	Clazz.defineMethod (c$, "getFrameDelayMs", 
			    function (i) {
				return this.modelSet.getFrameDelayMs (i);
			    }, "~N");
	Clazz.defineMethod (c$, "getJspecViewProperties", 
			    function (myParam) {
				return this.statusManager.getJspecViewProperties ("" + myParam);
			    }, "~O");
	Clazz.defineMethod (c$, "getBaseModelBitSet", 
			    function () {
				return this.modelSet.getBaseModelBitSet (this.getCurrentModelIndex ());
			    });
	Clazz.defineMethod (c$, "getTimeouts", 
			    function () {
				return this.timeouts;
			    });
	Clazz.defineMethod (c$, "clearTimeouts", 
			    function () {
				if (this.timeouts != null) org.jmol.thread.TimeoutThread.clear (this.timeouts);
			    });
	Clazz.defineMethod (c$, "setTimeout", 
			    function (name, mSec, script) {
				if (name == null) {
				    this.clearTimeouts ();
				    return;
				}if (this.timeouts == null) {
				    this.timeouts =  new java.util.Hashtable ();
				}org.jmol.thread.TimeoutThread.setTimeout (this, this.timeouts, name, mSec, script);
			    }, "~S,~N,~S");
	Clazz.defineMethod (c$, "triggerTimeout", 
			    function (name) {
				if (!this.haveDisplay || this.timeouts == null) return;
				org.jmol.thread.TimeoutThread.trigger (this.timeouts, name);
			    }, "~S");
	Clazz.defineMethod (c$, "clearTimeout", 
			    function (name) {
				this.setTimeout (name, 0, null);
			    }, "~S");
	Clazz.defineMethod (c$, "showTimeout", 
			    function (name) {
				return (this.haveDisplay ? org.jmol.thread.TimeoutThread.showTimeout (this.timeouts, name) : "");
			    }, "~S");
	Clazz.defineMethod (c$, "calculatePartialCharges", 
			    function (bsSelected) {
				if (bsSelected == null || bsSelected.cardinality () == 0) bsSelected = this.getModelUndeletedAtomsBitSetBs (this.getVisibleFramesBitSet ());
				this.getMinimizer (true).calculatePartialCharges (this.modelSet.getBonds (), this.modelSet.getBondCount (), this.modelSet.atoms, bsSelected);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "cachePut", 
			    function (key, data) {
				this.fileManager.cachePut (key, data);
			    }, "~S,~O");
	Clazz.defineMethod (c$, "cacheClear", 
			    function () {
				this.fileManager.cacheClear ();
				this.fileManager.clearPngjCache (null);
			    });
	Clazz.defineMethod (c$, "setCurrentModelID", 
			    function (id) {
				var modelIndex = this.getCurrentModelIndex ();
				if (modelIndex >= 0) this.modelSet.setModelAuxiliaryInfo (modelIndex, "modelID", id);
			    }, "~S");
	Clazz.defineMethod (c$, "setCentroid", 
			    function (iAtom0, iAtom1, minmax) {
				this.modelSet.setCentroid (iAtom0, iAtom1, minmax);
			    }, "~N,~N,~A");
	Clazz.defineMethod (c$, "getPathForAllFiles", 
			    function () {
				return this.fileManager.getPathForAllFiles ();
			    });
	Clazz.defineMethod (c$, "createSceneSet", 
			    function (sceneFile, type, width, height) {
				var script0 = this.getFileAsString (sceneFile);
				if (script0 == null) return "no such file: " + sceneFile;
				sceneFile = org.jmol.util.TextFormat.simpleReplace (sceneFile, ".spt", "");
				var fileRoot = sceneFile;
				var fileExt = type.toLowerCase ();
				var scenes = org.jmol.util.TextFormat.splitChars (script0, "pause scene ");
				var htScenes =  new java.util.Hashtable ();
				var list =  new java.util.ArrayList ();
				var script = org.jmol.io.JmolBinary.getSceneScript (scenes, htScenes, list);
				org.jmol.util.Logger.debug (script);
				script0 = org.jmol.util.TextFormat.simpleReplace (script0, "pause scene", "delay " + this.animationManager.lastFrameDelay + " # scene");
				var str = [script0, script, null];
				this.saveState ("_scene0");
				var nFiles = 0;
				if (scenes[0] !== "") this.zap (true, true, false);
				var iSceneLast = -1;
				for (var i = 0; i < scenes.length - 1; i++) {
				    try {
					var iScene = list.get (i).intValue ();
					if (iScene > iSceneLast) this.showString ("Creating Scene " + iScene, false);
					this.$eval.runScript (scenes[i]);
					if (iScene <= iSceneLast) continue;
					iSceneLast = iScene;
					str[2] = "all";
					var fileName = fileRoot + "_scene_" + iScene + ".all." + fileExt;
					var msg = this.createImagePathCheck (fileName, "PNGJ", null, str, -1, width, height, null, false);
					str[0] = null;
					str[2] = "min";
					fileName = fileRoot + "_scene_" + iScene + ".min." + fileExt;
					msg += "\n" + this.createImagePathCheck (fileName, "PNGJ", null, str, -1, Math.min (width, 200), Math.min (height, 200), null, false);
					this.showString (msg, false);
					nFiles += 2;
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    return "script error " + e.getMessage ();
					} else {
					    throw e;
					}
				    }
				}
				try {
				    this.$eval.runScript (this.getSavedState ("_scene0"));
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				return "OK " + nFiles + " files created";
			    }, "~S,~S,~N,~N");
	Clazz.overrideMethod (c$, "cacheFile", 
			      function (fileName, bytes) {
				  this.fileManager.cachePut (fileName, bytes);
			      }, "~S,~A");
	Clazz.defineMethod (c$, "cacheFileByName", 
			    function (fileName, isAdd) {
				return this.fileManager.cacheFileByName (fileName, isAdd);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "cacheList", 
			    function () {
				return this.fileManager.cacheList ();
			    });
	Clazz.defineMethod (c$, "isSingleThreaded", 
			    function () {
				return this.apiPlatform.isSingleThreaded ();
			    });
	Clazz.pu$h ();
	c$ = Clazz.declareType (org.jmol.viewer.Viewer, "ACCESS", Enum);
	Clazz.defineEnumConstant (c$, "NONE", 0, []);
	Clazz.defineEnumConstant (c$, "READSPT", 1, []);
	Clazz.defineEnumConstant (c$, "ALL", 2, []);
	c$ = Clazz.p0p ();
	c$.strJavaVendor = c$.prototype.strJavaVendor = System.getProperty ("java.vendor", "j2s");
	c$.strOSName = c$.prototype.strOSName = System.getProperty ("os.name", "j2s");
	c$.strJavaVersion = c$.prototype.strJavaVersion = System.getProperty ("java.version", "0.0");
	Clazz.defineStatics (c$,
			     "jsDocumentBase", "",
			     "STATE_VERSION_STAMP", "# Jmol state version ",
			     "SYNC_GRAPHICS_MESSAGE", "GET_GRAPHICS",
			     "SYNC_NO_GRAPHICS_MESSAGE", "SET_GRAPHICS_OFF",
			     "nProcessors", 1);
	{
	    try {
		($t$ = org.jmol.viewer.Viewer.nProcessors = Runtime.getRuntime ().availableProcessors (), org.jmol.viewer.Viewer.prototype.nProcessors = org.jmol.viewer.Viewer.nProcessors, $t$);
	    } catch (e) {
	    }
	}Clazz.defineStatics (c$,
			      "MAX_ACTION_UNDO", 100);
    });
    // 
    //// java\io\InputStream.js 
    // 
    ﻿Clazz.load (null, "java.io.InputStream", ["java.io.IOException", "java.lang.IndexOutOfBoundsException", "$.NullPointerException"], function () {
	c$ = Clazz.declareType (java.io, "InputStream");
	Clazz.defineMethod (c$, "read", 
			    function (b, off, len) {
				if (b == null) {
				    throw  new NullPointerException ();
				} else if (off < 0 || len < 0 || len > b.length - off) {
				    throw  new IndexOutOfBoundsException ();
				} else if (len == 0) {
				    return 0;
				}var c = this.readByteAsInt ();
				if (c == -1) {
				    return -1;
				}b[off] = c;
				var i = 1;
				try {
				    for (; i < len; i++) {
					c = this.readByteAsInt ();
					if (c == -1) {
					    break;
					}b[off + i] = c;
				    }
				} catch (ee) {
				    if (Clazz.exceptionOf (ee, java.io.IOException)) {
				    } else {
					throw ee;
				    }
				}
				return i;
			    }, "~A,~N,~N");
	Clazz.defineMethod (c$, "skip", 
			    function (n) {
				var remaining = n;
				var nr;
				if (java.io.InputStream.skipBuffer == null) ($t$ = java.io.InputStream.skipBuffer =  Clazz.newByteArray (2048, 0), java.io.InputStream.prototype.skipBuffer = java.io.InputStream.skipBuffer, $t$);
				var localSkipBuffer = java.io.InputStream.skipBuffer;
				if (n <= 0) {
				    return 0;
				}while (remaining > 0) {
				    nr = this.read (localSkipBuffer, 0, Math.min (2048, remaining));
				    if (nr < 0) {
					break;
				    }remaining -= nr;
				}
				return n - remaining;
			    }, "~N");
	Clazz.defineMethod (c$, "available", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "close", 
			    function () {
			    });
	Clazz.defineMethod (c$, "mark", 
			    function (readlimit) {
			    }, "~N");
	Clazz.defineMethod (c$, "reset", 
			    function () {
				throw  new java.io.IOException ("mark/reset not supported");
			    });
	Clazz.defineMethod (c$, "markSupported", 
			    function () {
				return false;
			    });
	Clazz.defineStatics (c$,
			     "SKIP_BUFFER_SIZE", 2048,
			     "skipBuffer", null);
    });
    // 
    //// java\io\OutputStream.js 
    // 
    ﻿Clazz.load (["java.io.Closeable", "$.Flushable"], "java.io.OutputStream", ["java.lang.IndexOutOfBoundsException", "$.NullPointerException"], function () {
	c$ = Clazz.declareType (java.io, "OutputStream", null, [java.io.Closeable, java.io.Flushable]);
	Clazz.defineMethod (c$, "write", 
			    function (b, off, len) {
				if (b == null) {
				    throw  new NullPointerException ();
				} else if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0)) {
				    throw  new IndexOutOfBoundsException ();
				} else if (len == 0) {
				    return;
				}for (var i = 0; i < len; i++) {
				    this.writeByteAsInt (b[off + i]);
				}
			    }, "~A,~N,~N");
	Clazz.overrideMethod (c$, "flush", 
			      function () {
			      });
	Clazz.overrideMethod (c$, "close", 
			      function () {
			      });
    });
    // 
    //// java\io\FilterOutputStream.js 
    // 
    ﻿Clazz.load (["java.io.OutputStream"], "java.io.FilterOutputStream", ["java.lang.IndexOutOfBoundsException"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.out = null;
	    Clazz.instantialize (this, arguments);
	}, java.io, "FilterOutputStream", java.io.OutputStream);
	Clazz.makeConstructor (c$, 
			       function (out) {
				   Clazz.superConstructor (this, java.io.FilterOutputStream, []);
				   this.out = out;
			       }, "java.io.OutputStream");
	Clazz.defineMethod (c$, "writeByteAsInt", 
			    function (b) {
				this.out.writeByteAsInt (b);
			    }, "~N");
	Clazz.defineMethod (c$, "write", 
			    function (b, off, len) {
				if ((off | len | (b.length - (len + off)) | (off + len)) < 0) throw  new IndexOutOfBoundsException ();
				for (var i = 0; i < len; i++) {
				    this.writeByteAsInt (b[off + i]);
				}
			    }, "~A,~N,~N");
	Clazz.defineMethod (c$, "flush", 
			    function () {
				this.out.flush ();
			    });
	Clazz.defineMethod (c$, "close", 
			    function () {
				try {
				    this.flush ();
				} catch (ignored) {
				    if (Clazz.exceptionOf (ignored, java.io.IOException)) {
				    } else {
					throw ignored;
				    }
				}
				this.out.close ();
			    });
    });
    // 
    //// java\io\BufferedOutputStream.js 
    // 
    ﻿$_L(["java.io.FilterOutputStream"],"java.io.BufferedOutputStream",["java.lang.ArrayIndexOutOfBoundsException","$.IllegalArgumentException","$.NullPointerException","org.apache.harmony.luni.util.Msg"],function(){
	c$=$_C(function(){
	    this.buf=null;
	    this.count=0;
	    $_Z(this,arguments);
	},java.io,"BufferedOutputStream",java.io.FilterOutputStream);
	$_K(c$,
	    function(out){
		$_R(this,java.io.BufferedOutputStream,[out]);
		this.buf=$_A(8192,0);
	    },"java.io.OutputStream");
	$_K(c$,
	    function(out,size){
		$_R(this,java.io.BufferedOutputStream,[out]);
		if(size<=0){
		    throw new IllegalArgumentException(org.apache.harmony.luni.util.Msg.getString("K0058"));
		}this.buf=$_A(size,0);
	    },"java.io.OutputStream,~N");
	$_V(c$,"flush",
	    function(){
		if(this.count>0){
		    this.out.write(this.buf,0,this.count);
		}this.count=0;
		this.out.flush();
	    });
	$_M(c$,"write",
	    function(buffer,offset,length){
		if(buffer==null){
		    throw new NullPointerException(org.apache.harmony.luni.util.Msg.getString("K0047"));
		}if(offset<0||offset>buffer.length-length||length<0){
		    throw new ArrayIndexOutOfBoundsException(org.apache.harmony.luni.util.Msg.getString("K002f"));
		}if(this.count==0&&length>=this.buf.length){
		    this.out.write(buffer,offset,length);
		    return;
		}var available=this.buf.length-this.count;
		if(length<available){
		    available=length;
		}if(available>0){
		    System.arraycopy(buffer,offset,this.buf,this.count,available);
		    this.count+=available;
		}if(this.count==this.buf.length){
		    this.out.write(this.buf,0,this.buf.length);
		    this.count=0;
		    if(length>available){
			offset+=available;
			available=length-available;
			if(available>=this.buf.length){
			    this.out.write(buffer,offset,available);
			}else{
			    System.arraycopy(buffer,offset,this.buf,this.count,available);
			    this.count+=available;
			}}}},"~A,~N,~N");
	$_M(c$,"write",
	    function(oneByte){
		if(this.count==this.buf.length){
		    this.out.write(this.buf,0,this.count);
		    this.count=0;
		}this.buf[this.count++]=oneByte;
	    },"~N");
    });
    // 
    //// java\io\Reader.js 
    // 
    ﻿Clazz.load (["java.io.Closeable"], "java.io.Reader", ["java.io.IOException", "java.lang.IllegalArgumentException", "$.NullPointerException"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.lock = null;
	    this.skipBuffer = null;
	    Clazz.instantialize (this, arguments);
	}, java.io, "Reader", null, java.io.Closeable);
	Clazz.makeConstructor (c$, 
			       function (lock) {
				   if (lock == null) {
				       throw  new NullPointerException ();
				   }this.lock = lock;
			       }, "~O");
	Clazz.defineMethod (c$, "skip", 
			    function (n) {
				if (n < 0) throw  new IllegalArgumentException ("skip value is negative");
				var nn = Math.min (n, 8192);
				{
				    if ((this.skipBuffer == null) || (this.skipBuffer.length < nn)) this.skipBuffer =  Clazz.newCharArray (nn, '\0');
				    var r = n;
				    while (r > 0) {
					var nc = this.read (this.skipBuffer, 0, Math.min (r, nn));
					if (nc == -1) break;
					r -= nc;
				    }
				    return n - r;
				}}, "~N");
	Clazz.defineMethod (c$, "ready", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "markSupported", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "mark", 
			    function (readAheadLimit) {
				throw  new java.io.IOException ("mark() not supported");
			    }, "~N");
	Clazz.defineMethod (c$, "reset", 
			    function () {
				throw  new java.io.IOException ("reset() not supported");
			    });
	Clazz.defineStatics (c$,
			     "maxSkipBufferSize", 8192);
    });
    // 
    //// java\io\BufferedReader.js 
    // 
    ﻿Clazz.load (["java.io.Reader"], "java.io.BufferedReader", ["java.io.IOException", "java.lang.IllegalArgumentException", "$.IndexOutOfBoundsException", "org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$in = null;
	    this.cb = null;
	    this.nChars = 0;
	    this.nextChar = 0;
	    this.markedChar = -1;
	    this.readAheadLimit = 0;
	    this.skipLF = false;
	    this.markedSkipLF = false;
	    Clazz.instantialize (this, arguments);
	}, java.io, "BufferedReader", java.io.Reader);
	Clazz.defineMethod (c$, "setSize", 
			    ($fz = function (sz) {
				if (sz <= 0) throw  new IllegalArgumentException ("Buffer size <= 0");
				this.cb =  Clazz.newCharArray (sz, '\0');
				this.nextChar = this.nChars = 0;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.makeConstructor (c$, 
			       function ($in) {
				   Clazz.superConstructor (this, java.io.BufferedReader, [$in]);
				   this.$in = $in;
				   this.setSize (java.io.BufferedReader.defaultCharBufferSize);
			       }, "java.io.Reader");
	Clazz.defineMethod (c$, "ensureOpen", 
			    ($fz = function () {
				if (this.$in == null) throw  new java.io.IOException ("Stream closed");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "fill", 
			    ($fz = function () {
				var dst;
				if (this.markedChar <= -1) {
				    dst = 0;
				} else {
				    var delta = this.nextChar - this.markedChar;
				    if (delta >= this.readAheadLimit) {
					this.markedChar = -2;
					this.readAheadLimit = 0;
					dst = 0;
				    } else {
					if (this.readAheadLimit <= this.cb.length) {
					    System.arraycopy (this.cb, this.markedChar, this.cb, 0, delta);
					    this.markedChar = 0;
					    dst = delta;
					} else {
					    var ncb =  Clazz.newCharArray (this.readAheadLimit, '\0');
					    System.arraycopy (this.cb, this.markedChar, ncb, 0, delta);
					    this.cb = ncb;
					    this.markedChar = 0;
					    dst = delta;
					}this.nextChar = this.nChars = delta;
				    }}var n;
				do {
				    n = this.$in.read (this.cb, dst, this.cb.length - dst);
				} while (n == 0);
				if (n > 0) {
				    this.nChars = dst + n;
				    this.nextChar = dst;
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "read1", 
			    ($fz = function (cbuf, off, len) {
				if (this.nextChar >= this.nChars) {
				    if (len >= this.cb.length && this.markedChar <= -1 && !this.skipLF) {
					return this.$in.read (cbuf, off, len);
				    }this.fill ();
				}if (this.nextChar >= this.nChars) return -1;
				if (this.skipLF) {
				    this.skipLF = false;
				    if (this.cb[this.nextChar] == '\n') {
					this.nextChar++;
					if (this.nextChar >= this.nChars) this.fill ();
					if (this.nextChar >= this.nChars) return -1;
				    }}var n = Math.min (len, this.nChars - this.nextChar);
				System.arraycopy (this.cb, this.nextChar, cbuf, off, n);
				this.nextChar += n;
				return n;
			    }, $fz.isPrivate = true, $fz), "~A,~N,~N");
	Clazz.defineMethod (c$, "read", 
			    function (cbuf, off, len) {
				{
				    this.ensureOpen ();
				    if ((off < 0) || (off > cbuf.length) || (len < 0) || ((off + len) > cbuf.length) || ((off + len) < 0)) {
					throw  new IndexOutOfBoundsException ();
				    } else if (len == 0) {
					return 0;
				    }var n = this.read1 (cbuf, off, len);
				    if (n <= 0) return n;
				    while ((n < len) && this.$in.ready ()) {
					var n1 = this.read1 (cbuf, off + n, len - n);
					if (n1 <= 0) break;
					n += n1;
				    }
				    return n;
				}}, "~A,~N,~N");
	Clazz.defineMethod (c$, "readLine1", 
			    function (ignoreLF) {
				var s = null;
				var startChar;
				{
				    this.ensureOpen ();
				    var omitLF = ignoreLF || this.skipLF;
				    for (; ; ) {
					if (this.nextChar >= this.nChars) this.fill ();
					if (this.nextChar >= this.nChars) {
					    if (s != null && s.length () > 0) return s.toString ();
					    return null;
					}var eol = false;
					var c = String.fromCharCode (0);
					var i;
					if (omitLF && (this.cb[this.nextChar] == '\n')) this.nextChar++;
					this.skipLF = false;
					omitLF = false;
					charLoop : for (i = this.nextChar; i < this.nChars; i++) {
					    c = this.cb[i];
					    if ((c == '\n') || (c == '\r')) {
						eol = true;
						break charLoop;
					    }}
					startChar = this.nextChar;
					this.nextChar = i;
					if (eol) {
					    var str;
					    if (s == null) {
						str =  String.instantialize (this.cb, startChar, i - startChar);
					    } else {
						s.appendCB (this.cb, startChar, i - startChar);
						str = s.toString ();
					    }this.nextChar++;
					    if (c == '\r') {
						this.skipLF = true;
					    }return str;
					}if (s == null) s = org.jmol.util.StringXBuilder.newN (java.io.BufferedReader.defaultExpectedLineLength);
					s.appendCB (this.cb, startChar, i - startChar);
				    }
				}}, "~B");
	Clazz.defineMethod (c$, "readLine", 
			    function () {
				return this.readLine1 (false);
			    });
	Clazz.overrideMethod (c$, "skip", 
			      function (n) {
				  if (n < 0) {
				      throw  new IllegalArgumentException ("skip value is negative");
				  }{
				      this.ensureOpen ();
				      var r = n;
				      while (r > 0) {
					  if (this.nextChar >= this.nChars) this.fill ();
					  if (this.nextChar >= this.nChars) break;
					  if (this.skipLF) {
					      this.skipLF = false;
					      if (this.cb[this.nextChar] == '\n') {
						  this.nextChar++;
					      }}var d = this.nChars - this.nextChar;
					  if (r <= d) {
					      this.nextChar += r;
					      r = 0;
					      break;
					  }r -= d;
					  this.nextChar = this.nChars;
				      }
				      return n - r;
				  }}, "~N");
	Clazz.defineMethod (c$, "ready", 
			    function () {
				{
				    this.ensureOpen ();
				    if (this.skipLF) {
					if (this.nextChar >= this.nChars && this.$in.ready ()) {
					    this.fill ();
					}if (this.nextChar < this.nChars) {
					    if (this.cb[this.nextChar] == '\n') this.nextChar++;
					    this.skipLF = false;
					}}return (this.nextChar < this.nChars) || this.$in.ready ();
				}});
	Clazz.overrideMethod (c$, "markSupported", 
			      function () {
				  return true;
			      });
	Clazz.overrideMethod (c$, "mark", 
			      function (readAheadLimit) {
				  if (readAheadLimit < 0) {
				      throw  new IllegalArgumentException ("Read-ahead limit < 0");
				  }{
				      this.ensureOpen ();
				      this.readAheadLimit = readAheadLimit;
				      this.markedChar = this.nextChar;
				      this.markedSkipLF = this.skipLF;
				  }}, "~N");
	Clazz.overrideMethod (c$, "reset", 
			      function () {
				  {
				      this.ensureOpen ();
				      if (this.markedChar < 0) throw  new java.io.IOException ((this.markedChar == -2) ? "Mark invalid" : "Stream not marked");
				      this.nextChar = this.markedChar;
				      this.skipLF = this.markedSkipLF;
				  }});
	Clazz.defineMethod (c$, "close", 
			    function () {
				{
				    if (this.$in == null) return;
				    this.$in.close ();
				    this.$in = null;
				    this.cb = null;
				}});
	Clazz.defineStatics (c$,
			     "INVALIDATED", -2,
			     "UNMARKED", -1,
			     "defaultCharBufferSize", 8192,
			     "defaultExpectedLineLength", 80);
    });
    // 
    //// java\io\Writer.js 
    // 
    ﻿$_L(["java.io.Closeable","$.Flushable","java.lang.Appendable"],"java.io.Writer",["java.lang.NullPointerException","$.StringIndexOutOfBoundsException"],function(){
	c$=$_C(function(){
	    this.lock=null;
	    $_Z(this,arguments);
	},java.io,"Writer",null,[Appendable,java.io.Closeable,java.io.Flushable]);
	$_K(c$,
	    function(){
		this.lock=this;
	    });
	$_K(c$,
	    function(lock){
		if(lock!=null){
		    this.lock=lock;
		}else{
		    throw new NullPointerException();
		}},"~O");
	$_M(c$,"write",
	    function(buf){
		this.write(buf,0,buf.length);
	    },"~A");
	$_M(c$,"write",
	    function(oneChar){
		{
		    var oneCharArray=$_A(1,'\0');
		    oneCharArray[0]=String.fromCharCode(oneChar);
		    this.write(oneCharArray);
		}},"~N");
	$_M(c$,"write",
	    function(str){
		var buf=$_A(str.length,'\0');
		str.getChars(0,buf.length,buf,0);
		{
		    this.write(buf);
		}},"~S");
	$_M(c$,"write",
	    function(str,offset,count){
		if(count>=0){
		    var buf=$_A(count,'\0');
		    str.getChars(offset,offset+count,buf,0);
		    {
			this.write(buf);
		    }}else{
			throw new StringIndexOutOfBoundsException();
		    }},"~S,~N,~N");
	$_M(c$,"append",
	    function(c){
		this.write(c.charCodeAt(0));
		return this;
	    },"~N");
	$_M(c$,"append",
	    function(csq){
		if(null==csq){
		    this.write("null");
		}else{
		    this.write(csq.toString());
		}return this;
	    },"CharSequence");
	$_M(c$,"append",
	    function(csq,start,end){
		if(null==csq){
		    this.write("null".substring(start,end));
		}else{
		    this.write(csq.subSequence(start,end).toString());
		}return this;
	    },"CharSequence,~N,~N");
	$_S(c$,
	    "TOKEN_NULL","null");
    });
    // 
    //// java\io\BufferedWriter.js 
    // 
    ﻿$_L(["java.io.Writer"],"java.io.BufferedWriter",["java.io.IOException","java.lang.IllegalArgumentException","$.IndexOutOfBoundsException","$.StringIndexOutOfBoundsException","org.apache.harmony.luni.util.Msg"],function(){
	c$=$_C(function(){
	    this.out=null;
	    this.buf=null;
	    this.pos=0;
	    this.lineSeparator="\r\n";
	    $_Z(this,arguments);
	},java.io,"BufferedWriter",java.io.Writer);
	$_K(c$,
	    function(out){
		$_R(this,java.io.BufferedWriter,[out]);
		this.out=out;
		this.buf=$_A(8192,'\0');
	    },"java.io.Writer");
	$_K(c$,
	    function(out,size){
		$_R(this,java.io.BufferedWriter,[out]);
		if(size>0){
		    this.out=out;
		    this.buf=$_A(size,'\0');
		}else{
		    throw new IllegalArgumentException(org.apache.harmony.luni.util.Msg.getString("K0058"));
		}},"java.io.Writer,~N");
	$_M(c$,"close",
	    function(){
		{
		    if(this.isOpen()){
			this.flush();
			this.out.close();
			this.buf=null;
			this.out=null;
		    }}});
	$_M(c$,"flush",
	    function(){
		{
		    if(this.isOpen()){
			if(this.pos>0){
			    this.out.write(this.buf,0,this.pos);
			}this.pos=0;
			this.out.flush();
		    }else{
			throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K005d"));
		    }}});
	$_M(c$,"isOpen",
	    ($fz=function(){
		return this.out!=null;
	    },$fz.isPrivate=true,$fz));
	$_M(c$,"newLine",
	    function(){
		this.write("\r\n",0,"\r\n".length);
	    });
	$_M(c$,"write",
	    function(cbuf,offset,count){
		{
		    if(!this.isOpen()){
			throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K005d"));
		    }if(offset<0||offset>cbuf.length-count||count<0){
			throw new IndexOutOfBoundsException();
		    }if(this.pos==0&&count>=this.buf.length){
			this.out.write(cbuf,offset,count);
			return;
		    }var available=this.buf.length-this.pos;
		    if(count<available){
			available=count;
		    }if(available>0){
			System.arraycopy(cbuf,offset,this.buf,this.pos,available);
			this.pos+=available;
		    }if(this.pos==this.buf.length){
			this.out.write(this.buf,0,this.buf.length);
			this.pos=0;
			if(count>available){
			    offset+=available;
			    available=count-available;
			    if(available>=this.buf.length){
				this.out.write(cbuf,offset,available);
				return;
			    }System.arraycopy(cbuf,offset,this.buf,this.pos,available);
			    this.pos+=available;
			}}}},"~A,~N,~N");
	$_M(c$,"write",
	    function(oneChar){
		{
		    if(this.isOpen()){
			if(this.pos>=this.buf.length){
			    this.out.write(this.buf,0,this.buf.length);
			    this.pos=0;
			}this.buf[this.pos++]=String.fromCharCode(oneChar);
		    }else{
			throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K005d"));
		    }}},"~N");
	$_M(c$,"write",
	    function(str,offset,count){
		{
		    if(!this.isOpen()){
			throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K005d"));
		    }if(count<=0){
			return;
		    }if(offset>str.length-count||offset<0){
			throw new StringIndexOutOfBoundsException();
		    }if(this.pos==0&&count>=this.buf.length){
			var chars=$_A(count,'\0');
			str.getChars(offset,offset+count,chars,0);
			this.out.write(chars,0,count);
			return;
		    }var available=this.buf.length-this.pos;
		    if(count<available){
			available=count;
		    }if(available>0){
			str.getChars(offset,offset+available,this.buf,this.pos);
			this.pos+=available;
		    }if(this.pos==this.buf.length){
			this.out.write(this.buf,0,this.buf.length);
			this.pos=0;
			if(count>available){
			    offset+=available;
			    available=count-available;
			    if(available>=this.buf.length){
				var chars=$_A(count,'\0');
				str.getChars(offset,offset+available,chars,0);
				this.out.write(chars,0,available);
				return;
			    }str.getChars(offset,offset+available,this.buf,this.pos);
			    this.pos+=available;
			}}}},"~S,~N,~N");
    });
    // 
    //// java\io\StringReader.js 
    // 
    $_L(["java.io.Reader"],"java.io.StringReader",["java.io.IOException","java.lang.ArrayIndexOutOfBoundsException","$.IllegalArgumentException","org.apache.harmony.luni.util.Msg"],function(){
	c$=$_C(function(){
	    this.str=null;
	    this.markpos=-1;
	    this.pos=0;
	    this.count=0;
	    $_Z(this,arguments);
	},java.io,"StringReader",java.io.Reader);
	$_K(c$,
	    function(str){
		$_R(this,java.io.StringReader,[str]);
		this.str=str;
		this.count=str.length;
	    },"~S");
	$_V(c$,"close",
	    function(){
		{
		    if(this.isOpen()){
			this.str=null;
		    }}});
	$_M(c$,"isOpen",
	    ($fz=function(){
		return this.str!=null;
	    },$fz.isPrivate=true,$fz));
	$_V(c$,"mark",
	    function(readLimit){
		if(readLimit>=0){
		    {
			if(this.isOpen()){
			    this.markpos=this.pos;
			}else{
			    throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K0083"));
			}}}else{
			    throw new IllegalArgumentException();
			}},"~N");
	$_V(c$,"markSupported",
	    function(){
		return true;
	    });
	$_M(c$,"read",
	    function(){
		{
		    if(this.isOpen()){
			if(this.pos!=this.count){
			    return this.str.charAt(this.pos++);
			}return-1;
		    }throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K0083"));
		}});
	$_M(c$,"read",
	    function(buf,offset,len){
		if(0<=offset&&offset<=buf.length&&0<=len&&len<=buf.length-offset){
		    {
			if(this.isOpen()){
			    if(this.pos==this.count){
				return-1;
			    }var end=this.pos+len>this.count?this.count:this.pos+len;
			    this.str.getChars(this.pos,end,buf,offset);
			    var read=end-this.pos;
			    this.pos=end;
			    return read;
			}throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K0083"));
		    }}throw new ArrayIndexOutOfBoundsException();
	    },"~A,~N,~N");
	$_V(c$,"ready",
	    function(){
		{
		    if(this.isOpen()){
			return true;
		    }throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K0083"));
		}});
	$_V(c$,"reset",
	    function(){
		{
		    if(this.isOpen()){
			this.pos=this.markpos!=-1?this.markpos:0;
		    }else{
			throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K0083"));
		    }}});
	$_V(c$,"skip",
	    function(ns){
		{
		    if(this.isOpen()){
			if(ns<=0){
			    return 0;
			}var skipped=0;
			if(ns<this.count-this.pos){
			    this.pos=this.pos+ns;
			    skipped=ns;
			}else{
			    skipped=this.count-this.pos;
			    this.pos=this.count;
			}return skipped;
		    }throw new java.io.IOException(org.apache.harmony.luni.util.Msg.getString("K0083"));
		}},"~N");
    });
    // 
    //// java\lang\Thread.js 
    // 
    $_L(null,"java.lang.Thread",["java.lang.IllegalArgumentException","$.ThreadGroup","java.util.Date"],function(){
	c$=$_C(function(){
	    this.target=null;
	    this.group=null;
	    this.name=null;
	    this.priority=0;
	    $_Z(this,arguments);
	},java.lang,"Thread",null,Runnable);
	c$.currentThread=$_M(c$,"currentThread",
			     function(){
				 if(Thread.J2S_THREAD==null){
				     ($t$=Thread.J2S_THREAD=new Thread(),Thread.prototype.J2S_THREAD=Thread.J2S_THREAD,$t$);
				 }return Thread.J2S_THREAD;
			     });
	c$.sleep=$_M(c$,"sleep",
		     function(millis){
			 Clazz.alert("Thread.sleep is not implemented in Java2Script!");
		     },"~N");
	$_K(c$,
	    function(){
	    });
	$_K(c$,
	    function(target){
		this.init(null,target,"Thread-"+new java.util.Date().getTime()+Math.random(),0);
	    },"Runnable");
	$_K(c$,
	    function(group,target){
		this.init(group,target,"Thread-"+new java.util.Date().getTime()+Math.random(),0);
	    },"ThreadGroup,Runnable");
	$_K(c$,
	    function(name){
		this.init(null,null,name,0);
	    },"~S");
	$_K(c$,
	    function(group,name){
		this.init(group,null,name,0);
	    },"ThreadGroup,~S");
	$_K(c$,
	    function(target,name){
		this.init(null,target,name,0);
	    },"Runnable,~S");
	$_K(c$,
	    function(group,target,name){
		this.init(group,target,name,0);
	    },"ThreadGroup,Runnable,~S");
	$_K(c$,
	    function(group,target,name,stackSize){
		this.init(group,target,name,stackSize);
	    },"ThreadGroup,Runnable,~S,~N");
	$_M(c$,"init",
	    ($fz=function(g,target,name,stackSize){
		if(g==null){
		    g=new ThreadGroup();
		}this.group=g;
		this.target=target;
		this.name=name;
		this.priority=5;
	    },$fz.isPrivate=true,$fz),"ThreadGroup,Runnable,~S,~N");
	$_M(c$,"start",
	    function(){
		window.setTimeout((function(runnable){
		    return function(){
			runnable.run();
		    };
		})(this),0);
	    });
	$_M(c$,"run",
	    function(){
		if(this.target!=null){
		    this.target.run();
		}});
	$_M(c$,"setPriority",
	    function(newPriority){
		if(newPriority>10||newPriority<1){
		    throw new IllegalArgumentException();
		}this.priority=newPriority;
	    },"~N");
	$_M(c$,"getPriority",
	    function(){
		return this.priority;
	    });
	$_M(c$,"interrupt",
	    function(){
		System.out.println("thread " + this.name + " interrupt()");
	    });

	$_M(c$,"setName",
	    function(name){
		this.name=name;
	    },"~S");
	$_M(c$,"getName",
	    function(){
		return String.valueOf(this.name);
	    });
	$_M(c$,"getThreadGroup",
	    function(){
		return this.group;
	    });
	$_V(c$,"toString",
	    function(){
		var group=this.getThreadGroup();
		if(group!=null){
		    return"Thread["+this.getName()+","+this.getPriority()+","+group.getName()+"]";
		}else{
		    return"Thread["+this.getName()+","+this.getPriority()+","+""+"]";
		}});
	$_S(c$,
	    "MIN_PRIORITY",1,
	    "NORM_PRIORITY",5,
	    "MAX_PRIORITY",10,
	    "J2S_THREAD",null);
    });
    // 
    //// org\jmol\constant\EnumQuantumShell.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumQuantumShell", ["org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.tag = null;
	    this.tag2 = null;
	    this.id = 0;
	    this.idSpherical = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumQuantumShell", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (tag, tag2, id, idSpherical) {
				   this.tag = tag;
				   this.tag2 = tag2;
				   this.id = id;
				   this.idSpherical = idSpherical;
			       }, $fz.isPrivate = true, $fz), "~S,~S,~N,~N");
	c$.getNewDfCoefMap = Clazz.defineMethod (c$, "getNewDfCoefMap", 
						 function () {
						     return [ Clazz.newIntArray (1, 0),  Clazz.newIntArray (3, 0),  Clazz.newIntArray (4, 0),  Clazz.newIntArray (5, 0),  Clazz.newIntArray (6, 0),  Clazz.newIntArray (7, 0),  Clazz.newIntArray (10, 0)];
						 });
	c$.getQuantumShellTagID = Clazz.defineMethod (c$, "getQuantumShellTagID", 
						      function (tag) {
							  if (tag.equals ("L")) return org.jmol.constant.EnumQuantumShell.SP.id;
							  var item = org.jmol.constant.EnumQuantumShell.getQuantumShell (tag);
							  return (item == null ? -1 : item.id);
						      }, "~S");
	c$.getQuantumShell = Clazz.defineMethod (c$, "getQuantumShell", 
						 ($fz = function (tag) {
						     for (var item, $item = 0, $$item = org.jmol.constant.EnumQuantumShell.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.tag.equals (tag) || item.tag2.equals (tag)) return item;

						     return null;
						 }, $fz.isPrivate = true, $fz), "~S");
	c$.getQuantumShellTagIDSpherical = Clazz.defineMethod (c$, "getQuantumShellTagIDSpherical", 
							       function (tag) {
								   if (tag.equals ("L")) return org.jmol.constant.EnumQuantumShell.SP.idSpherical;
								   var item = org.jmol.constant.EnumQuantumShell.getQuantumShell (tag);
								   return (item == null ? -1 : item.idSpherical);
							       }, "~S");
	c$.getItem = Clazz.defineMethod (c$, "getItem", 
					 function (id) {
					     switch (id) {
					     case 0:
						 return org.jmol.constant.EnumQuantumShell.S;
					     case 1:
						 return org.jmol.constant.EnumQuantumShell.P;
					     case 2:
						 return org.jmol.constant.EnumQuantumShell.SP;
					     case 3:
						 return org.jmol.constant.EnumQuantumShell.D_SPHERICAL;
					     case 4:
						 return org.jmol.constant.EnumQuantumShell.D_CARTESIAN;
					     case 5:
						 return org.jmol.constant.EnumQuantumShell.F_SPHERICAL;
					     case 6:
						 return org.jmol.constant.EnumQuantumShell.F_CARTESIAN;
					     case 7:
						 return org.jmol.constant.EnumQuantumShell.G_SPHERICAL;
					     case 8:
						 return org.jmol.constant.EnumQuantumShell.G_CARTESIAN;
					     case 9:
						 return org.jmol.constant.EnumQuantumShell.H_SPHERICAL;
					     case 10:
						 return org.jmol.constant.EnumQuantumShell.H_CARTESIAN;
					     }
					     return null;
					 }, "~N");
	c$.getQuantumShellTag = Clazz.defineMethod (c$, "getQuantumShellTag", 
						    function (id) {
							for (var item, $item = 0, $$item = org.jmol.constant.EnumQuantumShell.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.id == id) return item.tag;

							return "" + id;
						    }, "~N");
	c$.getMOString = Clazz.defineMethod (c$, "getMOString", 
					     function (lc) {
						 var sb =  new org.jmol.util.StringXBuilder ();
						 if (lc.length == 2) return "" + Clazz.floatToInt (lc[0] < 0 ? -lc[1] : lc[1]);
						 sb.appendC ('[');
						 for (var i = 0; i < lc.length; i += 2) {
						     if (i > 0) sb.append (", ");
						     sb.appendF (lc[i]).append (" ").appendI (Clazz.floatToInt (lc[i + 1]));
						 }
						 sb.appendC (']');
						 return sb.toString ();
					     }, "~A");
	c$.SUPPORTED_BASIS_FUNCTIONS = "SPLDF";
	Clazz.defineEnumConstant (c$, "S", 0, ["S", "S", 0, 0]);
	Clazz.defineEnumConstant (c$, "P", 1, ["P", "X", 1, 1]);
	Clazz.defineEnumConstant (c$, "SP", 2, ["SP", "SP", 2, 2]);
	Clazz.defineEnumConstant (c$, "D_SPHERICAL", 3, ["5D", "5D", 3, 3]);
	Clazz.defineEnumConstant (c$, "D_CARTESIAN", 4, ["D", "XX", 4, 3]);
	Clazz.defineEnumConstant (c$, "F_SPHERICAL", 5, ["7F", "7F", 5, 5]);
	Clazz.defineEnumConstant (c$, "F_CARTESIAN", 6, ["F", "XXX", 6, 5]);
	Clazz.defineEnumConstant (c$, "G_SPHERICAL", 7, ["9G", "9G", 7, 7]);
	Clazz.defineEnumConstant (c$, "G_CARTESIAN", 8, ["G", "XXXX", 8, 7]);
	Clazz.defineEnumConstant (c$, "H_SPHERICAL", 9, ["10H", "10H", 9, 9]);
	Clazz.defineEnumConstant (c$, "H_CARTESIAN", 10, ["H", "XXXXX", 10, 9]);
    });
    // 
    //// org\jmol\api\JmolAdapter.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.load (["org.jmol.constant.EnumQuantumShell"], "org.jmol.api.JmolAdapter", ["java.util.Hashtable", "org.jmol.api.JmolViewer", "org.jmol.modelset.Group", "org.jmol.util.Elements", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.adapterName = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.api, "JmolAdapter");
	c$.getShellEnumeration = Clazz.defineMethod (c$, "getShellEnumeration", 
						     function (i) {
							 return org.jmol.constant.EnumQuantumShell.getItem (i);
						     }, "~N");
	c$.getNewDfCoefMap = Clazz.defineMethod (c$, "getNewDfCoefMap", 
						 function () {
						     return org.jmol.constant.EnumQuantumShell.getNewDfCoefMap ();
						 });
	c$.getElementSymbol = Clazz.defineMethod (c$, "getElementSymbol", 
						  function (elementNumber) {
						      return org.jmol.util.Elements.elementSymbolFromNumber (elementNumber);
						  }, "~N");
	c$.getElementNumber = Clazz.defineMethod (c$, "getElementNumber", 
						  function (elementSymbol) {
						      return org.jmol.util.Elements.elementNumberFromSymbol (elementSymbol, false);
						  }, "~S");
	c$.getNaturalIsotope = Clazz.defineMethod (c$, "getNaturalIsotope", 
						   function (elementNumber) {
						       return org.jmol.util.Elements.getNaturalIsotope (elementNumber);
						   }, "~N");
	c$.isHetero = Clazz.defineMethod (c$, "isHetero", 
					  function (group3) {
					      return org.jmol.viewer.JmolConstants.isHetero (group3);
					  }, "~S");
	c$.getQuantumShellTagID = Clazz.defineMethod (c$, "getQuantumShellTagID", 
						      function (tag) {
							  return org.jmol.constant.EnumQuantumShell.getQuantumShellTagID (tag);
						      }, "~S");
	c$.getQuantumShellTagIDSpherical = Clazz.defineMethod (c$, "getQuantumShellTagIDSpherical", 
							       function (tag) {
								   return org.jmol.constant.EnumQuantumShell.getQuantumShellTagIDSpherical (tag);
							       }, "~S");
	c$.lookupGroupID = Clazz.defineMethod (c$, "lookupGroupID", 
					       function (group3) {
						   return org.jmol.modelset.Group.lookupGroupID (group3);
					       }, "~S");
	c$.getBondingRadiusFloat = Clazz.defineMethod (c$, "getBondingRadiusFloat", 
						       function (atomicNumberWithIsotope, charge) {
							   return org.jmol.util.Elements.getBondingRadiusFloat (atomicNumberWithIsotope, charge);
						       }, "~N,~N");
	Clazz.makeConstructor (c$, 
			       function (adapterName) {
				   this.adapterName = adapterName;
			       }, "~S");
	Clazz.defineMethod (c$, "getAdapterName", 
			    function () {
				return this.adapterName;
			    });
	Clazz.defineMethod (c$, "getAtomSetCollectionFromReader", 
			    function (name, type, bufferedReader, htParams) {
				if (htParams == null) htParams =  new java.util.Hashtable ();
				if (!htParams.containsKey ("viewer")) htParams.put ("viewer", org.jmol.api.JmolViewer.allocateViewer (null, this));
				var a = this.getAtomSetCollectionReader (name, type, bufferedReader, htParams);
				if (Clazz.instanceOf (a, String)) return a;
				return this.getAtomSetCollection (a);
			    }, "~S,~S,java.io.BufferedReader,java.util.Map");
	Clazz.defineMethod (c$, "openBufferedReader", 
			    function (name, bufferedReader) {
				return this.getAtomSetCollectionFromReader (name, null, bufferedReader, null);
			    }, "~S,java.io.BufferedReader");
	Clazz.defineMethod (c$, "openBufferedReader", 
			    function (name, bufferedReader, htParams) {
				return this.getAtomSetCollectionFromReader (name, null, bufferedReader, htParams);
			    }, "~S,java.io.BufferedReader,java.util.Map");
	Clazz.defineMethod (c$, "openBufferedReader", 
			    function (name, type, bufferedReader) {
				return this.getAtomSetCollectionFromReader (name, type, bufferedReader, null);
			    }, "~S,~S,java.io.BufferedReader");
	Clazz.defineMethod (c$, "finish", 
			    function (atomSetCollection) {
			    }, "~O");
	c$.canonizeAlphaDigit = Clazz.defineMethod (c$, "canonizeAlphaDigit", 
						    function (ch) {
							if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) return ch;
							return '\0';
						    }, "~S");
	c$.canonizeChainID = Clazz.defineMethod (c$, "canonizeChainID", 
						 function (chainID) {
						     return org.jmol.api.JmolAdapter.canonizeAlphaDigit (chainID);
						 }, "~S");
	c$.canonizeInsertionCode = Clazz.defineMethod (c$, "canonizeInsertionCode", 
						       function (insertionCode) {
							   return org.jmol.api.JmolAdapter.canonizeAlphaDigit (insertionCode);
						       }, "~S");
	c$.canonizeAlternateLocationID = Clazz.defineMethod (c$, "canonizeAlternateLocationID", 
							     function (altLoc) {
								 return org.jmol.api.JmolAdapter.canonizeAlphaDigit (altLoc);
							     }, "~S");
	Clazz.defineStatics (c$,
			     "ORDER_COVALENT_SINGLE", 1,
			     "ORDER_COVALENT_DOUBLE", 2,
			     "ORDER_COVALENT_TRIPLE", 3,
			     "ORDER_AROMATIC", 515,
			     "ORDER_AROMATIC_SINGLE", 513,
			     "ORDER_AROMATIC_DOUBLE", 514,
			     "ORDER_HBOND", 2048,
			     "ORDER_STEREO_NEAR", 1025,
			     "ORDER_STEREO_FAR", 1041,
			     "ORDER_PARTIAL01", 33,
			     "ORDER_PARTIAL12", 66,
			     "ORDER_PARTIAL23", 97,
			     "ORDER_PARTIAL32", 100,
			     "ORDER_UNSPECIFIED", 17);
	c$.SHELL_S = c$.prototype.SHELL_S = org.jmol.constant.EnumQuantumShell.S.id;
	c$.SHELL_P = c$.prototype.SHELL_P = org.jmol.constant.EnumQuantumShell.P.id;
	c$.SHELL_SP = c$.prototype.SHELL_SP = org.jmol.constant.EnumQuantumShell.SP.id;
	c$.SHELL_L = c$.prototype.SHELL_L = org.jmol.constant.EnumQuantumShell.SP.id;
	c$.SHELL_D_SPHERICAL = c$.prototype.SHELL_D_SPHERICAL = org.jmol.constant.EnumQuantumShell.D_SPHERICAL.id;
	c$.SHELL_D_CARTESIAN = c$.prototype.SHELL_D_CARTESIAN = org.jmol.constant.EnumQuantumShell.D_CARTESIAN.id;
	c$.SHELL_F_SPHERICAL = c$.prototype.SHELL_F_SPHERICAL = org.jmol.constant.EnumQuantumShell.F_SPHERICAL.id;
	c$.SHELL_F_CARTESIAN = c$.prototype.SHELL_F_CARTESIAN = org.jmol.constant.EnumQuantumShell.F_CARTESIAN.id;
	c$.SUPPORTED_BASIS_FUNCTIONS = c$.prototype.SUPPORTED_BASIS_FUNCTIONS = "SPLDF";
	c$.NOTE_SCRIPT_FILE = c$.prototype.NOTE_SCRIPT_FILE = "NOTE: file recognized as a script file: ";
    });
    // 
    //// org\jmol\adapter\smarter\SmarterJmolAdapter.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.api.JmolAdapter"], "org.jmol.adapter.smarter.SmarterJmolAdapter", ["org.jmol.adapter.smarter.AtomIterator", "$.AtomSetCollection", "$.BondIterator", "$.Resolver", "$.StructureIterator", "org.jmol.util.Logger"], function () {
	c$ = Clazz.declareType (org.jmol.adapter.smarter, "SmarterJmolAdapter", org.jmol.api.JmolAdapter);
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.adapter.smarter.SmarterJmolAdapter, ["SmarterJmolAdapter"]);
			       });
	Clazz.overrideMethod (c$, "getFileTypeName", 
			      function (atomSetCollectionOrReader) {
				  if (Clazz.instanceOf (atomSetCollectionOrReader, org.jmol.adapter.smarter.AtomSetCollection)) return (atomSetCollectionOrReader).getFileTypeName ();
				  if (Clazz.instanceOf (atomSetCollectionOrReader, java.io.BufferedReader)) return org.jmol.adapter.smarter.Resolver.getFileType (atomSetCollectionOrReader);
				  return null;
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomSetCollectionReader", 
			      function (name, type, bufferedReader, htParams) {
				  return org.jmol.adapter.smarter.SmarterJmolAdapter.staticGetAtomSetCollectionReader (name, type, bufferedReader, htParams);
			      }, "~S,~S,java.io.BufferedReader,java.util.Map");
	c$.staticGetAtomSetCollectionReader = Clazz.defineMethod (c$, "staticGetAtomSetCollectionReader", 
								  function (name, type, bufferedReader, htParams) {
								      try {
									  var ret = org.jmol.adapter.smarter.Resolver.getAtomCollectionReader (name, type, bufferedReader, htParams, -1);
									  if (Clazz.instanceOf (ret, String)) {
									      try {
										  bufferedReader.close ();
									      } catch (e) {
										  if (Clazz.exceptionOf (e, Exception)) {
										  } else {
										      throw e;
										  }
									      }
									  } else {
									      (ret).setup (name, htParams, bufferedReader);
									  }return ret;
								      } catch (e) {
									  try {
									      bufferedReader.close ();
									  } catch (ex) {
									      if (Clazz.exceptionOf (ex, Exception)) {
									      } else {
										  throw ex;
									      }
									  }
									  bufferedReader = null;
									  org.jmol.util.Logger.error ("" + e);
									  return "" + e;
								      }
								  }, "~S,~S,java.io.BufferedReader,java.util.Map");
	Clazz.defineMethod (c$, "getAtomSetCollectionFromReader", 
			    function (fname, reader, htParams) {
				var ret = org.jmol.adapter.smarter.Resolver.getAtomCollectionReader (fname, null, reader, htParams, -1);
				if (Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollectionReader)) {
				    (ret).setup (fname, htParams, reader);
				    return (ret).readData ();
				}return "" + ret;
			    }, "~S,java.io.BufferedReader,java.util.Map");
	Clazz.overrideMethod (c$, "getAtomSetCollection", 
			      function (atomSetCollectionReader) {
				  return org.jmol.adapter.smarter.SmarterJmolAdapter.staticGetAtomSetCollection (atomSetCollectionReader);
			      }, "~O");
	c$.staticGetAtomSetCollection = Clazz.defineMethod (c$, "staticGetAtomSetCollection", 
							    function (a) {
								var br = null;
								try {
								    br = a.reader;
								    var ret = a.readData ();
								    if (!(Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollection))) return ret;
								    var atomSetCollection = ret;
								    if (atomSetCollection.errorMessage != null) return atomSetCollection.errorMessage;
								    return atomSetCollection;
								} catch (e) {
								    try {
									System.out.println (e.getMessage ());
								    } catch (ee) {
									if (Clazz.exceptionOf (ee, Exception)) {
									    org.jmol.util.Logger.error (e.toString ());
									} else {
									    throw ee;
									}
								    }
								    try {
									br.close ();
								    } catch (ex) {
									if (Clazz.exceptionOf (ex, Exception)) {
									} else {
									    throw ex;
									}
								    }
								    br = null;
								    org.jmol.util.Logger.error ("" + e);
								    return "" + e;
								}
							    }, "org.jmol.adapter.smarter.AtomSetCollectionReader");
	Clazz.overrideMethod (c$, "getAtomSetCollectionReaders", 
			      function (fileReader, names, types, htParams, getReadersOnly) {
				  var size = names.length;
				  var readers = (getReadersOnly ?  new Array (size) : null);
				  var atomsets = (getReadersOnly ? null :  new Array (size));
				  for (var i = 0; i < size; i++) {
				      try {
					  var reader = fileReader.getBufferedReaderOrBinaryDocument (i, false);
					  if (!(Clazz.instanceOf (reader, java.io.BufferedReader))) return reader;
					  var ret = org.jmol.adapter.smarter.Resolver.getAtomCollectionReader (names[i], (types == null ? null : types[i]), reader, htParams, i);
					  if (!(Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollectionReader))) return ret;
					  var r = ret;
					  if (r.isBinary) {
					      r.setup (names[i], htParams, fileReader.getBufferedReaderOrBinaryDocument (i, true));
					  } else {
					      r.setup (names[i], htParams, reader);
					  }if (getReadersOnly) {
					      readers[i] = r;
					  } else {
					      ret = r.readData ();
					      if (!(Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollection))) return ret;
					      atomsets[i] = ret;
					      if (atomsets[i].errorMessage != null) return atomsets[i].errorMessage;
					  }} catch (e) {
					      org.jmol.util.Logger.error ("" + e);
					      return "" + e;
					  }
				  }
				  if (getReadersOnly) return readers;
				  return this.getAtomSetCollectionFromSet (readers, atomsets, htParams);
			      }, "org.jmol.api.JmolFilesReaderInterface,~A,~A,java.util.Map,~B");
	Clazz.overrideMethod (c$, "getAtomSetCollectionFromSet", 
			      function (readerSet, atomsets, htParams) {
				  var readers = readerSet;
				  var asc = (atomsets == null ?  new Array (readers.length) : atomsets);
				  if (atomsets == null) {
				      for (var i = 0; i < readers.length; i++) {
					  try {
					      var ret = readers[i].readData ();
					      if (!(Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollection))) return ret;
					      asc[i] = ret;
					      if (asc[i].errorMessage != null) return asc[i].errorMessage;
					  } catch (e) {
					      org.jmol.util.Logger.error ("" + e);
					      return "" + e;
					  }
				      }
				  }var result;
				  if (htParams.containsKey ("trajectorySteps")) {
				      result = asc[0];
				      try {
					  result.finalizeTrajectoryAs (htParams.get ("trajectorySteps"), htParams.get ("vibrationSteps"));
				      } catch (e) {
					  if (Clazz.exceptionOf (e, Exception)) {
					      if (result.errorMessage == null) result.errorMessage = "" + e;
					  } else {
					      throw e;
					  }
				      }
				  } else {
				      result =  new org.jmol.adapter.smarter.AtomSetCollection ("Array", null, asc, null);
				  }return (result.errorMessage == null ? result : result.errorMessage);
			      }, "~O,~O,java.util.Map");
	Clazz.overrideMethod (c$, "getAtomSetCollectionFromDOM", 
			      function (DOMNode, htParams) {
				  try {
				      var ret = org.jmol.adapter.smarter.Resolver.DOMResolve (DOMNode, htParams);
				      if (!(Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollectionReader))) return ret;
				      var a = ret;
				      a.setup ("DOM node", htParams, null);
				      ret = a.readDataObject (DOMNode);
				      if (!(Clazz.instanceOf (ret, org.jmol.adapter.smarter.AtomSetCollection))) return ret;
				      var asc = ret;
				      if (asc.errorMessage != null) return asc.errorMessage;
				      return asc;
				  } catch (e) {
				      org.jmol.util.Logger.error ("" + e);
				      return "" + e;
				  }
			      }, "~O,java.util.Map");
	Clazz.overrideMethod (c$, "finish", 
			      function (atomSetCollection) {
				  (atomSetCollection).finish ();
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomSetCollectionName", 
			      function (atomSetCollection) {
				  return (atomSetCollection).getCollectionName ();
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomSetCollectionAuxiliaryInfo", 
			      function (atomSetCollection) {
				  return (atomSetCollection).getAtomSetCollectionAuxiliaryInfoMap ();
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomSetCount", 
			      function (atomSetCollection) {
				  return (atomSetCollection).getAtomSetCount ();
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomSetNumber", 
			      function (atomSetCollection, atomSetIndex) {
				  return (atomSetCollection).getAtomSetNumber (atomSetIndex);
			      }, "~O,~N");
	Clazz.overrideMethod (c$, "getAtomSetName", 
			      function (atomSetCollection, atomSetIndex) {
				  return (atomSetCollection).getAtomSetName (atomSetIndex);
			      }, "~O,~N");
	Clazz.overrideMethod (c$, "getAtomSetAuxiliaryInfo", 
			      function (atomSetCollection, atomSetIndex) {
				  return (atomSetCollection).getAtomSetAuxiliaryInfo (atomSetIndex);
			      }, "~O,~N");
	Clazz.overrideMethod (c$, "getHydrogenAtomCount", 
			      function (atomSetCollection) {
				  return (atomSetCollection).getHydrogenAtomCount ();
			      }, "~O");
	Clazz.overrideMethod (c$, "getBondList", 
			      function (atomSetCollection) {
				  return (atomSetCollection).getBondList ();
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomCount", 
			      function (atomSetCollection) {
				  var a = atomSetCollection;
				  return (a.bsAtoms == null ? a.getAtomCount () : a.bsAtoms.cardinality ());
			      }, "~O");
	Clazz.overrideMethod (c$, "coordinatesAreFractional", 
			      function (atomSetCollection) {
				  return (atomSetCollection).coordinatesAreFractional;
			      }, "~O");
	Clazz.overrideMethod (c$, "getNotionalUnitcell", 
			      function (atomSetCollection) {
				  return (atomSetCollection).notionalUnitCell;
			      }, "~O");
	Clazz.overrideMethod (c$, "getPdbScaleMatrix", 
			      function (atomSetCollection) {
				  var a = (atomSetCollection).notionalUnitCell;
				  if (a.length < 22) return null;
				  var b =  Clazz.newFloatArray (16, 0);
				  for (var i = 0; i < 16; i++) b[i] = a[6 + i];

				  return b;
			      }, "~O");
	Clazz.overrideMethod (c$, "getPdbScaleTranslate", 
			      function (atomSetCollection) {
				  var a = (atomSetCollection).notionalUnitCell;
				  if (a.length < 22) return null;
				  var b =  Clazz.newFloatArray (3, 0);
				  b[0] = a[9];
				  b[1] = a[13];
				  b[2] = a[17];
				  return b;
			      }, "~O");
	Clazz.overrideMethod (c$, "getAtomIterator", 
			      function (atomSetCollection) {
				  return  new org.jmol.adapter.smarter.AtomIterator (atomSetCollection);
			      }, "~O");
	Clazz.overrideMethod (c$, "getBondIterator", 
			      function (atomSetCollection) {
				  return  new org.jmol.adapter.smarter.BondIterator (atomSetCollection);
			      }, "~O");
	Clazz.overrideMethod (c$, "getStructureIterator", 
			      function (atomSetCollection) {
				  return (atomSetCollection).getStructureCount () == 0 ? null :  new org.jmol.adapter.smarter.StructureIterator (atomSetCollection);
			      }, "~O");
	Clazz.defineStatics (c$,
			     "PATH_KEY", ".PATH");
	c$.PATH_SEPARATOR = c$.prototype.PATH_SEPARATOR = System.getProperty ("path.separator", "/");
    });
    // 
    //// org\jmol\api\Interface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.load (null, "org.jmol.api.Interface", ["org.jmol.util.Logger"], function () {
	c$ = Clazz.declareType (org.jmol.api, "Interface");
	c$.getOptionInterface = Clazz.defineMethod (c$, "getOptionInterface", 
						    function (name) {
							return org.jmol.api.Interface.getInterface ("org.jmol." + name);
						    }, "~S");
	c$.getApplicationInterface = Clazz.defineMethod (c$, "getApplicationInterface", 
							 function (name) {
							     return org.jmol.api.Interface.getInterface ("org.openscience.jmol.app." + name);
							 }, "~S");
	c$.getInterface = Clazz.defineMethod (c$, "getInterface", 
					      function (name) {
						  try {
						      var x = Class.forName (name);
						      return (x == null ? null : x.newInstance ());
						  } catch (e) {
						      if (Clazz.exceptionOf (e, Exception)) {
							  org.jmol.util.Logger.error ("Interface.java Error creating instance for " + name + ": \n" + e.getMessage ());
							  return null;
						      } else {
							  throw e;
						      }
						  }
					      }, "~S");
    });
    // 
    //// java\lang\ThreadGroup.js 
    // 
    ﻿$_L(null,"java.lang.ThreadGroup",["java.lang.NullPointerException","$.Thread"],function(){
	c$=$_C(function(){
	    this.parent=null;
	    this.name=null;
	    this.maxPriority=0;
	    $_Z(this,arguments);
	},java.lang,"ThreadGroup");
	$_K(c$,
	    function(){
		this.name="system";
		this.maxPriority=10;
	    });
	$_K(c$,
	    function(name){
		this.construct(Thread.currentThread().getThreadGroup(),name);
	    },"~S");
	$_K(c$,
	    function(parent,name){
		if(parent==null){
		    throw new NullPointerException();
		}this.name=name;
		this.parent=parent;
		this.maxPriority=10;
	    },"ThreadGroup,~S");
	$_M(c$,"getName",
	    function(){
		return this.name;
	    });
	$_M(c$,"getParent",
	    function(){
		return this.parent;
	    });
	$_M(c$,"getMaxPriority",
	    function(){
		return this.maxPriority;
	    });
    });
    // 
    //// org\jmol\constant\EnumAxesMode.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumAxesMode", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.code = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumAxesMode", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (code) {
				   this.code = code;
			       }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getCode", 
			    function () {
				return this.code;
			    });
	c$.getAxesMode = Clazz.defineMethod (c$, "getAxesMode", 
					     function (code) {
						 for (var mode, $mode = 0, $$mode = org.jmol.constant.EnumAxesMode.values (); $mode < $$mode.length && ((mode = $$mode[$mode]) || true); $mode++) {
						     if (mode.getCode () == code) {
							 return mode;
						     }}
						 return null;
					     }, "~N");
	Clazz.defineEnumConstant (c$, "BOUNDBOX", 0, [0]);
	Clazz.defineEnumConstant (c$, "MOLECULAR", 1, [1]);
	Clazz.defineEnumConstant (c$, "UNITCELL", 2, [2]);
    });
    // 
    //// org\jmol\constant\EnumFileStatus.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumFileStatus", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.code = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumFileStatus", Enum);
	Clazz.defineMethod (c$, "getCode", 
			    function () {
				return this.code;
			    });
	Clazz.makeConstructor (c$, 
			       ($fz = function (code) {
				   this.code = code;
			       }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineEnumConstant (c$, "DELETED", 0, [5]);
	Clazz.defineEnumConstant (c$, "CREATED", 1, [3]);
	Clazz.defineEnumConstant (c$, "CREATING_MODELSET", 2, [2]);
	Clazz.defineEnumConstant (c$, "ZAPPED", 3, [0]);
	Clazz.defineEnumConstant (c$, "NOT_LOADED", 4, [-1]);
    });
    // 
    //// org\jmol\api\JmolAdapterAtomIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    c$ = Clazz.declareType (org.jmol.api, "JmolAdapterAtomIterator");
    Clazz.defineMethod (c$, "getAtomSetIndex", 
			function () {
			    return 0;
			});
    Clazz.defineMethod (c$, "getAtomSymmetry", 
			function () {
			    return null;
			});
    Clazz.defineMethod (c$, "getAtomSite", 
			function () {
			    return -2147483648;
			});
    Clazz.defineMethod (c$, "getElementNumber", 
			function () {
			    return -1;
			});
    Clazz.defineMethod (c$, "getAtomName", 
			function () {
			    return null;
			});
    Clazz.defineMethod (c$, "getFormalCharge", 
			function () {
			    return 0;
			});
    Clazz.defineMethod (c$, "getPartialCharge", 
			function () {
			    return NaN;
			});
    Clazz.defineMethod (c$, "getEllipsoid", 
			function () {
			    return null;
			});
    Clazz.defineMethod (c$, "getRadius", 
			function () {
			    return NaN;
			});
    Clazz.defineMethod (c$, "getVectorX", 
			function () {
			    return NaN;
			});
    Clazz.defineMethod (c$, "getVectorY", 
			function () {
			    return NaN;
			});
    Clazz.defineMethod (c$, "getVectorZ", 
			function () {
			    return NaN;
			});
    Clazz.defineMethod (c$, "getBfactor", 
			function () {
			    return NaN;
			});
    Clazz.defineMethod (c$, "getOccupancy", 
			function () {
			    return 100;
			});
    Clazz.defineMethod (c$, "getIsHetero", 
			function () {
			    return false;
			});
    Clazz.defineMethod (c$, "getAtomSerial", 
			function () {
			    return -2147483648;
			});
    Clazz.defineMethod (c$, "getChainID", 
			function () {
			    return '\0';
			});
    Clazz.defineMethod (c$, "getAlternateLocationID", 
			function () {
			    return '\0';
			});
    Clazz.defineMethod (c$, "getGroup3", 
			function () {
			    return null;
			});
    Clazz.defineMethod (c$, "getSequenceNumber", 
			function () {
			    return -2147483648;
			});
    Clazz.defineMethod (c$, "getInsertionCode", 
			function () {
			    return '\0';
			});
    // 
    //// org\jmol\adapter\smarter\AtomIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.api.JmolAdapterAtomIterator"], "org.jmol.adapter.smarter.AtomIterator", ["java.lang.Float", "org.jmol.api.JmolAdapter"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.iatom = 0;
	    this.atom = null;
	    this.atomCount = 0;
	    this.atoms = null;
	    this.bsAtoms = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "AtomIterator", org.jmol.api.JmolAdapterAtomIterator);
	Clazz.makeConstructor (c$, 
			       function (atomSetCollection) {
				   Clazz.superConstructor (this, org.jmol.adapter.smarter.AtomIterator, []);
				   this.atomCount = atomSetCollection.getAtomCount ();
				   this.atoms = atomSetCollection.getAtoms ();
				   this.bsAtoms = atomSetCollection.bsAtoms;
				   this.iatom = 0;
			       }, "org.jmol.adapter.smarter.AtomSetCollection");
	Clazz.overrideMethod (c$, "hasNext", 
			      function () {
				  if (this.iatom == this.atomCount) return false;
				  while ((this.atom = this.atoms[this.iatom++]) == null || (this.bsAtoms != null && !this.bsAtoms.get (this.atom.atomIndex))) if (this.iatom == this.atomCount) return false;

				  this.atoms[this.iatom - 1] = null;
				  return true;
			      });
	Clazz.overrideMethod (c$, "getAtomSetIndex", 
			      function () {
				  return this.atom.atomSetIndex;
			      });
	Clazz.overrideMethod (c$, "getAtomSymmetry", 
			      function () {
				  return this.atom.bsSymmetry;
			      });
	Clazz.overrideMethod (c$, "getAtomSite", 
			      function () {
				  return this.atom.atomSite + 1;
			      });
	Clazz.overrideMethod (c$, "getUniqueID", 
			      function () {
				  return Integer.$valueOf (this.atom.atomIndex);
			      });
	Clazz.overrideMethod (c$, "getElementNumber", 
			      function () {
				  return (this.atom.elementNumber > 0 ? this.atom.elementNumber : org.jmol.api.JmolAdapter.getElementNumber (this.atom.getElementSymbol ()));
			      });
	Clazz.overrideMethod (c$, "getAtomName", 
			      function () {
				  return this.atom.atomName;
			      });
	Clazz.overrideMethod (c$, "getFormalCharge", 
			      function () {
				  return this.atom.formalCharge;
			      });
	Clazz.overrideMethod (c$, "getPartialCharge", 
			      function () {
				  return this.atom.partialCharge;
			      });
	Clazz.overrideMethod (c$, "getEllipsoid", 
			      function () {
				  return this.atom.ellipsoid;
			      });
	Clazz.overrideMethod (c$, "getRadius", 
			      function () {
				  return this.atom.radius;
			      });
	Clazz.overrideMethod (c$, "getX", 
			      function () {
				  return this.atom.x;
			      });
	Clazz.overrideMethod (c$, "getY", 
			      function () {
				  return this.atom.y;
			      });
	Clazz.overrideMethod (c$, "getZ", 
			      function () {
				  return this.atom.z;
			      });
	Clazz.overrideMethod (c$, "getVectorX", 
			      function () {
				  return this.atom.vectorX;
			      });
	Clazz.overrideMethod (c$, "getVectorY", 
			      function () {
				  return this.atom.vectorY;
			      });
	Clazz.overrideMethod (c$, "getVectorZ", 
			      function () {
				  return this.atom.vectorZ;
			      });
	Clazz.overrideMethod (c$, "getBfactor", 
			      function () {
				  return Float.isNaN (this.atom.bfactor) && this.atom.anisoBorU != null ? this.atom.anisoBorU[7] * 100 : this.atom.bfactor;
			      });
	Clazz.overrideMethod (c$, "getOccupancy", 
			      function () {
				  return this.atom.occupancy;
			      });
	Clazz.overrideMethod (c$, "getIsHetero", 
			      function () {
				  return this.atom.isHetero;
			      });
	Clazz.overrideMethod (c$, "getAtomSerial", 
			      function () {
				  return this.atom.atomSerial;
			      });
	Clazz.overrideMethod (c$, "getChainID", 
			      function () {
				  return org.jmol.api.JmolAdapter.canonizeChainID (this.atom.chainID);
			      });
	Clazz.overrideMethod (c$, "getAlternateLocationID", 
			      function () {
				  return org.jmol.api.JmolAdapter.canonizeAlternateLocationID (this.atom.alternateLocationID);
			      });
	Clazz.overrideMethod (c$, "getGroup3", 
			      function () {
				  return this.atom.group3;
			      });
	Clazz.overrideMethod (c$, "getSequenceNumber", 
			      function () {
				  return this.atom.sequenceNumber;
			      });
	Clazz.overrideMethod (c$, "getInsertionCode", 
			      function () {
				  return org.jmol.api.JmolAdapter.canonizeInsertionCode (this.atom.insertionCode);
			      });
	Clazz.overrideMethod (c$, "getXYZ", 
			      function () {
				  return this.atom;
			      });
    });
    // 
    //// org\jmol\adapter\smarter\AtomSetCollection.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["java.util.Hashtable", "org.jmol.util.Point3f"], "org.jmol.adapter.smarter.AtomSetCollection", ["java.lang.Boolean", "$.Float", "java.util.ArrayList", "$.Collections", "$.Properties", "org.jmol.adapter.smarter.Atom", "$.Bond", "$.SmarterJmolAdapter", "org.jmol.api.Interface", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Escape", "$.Logger", "$.Matrix4f", "$.Parser", "$.Point3i", "$.Quadric", "$.StringXBuilder", "$.TextFormat", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.fileTypeName = null;
	    this.collectionName = null;
	    this.atomSetCollectionAuxiliaryInfo = null;
	    this.bsAtoms = null;
	    this.atomCount = 0;
	    this.atoms = null;
	    this.bondCount = 0;
	    this.bonds = null;
	    this.structureCount = 0;
	    this.structures = null;
	    this.atomSetCount = 0;
	    this.currentAtomSetIndex = -1;
	    this.atomSetNumbers = null;
	    this.atomSetAtomIndexes = null;
	    this.atomSetAtomCounts = null;
	    this.atomSetBondCounts = null;
	    this.atomSetAuxiliaryInfo = null;
	    this.latticeCells = null;
	    this.errorMessage = null;
	    this.coordinatesAreFractional = false;
	    this.isTrajectory = false;
	    this.trajectoryStepCount = 0;
	    this.trajectorySteps = null;
	    this.vibrationSteps = null;
	    this.trajectoryNames = null;
	    this.doFixPeriodic = false;
	    this.notionalUnitCell = null;
	    this.allowMultiple = false;
	    this.vConnect = null;
	    this.connectNextAtomIndex = 0;
	    this.connectNextAtomSet = 0;
	    this.connectLast = null;
	    this.symmetryRange = 0;
	    this.doCentroidUnitCell = false;
	    this.centroidPacked = false;
	    this.ptSupercell = null;
	    this.fmatSupercell = null;
	    this.symmetry = null;
	    this.haveUnitCell = false;
	    this.doNormalize = true;
	    this.doPackUnitCell = false;
	    this.rminx = 0;
	    this.rminy = 0;
	    this.rminz = 0;
	    this.rmaxx = 0;
	    this.rmaxy = 0;
	    this.rmaxz = 0;
	    this.ptOffset = null;
	    this.unitCellOffset = null;
	    this.minXYZ = null;
	    this.maxXYZ = null;
	    this.minXYZ0 = null;
	    this.maxXYZ0 = null;
	    this.haveAnisou = false;
	    this.dtype = 3;
	    this.unitCellTranslations = null;
	    this.baseSymmetryAtomCount = 0;
	    this.cartesians = null;
	    this.bondCount0 = 0;
	    this.bondIndex0 = 0;
	    this.applySymmetryToBonds = false;
	    this.checkSpecial = true;
	    this.ptTemp = null;
	    this.ptTemp1 = null;
	    this.ptTemp2 = null;
	    this.atomSymbolicMap = null;
	    this.haveMappedSerials = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "AtomSetCollection");
	Clazz.prepareFields (c$, function () {
	    this.atomSetCollectionAuxiliaryInfo =  new java.util.Hashtable ();
	    this.atoms =  new Array (256);
	    this.bonds =  new Array (256);
	    this.structures =  new Array (16);
	    this.atomSetNumbers =  Clazz.newIntArray (16, 0);
	    this.atomSetAtomIndexes =  Clazz.newIntArray (16, 0);
	    this.atomSetAtomCounts =  Clazz.newIntArray (16, 0);
	    this.atomSetBondCounts =  Clazz.newIntArray (16, 0);
	    this.atomSetAuxiliaryInfo =  new Array (16);
	    this.notionalUnitCell =  Clazz.newFloatArray (6, 0);
	    this.ptOffset =  new org.jmol.util.Point3f ();
	    this.ptTemp =  new org.jmol.util.Point3f ();
	    this.ptTemp1 =  new org.jmol.util.Point3f ();
	    this.ptTemp2 =  new org.jmol.util.Point3f ();
	    this.atomSymbolicMap =  new java.util.Hashtable ();
	});
	Clazz.defineMethod (c$, "getFileTypeName", 
			    function () {
				return this.fileTypeName;
			    });
	Clazz.defineMethod (c$, "getCollectionName", 
			    function () {
				return this.collectionName;
			    });
	Clazz.defineMethod (c$, "setCollectionName", 
			    function (collectionName) {
				if (collectionName != null) {
				    collectionName = collectionName.trim ();
				    if (collectionName.length == 0) return;
				    this.collectionName = collectionName;
				}}, "~S");
	Clazz.defineMethod (c$, "getAtomSetCollectionAuxiliaryInfoMap", 
			    function () {
				return this.atomSetCollectionAuxiliaryInfo;
			    });
	Clazz.defineMethod (c$, "clearGlobalBoolean", 
			    function (globalIndex) {
				this.atomSetCollectionAuxiliaryInfo.remove (org.jmol.adapter.smarter.AtomSetCollection.globalBooleans[globalIndex]);
			    }, "~N");
	Clazz.defineMethod (c$, "setGlobalBoolean", 
			    function (globalIndex) {
				this.setAtomSetCollectionAuxiliaryInfo (org.jmol.adapter.smarter.AtomSetCollection.globalBooleans[globalIndex], Boolean.TRUE);
			    }, "~N");
	Clazz.defineMethod (c$, "getGlobalBoolean", 
			    function (globalIndex) {
				return (this.getAtomSetCollectionAuxiliaryInfo (org.jmol.adapter.smarter.AtomSetCollection.globalBooleans[globalIndex]) === Boolean.TRUE);
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomCount", 
			    function () {
				return this.atomCount;
			    });
	Clazz.defineMethod (c$, "getHydrogenAtomCount", 
			    function () {
				var n = 0;
				for (var i = 0; i < this.atomCount; i++) if (this.atoms[i].elementNumber == 1 || this.atoms[i].elementSymbol.equals ("H")) n++;

				return n;
			    });
	Clazz.defineMethod (c$, "getAtoms", 
			    function () {
				return this.atoms;
			    });
	Clazz.defineMethod (c$, "getAtom", 
			    function (i) {
				return this.atoms[i];
			    }, "~N");
	Clazz.defineMethod (c$, "getBondCount", 
			    function () {
				return this.bondCount;
			    });
	Clazz.defineMethod (c$, "getBonds", 
			    function () {
				return this.bonds;
			    });
	Clazz.defineMethod (c$, "getBond", 
			    function (i) {
				return this.bonds[i];
			    }, "~N");
	Clazz.defineMethod (c$, "getStructureCount", 
			    function () {
				return this.structureCount;
			    });
	Clazz.defineMethod (c$, "getStructures", 
			    function () {
				return this.structures;
			    });
	Clazz.defineMethod (c$, "getAtomSetCount", 
			    function () {
				return this.atomSetCount;
			    });
	Clazz.defineMethod (c$, "getCurrentAtomSetIndex", 
			    function () {
				return this.currentAtomSetIndex;
			    });
	Clazz.defineMethod (c$, "setCurrentAtomSetIndex", 
			    function (i) {
				this.currentAtomSetIndex = i;
			    }, "~N");
	Clazz.defineMethod (c$, "setDoFixPeriodic", 
			    function () {
				this.doFixPeriodic = true;
			    });
	Clazz.makeConstructor (c$, 
			       function (fileTypeName, atomSetCollectionReader, array, list) {
				   this.fileTypeName = fileTypeName;
				   this.allowMultiple = (atomSetCollectionReader == null || atomSetCollectionReader.desiredVibrationNumber < 0);
				   var p =  new java.util.Properties ();
				   p.put ("PATH_KEY", ".PATH");
				   p.put ("PATH_SEPARATOR", org.jmol.adapter.smarter.SmarterJmolAdapter.PATH_SEPARATOR);
				   this.setAtomSetCollectionAuxiliaryInfo ("properties", p);
				   if (array != null) {
				       var n = 0;
				       for (var i = 0; i < array.length; i++) if (array[i].atomCount > 0) this.appendAtomSetCollection (n++, array[i]);

				       if (n > 1) this.setAtomSetCollectionAuxiliaryInfo ("isMultiFile", Boolean.TRUE);
				   } else if (list != null) {
				       this.setAtomSetCollectionAuxiliaryInfo ("isMultiFile", Boolean.TRUE);
				       this.appendAtomSetCollectionList (list);
				   }}, "~S,org.jmol.adapter.smarter.AtomSetCollectionReader,~A,java.util.List");
	Clazz.defineMethod (c$, "appendAtomSetCollectionList", 
			    ($fz = function (list) {
				var n = list.size ();
				if (n == 0) {
				    this.errorMessage = "No file found!";
				    return;
				}for (var i = 0; i < n; i++) {
				    var o = list.get (i);
				    if (Clazz.instanceOf (o, java.util.List)) this.appendAtomSetCollectionList (o);
				    else this.appendAtomSetCollection (i, o);
				}
			    }, $fz.isPrivate = true, $fz), "java.util.List");
	Clazz.defineMethod (c$, "setTrajectory", 
			    function () {
				if (!this.isTrajectory) {
				    this.trajectorySteps =  new java.util.ArrayList ();
				}this.isTrajectory = true;
				this.addTrajectoryStep ();
			    });
	Clazz.defineMethod (c$, "appendAtomSetCollection", 
			    function (collectionIndex, collection) {
				var existingAtomsCount = this.atomCount;
				this.setAtomSetCollectionAuxiliaryInfo ("loadState", collection.getAtomSetCollectionAuxiliaryInfo ("loadState"));
				if (collection.bsAtoms != null) {
				    if (this.bsAtoms == null) this.bsAtoms =  new org.jmol.util.BitSet ();
				    for (var i = collection.bsAtoms.nextSetBit (0); i >= 0; i = collection.bsAtoms.nextSetBit (i + 1)) this.bsAtoms.set (existingAtomsCount + i);

				}var clonedAtoms = 0;
				for (var atomSetNum = 0; atomSetNum < collection.atomSetCount; atomSetNum++) {
				    this.newAtomSet ();
				    var info = this.atomSetAuxiliaryInfo[this.currentAtomSetIndex] = collection.atomSetAuxiliaryInfo[atomSetNum];
				    var atomInfo = info.get ("PDB_CONECT_firstAtom_count_max");
				    if (atomInfo != null) atomInfo[0] += existingAtomsCount;
				    this.setAtomSetAuxiliaryInfo ("title", collection.collectionName);
				    this.setAtomSetName (collection.getAtomSetName (atomSetNum));
				    for (var atomNum = 0; atomNum < collection.atomSetAtomCounts[atomSetNum]; atomNum++) {
					try {
					    if (this.bsAtoms != null) this.bsAtoms.set (this.atomCount);
					    this.newCloneAtom (collection.atoms[clonedAtoms]);
					} catch (e) {
					    if (Clazz.exceptionOf (e, Exception)) {
						this.errorMessage = "appendAtomCollection error: " + e;
					    } else {
						throw e;
					    }
					}
					clonedAtoms++;
				    }
				    for (var i = 0; i < collection.structureCount; i++) if (collection.structures[i] != null && (collection.structures[i].atomSetIndex == atomSetNum || collection.structures[i].atomSetIndex == -1)) this.addStructure (collection.structures[i]);

				    this.atomSetNumbers[this.currentAtomSetIndex] = (collectionIndex < 0 ? this.currentAtomSetIndex + 1 : ((collectionIndex + 1) * 1000000) + collection.atomSetNumbers[atomSetNum]);
				}
				for (var bondNum = 0; bondNum < collection.bondCount; bondNum++) {
				    var bond = collection.bonds[bondNum];
				    this.addNewBondWithOrder (bond.atomIndex1 + existingAtomsCount, bond.atomIndex2 + existingAtomsCount, bond.order);
				}
				for (var i = org.jmol.adapter.smarter.AtomSetCollection.globalBooleans.length; --i >= 0; ) if (collection.getGlobalBoolean (i)) this.setGlobalBoolean (i);

			    }, "~N,org.jmol.adapter.smarter.AtomSetCollection");
	Clazz.defineMethod (c$, "setNoAutoBond", 
			    function () {
				this.setAtomSetCollectionAuxiliaryInfo ("noAutoBond", Boolean.TRUE);
			    });
	Clazz.defineMethod (c$, "freeze", 
			    function (reverseModels) {
				if (reverseModels) this.reverseAtomSets ();
				if (this.trajectoryStepCount > 1) this.finalizeTrajectory ();
				this.getList (true);
				this.getList (false);
				for (var i = 0; i < this.atomSetCount; i++) {
				    this.setAtomSetAuxiliaryInfoForSet ("initialAtomCount", Integer.$valueOf (this.atomSetAtomCounts[i]), i);
				    this.setAtomSetAuxiliaryInfoForSet ("initialBondCount", Integer.$valueOf (this.atomSetBondCounts[i]), i);
				}
			    }, "~B");
	Clazz.defineMethod (c$, "reverseAtomSets", 
			    ($fz = function () {
				this.reverseArray (this.atomSetAtomIndexes);
				this.reverseArray (this.atomSetNumbers);
				this.reverseArray (this.atomSetAtomCounts);
				this.reverseArray (this.atomSetBondCounts);
				org.jmol.adapter.smarter.AtomSetCollection.reverseList (this.trajectorySteps);
				org.jmol.adapter.smarter.AtomSetCollection.reverseList (this.trajectoryNames);
				org.jmol.adapter.smarter.AtomSetCollection.reverseList (this.vibrationSteps);
				this.reverseObject (this.atomSetAuxiliaryInfo);
				for (var i = 0; i < this.atomCount; i++) this.atoms[i].atomSetIndex = this.atomSetCount - 1 - this.atoms[i].atomSetIndex;

				for (var i = 0; i < this.structureCount; i++) if (this.structures[i].atomSetIndex >= 0) this.structures[i].atomSetIndex = this.atomSetCount - 1 - this.structures[i].atomSetIndex;

				for (var i = 0; i < this.bondCount; i++) this.bonds[i].atomSetIndex = this.atomSetCount - 1 - this.atoms[this.bonds[i].atomIndex1].atomSetIndex;

				this.reverseSets (this.structures, this.structureCount);
				this.reverseSets (this.bonds, this.bondCount);
				var lists = org.jmol.util.ArrayUtil.createArrayOfArrayList (this.atomSetCount);
				for (var i = 0; i < this.atomSetCount; i++) lists[i] =  new java.util.ArrayList ();

				for (var i = 0; i < this.atomCount; i++) lists[this.atoms[i].atomSetIndex].add (this.atoms[i]);

				var newIndex =  Clazz.newIntArray (this.atomCount, 0);
				var n = this.atomCount;
				for (var i = this.atomSetCount; --i >= 0; ) for (var j = lists[i].size (); --j >= 0; ) {
				    var a = this.atoms[--n] = lists[i].get (j);
				    newIndex[a.atomIndex] = n;
				    a.atomIndex = n;
				}

				for (var i = 0; i < this.bondCount; i++) {
				    this.bonds[i].atomIndex1 = newIndex[this.bonds[i].atomIndex1];
				    this.bonds[i].atomIndex2 = newIndex[this.bonds[i].atomIndex2];
				}
				for (var i = 0; i < this.atomSetCount; i++) {
				    var conect = this.getAtomSetAuxiliaryInfoValue (i, "PDB_CONECT_firstAtom_count_max");
				    if (conect == null) continue;
				    conect[0] = newIndex[conect[0]];
				    conect[1] = this.atomSetAtomCounts[i];
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "reverseSets", 
			    ($fz = function (o, n) {
				var lists = org.jmol.util.ArrayUtil.createArrayOfArrayList (this.atomSetCount);
				for (var i = 0; i < this.atomSetCount; i++) lists[i] =  new java.util.ArrayList ();

				for (var i = 0; i < n; i++) {
				    var index = o[i].atomSetIndex;
				    if (index < 0) return;
				    lists[o[i].atomSetIndex].add (o[i]);
				}
				for (var i = this.atomSetCount; --i >= 0; ) for (var j = lists[i].size (); --j >= 0; ) o[--n] = lists[i].get (j);


			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "reverseObject", 
			    ($fz = function (o) {
				var n = this.atomSetCount;
				for (var i = Clazz.doubleToInt (n / 2); --i >= 0; ) org.jmol.util.ArrayUtil.swap (o, i, n - 1 - i);

			    }, $fz.isPrivate = true, $fz), "~A");
	c$.reverseList = Clazz.defineMethod (c$, "reverseList", 
					     ($fz = function (list) {
						 if (list == null) return;
						 java.util.Collections.reverse (list);
					     }, $fz.isPrivate = true, $fz), "java.util.List");
	Clazz.defineMethod (c$, "reverseArray", 
			    ($fz = function (a) {
				var n = this.atomSetCount;
				for (var i = Clazz.doubleToInt (n / 2); --i >= 0; ) org.jmol.util.ArrayUtil.swapInt (a, i, n - 1 - i);

			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "getList", 
			    ($fz = function (isAltLoc) {
				var i;
				for (i = this.atomCount; --i >= 0; ) if (this.atoms[i] != null && (isAltLoc ? this.atoms[i].alternateLocationID : this.atoms[i].insertionCode) != '\0') break;

				if (i < 0) return;
				var lists =  new Array (this.atomSetCount);
				for (i = 0; i < this.atomSetCount; i++) lists[i] = "";

				var pt;
				for (i = 0; i < this.atomCount; i++) {
				    if (this.atoms[i] == null) continue;
				    var id = (isAltLoc ? this.atoms[i].alternateLocationID : this.atoms[i].insertionCode);
				    if (id != '\0' && lists[pt = this.atoms[i].atomSetIndex].indexOf (id) < 0) lists[pt] += id;
				}
				var type = (isAltLoc ? "altLocs" : "insertionCodes");
				for (i = 0; i < this.atomSetCount; i++) if (lists[i].length > 0) this.setAtomSetAuxiliaryInfoForSet (type, lists[i], i);

			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "finish", 
			    function () {
				this.atoms = null;
				this.atomSetAtomCounts =  Clazz.newIntArray (16, 0);
				this.atomSetAuxiliaryInfo =  new Array (16);
				this.atomSetCollectionAuxiliaryInfo =  new java.util.Hashtable ();
				this.atomSetCount = 0;
				this.atomSetNumbers =  Clazz.newIntArray (16, 0);
				this.atomSymbolicMap =  new java.util.Hashtable ();
				this.bonds = null;
				this.cartesians = null;
				this.connectLast = null;
				this.currentAtomSetIndex = -1;
				this.latticeCells = null;
				this.notionalUnitCell = null;
				this.symmetry = null;
				this.structures =  new Array (16);
				this.structureCount = 0;
				this.trajectorySteps = null;
				this.vibrationSteps = null;
				this.vConnect = null;
			    });
	Clazz.defineMethod (c$, "discardPreviousAtoms", 
			    function () {
				for (var i = this.atomCount; --i >= 0; ) this.atoms[i] = null;

				this.atomCount = 0;
				this.clearSymbolicMap ();
				this.atomSetCount = 0;
				this.currentAtomSetIndex = -1;
				for (var i = this.atomSetAuxiliaryInfo.length; --i >= 0; ) {
				    this.atomSetAtomCounts[i] = 0;
				    this.atomSetBondCounts[i] = 0;
				    this.atomSetAuxiliaryInfo[i] = null;
				}
			    });
	Clazz.defineMethod (c$, "removeAtomSet", 
			    function (imodel) {
				if (this.bsAtoms == null) {
				    this.bsAtoms =  new org.jmol.util.BitSet ();
				    this.bsAtoms.setBits (0, this.atomCount);
				}var i0 = this.atomSetAtomIndexes[imodel];
				var nAtoms = this.atomSetAtomCounts[imodel];
				var i1 = i0 + nAtoms;
				this.bsAtoms.clearBits (i0, i1);
				for (var i = i1; i < this.atomCount; i++) this.atoms[i].atomSetIndex--;

				for (var i = imodel + 1; i < this.atomSetCount; i++) {
				    this.atomSetAuxiliaryInfo[i - 1] = this.atomSetAuxiliaryInfo[i];
				    this.atomSetAtomIndexes[i - 1] = this.atomSetAtomIndexes[i];
				    this.atomSetBondCounts[i - 1] = this.atomSetBondCounts[i];
				    this.atomSetAtomCounts[i - 1] = this.atomSetAtomCounts[i];
				    this.atomSetNumbers[i - 1] = this.atomSetNumbers[i];
				}
				for (var i = 0; i < this.structureCount; i++) {
				    if (this.structures[i] == null) continue;
				    if (this.structures[i].atomSetIndex > imodel) this.structures[i].atomSetIndex--;
				    else if (this.structures[i].atomSetIndex == imodel) this.structures[i] = null;
				}
				for (var i = 0; i < this.bondCount; i++) this.bonds[i].atomSetIndex = this.atoms[this.bonds[i].atomIndex1].atomSetIndex;

				this.atomSetAuxiliaryInfo[--this.atomSetCount] = null;
			    }, "~N");
	Clazz.defineMethod (c$, "removeCurrentAtomSet", 
			    function () {
				if (this.currentAtomSetIndex < 0) return;
				this.currentAtomSetIndex--;
				this.atomSetCount--;
			    });
	Clazz.defineMethod (c$, "newCloneAtom", 
			    function (atom) {
				var clone = atom.clone ();
				this.addAtom (clone);
				return clone;
			    }, "org.jmol.adapter.smarter.Atom");
	Clazz.defineMethod (c$, "cloneFirstAtomSet", 
			    function (atomCount) {
				if (!this.allowMultiple) return;
				this.newAtomSet ();
				if (atomCount == 0) atomCount = this.atomSetAtomCounts[0];
				for (var i = 0; i < atomCount; ++i) this.newCloneAtom (this.atoms[i]);

			    }, "~N");
	Clazz.defineMethod (c$, "cloneFirstAtomSetWithBonds", 
			    function (nBonds) {
				if (!this.allowMultiple) return;
				this.cloneFirstAtomSet (0);
				var firstCount = this.atomSetAtomCounts[0];
				for (var bondNum = 0; bondNum < nBonds; bondNum++) {
				    var bond = this.bonds[this.bondCount - nBonds];
				    this.addNewBondWithOrder (bond.atomIndex1 + firstCount, bond.atomIndex2 + firstCount, bond.order);
				}
			    }, "~N");
	Clazz.defineMethod (c$, "cloneLastAtomSet", 
			    function () {
				this.cloneLastAtomSetFromPoints (0, null);
			    });
	Clazz.defineMethod (c$, "cloneLastAtomSetFromPoints", 
			    function (atomCount, pts) {
				if (!this.allowMultiple) return;
				var count = (atomCount > 0 ? atomCount : this.getLastAtomSetAtomCount ());
				var atomIndex = this.getLastAtomSetAtomIndex ();
				this.newAtomSet ();
				for (var i = 0; i < count; ++i) {
				    var atom = this.newCloneAtom (this.atoms[atomIndex++]);
				    if (pts != null) atom.setT (pts[i]);
				}
			    }, "~N,~A");
	Clazz.defineMethod (c$, "getFirstAtomSetAtomCount", 
			    function () {
				return this.atomSetAtomCounts[0];
			    });
	Clazz.defineMethod (c$, "getLastAtomSetAtomCount", 
			    function () {
				return this.atomSetAtomCounts[this.currentAtomSetIndex];
			    });
	Clazz.defineMethod (c$, "getLastAtomSetAtomIndex", 
			    function () {
				return this.atomCount - this.atomSetAtomCounts[this.currentAtomSetIndex];
			    });
	Clazz.defineMethod (c$, "addNewAtom", 
			    function () {
				var atom =  new org.jmol.adapter.smarter.Atom ();
				this.addAtom (atom);
				return atom;
			    });
	Clazz.defineMethod (c$, "addAtom", 
			    function (atom) {
				if (this.atomCount == this.atoms.length) {
				    if (this.atomCount > 200000) this.atoms = org.jmol.util.ArrayUtil.ensureLength (this.atoms, this.atomCount + 50000);
				    else this.atoms = org.jmol.util.ArrayUtil.doubleLength (this.atoms);
				}if (this.atomSetCount == 0) this.newAtomSet ();
				atom.atomIndex = this.atomCount;
				this.atoms[this.atomCount++] = atom;
				atom.atomSetIndex = this.currentAtomSetIndex;
				atom.atomSite = this.atomSetAtomCounts[this.currentAtomSetIndex]++;
			    }, "org.jmol.adapter.smarter.Atom");
	Clazz.defineMethod (c$, "addAtomWithMappedName", 
			    function (atom) {
				this.addAtom (atom);
				this.mapMostRecentAtomName ();
			    }, "org.jmol.adapter.smarter.Atom");
	Clazz.defineMethod (c$, "addAtomWithMappedSerialNumber", 
			    function (atom) {
				this.addAtom (atom);
				this.mapMostRecentAtomSerialNumber ();
			    }, "org.jmol.adapter.smarter.Atom");
	Clazz.defineMethod (c$, "addNewBond", 
			    function (atomIndex1, atomIndex2) {
				return this.addNewBondWithOrder (atomIndex1, atomIndex2, 1);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "addNewSingleBondFromNames", 
			    function (atomName1, atomName2) {
				return this.addNewBondFromNames (atomName1, atomName2, 1);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "addNewBondWithOrder", 
			    function (atomIndex1, atomIndex2, order) {
				if (atomIndex1 < 0 || atomIndex1 >= this.atomCount || atomIndex2 < 0 || atomIndex2 >= this.atomCount) return null;
				var bond =  new org.jmol.adapter.smarter.Bond (atomIndex1, atomIndex2, order);
				this.addBond (bond);
				return bond;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "addNewBondFromNames", 
			    function (atomName1, atomName2, order) {
				return this.addNewBondWithOrder (this.getAtomIndexFromName (atomName1), this.getAtomIndexFromName (atomName2), order);
			    }, "~S,~S,~N");
	Clazz.defineMethod (c$, "addNewBondWithMappedSerialNumbers", 
			    function (atomSerial1, atomSerial2, order) {
				return this.addNewBondWithOrder (this.getAtomIndexFromSerial (atomSerial1), this.getAtomIndexFromSerial (atomSerial2), order);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "addConnection", 
			    function (is) {
				if (this.vConnect == null) {
				    this.connectLast = null;
				    this.vConnect =  new java.util.ArrayList ();
				}if (this.connectLast != null) {
				    if (is[0] == this.connectLast[0] && is[1] == this.connectLast[1] && is[2] != 2048) {
					this.connectLast[2]++;
					return;
				    }}this.vConnect.add (this.connectLast = is);
			    }, "~A");
	Clazz.defineMethod (c$, "connectAllBad", 
			    ($fz = function (maxSerial) {
				var firstAtom = this.connectNextAtomIndex;
				for (var i = this.connectNextAtomSet; i < this.atomSetCount; i++) {
				    this.setAtomSetAuxiliaryInfoForSet ("PDB_CONECT_firstAtom_count_max", [firstAtom, this.atomSetAtomCounts[i], maxSerial], i);
				    if (this.vConnect != null) {
					this.setAtomSetAuxiliaryInfoForSet ("PDB_CONECT_bonds", this.vConnect, i);
					this.setGlobalBoolean (3);
				    }firstAtom += this.atomSetAtomCounts[i];
				}
				this.vConnect = null;
				this.connectNextAtomSet = this.currentAtomSetIndex + 1;
				this.connectNextAtomIndex = firstAtom;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "connectAll", 
			    function (maxSerial, isConnectStateBug) {
				if (this.currentAtomSetIndex < 0) return;
				if (isConnectStateBug) {
				    this.connectAllBad (maxSerial);
				    return;
				}this.setAtomSetAuxiliaryInfo ("PDB_CONECT_firstAtom_count_max", [this.atomSetAtomIndexes[this.currentAtomSetIndex], this.atomSetAtomCounts[this.currentAtomSetIndex], maxSerial]);
				if (this.vConnect == null) return;
				var firstAtom = this.connectNextAtomIndex;
				for (var i = this.connectNextAtomSet; i < this.atomSetCount; i++) {
				    this.setAtomSetAuxiliaryInfoForSet ("PDB_CONECT_bonds", this.vConnect, i);
				    this.setGlobalBoolean (3);
				    firstAtom += this.atomSetAtomCounts[i];
				}
				this.vConnect = null;
				this.connectNextAtomSet = this.currentAtomSetIndex + 1;
				this.connectNextAtomIndex = firstAtom;
			    }, "~N,~B");
	Clazz.defineMethod (c$, "addBond", 
			    function (bond) {
				if (this.trajectoryStepCount > 0) return;
				if (bond.atomIndex1 < 0 || bond.atomIndex2 < 0 || bond.order < 0 || this.atoms[bond.atomIndex1].atomSetIndex != this.atoms[bond.atomIndex2].atomSetIndex) {
				    if (org.jmol.util.Logger.debugging) {
					org.jmol.util.Logger.debug (">>>>>>BAD BOND:" + bond.atomIndex1 + "-" + bond.atomIndex2 + " order=" + bond.order);
				    }return;
				}if (this.bondCount == this.bonds.length) this.bonds = org.jmol.util.ArrayUtil.arrayCopyObject (this.bonds, this.bondCount + 1024);
				this.bonds[this.bondCount++] = bond;
				this.atomSetBondCounts[this.currentAtomSetIndex]++;
			    }, "org.jmol.adapter.smarter.Bond");
	Clazz.defineMethod (c$, "addStructure", 
			    function (structure) {
				if (this.structureCount == this.structures.length) this.structures = org.jmol.util.ArrayUtil.arrayCopyObject (this.structures, this.structureCount + 32);
				structure.atomSetIndex = this.currentAtomSetIndex;
				this.structures[this.structureCount++] = structure;
				if (structure.strandCount >= 1) {
				    var i = this.structureCount;
				    for (i = this.structureCount; --i >= 0 && this.structures[i].atomSetIndex == this.currentAtomSetIndex && this.structures[i].structureID.equals (structure.structureID); ) {
				    }
				    i++;
				    var n = this.structureCount - i;
				    for (; i < this.structureCount; i++) this.structures[i].strandCount = n;

				}}, "org.jmol.adapter.smarter.Structure");
	Clazz.defineMethod (c$, "addVibrationVectorWithSymmetry", 
			    function (iatom, vx, vy, vz, withSymmetry) {
				if (!withSymmetry) {
				    this.addVibrationVector (iatom, vx, vy, vz);
				    return;
				}var atomSite = this.atoms[iatom].atomSite;
				var atomSetIndex = this.atoms[iatom].atomSetIndex;
				for (var i = iatom; i < this.atomCount && this.atoms[i].atomSetIndex == atomSetIndex; i++) {
				    if (this.atoms[i].atomSite == atomSite) this.addVibrationVector (i, vx, vy, vz);
				}
			    }, "~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "addVibrationVector", 
			    function (iatom, x, y, z) {
				if (!this.allowMultiple) iatom = iatom % this.atomCount;
				var atom = this.atoms[iatom];
				atom.vectorX = x;
				atom.vectorY = y;
				atom.vectorZ = z;
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomSetSpaceGroupName", 
			    function (spaceGroupName) {
				this.setAtomSetAuxiliaryInfo ("spaceGroup", spaceGroupName + "");
			    }, "~S");
	Clazz.defineMethod (c$, "setCoordinatesAreFractional", 
			    function (coordinatesAreFractional) {
				this.coordinatesAreFractional = coordinatesAreFractional;
				this.setAtomSetAuxiliaryInfo ("coordinatesAreFractional", Boolean.$valueOf (coordinatesAreFractional));
				if (coordinatesAreFractional) this.setGlobalBoolean (0);
			    }, "~B");
	Clazz.defineMethod (c$, "setSymmetryRange", 
			    function (factor) {
				this.symmetryRange = factor;
				this.setAtomSetCollectionAuxiliaryInfo ("symmetryRange",  new Float (factor));
			    }, "~N");
	Clazz.defineMethod (c$, "setLatticeCells", 
			    function (latticeCells, applySymmetryToBonds, doPackUnitCell, doCentroidUnitCell, centroidPacked, strSupercell, ptSupercell) {
				this.latticeCells = latticeCells;
				var isLatticeRange = (latticeCells[0] <= 555 && latticeCells[1] >= 555 && (latticeCells[2] == 0 || latticeCells[2] == 1 || latticeCells[2] == -1));
				this.doNormalize = latticeCells[0] != 0 && (!isLatticeRange || latticeCells[2] == 1);
				this.applySymmetryToBonds = applySymmetryToBonds;
				this.doPackUnitCell = doPackUnitCell;
				this.doCentroidUnitCell = doCentroidUnitCell;
				this.centroidPacked = centroidPacked;
				if (strSupercell != null) this.setSuperCell (strSupercell);
				else this.ptSupercell = ptSupercell;
			    }, "~A,~B,~B,~B,~B,~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setSupercellFromPoint", 
			    function (pt) {
				this.ptSupercell = pt;
				org.jmol.util.Logger.info ("Using supercell " + org.jmol.util.Escape.escapePt (pt));
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setSuperCell", 
			    ($fz = function (supercell) {
				if (this.fmatSupercell != null) return;
				this.fmatSupercell =  Clazz.newFloatArray (16, 0);
				if (this.getSymmetry ().getMatrixFromString (supercell, this.fmatSupercell, true) == null) {
				    this.fmatSupercell = null;
				    return;
				}org.jmol.util.Logger.info ("Using supercell \n" + org.jmol.util.Matrix4f.newA (this.fmatSupercell));
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getSymmetry", 
			    function () {
				if (this.symmetry == null) this.symmetry = org.jmol.api.Interface.getOptionInterface ("symmetry.Symmetry");
				return this.symmetry;
			    });
	Clazz.defineMethod (c$, "setNotionalUnitCell", 
			    function (info, matUnitCellOrientation, unitCellOffset) {
				this.notionalUnitCell =  Clazz.newFloatArray (info.length, 0);
				this.unitCellOffset = unitCellOffset;
				for (var i = 0; i < info.length; i++) this.notionalUnitCell[i] = info[i];

				this.haveUnitCell = true;
				this.setAtomSetAuxiliaryInfo ("notionalUnitcell", this.notionalUnitCell);
				this.setGlobalBoolean (2);
				this.getSymmetry ().setUnitCell (this.notionalUnitCell);
				if (unitCellOffset != null) {
				    this.symmetry.setOffsetPt (unitCellOffset);
				    this.setAtomSetAuxiliaryInfo ("unitCellOffset", unitCellOffset);
				}if (matUnitCellOrientation != null) {
				    this.symmetry.setUnitCellOrientation (matUnitCellOrientation);
				    this.setAtomSetAuxiliaryInfo ("matUnitCellOrientation", matUnitCellOrientation);
				}}, "~A,org.jmol.util.Matrix3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "addSpaceGroupOperation", 
			    function (xyz) {
				this.getSymmetry ().setSpaceGroup (this.doNormalize);
				return (this.symmetry.addSpaceGroupOperation (xyz, 0) >= 0);
			    }, "~S");
	Clazz.defineMethod (c$, "setLatticeParameter", 
			    function (latt) {
				this.getSymmetry ().setSpaceGroup (this.doNormalize);
				this.symmetry.setLattice (latt);
			    }, "~N");
	Clazz.defineMethod (c$, "applySymmetry", 
			    function () {
				this.applySymmetryLattice (this.latticeCells[0], this.latticeCells[1], Math.abs (this.latticeCells[2]));
			    });
	Clazz.defineMethod (c$, "applySymmetryUsing", 
			    function (symmetry) {
				this.getSymmetry ().setSpaceGroupS (symmetry);
				this.applySymmetryLattice (this.latticeCells[0], this.latticeCells[1], Math.abs (this.latticeCells[2]));
			    }, "org.jmol.api.SymmetryInterface");
	Clazz.defineMethod (c$, "applySymmetryLattice", 
			    ($fz = function (maxX, maxY, maxZ) {
				if (!this.coordinatesAreFractional || !this.getSymmetry ().haveSpaceGroup ()) return;
				if (this.fmatSupercell != null) {
				    this.rminx = 3.4028235E38;
				    this.rminy = 3.4028235E38;
				    this.rminz = 3.4028235E38;
				    this.rmaxx = -3.4028235E38;
				    this.rmaxy = -3.4028235E38;
				    this.rmaxz = -3.4028235E38;
				    var ptx = this.setSym (0, 1, 2);
				    var pty = this.setSym (4, 5, 6);
				    var ptz = this.setSym (8, 9, 10);
				    this.minXYZ = org.jmol.util.Point3i.new3 (Clazz.floatToInt (this.rminx), Clazz.floatToInt (this.rminy), Clazz.floatToInt (this.rminz));
				    this.maxXYZ = org.jmol.util.Point3i.new3 (Clazz.floatToInt (this.rmaxx), Clazz.floatToInt (this.rmaxy), Clazz.floatToInt (this.rmaxz));
				    this.applyAllSymmetry ();
				    var iAtomFirst = this.getLastAtomSetAtomIndex ();
				    for (var i = iAtomFirst; i < this.atomCount; i++) this.symmetry.toCartesian (this.atoms[i], true);

				    this.symmetry = null;
				    this.setNotionalUnitCell ([0, 0, 0, 0, 0, 0, ptx.x, ptx.y, ptx.z, pty.x, pty.y, pty.z, ptz.x, ptz.y, ptz.z], null, this.getAtomSetAuxiliaryInfoValue (this.currentAtomSetIndex, "unitCellOffset"));
				    this.setAtomSetSpaceGroupName ("P1");
				    this.getSymmetry ().setSpaceGroup (this.doNormalize);
				    this.symmetry.addSpaceGroupOperation ("x,y,z", 0);
				    for (var i = iAtomFirst; i < this.atomCount; i++) this.symmetry.toFractional (this.atoms[i], true);

				    this.haveAnisou = false;
				    this.atomSetAuxiliaryInfo[this.currentAtomSetIndex].remove ("matUnitCellOrientation");
				    this.doPackUnitCell = false;
				}this.minXYZ =  new org.jmol.util.Point3i ();
				this.maxXYZ = org.jmol.util.Point3i.new3 (maxX, maxY, maxZ);
				this.applyAllSymmetry ();
				this.fmatSupercell = null;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "setSym", 
			    ($fz = function (i, j, k) {
				var pt =  new org.jmol.util.Point3f ();
				pt.set (this.fmatSupercell[i], this.fmatSupercell[j], this.fmatSupercell[k]);
				this.setSymmetryMinMax (pt);
				this.symmetry.toCartesian (pt, false);
				return pt;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "setSymmetryMinMax", 
			    ($fz = function (c) {
				if (this.rminx > c.x) this.rminx = c.x;
				if (this.rminy > c.y) this.rminy = c.y;
				if (this.rminz > c.z) this.rminz = c.z;
				if (this.rmaxx < c.x) this.rmaxx = c.x;
				if (this.rmaxy < c.y) this.rmaxy = c.y;
				if (this.rmaxz < c.z) this.rmaxz = c.z;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "isInSymmetryRange", 
			    ($fz = function (c) {
				return (c.x >= this.rminx && c.y >= this.rminy && c.z >= this.rminz && c.x <= this.rmaxx && c.y <= this.rmaxy && c.z <= this.rmaxz);
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f");
	c$.isWithinCell = Clazz.defineMethod (c$, "isWithinCell", 
					      ($fz = function (dtype, pt, minX, maxX, minY, maxY, minZ, maxZ) {
						  var slop = 0.02;
						  return (pt.x > minX - slop && pt.x < maxX + slop && (dtype < 2 || pt.y > minY - slop && pt.y < maxY + slop) && (dtype < 3 || pt.z > minZ - slop && pt.z < maxZ + slop));
					      }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3f,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAnisoBorU", 
			    function (atom, data, type) {
				this.haveAnisou = true;
				atom.anisoBorU = data;
				data[6] = type;
			    }, "org.jmol.adapter.smarter.Atom,~A,~N");
	Clazz.defineMethod (c$, "getAnisoBorU", 
			    function (atom) {
				return atom.anisoBorU;
			    }, "org.jmol.adapter.smarter.Atom");
	Clazz.defineMethod (c$, "setEllipsoids", 
			    function () {
				if (!this.haveAnisou) return;
				var iAtomFirst = this.getLastAtomSetAtomIndex ();
				for (var i = iAtomFirst; i < this.atomCount; i++) this.atoms[i].setEllipsoid (this.symmetry.getEllipsoid (this.atoms[i].anisoBorU));

			    });
	Clazz.defineMethod (c$, "setBaseSymmetryAtomCount", 
			    function (n) {
				this.baseSymmetryAtomCount = n;
			    }, "~N");
	Clazz.defineMethod (c$, "applyAllSymmetry", 
			    ($fz = function () {
				var noSymmetryCount = (this.baseSymmetryAtomCount == 0 ? this.getLastAtomSetAtomCount () : this.baseSymmetryAtomCount);
				var iAtomFirst = this.getLastAtomSetAtomIndex ();
				this.setEllipsoids ();
				this.bondCount0 = this.bondCount;
				this.finalizeSymmetry (iAtomFirst, noSymmetryCount);
				var operationCount = this.symmetry.getSpaceGroupOperationCount ();
				this.getSymmetry ().setMinMaxLatticeParameters (this.minXYZ, this.maxXYZ);
				this.dtype = Clazz.floatToInt (this.getSymmetry ().getUnitCellInfoType (6));
				if (this.doCentroidUnitCell) this.setAtomSetCollectionAuxiliaryInfo ("centroidMinMax", [this.minXYZ.x, this.minXYZ.y, this.minXYZ.z, this.maxXYZ.x, this.maxXYZ.y, this.maxXYZ.z, (this.centroidPacked ? 1 : 0)]);
				if (this.ptSupercell != null) {
				    this.setAtomSetAuxiliaryInfo ("supercell", this.ptSupercell);
				    switch (this.dtype) {
				    case 3:
					this.minXYZ.z *= Clazz.floatToInt (Math.abs (this.ptSupercell.z));
					this.maxXYZ.z *= Clazz.floatToInt (Math.abs (this.ptSupercell.z));
				    case 2:
					this.minXYZ.y *= Clazz.floatToInt (Math.abs (this.ptSupercell.y));
					this.maxXYZ.y *= Clazz.floatToInt (Math.abs (this.ptSupercell.y));
				    case 1:
					this.minXYZ.x *= Clazz.floatToInt (Math.abs (this.ptSupercell.x));
					this.maxXYZ.x *= Clazz.floatToInt (Math.abs (this.ptSupercell.x));
				    }
				}if (this.doCentroidUnitCell || this.doPackUnitCell || this.symmetryRange != 0 && this.maxXYZ.x - this.minXYZ.x == 1 && this.maxXYZ.y - this.minXYZ.y == 1 && this.maxXYZ.z - this.minXYZ.z == 1) {
				    this.minXYZ0 = org.jmol.util.Point3i.new3 (this.minXYZ.x, this.minXYZ.y, this.minXYZ.z);
				    this.maxXYZ0 = org.jmol.util.Point3i.new3 (this.maxXYZ.x, this.maxXYZ.y, this.maxXYZ.z);
				    switch (this.dtype) {
				    case 3:
					this.minXYZ.z--;
					this.maxXYZ.z++;
				    case 2:
					this.minXYZ.y--;
					this.maxXYZ.y++;
				    case 1:
					this.minXYZ.x--;
					this.maxXYZ.x++;
				    }
				}var nCells = (this.maxXYZ.x - this.minXYZ.x) * (this.maxXYZ.y - this.minXYZ.y) * (this.maxXYZ.z - this.minXYZ.z);
				var cartesianCount = (this.checkSpecial ? noSymmetryCount * operationCount * nCells : this.symmetryRange > 0 ? noSymmetryCount * operationCount : this.symmetryRange < 0 ? 1 : 1);
				this.cartesians =  new Array (cartesianCount);
				for (var i = 0; i < noSymmetryCount; i++) this.atoms[i + iAtomFirst].bsSymmetry = org.jmol.util.BitSetUtil.newBitSet (operationCount * (nCells + 1));

				var pt = 0;
				var unitCells =  Clazz.newIntArray (nCells, 0);
				this.unitCellTranslations =  new Array (nCells);
				var iCell = 0;
				var cell555Count = 0;
				var absRange = Math.abs (this.symmetryRange);
				var checkSymmetryRange = (this.symmetryRange != 0);
				var checkRangeNoSymmetry = (this.symmetryRange < 0);
				var checkRange111 = (this.symmetryRange > 0);
				if (checkSymmetryRange) {
				    this.rminx = 3.4028235E38;
				    this.rminy = 3.4028235E38;
				    this.rminz = 3.4028235E38;
				    this.rmaxx = -3.4028235E38;
				    this.rmaxy = -3.4028235E38;
				    this.rmaxz = -3.4028235E38;
				}var op = this.symmetry.getSpaceGroupOperation (0);
				if (this.doPackUnitCell) this.ptOffset.set (0, 0, 0);
				for (var tx = this.minXYZ.x; tx < this.maxXYZ.x; tx++) for (var ty = this.minXYZ.y; ty < this.maxXYZ.y; ty++) for (var tz = this.minXYZ.z; tz < this.maxXYZ.z; tz++) {
				    this.unitCellTranslations[iCell] = org.jmol.util.Vector3f.new3 (tx, ty, tz);
				    unitCells[iCell++] = 555 + tx * 100 + ty * 10 + tz;
				    if (tx != 0 || ty != 0 || tz != 0 || this.cartesians.length == 0) continue;
				    for (pt = 0; pt < noSymmetryCount; pt++) {
					var atom = this.atoms[iAtomFirst + pt];
					var c = org.jmol.util.Point3f.newP (atom);
					op.transform (c);
					this.symmetry.toCartesian (c, false);
					if (this.doPackUnitCell) {
					    this.symmetry.toUnitCell (c, this.ptOffset);
					    atom.setT (c);
					    this.symmetry.toFractional (atom, false);
					}atom.bsSymmetry.set (iCell * operationCount);
					atom.bsSymmetry.set (0);
					if (checkSymmetryRange) this.setSymmetryMinMax (c);
					if (pt < cartesianCount) this.cartesians[pt] = c;
				    }
				    if (checkRangeNoSymmetry) {
					this.rminx -= absRange;
					this.rminy -= absRange;
					this.rminz -= absRange;
					this.rmaxx += absRange;
					this.rmaxy += absRange;
					this.rmaxz += absRange;
				    }cell555Count = pt = this.symmetryAddAtoms (iAtomFirst, noSymmetryCount, 0, 0, 0, 0, pt, iCell * operationCount);
				}


				if (checkRange111) {
				    this.rminx -= absRange;
				    this.rminy -= absRange;
				    this.rminz -= absRange;
				    this.rmaxx += absRange;
				    this.rmaxy += absRange;
				    this.rmaxz += absRange;
				}iCell = 0;
				for (var tx = this.minXYZ.x; tx < this.maxXYZ.x; tx++) for (var ty = this.minXYZ.y; ty < this.maxXYZ.y; ty++) for (var tz = this.minXYZ.z; tz < this.maxXYZ.z; tz++) {
				    iCell++;
				    if (tx != 0 || ty != 0 || tz != 0) pt = this.symmetryAddAtoms (iAtomFirst, noSymmetryCount, tx, ty, tz, cell555Count, pt, iCell * operationCount);
				}


				if (iCell * noSymmetryCount == this.atomCount - iAtomFirst) this.appendAtomProperties (iCell);
				this.setSymmetryOps ();
				this.setAtomSetAuxiliaryInfo ("presymmetryAtomIndex", Integer.$valueOf (iAtomFirst));
				this.setAtomSetAuxiliaryInfo ("presymmetryAtomCount", Integer.$valueOf (noSymmetryCount));
				this.setAtomSetAuxiliaryInfo ("latticeDesignation", this.symmetry.getLatticeDesignation ());
				this.setAtomSetAuxiliaryInfo ("unitCellRange", unitCells);
				this.setAtomSetAuxiliaryInfo ("unitCellTranslations", this.unitCellTranslations);
				this.symmetry.setSpaceGroupS (null);
				this.notionalUnitCell =  Clazz.newFloatArray (6, 0);
				this.coordinatesAreFractional = false;
				this.setAtomSetAuxiliaryInfo ("hasSymmetry", Boolean.TRUE);
				this.setGlobalBoolean (1);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "finalizeSymmetry", 
			    ($fz = function (iAtomFirst, noSymmetryCount) {
				this.symmetry.setFinalOperations (this.atoms, iAtomFirst, noSymmetryCount, this.doNormalize);
				var name = this.getAtomSetAuxiliaryInfoValue (this.currentAtomSetIndex, "spaceGroup");
				if (name == null || name.equals ("unspecified!")) this.setAtomSetSpaceGroupName (this.symmetry.getSpaceGroupName ());
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "setSymmetryOps", 
			    ($fz = function () {
				var operationCount = this.symmetry.getSpaceGroupOperationCount ();
				if (operationCount > 0) {
				    var symmetryList =  new Array (operationCount);
				    for (var i = 0; i < operationCount; i++) symmetryList[i] = "" + this.symmetry.getSpaceGroupXyz (i, this.doNormalize);

				    this.setAtomSetAuxiliaryInfo ("symmetryOperations", symmetryList);
				}this.setAtomSetAuxiliaryInfo ("symmetryCount", Integer.$valueOf (operationCount));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setCheckSpecial", 
			    function (TF) {
				this.checkSpecial = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "symmetryAddAtoms", 
			    ($fz = function (iAtomFirst, noSymmetryCount, transX, transY, transZ, baseCount, pt, iCellOpPt) {
				var isBaseCell = (baseCount == 0);
				var addBonds = (this.bondCount0 > this.bondIndex0 && this.applySymmetryToBonds);
				var atomMap = (addBonds ?  Clazz.newIntArray (noSymmetryCount, 0) : null);
				if (this.doPackUnitCell) this.ptOffset.set (transX, transY, transZ);
				var range2 = this.symmetryRange * this.symmetryRange;
				var checkRangeNoSymmetry = (this.symmetryRange < 0);
				var checkRange111 = (this.symmetryRange > 0);
				var checkSymmetryMinMax = (isBaseCell && checkRange111);
				checkRange111 = new Boolean (checkRange111 & !isBaseCell).valueOf ();
				var nOperations = this.symmetry.getSpaceGroupOperationCount ();
				if (nOperations == 1) this.checkSpecial = false;
				var checkSymmetryRange = (checkRangeNoSymmetry || checkRange111);
				var checkDistances = (this.checkSpecial || checkSymmetryRange);
				var addCartesian = (this.checkSpecial || checkSymmetryMinMax);
				if (checkRangeNoSymmetry) baseCount = noSymmetryCount;
				var atomMax = iAtomFirst + noSymmetryCount;
				var ptAtom =  new org.jmol.util.Point3f ();
				for (var iSym = 0; iSym < nOperations; iSym++) {
				    if (isBaseCell && this.symmetry.getSpaceGroupXyz (iSym, true).equals ("x,y,z")) continue;
				    var pt0 = (this.checkSpecial ? pt : checkRange111 ? baseCount : 0);
				    for (var i = iAtomFirst; i < atomMax; i++) {
					if (this.atoms[i].ignoreSymmetry) continue;
					if (this.bsAtoms != null && !this.bsAtoms.get (i)) continue;
					this.symmetry.newSpaceGroupPoint (iSym, this.atoms[i], ptAtom, transX, transY, transZ);
					var special = null;
					var cartesian = org.jmol.util.Point3f.newP (ptAtom);
					this.symmetry.toCartesian (cartesian, false);
					if (this.doPackUnitCell) {
					    this.symmetry.toUnitCell (cartesian, this.ptOffset);
					    ptAtom.setT (cartesian);
					    this.symmetry.toFractional (ptAtom, false);
					    if (!org.jmol.adapter.smarter.AtomSetCollection.isWithinCell (this.dtype, ptAtom, this.minXYZ0.x, this.maxXYZ0.x, this.minXYZ0.y, this.maxXYZ0.y, this.minXYZ0.z, this.maxXYZ0.z)) continue;
					}if (checkSymmetryMinMax) this.setSymmetryMinMax (cartesian);
					if (checkDistances) {
					    var minDist2 = 3.4028235E38;
					    if (checkSymmetryRange && !this.isInSymmetryRange (cartesian)) continue;
					    for (var j = pt0; --j >= 0; ) {
						var d2 = cartesian.distanceSquared (this.cartesians[j]);
						if (this.checkSpecial && d2 < 0.0001) {
						    special = this.atoms[iAtomFirst + j];
						    break;
						}if (checkRange111 && j < baseCount && d2 < minDist2) minDist2 = d2;
					    }
					    if (checkRange111 && minDist2 > range2) continue;
					}var atomSite = this.atoms[i].atomSite;
					if (special != null) {
					    if (addBonds) atomMap[atomSite] = special.atomIndex;
					    special.bsSymmetry.set (iCellOpPt + iSym);
					    special.bsSymmetry.set (iSym);
					} else {
					    if (addBonds) atomMap[atomSite] = this.atomCount;
					    var atom1 = this.newCloneAtom (this.atoms[i]);
					    atom1.setT (ptAtom);
					    atom1.atomSite = atomSite;
					    atom1.bsSymmetry = org.jmol.util.BitSetUtil.newAndSetBit (iCellOpPt + iSym);
					    atom1.bsSymmetry.set (iSym);
					    if (addCartesian) this.cartesians[pt++] = cartesian;
					    if (this.atoms[i].ellipsoid != null) {
						for (var j = 0; j < this.atoms[i].ellipsoid.length; j++) {
						    var e = this.atoms[i].ellipsoid[j];
						    if (e == null) continue;
						    var axes = e.vectors;
						    var lengths = e.lengths;
						    if (axes != null) {
							if (addCartesian) {
							    this.ptTemp.setT (this.cartesians[i - iAtomFirst]);
							} else {
							    this.ptTemp.setT (this.atoms[i]);
							    this.symmetry.toCartesian (this.ptTemp, false);
							}axes = this.symmetry.rotateEllipsoid (iSym, this.ptTemp, axes, this.ptTemp1, this.ptTemp2);
						    }atom1.ellipsoid[j] =  new org.jmol.util.Quadric (axes, lengths, e.isThermalEllipsoid);
						}
					    }}}
				    if (addBonds) {
					for (var bondNum = this.bondIndex0; bondNum < this.bondCount0; bondNum++) {
					    var bond = this.bonds[bondNum];
					    var atom1 = this.atoms[bond.atomIndex1];
					    var atom2 = this.atoms[bond.atomIndex2];
					    if (atom1 == null || atom2 == null) continue;
					    var iAtom1 = atomMap[atom1.atomSite];
					    var iAtom2 = atomMap[atom2.atomSite];
					    if (iAtom1 >= atomMax || iAtom2 >= atomMax) this.addNewBondWithOrder (iAtom1, iAtom2, bond.order);
					}
				    }}
				return pt;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "applySymmetry", 
			    function (biomts, notionalUnitCell, applySymmetryToBonds, filter) {
				if (this.latticeCells != null && this.latticeCells[0] != 0) {
				    org.jmol.util.Logger.error ("Cannot apply biomolecule when lattice cells are indicated");
				    return;
				}this.doNormalize = false;
				this.symmetry = null;
				this.getSymmetry ();
				this.setNotionalUnitCell (notionalUnitCell, null, this.unitCellOffset);
				this.getSymmetry ().setSpaceGroup (this.doNormalize);
				this.addSpaceGroupOperation ("x,y,z");
				this.setAtomSetSpaceGroupName ("biomolecule");
				var len = biomts.size ();
				this.applySymmetryToBonds = applySymmetryToBonds;
				this.bondCount0 = this.bondCount;
				var addBonds = (this.bondCount0 > this.bondIndex0 && applySymmetryToBonds);
				var atomMap = (addBonds ?  Clazz.newIntArray (this.atomCount, 0) : null);
				var iAtomFirst = this.getLastAtomSetAtomIndex ();
				var atomMax = this.atomCount;
				if (filter.indexOf ("#<") >= 0) {
				    len = Math.min (len, org.jmol.util.Parser.parseInt (filter.substring (filter.indexOf ("#<") + 2)) - 1);
				    filter = org.jmol.util.TextFormat.simpleReplace (filter, "#<", "_<");
				}for (var iAtom = iAtomFirst; iAtom < atomMax; iAtom++) this.atoms[iAtom].bsSymmetry = org.jmol.util.BitSetUtil.newAndSetBit (0);

				for (var i = 1; i < len; i++) {
				    if (filter.indexOf ("!#") >= 0) {
					if (filter.indexOf ("!#" + (i + 1) + ";") >= 0) continue;
				    } else if (filter.indexOf ("#") >= 0 && filter.indexOf ("#" + (i + 1) + ";") < 0) {
					continue;
				    }var mat = biomts.get (i);
				    for (var iAtom = iAtomFirst; iAtom < atomMax; iAtom++) {
					if (this.bsAtoms != null && !this.bsAtoms.get (iAtom)) continue;
					try {
					    var atomSite = this.atoms[iAtom].atomSite;
					    var atom1;
					    if (addBonds) atomMap[atomSite] = this.atomCount;
					    atom1 = this.newCloneAtom (this.atoms[iAtom]);
					    if (this.bsAtoms != null) this.bsAtoms.set (atom1.atomIndex);
					    atom1.atomSite = atomSite;
					    mat.transform (atom1);
					    atom1.bsSymmetry = org.jmol.util.BitSetUtil.newAndSetBit (i);
					    if (addBonds) {
						for (var bondNum = this.bondIndex0; bondNum < this.bondCount0; bondNum++) {
						    var bond = this.bonds[bondNum];
						    var iAtom1 = atomMap[this.atoms[bond.atomIndex1].atomSite];
						    var iAtom2 = atomMap[this.atoms[bond.atomIndex2].atomSite];
						    if (iAtom1 >= atomMax || iAtom2 >= atomMax) this.addNewBondWithOrder (iAtom1, iAtom2, bond.order);
						}
					    }} catch (e) {
						if (Clazz.exceptionOf (e, Exception)) {
						    this.errorMessage = "appendAtomCollection error: " + e;
						} else {
						    throw e;
						}
					    }
				    }
				    mat.m03 /= notionalUnitCell[0];
				    mat.m13 /= notionalUnitCell[1];
				    mat.m23 /= notionalUnitCell[2];
				    if (this.symmetry != null && i > 0) this.symmetry.addSpaceGroupOperationM (mat);
				}
				var noSymmetryCount = atomMax - iAtomFirst;
				this.setAtomSetAuxiliaryInfo ("presymmetryAtomIndex", Integer.$valueOf (iAtomFirst));
				this.setAtomSetAuxiliaryInfo ("presymmetryAtomCount", Integer.$valueOf (noSymmetryCount));
				this.setAtomSetAuxiliaryInfo ("biosymmetryCount", Integer.$valueOf (len));
				if (this.symmetry != null) {
				    this.finalizeSymmetry (iAtomFirst, noSymmetryCount);
				    this.setSymmetryOps ();
				}this.symmetry = null;
				this.coordinatesAreFractional = false;
				this.setAtomSetAuxiliaryInfo ("hasSymmetry", Boolean.TRUE);
				this.setGlobalBoolean (1);
			    }, "java.util.List,~A,~B,~S");
	Clazz.defineMethod (c$, "mapMostRecentAtomName", 
			    ($fz = function () {
				if (this.atomCount > 0) {
				    var index = this.atomCount - 1;
				    var atomName = this.atoms[index].atomName;
				    if (atomName != null) this.atomSymbolicMap.put (atomName, Integer.$valueOf (index));
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clearSymbolicMap", 
			    function () {
				this.atomSymbolicMap.clear ();
				this.haveMappedSerials = false;
			    });
	Clazz.defineMethod (c$, "mapMostRecentAtomSerialNumber", 
			    function () {
				if (this.atomCount == 0) return;
				var index = this.atomCount - 1;
				var atomSerial = this.atoms[index].atomSerial;
				if (atomSerial != -2147483648) this.atomSymbolicMap.put (Integer.$valueOf (atomSerial), Integer.$valueOf (index));
				this.haveMappedSerials = true;
			    });
	Clazz.defineMethod (c$, "createAtomSerialMap", 
			    function () {
				if (this.haveMappedSerials || this.currentAtomSetIndex < 0) return;
				for (var i = this.getLastAtomSetAtomCount (); i < this.atomCount; i++) {
				    var atomSerial = this.atoms[i].atomSerial;
				    if (atomSerial != -2147483648) this.atomSymbolicMap.put (Integer.$valueOf (atomSerial), Integer.$valueOf (i));
				}
				this.haveMappedSerials = true;
			    });
	Clazz.defineMethod (c$, "mapAtomName", 
			    function (atomName, atomIndex) {
				this.atomSymbolicMap.put (atomName, Integer.$valueOf (atomIndex));
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getAtomIndexFromName", 
			    function (atomName) {
				var index = -1;
				var value = this.atomSymbolicMap.get (atomName);
				if (value != null) index = (value).intValue ();
				return index;
			    }, "~S");
	Clazz.defineMethod (c$, "getAtomIndexFromSerial", 
			    function (serialNumber) {
				var index = -1;
				var value = this.atomSymbolicMap.get (Integer.$valueOf (serialNumber));
				if (value != null) index = (value).intValue ();
				return index;
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomSetCollectionAuxiliaryInfo", 
			    function (key, value) {
				this.atomSetCollectionAuxiliaryInfo.put (key, value);
			    }, "~S,~O");
	Clazz.defineMethod (c$, "setAtomSetCollectionPartialCharges", 
			    function (auxKey) {
				if (!this.atomSetCollectionAuxiliaryInfo.containsKey (auxKey)) {
				    return false;
				}var atomData = this.atomSetCollectionAuxiliaryInfo.get (auxKey);
				for (var i = atomData.size (); --i >= 0; ) this.atoms[i].partialCharge = atomData.get (i).floatValue ();

				org.jmol.util.Logger.info ("Setting partial charges type " + auxKey);
				return true;
			    }, "~S");
	Clazz.defineMethod (c$, "mapPartialCharge", 
			    function (atomName, charge) {
				this.atoms[this.getAtomIndexFromName (atomName)].partialCharge = charge;
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getAtomSetCollectionAuxiliaryInfo", 
			    function (key) {
				return this.atomSetCollectionAuxiliaryInfo.get (key);
			    }, "~S");
	Clazz.defineMethod (c$, "addTrajectoryStep", 
			    ($fz = function () {
				var trajectoryStep =  new Array (this.atomCount);
				var haveVibrations = (this.atomCount > 0 && !Float.isNaN (this.atoms[0].vectorX));
				var vibrationStep = (haveVibrations ?  new Array (this.atomCount) : null);
				var prevSteps = (this.trajectoryStepCount == 0 ? null : this.trajectorySteps.get (this.trajectoryStepCount - 1));
				for (var i = 0; i < this.atomCount; i++) {
				    var pt = org.jmol.util.Point3f.newP (this.atoms[i]);
				    if (this.doFixPeriodic && prevSteps != null) pt = org.jmol.adapter.smarter.AtomSetCollection.fixPeriodic (pt, prevSteps[i]);
				    trajectoryStep[i] = pt;
				    if (haveVibrations) vibrationStep[i] = org.jmol.util.Vector3f.new3 (this.atoms[i].vectorX, this.atoms[i].vectorY, this.atoms[i].vectorZ);
				}
				if (haveVibrations) {
				    if (this.vibrationSteps == null) {
					this.vibrationSteps =  new java.util.ArrayList ();
					for (var i = 0; i < this.trajectoryStepCount; i++) this.vibrationSteps.add (null);

				    }this.vibrationSteps.add (vibrationStep);
				}this.trajectorySteps.add (trajectoryStep);
				this.trajectoryStepCount++;
			    }, $fz.isPrivate = true, $fz));
	c$.fixPeriodic = Clazz.defineMethod (c$, "fixPeriodic", 
					     ($fz = function (pt, pt0) {
						 pt.x = org.jmol.adapter.smarter.AtomSetCollection.fixPoint (pt.x, pt0.x);
						 pt.y = org.jmol.adapter.smarter.AtomSetCollection.fixPoint (pt.y, pt0.y);
						 pt.z = org.jmol.adapter.smarter.AtomSetCollection.fixPoint (pt.z, pt0.z);
						 return pt;
					     }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,org.jmol.util.Point3f");
	c$.fixPoint = Clazz.defineMethod (c$, "fixPoint", 
					  ($fz = function (x, x0) {
					      while (x - x0 > 0.9) {
						  x -= 1;
					      }
					      while (x - x0 < -0.9) {
						  x += 1;
					      }
					      return x;
					  }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "finalizeTrajectoryAs", 
			    function (trajectorySteps, vibrationSteps) {
				this.trajectorySteps = trajectorySteps;
				this.vibrationSteps = vibrationSteps;
				this.trajectoryStepCount = trajectorySteps.size ();
				this.finalizeTrajectory ();
			    }, "java.util.List,java.util.List");
	Clazz.defineMethod (c$, "finalizeTrajectory", 
			    ($fz = function () {
				if (this.trajectoryStepCount == 0) return;
				var trajectory = this.trajectorySteps.get (0);
				var vibrations = (this.vibrationSteps == null ? null : this.vibrationSteps.get (0));
				var v =  new org.jmol.util.Vector3f ();
				if (this.vibrationSteps != null && vibrations != null && vibrations.length < this.atomCount || trajectory.length < this.atomCount) {
				    this.errorMessage = "File cannot be loaded as a trajectory";
				    return;
				}for (var i = 0; i < this.atomCount; i++) {
				    if (this.vibrationSteps != null) {
					if (vibrations != null) v = vibrations[i];
					this.atoms[i].vectorX = v.x;
					this.atoms[i].vectorY = v.y;
					this.atoms[i].vectorZ = v.z;
				    }this.atoms[i].setT (trajectory[i]);
				}
				this.setAtomSetCollectionAuxiliaryInfo ("trajectorySteps", this.trajectorySteps);
				if (this.vibrationSteps != null) this.setAtomSetCollectionAuxiliaryInfo ("vibrationSteps", this.vibrationSteps);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "newAtomSet", 
			    function () {
				if (!this.allowMultiple && this.currentAtomSetIndex >= 0) this.discardPreviousAtoms ();
				this.bondIndex0 = this.bondCount;
				if (this.isTrajectory) {
				    this.discardPreviousAtoms ();
				}this.currentAtomSetIndex = this.atomSetCount++;
				if (this.atomSetCount > this.atomSetNumbers.length) {
				    this.atomSetAtomIndexes = org.jmol.util.ArrayUtil.doubleLengthI (this.atomSetAtomIndexes);
				    this.atomSetAtomCounts = org.jmol.util.ArrayUtil.doubleLengthI (this.atomSetAtomCounts);
				    this.atomSetBondCounts = org.jmol.util.ArrayUtil.doubleLengthI (this.atomSetBondCounts);
				    this.atomSetAuxiliaryInfo = org.jmol.util.ArrayUtil.doubleLength (this.atomSetAuxiliaryInfo);
				}this.atomSetAtomIndexes[this.currentAtomSetIndex] = this.atomCount;
				if (this.atomSetCount + this.trajectoryStepCount > this.atomSetNumbers.length) {
				    this.atomSetNumbers = org.jmol.util.ArrayUtil.doubleLengthI (this.atomSetNumbers);
				}if (this.isTrajectory) {
				    this.atomSetNumbers[this.currentAtomSetIndex + this.trajectoryStepCount] = this.atomSetCount + this.trajectoryStepCount;
				} else {
				    this.atomSetNumbers[this.currentAtomSetIndex] = this.atomSetCount;
				}this.atomSymbolicMap.clear ();
				this.setAtomSetAuxiliaryInfo ("title", this.collectionName);
			    });
	Clazz.defineMethod (c$, "getAtomSetAtomIndex", 
			    function (i) {
				return this.atomSetAtomIndexes[i];
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomSetAtomCount", 
			    function (i) {
				return this.atomSetAtomCounts[i];
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomSetBondCount", 
			    function (i) {
				return this.atomSetBondCounts[i];
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomSetName", 
			    function (atomSetName) {
				if (this.isTrajectory) {
				    this.setTrajectoryName (atomSetName);
				    return;
				}this.setAtomSetAuxiliaryInfoForSet ("name", atomSetName, this.currentAtomSetIndex);
				if (!this.allowMultiple) this.setCollectionName (atomSetName);
			    }, "~S");
	Clazz.defineMethod (c$, "setTrajectoryName", 
			    ($fz = function (name) {
				if (this.trajectoryStepCount == 0) return;
				if (this.trajectoryNames == null) {
				    this.trajectoryNames =  new java.util.ArrayList ();
				}for (var i = this.trajectoryNames.size (); i < this.trajectoryStepCount; i++) this.trajectoryNames.add (null);

				this.trajectoryNames.set (this.trajectoryStepCount - 1, name);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setAtomSetNames", 
			    function (atomSetName, n) {
				for (var idx = this.currentAtomSetIndex; --n >= 0 && idx >= 0; --idx) this.setAtomSetAuxiliaryInfoForSet ("name", atomSetName, idx);

			    }, "~S,~N");
	Clazz.defineMethod (c$, "setCurrentAtomSetNumber", 
			    function (atomSetNumber) {
				this.setAtomSetNumber (this.currentAtomSetIndex + (this.isTrajectory ? this.trajectoryStepCount : 0), atomSetNumber);
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomSetNumber", 
			    function (index, atomSetNumber) {
				this.atomSetNumbers[index] = atomSetNumber;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setAtomSetModelProperty", 
			    function (key, value) {
				this.setAtomSetModelPropertyForSet (key, value, this.currentAtomSetIndex);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "setAtomSetModelPropertyForSet", 
			    function (key, value, atomSetIndex) {
				var p = this.getAtomSetAuxiliaryInfoValue (atomSetIndex, "modelProperties");
				if (p == null) this.setAtomSetAuxiliaryInfoForSet ("modelProperties", p =  new java.util.Properties (), atomSetIndex);
				p.put (key, value);
			    }, "~S,~S,~N");
	Clazz.defineMethod (c$, "setAtomSetAtomProperty", 
			    function (key, data, atomSetIndex) {
				if (!data.endsWith ("\n")) data += "\n";
				if (atomSetIndex < 0) atomSetIndex = this.currentAtomSetIndex;
				var p = this.getAtomSetAuxiliaryInfoValue (atomSetIndex, "atomProperties");
				if (p == null) this.setAtomSetAuxiliaryInfoForSet ("atomProperties", p =  new java.util.Hashtable (), atomSetIndex);
				p.put (key, data);
			    }, "~S,~S,~N");
	Clazz.defineMethod (c$, "appendAtomProperties", 
			    ($fz = function (nTimes) {
				var p = this.getAtomSetAuxiliaryInfoValue (this.currentAtomSetIndex, "atomProperties");
				if (p == null) {
				    return;
				}for (var entry, $entry = p.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
				    var key = entry.getKey ();
				    var data = entry.getValue ();
				    var s =  new org.jmol.util.StringXBuilder ();
				    for (var i = nTimes; --i >= 0; ) s.append (data);

				    p.put (key, s.toString ());
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setAtomSetPartialCharges", 
			    function (auxKey) {
				if (!this.atomSetAuxiliaryInfo[this.currentAtomSetIndex].containsKey (auxKey)) {
				    return false;
				}var atomData = this.getAtomSetAuxiliaryInfoValue (this.currentAtomSetIndex, auxKey);
				for (var i = atomData.size (); --i >= 0; ) {
				    this.atoms[i].partialCharge = atomData.get (i).floatValue ();
				}
				return true;
			    }, "~S");
	Clazz.defineMethod (c$, "getAtomSetAuxiliaryInfoValue", 
			    function (index, key) {
				return this.atomSetAuxiliaryInfo[index].get (key);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setAtomSetAuxiliaryInfo", 
			    function (key, value) {
				this.setAtomSetAuxiliaryInfoForSet (key, value, this.currentAtomSetIndex);
			    }, "~S,~O");
	Clazz.defineMethod (c$, "setAtomSetAuxiliaryInfoForSet", 
			    function (key, value, atomSetIndex) {
				if (atomSetIndex < 0) return;
				if (this.atomSetAuxiliaryInfo[atomSetIndex] == null) this.atomSetAuxiliaryInfo[atomSetIndex] =  new java.util.Hashtable ();
				if (value == null) this.atomSetAuxiliaryInfo[atomSetIndex].remove (key);
				else this.atomSetAuxiliaryInfo[atomSetIndex].put (key, value);
			    }, "~S,~O,~N");
	Clazz.defineMethod (c$, "setAtomSetPropertyForSets", 
			    function (key, value, n) {
				for (var idx = this.currentAtomSetIndex; --n >= 0 && idx >= 0; --idx) this.setAtomSetModelPropertyForSet (key, value, idx);

			    }, "~S,~S,~N");
	Clazz.defineMethod (c$, "cloneLastAtomSetProperties", 
			    function () {
				this.cloneAtomSetProperties (this.currentAtomSetIndex - 1);
			    });
	Clazz.defineMethod (c$, "cloneAtomSetProperties", 
			    function (index) {
				var p = this.getAtomSetAuxiliaryInfoValue (index, "modelProperties");
				if (p != null) this.setAtomSetAuxiliaryInfoForSet ("modelProperties", p.clone (), this.currentAtomSetIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomSetNumber", 
			    function (atomSetIndex) {
				return this.atomSetNumbers[atomSetIndex >= this.atomSetCount ? 0 : atomSetIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomSetName", 
			    function (atomSetIndex) {
				if (this.trajectoryNames != null && atomSetIndex < this.trajectoryNames.size ()) return this.trajectoryNames.get (atomSetIndex);
				if (atomSetIndex >= this.atomSetCount) atomSetIndex = this.atomSetCount - 1;
				return this.getAtomSetAuxiliaryInfoValue (atomSetIndex, "name");
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomSetAuxiliaryInfo", 
			    function (atomSetIndex) {
				return this.atomSetAuxiliaryInfo[atomSetIndex >= this.atomSetCount ? this.atomSetCount - 1 : atomSetIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomNames", 
			    function (atomIdNames) {
				if (atomIdNames == null) return null;
				var s;
				for (var i = 0; i < this.atomCount; i++) if ((s = atomIdNames.getProperty (this.atoms[i].atomName)) != null) this.atoms[i].atomName = s;

				return null;
			    }, "java.util.Properties");
	Clazz.defineMethod (c$, "setAtomSetEnergy", 
			    function (energyString, value) {
				if (this.currentAtomSetIndex < 0) return;
				this.setAtomSetAuxiliaryInfo ("EnergyString", energyString);
				this.setAtomSetAuxiliaryInfo ("Energy",  new Float (value));
				this.setAtomSetModelProperty ("Energy", "" + value);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "setAtomSetFrequency", 
			    function (pathKey, label, freq, units) {
				freq += " " + (units == null ? "cm^-1" : units);
				this.setAtomSetName ((label == null ? "" : label + " ") + freq);
				this.setAtomSetModelProperty ("Frequency", freq);
				if (label != null) this.setAtomSetModelProperty ("FrequencyLabel", label);
				this.setAtomSetModelProperty (".PATH", (pathKey == null ? "" : pathKey + org.jmol.adapter.smarter.SmarterJmolAdapter.PATH_SEPARATOR + "Frequencies") + "Frequencies");
			    }, "~S,~S,~S,~S");
	Clazz.defineMethod (c$, "toCartesian", 
			    function (symmetry) {
				for (var i = this.getLastAtomSetAtomIndex (); i < this.atomCount; i++) symmetry.toCartesian (this.atoms[i], true);

			    }, "org.jmol.api.SymmetryInterface");
	Clazz.defineMethod (c$, "getBondList", 
			    function () {
				var info =  new Array (this.bondCount);
				for (var i = 0; i < this.bondCount; i++) {
				    info[i] = [this.atoms[this.bonds[i].atomIndex1].atomName, this.atoms[this.bonds[i].atomIndex2].atomName, "" + this.bonds[i].order];
				}
				return info;
			    });
	Clazz.defineMethod (c$, "centralize", 
			    function () {
				var pt =  new org.jmol.util.Point3f ();
				for (var i = 0; i < this.atomSetCount; i++) {
				    var n = this.atomSetAtomCounts[i];
				    var atom0 = this.atomSetAtomIndexes[i];
				    pt.set (0, 0, 0);
				    for (var j = atom0 + n; --j >= atom0; ) {
					pt.x += this.atoms[j].x;
					pt.y += this.atoms[j].y;
					pt.z += this.atoms[j].z;
				    }
				    pt.scale (1 / n);
				    for (var j = atom0 + n; --j >= atom0; ) {
					this.atoms[j].x -= pt.x;
					this.atoms[j].y -= pt.y;
					this.atoms[j].z -= pt.z;
				    }
				}
			    });
	Clazz.defineStatics (c$,
			     "globalBooleans", ["someModelsHaveFractionalCoordinates", "someModelsHaveSymmetry", "someModelsHaveUnitcells", "someModelsHaveCONECT", "isPDB"],
			     "GLOBAL_FRACTCOORD", 0,
			     "GLOBAL_SYMMETRY", 1,
			     "GLOBAL_UNITCELLS", 2,
			     "GLOBAL_CONECT", 3,
			     "GLOBAL_ISPDB", 4,
			     "notionalUnitcellTags", ["a", "b", "c", "alpha", "beta", "gamma"]);
    });
    // 
    //// org\jmol\api\JmolAdapterBondIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    c$ = Clazz.declareType (org.jmol.api, "JmolAdapterBondIterator");
    // 
    //// org\jmol\adapter\smarter\BondIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.api.JmolAdapterBondIterator"], "org.jmol.adapter.smarter.BondIterator", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bsAtoms = null;
	    this.bonds = null;
	    this.ibond = 0;
	    this.bond = null;
	    this.bondCount = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "BondIterator", org.jmol.api.JmolAdapterBondIterator);
	Clazz.makeConstructor (c$, 
			       function (atomSetCollection) {
				   Clazz.superConstructor (this, org.jmol.adapter.smarter.BondIterator, []);
				   this.bsAtoms = atomSetCollection.bsAtoms;
				   this.bonds = atomSetCollection.getBonds ();
				   this.bondCount = atomSetCollection.getBondCount ();
				   this.ibond = 0;
			       }, "org.jmol.adapter.smarter.AtomSetCollection");
	Clazz.overrideMethod (c$, "hasNext", 
			      function () {
				  if (this.ibond == this.bondCount) return false;
				  while ((this.bond = this.bonds[this.ibond++]) == null || (this.bsAtoms != null && (!this.bsAtoms.get (this.bond.atomIndex1) || !this.bsAtoms.get (this.bond.atomIndex2)))) if (this.ibond == this.bondCount) return false;

				  return true;
			      });
	Clazz.overrideMethod (c$, "getAtomUniqueID1", 
			      function () {
				  return Integer.$valueOf (this.bond.atomIndex1);
			      });
	Clazz.overrideMethod (c$, "getAtomUniqueID2", 
			      function () {
				  return Integer.$valueOf (this.bond.atomIndex2);
			      });
	Clazz.overrideMethod (c$, "getEncodedOrder", 
			      function () {
				  return this.bond.order;
			      });
    });
    // 
    //// org\jmol\adapter\smarter\Resolver.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (null, "org.jmol.adapter.smarter.Resolver", ["java.lang.Character", "$.Float", "java.util.StringTokenizer", "org.jmol.adapter.smarter.AtomSetCollectionReader", "org.jmol.io.LimitedLineReader", "org.jmol.util.Logger", "$.Parser"], function () {
	c$ = Clazz.declareType (org.jmol.adapter.smarter, "Resolver");
	c$.getReaderClassBase = Clazz.defineMethod (c$, "getReaderClassBase", 
						    function (type) {
							var name = type + "Reader";
							if (type.startsWith ("Xml")) return "org.jmol.adapter.readers." + "xml." + name;
							var key = ";" + type + ";";
							for (var i = 1; i < org.jmol.adapter.smarter.Resolver.readerSets.length; i += 2) if (org.jmol.adapter.smarter.Resolver.readerSets[i].indexOf (key) >= 0) return "org.jmol.adapter.readers." + org.jmol.adapter.smarter.Resolver.readerSets[i - 1] + name;

							return "org.jmol.adapter.readers." + "???." + name;
						    }, "~S");
	c$.getFileType = Clazz.defineMethod (c$, "getFileType", 
					     function (br) {
						 try {
						     return org.jmol.adapter.smarter.Resolver.determineAtomSetCollectionReader (br, false);
						 } catch (e) {
						     if (Clazz.exceptionOf (e, Exception)) {
							 return null;
						     } else {
							 throw e;
						     }
						 }
					     }, "java.io.BufferedReader");
	c$.getAtomCollectionReader = Clazz.defineMethod (c$, "getAtomCollectionReader", 
							 function (fullName, type, bufferedReader, htParams, ptFile) {
							     var atomSetCollectionReader = null;
							     var readerName;
							     fullName = fullName.$replace ('\\', '/');
							     var errMsg = null;
							     if (type != null) {
								 readerName = org.jmol.adapter.smarter.Resolver.getReaderFromType (type);
								 if (readerName == null) errMsg = "unrecognized file format type " + type;
								 else org.jmol.util.Logger.info ("The Resolver assumes " + readerName);
							     } else {
								 readerName = org.jmol.adapter.smarter.Resolver.determineAtomSetCollectionReader (bufferedReader, true);
								 if (readerName.charAt (0) == '\n') {
								     type = htParams.get ("defaultType");
								     if (type != null) {
									 type = org.jmol.adapter.smarter.Resolver.getReaderFromType (type);
									 if (type != null) readerName = type;
								     }}if (readerName.charAt (0) == '\n') errMsg = "unrecognized file format for file " + fullName + "\n" + readerName;
								 else if (readerName.equals ("spt")) errMsg = "NOTE: file recognized as a script file: " + fullName + "\n";
								 else if (!fullName.equals ("ligand")) org.jmol.util.Logger.info ("The Resolver thinks " + readerName);
							     }if (errMsg != null) {
								 bufferedReader.close ();
								 return errMsg;
							     }htParams.put ("ptFile", Integer.$valueOf (ptFile));
							     if (ptFile <= 0) htParams.put ("readerName", readerName);
							     if (readerName.indexOf ("Xml") == 0) readerName = "Xml";
							     var className = null;
							     var atomSetCollectionReaderClass;
							     var err = null;
							     try {
								 try {
								     className = org.jmol.adapter.smarter.Resolver.getReaderClassBase (readerName);
								     atomSetCollectionReaderClass = Class.forName (className);
								     atomSetCollectionReader = atomSetCollectionReaderClass.newInstance ();
								 } catch (e) {
								     if (Clazz.exceptionOf (e, Exception)) {
									 err = "File reader was not found:" + className;
									 org.jmol.util.Logger.error (err);
									 return err;
								     } else {
									 throw e;
								     }
								 }
								 return atomSetCollectionReader;
							     } catch (e) {
								 if (Clazz.exceptionOf (e, Exception)) {
								     err = "uncaught error in file loading for " + className;
								     org.jmol.util.Logger.error (err);
								     System.out.println (e.getMessage ());
								     return err;
								 } else {
								     throw e;
								 }
							     }
							 }, "~S,~S,java.io.BufferedReader,java.util.Map,~N");
	c$.DOMResolve = Clazz.defineMethod (c$, "DOMResolve", 
					    function (DOMNode, htParams) {
						var className = null;
						var atomSetCollectionReaderClass;
						var atomSetCollectionReader;
						var atomSetCollectionReaderName = org.jmol.adapter.smarter.Resolver.getXmlType (htParams.get ("nameSpaceInfo"));
						if (org.jmol.util.Logger.debugging) {
						    org.jmol.util.Logger.debug ("The Resolver thinks " + atomSetCollectionReaderName);
						}htParams.put ("readerName", atomSetCollectionReaderName);
						try {
						    className = "org.jmol.adapter.readers.xml.XmlReader";
						    atomSetCollectionReaderClass = Class.forName (className);
						    atomSetCollectionReader = atomSetCollectionReaderClass.newInstance ();
						    return atomSetCollectionReader;
						} catch (e) {
						    if (Clazz.exceptionOf (e, Exception)) {
							var err = "File reader was not found:" + className;
							org.jmol.util.Logger.errorEx (err, e);
							return err;
						    } else {
							throw e;
						    }
						}
					    }, "~O,java.util.Map");
	c$.determineAtomSetCollectionReader = Clazz.defineMethod (c$, "determineAtomSetCollectionReader", 
								  ($fz = function (bufferedReader, returnLines) {
								      var llr =  new org.jmol.io.LimitedLineReader (bufferedReader, 16384);
								      var leader = llr.getHeader (64).trim ();
								      for (var i = 0; i < org.jmol.adapter.smarter.Resolver.fileStartsWithRecords.length; ++i) {
									  var recordTags = org.jmol.adapter.smarter.Resolver.fileStartsWithRecords[i];
									  for (var j = 1; j < recordTags.length; ++j) {
									      var recordTag = recordTags[j];
									      if (leader.startsWith (recordTag)) return recordTags[0];
									  }
								      }
								      if (leader.indexOf ("PNG") == 1 && leader.indexOf ("PNGJ") >= 0) return "pngj";
								      if (leader.indexOf ("PNG") == 1 || leader.indexOf ("JPG") == 1 || leader.indexOf ("JFIF") == 6) return "spt";
								      if (leader.startsWith ("##TITLE")) return "Jcampdx";
								      var lines =  new Array (16);
								      var nLines = 0;
								      for (var i = 0; i < lines.length; ++i) {
									  lines[i] = llr.readLineWithNewline ();
									  if (lines[i].length > 0) nLines++;
								      }
								      var readerName;
								      if ((readerName = org.jmol.adapter.smarter.Resolver.checkSpecial (nLines, lines, false)) != null) return readerName;
								      if ((readerName = org.jmol.adapter.smarter.Resolver.checkLineStarts (lines)) != null) return readerName;
								      if ((readerName = org.jmol.adapter.smarter.Resolver.checkHeaderContains (llr.getHeader (0))) != null) return readerName;
								      if ((readerName = org.jmol.adapter.smarter.Resolver.checkSpecial (nLines, lines, true)) != null) return readerName;
								      return (returnLines ? "\n" + lines[0] + "\n" + lines[1] + "\n" + lines[2] + "\n" : null);
								  }, $fz.isPrivate = true, $fz), "java.io.BufferedReader,~B");
	c$.checkHeaderContains = Clazz.defineMethod (c$, "checkHeaderContains", 
						     ($fz = function (header) {
							 for (var i = 0; i < org.jmol.adapter.smarter.Resolver.headerContainsRecords.length; ++i) {
							     var recordTags = org.jmol.adapter.smarter.Resolver.headerContainsRecords[i];
							     for (var j = 1; j < recordTags.length; ++j) {
								 var recordTag = recordTags[j];
								 if (header.indexOf (recordTag) < 0) continue;
								 var type = recordTags[0];
								 return (!type.equals ("Xml") ? type : header.indexOf ("<!DOCTYPE HTML PUBLIC") < 0 && header.indexOf ("XHTML") < 0 && (header.indexOf ("xhtml") < 0 || header.indexOf ("<cml") >= 0) ? org.jmol.adapter.smarter.Resolver.getXmlType (header) : null);
							     }
							 }
							 return null;
						     }, $fz.isPrivate = true, $fz), "~S");
	c$.checkLineStarts = Clazz.defineMethod (c$, "checkLineStarts", 
						 ($fz = function (lines) {
						     for (var i = 0; i < org.jmol.adapter.smarter.Resolver.lineStartsWithRecords.length; ++i) {
							 var recordTags = org.jmol.adapter.smarter.Resolver.lineStartsWithRecords[i];
							 for (var j = 1; j < recordTags.length; ++j) {
							     var recordTag = recordTags[j];
							     for (var k = 0; k < lines.length; ++k) {
								 if (lines[k].startsWith (recordTag)) return recordTags[0];
							     }
							 }
						     }
						     return null;
						 }, $fz.isPrivate = true, $fz), "~A");
	c$.getXmlType = Clazz.defineMethod (c$, "getXmlType", 
					    ($fz = function (header) {
						if (header.indexOf ("http://www.molpro.net/") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[18][0];
						}if (header.indexOf ("odyssey") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[19][0];
						}if (header.indexOf ("C3XML") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[17][0];
						}if (header.indexOf ("arguslab") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[15][0];
						}if (header.indexOf ("jvxl") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[16][0];
						}if (header.indexOf ("http://www.xml-cml.org/schema") >= 0 || header.indexOf ("cml:") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[16][0];
						}if (header.indexOf ("XSD") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[20][0];
						}if (header.indexOf (">vasp") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[21][0];
						}if (header.indexOf ("<GEOMETRY_INFO>") >= 0) {
						    return org.jmol.adapter.smarter.Resolver.specialTags[22][0];
						}return org.jmol.adapter.smarter.Resolver.specialTags[16][0] + "(unidentified)";
					    }, $fz.isPrivate = true, $fz), "~S");
	c$.getReaderFromType = Clazz.defineMethod (c$, "getReaderFromType", 
						   ($fz = function (type) {
						       type = type.toLowerCase ();
						       var base = null;
						       if ((base = org.jmol.adapter.smarter.Resolver.checkType (org.jmol.adapter.smarter.Resolver.specialTags, type)) != null) return base;
						       if ((base = org.jmol.adapter.smarter.Resolver.checkType (org.jmol.adapter.smarter.Resolver.fileStartsWithRecords, type)) != null) return base;
						       if ((base = org.jmol.adapter.smarter.Resolver.checkType (org.jmol.adapter.smarter.Resolver.lineStartsWithRecords, type)) != null) return base;
						       return org.jmol.adapter.smarter.Resolver.checkType (org.jmol.adapter.smarter.Resolver.headerContainsRecords, type);
						   }, $fz.isPrivate = true, $fz), "~S");
	c$.checkType = Clazz.defineMethod (c$, "checkType", 
					   ($fz = function (typeTags, type) {
					       for (var i = 0; i < typeTags.length; ++i) if (typeTags[i][0].toLowerCase ().equals (type)) return typeTags[i][0];

					       return null;
					   }, $fz.isPrivate = true, $fz), "~A,~S");
	c$.checkSpecial = Clazz.defineMethod (c$, "checkSpecial", 
					      ($fz = function (nLines, lines, isEnd) {
						  if (isEnd) {
						      if (org.jmol.adapter.smarter.Resolver.checkGromacs (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[13][0];
						      if (org.jmol.adapter.smarter.Resolver.checkCrystal (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[12][0];
						      if (org.jmol.adapter.smarter.Resolver.checkCastep (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[10][0];
						  } else {
						      if (nLines == 1 && lines[0].length > 0 && Character.isDigit (lines[0].charAt (0))) return org.jmol.adapter.smarter.Resolver.specialTags[0][0];
						      if (org.jmol.adapter.smarter.Resolver.checkMopacGraphf (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[1][0];
						      if (org.jmol.adapter.smarter.Resolver.checkOdyssey (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[3][0];
						      if (org.jmol.adapter.smarter.Resolver.checkMol (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[4][0];
						      if (org.jmol.adapter.smarter.Resolver.checkXyz (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[5][0];
						      if (org.jmol.adapter.smarter.Resolver.checkAlchemy (lines[0])) return org.jmol.adapter.smarter.Resolver.specialTags[8][0];
						      if (org.jmol.adapter.smarter.Resolver.checkFoldingXyz (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[6][0];
						      if (org.jmol.adapter.smarter.Resolver.checkCube (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[7][0];
						      if (org.jmol.adapter.smarter.Resolver.checkWien2k (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[9][0];
						      if (org.jmol.adapter.smarter.Resolver.checkAims (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[11][0];
						      if (org.jmol.adapter.smarter.Resolver.checkGenNBO (lines)) return org.jmol.adapter.smarter.Resolver.specialTags[14][0];
						  }return null;
					      }, $fz.isPrivate = true, $fz), "~N,~A,~B");
	c$.checkAims = Clazz.defineMethod (c$, "checkAims", 
					   ($fz = function (lines) {
					       for (var i = 0; i < lines.length; i++) {
						   if (lines[i].startsWith ("mol 1")) return false;
						   var tokens = org.jmol.util.Parser.getTokens (lines[i]);
						   if (tokens.length == 0) continue;
						   if (tokens[0].startsWith ("atom") && tokens.length >= 5 || tokens[0].startsWith ("multipole") && tokens.length >= 6 || tokens[0].startsWith ("lattice_vector") && tokens.length >= 4) return true;
					       }
					       return false;
					   }, $fz.isPrivate = true, $fz), "~A");
	c$.checkAlchemy = Clazz.defineMethod (c$, "checkAlchemy", 
					      ($fz = function (line) {
						  var pt;
						  if ((pt = line.indexOf ("ATOMS")) >= 0 && line.indexOf ("BONDS") > pt) try {
						      var n = Integer.parseInt (line.substring (0, pt).trim ());
						      return (n > 0);
						  } catch (nfe) {
						      if (Clazz.exceptionOf (nfe, NumberFormatException)) {
						      } else {
							  throw nfe;
						      }
						  }
						  return false;
					      }, $fz.isPrivate = true, $fz), "~S");
	c$.checkCastep = Clazz.defineMethod (c$, "checkCastep", 
					     ($fz = function (lines) {
						 for (var i = 0; i < lines.length; i++) {
						     if (lines[i].indexOf ("Frequencies in         cm-1") == 1 || lines[i].contains ("CASTEP") || lines[i].toUpperCase ().startsWith ("%BLOCK LATTICE_ABC") || lines[i].toUpperCase ().startsWith ("%BLOCK LATTICE_CART") || lines[i].toUpperCase ().startsWith ("%BLOCK POSITIONS_FRAC") || lines[i].toUpperCase ().startsWith ("%BLOCK POSITIONS_ABS") || lines[i].contains ("<-- E")) return true;
						 }
						 return false;
					     }, $fz.isPrivate = true, $fz), "~A");
	c$.checkCrystal = Clazz.defineMethod (c$, "checkCrystal", 
					      ($fz = function (lines) {
						  var s = lines[1].trim ();
						  if (s.equals ("SLAB") || s.equals ("MOLECULE") || s.equals ("CRYSTAL") || s.equals ("POLYMER") || (s = lines[3]).equals ("SLAB") || s.equals ("MOLECULE") || s.equals ("POLYMER")) return true;
						  for (var i = 0; i < lines.length; i++) {
						      if (lines[i].trim ().equals ("OPTGEOM")) return true;
						  }
						  return false;
					      }, $fz.isPrivate = true, $fz), "~A");
	c$.checkCube = Clazz.defineMethod (c$, "checkCube", 
					   ($fz = function (lines) {
					       try {
						   var tokens2 =  new java.util.StringTokenizer (lines[2]);
						   if (tokens2.countTokens () != 4) return false;
						   Integer.parseInt (tokens2.nextToken ());
						   for (var i = 3; --i >= 0; )  new Float (tokens2.nextToken ());

						   var tokens3 =  new java.util.StringTokenizer (lines[3]);
						   if (tokens3.countTokens () != 4) return false;
						   Integer.parseInt (tokens3.nextToken ());
						   for (var i = 3; --i >= 0; ) if (( new Float (tokens3.nextToken ())).floatValue () < 0) return false;

						   return true;
					       } catch (nfe) {
						   if (Clazz.exceptionOf (nfe, NumberFormatException)) {
						   } else {
						       throw nfe;
						   }
					       }
					       return false;
					   }, $fz.isPrivate = true, $fz), "~A");
	c$.checkFoldingXyz = Clazz.defineMethod (c$, "checkFoldingXyz", 
						 ($fz = function (lines) {
						     var tokens =  new java.util.StringTokenizer (lines[0].trim (), " \t");
						     if (tokens.countTokens () < 2) return false;
						     try {
							 Integer.parseInt (tokens.nextToken ().trim ());
						     } catch (nfe) {
							 if (Clazz.exceptionOf (nfe, NumberFormatException)) {
							     return false;
							 } else {
							     throw nfe;
							 }
						     }
						     var secondLine = lines[1].trim ();
						     if (secondLine.length == 0) secondLine = lines[2].trim ();
						     tokens =  new java.util.StringTokenizer (secondLine, " \t");
						     if (tokens.countTokens () == 0) return false;
						     try {
							 Integer.parseInt (tokens.nextToken ().trim ());
						     } catch (nfe) {
							 if (Clazz.exceptionOf (nfe, NumberFormatException)) {
							     return false;
							 } else {
							     throw nfe;
							 }
						     }
						     return true;
						 }, $fz.isPrivate = true, $fz), "~A");
	c$.checkGenNBO = Clazz.defineMethod (c$, "checkGenNBO", 
					     ($fz = function (lines) {
						 return (lines[1].startsWith (" Basis set information needed for plotting orbitals") || lines[1].indexOf ("s in the AO basis:") >= 0 || lines[2].indexOf (" N A T U R A L   A T O M I C   O R B I T A L") >= 0);
					     }, $fz.isPrivate = true, $fz), "~A");
	c$.checkGromacs = Clazz.defineMethod (c$, "checkGromacs", 
					      ($fz = function (lines) {
						  if (org.jmol.util.Parser.parseInt (lines[1]) == -2147483648) return false;
						  var len = -1;
						  for (var i = 2; i < 16 && len != 0; i++) if ((len = lines[i].length) != 69 && len != 45 && len != 0) return false;

						  return true;
					      }, $fz.isPrivate = true, $fz), "~A");
	c$.checkMol = Clazz.defineMethod (c$, "checkMol", 
					  ($fz = function (lines) {
					      var line4trimmed = ("X" + lines[3]).trim ().toUpperCase ();
					      if (line4trimmed.length < 7 || line4trimmed.indexOf (".") >= 0) return false;
					      if (line4trimmed.endsWith ("V2000") || line4trimmed.endsWith ("V3000")) return true;
					      try {
						  var n1 = Integer.parseInt (lines[3].substring (0, 3).trim ());
						  var n2 = Integer.parseInt (lines[3].substring (3, 6).trim ());
						  return (n1 > 0 && n2 >= 0 && lines[0].indexOf ("@<TRIPOS>") != 0 && lines[1].indexOf ("@<TRIPOS>") != 0 && lines[2].indexOf ("@<TRIPOS>") != 0);
					      } catch (nfe) {
						  if (Clazz.exceptionOf (nfe, NumberFormatException)) {
						  } else {
						      throw nfe;
						  }
					      }
					      return false;
					  }, $fz.isPrivate = true, $fz), "~A");
	c$.checkMopacGraphf = Clazz.defineMethod (c$, "checkMopacGraphf", 
						  ($fz = function (lines) {
						      return (lines[0].indexOf ("MOPAC-Graphical data") > 2);
						  }, $fz.isPrivate = true, $fz), "~A");
	c$.checkOdyssey = Clazz.defineMethod (c$, "checkOdyssey", 
					      ($fz = function (lines) {
						  var i;
						  for (i = 0; i < lines.length; i++) if (!lines[i].startsWith ("C ") && lines[i].length != 0) break;

						  if (i >= lines.length || lines[i].charAt (0) != ' ' || (i = i + 2) + 1 >= lines.length) return false;
						  try {
						      var spin = Integer.parseInt (lines[i].substring (2).trim ());
						      var charge = Integer.parseInt (lines[i].substring (0, 2).trim ());
						      var atom1 = Integer.parseInt (lines[++i].substring (0, 2).trim ());
						      if (spin < 0 || spin > 5 || atom1 <= 0 || charge > 5) return false;
						      var atomline = org.jmol.adapter.smarter.AtomSetCollectionReader.getTokensFloat (lines[i], null, 5);
						      return !Float.isNaN (atomline[1]) && !Float.isNaN (atomline[2]) && !Float.isNaN (atomline[3]) && Float.isNaN (atomline[4]);
						  } catch (e) {
						      if (Clazz.exceptionOf (e, Exception)) {
						      } else {
							  throw e;
						      }
						  }
						  return false;
					      }, $fz.isPrivate = true, $fz), "~A");
	c$.checkWien2k = Clazz.defineMethod (c$, "checkWien2k", 
					     ($fz = function (lines) {
						 return (lines[2].startsWith ("MODE OF CALC=") || lines[2].startsWith ("             RELA") || lines[2].startsWith ("             NREL"));
					     }, $fz.isPrivate = true, $fz), "~A");
	c$.checkXyz = Clazz.defineMethod (c$, "checkXyz", 
					  ($fz = function (lines) {
					      try {
						  Integer.parseInt (lines[0].trim ());
						  return true;
					      } catch (nfe) {
						  if (Clazz.exceptionOf (nfe, NumberFormatException)) {
						  } else {
						      throw nfe;
						  }
					      }
					      return false;
					  }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineStatics (c$,
			     "classBase", "org.jmol.adapter.readers.");
	c$.readerSets = c$.prototype.readerSets = ["cifpdb.", ";Cif;Pdb;", "molxyz.", ";Mol3D;Mol;Xyz;", "more.", ";BinaryDcd;Gromacs;Jcampdx;MdCrd;MdTop;Mol2;Pqr;P2n;TlsDataOnly;", "quantum.", ";Adf;Csf;Dgrid;GamessUK;GamessUS;Gaussian;GausianWfn;Jaguar;Molden;MopacGraphf;GenNBO;NWChem;Odyssey;Psi;Qchem;Spartan;SpartanSmol;WebMO;", "simple.", ";Alchemy;Ampac;Cube;FoldingXyz;GhemicalMM;HyperChem;Jme;Mopac;MopacArchive;ZMatrix;", "xtal.", ";Aims;Castep;Crystal;Dmol;Espresso;Gulp;MagRes;Shelx;Siesta;VaspOutcar;Wien2k;"];
	Clazz.defineStatics (c$,
			     "CML_NAMESPACE_URI", "http://www.xml-cml.org/schema",
			     "SPECIAL_JME", 0,
			     "SPECIAL_MOPACGRAPHF", 1,
			     "SPECIAL_ODYSSEY", 3,
			     "SPECIAL_MOL", 4,
			     "SPECIAL_XYZ", 5,
			     "SPECIAL_FOLDINGXYZ", 6,
			     "SPECIAL_CUBE", 7,
			     "SPECIAL_ALCHEMY", 8,
			     "SPECIAL_WIEN", 9,
			     "SPECIAL_CASTEP", 10,
			     "SPECIAL_AIMS", 11,
			     "SPECIAL_CRYSTAL", 12,
			     "SPECIAL_GROMACS", 13,
			     "SPECIAL_GENNBO", 14,
			     "SPECIAL_ARGUS_XML", 15,
			     "SPECIAL_CML_XML", 16,
			     "SPECIAL_CHEM3D_XML", 17,
			     "SPECIAL_MOLPRO_XML", 18,
			     "SPECIAL_ODYSSEY_XML", 19,
			     "SPECIAL_XSD_XML", 20,
			     "SPECIAL_VASP_XML", 21,
			     "SPECIAL_QE_XML", 22,
			     "SPECIAL_ARGUS_DOM", 23,
			     "SPECIAL_CML_DOM", 24,
			     "SPECIAL_CHEM3D_DOM", 25,
			     "SPECIAL_MOLPRO_DOM", 26,
			     "SPECIAL_ODYSSEY_DOM", 27,
			     "SPECIAL_XSD_DOM", 28,
			     "SPECIAL_VASP_DOM", 29,
			     "specialTags", [["Jme"], ["MopacGraphf"], ["Mol3D"], ["Odyssey"], ["Mol"], ["Xyz"], ["FoldingXyz"], ["Cube"], ["Alchemy"], ["Wien2k"], ["Castep"], ["Aims"], ["Crystal"], ["Gromacs"], ["GenNBO"], ["XmlArgus"], ["XmlCml"], ["XmlChem3d"], ["XmlMolpro"], ["XmlOdyssey"], ["XmlXsd"], ["XmlVasp"], ["XmlQE"], ["XmlArgus(DOM)"], ["XmlCml(DOM)"], ["XmlChem3d(DOM)"], ["XmlMolpro(DOM)"], ["XmlOdyssey(DOM)"], ["XmlXsd(DOM)"], ["XmlVasp(DOM)"], ["MdCrd"]],
			     "LEADER_CHAR_MAX", 64,
			     "sptContainsRecords", ["spt", "# Jmol state", "# Jmol script"],
			     "cubeFileStartRecords", ["Cube", "JVXL", "#JVXL"],
			     "mol2Records", ["Mol2", "mol2", "@<TRIPOS>"],
			     "webmoFileStartRecords", ["WebMO", "[HEADER]"],
			     "moldenFileStartRecords", ["Molden", "[Molden"],
			     "dcdFileStartRecords", ["BinaryDcd", "T\0\0\0CORD", "\0\0\0TCORD"],
			     "tlsDataOnlyFileStartRecords", ["TlsDataOnly", "REFMAC\n\nTL", "REFMAC\r\n\r\n", "REFMAC\r\rTL"],
			     "zMatrixFileStartRecords", ["ZMatrix", "#ZMATRIX"],
			     "magResFileStartRecords", ["MagRes", "# magres"]);
	c$.fileStartsWithRecords = c$.prototype.fileStartsWithRecords = [org.jmol.adapter.smarter.Resolver.sptContainsRecords, org.jmol.adapter.smarter.Resolver.cubeFileStartRecords, org.jmol.adapter.smarter.Resolver.mol2Records, org.jmol.adapter.smarter.Resolver.webmoFileStartRecords, org.jmol.adapter.smarter.Resolver.moldenFileStartRecords, org.jmol.adapter.smarter.Resolver.dcdFileStartRecords, org.jmol.adapter.smarter.Resolver.tlsDataOnlyFileStartRecords, org.jmol.adapter.smarter.Resolver.zMatrixFileStartRecords, org.jmol.adapter.smarter.Resolver.magResFileStartRecords];
	Clazz.defineStatics (c$,
			     "pqrLineStartRecords", ["Pqr", "REMARK   1 PQR"],
			     "p2nLineStartRecords", ["P2n", "REMARK   1 P2N"],
			     "pdbLineStartRecords", ["Pdb", "HEADER", "OBSLTE", "TITLE ", "CAVEAT", "COMPND", "SOURCE", "KEYWDS", "EXPDTA", "AUTHOR", "REVDAT", "SPRSDE", "JRNL  ", "REMARK ", "DBREF ", "SEQADV", "SEQRES", "MODRES", "HELIX ", "SHEET ", "TURN  ", "CRYST1", "ORIGX1", "ORIGX2", "ORIGX3", "SCALE1", "SCALE2", "SCALE3", "ATOM  ", "HETATM", "MODEL ", "LINK  "],
			     "shelxLineStartRecords", ["Shelx", "TITL ", "ZERR ", "LATT ", "SYMM ", "CELL "],
			     "cifLineStartRecords", ["Cif", "data_", "_publ"],
			     "ghemicalMMLineStartRecords", ["GhemicalMM", "!Header mm1gp", "!Header gpr"],
			     "jaguarLineStartRecords", ["Jaguar", "  |  Jaguar version"],
			     "mdlLineStartRecords", ["Mol", "$MDL "],
			     "spartanSmolLineStartRecords", ["SpartanSmol", "INPUT="],
			     "csfLineStartRecords", ["Csf", "local_transform"],
			     "mdTopLineStartRecords", ["MdTop", "%FLAG TITLE"],
			     "hyperChemLineStartRecords", ["HyperChem", "mol 1"],
			     "vaspOutcarLineStartRecords", ["VaspOutcar", " vasp.", " INCAR:"]);
	c$.lineStartsWithRecords = c$.prototype.lineStartsWithRecords = [org.jmol.adapter.smarter.Resolver.cifLineStartRecords, org.jmol.adapter.smarter.Resolver.pqrLineStartRecords, org.jmol.adapter.smarter.Resolver.p2nLineStartRecords, org.jmol.adapter.smarter.Resolver.pdbLineStartRecords, org.jmol.adapter.smarter.Resolver.shelxLineStartRecords, org.jmol.adapter.smarter.Resolver.ghemicalMMLineStartRecords, org.jmol.adapter.smarter.Resolver.jaguarLineStartRecords, org.jmol.adapter.smarter.Resolver.mdlLineStartRecords, org.jmol.adapter.smarter.Resolver.spartanSmolLineStartRecords, org.jmol.adapter.smarter.Resolver.csfLineStartRecords, org.jmol.adapter.smarter.Resolver.mol2Records, org.jmol.adapter.smarter.Resolver.mdTopLineStartRecords, org.jmol.adapter.smarter.Resolver.hyperChemLineStartRecords, org.jmol.adapter.smarter.Resolver.vaspOutcarLineStartRecords];
	Clazz.defineStatics (c$,
			     "xmlContainsRecords", ["Xml", "<?xml", "<atom", "<molecule", "<reaction", "<cml", "<bond", ".dtd\"", "<list>", "<entry", "<identifier", "http://www.xml-cml.org/schema/cml2/core"],
			     "gaussianContainsRecords", ["Gaussian", "Entering Gaussian System", "Entering Link 1", "1998 Gaussian, Inc."],
			     "ampacContainsRecords", ["Ampac", "AMPAC Version"],
			     "mopacContainsRecords", ["Mopac", "MOPAC 93 (c) Fujitsu", "MOPAC2002 (c) Fujitsu", "MOPAC FOR LINUX (PUBLIC DOMAIN VERSION)", "MOPAC:  VERSION  6", "MOPAC   7", "MOPAC2009", "MOPAC (PUBLIC"],
			     "qchemContainsRecords", ["Qchem", "Welcome to Q-Chem", "A Quantum Leap Into The Future Of Chemistry"],
			     "gamessUKContainsRecords", ["GamessUK", "GAMESS-UK", "G A M E S S - U K"],
			     "gamessUSContainsRecords", ["GamessUS", "GAMESS"],
			     "spartanBinaryContainsRecords", ["SpartanSmol", "|PropertyArchive", "_spartan", "spardir", "BEGIN Directory Entry Molecule"],
			     "spartanContainsRecords", ["Spartan", "Spartan"],
			     "adfContainsRecords", ["Adf", "Amsterdam Density Functional"],
			     "dgridContainsRecords", ["Dgrid", "BASISFILE   created by DGrid"],
			     "dmolContainsRecords", ["Dmol", "DMol^3"],
			     "gulpContainsRecords", ["Gulp", "GENERAL UTILITY LATTICE PROGRAM"],
			     "psiContainsRecords", ["Psi", "    PSI  3", "PSI3:"],
			     "nwchemContainsRecords", ["NWChem", " argument  1 = "],
			     "uicrcifContainsRecords", ["Cif", "Crystallographic Information File"],
			     "crystalContainsRecords", ["Crystal", "*                                CRYSTAL"],
			     "espressoContainsRecords", ["Espresso", "Program PWSCF", "Program PHONON"],
			     "siestaContainsRecords", ["Siesta", "MD.TypeOfRun", "SolutionMethod", "MeshCutoff", "WELCOME TO SIESTA"],
			     "mopacArchiveContainsRecords", ["MopacArchive", "SUMMARY OF PM"]);
	c$.headerContainsRecords = c$.prototype.headerContainsRecords = [org.jmol.adapter.smarter.Resolver.sptContainsRecords, org.jmol.adapter.smarter.Resolver.xmlContainsRecords, org.jmol.adapter.smarter.Resolver.gaussianContainsRecords, org.jmol.adapter.smarter.Resolver.ampacContainsRecords, org.jmol.adapter.smarter.Resolver.mopacContainsRecords, org.jmol.adapter.smarter.Resolver.qchemContainsRecords, org.jmol.adapter.smarter.Resolver.gamessUKContainsRecords, org.jmol.adapter.smarter.Resolver.gamessUSContainsRecords, org.jmol.adapter.smarter.Resolver.spartanBinaryContainsRecords, org.jmol.adapter.smarter.Resolver.spartanContainsRecords, org.jmol.adapter.smarter.Resolver.mol2Records, org.jmol.adapter.smarter.Resolver.adfContainsRecords, org.jmol.adapter.smarter.Resolver.psiContainsRecords, org.jmol.adapter.smarter.Resolver.nwchemContainsRecords, org.jmol.adapter.smarter.Resolver.uicrcifContainsRecords, org.jmol.adapter.smarter.Resolver.dgridContainsRecords, org.jmol.adapter.smarter.Resolver.crystalContainsRecords, org.jmol.adapter.smarter.Resolver.dmolContainsRecords, org.jmol.adapter.smarter.Resolver.gulpContainsRecords, org.jmol.adapter.smarter.Resolver.espressoContainsRecords, org.jmol.adapter.smarter.Resolver.siestaContainsRecords, org.jmol.adapter.smarter.Resolver.mopacArchiveContainsRecords];
    });
    // 
    //// org\jmol\api\JmolAdapterStructureIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    c$ = Clazz.declareType (org.jmol.api, "JmolAdapterStructureIterator");
    // 
    //// org\jmol\adapter\smarter\StructureIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.api.JmolAdapterStructureIterator"], "org.jmol.adapter.smarter.StructureIterator", ["org.jmol.api.JmolAdapter"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.structureCount = 0;
	    this.structures = null;
	    this.structure = null;
	    this.istructure = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "StructureIterator", org.jmol.api.JmolAdapterStructureIterator);
	Clazz.makeConstructor (c$, 
			       function (atomSetCollection) {
				   Clazz.superConstructor (this, org.jmol.adapter.smarter.StructureIterator, []);
				   this.structureCount = atomSetCollection.getStructureCount ();
				   this.structures = atomSetCollection.getStructures ();
				   this.istructure = 0;
			       }, "org.jmol.adapter.smarter.AtomSetCollection");
	Clazz.overrideMethod (c$, "hasNext", 
			      function () {
				  if (this.istructure == this.structureCount) return false;
				  this.structure = this.structures[this.istructure++];
				  return true;
			      });
	Clazz.overrideMethod (c$, "getModelIndex", 
			      function () {
				  return this.structure.atomSetIndex;
			      });
	Clazz.overrideMethod (c$, "getStructureType", 
			      function () {
				  return this.structure.structureType;
			      });
	Clazz.overrideMethod (c$, "getSubstructureType", 
			      function () {
				  return this.structure.substructureType;
			      });
	Clazz.overrideMethod (c$, "getStructureID", 
			      function () {
				  return this.structure.structureID;
			      });
	Clazz.overrideMethod (c$, "getSerialID", 
			      function () {
				  return this.structure.serialID;
			      });
	Clazz.overrideMethod (c$, "getStartChainID", 
			      function () {
				  return org.jmol.api.JmolAdapter.canonizeChainID (this.structure.startChainID);
			      });
	Clazz.overrideMethod (c$, "getStartSequenceNumber", 
			      function () {
				  return this.structure.startSequenceNumber;
			      });
	Clazz.overrideMethod (c$, "getStartInsertionCode", 
			      function () {
				  return org.jmol.api.JmolAdapter.canonizeInsertionCode (this.structure.startInsertionCode);
			      });
	Clazz.overrideMethod (c$, "getEndChainID", 
			      function () {
				  return org.jmol.api.JmolAdapter.canonizeChainID (this.structure.endChainID);
			      });
	Clazz.overrideMethod (c$, "getEndSequenceNumber", 
			      function () {
				  return this.structure.endSequenceNumber;
			      });
	Clazz.overrideMethod (c$, "getEndInsertionCode", 
			      function () {
				  return this.structure.endInsertionCode;
			      });
	Clazz.overrideMethod (c$, "getStrandCount", 
			      function () {
				  return this.structure.strandCount;
			      });
    });
    // 
    //// org\jmol\modelset\Group.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["java.lang.Short", "java.util.Hashtable", "org.jmol.viewer.JmolConstants"], "org.jmol.modelset.Group", ["java.lang.Float", "org.jmol.constant.EnumStructure", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Logger", "$.Point3f", "$.Quaternion", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.groupIndex = 0;
	    this.chain = null;
	    this.firstAtomIndex = -1;
	    this.leadAtomIndex = -1;
	    this.lastAtomIndex = 0;
	    this.seqcode = 0;
	    this.groupID = 0;
	    this.$isProtein = false;
	    this.selectedIndex = 0;
	    this.shapeVisibilityFlags = 0;
	    this.phi = NaN;
	    this.psi = NaN;
	    this.omega = NaN;
	    this.straightness = NaN;
	    this.mu = NaN;
	    this.theta = NaN;
	    this.bsAdded = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "Group");
	Clazz.defineMethod (c$, "getGroupIndex", 
			    function () {
				return this.groupIndex;
			    });
	Clazz.defineMethod (c$, "setGroupIndex", 
			    function (groupIndex) {
				this.groupIndex = groupIndex;
			    }, "~N");
	Clazz.defineMethod (c$, "calcBioParameters", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "haveParameters", 
			    function () {
				return true;
			    });
	Clazz.defineMethod (c$, "setGroupParameter", 
			    function (tok, f) {
				switch (tok) {
				case 1112539143:
				    this.phi = f;
				    break;
				case 1112539144:
				    this.psi = f;
				    break;
				case 1112539142:
				    this.omega = f;
				    break;
				case 1112539140:
				    this.mu = f;
				    break;
				case 1112539150:
				    this.theta = f;
				    break;
				case 1112539148:
				    this.straightness = f;
				    break;
				}
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getGroupParameter", 
			    function (tok) {
				if (!this.haveParameters ()) this.calcBioParameters ();
				switch (tok) {
				case 1112539142:
				    return this.omega;
				case 1112539143:
				    return this.phi;
				case 1112539144:
				    return this.psi;
				case 1112539140:
				    return this.mu;
				case 1112539150:
				    return this.theta;
				case 1112539148:
				    return this.straightness;
				}
				return NaN;
			    }, "~N");
	Clazz.makeConstructor (c$, 
			       function (chain, group3, seqcode, firstAtomIndex, lastAtomIndex) {
				   this.chain = chain;
				   this.seqcode = seqcode;
				   if (group3 == null) group3 = "";
				   this.groupID = org.jmol.modelset.Group.getGroupID (group3);
				   this.$isProtein = (this.groupID >= 1 && this.groupID < 24);
				   this.firstAtomIndex = firstAtomIndex;
				   this.lastAtomIndex = lastAtomIndex;
			       }, "org.jmol.modelset.Chain,~S,~N,~N,~N");
	Clazz.defineMethod (c$, "setModelSet", 
			    function (modelSet) {
				this.chain.model.modelSet = modelSet;
			    }, "org.jmol.modelset.ModelSet");
	Clazz.defineMethod (c$, "setShapeVisibility", 
			    function (visFlag, isVisible) {
				if (isVisible) {
				    this.shapeVisibilityFlags |= visFlag;
				} else {
				    this.shapeVisibilityFlags &= ~visFlag;
				}}, "~N,~B");
	Clazz.defineMethod (c$, "getGroup3", 
			    function () {
				return org.jmol.modelset.Group.group3Names[this.groupID];
			    });
	c$.getGroup3 = Clazz.defineMethod (c$, "getGroup3", 
					   function (groupID) {
					       return org.jmol.modelset.Group.group3Names[groupID];
					   }, "~N");
	Clazz.defineMethod (c$, "getGroup1", 
			    function () {
				if (this.groupID >= org.jmol.viewer.JmolConstants.predefinedGroup1Names.length) return '?';
				return org.jmol.viewer.JmolConstants.predefinedGroup1Names[this.groupID];
			    });
	Clazz.defineMethod (c$, "getGroupID", 
			    function () {
				return this.groupID;
			    });
	Clazz.defineMethod (c$, "getChainID", 
			    function () {
				return this.chain.chainID;
			    });
	Clazz.defineMethod (c$, "getBioPolymerLength", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "getMonomerIndex", 
			    function () {
				return -1;
			    });
	Clazz.defineMethod (c$, "getGroups", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getStructure", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getStrucNo", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "getProteinStructureType", 
			    function () {
				return org.jmol.constant.EnumStructure.NOT;
			    });
	Clazz.defineMethod (c$, "getProteinStructureSubType", 
			    function () {
				return this.getProteinStructureType ();
			    });
	Clazz.defineMethod (c$, "setProteinStructureType", 
			    function (type, monomerIndexCurrent) {
				return -1;
			    }, "org.jmol.constant.EnumStructure,~N");
	Clazz.defineMethod (c$, "isProtein", 
			    function () {
				return this.$isProtein;
			    });
	Clazz.defineMethod (c$, "isNucleic", 
			    function () {
				return (this.groupID >= 24 && this.groupID < 42);
			    });
	Clazz.defineMethod (c$, "isDna", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "isRna", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "isPurine", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "isPyrimidine", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "isCarbohydrate", 
			    function () {
				return false;
			    });
	c$.addGroup3Name = Clazz.defineMethod (c$, "addGroup3Name", 
					       function (group3) {
						   if (org.jmol.modelset.Group.group3NameCount == org.jmol.modelset.Group.group3Names.length) ($t$ = org.jmol.modelset.Group.group3Names = org.jmol.util.ArrayUtil.doubleLengthS (org.jmol.modelset.Group.group3Names), org.jmol.modelset.Group.prototype.group3Names = org.jmol.modelset.Group.group3Names, $t$);
						   var groupID = ($t$ = org.jmol.modelset.Group.group3NameCount ++, org.jmol.modelset.Group.prototype.group3NameCount = org.jmol.modelset.Group.group3NameCount, $t$);
						   org.jmol.modelset.Group.group3Names[groupID] = group3;
						   org.jmol.modelset.Group.htGroup.put (group3, Short.$valueOf (groupID));
						   return groupID;
					       }, "~S");
	c$.getGroupID = Clazz.defineMethod (c$, "getGroupID", 
					    function (group3) {
						if (group3 == null) return -1;
						var groupID = org.jmol.modelset.Group.lookupGroupID (group3);
						return (groupID != -1) ? groupID : org.jmol.modelset.Group.addGroup3Name (group3);
					    }, "~S");
	c$.lookupGroupID = Clazz.defineMethod (c$, "lookupGroupID", 
					       function (group3) {
						   if (group3 != null) {
						       var boxedGroupID = org.jmol.modelset.Group.htGroup.get (group3);
						       if (boxedGroupID != null) return boxedGroupID.shortValue ();
						   }return -1;
					       }, "~S");
	Clazz.defineMethod (c$, "getResno", 
			    function () {
				return (this.seqcode == -2147483648 ? 0 : this.seqcode >> 8);
			    });
	Clazz.defineMethod (c$, "getSeqcode", 
			    function () {
				return this.seqcode;
			    });
	Clazz.defineMethod (c$, "getSeqNumber", 
			    function () {
				return this.seqcode >> 8;
			    });
	c$.getSequenceNumber = Clazz.defineMethod (c$, "getSequenceNumber", 
						   function (seqcode) {
						       return (org.jmol.modelset.Group.haveSequenceNumber (seqcode) ? seqcode >> 8 : 2147483647);
						   }, "~N");
	c$.getInsertionCodeValue = Clazz.defineMethod (c$, "getInsertionCodeValue", 
						       function (seqcode) {
							   return (seqcode & 127);
						       }, "~N");
	c$.haveSequenceNumber = Clazz.defineMethod (c$, "haveSequenceNumber", 
						    function (seqcode) {
							return ((seqcode & 128) != 0);
						    }, "~N");
	Clazz.defineMethod (c$, "getSeqcodeString", 
			    function () {
				return org.jmol.modelset.Group.getSeqcodeString (this.seqcode);
			    });
	c$.getSeqcode = Clazz.defineMethod (c$, "getSeqcode", 
					    function (sequenceNumber, insertionCode) {
						return org.jmol.modelset.Group.getSeqcode2 (sequenceNumber, insertionCode);
					    }, "~N,~S");
	c$.getSeqcode2 = Clazz.defineMethod (c$, "getSeqcode2", 
					     function (sequenceNumber, insertionCode) {
						 if (sequenceNumber == -2147483648) return sequenceNumber;
						 if (!((insertionCode >= 'A' && insertionCode <= 'Z') || (insertionCode >= 'a' && insertionCode <= 'z') || (insertionCode >= '0' && insertionCode <= '9') || insertionCode == '?' || insertionCode == '*')) {
						     if (insertionCode != ' ' && insertionCode != '\0') org.jmol.util.Logger.warn ("unrecognized insertionCode:" + insertionCode);
						     insertionCode = '\0';
						 }return ((sequenceNumber == 2147483647 ? 0 : (sequenceNumber << 8) | 128)) + insertionCode.charCodeAt (0);
					     }, "~N,~S");
	c$.getSeqcodeString = Clazz.defineMethod (c$, "getSeqcodeString", 
						  function (seqcode) {
						      if (seqcode == -2147483648) return null;
						      return (seqcode & 127) == 0 ? "" + (seqcode >> 8) : "" + (seqcode >> 8) + '^' + String.fromCharCode (seqcode & 127);
						  }, "~N");
	Clazz.defineMethod (c$, "getInsertionCode", 
			    function () {
				if (this.seqcode == -2147483648) return '\0';
				return String.fromCharCode (this.seqcode & 127);
			    });
	c$.getInsertionCode = Clazz.defineMethod (c$, "getInsertionCode", 
						  function (seqcode) {
						      if (seqcode == -2147483648) return '\0';
						      return String.fromCharCode (seqcode & 127);
						  }, "~N");
	Clazz.defineMethod (c$, "isAdded", 
			    function (atomIndex) {
				return this.bsAdded != null && this.bsAdded.get (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "addAtoms", 
			    function (atomIndex) {
				if (this.bsAdded == null) this.bsAdded =  new org.jmol.util.BitSet ();
				this.bsAdded.set (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "selectAtoms", 
			    function (bs) {
				bs.setBits (this.firstAtomIndex, this.lastAtomIndex + 1);
				if (this.bsAdded != null) bs.or (this.bsAdded);
				return this.lastAtomIndex;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "isSelected", 
			    function (bs) {
				var pt = bs.nextSetBit (this.firstAtomIndex);
				return (pt >= 0 && pt <= this.lastAtomIndex || this.bsAdded != null && this.bsAdded.intersects (bs));
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "isHetero", 
			    function () {
				return this.chain.getAtom (this.firstAtomIndex).isHetero ();
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "[" + this.getGroup3 () + "-" + this.getSeqcodeString () + "]";
			      });
	Clazz.defineMethod (c$, "scaleToScreen", 
			    function (Z, mar) {
				return this.chain.model.modelSet.viewer.scaleToScreen (Z, mar);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "isCursorOnTopOf", 
			    function (atom, x, y, radius, champ) {
				return this.chain.model.modelSet.isCursorOnTopOf (atom, x, y, radius, champ);
			    }, "org.jmol.modelset.Atom,~N,~N,~N,org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "isAtomHidden", 
			    function (atomIndex) {
				return this.chain.model.modelSet.isAtomHidden (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "getModel", 
			    function () {
				return this.chain.model;
			    });
	Clazz.defineMethod (c$, "getModelIndex", 
			    function () {
				return this.chain.model.modelIndex;
			    });
	Clazz.defineMethod (c$, "getSelectedMonomerCount", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "getSelectedMonomerIndex", 
			    function () {
				return -1;
			    });
	Clazz.defineMethod (c$, "getSelectedGroupIndex", 
			    function () {
				return this.selectedIndex;
			    });
	Clazz.defineMethod (c$, "isLeadAtom", 
			    function (atomIndex) {
				return false;
			    }, "~N");
	Clazz.defineMethod (c$, "getLeadAtomOr", 
			    function (atom) {
				var a = this.getLeadAtom ();
				return (a == null ? atom : a);
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getLeadAtom", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getQuaternion", 
			    function (qType) {
				return null;
			    }, "~S");
	Clazz.defineMethod (c$, "getQuaternionFrame", 
			    function (atoms) {
				if (this.lastAtomIndex - this.firstAtomIndex < 3) return null;
				var pt = this.firstAtomIndex;
				return org.jmol.util.Quaternion.getQuaternionFrame (atoms[pt], atoms[++pt], atoms[++pt]);
			    }, "~A");
	Clazz.defineMethod (c$, "setStrucNo", 
			    function (i) {
			    }, "~N");
	Clazz.defineMethod (c$, "getHelixData", 
			    function (tokType, qType, mStep) {
				switch (tokType) {
				case 135266320:
				    return  new org.jmol.util.Point3f ();
				case 1073741854:
				case 1666189314:
				    return  new org.jmol.util.Vector3f ();
				case 135266305:
				    return  new Float (NaN);
				case 135266306:
				case 1073742001:
				    return [];
				}
				return "";
			    }, "~N,~S,~N");
	Clazz.defineMethod (c$, "isWithinStructure", 
			    function (type) {
				return false;
			    }, "org.jmol.constant.EnumStructure");
	Clazz.defineMethod (c$, "getProteinStructureTag", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getStructureId", 
			    function () {
				return "";
			    });
	Clazz.defineMethod (c$, "getBioPolymerIndexInModel", 
			    function () {
				return -1;
			    });
	Clazz.defineMethod (c$, "isCrossLinked", 
			    function (g) {
				return false;
			    }, "org.jmol.modelset.Group");
	Clazz.defineMethod (c$, "getCrossLinkLead", 
			    function (vReturn) {
				return false;
			    }, "java.util.List");
	Clazz.defineMethod (c$, "isConnectedPrevious", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "getNitrogenAtom", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getCarbonylOxygenAtom", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "fixIndices", 
			    function (atomsDeleted, bsDeleted) {
				this.firstAtomIndex -= atomsDeleted;
				this.leadAtomIndex -= atomsDeleted;
				this.lastAtomIndex -= atomsDeleted;
				if (this.bsAdded != null) org.jmol.util.BitSetUtil.deleteBits (this.bsAdded, bsDeleted);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getGroupInfo", 
			    function (igroup) {
				var infoGroup =  new java.util.Hashtable ();
				infoGroup.put ("groupIndex", Integer.$valueOf (igroup));
				infoGroup.put ("groupID", Short.$valueOf (this.groupID));
				var s = this.getSeqcodeString ();
				if (s != null) infoGroup.put ("seqCode", s);
				infoGroup.put ("_apt1", Integer.$valueOf (this.firstAtomIndex));
				infoGroup.put ("_apt2", Integer.$valueOf (this.lastAtomIndex));
				if (this.bsAdded != null) infoGroup.put ("addedAtoms", this.bsAdded);
				infoGroup.put ("atomInfo1", this.chain.model.modelSet.getAtomInfo (this.firstAtomIndex, null));
				infoGroup.put ("atomInfo2", this.chain.model.modelSet.getAtomInfo (this.lastAtomIndex, null));
				infoGroup.put ("visibilityFlags", Integer.$valueOf (this.shapeVisibilityFlags));
				return infoGroup;
			    }, "~N");
	Clazz.defineMethod (c$, "getMinZ", 
			    function (atoms, minZ) {
				minZ[0] = 2147483647;
				for (var i = this.firstAtomIndex; i <= this.lastAtomIndex; i++) this.checkMinZ (atoms[i], minZ);

				if (this.bsAdded != null) for (var i = this.bsAdded.nextSetBit (0); i >= 0; i = this.bsAdded.nextSetBit (i + 1)) this.checkMinZ (atoms[i], minZ);

			    }, "~A,~A");
	Clazz.defineMethod (c$, "checkMinZ", 
			    ($fz = function (atom, minZ) {
				var z = atom.screenZ - Clazz.doubleToInt (atom.screenDiameter / 2) - 2;
				if (z < minZ[0]) minZ[0] = Math.max (1, z);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,~A");
	Clazz.defineStatics (c$,
			     "SEQUENCE_NUMBER_FLAG", 0x80,
			     "INSERTION_CODE_MASK", 0x7F,
			     "SEQUENCE_NUMBER_SHIFT", 8);
	c$.htGroup = c$.prototype.htGroup =  new java.util.Hashtable ();
	c$.group3Names = c$.prototype.group3Names =  new Array (128);
	Clazz.defineStatics (c$,
			     "group3NameCount", 0);
	{
	    for (var i = 0; i < org.jmol.viewer.JmolConstants.predefinedGroup3Names.length; ++i) {
		org.jmol.modelset.Group.addGroup3Name (org.jmol.viewer.JmolConstants.predefinedGroup3Names[i]);
	    }
	}});
    // 
    //// org\jmol\adapter\smarter\Atom.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.util.Point3f"], "org.jmol.adapter.smarter.Atom", ["java.lang.Float"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.atomSetIndex = 0;
	    this.atomIndex = 0;
	    this.bsSymmetry = null;
	    this.atomSite = 0;
	    this.elementSymbol = null;
	    this.elementNumber = -1;
	    this.atomName = null;
	    this.formalCharge = -2147483648;
	    this.partialCharge = NaN;
	    this.vectorX = NaN;
	    this.vectorY = NaN;
	    this.vectorZ = NaN;
	    this.bfactor = NaN;
	    this.occupancy = 100;
	    this.radius = NaN;
	    this.isHetero = false;
	    this.atomSerial = -2147483648;
	    this.chainID = '\0';
	    this.alternateLocationID = '\0';
	    this.group3 = null;
	    this.sequenceNumber = -2147483648;
	    this.insertionCode = '\0';
	    this.anisoBorU = null;
	    this.ellipsoid = null;
	    this.ignoreSymmetry = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "Atom", org.jmol.util.Point3f, Cloneable);
	Clazz.defineMethod (c$, "setEllipsoid", 
			    function (e) {
				if (e == null) return;
				if (this.ellipsoid != null && this.ellipsoid.length == 3) this.ellipsoid[0] = e;
				else this.ellipsoid = [e];
			    }, "org.jmol.util.Quadric");
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.adapter.smarter.Atom, []);
				   this.set (NaN, NaN, NaN);
			       });
	Clazz.defineMethod (c$, "clone", 
			    function () {
				var a = Clazz.superCall (this, org.jmol.adapter.smarter.Atom, "clone", []);
				return a;
			    });
	Clazz.defineMethod (c$, "getElementSymbol", 
			    function () {
				if (this.elementSymbol == null) if (this.atomName != null) {
				    var len = this.atomName.length;
				    var ichFirst = 0;
				    var chFirst = String.fromCharCode (0);
				    while (ichFirst < len && !org.jmol.adapter.smarter.Atom.isValidFirstSymbolChar (chFirst = this.atomName.charAt (ichFirst))) ++ichFirst;

				    switch (len - ichFirst) {
				    case 0:
					break;
				    default:
					var chSecond = this.atomName.charAt (ichFirst + 1);
					if (org.jmol.adapter.smarter.Atom.isValidElementSymbolNoCaseSecondChar2 (chFirst, chSecond)) {
					    this.elementSymbol = "" + chFirst + chSecond;
					    break;
					}case 1:
					if (org.jmol.adapter.smarter.Atom.isValidElementSymbol (chFirst)) this.elementSymbol = "" + chFirst;
					break;
				    }
				}return this.elementSymbol;
			    });
	c$.isValidElementSymbol = Clazz.defineMethod (c$, "isValidElementSymbol", 
						      function (ch) {
							  return ch >= 'A' && ch <= 'Z' && org.jmol.adapter.smarter.Atom.elementCharMasks[ch.charCodeAt (0) - 65] < 0;
						      }, "~S");
	c$.isValidElementSymbol2 = Clazz.defineMethod (c$, "isValidElementSymbol2", 
						       function (chFirst, chSecond) {
							   if (chFirst < 'A' || chFirst > 'Z' || chSecond < 'a' || chSecond > 'z') return false;
							   return ((org.jmol.adapter.smarter.Atom.elementCharMasks[chFirst.charCodeAt (0) - 65] >> (chSecond.charCodeAt (0) - 97)) & 1) != 0;
						       }, "~S,~S");
	c$.isValidElementSymbolNoCaseSecondChar2 = Clazz.defineMethod (c$, "isValidElementSymbolNoCaseSecondChar2", 
								       function (chFirst, chSecond) {
									   if (chSecond >= 'A' && chSecond <= 'Z') chSecond = String.fromCharCode (chSecond.charCodeAt (0) + 32);
									   if (chFirst < 'A' || chFirst > 'Z' || chSecond < 'a' || chSecond > 'z') return false;
									   return ((org.jmol.adapter.smarter.Atom.elementCharMasks[chFirst.charCodeAt (0) - 65] >> (chSecond.charCodeAt (0) - 97)) & 1) != 0;
								       }, "~S,~S");
	c$.isValidFirstSymbolChar = Clazz.defineMethod (c$, "isValidFirstSymbolChar", 
							function (ch) {
							    return ch >= 'A' && ch <= 'Z' && org.jmol.adapter.smarter.Atom.elementCharMasks[ch.charCodeAt (0) - 65] != 0;
							}, "~S");
	c$.isValidElementSymbolNoCaseSecondChar = Clazz.defineMethod (c$, "isValidElementSymbolNoCaseSecondChar", 
								      function (str) {
									  if (str == null) return false;
									  var length = str.length;
									  if (length == 0) return false;
									  var chFirst = str.charAt (0);
									  if (length == 1) return org.jmol.adapter.smarter.Atom.isValidElementSymbol (chFirst);
									  if (length > 2) return false;
									  var chSecond = str.charAt (1);
									  return org.jmol.adapter.smarter.Atom.isValidElementSymbolNoCaseSecondChar2 (chFirst, chSecond);
								      }, "~S");
	Clazz.defineMethod (c$, "scaleVector", 
			    function (vibScale) {
				if (Float.isNaN (this.vectorX)) return;
				this.vectorX *= vibScale;
				this.vectorY *= vibScale;
				this.vectorZ *= vibScale;
			    }, "~N");
	Clazz.defineStatics (c$,
			     "elementCharMasks", [1972292, -2147351151, -2146019271, -2130706430, 1441792, -2147348464, 25, -2147205008, -2147344384, 0, -2147352576, 1179905, 548936, -2147434213, -2147221504, -2145759221, 0, 1056947, -2147339946, -2147477097, -2147483648, -2147483648, -2147483648, 8388624, -2147483646, 139264]);
    });
    // 
    //// org\jmol\adapter\smarter\AtomSetObject.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    c$ = Clazz.decorateAsClass (function () {
	this.atomSetIndex = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.adapter.smarter, "AtomSetObject");
    // 
    //// org\jmol\adapter\smarter\Bond.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.adapter.smarter.AtomSetObject"], "org.jmol.adapter.smarter.Bond", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.atomIndex1 = 0;
	    this.atomIndex2 = 0;
	    this.order = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "Bond", org.jmol.adapter.smarter.AtomSetObject);
	Clazz.makeConstructor (c$, 
			       function (atomIndex1, atomIndex2, order) {
				   Clazz.superConstructor (this, org.jmol.adapter.smarter.Bond, []);
				   this.atomIndex1 = atomIndex1;
				   this.atomIndex2 = atomIndex2;
				   this.order = order;
			       }, "~N,~N,~N");
    });
    // 
    //// org\jmol\util\Tuple3i.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    c$ = Clazz.decorateAsClass (function () {
	this.x = 0;
	this.y = 0;
	this.z = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.util, "Tuple3i", null, java.io.Serializable);
    Clazz.makeConstructor (c$, 
			   function () {
			   });
    Clazz.defineMethod (c$, "set", 
			function (x, y, z) {
			    this.x = x;
			    this.y = y;
			    this.z = z;
			}, "~N,~N,~N");
    Clazz.defineMethod (c$, "setT", 
			function (t1) {
			    this.x = t1.x;
			    this.y = t1.y;
			    this.z = t1.z;
			}, "org.jmol.util.Tuple3i");
    Clazz.defineMethod (c$, "add", 
			function (t) {
			    this.x += t.x;
			    this.y += t.y;
			    this.z += t.z;
			}, "org.jmol.util.Tuple3i");
    Clazz.defineMethod (c$, "scaleAdd", 
			function (s, t1, t2) {
			    this.x = s * t1.x + t2.x;
			    this.y = s * t1.y + t2.y;
			    this.z = s * t1.z + t2.z;
			}, "~N,org.jmol.util.Tuple3i,org.jmol.util.Tuple3i");
    Clazz.overrideMethod (c$, "hashCode", 
			  function () {
			      return this.x ^ this.y ^ this.z;
			  });
    Clazz.overrideMethod (c$, "equals", 
			  function (o) {
			      if (!(Clazz.instanceOf (o, org.jmol.util.Tuple3i))) return false;
			      var t = o;
			      return (this.x == t.x && this.y == t.y && this.z == t.z);
			  }, "~O");
    Clazz.overrideMethod (c$, "toString", 
			  function () {
			      return "(" + this.x + ", " + this.y + ", " + this.z + ")";
			  });
    // 
    //// org\jmol\util\Point3i.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Tuple3i"], "org.jmol.util.Point3i", null, function () {
	c$ = Clazz.declareType (org.jmol.util, "Point3i", org.jmol.util.Tuple3i);
	c$.new3 = Clazz.defineMethod (c$, "new3", 
				      function (x, y, z) {
					  var pt =  new org.jmol.util.Point3i ();
					  pt.x = x;
					  pt.y = y;
					  pt.z = z;
					  return pt;
				      }, "~N,~N,~N");
    });
    // 
    //// org\jmol\constant\EnumStructure.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumStructure", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.id = 0;
	    this.color = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumStructure", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (id, color) {
				   this.id = id;
				   this.color = color;
			       }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "getId", 
			    function () {
				return this.id;
			    });
	Clazz.defineMethod (c$, "getColor", 
			    function () {
				return this.color;
			    });
	c$.getProteinStructureType = Clazz.defineMethod (c$, "getProteinStructureType", 
							 function (name) {
							     for (var item, $item = 0, $$item = org.jmol.constant.EnumStructure.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (name.equalsIgnoreCase (item.name ())) return (item.isProtein () ? item : org.jmol.constant.EnumStructure.NOT);

							     return org.jmol.constant.EnumStructure.NOT;
							 }, "~S");
	Clazz.defineMethod (c$, "getBioStructureTypeName", 
			    function (isGeneric) {
				return (this.id < 0 ? "" : isGeneric && this.isProtein () ? "protein" : this.name ());
			    }, "~B");
	Clazz.defineMethod (c$, "isProtein", 
			    ($fz = function () {
				return this.id >= 0 && this.id <= 3 || this.id >= 7;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineEnumConstant (c$, "NOT", 0, [-1, 0xFF808080]);
	Clazz.defineEnumConstant (c$, "NONE", 1, [0, 0xFFFFFFFF]);
	Clazz.defineEnumConstant (c$, "TURN", 2, [1, 0xFF6080FF]);
	Clazz.defineEnumConstant (c$, "SHEET", 3, [2, 0xFFFFC800]);
	Clazz.defineEnumConstant (c$, "HELIX", 4, [3, 0xFFFF0080]);
	Clazz.defineEnumConstant (c$, "DNA", 5, [4, 0xFFAE00FE]);
	Clazz.defineEnumConstant (c$, "RNA", 6, [5, 0xFFFD0162]);
	Clazz.defineEnumConstant (c$, "CARBOHYDRATE", 7, [6, 0xFFA6A6FA]);
	Clazz.defineEnumConstant (c$, "HELIX310", 8, [7, 0xFFA00080]);
	Clazz.defineEnumConstant (c$, "HELIXALPHA", 9, [8, 0xFFFF0080]);
	Clazz.defineEnumConstant (c$, "HELIXPI", 10, [9, 0xFF600080]);
    });
    // 
    //// java\util\StringTokenizer.js 
    // 
    ﻿$_L(["java.util.Enumeration"],"java.util.StringTokenizer",["java.lang.NullPointerException","java.util.NoSuchElementException"],function(){
	c$=$_C(function(){
	    this.string=null;
	    this.delimiters=null;
	    this.returnDelimiters=false;
	    this.position=0;
	    $_Z(this,arguments);
	},java.util,"StringTokenizer",null,java.util.Enumeration);
	$_K(c$,
	    function(string){
		this.construct(string," \t\n\r\f",false);
	    },"~S");
	$_K(c$,
	    function(string,delimiters){
		this.construct(string,delimiters,false);
	    },"~S,~S");
	$_K(c$,
	    function(string,delimiters,returnDelimiters){
		if(string!=null){
		    this.string=string;
		    this.delimiters=delimiters;
		    this.returnDelimiters=returnDelimiters;
		    this.position=0;
		}else throw new NullPointerException();
	    },"~S,~S,~B");
	$_M(c$,"countTokens",
	    function(){
		var count=0;
		var inToken=false;
		for(var i=this.position,length=this.string.length;i<length;i++){
		    if(this.delimiters.indexOf(this.string.charAt(i),0)>=0){
			if(this.returnDelimiters)count++;
			if(inToken){
			    count++;
			    inToken=false;
			}}else{
			    inToken=true;
			}}
		if(inToken)count++;
		return count;
	    });
	$_V(c$,"hasMoreElements",
	    function(){
		return this.hasMoreTokens();
	    });
	$_M(c$,"hasMoreTokens",
	    function(){
		var length=this.string.length;
		if(this.position<length){
		    if(this.returnDelimiters)return true;
		    for(var i=this.position;i<length;i++)if(this.delimiters.indexOf(this.string.charAt(i),0)==-1)return true;

		}return false;
	    });
	$_V(c$,"nextElement",
	    function(){
		return this.nextToken();
	    });
	$_M(c$,"nextToken",
	    function(){
		var i=this.position;
		var length=this.string.length;
		if(i<length){
		    if(this.returnDelimiters){
			if(this.delimiters.indexOf(this.string.charAt(this.position),0)>=0)return String.valueOf(this.string.charAt(this.position++));
			for(this.position++;this.position<length;this.position++)if(this.delimiters.indexOf(this.string.charAt(this.position),0)>=0)return this.string.substring(i,this.position);

			return this.string.substring(i);
		    }while(i<length&&this.delimiters.indexOf(this.string.charAt(i),0)>=0)i++;

		    this.position=i;
		    if(i<length){
			for(this.position++;this.position<length;this.position++)if(this.delimiters.indexOf(this.string.charAt(this.position),0)>=0)return this.string.substring(i,this.position);

			return this.string.substring(i);
		    }}throw new java.util.NoSuchElementException();
	    });
	$_M(c$,"nextToken",
	    function(delims){
		this.delimiters=delims;
		return this.nextToken();
	    },"~S");
    });
    // 
    //// org\jmol\adapter\smarter\AtomSetCollectionReader.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.adapter.smarter");
    Clazz.load (["org.jmol.util.StringXBuilder"], "org.jmol.adapter.smarter.AtomSetCollectionReader", ["java.lang.Boolean", "$.Character", "$.Float", "java.util.ArrayList", "org.jmol.adapter.smarter.Atom", "$.AtomSetCollection", "org.jmol.api.Interface", "$.JmolAdapter", "org.jmol.util.BitSet", "$.BitSetUtil", "$.Logger", "$.Matrix3f", "$.Parser", "$.Point3f", "$.Quaternion", "$.TextFormat", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.isBinary = false;
	    this.atomSetCollection = null;
	    this.reader = null;
	    this.doc = null;
	    this.readerName = null;
	    this.htParams = null;
	    this.trajectorySteps = null;
	    this.line = null;
	    this.prevline = null;
	    this.next = null;
	    this.ptLine = 0;
	    this.latticeCells = null;
	    this.doProcessLines = false;
	    this.iHaveUnitCell = false;
	    this.iHaveSymmetryOperators = false;
	    this.continuing = true;
	    this.viewer = null;
	    this.doApplySymmetry = false;
	    this.ignoreFileSymmetryOperators = false;
	    this.isTrajectory = false;
	    this.applySymmetryToBonds = false;
	    this.doCheckUnitCell = false;
	    this.getHeader = false;
	    this.isSequential = false;
	    this.templateAtomCount = 0;
	    this.modelNumber = 0;
	    this.vibrationNumber = 0;
	    this.desiredVibrationNumber = -2147483648;
	    this.bsModels = null;
	    this.havePartialChargeFilter = false;
	    this.calculationType = "?";
	    this.spaceGroup = null;
	    this.ignoreFileUnitCell = false;
	    this.ignoreFileSpaceGroupName = false;
	    this.notionalUnitCell = null;
	    this.desiredModelNumber = -2147483648;
	    this.symmetry = null;
	    this.os = null;
	    this.iHaveFractionalCoordinates = false;
	    this.doPackUnitCell = false;
	    this.strSupercell = null;
	    this.ptSupercell = null;
	    this.loadNote = null;
	    this.doConvertToFractional = false;
	    this.fileCoordinatesAreFractional = false;
	    this.merging = false;
	    this.symmetryRange = 0;
	    this.firstLastStep = null;
	    this.lastModelNumber = 2147483647;
	    this.desiredSpaceGroupIndex = -1;
	    this.fileScaling = null;
	    this.fileOffset = null;
	    this.fileOffsetFractional = null;
	    this.unitCellOffset = null;
	    this.unitCellOffsetFractional = false;
	    this.filePath = null;
	    this.fileName = null;
	    this.stateScriptVersionInt = 2147483647;
	    this.haveModel = false;
	    this.previousSpaceGroup = null;
	    this.previousUnitCell = null;
	    this.nMatrixElements = 0;
	    this.matUnitCellOrientation = null;
	    this.bsFilter = null;
	    this.filter = null;
	    this.haveAtomFilter = false;
	    this.filterAltLoc = false;
	    this.filterGroup3 = false;
	    this.filterChain = false;
	    this.filterAtomType = false;
	    this.filterElement = false;
	    this.filterHetero = false;
	    this.filterEveryNth = false;
	    this.filterN = 0;
	    this.nFiltered = 0;
	    this.doSetOrientation = false;
	    this.doCentralize = false;
	    this.addVibrations = false;
	    this.useAltNames = false;
	    this.doReadMolecularOrbitals = false;
	    this.reverseModels = false;
	    this.nameRequired = null;
	    this.doCentroidUnitCell = false;
	    this.centroidPacked = false;
	    this.filter1 = null;
	    this.filter2 = null;
	    this.matrixRotate = null;
	    this.previousScript = null;
	    this.siteScript = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.adapter.smarter, "AtomSetCollectionReader");
	Clazz.prepareFields (c$, function () {
	    this.next =  Clazz.newIntArray (1, 0);
	    this.loadNote =  new org.jmol.util.StringXBuilder ();
	});
	Clazz.defineMethod (c$, "setup", 
			    function (fullPath, htParams, reader) {
				this.htParams = htParams;
				this.filePath = fullPath.$replace ('\\', '/');
				var i = this.filePath.lastIndexOf ('/');
				this.fileName = this.filePath.substring (i + 1);
				if (Clazz.instanceOf (reader, java.io.BufferedReader)) this.reader = reader;
				else if (Clazz.instanceOf (reader, org.jmol.api.JmolDocument)) this.doc = reader;
			    }, "~S,java.util.Map,~O");
	Clazz.defineMethod (c$, "readData", 
			    function () {
				this.initialize ();
				this.atomSetCollection =  new org.jmol.adapter.smarter.AtomSetCollection (this.readerName, this, null, null);
				try {
				    this.initializeReader ();
				    if (this.doc == null) {
					if (this.line == null && this.continuing) this.readLine ();
					while (this.line != null && this.continuing) if (this.checkLine ()) this.readLine ();

				    } else {
					this.processBinaryDocument (this.doc);
				    }this.finalizeReader ();
				} catch (e) {
				    this.setError (e);
				}
				if (this.reader != null) this.reader.close ();
				if (this.doc != null) this.doc.close ();
				return this.finish ();
			    });
	Clazz.defineMethod (c$, "readDataObject", 
			    function (node) {
				this.initialize ();
				this.atomSetCollection =  new org.jmol.adapter.smarter.AtomSetCollection (this.readerName, this, null, null);
				this.initializeReader ();
				this.processXml (node);
				return this.finish ();
			    }, "~O");
	Clazz.defineMethod (c$, "processXml", 
			    function (DOMNode) {
			    }, "~O");
	Clazz.defineMethod (c$, "processBinaryDocument", 
			    function (doc) {
			    }, "org.jmol.api.JmolDocument");
	Clazz.defineMethod (c$, "initializeReader", 
			    function () {
			    });
	Clazz.defineMethod (c$, "checkLine", 
			    function () {
				return true;
			    });
	Clazz.defineMethod (c$, "checkLastModel", 
			    function () {
				if (this.isLastModel (this.modelNumber) && this.doProcessLines) {
				    this.continuing = false;
				    return false;
				}this.doProcessLines = false;
				return true;
			    });
	Clazz.defineMethod (c$, "isLastModel", 
			    function (modelNumber) {
				return (this.desiredModelNumber > 0 || modelNumber >= this.lastModelNumber);
			    }, "~N");
	Clazz.defineMethod (c$, "appendLoadNote", 
			    function (info) {
				this.loadNote.append (info).append ("\n");
			    }, "~S");
	Clazz.defineMethod (c$, "initializeTrajectoryFile", 
			    function () {
				this.atomSetCollection.addAtom ( new org.jmol.adapter.smarter.Atom ());
				this.trajectorySteps = this.htParams.get ("trajectorySteps");
				if (this.trajectorySteps == null) this.htParams.put ("trajectorySteps", this.trajectorySteps =  new java.util.ArrayList ());
			    });
	Clazz.defineMethod (c$, "finalizeReader", 
			    function () {
				this.applySymmetryAndSetTrajectory ();
				if (this.loadNote.length () > 0) this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("modelLoadNote", this.loadNote.toString ());
				if (this.doCentralize) this.atomSetCollection.centralize ();
			    });
	Clazz.defineMethod (c$, "setIsPDB", 
			    function () {
				this.atomSetCollection.setGlobalBoolean (4);
				this.atomSetCollection.setAtomSetAuxiliaryInfo ("isPDB", Boolean.TRUE);
				if (this.htParams.get ("pdbNoHydrogens") != null) this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("pdbNoHydrogens", this.htParams.get ("pdbNoHydrogens"));
			    });
	Clazz.defineMethod (c$, "setPdb", 
			    function () {
			    });
	Clazz.defineMethod (c$, "finish", 
			    ($fz = function () {
				var s = this.htParams.get ("loadState");
				this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("loadState", s == null ? "" : s);
				s = this.htParams.get ("smilesString");
				if (s != null) this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("smilesString", s);
				if (!this.htParams.containsKey ("templateAtomCount")) this.htParams.put ("templateAtomCount", Integer.$valueOf (this.atomSetCollection.getAtomCount ()));
				if (this.htParams.containsKey ("bsFilter")) this.htParams.put ("filteredAtomCount", Integer.$valueOf (org.jmol.util.BitSetUtil.cardinalityOf (this.htParams.get ("bsFilter"))));
				if (!this.calculationType.equals ("?")) this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("calculationType", this.calculationType);
				var name = this.atomSetCollection.getFileTypeName ();
				var fileType = name;
				if (fileType.indexOf ("(") >= 0) fileType = fileType.substring (0, fileType.indexOf ("("));
				for (var i = this.atomSetCollection.getAtomSetCount (); --i >= 0; ) {
				    this.atomSetCollection.setAtomSetAuxiliaryInfoForSet ("fileName", this.filePath, i);
				    this.atomSetCollection.setAtomSetAuxiliaryInfoForSet ("fileType", fileType, i);
				}
				this.atomSetCollection.freeze (this.reverseModels);
				if (this.atomSetCollection.errorMessage != null) return this.atomSetCollection.errorMessage + "\nfor file " + this.filePath + "\ntype " + name;
				if ((this.atomSetCollection.bsAtoms == null ? this.atomSetCollection.getAtomCount () : this.atomSetCollection.bsAtoms.cardinality ()) == 0 && fileType.indexOf ("DataOnly") < 0) return "No atoms found\nfor file " + this.filePath + "\ntype " + name;
				return this.atomSetCollection;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setError", 
			    ($fz = function (e) {
				var s = "";
				System.out.println (s);
				if (this.line == null) this.atomSetCollection.errorMessage = "Unexpected end of file after line " + --this.ptLine + ":\n" + this.prevline;
				else this.atomSetCollection.errorMessage = "Error reading file at line " + this.ptLine + ":\n" + this.line + "\n" + s;
			    }, $fz.isPrivate = true, $fz), "Throwable");
	Clazz.defineMethod (c$, "initialize", 
			    ($fz = function () {
				var o = this.htParams.get ("supercell");
				if (Clazz.instanceOf (o, String)) this.strSupercell = o;
				else this.ptSupercell = o;
				this.initializeSymmetry ();
				this.viewer = this.htParams.remove ("viewer");
				if (this.htParams.containsKey ("stateScriptVersionInt")) this.stateScriptVersionInt = (this.htParams.get ("stateScriptVersionInt")).intValue ();
				this.merging = this.htParams.containsKey ("merging");
				this.getHeader = this.htParams.containsKey ("getHeader");
				this.isSequential = this.htParams.containsKey ("isSequential");
				this.readerName = this.htParams.get ("readerName");
				if (this.htParams.containsKey ("OutputStream")) this.os = this.htParams.get ("OutputStream");
				if (this.htParams.containsKey ("vibrationNumber")) this.desiredVibrationNumber = (this.htParams.get ("vibrationNumber")).intValue ();
				else if (this.htParams.containsKey ("modelNumber")) this.desiredModelNumber = (this.htParams.get ("modelNumber")).intValue ();
				this.applySymmetryToBonds = this.htParams.containsKey ("applySymmetryToBonds");
				this.bsFilter = this.htParams.get ("bsFilter");
				this.setFilter (null);
				var ptFile = (this.htParams.containsKey ("ptFile") ? (this.htParams.get ("ptFile")).intValue () : -1);
				this.isTrajectory = this.htParams.containsKey ("isTrajectory");
				if (ptFile > 0 && this.htParams.containsKey ("firstLastSteps")) {
				    var val = (this.htParams.get ("firstLastSteps")).get (ptFile - 1);
				    if (Clazz.instanceOf (val, org.jmol.util.BitSet)) {
					this.bsModels = val;
				    } else {
					this.firstLastStep = val;
				    }} else if (this.htParams.containsKey ("firstLastStep")) {
					this.firstLastStep = this.htParams.get ("firstLastStep");
				    } else if (this.htParams.containsKey ("bsModels")) {
					this.bsModels = this.htParams.get ("bsModels");
				    }if (this.htParams.containsKey ("templateAtomCount")) this.templateAtomCount = (this.htParams.get ("templateAtomCount")).intValue ();
				if (this.bsModels != null || this.firstLastStep != null) this.desiredModelNumber = -2147483648;
				if (this.bsModels == null && this.firstLastStep != null) {
				    if (this.firstLastStep[0] < 0) this.firstLastStep[0] = 0;
				    if (this.firstLastStep[2] == 0 || this.firstLastStep[1] < this.firstLastStep[0]) this.firstLastStep[1] = -1;
				    if (this.firstLastStep[2] < 1) this.firstLastStep[2] = 1;
				    this.bsModels = org.jmol.util.BitSetUtil.newAndSetBit (this.firstLastStep[0]);
				    if (this.firstLastStep[1] > this.firstLastStep[0]) {
					for (var i = this.firstLastStep[0]; i <= this.firstLastStep[1]; i += this.firstLastStep[2]) this.bsModels.set (i);

				    }}if (this.bsModels != null && (this.firstLastStep == null || this.firstLastStep[1] != -1)) this.lastModelNumber = this.bsModels.length ();
				this.symmetryRange = (this.htParams.containsKey ("symmetryRange") ? (this.htParams.get ("symmetryRange")).floatValue () : 0);
				this.latticeCells =  Clazz.newIntArray (3, 0);
				if (this.htParams.containsKey ("lattice")) {
				    var pt = (this.htParams.get ("lattice"));
				    this.latticeCells[0] = Clazz.floatToInt (pt.x);
				    this.latticeCells[1] = Clazz.floatToInt (pt.y);
				    this.latticeCells[2] = Clazz.floatToInt (pt.z);
				    this.doCentroidUnitCell = (this.htParams.containsKey ("centroid"));
				    this.centroidPacked = this.doCentroidUnitCell && this.htParams.containsKey ("packed");
				    this.doPackUnitCell = !this.doCentroidUnitCell && (this.htParams.containsKey ("packed") || this.latticeCells[2] < 0);
				}this.doApplySymmetry = (this.latticeCells[0] > 0 && this.latticeCells[1] > 0);
				if (!this.doApplySymmetry) {
				    this.latticeCells[0] = 0;
				    this.latticeCells[1] = 0;
				    this.latticeCells[2] = 0;
				}if (this.htParams.containsKey ("spaceGroupIndex")) {
				    this.desiredSpaceGroupIndex = (this.htParams.get ("spaceGroupIndex")).intValue ();
				    if (this.desiredSpaceGroupIndex == -2) this.spaceGroup = this.htParams.get ("spaceGroupName");
				    this.ignoreFileSpaceGroupName = (this.desiredSpaceGroupIndex == -2 || this.desiredSpaceGroupIndex >= 0);
				    this.ignoreFileSymmetryOperators = (this.desiredSpaceGroupIndex != -1);
				}if (this.htParams.containsKey ("unitCellOffset")) {
				    this.fileScaling = org.jmol.util.Point3f.new3 (1, 1, 1);
				    this.fileOffset = this.htParams.get ("unitCellOffset");
				    this.fileOffsetFractional = org.jmol.util.Point3f.newP (this.fileOffset);
				    this.unitCellOffsetFractional = this.htParams.containsKey ("unitCellOffsetFractional");
				}if (this.htParams.containsKey ("unitcell")) {
				    var fParams = this.htParams.get ("unitcell");
				    if (this.merging) this.setFractionalCoordinates (true);
				    if (fParams.length == 9) {
					this.addPrimitiveLatticeVector (0, fParams, 0);
					this.addPrimitiveLatticeVector (1, fParams, 3);
					this.addPrimitiveLatticeVector (2, fParams, 6);
				    } else {
					this.setUnitCell (fParams[0], fParams[1], fParams[2], fParams[3], fParams[4], fParams[5]);
				    }this.ignoreFileUnitCell = this.iHaveUnitCell;
				    if (this.merging && !this.iHaveUnitCell) this.setFractionalCoordinates (false);
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "doGetModel", 
			    function (modelNumber, title) {
				if (title != null && this.nameRequired != null && this.nameRequired.length > 0 && title.toUpperCase ().indexOf (this.nameRequired) < 0) return false;
				var isOK = (this.bsModels == null ? this.desiredModelNumber < 1 || modelNumber == this.desiredModelNumber : modelNumber > this.lastModelNumber ? false : modelNumber > 0 && this.bsModels.get (modelNumber - 1) || this.haveModel && this.firstLastStep != null && this.firstLastStep[1] < 0 && (this.firstLastStep[2] < 2 || (modelNumber - 1 - this.firstLastStep[0]) % this.firstLastStep[2] == 0));
				if (isOK && this.desiredModelNumber == 0) this.atomSetCollection.discardPreviousAtoms ();
				this.haveModel = new Boolean (this.haveModel | isOK).valueOf ();
				if (isOK) this.doProcessLines = true;
				return isOK;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "initializeSymmetry", 
			    function () {
				this.previousSpaceGroup = this.spaceGroup;
				this.previousUnitCell = this.notionalUnitCell;
				this.iHaveUnitCell = this.ignoreFileUnitCell;
				if (!this.ignoreFileUnitCell) {
				    this.notionalUnitCell =  Clazz.newFloatArray (25, 0);
				    for (var i = 25; --i >= 0; ) this.notionalUnitCell[i] = NaN;

				    if (this.ptSupercell != null) {
					this.notionalUnitCell[22] = Math.max (1, Clazz.floatToInt (this.ptSupercell.x));
					this.notionalUnitCell[23] = Math.max (1, Clazz.floatToInt (this.ptSupercell.y));
					this.notionalUnitCell[24] = Math.max (1, Clazz.floatToInt (this.ptSupercell.z));
				    }this.symmetry = null;
				}if (!this.ignoreFileSpaceGroupName) this.spaceGroup = "unspecified!";
				this.doCheckUnitCell = false;
			    });
	Clazz.defineMethod (c$, "newAtomSet", 
			    function (name) {
				if (this.atomSetCollection.getCurrentAtomSetIndex () >= 0) {
				    this.atomSetCollection.newAtomSet ();
				    this.atomSetCollection.setCollectionName ("<collection of " + (this.atomSetCollection.getCurrentAtomSetIndex () + 1) + " models>");
				} else {
				    this.atomSetCollection.setCollectionName (name);
				}this.atomSetCollection.setAtomSetAuxiliaryInfoForSet ("name", name, Math.max (0, this.atomSetCollection.getCurrentAtomSetIndex ()));
			    }, "~S");
	Clazz.defineMethod (c$, "cloneLastAtomSet", 
			    function (atomCount, pts) {
				var lastAtomCount = this.atomSetCollection.getLastAtomSetAtomCount ();
				this.atomSetCollection.cloneLastAtomSetFromPoints (atomCount, pts);
				if (this.atomSetCollection.haveUnitCell) {
				    this.iHaveUnitCell = true;
				    this.doCheckUnitCell = true;
				    this.spaceGroup = this.previousSpaceGroup;
				    this.notionalUnitCell = this.previousUnitCell;
				}return lastAtomCount;
			    }, "~N,~A");
	Clazz.defineMethod (c$, "setSpaceGroupName", 
			    function (name) {
				if (this.ignoreFileSpaceGroupName) return;
				this.spaceGroup = name.trim ();
				org.jmol.util.Logger.info ("Setting space group name to " + this.spaceGroup);
			    }, "~S");
	Clazz.defineMethod (c$, "setSymmetryOperator", 
			    function (xyz) {
				if (this.ignoreFileSymmetryOperators) return;
				this.atomSetCollection.setLatticeCells (this.latticeCells, this.applySymmetryToBonds, this.doPackUnitCell, this.doCentroidUnitCell, this.centroidPacked, this.strSupercell, this.ptSupercell);
				if (!this.atomSetCollection.addSpaceGroupOperation (xyz)) org.jmol.util.Logger.warn ("Skipping symmetry operation " + xyz);
				this.iHaveSymmetryOperators = true;
			    }, "~S");
	Clazz.defineMethod (c$, "initializeCartesianToFractional", 
			    ($fz = function () {
				for (var i = 0; i < 16; i++) if (!Float.isNaN (this.notionalUnitCell[6 + i])) return;

				for (var i = 0; i < 16; i++) this.notionalUnitCell[6 + i] = ((i % 5 == 0 ? 1 : 0));

				this.nMatrixElements = 0;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clearUnitCell", 
			    function () {
				if (this.ignoreFileUnitCell) return;
				for (var i = 6; i < 22; i++) this.notionalUnitCell[i] = NaN;

				this.checkUnitCell (6);
			    });
	Clazz.defineMethod (c$, "setUnitCellItem", 
			    function (i, x) {
				if (this.ignoreFileUnitCell) return;
				if (i == 0 && x == 1 || i == 3 && x == 0) return;
				if (!Float.isNaN (x) && i >= 6 && Float.isNaN (this.notionalUnitCell[6])) this.initializeCartesianToFractional ();
				this.notionalUnitCell[i] = x;
				if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.debug ("setunitcellitem " + i + " " + x);
				}if (i < 6 || Float.isNaN (x)) this.iHaveUnitCell = this.checkUnitCell (6);
				else if (++this.nMatrixElements == 12) this.checkUnitCell (22);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setUnitCell", 
			    function (a, b, c, alpha, beta, gamma) {
				if (this.ignoreFileUnitCell) return;
				this.clearUnitCell ();
				this.notionalUnitCell[0] = a;
				this.notionalUnitCell[1] = b;
				this.notionalUnitCell[2] = c;
				if (alpha != 0) this.notionalUnitCell[3] = alpha;
				if (beta != 0) this.notionalUnitCell[4] = beta;
				if (gamma != 0) this.notionalUnitCell[5] = gamma;
				this.iHaveUnitCell = this.checkUnitCell (6);
			    }, "~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "addPrimitiveLatticeVector", 
			    function (i, xyz, i0) {
				if (this.ignoreFileUnitCell) return;
				if (i == 0) for (var j = 0; j < 6; j++) this.notionalUnitCell[j] = 0;

				i = 6 + i * 3;
				this.notionalUnitCell[i++] = xyz[i0++];
				this.notionalUnitCell[i++] = xyz[i0++];
				this.notionalUnitCell[i] = xyz[i0];
				if (Float.isNaN (this.notionalUnitCell[0])) {
				    for (i = 0; i < 6; i++) this.notionalUnitCell[i] = -1;

				}this.iHaveUnitCell = this.checkUnitCell (15);
			    }, "~N,~A,~N");
	Clazz.defineMethod (c$, "checkUnitCell", 
			    ($fz = function (n) {
				for (var i = 0; i < n; i++) if (Float.isNaN (this.notionalUnitCell[i])) return false;

				this.getSymmetry ().setUnitCell (this.notionalUnitCell);
				if (this.doApplySymmetry) this.doConvertToFractional = !this.fileCoordinatesAreFractional;
				this.checkUnitCellOffset ();
				return true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkUnitCellOffset", 
			    ($fz = function () {
				if (this.symmetry == null || this.fileOffsetFractional == null) return;
				this.fileOffset.setT (this.fileOffsetFractional);
				if (this.unitCellOffsetFractional != this.fileCoordinatesAreFractional) {
				    if (this.unitCellOffsetFractional) this.symmetry.toCartesian (this.fileOffset, false);
				    else this.symmetry.toFractional (this.fileOffset, false);
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getSymmetry", 
			    function () {
				this.symmetry = org.jmol.api.Interface.getOptionInterface ("symmetry.Symmetry");
				return this.symmetry;
			    });
	Clazz.defineMethod (c$, "setFractionalCoordinates", 
			    function (TF) {
				this.iHaveFractionalCoordinates = this.fileCoordinatesAreFractional = TF;
				this.checkUnitCellOffset ();
			    }, "~B");
	Clazz.defineMethod (c$, "setFilter", 
			    function (filter0) {
				if (filter0 == null) {
				    filter0 = this.htParams.get ("filter");
				} else {
				    this.bsFilter = null;
				}if (filter0 != null) filter0 = filter0.toUpperCase ();
				this.filter = filter0;
				this.doSetOrientation = !this.checkFilterKey ("NOORIENT");
				this.doCentralize = (!this.checkFilterKey ("NOCENTER") && this.checkFilterKey ("CENTER"));
				this.addVibrations = !this.checkFilterKey ("NOVIB");
				this.doReadMolecularOrbitals = !this.checkFilterKey ("NOMO");
				this.useAltNames = this.checkFilterKey ("ALTNAME");
				this.reverseModels = this.checkFilterKey ("REVERSEMODELS");
				if (this.checkFilterKey ("NAME=")) {
				    this.nameRequired = this.filter.substring (this.filter.indexOf ("NAME=") + 5);
				    if (this.nameRequired.startsWith ("'")) this.nameRequired = org.jmol.util.TextFormat.splitChars (this.nameRequired, "'")[1];
				    else if (this.nameRequired.startsWith ("\"")) this.nameRequired = org.jmol.util.TextFormat.splitChars (this.nameRequired, "\"")[1];
				    filter0 = this.filter = org.jmol.util.TextFormat.simpleReplace (this.filter, this.nameRequired, "");
				    filter0 = this.filter = org.jmol.util.TextFormat.simpleReplace (this.filter, "NAME=", "");
				}if (this.filter == null) return;
				this.filterAtomType = this.checkFilterKey ("*.") || this.checkFilterKey ("!.");
				this.filterElement = this.checkFilterKey ("_");
				this.filterHetero = this.checkFilterKey ("HETATM");
				this.filterGroup3 = this.checkFilterKey ("[");
				this.filterChain = this.checkFilterKey (":");
				this.filterAltLoc = this.checkFilterKey ("%");
				this.filterEveryNth = this.checkFilterKey ("/=");
				if (this.filterEveryNth) this.filterN = this.parseIntStr (this.filter.substring (this.filter.indexOf ("/=") + 2));
				if (this.filterN == -2147483648) this.filterEveryNth = false;
				this.haveAtomFilter = this.filterAtomType || this.filterElement || this.filterGroup3 || this.filterChain || this.filterAltLoc || this.filterHetero || this.filterEveryNth || this.checkFilterKey ("/=");
				if (this.bsFilter == null) {
				    this.bsFilter =  new org.jmol.util.BitSet ();
				    this.htParams.put ("bsFilter", this.bsFilter);
				    this.filter = (";" + this.filter + ";").$replace (',', ';');
				    org.jmol.util.Logger.info ("filtering with " + this.filter);
				    if (this.haveAtomFilter) {
					var ipt;
					this.filter1 = this.filter;
					if ((ipt = this.filter.indexOf ("|")) >= 0) {
					    this.filter1 = this.filter.substring (0, ipt).trim () + ";";
					    this.filter2 = ";" + this.filter.substring (ipt).trim ();
					}}}}, "~S");
	Clazz.defineMethod (c$, "checkFilterKey", 
			    function (key) {
				return (this.filter != null && this.filter.indexOf (key) >= 0);
			    }, "~S");
	Clazz.defineMethod (c$, "filterAtom", 
			    function (atom, iAtom) {
				if (!this.haveAtomFilter) return true;
				var isOK = this.checkFilter (atom, this.filter1);
				if (this.filter2 != null) isOK = new Boolean (isOK | this.checkFilter (atom, this.filter2)).valueOf ();
				if (isOK && this.filterEveryNth) isOK = (((this.nFiltered++) % this.filterN) == 0);
				this.bsFilter.setBitTo (iAtom >= 0 ? iAtom : this.atomSetCollection.getAtomCount (), isOK);
				return isOK;
			    }, "org.jmol.adapter.smarter.Atom,~N");
	Clazz.defineMethod (c$, "checkFilter", 
			    ($fz = function (atom, f) {
				return (!this.filterGroup3 || atom.group3 == null || !this.filterReject (f, "[", atom.group3.toUpperCase () + "]")) && (!this.filterAtomType || atom.atomName == null || !this.filterReject (f, ".", atom.atomName.toUpperCase () + ";")) && (!this.filterElement || atom.elementSymbol == null || !this.filterReject (f, "_", atom.elementSymbol.toUpperCase () + ";")) && (!this.filterChain || atom.chainID == '\0' || !this.filterReject (f, ":", "" + atom.chainID)) && (!this.filterAltLoc || atom.alternateLocationID == '\0' || !this.filterReject (f, "%", "" + atom.alternateLocationID)) && (!this.filterHetero || !this.filterReject (f, "HETATM", atom.isHetero ? "HETATM" : "ATOM"));
			    }, $fz.isPrivate = true, $fz), "org.jmol.adapter.smarter.Atom,~S");
	Clazz.defineMethod (c$, "filterReject", 
			    function (f, code, atomCode) {
				return (f.indexOf (code) >= 0 && (f.indexOf ("!" + code) >= 0 ? f.indexOf (code + atomCode) >= 0 : f.indexOf (code + atomCode) < 0));
			    }, "~S,~S,~S");
	Clazz.defineMethod (c$, "set2D", 
			    function () {
				this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("is2D", Boolean.TRUE);
				if (!this.checkFilterKey ("NOMIN")) this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("doMinimize", Boolean.TRUE);
			    });
	Clazz.defineMethod (c$, "doGetVibration", 
			    function (vibrationNumber) {
				return this.addVibrations && (this.desiredVibrationNumber <= 0 || vibrationNumber == this.desiredVibrationNumber);
			    }, "~N");
	Clazz.defineMethod (c$, "setTransform", 
			    function (x1, y1, z1, x2, y2, z2, x3, y3, z3) {
				if (this.matrixRotate != null || !this.doSetOrientation) return;
				this.matrixRotate =  new org.jmol.util.Matrix3f ();
				var v =  new org.jmol.util.Vector3f ();
				v.set (x1, y1, z1);
				v.normalize ();
				this.matrixRotate.setColumnV (0, v);
				v.set (x2, y2, z2);
				v.normalize ();
				this.matrixRotate.setColumnV (1, v);
				v.set (x3, y3, z3);
				v.normalize ();
				this.matrixRotate.setColumnV (2, v);
				this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("defaultOrientationMatrix", org.jmol.util.Matrix3f.newM (this.matrixRotate));
				var q = org.jmol.util.Quaternion.newM (this.matrixRotate);
				this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("defaultOrientationQuaternion", q);
				org.jmol.util.Logger.info ("defaultOrientationMatrix = " + this.matrixRotate);
			    }, "~N,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomCoordXYZ", 
			    function (atom, x, y, z) {
				atom.set (x, y, z);
				this.setAtomCoord (atom);
			    }, "org.jmol.adapter.smarter.Atom,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomCoord", 
			    function (atom) {
				if (this.fileScaling != null) {
				    atom.x = atom.x * this.fileScaling.x + this.fileOffset.x;
				    atom.y = atom.y * this.fileScaling.y + this.fileOffset.y;
				    atom.z = atom.z * this.fileScaling.z + this.fileOffset.z;
				}if (this.doConvertToFractional && !this.fileCoordinatesAreFractional && this.symmetry != null) {
				    if (!this.symmetry.haveUnitCell ()) this.symmetry.setUnitCell (this.notionalUnitCell);
				    this.symmetry.toFractional (atom, false);
				    this.iHaveFractionalCoordinates = true;
				}this.doCheckUnitCell = true;
			    }, "org.jmol.adapter.smarter.Atom");
	Clazz.defineMethod (c$, "addSites", 
			    function (htSites) {
				this.atomSetCollection.setAtomSetAuxiliaryInfo ("pdbSites", htSites);
				var sites = "";
				for (var entry, $entry = htSites.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
				    var name = entry.getKey ();
				    var htSite = entry.getValue ();
				    var ch;
				    for (var i = name.length; --i >= 0; ) if (!Character.isLetterOrDigit (ch = name.charAt (i)) && ch != '\'') name = name.substring (0, i) + "_" + name.substring (i + 1);

				    var groups = htSite.get ("groups");
				    if (groups.length == 0) continue;
				    this.addSiteScript ("@site_" + name + " " + groups);
				    this.addSiteScript ("site_" + name + " = \"" + groups + "\".split(\",\")");
				    sites += (sites === "" ? "" : ",") + "site_" + name;
				}
				this.addSiteScript ("site_list = \"" + sites + "\".split(\",\")");
			    }, "java.util.Map");
	Clazz.defineMethod (c$, "applySymmetryAndSetTrajectory", 
			    function () {
				if (this.iHaveUnitCell && this.doCheckUnitCell) {
				    this.atomSetCollection.setCoordinatesAreFractional (this.iHaveFractionalCoordinates);
				    this.atomSetCollection.setNotionalUnitCell (this.notionalUnitCell, this.matUnitCellOrientation, this.unitCellOffset);
				    this.atomSetCollection.setAtomSetSpaceGroupName (this.spaceGroup);
				    this.atomSetCollection.setSymmetryRange (this.symmetryRange);
				    if (this.doConvertToFractional || this.fileCoordinatesAreFractional) {
					this.atomSetCollection.setLatticeCells (this.latticeCells, this.applySymmetryToBonds, this.doPackUnitCell, this.doCentroidUnitCell, this.centroidPacked, this.strSupercell, this.ptSupercell);
					if (this.ignoreFileSpaceGroupName || !this.iHaveSymmetryOperators) {
					    if (!this.merging || this.symmetry == null) this.getSymmetry ();
					    if (this.symmetry.createSpaceGroup (this.desiredSpaceGroupIndex, (this.spaceGroup.indexOf ("!") >= 0 ? "P1" : this.spaceGroup), this.notionalUnitCell)) {
						this.atomSetCollection.setAtomSetSpaceGroupName (this.symmetry.getSpaceGroupName ());
						this.atomSetCollection.applySymmetryUsing (this.symmetry);
					    }} else {
						this.atomSetCollection.applySymmetry ();
					    }}if (this.iHaveFractionalCoordinates && this.merging && this.symmetry != null) {
						this.atomSetCollection.toCartesian (this.symmetry);
						this.atomSetCollection.setCoordinatesAreFractional (false);
						this.addVibrations = false;
					    }}if (this.isTrajectory) this.atomSetCollection.setTrajectory ();
				this.initializeSymmetry ();
			    });
	Clazz.defineMethod (c$, "setMOData", 
			    function (moData) {
				this.atomSetCollection.setAtomSetAuxiliaryInfo ("moData", moData);
				if (moData == null) return;
				var orbitals = moData.get ("mos");
				if (orbitals != null) org.jmol.util.Logger.info (orbitals.size () + " molecular orbitals read in model " + this.atomSetCollection.getAtomSetCount ());
			    }, "java.util.Map");
	c$.getElementSymbol = Clazz.defineMethod (c$, "getElementSymbol", 
						  function (elementNumber) {
						      return org.jmol.api.JmolAdapter.getElementSymbol (elementNumber);
						  }, "~N");
	Clazz.defineMethod (c$, "fillDataBlockFixed", 
			    function (data, col0, colWidth, minLineLen) {
				if (colWidth == 0) {
				    this.fillDataBlock (data, minLineLen);
				    return;
				}var nLines = data.length;
				for (var i = 0; i < nLines; i++) {
				    this.discardLinesUntilNonBlank ();
				    var nFields = Clazz.doubleToInt ((this.line.length - col0 + 1) / colWidth);
				    data[i] =  new Array (nFields);
				    for (var j = 0, start = col0; j < nFields; j++, start += colWidth) data[i][j] = this.line.substring (start, Math.min (this.line.length, start + colWidth));

				}
			    }, "~A,~N,~N,~N");
	Clazz.defineMethod (c$, "fillDataBlock", 
			    function (data, minLineLen) {
				var nLines = data.length;
				for (var i = 0; i < nLines; i++) {
				    data[i] = org.jmol.adapter.smarter.AtomSetCollectionReader.getTokensStr (this.discardLinesUntilNonBlank ());
				    if (data[i].length < minLineLen) --i;
				}
			    }, "~A,~N");
	Clazz.defineMethod (c$, "fillFloatArray", 
			    function (s, width, data) {
				var tokens =  new Array (0);
				var pt = 0;
				for (var i = 0; i < data.length; i++) {
				    while (tokens != null && pt >= tokens.length) {
					if (s == null) s = this.readLine ();
					if (width == 0) {
					    tokens = org.jmol.adapter.smarter.AtomSetCollectionReader.getTokensStr (s);
					} else {
					    tokens =  new Array (Clazz.doubleToInt (s.length / width));
					    for (var j = 0; j < tokens.length; j++) tokens[j] = s.substring (j * width, (j + 1) * width);

					}s = null;
					pt = 0;
				    }
				    if (tokens == null) break;
				    data[i] = this.parseFloatStr (tokens[pt++]);
				}
				return data;
			    }, "~S,~N,~A");
	Clazz.defineMethod (c$, "fillFrequencyData", 
			    function (iAtom0, atomCount, modelAtomCount, ignore, isWide, col0, colWidth, atomIndexes, minLineLen) {
				var withSymmetry = (modelAtomCount != atomCount);
				if (atomIndexes != null) atomCount = atomIndexes.length;
				var nLines = (isWide ? atomCount : atomCount * 3);
				var nFreq = ignore.length;
				var data =  new Array (nLines);
				this.fillDataBlockFixed (data, col0, colWidth, minLineLen);
				for (var i = 0, atomPt = 0; i < nLines; i++, atomPt++) {
				    var values = data[i];
				    var valuesY = (isWide ? null : data[++i]);
				    var valuesZ = (isWide ? null : data[++i]);
				    var dataPt = values.length - (isWide ? nFreq * 3 : nFreq) - 1;
				    for (var j = 0, jj = 0; jj < nFreq; jj++) {
					++dataPt;
					var x = values[dataPt];
					if (x.charAt (0) == ')') x = x.substring (1);
					var vx = this.parseFloatStr (x);
					var vy = this.parseFloatStr (isWide ? values[++dataPt] : valuesY[dataPt]);
					var vz = this.parseFloatStr (isWide ? values[++dataPt] : valuesZ[dataPt]);
					if (ignore[jj]) continue;
					var iAtom = (atomIndexes == null ? atomPt : atomIndexes[atomPt]);
					if (iAtom < 0) continue;
					if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("atom " + iAtom + " vib" + j + ": " + vx + " " + vy + " " + vz);
					this.atomSetCollection.addVibrationVectorWithSymmetry (iAtom0 + modelAtomCount * j++ + iAtom, vx, vy, vz, withSymmetry);
				    }
				}
			    }, "~N,~N,~N,~A,~B,~N,~N,~A,~N");
	Clazz.defineMethod (c$, "readLines", 
			    function (nLines) {
				for (var i = nLines; --i >= 0; ) this.readLine ();

				return this.line;
			    }, "~N");
	Clazz.defineMethod (c$, "discardLinesUntilStartsWith", 
			    function (startsWith) {
				while (this.readLine () != null && !this.line.startsWith (startsWith)) {
				}
				return this.line;
			    }, "~S");
	Clazz.defineMethod (c$, "discardLinesUntilContains", 
			    function (containsMatch) {
				while (this.readLine () != null && this.line.indexOf (containsMatch) < 0) {
				}
				return this.line;
			    }, "~S");
	Clazz.defineMethod (c$, "discardLinesUntilContains2", 
			    function (s1, s2) {
				while (this.readLine () != null && this.line.indexOf (s1) < 0 && this.line.indexOf (s2) < 0) {
				}
				return this.line;
			    }, "~S,~S");
	Clazz.defineMethod (c$, "discardLinesUntilBlank", 
			    function () {
				while (this.readLine () != null && this.line.trim ().length != 0) {
				}
			    });
	Clazz.defineMethod (c$, "discardLinesUntilNonBlank", 
			    function () {
				while (this.readLine () != null && this.line.trim ().length == 0) {
				}
				return this.line;
			    });
	Clazz.defineMethod (c$, "checkLineForScript", 
			    function (line) {
				this.line = line;
				this.checkCurrentLineForScript ();
			    }, "~S");
	Clazz.defineMethod (c$, "checkCurrentLineForScript", 
			    function () {
				if (this.line.indexOf ("Jmol") >= 0) {
				    if (this.line.indexOf ("Jmol PDB-encoded data") >= 0) {
					this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("jmolData", this.line);
					if (!this.line.endsWith ("#noautobond")) this.line += "#noautobond";
				    }if (this.line.indexOf ("Jmol data min") >= 0) {
					org.jmol.util.Logger.info (this.line);
					var data =  Clazz.newFloatArray (15, 0);
					this.parseStringInfestedFloatArray (this.line.substring (10).$replace ('=', ' ').$replace ('{', ' ').$replace ('}', ' '), data);
					var minXYZ = org.jmol.util.Point3f.new3 (data[0], data[1], data[2]);
					var maxXYZ = org.jmol.util.Point3f.new3 (data[3], data[4], data[5]);
					this.fileScaling = org.jmol.util.Point3f.new3 (data[6], data[7], data[8]);
					this.fileOffset = org.jmol.util.Point3f.new3 (data[9], data[10], data[11]);
					var plotScale = org.jmol.util.Point3f.new3 (data[12], data[13], data[14]);
					if (plotScale.x <= 0) plotScale.x = 100;
					if (plotScale.y <= 0) plotScale.y = 100;
					if (plotScale.z <= 0) plotScale.z = 100;
					if (this.fileScaling.y == 0) this.fileScaling.y = 1;
					if (this.fileScaling.z == 0) this.fileScaling.z = 1;
					this.setFractionalCoordinates (true);
					this.latticeCells =  Clazz.newIntArray (3, 0);
					this.atomSetCollection.setLatticeCells (this.latticeCells, true, false, false, false, null, null);
					this.setUnitCell (plotScale.x * 2 / (maxXYZ.x - minXYZ.x), plotScale.y * 2 / (maxXYZ.y - minXYZ.y), plotScale.z * 2 / (maxXYZ.z == minXYZ.z ? 1 : maxXYZ.z - minXYZ.z), 90, 90, 90);
					this.unitCellOffset = org.jmol.util.Point3f.newP (plotScale);
					this.unitCellOffset.scale (-1);
					this.symmetry.toFractional (this.unitCellOffset, false);
					this.unitCellOffset.scaleAdd2 (-1.0, minXYZ, this.unitCellOffset);
					this.symmetry.setOffsetPt (this.unitCellOffset);
					this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("jmolDataScaling", [minXYZ, maxXYZ, plotScale]);
				    }}if (this.line.endsWith ("#noautobond")) {
					this.line = this.line.substring (0, this.line.lastIndexOf ('#')).trim ();
					this.atomSetCollection.setNoAutoBond ();
				    }var pt = this.line.indexOf ("jmolscript:");
				if (pt >= 0) {
				    var script = this.line.substring (pt + 11, this.line.length);
				    if (script.indexOf ("#") >= 0) {
					script = script.substring (0, script.indexOf ("#"));
				    }this.addJmolScript (script);
				    this.line = this.line.substring (0, pt).trim ();
				}});
	Clazz.defineMethod (c$, "addJmolScript", 
			    function (script) {
				org.jmol.util.Logger.info ("#jmolScript: " + script);
				if (this.previousScript == null) this.previousScript = "";
				else if (!this.previousScript.endsWith (";")) this.previousScript += ";";
				this.previousScript += script;
				this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("jmolscript", this.previousScript);
			    }, "~S");
	Clazz.defineMethod (c$, "addSiteScript", 
			    function (script) {
				if (this.siteScript == null) this.siteScript = "";
				else if (!this.siteScript.endsWith (";")) this.siteScript += ";";
				this.siteScript += script;
				this.atomSetCollection.setAtomSetCollectionAuxiliaryInfo ("sitescript", this.siteScript);
			    }, "~S");
	Clazz.defineMethod (c$, "readLine", 
			    function () {
				this.prevline = this.line;
				this.line = this.reader.readLine ();
				if (this.os != null && this.line != null) {
				    var b = this.line.getBytes ();
				    this.os.write (b, 0, b.length);
				    {
					this.os.writeByteAsInt(0x0A);
				    }}this.ptLine++;
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug (this.line);
				return this.line;
			    });
	c$.getStrings = Clazz.defineMethod (c$, "getStrings", 
					    function (sinfo, nFields, width) {
						var fields =  new Array (nFields);
						for (var i = 0, pt = 0; i < nFields; i++, pt += width) fields[i] = sinfo.substring (pt, pt + width);

						return fields;
					    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "getTokens", 
			    function () {
				return org.jmol.util.Parser.getTokens (this.line);
			    });
	Clazz.defineMethod (c$, "parseStringInfestedFloatArray", 
			    function (s, data) {
				org.jmol.util.Parser.parseStringInfestedFloatArray (s, null, data);
			    }, "~S,~A");
	c$.getTokensFloat = Clazz.defineMethod (c$, "getTokensFloat", 
						function (s, f, n) {
						    if (f == null) f =  Clazz.newFloatArray (n, 0);
						    org.jmol.util.Parser.parseFloatArrayDataN (org.jmol.adapter.smarter.AtomSetCollectionReader.getTokensStr (s), f, n);
						    return f;
						}, "~S,~A,~N");
	c$.getTokensStr = Clazz.defineMethod (c$, "getTokensStr", 
					      function (s) {
						  return org.jmol.util.Parser.getTokens (s);
					      }, "~S");
	c$.getTokensAt = Clazz.defineMethod (c$, "getTokensAt", 
					     function (s, iStart) {
						 return org.jmol.util.Parser.getTokensAt (s, iStart);
					     }, "~S,~N");
	Clazz.defineMethod (c$, "parseFloat", 
			    function () {
				return org.jmol.util.Parser.parseFloatNext (this.line, this.next);
			    });
	Clazz.defineMethod (c$, "parseFloatStr", 
			    function (s) {
				this.next[0] = 0;
				return org.jmol.util.Parser.parseFloatNext (s, this.next);
			    }, "~S");
	Clazz.defineMethod (c$, "parseFloatRange", 
			    function (s, iStart, iEnd) {
				this.next[0] = iStart;
				return org.jmol.util.Parser.parseFloatRange (s, iEnd, this.next);
			    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "parseInt", 
			    function () {
				return org.jmol.util.Parser.parseIntNext (this.line, this.next);
			    });
	Clazz.defineMethod (c$, "parseIntStr", 
			    function (s) {
				this.next[0] = 0;
				return org.jmol.util.Parser.parseIntNext (s, this.next);
			    }, "~S");
	Clazz.defineMethod (c$, "parseIntAt", 
			    function (s, iStart) {
				this.next[0] = iStart;
				return org.jmol.util.Parser.parseIntNext (s, this.next);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "parseIntRange", 
			    function (s, iStart, iEnd) {
				this.next[0] = iStart;
				return org.jmol.util.Parser.parseIntRange (s, iEnd, this.next);
			    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "parseToken", 
			    function () {
				return org.jmol.util.Parser.parseTokenNext (this.line, this.next);
			    });
	Clazz.defineMethod (c$, "parseTokenStr", 
			    function (s) {
				this.next[0] = 0;
				return org.jmol.util.Parser.parseTokenNext (s, this.next);
			    }, "~S");
	Clazz.defineMethod (c$, "parseTokenNext", 
			    function (s) {
				return org.jmol.util.Parser.parseTokenNext (s, this.next);
			    }, "~S");
	Clazz.defineMethod (c$, "parseTokenRange", 
			    function (s, iStart, iEnd) {
				this.next[0] = iStart;
				return org.jmol.util.Parser.parseTokenRange (s, iEnd, this.next);
			    }, "~S,~N,~N");
	c$.parseTrimmedAt = Clazz.defineMethod (c$, "parseTrimmedAt", 
						function (s, iStart) {
						    return org.jmol.util.Parser.parseTrimmedAt (s, iStart);
						}, "~S,~N");
	c$.parseTrimmedRange = Clazz.defineMethod (c$, "parseTrimmedRange", 
						   function (s, iStart, iEnd) {
						       return org.jmol.util.Parser.parseTrimmedRange (s, iStart, iEnd);
						   }, "~S,~N,~N");
	c$.getFortranFormatLengths = Clazz.defineMethod (c$, "getFortranFormatLengths", 
							 function (s) {
							     var vdata =  new java.util.ArrayList ();
							     var n = 0;
							     var c = 0;
							     var factor = 1;
							     var inN = false;
							     var inCount = true;
							     s += ",";
							     for (var i = 0; i < s.length; i++) {
								 var ch = s.charAt (i);
								 switch (ch) {
								 case '.':
								     inN = false;
								     continue;
								 case ',':
								     for (var j = 0; j < c; j++) vdata.add (Integer.$valueOf (n * factor));

								     inN = false;
								     inCount = true;
								     c = 0;
								     continue;
								 case 'X':
								     n = c;
								     c = 1;
								     factor = -1;
								     continue;
								 }
								 var isDigit = Character.isDigit (ch);
								 if (isDigit) {
								     if (inN) n = n * 10 + ch.charCodeAt (0) - 48;
								     else if (inCount) c = c * 10 + ch.charCodeAt (0) - 48;
								 } else if (Character.isLetter (ch)) {
								     n = 0;
								     inN = true;
								     inCount = false;
								     factor = 1;
								 } else {
								     inN = false;
								 }}
							     return vdata;
							 }, "~S");
	Clazz.defineMethod (c$, "read3Vectors", 
			    function (isBohr) {
				var vectors =  new Array (3);
				var f =  Clazz.newFloatArray (3, 0);
				for (var i = 0; i < 3; i++) {
				    if (i > 0 || Float.isNaN (this.parseFloatStr (this.line))) {
					this.readLine ();
					if (i == 0 && this.line != null) {
					    i = -1;
					    continue;
					}}this.fillFloatArray (this.line, 0, f);
				    vectors[i] =  new org.jmol.util.Vector3f ();
				    vectors[i].setA (f);
				    if (isBohr) vectors[i].scale (0.5291772);
				}
				return vectors;
			    }, "~B");
	Clazz.defineMethod (c$, "setElementAndIsotope", 
			    function (atom, str) {
				var isotope = this.parseIntStr (str);
				if (isotope == -2147483648) {
				    atom.elementSymbol = str;
				} else {
				    str = str.substring (("" + isotope).length);
				    atom.elementNumber = (str.length == 0 ? isotope : ((isotope << 7) + org.jmol.api.JmolAdapter.getElementNumber (str)));
				}}, "org.jmol.adapter.smarter.Atom,~S");
	Clazz.defineStatics (c$,
			     "ANGSTROMS_PER_BOHR", 0.5291772);
    });
    // 
    //// org\jmol\io\LimitedLineReader.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    c$ = Clazz.decorateAsClass (function () {
	this.buf = null;
	this.cchBuf = 0;
	this.ichCurrent = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.io, "LimitedLineReader");
    Clazz.makeConstructor (c$, 
			   function (bufferedReader, readLimit) {
			       bufferedReader.mark (readLimit);
			       this.buf =  Clazz.newCharArray (readLimit, '\0');
			       this.cchBuf = Math.max (bufferedReader.read (this.buf, 0, readLimit), 0);
			       this.ichCurrent = 0;
			       bufferedReader.reset ();
			   }, "java.io.BufferedReader,~N");
    Clazz.defineMethod (c$, "getHeader", 
			function (n) {
			    return (n == 0 ?  String.instantialize (this.buf) :  String.instantialize (this.buf, 0, Math.min (this.cchBuf, n)));
			}, "~N");
    Clazz.defineMethod (c$, "readLineWithNewline", 
			function () {
			    while (this.ichCurrent < this.cchBuf) {
				var ichBeginningOfLine = this.ichCurrent;
				var ch = String.fromCharCode (0);
				while (this.ichCurrent < this.cchBuf && (ch = this.buf[this.ichCurrent++]) != '\r' && ch != '\n') {
				}
				if (ch == '\r' && this.ichCurrent < this.cchBuf && this.buf[this.ichCurrent] == '\n') ++this.ichCurrent;
				var cchLine = this.ichCurrent - ichBeginningOfLine;
				if (this.buf[ichBeginningOfLine] == '#') continue;
				return  String.instantialize (this.buf, ichBeginningOfLine, cchLine);
			    }
			    return "";
			});
    // 
    //// org\jmol\constant\EnumStereoMode.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumStereoMode", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$$name = null;
	    this.$isBiColor = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.constant, "EnumStereoMode", Enum);
	Clazz.makeConstructor (c$, 
			       ($fz = function (name, isBiColor) {
				   this.$$name = name;
				   this.$isBiColor = isBiColor;
			       }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "getName", 
			    function () {
				return this.$$name;
			    });
	Clazz.defineMethod (c$, "isBiColor", 
			    function () {
				return this.$isBiColor;
			    });
	c$.getStereoMode = Clazz.defineMethod (c$, "getStereoMode", 
					       function (id) {
						   for (var item, $item = 0, $$item = org.jmol.constant.EnumStereoMode.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) if (item.$$name.equalsIgnoreCase (id)) return item;

						   return null;
					       }, "~S");
	c$.DEFAULT_STEREO_DEGREES = -5;
	Clazz.defineEnumConstant (c$, "NONE", 0, ["OFF", false]);
	Clazz.defineEnumConstant (c$, "DOUBLE", 1, ["", false]);
	Clazz.defineEnumConstant (c$, "REDCYAN", 2, ["REDCYAN", true]);
	Clazz.defineEnumConstant (c$, "REDBLUE", 3, ["REDBLUE", true]);
	Clazz.defineEnumConstant (c$, "REDGREEN", 4, ["REDGREEN", true]);
	Clazz.defineEnumConstant (c$, "CUSTOM", 5, ["", true]);
    });
    // 
    //// org\jmol\io\Base64.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    Clazz.load (null, "org.jmol.io.Base64", ["org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.declareType (org.jmol.io, "Base64");
	c$.write = Clazz.defineMethod (c$, "write", 
				       function (bytes, os) {
					   var sb = org.jmol.io.Base64.getBase64 (bytes);
					   var len = sb.length ();
					   var b =  Clazz.newByteArray (1, 0);
					   for (var i = 0; i < len; i++) {
					       b[0] = (sb.charAt (i)).charCodeAt (0);
					       os.write (b, 0, 1);
					   }
				       }, "~A,java.io.OutputStream");
	c$.getBytes64 = Clazz.defineMethod (c$, "getBytes64", 
					    function (bytes) {
						return org.jmol.io.Base64.getBase64 (bytes).toBytes (0, -1);
					    }, "~A");
	c$.getBase64 = Clazz.defineMethod (c$, "getBase64", 
					   function (bytes) {
					       var nBytes = bytes.length;
					       var sout =  new org.jmol.util.StringXBuilder ();
					       if (nBytes == 0) return sout;
					       for (var i = 0, nPad = 0; i < nBytes && nPad == 0; ) {
						   if (i % 75 == 0 && i != 0) sout.append ("\r\n");
						   nPad = (i + 2 == nBytes ? 1 : i + 1 == nBytes ? 2 : 0);
						   var outbytes = ((bytes[i++] << 16) & 0xFF0000) | ((nPad == 2 ? 0 : bytes[i++] << 8) & 0x00FF00) | ((nPad >= 1 ? 0 : bytes[i++]) & 0x0000FF);
						   sout.appendC (org.jmol.io.Base64.base64.charAt ((outbytes >> 18) & 0x3F));
						   sout.appendC (org.jmol.io.Base64.base64.charAt ((outbytes >> 12) & 0x3F));
						   sout.appendC (nPad == 2 ? '=' : org.jmol.io.Base64.base64.charAt ((outbytes >> 6) & 0x3F));
						   sout.appendC (nPad >= 1 ? '=' : org.jmol.io.Base64.base64.charAt (outbytes & 0x3F));
					       }
					       return sout;
					   }, "~A");
	c$.decodeBase64 = Clazz.defineMethod (c$, "decodeBase64", 
					      function (strBase64) {
						  var nBytes = 0;
						  var ch;
						  var chars64 = strBase64.toCharArray ();
						  var len64 = chars64.length;
						  if (len64 == 0) return  Clazz.newByteArray (0, 0);
						  for (var i = len64; --i >= 0; ) nBytes += ((ch = (chars64[i]).charCodeAt (0) & 0x7F) == 65 || org.jmol.io.Base64.decode64[ch] > 0 ? 3 : 0);

						  nBytes = nBytes >> 2;
						  var bytes =  Clazz.newByteArray (nBytes, 0);
						  var offset = 18;
						  for (var i = 0, pt = 0, b = 0; i < len64; i++) {
						      if (org.jmol.io.Base64.decode64[ch = (chars64[i]).charCodeAt (0) & 0x7F] > 0 || ch == 65 || ch == 61) {
							  b |= org.jmol.io.Base64.decode64[ch] << offset;
							  offset -= 6;
							  if (offset < 0) {
							      bytes[pt++] = ((b & 0xFF0000) >> 16);
							      if (pt < nBytes) bytes[pt++] = ((b & 0xFF00) >> 8);
							      if (pt < nBytes) bytes[pt++] = (b & 0xFF);
							      offset = 18;
							      b = 0;
							  }}}
						  return bytes;
					      }, "~S");
	Clazz.defineStatics (c$,
			     "base64", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
			     "decode64", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 62, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 63, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 0, 0, 0, 0]);
    });
    // 
    //// org\jmol\io\CifDataReader.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    Clazz.load (["org.jmol.util.StringXBuilder"], "org.jmol.io.CifDataReader", ["java.util.ArrayList", "$.Hashtable", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.reader = null;
	    this.br = null;
	    this.line = null;
	    this.str = null;
	    this.ich = 0;
	    this.cch = 0;
	    this.wasUnQuoted = false;
	    this.strPeeked = null;
	    this.ichPeeked = 0;
	    this.fieldCount = 0;
	    this.loopData = null;
	    this.fileHeader = null;
	    this.isHeader = true;
	    this.data = null;
	    this.allData = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.io, "CifDataReader");
	Clazz.prepareFields (c$, function () {
	    this.fileHeader =  new org.jmol.util.StringXBuilder ();
	});
	Clazz.makeConstructor (c$, 
			       function (reader) {
				   this.reader = reader;
			       }, "org.jmol.api.JmolLineReader");
	Clazz.makeConstructor (c$, 
			       function (br) {
				   this.br = br;
			       }, "java.io.BufferedReader");
	Clazz.defineMethod (c$, "getFileHeader", 
			    function () {
				return this.fileHeader.toString ();
			    });
	c$.readCifData = Clazz.defineMethod (c$, "readCifData", 
					     function (br) {
						 var cdr =  new org.jmol.io.CifDataReader (br);
						 return cdr.getAllCifData ();
					     }, "java.io.BufferedReader");
	Clazz.defineMethod (c$, "getAllCifData", 
			    ($fz = function () {
				this.line = "";
				var key;
				this.allData =  new java.util.Hashtable ();
				var models =  new java.util.ArrayList ();
				this.allData.put ("models", models);
				try {
				    while ((key = this.getNextToken ()) != null) {
					if (key.startsWith ("global_") || key.startsWith ("data_")) {
					    models.add (this.data =  new java.util.Hashtable ());
					    this.data.put ("name", key);
					    continue;
					}if (key.startsWith ("loop_")) {
					    this.getCifLoopData ();
					    continue;
					}if (key.indexOf ("_") != 0) {
					    org.jmol.util.Logger.warn ("CIF ERROR ? should be an underscore: " + key);
					} else {
					    var value = this.getNextToken ();
					    if (value == null) {
						org.jmol.util.Logger.warn ("CIF ERROR ? end of file; data missing: " + key);
					    } else {
						this.data.put (key, value);
					    }}}
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				try {
				    if (this.br != null) this.br.close ();
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				return this.allData;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "readLine", 
			    function () {
				try {
				    this.line = (this.reader != null ? this.reader.readNextLine () : this.br.readLine ());
				    if (this.line == null) return null;
				    if (this.isHeader) {
					if (this.line.startsWith ("#")) this.fileHeader.append (this.line).appendC ('\n');
					else this.isHeader = false;
				    }return this.line;
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					return null;
				    } else {
					throw e;
				    }
				}
			    });
	Clazz.defineMethod (c$, "getData", 
			    function () {
				for (var i = 0; i < this.fieldCount; ++i) if ((this.loopData[i] = this.getNextDataToken ()) == null) return false;

				return true;
			    });
	Clazz.defineMethod (c$, "getNextToken", 
			    function () {
				while (!this.hasMoreTokens ()) if (this.setStringNextLine () == null) return null;

				return this.nextToken ();
			    });
	Clazz.defineMethod (c$, "setString", 
			    ($fz = function (str) {
				this.str = this.line = str;
				this.cch = (str == null ? 0 : str.length);
				this.ich = 0;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setStringNextLine", 
			    ($fz = function () {
				this.setString (this.readLine ());
				if (this.line == null || this.line.length == 0 || this.line.charAt (0) != ';') return this.line;
				this.ich = 1;
				var str = '\1' + this.line.substring (1) + '\n';
				while (this.readLine () != null) {
				    if (this.line.startsWith (";")) {
					str = str.substring (0, str.length - 1) + '\1' + this.line.substring (1);
					break;
				    }str += this.line + '\n';
				}
				this.setString (str);
				return str;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "hasMoreTokens", 
			    ($fz = function () {
				if (this.str == null) return false;
				var ch = '#';
				while (this.ich < this.cch && ((ch = this.str.charAt (this.ich)) == ' ' || ch == '\t')) ++this.ich;

				return (this.ich < this.cch && ch != '#');
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "nextToken", 
			    ($fz = function () {
				if (this.ich == this.cch) return null;
				var ichStart = this.ich;
				var ch = this.str.charAt (ichStart);
				if (ch != '\'' && ch != '"' && ch != '\1') {
				    this.wasUnQuoted = true;
				    while (this.ich < this.cch && (ch = this.str.charAt (this.ich)) != ' ' && ch != '\t') ++this.ich;

				    if (this.ich == ichStart + 1) if (this.str.charAt (ichStart) == '.' || this.str.charAt (ichStart) == '?') return "\0";
				    return this.str.substring (ichStart, this.ich);
				}this.wasUnQuoted = false;
				var chOpeningQuote = ch;
				var previousCharacterWasQuote = false;
				while (++this.ich < this.cch) {
				    ch = this.str.charAt (this.ich);
				    if (previousCharacterWasQuote && (ch == ' ' || ch == '\t')) break;
				    previousCharacterWasQuote = (ch == chOpeningQuote);
				}
				if (this.ich == this.cch) {
				    if (previousCharacterWasQuote) return this.str.substring (ichStart + 1, this.ich - 1);
				    return this.str.substring (ichStart, this.ich);
				}++this.ich;
				return this.str.substring (ichStart + 1, this.ich - 2);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getNextDataToken", 
			    function () {
				var str = this.peekToken ();
				if (str == null) return null;
				if (this.wasUnQuoted) if (str.charAt (0) == '_' || str.startsWith ("loop_") || str.startsWith ("data_") || str.startsWith ("stop_") || str.startsWith ("global_")) return null;
				return this.getTokenPeeked ();
			    });
	Clazz.defineMethod (c$, "peekToken", 
			    function () {
				while (!this.hasMoreTokens ()) if (this.setStringNextLine () == null) return null;

				var ich = this.ich;
				this.strPeeked = this.nextToken ();
				this.ichPeeked = this.ich;
				this.ich = ich;
				return this.strPeeked;
			    });
	Clazz.defineMethod (c$, "getTokenPeeked", 
			    function () {
				this.ich = this.ichPeeked;
				return this.strPeeked;
			    });
	Clazz.defineMethod (c$, "fullTrim", 
			    function (str) {
				var pt0 = 0;
				var pt1 = str.length;
				for (; pt0 < pt1; pt0++) if ("\n\t ".indexOf (str.charAt (pt0)) < 0) break;

				for (; pt0 < pt1; pt1--) if ("\n\t ".indexOf (str.charAt (pt1 - 1)) < 0) break;

				return str.substring (pt0, pt1);
			    }, "~S");
	Clazz.defineMethod (c$, "getCifLoopData", 
			    ($fz = function () {
				var str;
				var keyWords =  new java.util.ArrayList ();
				while ((str = this.peekToken ()) != null && str.charAt (0) == '_') {
				    str = this.getTokenPeeked ();
				    keyWords.add (str);
				    this.data.put (str,  new java.util.ArrayList ());
				}
				this.fieldCount = keyWords.size ();
				if (this.fieldCount == 0) return;
				this.loopData =  new Array (this.fieldCount);
				while (this.getData ()) {
				    for (var i = 0; i < this.fieldCount; i++) {
					(this.data.get (keyWords.get (i))).add (this.loopData[i]);
				    }
				}
			    }, $fz.isPrivate = true, $fz));
    });
    // 
    //// org\jmol\io\JmolBinary.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    Clazz.load (null, "org.jmol.io.JmolBinary", ["java.io.BufferedInputStream", "$.BufferedReader", "$.ByteArrayInputStream", "$.InputStreamReader", "$.StringReader", "org.jmol.api.Interface", "org.jmol.io.Base64", "$.LimitedLineReader", "org.jmol.util.ArrayUtil", "$.Logger", "$.Parser", "$.TextFormat", "org.jmol.viewer.FileManager"], function () {
	c$ = Clazz.declareType (org.jmol.io, "JmolBinary");
	c$.determineSurfaceTypeIs = Clazz.defineMethod (c$, "determineSurfaceTypeIs", 
							function (is) {
							    var br;
							    try {
								br = org.jmol.io.JmolBinary.getInputStreamReader ( new java.io.BufferedInputStream (is));
							    } catch (e) {
								if (Clazz.exceptionOf (e, java.io.IOException)) {
								    return null;
								} else {
								    throw e;
								}
							    }
							    return org.jmol.io.JmolBinary.determineSurfaceFileType (br);
							}, "java.io.InputStream");
	c$.determineSurfaceFileType = Clazz.defineMethod (c$, "determineSurfaceFileType", 
							  function (bufferedReader) {
							      var line = null;
							      var br = null;
							      try {
								  br =  new org.jmol.io.LimitedLineReader (bufferedReader, 16000);
								  line = br.getHeader (0);
							      } catch (e) {
								  if (Clazz.exceptionOf (e, Exception)) {
								  } else {
								      throw e;
								  }
							      }
							      if (br == null || line == null || line.length == 0) return null;
							      switch (line.charAt (0)) {
							      case '@':
								  if (line.indexOf ("@text") == 0) return "Kinemage";
								  break;
							      case '#':
								  if (line.indexOf (".obj") >= 0) return "Obj";
								  if (line.indexOf ("MSMS") >= 0) return "Msms";
								  break;
							      case '&':
								  if (line.indexOf ("&plot") == 0) return "Jaguar";
								  break;
							      case '\r':
							      case '\n':
								  if (line.indexOf ("ZYX") >= 0) return "Xplor";
								  break;
							      }
							      if (line.indexOf ("Here is your gzipped map") >= 0) return "UPPSALA" + line;
							      if (line.indexOf ("! nspins") >= 0) return "CastepDensity";
							      if (line.indexOf ("<jvxl") >= 0 && line.indexOf ("<?xml") >= 0) return "JvxlXML";
							      if (line.indexOf ("#JVXL+") >= 0) return "Jvxl+";
							      if (line.indexOf ("#JVXL") >= 0) return "Jvxl";
							      if (line.indexOf ("<efvet ") >= 0) return "Efvet";
							      if (line.indexOf ("usemtl") >= 0) return "Obj";
							      if (line.indexOf ("# object with") == 0) return "Nff";
							      if (line.indexOf ("BEGIN_DATAGRID_3D") >= 0 || line.indexOf ("BEGIN_BANDGRID_3D") >= 0) return "Xsf";
							      var pt0 = line.indexOf ('\0');
							      if (pt0 >= 0) {
								  if (line.indexOf ("PM\u0001\u0000") == 0) return "Pmesh";
								  if (line.indexOf ("MAP ") == 208) return "MRC";
								  if (line.length > 37 && (line.charCodeAt (36) == 0 && line.charCodeAt (37) == 100 || line.charCodeAt (36) == 0 && line.charCodeAt (37) == 100)) {
								      return "DSN6";
								  }}line = br.readLineWithNewline ();
							      if (line.indexOf ("object 1 class gridpositions counts") == 0) return "Apbs";
							      var tokens = org.jmol.util.Parser.getTokens (line);
							      var line2 = br.readLineWithNewline ();
							      if (tokens.length == 2 && org.jmol.util.Parser.parseInt (tokens[0]) == 3 && org.jmol.util.Parser.parseInt (tokens[1]) != -2147483648) {
								  tokens = org.jmol.util.Parser.getTokens (line2);
								  if (tokens.length == 3 && org.jmol.util.Parser.parseInt (tokens[0]) != -2147483648 && org.jmol.util.Parser.parseInt (tokens[1]) != -2147483648 && org.jmol.util.Parser.parseInt (tokens[2]) != -2147483648) return "PltFormatted";
							      }var line3 = br.readLineWithNewline ();
							      if (line.startsWith ("v ") && line2.startsWith ("v ") && line3.startsWith ("v ")) return "Obj";
							      var nAtoms = org.jmol.util.Parser.parseInt (line3);
							      if (nAtoms == -2147483648) return (line3.indexOf ("+") == 0 ? "Jvxl+" : null);
							      if (nAtoms >= 0) return "Cube";
							      nAtoms = -nAtoms;
							      for (var i = 4 + nAtoms; --i >= 0; ) if ((line = br.readLineWithNewline ()) == null) return null;

							      var nSurfaces = org.jmol.util.Parser.parseInt (line);
							      if (nSurfaces == -2147483648) return null;
							      return (nSurfaces < 0 ? "Jvxl" : "Cube");
							  }, "java.io.BufferedReader");
	c$.isCompoundDocumentStream = Clazz.defineMethod (c$, "isCompoundDocumentStream", 
							  function (is) {
							      var abMagic =  Clazz.newByteArray (8, 0);
							      is.mark (9);
							      var countRead = is.read (abMagic, 0, 8);
							      is.reset ();
							      return (countRead == 8 && abMagic[0] == 0xD0 && abMagic[1] == 0xCF && abMagic[2] == 0x11 && abMagic[3] == 0xE0 && abMagic[4] == 0xA1 && abMagic[5] == 0xB1 && abMagic[6] == 0x1A && abMagic[7] == 0xE1);
							  }, "java.io.InputStream");
	c$.isCompoundDocumentArray = Clazz.defineMethod (c$, "isCompoundDocumentArray", 
							 function (bytes) {
							     return (bytes.length >= 8 && bytes[0] == 0xD0 && bytes[1] == 0xCF && bytes[2] == 0x11 && bytes[3] == 0xE0 && bytes[4] == 0xA1 && bytes[5] == 0xB1 && bytes[6] == 0x1A && bytes[7] == 0xE1);
							 }, "~A");
	c$.isGzipB = Clazz.defineMethod (c$, "isGzipB", 
					 function (bytes) {
					     return (bytes != null && bytes.length > 2 && bytes[0] == 0x1F && bytes[1] == 0x8B);
					 }, "~A");
	c$.isGzipS = Clazz.defineMethod (c$, "isGzipS", 
					 function (is) {
					     var abMagic =  Clazz.newByteArray (4, 0);
					     try {
						 is.mark (5);
						 is.read (abMagic, 0, 4);
						 is.reset ();
					     } catch (e) {
						 if (Clazz.exceptionOf (e, java.io.IOException)) {
						 } else {
						     throw e;
						 }
					     }
					     return org.jmol.io.JmolBinary.isGzipB (abMagic);
					 }, "java.io.InputStream");
	c$.isZipStream = Clazz.defineMethod (c$, "isZipStream", 
					     function (is) {
						 var abMagic =  Clazz.newByteArray (4, 0);
						 try {
						     is.mark (5);
						     is.read (abMagic, 0, 4);
						     is.reset ();
						 } catch (e) {
						     if (Clazz.exceptionOf (e, Exception)) {
						     } else {
							 throw e;
						     }
						 }
						 return org.jmol.io.JmolBinary.isZipFile (abMagic);
					     }, "java.io.InputStream");
	c$.isZipFile = Clazz.defineMethod (c$, "isZipFile", 
					   function (bytes) {
					       return (bytes.length >= 4 && bytes[0] == 80 && bytes[1] == 75 && bytes[2] == 3 && bytes[3] == 4);
					   }, "~A");
	c$.isPngZipStream = Clazz.defineMethod (c$, "isPngZipStream", 
						function (is) {
						    if (org.jmol.io.JmolBinary.isZipStream (is)) return false;
						    try {
							is.mark (56);
							var abMagic = org.jmol.io.JmolBinary.getStreamBytes (is, 55);
							is.reset ();
							return (abMagic[51] == 80 && abMagic[52] == 78 && abMagic[53] == 71 && abMagic[54] == 74);
						    } catch (e) {
							if (Clazz.exceptionOf (e, Exception)) {
							} else {
							    throw e;
							}
						    }
						    return false;
						}, "java.io.InputStream");
	c$.getZipRoot = Clazz.defineMethod (c$, "getZipRoot", 
					    function (fileName) {
						var pt = fileName.indexOf ("|");
						return (pt < 0 ? fileName : fileName.substring (0, pt));
					    }, "~S");
	c$.getStreamBytes = Clazz.defineMethod (c$, "getStreamBytes", 
						function (is, n) {
						    var buflen = (n >= 0 && n < 1024 ? n : 1024);
						    var buf =  Clazz.newByteArray (buflen, 0);
						    var bytes =  Clazz.newByteArray (n < 0 ? 4096 : n, 0);
						    var len = 0;
						    var totalLen = 0;
						    while ((n < 0 || totalLen < n) && (len = is.read (buf, 0, buflen)) > 0) {
							totalLen += len;
							if (totalLen > bytes.length) bytes = org.jmol.util.ArrayUtil.ensureLengthByte (bytes, totalLen * 2);
							System.arraycopy (buf, 0, bytes, totalLen - len, len);
						    }
						    if (totalLen == bytes.length) return bytes;
						    buf =  Clazz.newByteArray (totalLen, 0);
						    System.arraycopy (bytes, 0, buf, 0, totalLen);
						    return buf;
						}, "java.io.InputStream,~N");
	c$.getEmbeddedScript = Clazz.defineMethod (c$, "getEmbeddedScript", 
						   function (script) {
						       if (script == null) return script;
						       var pt = script.indexOf ("**** Jmol Embedded Script ****");
						       if (pt < 0) return script;
						       var pt1 = script.lastIndexOf ("/*", pt);
						       var pt2 = script.indexOf ((script.charAt (pt1 + 2) == '*' ? "*" : "") + "*/", pt);
						       if (pt1 >= 0 && pt2 >= pt) script = script.substring (pt + "**** Jmol Embedded Script ****".length, pt2) + "\n";
						       while ((pt1 = script.indexOf (" #Jmol...\u0000")) >= 0) script = script.substring (0, pt1) + script.substring (pt1 + " #Jmol...\u0000".length + 4);

						       if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.info (script);
						       return script;
						   }, "~S");
	c$.getZipDirectoryAsStringAndClose = Clazz.defineMethod (c$, "getZipDirectoryAsStringAndClose", 
								 function (t) {
								     return org.jmol.io.JmolBinary.getJzu ().getZipDirectoryAsStringAndClose (t);
								 }, "java.io.BufferedInputStream");
	c$.getJzu = Clazz.defineMethod (c$, "getJzu", 
					function () {
					    return (org.jmol.io.JmolBinary.jzu == null ? ($t$ = org.jmol.io.JmolBinary.jzu = org.jmol.api.Interface.getOptionInterface ("io2.ZipUtil"), org.jmol.io.JmolBinary.prototype.jzu = org.jmol.io.JmolBinary.jzu, $t$) : org.jmol.io.JmolBinary.jzu);
					});
	c$.newGZIPInputStream = Clazz.defineMethod (c$, "newGZIPInputStream", 
						    function (bis) {
							return org.jmol.io.JmolBinary.getJzu ().newGZIPInputStream (bis);
						    }, "java.io.BufferedInputStream");
	c$.getGzippedBytesAsString = Clazz.defineMethod (c$, "getGzippedBytesAsString", 
							 function (t) {
							     return org.jmol.io.JmolBinary.getJzu ().getGzippedBytesAsString (t);
							 }, "~A");
	c$.newZipInputStream = Clazz.defineMethod (c$, "newZipInputStream", 
						   function ($in) {
						       return org.jmol.io.JmolBinary.getJzu ().newZipInputStream ($in);
						   }, "java.io.InputStream");
	c$.getZipFileContents = Clazz.defineMethod (c$, "getZipFileContents", 
						    function (bis, subFileList, i, b) {
							return org.jmol.io.JmolBinary.getJzu ().getZipFileContents (bis, subFileList, i, b);
						    }, "java.io.BufferedInputStream,~A,~N,~B");
	c$.getZipDirectoryAndClose = Clazz.defineMethod (c$, "getZipDirectoryAndClose", 
							 function (t, addManifest) {
							     return org.jmol.io.JmolBinary.getJzu ().getZipDirectoryAndClose (t, addManifest);
							 }, "java.io.BufferedInputStream,~B");
	c$.getAllZipData = Clazz.defineMethod (c$, "getAllZipData", 
					       function (bis, subFileList, replace, string, fileData) {
						   org.jmol.io.JmolBinary.getJzu ().getAllZipData (bis, subFileList, replace, string, fileData);
					       }, "java.io.BufferedInputStream,~A,~S,~S,java.util.Map");
	c$.getZipFileContentsAsBytes = Clazz.defineMethod (c$, "getZipFileContentsAsBytes", 
							   function (bis, subFileList, i) {
							       return org.jmol.io.JmolBinary.getJzu ().getZipFileContentsAsBytes (bis, subFileList, i);
							   }, "java.io.BufferedInputStream,~A,~N");
	c$.cacheZipContents = Clazz.defineMethod (c$, "cacheZipContents", 
						  function (checkPngZipStream, shortName, pngjCache) {
						      return org.jmol.io.JmolBinary.getJzu ().cacheZipContents (checkPngZipStream, shortName, pngjCache);
						  }, "java.io.BufferedInputStream,~S,java.util.Map");
	c$.createZipSet = Clazz.defineMethod (c$, "createZipSet", 
					      function (fm, viewer, fileName, script, scripts, includeRemoteFiles) {
						  return org.jmol.io.JmolBinary.getJzu ().createZipSet (fm, viewer, fileName, script, scripts, includeRemoteFiles);
					      }, "org.jmol.viewer.FileManager,org.jmol.viewer.Viewer,~S,~S,~A,~B");
	c$.getStreamAsBytes = Clazz.defineMethod (c$, "getStreamAsBytes", 
						  function (bis, os) {
						      var buf =  Clazz.newByteArray (1024, 0);
						      var bytes = (os == null ?  Clazz.newByteArray (4096, 0) : null);
						      var len = 0;
						      var totalLen = 0;
						      while ((len = bis.read (buf, 0, 1024)) > 0) {
							  totalLen += len;
							  if (os == null) {
							      if (totalLen >= bytes.length) bytes = org.jmol.util.ArrayUtil.ensureLengthByte (bytes, totalLen * 2);
							      System.arraycopy (buf, 0, bytes, totalLen - len, len);
							  } else {
							      os.write (buf, 0, len);
							  }}
						      bis.close ();
						      if (os == null) {
							  return org.jmol.util.ArrayUtil.arrayCopyByte (bytes, totalLen);
						      }return totalLen + " bytes";
						  }, "java.io.BufferedInputStream,java.io.OutputStream");
	c$.writeZipFile = Clazz.defineMethod (c$, "writeZipFile", 
					      function (fm, viewer, outFileName, fileNamesAndByteArrays, msg) {
						  return org.jmol.io.JmolBinary.getJzu ().writeZipFile (fm, viewer, outFileName, fileNamesAndByteArrays, msg);
					      }, "org.jmol.viewer.FileManager,org.jmol.viewer.Viewer,~S,java.util.List,~S");
	c$.isBase64 = Clazz.defineMethod (c$, "isBase64", 
					  function (sb) {
					      return (sb.indexOf (";base64,") == 0);
					  }, "org.jmol.util.StringXBuilder");
	c$.getBISForStringXBuilder = Clazz.defineMethod (c$, "getBISForStringXBuilder", 
							 function (sb) {
							     var bytes;
							     if (org.jmol.io.JmolBinary.isBase64 (sb)) {
								 bytes = org.jmol.io.Base64.decodeBase64 (sb.substring (8));
							     } else {
								 bytes = sb.toBytes (0, -1);
							     }return  new java.io.BufferedInputStream ( new java.io.ByteArrayInputStream (bytes));
							 }, "org.jmol.util.StringXBuilder");
	c$.getBufferedReaderForString = Clazz.defineMethod (c$, "getBufferedReaderForString", 
							    function (string) {
								return  new java.io.BufferedReader ( new java.io.StringReader (string));
							    }, "~S");
	c$.getSceneScript = Clazz.defineMethod (c$, "getSceneScript", 
						function (scenes, htScenes, list) {
						    return org.jmol.io.JmolBinary.getJzu ().getSceneScript (scenes, htScenes, list);
						}, "~A,java.util.Map,java.util.List");
	c$.getCachedPngjBytes = Clazz.defineMethod (c$, "getCachedPngjBytes", 
						    function (fm, pathName) {
							return org.jmol.io.JmolBinary.getJzu ().getCachedPngjBytes (fm, pathName);
						    }, "org.jmol.viewer.FileManager,~S");
	c$.cachePngjFile = Clazz.defineMethod (c$, "cachePngjFile", 
					       function (fm, data) {
						   return org.jmol.io.JmolBinary.getJzu ().cachePngjFile (fm, data);
					       }, "org.jmol.viewer.FileManager,~A");
	c$.getAtomSetCollectionOrBufferedReaderFromZip = Clazz.defineMethod (c$, "getAtomSetCollectionOrBufferedReaderFromZip", 
									     function (adapter, is, fileName, zipDirectory, htParams, asBufferedReader, asBufferedInputStream) {
										 return org.jmol.io.JmolBinary.getJzu ().getAtomSetCollectionOrBufferedReaderFromZip (adapter, is, fileName, zipDirectory, htParams, 1, asBufferedReader, asBufferedInputStream);
									     }, "org.jmol.api.JmolAdapter,java.io.InputStream,~S,~A,java.util.Map,~B,~B");
	c$.spartanFileList = Clazz.defineMethod (c$, "spartanFileList", 
						 function (name, zipDirectory) {
						     return org.jmol.io.JmolBinary.getJzu ().spartanFileList (name, zipDirectory);
						 }, "~S,~S");
	c$.getFileReferences = Clazz.defineMethod (c$, "getFileReferences", 
						   function (script, fileList) {
						       for (var ipt = 0; ipt < org.jmol.viewer.FileManager.scriptFilePrefixes.length; ipt++) {
							   var tag = org.jmol.viewer.FileManager.scriptFilePrefixes[ipt];
							   var i = -1;
							   while ((i = script.indexOf (tag, i + 1)) >= 0) {
							       var s = org.jmol.util.Parser.getQuotedStringAt (script, i);
							       if (s.indexOf ("::") >= 0) s = org.jmol.util.TextFormat.splitChars (s, "::")[1];
							       fileList.add (s);
							   }
						       }
						   }, "~S,java.util.List");
	c$.checkPngZipStream = Clazz.defineMethod (c$, "checkPngZipStream", 
						   function (bis) {
						       if (!org.jmol.io.JmolBinary.isPngZipStream (bis)) return bis;
						       var data = null;
						       bis.mark (75);
						       try {
							   data = org.jmol.io.JmolBinary.getStreamBytes (bis, 74);
							   bis.reset ();
							   var pt = 0;
							   for (var i = 64, f = 1; --i > 54; f *= 10) pt += (data[i] - 48) * f;

							   var n = 0;
							   for (var i = 74, f = 1; --i > 64; f *= 10) n += (data[i] - 48) * f;

							   while (pt > 0) pt -= bis.skip (pt);

							   data = org.jmol.io.JmolBinary.getStreamBytes (bis, n);
							   bis.close ();
						       } catch (e) {
							   data =  Clazz.newByteArray (0, 0);
						       }
						       return  new java.io.BufferedInputStream ( new java.io.ByteArrayInputStream (data));
						   }, "java.io.BufferedInputStream");
	c$.getInputStreamReader = Clazz.defineMethod (c$, "getInputStreamReader", 
						      function (is) {
							  return  new java.io.BufferedReader ( new java.io.InputStreamReader (is, "UTF-8"));
						      }, "java.io.InputStream");
	c$.getManifestScriptPath = Clazz.defineMethod (c$, "getManifestScriptPath", 
						       function (manifest) {
							   if (manifest.indexOf ("$SCRIPT_PATH$") >= 0) return "";
							   var ch = (manifest.indexOf ('\n') >= 0 ? '\n' : '\r');
							   if (manifest.indexOf (".spt") >= 0) {
							       var s = org.jmol.util.TextFormat.split (manifest, ch);
							       for (var i = s.length; --i >= 0; ) if (s[i].indexOf (".spt") >= 0) return "|" + org.jmol.util.TextFormat.trim (s[i], "\r\n \t");

							   }return null;
						       }, "~S");
	Clazz.defineStatics (c$,
			     "JPEG_CONTINUE_STRING", " #Jmol...\0",
			     "PMESH_BINARY_MAGIC_NUMBER", "PM\u0001\u0000",
			     "jzu", null);
    });
    // 
    //// org\jmol\io\OutputStringBuilder.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    Clazz.load (null, "org.jmol.io.OutputStringBuilder", ["java.io.BufferedWriter", "$.OutputStreamWriter", "org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.type = null;
	    this.sb = null;
	    this.bw = null;
	    this.nBytes = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.io, "OutputStringBuilder");
	Clazz.makeConstructor (c$, 
			       function (os) {
				   if (os == null) {
				       this.sb =  new org.jmol.util.StringXBuilder ();
				   } else {
				       var osw =  new java.io.OutputStreamWriter (os);
				       this.bw =  new java.io.BufferedWriter (osw, 8192);
				   }}, "java.io.BufferedOutputStream");
	Clazz.defineMethod (c$, "append", 
			    function (s) {
				if (this.bw == null) {
				    this.sb.append (s);
				} else {
				    this.nBytes += s.length;
				    try {
					this.bw.write (s);
				    } catch (e) {
					if (Clazz.exceptionOf (e, java.io.IOException)) {
					} else {
					    throw e;
					}
				    }
				}return this;
			    }, "~S");
	Clazz.defineMethod (c$, "length", 
			    function () {
				return (this.bw == null ? this.sb.length () : this.nBytes);
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  if (this.bw != null) try {
				      this.bw.flush ();
				  } catch (e) {
				      if (Clazz.exceptionOf (e, java.io.IOException)) {
				      } else {
					  throw e;
				      }
				  }
				  return (this.bw == null ? this.sb.toString () : this.nBytes + " bytes");
			      });
    });
    // 
    //// org\jmol\script\ScriptCompilationTokenParser.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (null, "org.jmol.script.ScriptCompilationTokenParser", ["java.lang.Float", "java.util.ArrayList", "org.jmol.i18n.GT", "org.jmol.script.ScriptEvaluator", "$.Token", "org.jmol.util.Logger", "$.Point3f", "$.TextFormat", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.script = null;
	    this.isStateScript = false;
	    this.lineCurrent = 0;
	    this.iCommand = 0;
	    this.ichCurrentCommand = 0;
	    this.ichComment = 0;
	    this.ichEnd = 0;
	    this.ichToken = 0;
	    this.theToken = null;
	    this.lastFlowCommand = null;
	    this.tokenCommand = null;
	    this.lastToken = null;
	    this.tokenAndEquals = null;
	    this.theTok = 0;
	    this.nTokens = 0;
	    this.tokCommand = 0;
	    this.ptNewSetModifier = 0;
	    this.isNewSet = false;
	    this.logMessages = false;
	    this.atokenInfix = null;
	    this.itokenInfix = 0;
	    this.isSetBrace = false;
	    this.isMathExpressionCommand = false;
	    this.isSetOrDefine = false;
	    this.ltokenPostfix = null;
	    this.isEmbeddedExpression = false;
	    this.isCommaAsOrAllowed = false;
	    this.theValue = null;
	    this.htUserFunctions = null;
	    this.haveString = false;
	    this.residueSpecCodeGenerated = false;
	    this.errorMessage = null;
	    this.errorMessageUntranslated = null;
	    this.errorLine = null;
	    this.errorType = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptCompilationTokenParser");
	Clazz.defineMethod (c$, "compileExpressions", 
			    function () {
				var isScriptExpression = (this.tokCommand == 135271429 && this.tokAt (2) == 269484048);
				this.isEmbeddedExpression = isScriptExpression || (this.tokCommand != 0 && (this.tokCommand != 135368713 && this.tokCommand != 102436 && this.tokCommand != 364558 && this.tokCommand != 102412 || this.tokenCommand.intValue != 2147483647) && this.tokCommand != 1150985 && !org.jmol.script.Token.tokAttrOr (this.tokCommand, 12288, 20480));
				this.isMathExpressionCommand = (this.tokCommand == 1073741824 || isScriptExpression || org.jmol.script.Token.tokAttr (this.tokCommand, 36864));
				var checkExpression = this.isEmbeddedExpression || (org.jmol.script.Token.tokAttr (this.tokCommand, 12288));
				if (this.tokAt (1) == 1048583 && org.jmol.script.Token.tokAttr (this.tokCommand, 12288)) checkExpression = false;
				if (checkExpression && !this.compileExpression ()) return false;
				var size = this.atokenInfix.length;
				var nDefined = 0;
				for (var i = 1; i < size; i++) {
				    if (this.tokAt (i) == 1060866) nDefined++;
				}
				size -= nDefined;
				if (this.isNewSet) {
				    if (size == 1) {
					this.atokenInfix[0] = org.jmol.script.Token.newTokenIntVal (135368713, 0, this.atokenInfix[0].value);
					this.isNewSet = false;
				    }}if ((this.isNewSet || this.isSetBrace) && size < this.ptNewSetModifier + 2) return this.commandExpected ();
				return (size == 1 || !org.jmol.script.Token.tokAttr (this.tokCommand, 262144) ? true : this.error (0));
			    });
	Clazz.defineMethod (c$, "compileExpression", 
			    function () {
				var firstToken = (this.isSetOrDefine && !this.isSetBrace ? 2 : 1);
				this.ltokenPostfix =  new java.util.ArrayList ();
				this.itokenInfix = 0;
				var tokenBegin = null;
				var tok = this.tokAt (1);
				switch (this.tokCommand) {
				case 1060866:
				    if (this.tokAt (1) == 2 && this.tokAt (2) == 1048584 && this.tokAt (4) == 269484436) {
					this.tokCommand = 1085443;
					this.isSetBrace = true;
					this.ptNewSetModifier = 4;
					this.isMathExpressionCommand = true;
					this.isEmbeddedExpression = true;
					this.addTokenToPostfixToken (org.jmol.script.Token.tokenSetProperty);
					this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionBegin);
					this.addNextToken ();
					this.addNextToken ();
					this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionEnd);
					firstToken = 0;
				    }break;
				case 12295:
				    if (tok == 1678770178) firstToken = 2;
				    break;
				case 12294:
				case 1610625028:
				case 135280132:
				    switch (tok) {
				    case 1276118017:
				    case 1073742119:
					firstToken = 2;
					tok = this.tokAt (2);
					break;
				    }
				    if (tok == 1087373318) firstToken++;
				}
				for (var i = 0; i < firstToken && this.addNextToken (); i++) {
				}
				while (this.moreTokens ()) {
				    if (this.isEmbeddedExpression) {
					while (!this.isExpressionNext ()) {
					    if (this.tokPeekIs (1073741824) && !(this.tokCommand == 135271426 && this.itokenInfix == 1)) {
						var name = this.atokenInfix[this.itokenInfix].value;
						var t = org.jmol.script.Token.getTokenFromName (name);
						if (t != null) if (!this.isMathExpressionCommand && this.lastToken.tok != 1060866 || (this.lastToken.tok == 1048584 || this.tokAt (this.itokenInfix + 1) == 269484048) && !this.isUserFunction (name)) {
						    this.atokenInfix[this.itokenInfix] = t;
						}}if (!this.addNextToken ()) break;
					}
					if (!this.moreTokens ()) break;
				    }if (this.lastToken.tok == 1060866) {
					if (!this.clauseDefine (true, false)) return false;
					continue;
				    }if (!this.isMathExpressionCommand) this.addTokenToPostfixToken (tokenBegin = org.jmol.script.Token.newTokenObj (1048577, "implicitExpressionBegin"));
				    if (!this.clauseOr (this.isCommaAsOrAllowed || !this.isMathExpressionCommand && this.tokPeekIs (269484048))) return false;
				    if (!this.isMathExpressionCommand && !(this.isEmbeddedExpression && this.lastToken === org.jmol.script.Token.tokenCoordinateEnd)) {
					this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionEnd);
				    }if (this.moreTokens ()) {
					if (this.tokCommand != 135280132 && !this.isEmbeddedExpression) return this.error (5);
					if (this.tokCommand == 135280132) {
					    tokenBegin.intValue = 0;
					    this.tokCommand = 0;
					    this.isEmbeddedExpression = true;
					    this.isMathExpressionCommand = true;
					    this.isCommaAsOrAllowed = false;
					}}}
				this.atokenInfix = this.ltokenPostfix.toArray ( new Array (this.ltokenPostfix.size ()));
				return true;
			    });
	Clazz.defineMethod (c$, "isUserFunction", 
			    function (name) {
				return (!this.isStateScript && (this.viewer.isFunction (name) || this.htUserFunctions.containsKey (name)));
			    }, "~S");
	Clazz.defineMethod (c$, "isExpressionNext", 
			    ($fz = function () {
				return this.tokPeekIs (1048586) && !(this.tokAt (this.itokenInfix + 1) == 4 && this.tokAt (this.itokenInfix + 2) == 269484066) || !this.isMathExpressionCommand && this.tokPeekIs (269484048);
			    }, $fz.isPrivate = true, $fz));
	c$.tokenAttr = Clazz.defineMethod (c$, "tokenAttr", 
					   function (token, tok) {
					       return token != null && org.jmol.script.Token.tokAttr (token.tok, tok);
					   }, "org.jmol.script.Token,~N");
	Clazz.defineMethod (c$, "moreTokens", 
			    ($fz = function () {
				return (this.itokenInfix < this.atokenInfix.length);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "tokAt", 
			    function (i) {
				return (i < this.atokenInfix.length ? this.atokenInfix[i].tok : 0);
			    }, "~N");
	Clazz.defineMethod (c$, "tokPeek", 
			    ($fz = function () {
				return (this.itokenInfix >= this.atokenInfix.length ? 0 : this.atokenInfix[this.itokenInfix].tok);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "tokPeekIs", 
			    ($fz = function (tok) {
				return (this.tokAt (this.itokenInfix) == tok);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "intPeek", 
			    ($fz = function () {
				return (this.itokenInfix >= this.atokenInfix.length ? 2147483647 : this.atokenInfix[this.itokenInfix].intValue);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "valuePeek", 
			    ($fz = function () {
				return (this.moreTokens () ? this.atokenInfix[this.itokenInfix].value : "");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "tokenNext", 
			    ($fz = function () {
				return (this.itokenInfix >= this.atokenInfix.length ? null : this.atokenInfix[this.itokenInfix++]);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "tokenNextTok", 
			    ($fz = function (tok) {
				var token = this.tokenNext ();
				return (token != null && token.tok == tok);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "returnToken", 
			    ($fz = function () {
				this.itokenInfix--;
				return false;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getToken", 
			    ($fz = function () {
				this.theValue = ((this.theToken = this.tokenNext ()) == null ? null : this.theToken.value);
				return this.theToken;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "isToken", 
			    ($fz = function (tok) {
				return this.theToken != null && this.theToken.tok == tok;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getNumericalToken", 
			    ($fz = function () {
				return (this.getToken () != null && (this.isToken (2) || this.isToken (3)));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "floatValue", 
			    ($fz = function () {
				switch (this.theToken.tok) {
				case 2:
				    return this.theToken.intValue;
				case 3:
				    return (this.theValue).floatValue ();
				}
				return 0;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "addTokenToPostfix", 
			    ($fz = function (tok, value) {
				return this.addTokenToPostfixToken (org.jmol.script.Token.newTokenObj (tok, value));
			    }, $fz.isPrivate = true, $fz), "~N,~O");
	Clazz.defineMethod (c$, "addTokenToPostfixInt", 
			    ($fz = function (tok, intValue, value) {
				return this.addTokenToPostfixToken (org.jmol.script.Token.newTokenIntVal (tok, intValue, value));
			    }, $fz.isPrivate = true, $fz), "~N,~N,~O");
	Clazz.defineMethod (c$, "addTokenToPostfixToken", 
			    ($fz = function (token) {
				if (token == null) return false;
				if (this.logMessages) org.jmol.util.Logger.info ("addTokenToPostfix" + token);
				this.ltokenPostfix.add (token);
				this.lastToken = token;
				return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "addNextToken", 
			    ($fz = function () {
				return this.addTokenToPostfixToken (this.tokenNext ());
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "addNextTokenIf", 
			    ($fz = function (tok) {
				return (this.tokPeekIs (tok) && this.addNextToken ());
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "addSubstituteTokenIf", 
			    ($fz = function (tok, token) {
				if (!this.tokPeekIs (tok)) return false;
				this.itokenInfix++;
				return this.addTokenToPostfixToken (token);
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.script.Token");
	Clazz.defineMethod (c$, "clauseOr", 
			    ($fz = function (allowComma) {
				this.haveString = false;
				if (!this.clauseAnd ()) return false;
				if (this.isEmbeddedExpression && this.lastToken.tok == 1048578) return true;
				var tok;
				while ((tok = this.tokPeek ()) == 269484112 || tok == 269484113 || tok == 269484114 || allowComma && tok == 269484080) {
				    if (tok == 269484080 && !this.haveString) this.addSubstituteTokenIf (269484080, org.jmol.script.Token.tokenOr);
				    else this.addNextToken ();
				    if (!this.clauseAnd ()) return false;
				    if (allowComma && (this.lastToken.tok == 1048590 || this.lastToken.tok == 10)) this.haveString = true;
				}
				return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "clauseAnd", 
			    ($fz = function () {
				if (!this.clauseNot ()) return false;
				if (this.isEmbeddedExpression && this.lastToken.tok == 1048578) return true;
				while (this.tokPeekIs (269484128)) {
				    this.addNextToken ();
				    if (!this.clauseNot ()) return false;
				}
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseNot", 
			    ($fz = function () {
				if (this.tokPeekIs (269484144)) {
				    this.addNextToken ();
				    return this.clauseNot ();
				}return (this.clausePrimitive ());
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clausePrimitive", 
			    ($fz = function () {
				var tok = this.tokPeek ();
				switch (tok) {
				case 1073742195:
				    this.itokenInfix++;
				    return this.clausePrimitive ();
				case 0:
				    return this.error (4);
				case 1048579:
				case 10:
				case 269484208:
				case 137363468:
				case 3145736:
				case 3145735:
				case 3145738:
				case 1048585:
				case 1048587:
				case 3145760:
				    return this.addNextToken ();
				case 4:
				    this.haveString = true;
				    return this.addNextToken ();
				case 3:
				    return this.addTokenToPostfixInt (1048611, this.fixModelSpec (this.getToken ()), this.theValue);
				case 1095761925:
				    return this.clauseCell ();
				case 135266310:
				    return this.clauseConnected ();
				case 135267335:
				case 135267336:
				    return this.clauseSubstructure ();
				case 135266324:
				case 135402505:
				    return this.clauseWithin (tok == 135266324);
				case 1060866:
				    return this.clauseDefine (false, false);
				case 1678770178:
				case 1746538509:
				    this.addNextToken ();
				    if (this.tokPeekIs (10)) this.addNextToken ();
				    else if (this.tokPeekIs (1060866)) return this.clauseDefine (false, false);
				    return true;
				case 269484048:
				    this.addNextToken ();
				    if (!this.clauseOr (true)) return false;
				    if (!this.addNextTokenIf (269484049)) return this.errorStr (15, ")");
				    return this.checkForItemSelector (true);
				case 1048586:
				    return this.checkForCoordinate (this.isMathExpressionCommand);
				default:
				    if (this.clauseResidueSpec ()) return true;
				    if (this.isError ()) return false;
				    if (org.jmol.script.Token.tokAttr (tok, 1078984704)) {
					var itemp = this.itokenInfix;
					var isOK = this.clauseComparator (true);
					if (isOK || this.itokenInfix != itemp) return isOK;
					if (tok == 1238369286) {
					    return this.clauseSubstructure ();
					}}return this.addNextToken ();
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkForCoordinate", 
			    ($fz = function (isImplicitExpression) {
				var isCoordinate = false;
				var pt = this.ltokenPostfix.size ();
				if (isImplicitExpression) {
				    this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionBegin);
				    this.tokenNext ();
				} else if (this.isEmbeddedExpression) {
				    this.tokenNext ();
				    pt--;
				} else {
				    this.addNextToken ();
				}var isHash = this.tokPeekIs (4);
				if (isHash) {
				    isImplicitExpression = false;
				    this.returnToken ();
				    this.ltokenPostfix.remove (this.ltokenPostfix.size () - 1);
				    this.addNextToken ();
				    var nBrace = 1;
				    while (nBrace != 0) {
					if (this.tokPeekIs (1048586)) {
					    if (this.isExpressionNext ()) {
						this.addTokenToPostfixToken (org.jmol.script.Token.newTokenObj (1048577, "implicitExpressionBegin"));
						if (!this.clauseOr (true)) return false;
						if (this.lastToken !== org.jmol.script.Token.tokenCoordinateEnd) {
						    this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionEnd);
						}} else {
						    nBrace++;
						}}if (this.tokPeekIs (1048590)) nBrace--;
					this.addNextToken ();
				    }
				} else {
				    if (!this.tokPeekIs (1048590) && !this.clauseOr (false)) return false;
				    var n = 1;
				    while (!this.tokPeekIs (1048590)) {
					var haveComma = this.addNextTokenIf (269484080);
					if (!this.clauseOr (false)) return (haveComma || n < 3 ? false : this.errorStr (15, "}"));
					n++;
				    }
				    isCoordinate = (n >= 2);
				}if (isCoordinate && (isImplicitExpression || this.isEmbeddedExpression)) {
				    this.ltokenPostfix.set (pt, org.jmol.script.Token.tokenCoordinateBegin);
				    this.addTokenToPostfixToken (org.jmol.script.Token.tokenCoordinateEnd);
				    this.tokenNext ();
				} else if (isImplicitExpression) {
				    this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionEnd);
				    this.tokenNext ();
				} else if (this.isEmbeddedExpression && !isHash) {
				    this.tokenNext ();
				} else {
				    this.addNextToken ();
				}return this.checkForItemSelector (!isHash);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "checkForItemSelector", 
			    ($fz = function (allowNumeric) {
				var tok;
				if ((tok = this.tokAt (this.itokenInfix + 1)) == 269484096 || allowNumeric && tok == 1048586) return true;
				while (true) {
				    if (!this.addNextTokenIf (269484096)) break;
				    if (!this.clauseItemSelector ()) return false;
				    if (!this.addNextTokenIf (269484097)) return this.errorStr (15, "]");
				}
				return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "clauseWithin", 
			    ($fz = function (isWithin) {
				this.addNextToken ();
				if (!this.addNextTokenIf (269484048)) return false;
				if (this.getToken () == null) return false;
				var distance = 3.4028235E38;
				var key = null;
				var allowComma = isWithin;
				var tok;
				var tok0 = this.theToken.tok;
				if (!isWithin) {
				    tok = -1;
				    for (var i = this.itokenInfix; tok != 0; i++) {
					switch (tok = this.tokAt (i)) {
					case 269484080:
					    tok = 0;
					    break;
					case 1048586:
					case 269484048:
					case 269484049:
					    distance = 100;
					    this.returnToken ();
					    tok0 = tok = 0;
					    break;
					}
				    }
				}switch (tok0) {
				case 269484192:
				    if (this.getToken () == null) return false;
				    if (this.theToken.tok != 2) return this.error (12);
				    distance = -this.theToken.intValue;
				    break;
				case 2:
				case 3:
				    distance = this.floatValue ();
				    break;
				case 1060866:
				    this.addTokenToPostfixToken (this.theToken);
				    if (!this.clauseDefine (true, false)) return false;
				    key = "";
				    allowComma = false;
				    break;
				}
				if (isWithin && distance == 3.4028235E38) switch (tok0) {
				case 1060866:
				    break;
				case 135267335:
				case 135267336:
				case 1238369286:
				    this.addTokenToPostfix (4, this.theValue);
				    if (!this.addNextTokenIf (269484080)) return false;
				    allowComma = false;
				    tok = this.tokPeek ();
				    switch (tok) {
				    case 0:
					return false;
				    case 4:
					this.addNextToken ();
					key = "";
					break;
				    case 1060866:
					if (!this.clauseDefine (false, true)) return false;
					key = "";
					break;
				    default:
					return false;
				    }
				    break;
				case 1048580:
				    allowComma = false;
				case 1087375361:
				case 1087375362:
				case 1073741864:
				case 1679429641:
				case 1087373316:
				case 1048582:
				case 1087375365:
				case 1087373318:
				case 137363468:
				case 1095766028:
				case 1095761934:
				case 135266319:
				case 135267841:
				case 1095761935:
				case 1087373320:
				case 3145760:
				case 1095761938:
				case 1641025539:
				case 4:
				case 1649412112:
				    key = this.theValue;
				    break;
				case 1073741824:
				    key = (this.theValue).toLowerCase ();
				    break;
				default:
				    return this.errorIntStr2 (18, "WITHIN", ": " + this.theToken.value);
				}
				if (key == null) this.addTokenToPostfix (3,  new Float (distance));
				else if (key.length > 0) this.addTokenToPostfix (4, key);
				var done = false;
				while (!done) {
				    if (tok0 != 0 && !this.addNextTokenIf (269484080)) break;
				    if (tok0 == 0) tok0 = 135402505;
				    var isCoordOrPlane = false;
				    tok = this.tokPeek ();
				    if (isWithin) {
					switch (tok0) {
					case 2:
					case 3:
					    if (tok == 1048589 || tok == 1048588) {
						this.addTokenToPostfixToken (this.getToken ());
						if (!this.addNextTokenIf (269484080)) break;
						tok = this.tokPeek ();
					    }break;
					}
					if (key == null) {
					    switch (tok) {
					    case 135267841:
					    case 1048582:
					    case 135266319:
						isCoordOrPlane = true;
						this.addNextToken ();
						break;
					    case 1048583:
						this.getToken ();
						this.getToken ();
						this.addTokenToPostfix (4, "$" + this.theValue);
						done = true;
						break;
					    case 1087373318:
					    case 1649412112:
						this.getToken ();
						this.addTokenToPostfix (4, org.jmol.script.Token.nameOf (tok));
						break;
					    case 1048586:
						this.returnToken ();
						isCoordOrPlane = true;
						this.addTokenToPostfixToken (org.jmol.script.Token.getTokenFromName (distance == 3.4028235E38 ? "plane" : "coord"));
					    }
					    if (!done) this.addNextTokenIf (269484080);
					}}tok = this.tokPeek ();
				    if (done) break;
				    if (isCoordOrPlane) {
					while (!this.tokPeekIs (269484049)) {
					    switch (this.tokPeek ()) {
					    case 0:
						return this.error (4);
					    case 269484048:
						this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionBegin);
						this.addNextToken ();
						if (!this.clauseOr (false)) return this.errorIntStr2 (18, "WITHIN", ": ?");
						if (!this.addNextTokenIf (269484049)) return this.errorStr (15, ", / )");
						this.addTokenToPostfixToken (org.jmol.script.Token.tokenExpressionEnd);
						break;
					    case 1060866:
						if (!this.clauseDefine (false, false)) return false;
						break;
					    default:
						this.addTokenToPostfixToken (this.getToken ());
					    }
					}
				    } else if (!this.clauseOr (allowComma)) {
				    }}
				if (!this.addNextTokenIf (269484049)) return this.errorStr (15, ")");
				return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "clauseConnected", 
			    ($fz = function () {
				this.addNextToken ();
				if (!this.addNextTokenIf (269484048)) {
				    this.addTokenToPostfixToken (org.jmol.script.Token.tokenLeftParen);
				    this.addTokenToPostfixToken (org.jmol.script.Token.tokenRightParen);
				    return true;
				}while (true) {
				    if (this.addNextTokenIf (2)) if (!this.addNextTokenIf (269484080)) break;
				    if (this.addNextTokenIf (2)) if (!this.addNextTokenIf (269484080)) break;
				    if (this.addNextTokenIf (3)) if (!this.addNextTokenIf (269484080)) break;
				    if (this.addNextTokenIf (3)) if (!this.addNextTokenIf (269484080)) break;
				    var strOrder = this.getToken ().value;
				    var intType = org.jmol.script.ScriptEvaluator.getBondOrderFromString (strOrder);
				    if (intType == 131071) {
					this.returnToken ();
				    } else {
					this.addTokenToPostfix (4, strOrder);
					if (!this.addNextTokenIf (269484080)) break;
				    }if (this.addNextTokenIf (269484049)) return true;
				    if (!this.clauseOr (this.tokPeekIs (269484048))) return false;
				    if (this.addNextTokenIf (269484049)) return true;
				    if (!this.addNextTokenIf (269484080)) return false;
				    if (!this.clauseOr (this.tokPeekIs (269484048))) return false;
				    break;
				}
				if (!this.addNextTokenIf (269484049)) return this.errorStr (15, ")");
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseSubstructure", 
			    ($fz = function () {
				this.addNextToken ();
				if (!this.addNextTokenIf (269484048)) return false;
				if (this.tokPeekIs (1060866)) {
				    if (!this.clauseDefine (false, true)) return false;
				} else if (!this.addNextTokenIf (4)) {
				    return this.errorStr (15, "\"...\"");
				}if (this.addNextTokenIf (269484080)) if (!this.clauseOr (this.tokPeekIs (269484048))) return false;
				if (!this.addNextTokenIf (269484049)) return this.errorStr (15, ")");
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseItemSelector", 
			    ($fz = function () {
				var tok;
				var nparen = 0;
				while ((tok = this.tokPeek ()) != 0 && tok != 269484097) {
				    this.addNextToken ();
				    if (tok == 269484096) nparen++;
				    if (this.tokPeek () == 269484097 && nparen-- > 0) this.addNextToken ();
				}
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseComparator", 
			    ($fz = function (isOptional) {
				var tokenAtomProperty = this.tokenNext ();
				var tokenComparator = this.tokenNext ();
				if (!org.jmol.script.ScriptCompilationTokenParser.tokenAttr (tokenComparator, 269484288)) {
				    if (!isOptional) return this.errorStr (15, "== != < > <= >=");
				    if (tokenComparator != null) this.returnToken ();
				    this.returnToken ();
				    return false;
				}if (org.jmol.script.ScriptCompilationTokenParser.tokenAttr (tokenAtomProperty, 1087373312) && tokenComparator.tok != 269484436 && tokenComparator.tok != 269484438) return this.errorStr (15, "== !=");
				if (this.getToken () == null) return this.errorStr (17, "" + this.valuePeek ());
				var isNegative = (this.isToken (269484192));
				if (isNegative && this.getToken () == null) return this.error (12);
				switch (this.theToken.tok) {
				case 2:
				case 3:
				case 1073741824:
				case 4:
				case 1048586:
				case 1060866:
				    break;
				default:
				    if (!org.jmol.script.Token.tokAttr (this.theToken.tok, 1073741824)) return this.error (13);
				}
				this.addTokenToPostfixInt (tokenComparator.tok, tokenAtomProperty.tok, tokenComparator.value + (isNegative ? " -" : ""));
				if (tokenAtomProperty.tok == 1716520973) this.addTokenToPostfixToken (tokenAtomProperty);
				if (this.isToken (1048586)) {
				    this.returnToken ();
				    return this.clausePrimitive ();
				}this.addTokenToPostfixToken (this.theToken);
				if (this.theToken.tok == 1060866) return this.clauseDefine (false, false);
				return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "clauseCell", 
			    ($fz = function () {
				var cell =  new org.jmol.util.Point3f ();
				this.tokenNext ();
				if (!this.tokenNextTok (269484436)) return this.errorStr (15, "=");
				if (this.getToken () == null) return this.error (3);
				if (this.isToken (2)) {
				    var nnn = this.theToken.intValue;
				    cell.x = Clazz.doubleToInt (nnn / 100) - 4;
				    cell.y = Clazz.doubleToInt ((nnn % 100) / 10) - 4;
				    cell.z = (nnn % 10) - 4;
				    return this.addTokenToPostfix (1095761925, cell);
				}if (!this.isToken (1048586) || !this.getNumericalToken ()) return this.error (3);
				cell.x = this.floatValue ();
				if (this.tokPeekIs (269484080)) this.tokenNext ();
				if (!this.getNumericalToken ()) return this.error (3);
				cell.y = this.floatValue ();
				if (this.tokPeekIs (269484080)) this.tokenNext ();
				if (!this.getNumericalToken () || !this.tokenNextTok (1048590)) return this.error (3);
				cell.z = this.floatValue ();
				return this.addTokenToPostfix (1095761925, cell);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseDefine", 
			    ($fz = function (haveToken, forceString) {
				if (!haveToken) {
				    var token = this.tokenNext ();
				    if (forceString) token = org.jmol.script.Token.tokenDefineString;
				    this.addTokenToPostfixToken (token);
				}if (this.tokPeek () == 0) return this.error (4);
				if (!this.addSubstituteTokenIf (1048586, org.jmol.script.Token.tokenExpressionBegin)) return this.addNextToken () && this.checkForItemSelector (true);
				while (this.moreTokens () && !this.tokPeekIs (1048590)) {
				    if (this.tokPeekIs (1048586)) {
					if (!this.checkForCoordinate (true)) return false;
				    } else {
					this.addNextToken ();
				    }}
				return this.addSubstituteTokenIf (1048590, org.jmol.script.Token.tokenExpressionEnd) && this.checkForItemSelector (true);
			    }, $fz.isPrivate = true, $fz), "~B,~B");
	Clazz.defineMethod (c$, "generateResidueSpecCode", 
			    ($fz = function (token) {
				if (this.residueSpecCodeGenerated) this.addTokenToPostfixToken (org.jmol.script.Token.tokenAND);
				this.addTokenToPostfixToken (token);
				this.residueSpecCodeGenerated = true;
				return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "clauseResidueSpec", 
			    ($fz = function () {
				var tok = this.tokPeek ();
				this.residueSpecCodeGenerated = false;
				var checkResNameSpec = false;
				switch (tok) {
				case 0:
				case 3145732:
				case 3145750:
				    return false;
				case 269484066:
				case 2:
				case 269484210:
				case 5:
				    break;
				case 269484209:
				case 269484096:
				case 1073741824:
				    checkResNameSpec = true;
				    break;
				default:
				    if (org.jmol.script.Token.tokAttr (tok, 269484288)) return false;
				    var str = "" + this.valuePeek ();
				    checkResNameSpec = (str.length == 2 || str.length == 3);
				    if (!checkResNameSpec) return false;
				}
				var specSeen = false;
				if (checkResNameSpec) {
				    if (!this.clauseResNameSpec ()) return false;
				    specSeen = true;
				    tok = this.tokPeek ();
				    if (org.jmol.script.Token.tokAttr (tok, 269484288)) {
					this.returnToken ();
					this.ltokenPostfix.remove (this.ltokenPostfix.size () - 1);
					return false;
				    }}var wasInteger = false;
				if (tok == 269484209 || tok == 2 || tok == 5) {
				    wasInteger = (tok == 2);
				    if (this.tokPeekIs (269484209)) this.getToken ();
				    else if (!this.clauseSequenceSpec ()) return false;
				    specSeen = true;
				    tok = this.tokPeek ();
				}if (tok == 269484066 || tok == 269484209 || tok == 1073741824 || tok == 1112541205 || tok == 1112541206 || tok == 1112541207 || tok == 2 && !wasInteger) {
				    if (!this.clauseChainSpec (tok)) return false;
				    specSeen = true;
				    tok = this.tokPeek ();
				}if (tok == 1048584) {
				    if (!this.clauseAtomSpec ()) return false;
				    specSeen = true;
				    tok = this.tokPeek ();
				}if (tok == 269484210) {
				    if (!this.clauseAlternateSpec ()) return false;
				    specSeen = true;
				    tok = this.tokPeek ();
				}if (tok == 269484066 || tok == 269484208) {
				    if (!this.clauseModelSpec ()) return false;
				    specSeen = true;
				    tok = this.tokPeek ();
				}if (!specSeen) return this.error (14);
				if (!this.residueSpecCodeGenerated) {
				    this.addTokenToPostfixToken (org.jmol.script.Token.tokenAll);
				}return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseResNameSpec", 
			    ($fz = function () {
				this.getToken ();
				switch (this.theToken.tok) {
				case 269484209:
				    return true;
				case 269484096:
				    var strSpec = "";
				    while (this.getToken () != null && !this.isToken (269484097)) strSpec += this.theValue;

				    if (!this.isToken (269484097)) return false;
				    if (strSpec === "") return true;
				    var pt;
				    if (strSpec.length > 0 && (pt = strSpec.indexOf ("*")) >= 0 && pt != strSpec.length - 1) return this.error (14);
				    strSpec = strSpec.toUpperCase ();
				    return this.generateResidueSpecCode (org.jmol.script.Token.newTokenObj (1048612, strSpec));
				default:
				    var res = this.theValue;
				    if (this.tokPeekIs (269484209)) {
					res = this.theValue + "*";
					this.getToken ();
				    }return this.generateResidueSpecCode (org.jmol.script.Token.newTokenObj (1073741824, res));
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseSequenceSpec", 
			    ($fz = function () {
				var seqToken = this.getSequenceCode (false);
				if (seqToken == null) return false;
				var tok = this.tokPeek ();
				if (tok == 269484192 || tok == 2 && this.intPeek () < 0) {
				    if (tok == 269484192) {
					this.tokenNext ();
				    } else {
					var i = -this.intPeek ();
					this.tokenNext ().intValue = i;
					this.returnToken ();
				    }seqToken.tok = 1048615;
				    this.generateResidueSpecCode (seqToken);
				    return this.addTokenToPostfixToken (this.getSequenceCode (true));
				}return this.generateResidueSpecCode (seqToken);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getSequenceCode", 
			    ($fz = function (isSecond) {
				var seqcode = 2147483647;
				var seqvalue = 2147483647;
				var tokPeek = this.tokPeek ();
				if (tokPeek == 5) seqcode = this.tokenNext ().intValue;
				else if (tokPeek == 2) seqvalue = this.tokenNext ().intValue;
				else if (!isSecond) {
				    return null;
				}return org.jmol.script.Token.newTokenIntVal (1048614, seqvalue, Integer.$valueOf (seqcode));
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "clauseChainSpec", 
			    ($fz = function (tok) {
				if (tok == 269484066) {
				    this.tokenNext ();
				    tok = this.tokPeek ();
				    if (this.isSpecTerminator (tok)) return this.generateResidueSpecCode (org.jmol.script.Token.newTokenIntVal (1048609, 0, "spec_chain"));
				}var chain;
				switch (tok) {
				case 269484209:
				    return (this.getToken () != null);
				case 2:
				    this.getToken ();
				    var val = this.theToken.intValue;
				    if (val < 0 || val > 9) return this.error (8);
				    chain = String.fromCharCode (48 + val);
				    break;
				default:
				    var strChain = "" + this.getToken ().value;
				    if (strChain.length != 1) return this.error (8);
				    chain = strChain.charAt (0);
				    if (chain == '?') return true;
				    break;
				}
				return this.generateResidueSpecCode (org.jmol.script.Token.newTokenIntVal (1048609, chain.charCodeAt (0), "spec_chain"));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isSpecTerminator", 
			    ($fz = function (tok) {
				switch (tok) {
				case 0:
				case 269484208:
				case 269484128:
				case 269484112:
				case 269484144:
				case 269484080:
				case 269484210:
				case 269484049:
				case 1048590:
				    return true;
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "clauseAlternateSpec", 
			    ($fz = function () {
				this.tokenNext ();
				var tok = this.tokPeek ();
				if (this.isSpecTerminator (tok)) return this.generateResidueSpecCode (org.jmol.script.Token.newTokenObj (1048607, null));
				var alternate = this.getToken ().value;
				switch (this.theToken.tok) {
				case 269484209:
				case 4:
				case 2:
				case 1073741824:
				    break;
				default:
				    return this.error (10);
				}
				return this.generateResidueSpecCode (org.jmol.script.Token.newTokenObj (1048607, alternate));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "clauseModelSpec", 
			    ($fz = function () {
				this.getToken ();
				if (this.tokPeekIs (269484209)) {
				    this.getToken ();
				    return true;
				}switch (this.tokPeek ()) {
				case 2:
				    return this.generateResidueSpecCode (org.jmol.script.Token.newTokenObj (1048610, Integer.$valueOf (this.getToken ().intValue)));
				case 3:
				    return this.generateResidueSpecCode (org.jmol.script.Token.newTokenIntVal (1048610, this.fixModelSpec (this.getToken ()), this.theValue));
				case 269484080:
				case 1048590:
				case 0:
				    return this.generateResidueSpecCode (org.jmol.script.Token.newTokenObj (1048610, Integer.$valueOf (1)));
				}
				return this.error (10);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "fixModelSpec", 
			    ($fz = function (token) {
				var ival = token.intValue;
				if (ival == 2147483647) {
				    var f = (this.theValue).floatValue ();
				    if (f == Clazz.floatToInt (f)) ival = (Clazz.floatToInt (f)) * 1000000;
				    if (ival < 0) ival = 2147483647;
				}return ival;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "clauseAtomSpec", 
			    ($fz = function () {
				if (!this.tokenNextTok (1048584)) return this.error (7);
				if (this.getToken () == null) return true;
				var atomSpec = "";
				if (this.isToken (2)) {
				    atomSpec += "" + this.theToken.intValue;
				    if (this.getToken () == null) return this.error (7);
				}switch (this.theToken.tok) {
				case 269484209:
				    return true;
				}
				atomSpec += "" + this.theToken.value;
				if (this.tokPeekIs (269484209)) {
				    this.tokenNext ();
				    atomSpec += "'";
				}var atomID = org.jmol.viewer.JmolConstants.lookupSpecialAtomID (atomSpec.toUpperCase ());
				return this.generateResidueSpecCode (org.jmol.script.Token.newTokenIntVal (1048608, atomID, atomSpec));
			    }, $fz.isPrivate = true, $fz));
	c$.errorString = Clazz.defineMethod (c$, "errorString", 
					     function (iError, value, more, translated) {
						 var doTranslate = false;
						 if (!translated && (doTranslate = org.jmol.i18n.GT.getDoTranslate ()) == true) org.jmol.i18n.GT.setDoTranslate (false);
						 var msg;
						 switch (iError) {
						 default:
						     msg = "Unknown compiler error message number: " + iError;
						     break;
						 case 0:
						     msg = org.jmol.i18n.GT._ ("bad argument count");
						     break;
						 case 1:
						     msg = org.jmol.i18n.GT._ ("invalid context for {0}");
						     break;
						 case 2:
						     msg = org.jmol.i18n.GT._ ("command expected");
						     break;
						 case 3:
						     msg = org.jmol.i18n.GT._ ("{ number number number } expected");
						     break;
						 case 4:
						     msg = org.jmol.i18n.GT._ ("unexpected end of script command");
						     break;
						 case 5:
						     msg = org.jmol.i18n.GT._ ("end of expression expected");
						     break;
						 case 6:
						     msg = org.jmol.i18n.GT._ ("identifier or residue specification expected");
						     break;
						 case 7:
						     msg = org.jmol.i18n.GT._ ("invalid atom specification");
						     break;
						 case 8:
						     msg = org.jmol.i18n.GT._ ("invalid chain specification");
						     break;
						 case 9:
						     msg = org.jmol.i18n.GT._ ("invalid expression token: {0}");
						     break;
						 case 10:
						     msg = org.jmol.i18n.GT._ ("invalid model specification");
						     break;
						 case 11:
						     msg = org.jmol.i18n.GT._ ("missing END for {0}");
						     break;
						 case 12:
						     msg = org.jmol.i18n.GT._ ("number expected");
						     break;
						 case 13:
						     msg = org.jmol.i18n.GT._ ("number or variable name expected");
						     break;
						 case 14:
						     msg = org.jmol.i18n.GT._ ("residue specification (ALA, AL?, A*) expected");
						     break;
						 case 15:
						     msg = org.jmol.i18n.GT._ ("{0} expected");
						     break;
						 case 16:
						     msg = org.jmol.i18n.GT._ ("{0} unexpected");
						     break;
						 case 17:
						     msg = org.jmol.i18n.GT._ ("unrecognized expression token: {0}");
						     break;
						 case 18:
						     msg = org.jmol.i18n.GT._ ("unrecognized {0} parameter");
						     break;
						 case 19:
						     msg = org.jmol.i18n.GT._ ("unrecognized token: {0}");
						     break;
						 }
						 if (msg.indexOf ("{0}") < 0) {
						     if (value != null) msg += ": " + value;
						 } else {
						     msg = org.jmol.util.TextFormat.simpleReplace (msg, "{0}", value);
						     if (msg.indexOf ("{1}") >= 0) msg = org.jmol.util.TextFormat.simpleReplace (msg, "{1}", more);
						     else if (more != null) msg += ": " + more;
						 }if (!translated) org.jmol.i18n.GT.setDoTranslate (doTranslate);
						 return msg;
					     }, "~N,~S,~S,~B");
	Clazz.defineMethod (c$, "commandExpected", 
			    function () {
				this.ichToken = this.ichCurrentCommand;
				return this.error (2);
			    });
	Clazz.defineMethod (c$, "error", 
			    function (error) {
				return this.errorIntStr2 (error, null, null);
			    }, "~N");
	Clazz.defineMethod (c$, "errorStr", 
			    function (error, value) {
				return this.errorIntStr2 (error, value, null);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "errorIntStr2", 
			    function (iError, value, more) {
				var strError = org.jmol.script.ScriptCompilationTokenParser.errorString (iError, value, more, true);
				var strUntranslated = (org.jmol.i18n.GT.getDoTranslate () ? org.jmol.script.ScriptCompilationTokenParser.errorString (iError, value, more, false) : null);
				return this.errorStr2 (strError, strUntranslated);
			    }, "~N,~S,~S");
	Clazz.defineMethod (c$, "isError", 
			    ($fz = function () {
				return this.errorMessage != null;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "errorStr2", 
			    function (errorMessage, strUntranslated) {
				this.errorMessage = errorMessage;
				this.errorMessageUntranslated = strUntranslated;
				return false;
			    }, "~S,~S");
	Clazz.defineStatics (c$,
			     "ERROR_badArgumentCount", 0,
			     "ERROR_badContext", 1,
			     "ERROR_commandExpected", 2,
			     "ERROR_endOfCommandUnexpected", 4,
			     "ERROR_invalidExpressionToken", 9,
			     "ERROR_missingEnd", 11,
			     "ERROR_tokenExpected", 15,
			     "ERROR_tokenUnexpected", 16,
			     "ERROR_unrecognizedParameter", 18,
			     "ERROR_unrecognizedToken", 19,
			     "ERROR_coordinateExpected", 3,
			     "ERROR_endOfExpressionExpected", 5,
			     "ERROR_identifierOrResidueSpecificationExpected", 6,
			     "ERROR_invalidAtomSpecification", 7,
			     "ERROR_invalidChainSpecification", 8,
			     "ERROR_invalidModelSpecification", 10,
			     "ERROR_numberExpected", 12,
			     "ERROR_numberOrVariableNameExpected", 13,
			     "ERROR_residueSpecificationExpected", 14,
			     "ERROR_unrecognizedExpressionToken", 17);
    });
    // 
    //// org\jmol\script\ScriptCompiler.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["org.jmol.script.ScriptCompilationTokenParser", "java.util.ArrayList"], "org.jmol.script.ScriptCompiler", ["java.lang.Boolean", "$.Character", "$.Double", "$.Float", "java.util.Hashtable", "org.jmol.i18n.GT", "org.jmol.io.JmolBinary", "org.jmol.modelset.Bond", "$.Group", "org.jmol.script.ContextToken", "$.ScriptContext", "$.ScriptEvaluator", "$.ScriptFlowContext", "$.ScriptFunction", "$.ScriptVariable", "$.Token", "org.jmol.thread.ScriptParallelProcessor", "org.jmol.util.ArrayUtil", "$.BitSet", "$.Escape", "$.Logger", "$.Parser", "$.StringXBuilder", "org.jmol.viewer.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.filename = null;
	    this.isSilent = false;
	    this.contextVariables = null;
	    this.aatokenCompiled = null;
	    this.lineNumbers = null;
	    this.lineIndices = null;
	    this.lnLength = 8;
	    this.preDefining = false;
	    this.isShowScriptOutput = false;
	    this.isCheckOnly = false;
	    this.haveComments = false;
	    this.scriptExtensions = null;
	    this.thisFunction = null;
	    this.flowContext = null;
	    this.ltoken = null;
	    this.lltoken = null;
	    this.vBraces = null;
	    this.ichBrace = 0;
	    this.cchToken = 0;
	    this.cchScript = 0;
	    this.nSemiSkip = 0;
	    this.parenCount = 0;
	    this.braceCount = 0;
	    this.setBraceCount = 0;
	    this.bracketCount = 0;
	    this.ptSemi = 0;
	    this.forPoint3 = 0;
	    this.setEqualPt = 0;
	    this.iBrace = 0;
	    this.iHaveQuotedString = false;
	    this.isEndOfCommand = false;
	    this.needRightParen = false;
	    this.endOfLine = false;
	    this.comment = null;
	    this.tokLastMath = 0;
	    this.checkImpliedScriptCmd = false;
	    this.vFunctionStack = null;
	    this.isShowCommand = false;
	    this.isComment = false;
	    this.isUserToken = false;
	    this.tokInitialPlusPlus = 0;
	    this.vPush = null;
	    this.pushCount = 0;
	    this.chFirst = '\0';
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptCompiler", org.jmol.script.ScriptCompilationTokenParser);
	Clazz.prepareFields (c$, function () {
	    this.vPush =  new java.util.ArrayList ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   Clazz.superConstructor (this, org.jmol.script.ScriptCompiler, []);
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.makeConstructor (c$, 
			       function (compiler) {
				   Clazz.superConstructor (this, org.jmol.script.ScriptCompiler, []);
				   this.viewer = compiler.viewer;
			       }, "org.jmol.script.ScriptCompiler");
	Clazz.defineMethod (c$, "parseScript", 
			    ($fz = function (doFull) {
				var isOK = this.compile0 (doFull);
				if (!isOK) this.handleError ();
				var sc =  new org.jmol.script.ScriptContext ();
				sc.script = this.script;
				sc.scriptExtensions = this.scriptExtensions;
				sc.errorType = this.errorType;
				if (this.errorType != null) {
				    sc.iCommandError = this.iCommand;
				    this.setAaTokenCompiled ();
				}sc.aatoken = this.aatokenCompiled;
				sc.errorMessage = this.errorMessage;
				sc.errorMessageUntranslated = (this.errorMessageUntranslated == null ? this.errorMessage : this.errorMessageUntranslated);
				sc.lineIndices = this.lineIndices;
				sc.lineNumbers = this.lineNumbers;
				sc.contextVariables = this.contextVariables;
				return sc;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "compile", 
			    function (filename, script, isPredefining, isSilent, debugScript, isCheckOnly) {
				this.isCheckOnly = isCheckOnly;
				this.filename = filename;
				this.isSilent = isSilent;
				this.script = script;
				this.logMessages = (!isSilent && !isPredefining && debugScript);
				this.preDefining = (filename === "#predefine");
				return this.parseScript (true);
			    }, "~S,~S,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "addContextVariable", 
			    ($fz = function (ident) {
				this.theToken = org.jmol.script.Token.newTokenObj (1073741824, ident);
				if (this.pushCount > 0) {
				    var ct = this.vPush.get (this.pushCount - 1);
				    ct.addName (ident);
				    if (ct.tok != 364558) return;
				}if (this.thisFunction == null) {
				    if (this.contextVariables == null) this.contextVariables =  new java.util.Hashtable ();
				    org.jmol.script.ScriptCompiler.addContextVariable (this.contextVariables, ident);
				} else {
				    this.thisFunction.addVariable (ident, false);
				}}, $fz.isPrivate = true, $fz), "~S");
	c$.addContextVariable = Clazz.defineMethod (c$, "addContextVariable", 
						    function (contextVariables, ident) {
							contextVariables.put (ident, org.jmol.script.ScriptVariable.newVariable (4, "").setName (ident));
						    }, "java.util.Map,~S");
	Clazz.defineMethod (c$, "isContextVariable", 
			    ($fz = function (ident) {
				for (var i = this.vPush.size (); --i >= 0; ) {
				    var ct = this.vPush.get (i);
				    if (ct.contextVariables != null && ct.contextVariables.containsKey (ident)) return true;
				}
				return (this.thisFunction != null ? this.thisFunction.isVariable (ident) : this.contextVariables != null && this.contextVariables.containsKey (ident));
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "cleanScriptComments", 
			    ($fz = function (script) {
				var pt = (script.indexOf ("\1##"));
				if (pt >= 0) {
				    this.scriptExtensions = script.substring (pt + 1);
				    script = script.substring (0, pt);
				}this.haveComments = (script.indexOf ("#") >= 0);
				return org.jmol.io.JmolBinary.getEmbeddedScript (script);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "addTokenToPrefix", 
			    ($fz = function (token) {
				if (this.logMessages) org.jmol.util.Logger.info ("addTokenToPrefix" + token);
				this.ltoken.add (token);
				if (token.tok != 0) this.lastToken = token;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "compile0", 
			    ($fz = function (isFull) {
				this.vFunctionStack =  new java.util.ArrayList ();
				this.htUserFunctions =  new java.util.Hashtable ();
				this.script = this.script.$replace ('\u201C', '"').$replace ('\u201D', '"');
				this.script = this.cleanScriptComments (this.script);
				this.ichToken = this.script.indexOf ("# Jmol state version ");
				this.isStateScript = (this.ichToken >= 0);
				if (this.isStateScript) {
				    this.ptSemi = this.script.indexOf (";", this.ichToken);
				    if (this.ptSemi >= this.ichToken) this.viewer.setStateScriptVersion (this.script.substring (this.ichToken + "# Jmol state version ".length, this.ptSemi).trim ());
				}this.cchScript = this.script.length;
				this.contextVariables = null;
				this.lineNumbers = null;
				this.lineIndices = null;
				this.aatokenCompiled = null;
				this.thisFunction = null;
				this.flowContext = null;
				this.errorType = null;
				this.errorMessage = null;
				this.errorMessageUntranslated = null;
				this.errorLine = null;
				this.nSemiSkip = 0;
				this.ichToken = 0;
				this.ichCurrentCommand = 0;
				this.ichComment = 0;
				this.ichBrace = 0;
				this.lineCurrent = 1;
				this.iCommand = 0;
				this.tokLastMath = 0;
				this.lastToken = org.jmol.script.Token.tokenOff;
				this.vBraces =  new java.util.ArrayList ();
				this.vPush =  new java.util.ArrayList ();
				this.pushCount = 0;
				this.iBrace = 0;
				this.braceCount = 0;
				this.parenCount = 0;
				this.ptSemi = -10;
				this.cchToken = 0;
				this.lnLength = 8;
				this.lineNumbers =  Clazz.newShortArray (this.lnLength, 0);
				this.lineIndices =  Clazz.newIntArray (this.lnLength, 2, 0);
				this.isNewSet = this.isSetBrace = false;
				this.ptNewSetModifier = 1;
				this.isShowScriptOutput = false;
				this.iHaveQuotedString = false;
				this.checkImpliedScriptCmd = false;
				this.lltoken =  new java.util.ArrayList ();
				this.ltoken =  new java.util.ArrayList ();
				this.tokCommand = 0;
				this.lastFlowCommand = null;
				this.tokenAndEquals = null;
				this.tokInitialPlusPlus = 0;
				this.setBraceCount = 0;
				this.bracketCount = 0;
				this.forPoint3 = -1;
				this.setEqualPt = 2147483647;
				this.endOfLine = false;
				this.comment = null;
				this.isEndOfCommand = false;
				this.needRightParen = false;
				this.theTok = 0;
				var iLine = 1;
				for (; true; this.ichToken += this.cchToken) {
				    if ((this.nTokens = this.ltoken.size ()) == 0) {
					if (this.thisFunction != null && this.thisFunction.chpt0 == 0) this.thisFunction.chpt0 = this.ichToken;
					this.ichCurrentCommand = this.ichToken;
					iLine = this.lineCurrent;
				    }if (this.lookingAtLeadingWhitespace ()) continue;
				    this.endOfLine = false;
				    if (!this.isEndOfCommand) {
					this.endOfLine = this.lookingAtEndOfLine ();
					switch (this.endOfLine ? 0 : this.lookingAtComment ()) {
					case 2:
					    continue;
					case 3:
					    this.isEndOfCommand = true;
					    continue;
					case 1:
					    this.isEndOfCommand = true;
					    this.comment = this.script.substring (this.ichToken, this.ichToken + this.cchToken).trim ();
					    break;
					}
					this.isEndOfCommand = this.isEndOfCommand || this.endOfLine || this.lookingAtEndOfStatement ();
				    }if (this.isEndOfCommand) {
					this.isEndOfCommand = false;
					switch (this.processTokenList (iLine, isFull)) {
					case 2:
					    continue;
					case 4:
					    return false;
					}
					this.checkImpliedScriptCmd = false;
					if (this.ichToken < this.cchScript) continue;
					this.setAaTokenCompiled ();
					return (this.flowContext == null || this.errorStr (11, org.jmol.script.Token.nameOf (this.flowContext.token.tok)));
				    }if (this.nTokens > 0) {
					switch (this.checkSpecialParameterSyntax ()) {
					case 2:
					    continue;
					case 4:
					    return false;
					}
				    }if (this.lookingAtLookupToken (this.ichToken)) {
					var ident = this.getPrefixToken ();
					switch (this.parseKnownToken (ident)) {
					case 2:
					    continue;
					case 4:
					    return false;
					}
					switch (this.parseCommandParameter (ident)) {
					case 2:
					    continue;
					case 4:
					    return false;
					}
					this.addTokenToPrefix (this.theToken);
					continue;
				    }if (this.nTokens == 0 || (this.isNewSet || this.isSetBrace) && this.nTokens == this.ptNewSetModifier) {
					if (this.nTokens == 0) {
					    if (this.lookingAtString (true)) {
						this.addTokenToPrefix (this.setCommand (org.jmol.script.Token.tokenScript));
						this.cchToken = 0;
						continue;
					    }if (this.lookingAtImpliedString (true, true, true)) this.ichEnd = this.ichToken + this.cchToken;
					}return this.commandExpected ();
				    }return this.errorStr (19, this.script.substring (this.ichToken, this.ichToken + 1));
				}
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "setAaTokenCompiled", 
			    ($fz = function () {
				this.aatokenCompiled = this.lltoken.toArray ( new Array (this.lltoken.size ()));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtLeadingWhitespace", 
			    ($fz = function () {
				var ichT = this.ichToken;
				while (ichT < this.cchScript && org.jmol.script.ScriptCompiler.isSpaceOrTab (this.script.charAt (ichT))) ++ichT;

				if (this.isLineContinuation (ichT, true)) ichT += 1 + this.nCharNewLine (ichT + 1);
				this.cchToken = ichT - this.ichToken;
				return this.cchToken > 0;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "isLineContinuation", 
			    ($fz = function (ichT, checkMathop) {
				var isEscaped = (ichT + 2 < this.cchScript && this.script.charAt (ichT) == '\\' && this.nCharNewLine (ichT + 1) > 0 || checkMathop && this.lookingAtMathContinuation (ichT));
				if (isEscaped) this.lineCurrent++;
				return isEscaped;
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "lookingAtMathContinuation", 
			    ($fz = function (ichT) {
				var n;
				if (ichT >= this.cchScript || (n = this.nCharNewLine (ichT)) == 0 || this.lastToken.tok == 1048586) return false;
				if (this.parenCount > 0 || this.bracketCount > 0) return true;
				if ((this.tokCommand != 1085443 || !this.isNewSet) && this.tokCommand != 36865 && this.tokCommand != 36869) return false;
				if (this.lastToken.tok == this.tokLastMath) return true;
				ichT += n;
				while (ichT < this.cchScript && org.jmol.script.ScriptCompiler.isSpaceOrTab (this.script.charAt (ichT))) ++ichT;

				return (this.lookingAtLookupToken (ichT) && this.tokLastMath == 1);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "lookingAtEndOfLine", 
			    ($fz = function () {
				var ichT = this.ichEnd = this.ichToken;
				if (this.ichToken >= this.cchScript) {
				    this.ichEnd = this.cchScript;
				    return true;
				}var n = this.nCharNewLine (ichT);
				if (n == 0) return false;
				this.ichEnd = this.ichToken;
				this.cchToken = n;
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "nCharNewLine", 
			    ($fz = function (ichT) {
				var ch;
				return (ichT >= this.cchScript ? 0 : (ch = this.script.charAt (ichT)) != '\r' ? (ch == '\n' ? 1 : 0) : ++ichT < this.cchScript && this.script.charAt (ichT) == '\n' ? 2 : 1);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "lookingAtEndOfStatement", 
			    ($fz = function () {
				var isSemi = (this.script.charAt (this.ichToken) == ';');
				if (isSemi && this.nTokens > 0) this.ptSemi = this.nTokens;
				if (!isSemi || this.nSemiSkip-- > 0) return false;
				this.cchToken = 1;
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtComment", 
			    ($fz = function () {
				var ch = this.script.charAt (this.ichToken);
				var ichT = this.ichToken;
				var ichFirstSharp = -1;
				if (this.ichToken == this.ichCurrentCommand && ch == '$') {
				    this.isShowScriptOutput = true;
				    this.isShowCommand = true;
				    while (ch != ']' && ichT < this.cchScript && !this.eol (ch = this.script.charAt (ichT))) ++ichT;

				    this.cchToken = ichT - this.ichToken;
				    return 2;
				} else if (this.isShowScriptOutput && !this.isShowCommand) {
				    ichFirstSharp = ichT;
				}if (ch == '/' && ichT + 1 < this.cchScript) switch (this.script.charAt (++ichT)) {
				case '/':
				    ichFirstSharp = this.ichToken;
				    this.ichEnd = ichT - 1;
				    break;
				case '*':
				    this.ichEnd = ichT - 1;
				    var terminator = (++ichT < this.cchScript && (ch = this.script.charAt (ichT)) == '*' ? "**/" : "*/");
				    ichT = this.script.indexOf (terminator, this.ichToken + 2);
				    if (ichT < 0) {
					this.ichToken = this.cchScript;
					return 3;
				    }this.incrementLineCount (this.script.substring (this.ichToken, ichT));
				    this.cchToken = ichT + (ch == '*' ? 3 : 2) - this.ichToken;
				    return 2;
				default:
				    return 0;
				}
				var isSharp = (ichFirstSharp < 0);
				if (isSharp && !this.haveComments) return 0;
				if (this.ichComment > ichT) ichT = this.ichComment;
				for (; ichT < this.cchScript; ichT++) {
				    if (this.eol (ch = this.script.charAt (ichT))) {
					this.ichEnd = ichT;
					if (ichT > 0 && this.isLineContinuation (ichT - 1, false)) {
					    ichT += this.nCharNewLine (ichT);
					    continue;
					}if (!isSharp && ch == ';') continue;
					break;
				    }if (ichFirstSharp >= 0) continue;
				    if (ch == '#') ichFirstSharp = ichT;
				}
				if (ichFirstSharp < 0) return 0;
				this.ichComment = ichFirstSharp;
				if (isSharp && this.nTokens == 0 && this.cchScript - ichFirstSharp >= 3 && this.script.charAt (ichFirstSharp + 1) == 'j' && this.script.charAt (ichFirstSharp + 2) == 'c') {
				    this.cchToken = ichT - this.ichToken;
				    return 2;
				}if (ichFirstSharp != this.ichToken) return 0;
				if (isSharp && this.cchScript > this.ichToken + 3 && this.script.charAt (this.ichToken + 1) == 'j' && this.script.charAt (this.ichToken + 2) == 'x' && org.jmol.script.ScriptCompiler.isSpaceOrTab (this.script.charAt (this.ichToken + 3))) {
				    this.cchToken = 4;
				    return 2;
				}if (ichT == this.ichToken) return 0;
				this.cchToken = ichT - this.ichToken;
				return (this.nTokens == 0 ? 1 : 2);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "processTokenList", 
			    ($fz = function (iLine, doCompile) {
				if (this.nTokens > 0 || this.comment != null) {
				    if (this.nTokens == 0) {
					this.ichCurrentCommand = this.ichToken;
					if (this.comment != null) {
					    this.isComment = true;
					    this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (0, this.comment));
					}} else if (this.setBraceCount > 0 && this.endOfLine && this.ichToken < this.cchScript) {
					    return 2;
					}if (this.tokCommand == 135271429 && this.checkImpliedScriptCmd) {
					    var s = (this.nTokens == 2 ? this.lastToken.value.toString ().toUpperCase () : null);
					    if (this.nTokens > 2 && !(this.tokAt (2) == 269484048 && this.ltoken.get (1).value.toString ().endsWith (".spt")) || s != null && (s.endsWith (".SORT") || s.endsWith (".REVERSE"))) {
						this.ichToken = this.ichCurrentCommand;
						this.nTokens = 0;
						this.ltoken.clear ();
						this.cchToken = 0;
						this.tokCommand = 0;
						return 2;
					    }}if (this.isNewSet && this.nTokens > 2 && this.tokAt (2) == 1048584 && (this.tokAt (3) == 1276117010 || this.tokAt (3) == 1141899269)) {
						this.ltoken.set (0, org.jmol.script.Token.tokenSet);
						this.ltoken.add (1, this.ltoken.get (1));
					    } else if (this.tokInitialPlusPlus != 0) {
						if (!this.isNewSet) this.checkNewSetCommand ();
						this.tokenizePlusPlus (this.tokInitialPlusPlus, true);
					    }this.iCommand = this.lltoken.size ();
				    if (this.thisFunction != null && this.thisFunction.cmdpt0 < 0) {
					this.thisFunction.cmdpt0 = this.iCommand;
				    }if (this.nTokens == 1 && this.braceCount == 1) {
					if (this.lastFlowCommand == null) {
					    this.parenCount = this.setBraceCount = this.braceCount = 0;
					    this.ltoken.remove (0);
					    this.iBrace++;
					    var t =  new org.jmol.script.ContextToken (266280, 0, "{");
					    this.addTokenToPrefix (this.setCommand (t));
					    this.pushCount++;
					    this.vPush.add (t);
					    this.vBraces.add (this.tokenCommand);
					} else {
					    this.parenCount = this.setBraceCount = 0;
					    this.setCommand (this.lastFlowCommand);
					    if (this.lastFlowCommand.tok != 102439 && (this.tokAt (0) == 1048586)) this.ltoken.remove (0);
					    this.lastFlowCommand = null;
					}}if (this.bracketCount > 0 || this.setBraceCount > 0 || this.parenCount > 0 || this.braceCount == 1 && !this.checkFlowStartBrace (true)) {
					    this.error (this.nTokens == 1 ? 2 : 4);
					    return 4;
					}if (this.needRightParen) {
					    this.addTokenToPrefix (org.jmol.script.Token.tokenRightParen);
					    this.needRightParen = false;
					}if (this.ltoken.size () > 0) {
					    if (doCompile && !this.compileCommand ()) return 4;
					    if (this.logMessages) {
						org.jmol.util.Logger.debug ("-------------------------------------");
					    }var doEval = true;
					    switch (this.tokCommand) {
					    case 364558:
					    case 102436:
					    case 135368713:
					    case 1150985:
						doEval = (this.atokenInfix.length > 0 && this.atokenInfix[0].intValue != 2147483647);
						break;
					    }
					    if (doEval) {
						if (this.iCommand == this.lnLength) {
						    this.lineNumbers = org.jmol.util.ArrayUtil.doubleLengthShort (this.lineNumbers);
						    var lnI =  Clazz.newIntArray (this.lnLength * 2, 2, 0);
						    System.arraycopy (this.lineIndices, 0, lnI, 0, this.lnLength);
						    this.lineIndices = lnI;
						    this.lnLength *= 2;
						}this.lineNumbers[this.iCommand] = iLine;
						this.lineIndices[this.iCommand][0] = this.ichCurrentCommand;
						this.lineIndices[this.iCommand][1] = Math.max (this.ichCurrentCommand, Math.min (this.cchScript, this.ichEnd == this.ichCurrentCommand ? this.ichToken : this.ichEnd));
						this.lltoken.add (this.atokenInfix);
						this.iCommand = this.lltoken.size ();
					    }if (this.tokCommand == 1085443) this.lastFlowCommand = null;
					}this.setCommand (null);
				    this.comment = null;
				    this.iHaveQuotedString = this.isNewSet = this.isSetBrace = this.needRightParen = false;
				    this.ptNewSetModifier = 1;
				    this.ltoken.clear ();
				    this.nTokens = this.nSemiSkip = 0;
				    this.tokInitialPlusPlus = 0;
				    this.tokenAndEquals = null;
				    this.ptSemi = -10;
				    this.forPoint3 = -1;
				    this.setEqualPt = 2147483647;
				}if (this.endOfLine) {
				    if (this.flowContext != null && this.flowContext.checkForceEndIf ()) {
					if (!this.isComment) this.forceFlowEnd (this.flowContext.token);
					this.isEndOfCommand = true;
					this.cchToken = 0;
					this.ichCurrentCommand = this.ichToken;
					this.lineCurrent--;
					return 2;
				    }this.isComment = false;
				    this.isShowCommand = false;
				    ++this.lineCurrent;
				}if (this.ichToken >= this.cchScript) {
				    this.setCommand (org.jmol.script.Token.tokenAll);
				    this.theTok = 0;
				    switch (this.checkFlowEndBrace ()) {
				    case 4:
					return 4;
				    case 2:
					this.isEndOfCommand = true;
					this.cchToken = 0;
					return 2;
				    }
				    this.ichToken = this.cchScript;
				    return 0;
				}return 0;
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "compileCommand", 
			    ($fz = function () {
				switch (this.ltoken.size ()) {
				case 0:
				    this.atokenInfix =  new Array (0);
				    return true;
				case 4:
				    if (this.isNewSet && this.tokenAt (2).value.equals (".") && this.tokenAt (3).value.equals ("spt")) {
					var fname = this.tokenAt (1).value + "." + this.tokenAt (3).value;
					this.ltoken.clear ();
					this.addTokenToPrefix (org.jmol.script.Token.tokenScript);
					this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, fname));
					this.isNewSet = false;
				    }}
				this.setCommand (this.tokenAt (0));
				var size = this.ltoken.size ();
				if (size == 1 && org.jmol.script.Token.tokAttr (this.tokCommand, 524288)) this.addTokenToPrefix (org.jmol.script.Token.tokenOn);
				if (this.tokenAndEquals != null) {
				    var j;
				    var i = 0;
				    for (i = 1; i < size; i++) {
					if ((j = this.tokAt (i)) == 269484242) break;
				    }
				    size = i;
				    i++;
				    if (this.ltoken.size () < i) {
					org.jmol.util.Logger.error ("COMPILER ERROR! - andEquals ");
				    } else {
					for (j = 1; j < size; j++, i++) this.ltoken.add (i, this.tokenAt (j));

					this.ltoken.set (size, org.jmol.script.Token.tokenEquals);
					this.ltoken.add (i, this.tokenAndEquals);
					this.ltoken.add (++i, org.jmol.script.Token.tokenLeftParen);
					this.addTokenToPrefix (org.jmol.script.Token.tokenRightParen);
				    }}this.atokenInfix = this.ltoken.toArray ( new Array (size = this.ltoken.size ()));
				if (this.logMessages) {
				    org.jmol.util.Logger.debug ("token list:");
				    for (var i = 0; i < this.atokenInfix.length; i++) org.jmol.util.Logger.debug (i + ": " + this.atokenInfix[i]);

				    org.jmol.util.Logger.debug ("vBraces list:");
				    for (var i = 0; i < this.vBraces.size (); i++) org.jmol.util.Logger.debug (i + ": " + this.vBraces.get (i));

				    org.jmol.util.Logger.debug ("-------------------------------------");
				}return this.compileExpressions ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "tokenAt", 
			    ($fz = function (i) {
				return this.ltoken.get (i);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "tokAt", 
			      function (i) {
				  return (i < this.ltoken.size () ? this.tokenAt (i).tok : 0);
			      }, "~N");
	Clazz.defineMethod (c$, "setCommand", 
			    ($fz = function (token) {
				this.tokenCommand = token;
				if (token == null) {
				    this.tokCommand = 0;
				} else {
				    this.tokCommand = this.tokenCommand.tok;
				    this.isMathExpressionCommand = (this.tokCommand == 1073741824 || org.jmol.script.Token.tokAttr (this.tokCommand, 36864));
				    this.isSetOrDefine = (this.tokCommand == 1085443 || this.tokCommand == 1060866);
				    this.isCommaAsOrAllowed = org.jmol.script.Token.tokAttr (this.tokCommand, 12288);
				}return token;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "replaceCommand", 
			    ($fz = function (token) {
				this.ltoken.remove (0);
				this.ltoken.add (0, this.setCommand (token));
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "getPrefixToken", 
			    ($fz = function () {
				var ident = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
				var identLC = ident.toLowerCase ();
				var isUserVar = this.isContextVariable (identLC);
				if (this.nTokens == 0) this.isUserToken = isUserVar;
				if (this.nTokens == 1 && (this.tokCommand == 135368713 || this.tokCommand == 102436 || this.tokCommand == 36868) || this.nTokens != 0 && isUserVar || this.isUserFunction (identLC) && (this.thisFunction == null || !this.thisFunction.name.equals (identLC))) {
				    ident = identLC;
				    this.theToken = null;
				} else if (ident.length == 1) {
				    if ((this.theToken = org.jmol.script.Token.getTokenFromName (ident)) == null && (this.theToken = org.jmol.script.Token.getTokenFromName (identLC)) != null) this.theToken = org.jmol.script.Token.newTokenIntVal (this.theToken.tok, this.theToken.intValue, ident);
				} else {
				    ident = identLC;
				    this.theToken = org.jmol.script.Token.getTokenFromName (ident);
				}if (this.theToken == null) {
				    if (ident.indexOf ("property_") == 0) this.theToken = org.jmol.script.Token.newTokenObj (1716520973, ident);
				    else this.theToken = org.jmol.script.Token.newTokenObj (1073741824, ident);
				}this.theTok = this.theToken.tok;
				return ident;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkSpecialParameterSyntax", 
			    ($fz = function () {
				var ch;
				if (this.nTokens == this.ptNewSetModifier) {
				    ch = this.script.charAt (this.ichToken);
				    var isAndEquals = ("+-\\*/&|=".indexOf (ch) >= 0);
				    var isOperation = (isAndEquals || ch == '.' || ch == '[');
				    var ch2 = (this.ichToken + 1 >= this.cchScript ? 0 : this.script.charAt (this.ichToken + 1));
				    if (!this.isNewSet && this.isUserToken && isOperation && (ch == '=' || ch2 == ch || ch2 == '=')) {
					this.isNewSet = true;
				    }if (this.isNewSet || this.tokCommand == 1085443 || org.jmol.script.Token.tokAttr (this.tokCommand, 536870912)) {
					if (ch == '=') this.setEqualPt = this.ichToken;
					if (org.jmol.script.Token.tokAttr (this.tokCommand, 536870912) && ch == '=' || (this.isNewSet || this.isSetBrace) && isOperation) {
					    this.setCommand (isAndEquals ? org.jmol.script.Token.tokenSet : ch == '[' && !this.isSetBrace ? org.jmol.script.Token.tokenSetArray : org.jmol.script.Token.tokenSetProperty);
					    this.ltoken.add (0, this.tokenCommand);
					    this.cchToken = 1;
					    switch (ch) {
					    case '[':
						this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (269484096, "["));
						this.bracketCount++;
						return 2;
					    case '.':
						this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (1048584, "."));
						return 2;
					    case '-':
					    case '+':
					    case '*':
					    case '/':
					    case '\\':
					    case '&':
					    case '|':
						if (ch2.charCodeAt (0) == 0) return this.ERROR (4);
						if (ch2 != ch && ch2 != '=') return this.ERROR (1, "\"" + ch + "\"");
						break;
					    default:
						this.lastToken = org.jmol.script.Token.tokenMinus;
						return 2;
					    }
					}}}if (this.lookingAtString (!org.jmol.script.Token.tokAttr (this.tokCommand, 20480))) {
					    if (this.cchToken < 0) return this.ERROR (4);
					    var str;
					    if ((this.tokCommand == 1085443 && this.nTokens == 2 && this.lastToken.tok == 545259546 || this.tokCommand == 135271426 || this.tokCommand == 1610616835 || this.tokCommand == 135271429) && !this.iHaveQuotedString) {
						if (this.lastToken.tok == 1073741983) {
						    str = this.getUnescapedStringLiteral ();
						} else {
						    str = this.script.substring (this.ichToken + 1, this.ichToken + this.cchToken - 1);
						    if (str.indexOf ("\\u") >= 0) str = org.jmol.util.Escape.unescapeUnicode (str);
						}} else {
						    str = this.getUnescapedStringLiteral ();
						}this.iHaveQuotedString = true;
					    if (this.tokCommand == 135271426 && this.lastToken.tok == 135270407 || this.tokCommand == 135270407 && str.indexOf ("@") < 0) {
						if (!this.getData (str)) return this.ERROR (11, "data");
					    } else {
						this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, str));
						if (org.jmol.script.Token.tokAttr (this.tokCommand, 20480)) this.isEndOfCommand = true;
					    }return 2;
					}if (this.tokCommand == 4156 && this.nTokens == 1 && this.charToken ()) {
					    var ident = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
					    var iident = org.jmol.util.Parser.parseInt (ident);
					    if (iident == -2147483648 || Math.abs (iident) < 1000) this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (1073741824, ident));
					    else this.addTokenToPrefix (org.jmol.script.Token.intToken (iident));
					    return 2;
					}switch (this.tokCommand) {
					case 135271426:
					case 135271429:
					case 135270410:
					    if (this.script.charAt (this.ichToken) == '@') {
						this.iHaveQuotedString = true;
						return 0;
					    }if (this.tokCommand == 135271426) {
						if ((this.nTokens == 1 || this.nTokens == 2 && this.tokAt (1) == 1073741839) && this.lookingAtLoadFormat ()) {
						    var strFormat = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
						    var token = org.jmol.script.Token.getTokenFromName (strFormat.toLowerCase ());
						    switch (token == null ? 0 : token.tok) {
						    case 1073742015:
						    case 1073741839:
							if (this.nTokens != 1) return 4;
						    case 135270407:
						    case 1229984263:
						    case 1073741983:
						    case 1095766028:
						    case 135267336:
						    case 536870926:
							this.addTokenToPrefix (token);
							break;
						    default:
							var tok = (strFormat.indexOf ("=") == 0 || strFormat.indexOf ("$") == 0 ? 4 : org.jmol.util.Parser.isOneOf (strFormat = strFormat.toLowerCase (), "xyz;vxyz;vibration;temperature;occupancy;partialcharge") ? 1073741824 : 0);
							if (tok != 0) {
							    this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (tok, strFormat));
							    this.iHaveQuotedString = (tok == 4);
							}}
						    return 2;
						}var bs;
						if (this.script.charAt (this.ichToken) == '{' || this.parenCount > 0) break;
						if ((bs = this.lookingAtBitset ()) != null) {
						    this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (10, bs));
						    return 2;
						}}if (!this.iHaveQuotedString && this.lookingAtImpliedString (false, this.tokCommand == 135271426, this.nTokens > 1 || this.tokCommand != 135271429)) {
						    var str = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
						    if (this.tokCommand == 135271429 && str.startsWith ("javascript:")) {
							this.lookingAtImpliedString (true, true, true);
							str = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
						    }this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, str));
						    this.iHaveQuotedString = true;
						    return 2;
						}break;
					case 135270421:
					    if (this.nTokens == 2 && this.lastToken.tok == 4115) this.iHaveQuotedString = true;
					    if (!this.iHaveQuotedString) {
						if (this.script.charAt (this.ichToken) == '@') {
						    this.iHaveQuotedString = true;
						    return 0;
						}if (this.lookingAtImpliedString (true, true, true)) {
						    var pt = this.cchToken;
						    var str = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
						    if (str.indexOf (" ") < 0) {
							this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, str));
							this.iHaveQuotedString = true;
							return 2;
						    }this.cchToken = pt;
						}}break;
					}
				if (org.jmol.script.Token.tokAttr (this.tokCommand, 20480) && !(this.tokCommand == 135271429 && this.iHaveQuotedString) && this.lookingAtImpliedString (true, true, true)) {
				    var str = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
				    if (this.tokCommand == 1826248715 && org.jmol.util.Parser.isOneOf (str.toLowerCase (), "on;off;hide;display")) this.addTokenToPrefix (org.jmol.script.Token.getTokenFromName (str.toLowerCase ()));
				    else this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, str));
				    return 2;
				}var value;
				if (!Float.isNaN (value = this.lookingAtExponential ())) {
				    this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (3,  new Float (value)));
				    return 2;
				}if (this.lookingAtObjectID (this.nTokens == 1)) {
				    this.addTokenToPrefix (org.jmol.script.Token.getTokenFromName ("$"));
				    this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (1073741824, this.script.substring (this.ichToken, this.ichToken + this.cchToken)));
				    return 2;
				}if (this.lookingAtDecimal ()) {
				    value = Float.$valueOf (this.script.substring (this.ichToken, this.ichToken + this.cchToken)).floatValue ();
				    var intValue = (org.jmol.script.ScriptEvaluator.getFloatEncodedInt (this.script.substring (this.ichToken, this.ichToken + this.cchToken)));
				    this.addTokenToPrefix (org.jmol.script.Token.newTokenIntVal (3, intValue,  new Float (value)));
				    return 2;
				}if (this.lookingAtSeqcode ()) {
				    ch = this.script.charAt (this.ichToken);
				    try {
					var seqNum = (ch == '*' || ch == '^' ? 2147483647 : Integer.parseInt (this.script.substring (this.ichToken, this.ichToken + this.cchToken - 2)));
					var insertionCode = this.script.charAt (this.ichToken + this.cchToken - 1);
					if (insertionCode == '^') insertionCode = ' ';
					if (seqNum < 0) {
					    seqNum = -seqNum;
					    this.addTokenToPrefix (org.jmol.script.Token.tokenMinus);
					}var seqcode = org.jmol.modelset.Group.getSeqcode (seqNum, insertionCode);
					this.addTokenToPrefix (org.jmol.script.Token.newTokenIntVal (5, seqcode, "seqcode"));
					return 2;
				    } catch (nfe) {
					if (Clazz.exceptionOf (nfe, NumberFormatException)) {
					    return this.ERROR (9, "" + ch);
					} else {
					    throw nfe;
					}
				    }
				}var val = this.lookingAtInteger ();
				if (val != 2147483647) {
				    var intString = this.script.substring (this.ichToken, this.ichToken + this.cchToken);
				    if (this.tokCommand == 102407 || this.tokCommand == 102408) {
					if (this.nTokens != 1) return this.ERROR (0);
					var f = (this.flowContext == null ? null : this.flowContext.getBreakableContext (val = Math.abs (val)));
					if (f == null) return this.ERROR (1, this.tokenCommand.value);
					this.tokenAt (0).intValue = f.pt0;
				    }if (val == 0 && intString.equals ("-0")) this.addTokenToPrefix (org.jmol.script.Token.tokenMinus);
				    this.addTokenToPrefix (org.jmol.script.Token.newTokenIntVal (2, val, intString));
				    return 2;
				}if (!this.isMathExpressionCommand && this.parenCount == 0 || this.lastToken.tok != 1073741824 && !org.jmol.script.ScriptCompilationTokenParser.tokenAttr (this.lastToken, 135266304)) {
				    var isBondOrMatrix = (this.script.charAt (this.ichToken) == '[');
				    var bs = this.lookingAtBitset ();
				    if (bs == null) {
					if (isBondOrMatrix) {
					    var m = this.lookingAtMatrix ();
					    if (Clazz.instanceOf (m, org.jmol.util.Matrix3f) || Clazz.instanceOf (m, org.jmol.util.Matrix4f)) {
						this.addTokenToPrefix (org.jmol.script.Token.newTokenObj ((Clazz.instanceOf (m, org.jmol.util.Matrix3f) ? 11 : 12), m));
						return 2;
					    }}} else {
						if (isBondOrMatrix) this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (10,  new org.jmol.modelset.Bond.BondSet (bs)));
						else this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (10, bs));
						return 2;
					    }}return 0;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtMatrix", 
			    ($fz = function () {
				var ipt;
				var m;
				if (this.ichToken + 4 >= this.cchScript || this.script.charAt (this.ichToken) != '[' || this.script.charAt (this.ichToken + 1) != '[' || (ipt = this.script.indexOf ("]]", this.ichToken)) < 0 || (m = org.jmol.util.Escape.unescapeMatrix (this.script.substring (this.ichToken, ipt + 2))) == null) return null;
				this.cchToken = ipt + 2 - this.ichToken;
				return m;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "parseKnownToken", 
			    ($fz = function (ident) {
				var token;
				if (this.tokLastMath != 0) this.tokLastMath = this.theTok;
				if (this.flowContext != null && this.flowContext.token.tok == 102410 && this.flowContext.$var != null && this.theTok != 102411 && this.theTok != 102413 && this.lastToken.tok != 102410) return this.ERROR (1, ident);
				switch (this.theTok) {
				case 1073741824:
				    if (this.nTokens == 0 && !this.checkImpliedScriptCmd) {
					if (ident.charAt (0) == '\'') {
					    this.addTokenToPrefix (this.setCommand (org.jmol.script.Token.tokenScript));
					    this.cchToken = 0;
					    return 2;
					}if (this.ichToken + this.cchToken < this.cchScript && this.script.charAt (this.ichToken + this.cchToken) == '.') {
					    this.addTokenToPrefix (this.setCommand (org.jmol.script.Token.tokenScript));
					    this.nTokens = 1;
					    this.cchToken = 0;
					    this.checkImpliedScriptCmd = true;
					    return 2;
					}}break;
				case 269484242:
				    if (this.nSemiSkip == this.forPoint3 && this.nTokens == this.ptSemi + 2) {
					token = this.lastToken;
					this.addTokenToPrefix (org.jmol.script.Token.tokenEquals);
					this.addTokenToPrefix (token);
					token = org.jmol.script.Token.getTokenFromName (ident.substring (0, 1));
					this.addTokenToPrefix (token);
					this.addTokenToPrefix (org.jmol.script.Token.tokenLeftParen);
					this.needRightParen = true;
					return 2;
				    }this.checkNewSetCommand ();
				    if (this.tokCommand == 1085443) {
					this.tokenAndEquals = org.jmol.script.Token.getTokenFromName (ident.substring (0, 1));
					this.setEqualPt = this.ichToken;
					return 0;
				    }if (this.tokCommand == 554176565 || this.tokCommand == 554176526) {
					this.addTokenToPrefix (this.tokenCommand);
					this.replaceCommand (org.jmol.script.Token.tokenSet);
					this.tokenAndEquals = org.jmol.script.Token.getTokenFromName (ident.substring (0, 1));
					this.setEqualPt = this.ichToken;
					return 0;
				    }return 2;
				case 1150985:
				case 364548:
				    if (this.flowContext != null) this.flowContext.forceEndIf = false;
				case 364547:
				    if (this.nTokens > 0) {
					this.isEndOfCommand = true;
					this.cchToken = 0;
					return 2;
				    }break;
				case 135369224:
				    if (this.bracketCount > 0) break;
				case 102411:
				case 102413:
				case 102402:
				case 135369225:
				case 102410:
				case 102406:
				case 102412:
				    if (this.nTokens > 1 && this.tokCommand != 1085443) {
					this.isEndOfCommand = true;
					if (this.flowContext != null) this.flowContext.forceEndIf = true;
					this.cchToken = 0;
					return 2;
				    }break;
				case 269484225:
				case 269484226:
				    if (!this.isNewSet && this.nTokens == 1) this.checkNewSetCommand ();
				    if (this.isNewSet && this.parenCount == 0 && this.bracketCount == 0 && this.ichToken <= this.setEqualPt) {
					this.tokenizePlusPlus (this.theTok, false);
					return 2;
				    } else if (this.nSemiSkip == this.forPoint3 && this.nTokens == this.ptSemi + 2) {
					token = this.lastToken;
					this.addTokenToPrefix (org.jmol.script.Token.tokenEquals);
					this.addTokenToPrefix (token);
					this.addTokenToPrefix (this.theTok == 269484225 ? org.jmol.script.Token.tokenMinus : org.jmol.script.Token.tokenPlus);
					this.addTokenToPrefix (org.jmol.script.Token.intToken (1));
					return 2;
				    }break;
				case 269484436:
				    if (this.parenCount == 0 && this.bracketCount == 0) this.setEqualPt = this.ichToken;
				    break;
				case 1048584:
				    if (this.tokCommand == 1085443 && this.parenCount == 0 && this.bracketCount == 0 && this.ichToken < this.setEqualPt) {
					this.ltoken.add (1, org.jmol.script.Token.tokenExpressionBegin);
					this.addTokenToPrefix (org.jmol.script.Token.tokenExpressionEnd);
					this.ltoken.set (0, org.jmol.script.Token.tokenSetProperty);
					this.setEqualPt = 0;
				    }break;
				case 1048586:
				    this.braceCount++;
				    if (this.braceCount == 1 && this.parenCount == 0 && this.checkFlowStartBrace (false)) {
					this.isEndOfCommand = true;
					if (this.flowContext != null) this.flowContext.forceEndIf = false;
					return 2;
				    }case 269484048:
				    this.parenCount++;
				    if (this.nTokens > 1 && (this.lastToken.tok == 135280132 || this.lastToken.tok == 135369224 || this.lastToken.tok == 135369225)) this.nSemiSkip += 2;
				    break;
				case 1048590:
				    if (this.iBrace > 0 && this.parenCount == 0 && this.braceCount == 0) {
					this.ichBrace = this.ichToken;
					if (this.nTokens == 0) {
					    this.braceCount = this.parenCount = 1;
					} else {
					    this.braceCount = this.parenCount = this.nSemiSkip = 0;
					    if (this.theToken.tok != 102411 && this.theToken.tok != 102413) this.vBraces.add (this.theToken);
					    this.iBrace++;
					    this.isEndOfCommand = true;
					    this.ichEnd = this.ichToken;
					    return 2;
					}}this.braceCount--;
				case 269484049:
				    this.parenCount--;
				    if (this.parenCount < 0) return this.ERROR (16, ident);
				    if (this.parenCount == 0) this.nSemiSkip = 0;
				    if (this.needRightParen) {
					this.addTokenToPrefix (org.jmol.script.Token.tokenRightParen);
					this.needRightParen = false;
				    }break;
				case 269484096:
				    if (this.ichToken > 0 && Character.isWhitespace (this.script.charAt (this.ichToken - 1))) this.addTokenToPrefix (org.jmol.script.Token.tokenSpaceBeforeSquare);
				    this.bracketCount++;
				    break;
				case 269484097:
				    this.bracketCount--;
				    if (this.bracketCount < 0) return this.ERROR (16, "]");
				}
				return 0;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "tokenizePlusPlus", 
			    ($fz = function (tok, isPlusPlusX) {
				if (isPlusPlusX) {
				    this.setCommand (org.jmol.script.Token.tokenSet);
				    this.ltoken.add (0, this.tokenCommand);
				}this.nTokens = this.ltoken.size ();
				this.addTokenToPrefix (org.jmol.script.Token.tokenEquals);
				this.setEqualPt = 0;
				for (var i = 1; i < this.nTokens; i++) this.addTokenToPrefix (this.ltoken.get (i));

				this.addTokenToPrefix (tok == 269484225 ? org.jmol.script.Token.tokenMinus : org.jmol.script.Token.tokenPlus);
				this.addTokenToPrefix (org.jmol.script.Token.intToken (1));
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "checkNewSetCommand", 
			    ($fz = function () {
				var name = this.ltoken.get (0).value.toString ();
				if (!this.isContextVariable (name.toLowerCase ())) return false;
				var t = this.setNewSetCommand (false, name);
				this.setCommand (org.jmol.script.Token.tokenSet);
				this.ltoken.add (0, this.tokenCommand);
				this.ltoken.set (1, t);
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "parseCommandParameter", 
			    ($fz = function (ident) {
				this.nTokens = this.ltoken.size ();
				switch (this.tokCommand) {
				case 0:
				    this.lastToken = org.jmol.script.Token.tokenOff;
				    this.ichCurrentCommand = this.ichEnd = this.ichToken;
				    this.setCommand (this.theToken);
				    if (org.jmol.script.Token.tokAttr (this.tokCommand, 102400)) {
					this.lastFlowCommand = this.tokenCommand;
				    }var ret = this.checkFlowEndBrace ();
				    if (ret == 4) return 4;
				    else if (ret == 2) {
					this.isEndOfCommand = true;
					this.cchToken = 0;
					return 2;
				    }if (org.jmol.script.Token.tokAttr (this.tokCommand, 102400)) {
					if (!this.checkFlowCommand (this.tokenCommand.value)) return 4;
					this.theToken = this.tokenCommand;
					if (this.theTok == 102411) {
					    this.addTokenToPrefix (this.tokenCommand);
					    this.theToken = org.jmol.script.Token.tokenLeftParen;
					}break;
				    }if (this.theTok == 269484066) {
					this.braceCount++;
					this.isEndOfCommand = true;
					break;
				    }if (this.theTok == 1048590) {
					this.vBraces.add (this.tokenCommand);
					this.iBrace++;
					this.tokCommand = 0;
					return 2;
				    }if (this.theTok != 1048586) this.lastFlowCommand = null;
				    if (org.jmol.script.Token.tokAttr (this.tokCommand, 4096)) break;
				    this.isSetBrace = (this.theTok == 1048586);
				    if (this.isSetBrace) {
					if (!this.lookingAtBraceSyntax ()) {
					    this.isEndOfCommand = true;
					    if (this.flowContext != null) this.flowContext.forceEndIf = false;
					}} else {
					    switch (this.theTok) {
					    case 269484226:
					    case 269484225:
						this.tokInitialPlusPlus = this.theTok;
						this.tokCommand = 0;
						return 2;
					    case 1073741824:
					    case 36868:
					    case 1060866:
					    case 269484048:
						break;
					    default:
						if (!org.jmol.script.Token.tokAttr (this.theTok, 1073741824) && !org.jmol.script.Token.tokAttr (this.theTok, 536870912) && !this.isContextVariable (ident)) {
						    this.commandExpected ();
						    return 4;
						}}
					}this.theToken = this.setNewSetCommand (this.isSetBrace, ident);
				    break;
				case 102412:
				    switch (this.nTokens) {
				    case 1:
					if (this.theTok != 269484048) return this.ERROR (15, "(");
					break;
				    case 2:
					if (this.theTok != 269484049) (this.tokenCommand).name0 = ident;
					this.addContextVariable (ident);
					break;
				    case 3:
					if (this.theTok != 269484049) return this.ERROR (15, ")");
					this.isEndOfCommand = true;
					this.ichEnd = this.ichToken + 1;
					this.flowContext.setLine ();
					break;
				    default:
					return this.ERROR (0);
				    }
				    break;
				case 102436:
				case 135368713:
				    if (this.tokenCommand.intValue == 0) {
					if (this.nTokens != 1) break;
					this.tokenCommand.value = ident;
					return 2;
				    }if (this.nTokens == 1) {
					if (this.thisFunction != null) this.vFunctionStack.add (0, this.thisFunction);
					this.thisFunction = (this.tokCommand == 102436 ?  new org.jmol.thread.ScriptParallelProcessor (ident, this.tokCommand) :  new org.jmol.script.ScriptFunction (ident, this.tokCommand));
					this.htUserFunctions.put (ident, Boolean.TRUE);
					this.flowContext.setFunction (this.thisFunction);
					break;
				    }if (this.nTokens == 2) {
					if (this.theTok != 269484048) return this.ERROR (15, "(");
					break;
				    }if (this.nTokens == 3 && this.theTok == 269484049) break;
				    if (this.nTokens % 2 == 0) {
					if (this.theTok != 269484080 && this.theTok != 269484049) return this.ERROR (15, ")");
					break;
				    }this.thisFunction.addVariable (ident, true);
				    break;
				case 102411:
				    if (this.nTokens > 1 && this.parenCount == 0 && this.braceCount == 0 && this.theTok == 269484066) {
					this.addTokenToPrefix (org.jmol.script.Token.tokenRightParen);
					this.braceCount = 1;
					this.isEndOfCommand = true;
					this.cchToken = 0;
					return 2;
				    }break;
				case 102413:
				    if (this.nTokens > 1) {
					this.braceCount = 1;
					this.isEndOfCommand = true;
					this.cchToken = 0;
					return 2;
				    }break;
				case 364547:
				    if (this.nTokens == 1 && this.theTok != 135369225) {
					this.isEndOfCommand = true;
					this.cchToken = 0;
					return 2;
				    }if (this.nTokens != 1 || this.theTok != 135369225 && this.theTok != 1048586) return this.ERROR (0);
				    this.replaceCommand (this.flowContext.token =  new org.jmol.script.ContextToken (102402, "elseif"));
				    this.tokCommand = 102402;
				    return 2;
				case 36868:
				    if (this.nTokens != 1) break;
				    this.addContextVariable (ident);
				    this.replaceCommand (org.jmol.script.Token.tokenSetVar);
				    this.tokCommand = 1085443;
				    break;
				case 1150985:
				    if (this.nTokens != 1) return this.ERROR (0);
				    if (!this.checkFlowEnd (this.theTok, ident, this.ichCurrentCommand)) return 4;
				    if (this.theTok == 135368713 || this.theTok == 102436) {
					return 2;
				    }break;
				case 102410:
				case 102406:
				    if (this.nTokens > 2 && this.braceCount == 0 && this.parenCount == 0) {
					this.isEndOfCommand = true;
					this.ichEnd = this.ichToken + 1;
					this.flowContext.setLine ();
				    }break;
				case 102402:
				case 135369225:
				    if (this.nTokens > 2 && this.braceCount == 0 && this.parenCount == 0) {
					this.isEndOfCommand = true;
					this.ichEnd = this.ichToken + 1;
					this.flowContext.setLine ();
				    }break;
				case 102439:
				    this.isEndOfCommand = true;
				    this.ichEnd = this.ichToken + 1;
				    this.flowContext.setLine ();
				    break;
				case 135369224:
				    if (this.nTokens == 1) {
					if (this.theTok != 269484048) return this.ERROR (19, ident);
					this.forPoint3 = this.nSemiSkip = 0;
					this.nSemiSkip += 2;
				    } else if (this.nTokens == 3 && this.tokAt (2) == 36868) {
					this.addContextVariable (ident);
				    } else if ((this.nTokens == 3 || this.nTokens == 4) && this.theTok == 1073741980) {
					this.nSemiSkip -= 2;
					this.forPoint3 = 2;
					this.addTokenToPrefix (this.theToken);
					this.theToken = org.jmol.script.Token.tokenLeftParen;
				    } else if (this.braceCount == 0 && this.parenCount == 0) {
					this.isEndOfCommand = true;
					this.ichEnd = this.ichToken + 1;
					this.flowContext.setLine ();
				    }break;
				case 1085443:
				    if (this.theTok == 1048586) this.setBraceCount++;
				    else if (this.theTok == 1048590) {
					this.setBraceCount--;
					if (this.isSetBrace && this.setBraceCount == 0 && this.ptNewSetModifier == 2147483647) this.ptNewSetModifier = this.nTokens + 1;
				    }if (this.nTokens == this.ptNewSetModifier) {
					var token = this.tokenAt (0);
					if (this.theTok == 269484048 || this.isUserFunction (token.value.toString ())) {
					    this.ltoken.set (0, this.setCommand (org.jmol.script.Token.newTokenIntVal (1073741824, 0, token.value)));
					    this.setBraceCount = 0;
					    break;
					}if (this.theTok != 1073741824 && this.theTok != 269484242 && this.theTok != 1060866 && (!org.jmol.script.Token.tokAttr (this.theTok, 536870912))) {
					    if (this.isNewSet) this.commandExpected ();
					    else this.errorIntStr2 (18, "SET", ": " + ident);
					    return 4;
					}if (this.nTokens == 1 && (this.lastToken.tok == 269484226 || this.lastToken.tok == 269484225)) {
					    this.replaceCommand (org.jmol.script.Token.tokenSet);
					    this.addTokenToPrefix (this.lastToken);
					    break;
					}}break;
				case 135271426:
				    if (this.theTok == 1060866 && (this.nTokens == 1 || this.lastToken.tok == 1073741940 || this.lastToken.tok == 1073742152)) {
					this.addTokenToPrefix (org.jmol.script.Token.tokenDefineString);
					return 2;
				    }if (this.theTok == 1073741848) this.iHaveQuotedString = false;
				    break;
				case 1610625028:
				case 12294:
				case 12295:
				case 135280132:
				case 12291:
				case 1060866:
				    if (this.tokCommand == 1060866) {
					if (this.nTokens == 1) {
					    if (this.theTok != 1073741824) {
						if (this.preDefining) {
						    if (!org.jmol.script.Token.tokAttr (this.theTok, 3145728)) {
							this.errorStr2 ("ERROR IN Token.java or JmolConstants.java -- the following term was used in JmolConstants.java but not listed as predefinedset in Token.java: " + ident, null);
							return 4;
						    }} else if (org.jmol.script.Token.tokAttr (this.theTok, 3145728)) {
							org.jmol.util.Logger.warn ("WARNING: predefined term '" + ident + "' has been redefined by the user until the next file load.");
						    } else if (!this.isCheckOnly && ident.length > 1) {
							org.jmol.util.Logger.warn ("WARNING: redefining " + ident + "; was " + this.theToken + "not all commands may continue to be functional for the life of the applet!");
							this.theTok = this.theToken.tok = 1073741824;
							org.jmol.script.Token.addToken (ident, this.theToken);
						    }}this.addTokenToPrefix (this.theToken);
					    this.lastToken = org.jmol.script.Token.tokenComma;
					    return 2;
					}if (this.nTokens == 2) {
					    if (this.theTok == 269484436) {
						this.ltoken.add (0, org.jmol.script.Token.tokenSet);
						return 2;
					    }}}if (this.bracketCount == 0 && this.theTok != 1073741824 && !org.jmol.script.Token.tokAttr (this.theTok, 1048576) && !org.jmol.script.Token.tokAttr (this.theTok, 1073741824) && (this.theTok & 480) != this.theTok) return this.ERROR (9, ident);
				    break;
				case 12289:
				    if (this.theTok != 1073741824 && this.theTok != 1048583 && !org.jmol.script.Token.tokAttr (this.theTok, 1048576)) return this.ERROR (9, ident);
				    break;
				case 135190:
				case 135188:
				case 135180:
				    var ch = this.nextChar ();
				    if (this.parenCount == 0 && this.bracketCount == 0 && ".:/\\+-!?".indexOf (ch) >= 0 && !(ch == '-' && ident.equals ("="))) this.checkUnquotedFileName ();
				}
				return 0;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setNewSetCommand", 
			    ($fz = function (isSetBrace, ident) {
				this.tokCommand = 1085443;
				this.isNewSet = (!isSetBrace && !this.isUserFunction (ident));
				this.setBraceCount = (isSetBrace ? 1 : 0);
				this.bracketCount = 0;
				this.setEqualPt = 2147483647;
				this.ptNewSetModifier = (this.isNewSet ? (ident.equals ("(") ? 2 : 1) : 2147483647);
				return ((isSetBrace || this.theToken.tok == 269484226 || this.theToken.tok == 269484225) ? this.theToken : org.jmol.script.Token.newTokenObj (1073741824, ident));
			    }, $fz.isPrivate = true, $fz), "~B,~S");
	Clazz.defineMethod (c$, "nextChar", 
			    ($fz = function () {
				var ich = this.ichToken + this.cchToken;
				return (ich >= this.cchScript ? ' ' : this.script.charAt (ich));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkUnquotedFileName", 
			    ($fz = function () {
				var ichT = this.ichToken;
				var ch;
				while (++ichT < this.cchScript && !Character.isWhitespace (ch = this.script.charAt (ichT)) && ch != '#' && ch != ';' && ch != '}') {
				}
				var name = this.script.substring (this.ichToken, ichT).$replace ('\\', '/');
				this.cchToken = ichT - this.ichToken;
				this.theToken = org.jmol.script.Token.newTokenObj (4, name);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkFlowStartBrace", 
			    ($fz = function (atEnd) {
				if ((!org.jmol.script.Token.tokAttr (this.tokCommand, 102400) || this.tokCommand == 102407 || this.tokCommand == 102408)) return false;
				if (atEnd) {
				    if (this.tokenCommand.tok != 102411 && this.tokenCommand.tok != 102413) {
					this.iBrace++;
					this.vBraces.add (this.tokenCommand);
					this.lastFlowCommand = null;
				    }this.parenCount = this.braceCount = 0;
				}return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "checkFlowEndBrace", 
			    ($fz = function () {
				if (this.iBrace <= 0 || this.vBraces.get (this.iBrace - 1).tok != 1048590) return 0;
				this.vBraces.remove (--this.iBrace);
				var token = this.vBraces.remove (--this.iBrace);
				if (this.theTok == 1048586) {
				    this.braceCount--;
				    this.parenCount--;
				}if (token.tok == 266280) {
				    this.vPush.remove (--this.pushCount);
				    this.addTokenToPrefix (this.setCommand ( new org.jmol.script.ContextToken (266278, 0, "}")));
				    this.isEndOfCommand = true;
				    return 2;
				}switch (this.flowContext == null ? 0 : this.flowContext.token.tok) {
				case 135369225:
				case 102402:
				case 364547:
				    if (this.tokCommand == 364547 || this.tokCommand == 102402) return 0;
				    break;
				case 102410:
				case 102411:
				case 102413:
				    if (this.tokCommand == 102411 || this.tokCommand == 102413) return 0;
				}
				return this.forceFlowEnd (token);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "forceFlowEnd", 
			    ($fz = function (token) {
				var t0 = this.tokenCommand;
				this.setCommand (org.jmol.script.Token.newTokenObj (1150985, "end"));
				if (!this.checkFlowCommand ("end")) return 0;
				this.addTokenToPrefix (this.tokenCommand);
				switch (token.tok) {
				case 135369225:
				case 364547:
				case 102402:
				    token = org.jmol.script.Token.tokenIf;
				    break;
				case 102413:
				case 102411:
				    token = org.jmol.script.Token.tokenSwitch;
				    break;
				default:
				    token = org.jmol.script.Token.getTokenFromName (token.value);
				    break;
				}
				if (!this.checkFlowEnd (token.tok, token.value, this.ichBrace)) return 4;
				if (token.tok != 135368713 && token.tok != 102436 && token.tok != 364558) this.addTokenToPrefix (token);
				this.setCommand (t0);
				return 2;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	c$.isBreakableContext = Clazz.defineMethod (c$, "isBreakableContext", 
						    function (tok) {
							return tok == 135369224 || tok == 102439 || tok == 102406 || tok == 102411 || tok == 102413;
						    }, "~N");
	Clazz.defineMethod (c$, "checkFlowCommand", 
			    ($fz = function (ident) {
				var pt = this.lltoken.size ();
				var isEnd = false;
				var isNew = true;
				switch (this.tokCommand) {
				case 135368713:
				case 102436:
				    if (this.flowContext != null) return this.errorStr (1, org.jmol.script.Token.nameOf (this.tokCommand));
				    break;
				case 1150985:
				    if (this.flowContext == null) return this.errorStr (1, ident);
				    isEnd = true;
				    if (this.flowContext.token.tok != 135368713 && this.flowContext.token.tok != 102436 && this.flowContext.token.tok != 364558) this.setCommand (org.jmol.script.Token.newTokenIntVal (this.tokCommand, (this.flowContext.ptDefault > 0 ? this.flowContext.ptDefault : -this.flowContext.pt0), ident));
				    break;
				case 364558:
				case 102412:
				    break;
				case 135369224:
				case 135369225:
				case 102439:
				case 102410:
				case 102406:
				    break;
				case 364548:
				    isEnd = true;
				    if (this.flowContext == null || this.flowContext.token.tok != 135369225 && this.flowContext.token.tok != 102439 && this.flowContext.token.tok != 364547 && this.flowContext.token.tok != 102402) return this.errorStr (1, ident);
				    break;
				case 364547:
				    if (this.flowContext == null || this.flowContext.token.tok != 135369225 && this.flowContext.token.tok != 102402) return this.errorStr (1, ident);
				    this.flowContext.token.intValue = this.flowContext.setPt0 (pt, false);
				    break;
				case 102407:
				case 102408:
				    isNew = false;
				    var f = (this.flowContext == null ? null : this.flowContext.getBreakableContext (0));
				    if (this.tokCommand == 102408) while (f != null && f.token.tok != 135369224 && f.token.tok != 102406) f = f.getParent ();

				    if (f == null) return this.errorStr (1, ident);
				    this.setCommand (org.jmol.script.Token.newTokenIntVal (this.tokCommand, f.pt0, ident));
				    break;
				case 102413:
				    if (this.flowContext == null || this.flowContext.token.tok != 102410 && this.flowContext.token.tok != 102411 && this.flowContext.ptDefault > 0) return this.errorStr (1, ident);
				    this.flowContext.token.intValue = this.flowContext.setPt0 (pt, true);
				    break;
				case 102411:
				    if (this.flowContext == null || this.flowContext.token.tok != 102410 && this.flowContext.token.tok != 102411 && this.flowContext.token.tok != 102413) return this.errorStr (1, ident);
				    this.flowContext.token.intValue = this.flowContext.setPt0 (pt, false);
				    break;
				case 102402:
				    if (this.flowContext == null || this.flowContext.token.tok != 135369225 && this.flowContext.token.tok != 102402 && this.flowContext.token.tok != 364547) return this.errorStr (1, "elseif");
				    this.flowContext.token.intValue = this.flowContext.setPt0 (pt, false);
				    break;
				}
				if (isEnd) {
				    this.flowContext.token.intValue = (this.tokCommand == 102412 ? -pt : pt);
				    if (this.tokCommand == 364548) this.flowContext = this.flowContext.getParent ();
				    if (this.tokCommand == 364558) {
				    }} else if (isNew) {
					var ct =  new org.jmol.script.ContextToken (this.tokCommand, this.tokenCommand.value);
					this.setCommand (ct);
					switch (this.tokCommand) {
					case 364558:
					    this.flowContext =  new org.jmol.script.ScriptFlowContext (this, ct, pt, this.flowContext);
					    if (this.thisFunction != null) this.vFunctionStack.add (0, this.thisFunction);
					    this.thisFunction =  new org.jmol.thread.ScriptParallelProcessor ("", this.tokCommand);
					    this.flowContext.setFunction (this.thisFunction);
					    this.pushCount++;
					    this.vPush.add (ct);
					    break;
					case 364547:
					case 102402:
					    this.flowContext.token = ct;
					    break;
					case 102411:
					case 102413:
					    ct.contextVariables = this.flowContext.token.contextVariables;
					    this.flowContext.token = ct;
					    break;
					case 102439:
					case 135369224:
					case 102406:
					case 102412:
					    this.pushCount++;
					    this.vPush.add (ct);
					case 135369225:
					case 102410:
					default:
					    this.flowContext =  new org.jmol.script.ScriptFlowContext (this, ct, pt, this.flowContext);
					    break;
					}
				    }return true;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "checkFlowEnd", 
			    ($fz = function (tok, ident, pt1) {
				if (this.flowContext == null || this.flowContext.token.tok != tok) {
				    var isOK = true;
				    switch (tok) {
				    case 135369225:
					isOK = (this.flowContext.token.tok == 364547 || this.flowContext.token.tok == 102402);
					break;
				    case 102410:
					isOK = (this.flowContext.token.tok == 102411 || this.flowContext.token.tok == 102413);
					break;
				    default:
					isOK = false;
				    }
				    if (!isOK) return this.errorStr (1, "end " + ident);
				}switch (tok) {
				case 135369225:
				case 102410:
				    break;
				case 102412:
				case 135369224:
				case 102439:
				case 102406:
				    this.vPush.remove (--this.pushCount);
				    break;
				case 102436:
				case 135368713:
				case 364558:
				    if (!this.isCheckOnly) {
					this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (tok, this.thisFunction));
					org.jmol.script.ScriptFunction.setFunction (this.thisFunction, this.script, pt1, this.lltoken.size (), this.lineNumbers, this.lineIndices, this.lltoken);
				    }this.thisFunction = (this.vFunctionStack.size () == 0 ? null : this.vFunctionStack.remove (0));
				    this.tokenCommand.intValue = 0;
				    if (tok == 364558) this.vPush.remove (--this.pushCount);
				    break;
				default:
				    return this.errorStr (19, "end " + ident);
				}
				this.flowContext = this.flowContext.getParent ();
				return true;
			    }, $fz.isPrivate = true, $fz), "~N,~S,~N");
	Clazz.defineMethod (c$, "getData", 
			    ($fz = function (key) {
				this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, key));
				this.ichToken += key.length + 2;
				if (this.script.length > this.ichToken && this.script.charAt (this.ichToken) == '\r') {
				    this.lineCurrent++;
				    this.ichToken++;
				}if (this.script.length > this.ichToken && this.script.charAt (this.ichToken) == '\n') {
				    this.lineCurrent++;
				    this.ichToken++;
				}var i = this.script.indexOf (this.chFirst + key + this.chFirst, this.ichToken) - 4;
				if (i < 0 || !this.script.substring (i, i + 4).equalsIgnoreCase ("END ")) return false;
				var str = this.script.substring (this.ichToken, i);
				this.incrementLineCount (str);
				this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (135270407, str));
				this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (1073741824, "end"));
				this.addTokenToPrefix (org.jmol.script.Token.newTokenObj (4, key));
				this.cchToken = i - this.ichToken + key.length + 6;
				return true;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "incrementLineCount", 
			    ($fz = function (str) {
				var ch;
				var pt = str.indexOf ('\r');
				var pt2 = str.indexOf ('\n');
				if (pt < 0 && pt2 < 0) return 0;
				var n = this.lineCurrent;
				if (pt < 0 || pt2 < pt) pt = pt2;
				for (var i = str.length; --i >= pt; ) {
				    if ((ch = str.charAt (i)) == '\n' || ch == '\r') this.lineCurrent++;
				}
				return this.lineCurrent - n;
			    }, $fz.isPrivate = true, $fz), "~S");
	c$.isSpaceOrTab = Clazz.defineMethod (c$, "isSpaceOrTab", 
					      ($fz = function (ch) {
						  return ch == ' ' || ch == '\t';
					      }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "eol", 
			    ($fz = function (ch) {
				return (ch == '\r' || ch == '\n' || ch == ';' && this.nSemiSkip <= 0);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "lookingAtBraceSyntax", 
			    ($fz = function () {
				var ichT = this.ichToken;
				var nParen = 1;
				while (++ichT < this.cchScript && nParen > 0) {
				    switch (this.script.charAt (ichT)) {
				    case '{':
					nParen++;
					break;
				    case '}':
					nParen--;
					break;
				    }
				}
				if (ichT < this.cchScript && this.script.charAt (ichT) == '[' && ++nParen == 1) while (++ichT < this.cchScript && nParen > 0) {
				    switch (this.script.charAt (ichT)) {
				    case '[':
					nParen++;
					break;
				    case ']':
					nParen--;
					break;
				    }
				}
				if (ichT < this.cchScript && this.script.charAt (ichT) == '.' && nParen == 0) {
				    return true;
				}return false;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtString", 
			    ($fz = function (allowPrime) {
				if (this.ichToken == this.cchScript) return false;
				this.chFirst = this.script.charAt (this.ichToken);
				if (this.chFirst != '"' && (!allowPrime || this.chFirst != '\'')) return false;
				var ichT = this.ichToken;
				var ch;
				var previousCharBackslash = false;
				while (++ichT < this.cchScript) {
				    ch = this.script.charAt (ichT);
				    if (ch == this.chFirst && !previousCharBackslash) break;
				    previousCharBackslash = (ch == '\\' ? !previousCharBackslash : false);
				}
				if (ichT == this.cchScript) {
				    this.cchToken = -1;
				    this.ichEnd = this.cchScript;
				} else {
				    this.cchToken = ++ichT - this.ichToken;
				}return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getUnescapedStringLiteral", 
			    function () {
				if (this.cchToken < 2) return "";
				var sb = org.jmol.util.StringXBuilder.newN (this.cchToken - 2);
				var ichMax = this.ichToken + this.cchToken - 1;
				var ich = this.ichToken + 1;
				while (ich < ichMax) {
				    var ch = this.script.charAt (ich++);
				    if (ch == '\\' && ich < ichMax) {
					ch = this.script.charAt (ich++);
					switch (ch) {
					case 'b':
					    ch = '\b';
					    break;
					case 'n':
					    ch = '\n';
					    break;
					case 't':
					    ch = '\t';
					    break;
					case 'r':
					    ch = '\r';
					case '"':
					case '\\':
					case '\'':
					    break;
					case 'x':
					case 'u':
					    var digitCount = ch == 'x' ? 2 : 4;
					    if (ich < ichMax) {
						var unicode = 0;
						for (var k = digitCount; --k >= 0 && ich < ichMax; ) {
						    var chT = this.script.charAt (ich);
						    var hexit = org.jmol.util.Escape.getHexitValue (chT);
						    if (hexit < 0) break;
						    unicode <<= 4;
						    unicode += hexit;
						    ++ich;
						}
						ch = String.fromCharCode (unicode);
					    }}
				    }sb.appendC (ch);
				}
				return sb.toString ();
			    });
	Clazz.defineMethod (c$, "lookingAtLoadFormat", 
			    ($fz = function () {
				var ichT = this.ichToken;
				var ch = '\u0000';
				var allchar = (ichT < this.cchScript && org.jmol.viewer.Viewer.isDatabaseCode (ch = this.script.charAt (ichT)));
				while (ichT < this.cchScript && (Character.isLetterOrDigit (ch = this.script.charAt (ichT)) && (allchar || Character.isLetter (ch)) || allchar && (!this.eol (ch) && !Character.isWhitespace (ch)))) ++ichT;

				if (!allchar && ichT == this.ichToken || !org.jmol.script.ScriptCompiler.isSpaceOrTab (ch)) return false;
				this.cchToken = ichT - this.ichToken;
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtImpliedString", 
			    ($fz = function (allowSpace, allowEquals, allowSptParen) {
				var ichT = this.ichToken;
				var ch = this.script.charAt (ichT);
				var parseVariables = !(org.jmol.script.Token.tokAttr (this.tokCommand, 20480) || (this.tokCommand & 1) == 0);
				var isVariable = (ch == '@');
				var isMath = (isVariable && ichT + 3 < this.cchScript && this.script.charAt (ichT + 1) == '{');
				if (isMath && parseVariables) {
				    ichT = org.jmol.script.ScriptCompiler.ichMathTerminator (this.script, this.ichToken + 1, this.cchScript);
				    return (ichT != this.cchScript && (this.cchToken = ichT + 1 - this.ichToken) > 0);
				}var ptSpace = -1;
				var ptLastChar = -1;
				var isOK = true;
				var parenpt = 0;
				while (isOK && ichT < this.cchScript && !this.eol (ch = this.script.charAt (ichT))) {
				    switch (ch) {
				    case '(':
					if (!allowSptParen) {
					    if (ichT >= 5 && (this.script.substring (ichT - 4, ichT).equals (".spt") || this.script.substring (ichT - 4, ichT).equals (".png") || this.script.substring (ichT - 5, ichT).equals (".pngj"))) {
						isOK = false;
						continue;
					    }}break;
				    case '=':
					if (!allowEquals) {
					    isOK = false;
					    continue;
					}break;
				    case '{':
					parenpt++;
					break;
				    case '}':
					parenpt--;
					if (parenpt < 0 && (this.braceCount > 0 || this.iBrace > 0)) {
					    isOK = false;
					    continue;
					}break;
				    default:
					if (Character.isWhitespace (ch)) {
					    if (ptSpace < 0) ptSpace = ichT;
					} else {
					    ptLastChar = ichT;
					}break;
				    }
				    if (Character.isWhitespace (ch)) {
					if (ptSpace < 0) ptSpace = ichT;
				    } else {
					ptLastChar = ichT;
				    }++ichT;
				}
				if (allowSpace) ichT = ptLastChar + 1;
				else if (ptSpace > 0) ichT = ptSpace;
				if (isVariable && ptSpace < 0 && parenpt <= 0 && ichT - this.ichToken > 1) {
				    return false;
				}return (this.cchToken = ichT - this.ichToken) > 0;
			    }, $fz.isPrivate = true, $fz), "~B,~B,~B");
	c$.ichMathTerminator = Clazz.defineMethod (c$, "ichMathTerminator", 
						   function (script, ichT, len) {
						       var nP = 1;
						       var chFirst = '\u0000';
						       var chLast = '\u0000';
						       while (nP > 0 && ++ichT < len) {
							   var ch = script.charAt (ichT);
							   if (chFirst != '\0') {
							       if (chLast == '\\') {
								   ch = '\0';
							       } else if (ch == chFirst) {
								   chFirst = '\0';
							       }chLast = ch;
							       continue;
							   }switch (ch) {
							   case '\'':
							   case '"':
							       chFirst = ch;
							       break;
							   case '{':
							       nP++;
							       break;
							   case '}':
							       nP--;
							       break;
							   }
						       }
						       return ichT;
						   }, "~S,~N,~N");
	Clazz.defineMethod (c$, "lookingAtExponential", 
			    ($fz = function () {
				if (this.ichToken == this.cchScript) return NaN;
				var ichT = this.ichToken;
				var pt0 = ichT;
				if (this.script.charAt (ichT) == '-') ++ichT;
				var isOK = false;
				var ch = 'X';
				while (ichT < this.cchScript && Character.isDigit (ch = this.script.charAt (ichT))) {
				    ++ichT;
				    isOK = true;
				}
				if (ichT < this.cchScript && ch == '.') ++ichT;
				while (ichT < this.cchScript && Character.isDigit (ch = this.script.charAt (ichT))) {
				    ++ichT;
				    isOK = true;
				}
				if (ichT == this.cchScript || !isOK) return NaN;
				isOK = (ch != 'E' && ch != 'e');
				if (isOK || ++ichT == this.cchScript) return NaN;
				ch = this.script.charAt (ichT);
				if (ch == '-' || ch == '+') ichT++;
				while (ichT < this.cchScript && Character.isDigit (ch = this.script.charAt (ichT))) {
				    ichT++;
				    isOK = true;
				}
				if (!isOK) return NaN;
				this.cchToken = ichT - this.ichToken;
				return Double.$valueOf (this.script.substring (pt0, ichT)).doubleValue ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtDecimal", 
			    ($fz = function () {
				if (this.ichToken == this.cchScript) return false;
				var ichT = this.ichToken;
				if (this.script.charAt (ichT) == '-') ++ichT;
				var digitSeen = false;
				var ch = 'X';
				while (ichT < this.cchScript && Character.isDigit (ch = this.script.charAt (ichT++))) digitSeen = true;

				if (ch != '.') return false;
				var ch1;
				if (ichT < this.cchScript && !this.eol (ch1 = this.script.charAt (ichT))) {
				    if (Character.isLetter (ch1) || ch1 == '?' || ch1 == '*') return false;
				    if (ichT + 1 < this.cchScript && (Character.isLetter (ch1 = this.script.charAt (ichT + 1)) || ch1 == '?')) return false;
				}while (ichT < this.cchScript && Character.isDigit (this.script.charAt (ichT))) {
				    ++ichT;
				    digitSeen = true;
				}
				this.cchToken = ichT - this.ichToken;
				return digitSeen;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtSeqcode", 
			    ($fz = function () {
				var ichT = this.ichToken;
				var ch = ' ';
				if (ichT + 1 < this.cchScript && this.script.charAt (ichT) == '*' && this.script.charAt (ichT + 1) == '^') {
				    ch = '^';
				    ++ichT;
				} else {
				    if (this.script.charAt (ichT) == '-') ++ichT;
				    while (ichT < this.cchScript && Character.isDigit (ch = this.script.charAt (ichT))) ++ichT;

				}if (ch != '^') return false;
				ichT++;
				if (ichT == this.cchScript) ch = ' ';
				else ch = this.script.charAt (ichT++);
				if (ch != ' ' && ch != '*' && ch != '?' && !Character.isLetter (ch)) return false;
				this.cchToken = ichT - this.ichToken;
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtInteger", 
			    ($fz = function () {
				if (this.ichToken == this.cchScript) return 2147483647;
				var ichT = this.ichToken;
				if (this.script.charAt (this.ichToken) == '-') ++ichT;
				var ichBeginDigits = ichT;
				while (ichT < this.cchScript && Character.isDigit (this.script.charAt (ichT))) ++ichT;

				if (ichBeginDigits == ichT) return 2147483647;
				this.cchToken = ichT - this.ichToken;
				try {
				    var val = Integer.parseInt (this.script.substring (this.ichToken, ichT));
				    return val;
				} catch (e) {
				    if (Clazz.exceptionOf (e, NumberFormatException)) {
				    } else {
					throw e;
				    }
				}
				return 2147483647;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "lookingAtBitset", 
			    function () {
				if (this.script.indexOf ("({null})", this.ichToken) == this.ichToken) {
				    this.cchToken = 8;
				    return  new org.jmol.util.BitSet ();
				}var ichT;
				if (this.ichToken + 4 > this.cchScript || this.script.charAt (this.ichToken + 1) != '{' || (ichT = this.script.indexOf ("}", this.ichToken)) < 0 || ichT + 1 == this.cchScript) return null;
				var bs = org.jmol.util.Escape.unescapeBitset (this.script.substring (this.ichToken, ichT + 2));
				if (bs != null) this.cchToken = ichT + 2 - this.ichToken;
				return bs;
			    });
	Clazz.defineMethod (c$, "lookingAtObjectID", 
			    ($fz = function (allowWildID) {
				var ichT = this.ichToken;
				if (ichT == this.cchScript || this.script.charAt (ichT) != '$') return false;
				if (++ichT != this.cchScript && this.script.charAt (ichT) == '"') return false;
				while (ichT < this.cchScript) {
				    var ch;
				    if (Character.isWhitespace (ch = this.script.charAt (ichT))) {
					if (ichT == this.ichToken + 1) return false;
					break;
				    }if (!Character.isLetterOrDigit (ch)) {
					switch (ch) {
					default:
					    return false;
					case '*':
					    if (!allowWildID) return false;
					    break;
					case '~':
					case '_':
					    break;
					}
				    }ichT++;
				}
				this.cchToken = ichT - (++this.ichToken);
				return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "lookingAtLookupToken", 
			    ($fz = function (ichT) {
				if (ichT == this.cchScript) return false;
				var ichT0 = ichT;
				this.tokLastMath = 0;
				var ch;
				switch (ch = this.script.charAt (ichT++)) {
				case '-':
				case '+':
				case '&':
				case '|':
				case '*':
				    if (ichT < this.cchScript) {
					if (this.script.charAt (ichT) == ch) {
					    ++ichT;
					    if (ch == '-' || ch == '+') break;
					    if (ch == '&' && ichT < this.cchScript && this.script.charAt (ichT) == ch) ++ichT;
					} else if (this.script.charAt (ichT) == '=') {
					    ++ichT;
					}}this.tokLastMath = 1;
				    break;
				case '/':
				    if (ichT < this.cchScript && this.script.charAt (ichT) == '/') break;
				case '\\':
				case '!':
				    if (ichT < this.cchScript && this.script.charAt (ichT) == '=') ++ichT;
				    this.tokLastMath = 1;
				    break;
				case ')':
				case ']':
				case '}':
				case '.':
				    break;
				case '@':
				case '{':
				    this.tokLastMath = 2;
				    break;
				case ':':
				    this.tokLastMath = 1;
				    break;
				case '(':
				case ',':
				case '$':
				case ';':
				case '[':
				case '%':
				    this.tokLastMath = 1;
				    break;
				case '<':
				case '=':
				case '>':
				    if (ichT < this.cchScript && ((ch = this.script.charAt (ichT)) == '<' || ch == '=' || ch == '>')) ++ichT;
				    this.tokLastMath = 1;
				    break;
				default:
				    if (!Character.isLetter (ch)) return false;
				case '~':
				case '_':
				case '\'':
				case '?':
				    if (ch == '?') this.tokLastMath = 1;
				    while (ichT < this.cchScript && (Character.isLetterOrDigit (ch = this.script.charAt (ichT)) || ch == '_' || ch == '?' || ch == '~' || ch == '\'') || (ch == '^' && ichT > ichT0 && Character.isDigit (this.script.charAt (ichT - 1))) || ch == '\\' && ichT + 1 < this.cchScript && this.script.charAt (ichT + 1) == '?') ++ichT;

				    break;
				}
				this.cchToken = ichT - ichT0;
				return true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "charToken", 
			    ($fz = function () {
				var ch;
				if (this.ichToken == this.cchScript || (ch = this.script.charAt (this.ichToken)) == '"' || ch == '@') return false;
				var ichT = this.ichToken;
				while (ichT < this.cchScript && !org.jmol.script.ScriptCompiler.isSpaceOrTab (ch = this.script.charAt (ichT)) && ch != '#' && ch != '}' && !this.eol (ch)) ++ichT;

				this.cchToken = ichT - this.ichToken;
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "ERROR", 
			    ($fz = function (error) {
				this.errorIntStr2 (error, null, null);
				return 4;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "ERROR", 
			    ($fz = function (error, value) {
				this.errorStr (error, value);
				return 4;
			    }, $fz.isPrivate = true, $fz), "~N,~S");
	Clazz.defineMethod (c$, "handleError", 
			    ($fz = function () {
				this.errorType = this.errorMessage;
				this.errorLine = this.script.substring (this.ichCurrentCommand, this.ichEnd <= this.ichCurrentCommand ? this.ichToken : this.ichEnd);
				var lineInfo = (this.ichToken < this.ichEnd ? this.errorLine.substring (0, this.ichToken - this.ichCurrentCommand) + " >>>> " + this.errorLine.substring (this.ichToken - this.ichCurrentCommand) : this.errorLine) + " <<<<";
				this.errorMessage = org.jmol.i18n.GT._ ("script compiler ERROR: ") + this.errorMessage + org.jmol.script.ScriptEvaluator.setErrorLineMessage (null, this.filename, this.lineCurrent, this.iCommand, lineInfo);
				if (!this.isSilent) {
				    this.ichToken = Math.max (this.ichEnd, this.ichToken);
				    while (!this.lookingAtEndOfLine () && !this.lookingAtEndOfStatement ()) this.ichToken++;

				    this.errorLine = this.script.substring (this.ichCurrentCommand, this.ichToken);
				    this.viewer.addCommand (this.errorLine + "#??");
				    org.jmol.util.Logger.error (this.errorMessage);
				}return false;
			    }, $fz.isPrivate = true, $fz));
	c$.splitCommandLine = Clazz.defineMethod (c$, "splitCommandLine", 
						  function (cmd) {
						      var sout =  new Array (3);
						      var isEscaped1 = false;
						      var isEscaped2 = false;
						      var isEscaped = false;
						      if (cmd.length == 0) return null;
						      var ptQ = -1;
						      var ptCmd = 0;
						      var ptToken = 0;
						      for (var i = 0; i < cmd.length; i++) {
							  switch (cmd.charAt (i)) {
							  case '"':
							      if (!isEscaped && !isEscaped1) {
								  isEscaped2 = !isEscaped2;
								  if (isEscaped2) ptQ = ptToken = i;
							      }break;
							  case '\'':
							      if (!isEscaped && !isEscaped2) {
								  isEscaped1 = !isEscaped1;
								  if (isEscaped1) ptQ = ptToken = i;
							      }break;
							  case '\\':
							      isEscaped = !isEscaped;
							      continue;
							  case ' ':
							      if (!isEscaped && !isEscaped1 && !isEscaped2) {
								  ptToken = i + 1;
								  ptQ = -1;
							      }break;
							  case ';':
							      if (!isEscaped1 && !isEscaped2) {
								  ptCmd = ptToken = i + 1;
								  ptQ = -1;
							      }break;
							  default:
							      if (!isEscaped1 && !isEscaped2) ptQ = -1;
							  }
							  isEscaped = false;
						      }
						      sout[0] = cmd.substring (0, ptCmd);
						      sout[1] = (ptToken == ptCmd ? cmd.substring (ptCmd) : cmd.substring (ptCmd, (ptToken > ptQ ? ptToken : ptQ)));
						      sout[2] = (ptToken == ptCmd ? null : cmd.substring (ptToken));
						      return sout;
						  }, "~S");
	Clazz.defineStatics (c$,
			     "OK", 0,
			     "OK2", 1,
			     "CONTINUE", 2,
			     "EOL", 3,
			     "$ERROR", 4);
    });
    // 
    //// org\jmol\script\ScriptEvaluator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (null, "org.jmol.script.ScriptEvaluator", ["java.lang.Boolean", "$.Float", "$.NullPointerException", "$.Short", "$.Thread", "java.util.ArrayList", "$.Hashtable", "org.jmol.atomdata.RadiusData", "org.jmol.constant.EnumAnimationMode", "$.EnumAxesMode", "$.EnumPalette", "$.EnumStereoMode", "$.EnumStructure", "$.EnumVdw", "org.jmol.i18n.GT", "org.jmol.io.JmolBinary", "org.jmol.modelset.Atom", "$.AtomCollection", "$.Bond", "$.Group", "$.LabelToken", "$.MeasurementData", "$.ModelCollection", "$.TickInfo", "org.jmol.script.ScriptCompiler", "$.ScriptContext", "$.ScriptException", "$.ScriptMathProcessor", "$.ScriptVariable", "$.ScriptVariableInt", "$.Token", "org.jmol.shape.Object2d", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.BoxInfo", "$.Colix", "$.ColorEncoder", "$.ColorUtil", "$.Elements", "$.Escape", "$.GData", "$.JmolEdge", "$.Logger", "$.Matrix3f", "$.Matrix4f", "$.Measure", "$.MeshSurface", "$.Parser", "$.Point3f", "$.Point3fi", "$.Point4f", "$.Quaternion", "$.StringXBuilder", "$.TextFormat", "$.Vector3f", "org.jmol.viewer.ActionManager", "$.FileManager", "$.JmolConstants", "$.PropertyManager", "$.StateManager", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.tQuiet = false;
	    this.isSyntaxCheck = false;
	    this.isCmdLine_C_Option = false;
	    this.isCmdLine_c_or_C_Option = false;
	    this.historyDisabled = false;
	    this.logMessages = false;
	    this.debugScript = false;
	    this.interruptExecution = false;
	    this.executionPaused = false;
	    this.executionStepping = false;
	    this.isExecuting = false;
	    this.timeBeginExecution = 0;
	    this.timeEndExecution = 0;
	    this.shapeManager = null;
	    this.currentThread = null;
	    this.viewer = null;
	    this.compiler = null;
	    this.definedAtomSets = null;
	    this.outputBuffer = null;
	    this.contextPath = "";
	    this.scriptFileName = null;
	    this.functionName = null;
	    this.isStateScript = false;
	    this.scriptLevel = 0;
	    this.scriptReportingLevel = 0;
	    this.commandHistoryLevelMax = 0;
	    this.aatoken = null;
	    this.lineNumbers = null;
	    this.lineIndices = null;
	    this.contextVariables = null;
	    this.$script = null;
	    this.pc = 0;
	    this.thisCommand = null;
	    this.fullCommand = null;
	    this.statement = null;
	    this.statementLength = 0;
	    this.iToken = 0;
	    this.lineEnd = 0;
	    this.pcEnd = 0;
	    this.scriptExtensions = null;
	    this.forceNoAddHydrogens = false;
	    this.parallelProcessor = null;
	    this.thisContext = null;
	    this.$error = false;
	    this.errorMessage = null;
	    this.errorMessageUntranslated = null;
	    this.errorType = null;
	    this.iCommandError = 0;
	    this.ignoreError = false;
	    this.tempStatement = null;
	    this.isBondSet = false;
	    this.expressionResult = null;
	    this.theTok = 0;
	    this.theToken = null;
	    this.coordinatesAreFractional = false;
	    this.fractionalPoint = null;
	    this.vProcess = null;
	    this.$data = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptEvaluator");
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
				   this.compiler = (this.compiler == null ? viewer.compiler : this.compiler);
				   this.definedAtomSets = viewer.definedAtomSets;
				   this.currentThread = Thread.currentThread ();
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "compileScriptString", 
			    function (script, tQuiet) {
				this.clearState (tQuiet);
				this.contextPath = "[script]";
				return this.compileScript (null, script, this.debugScript);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "createFunction", 
			    ($fz = function (fname, xyz, ret) {
				var e =  new org.jmol.script.ScriptEvaluator (this.viewer);
				try {
				    e.compileScript (null, "function " + fname + "(" + xyz + ") { return " + ret + "}", false);
				    var params =  new java.util.ArrayList ();
				    for (var i = 0; i < xyz.length; i += 2) params.add (org.jmol.script.ScriptVariable.newVariable (3, Float.$valueOf (0)).setName (xyz.substring (i, i + 1)));

				    return [e.aatoken[0][1].value, params];
				} catch (ex) {
				    if (Clazz.exceptionOf (ex, Exception)) {
					return null;
				    } else {
					throw ex;
				    }
				}
			    }, $fz.isPrivate = true, $fz), "~S,~S,~S");
	Clazz.defineMethod (c$, "compileScriptFile", 
			    function (filename, tQuiet) {
				this.clearState (tQuiet);
				this.contextPath = filename;
				return this.compileScriptFileInternal (filename, null, null, null);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "evaluateCompiledScript", 
			    function (isCmdLine_c_or_C_Option, isCmdLine_C_Option, historyDisabled, listCommands, outputBuffer) {
				var tempOpen = this.isCmdLine_C_Option;
				this.isCmdLine_C_Option = isCmdLine_C_Option;
				this.viewer.pushHoldRepaintWhy ("runEval");
				this.interruptExecution = this.executionPaused = false;
				this.executionStepping = false;
				this.isExecuting = true;
				this.currentThread = Thread.currentThread ();
				this.isSyntaxCheck = this.isCmdLine_c_or_C_Option = isCmdLine_c_or_C_Option;
				this.timeBeginExecution = System.currentTimeMillis ();
				this.historyDisabled = historyDisabled;
				this.outputBuffer = outputBuffer;
				this.setErrorMessage (null);
				try {
				    try {
					this.setScriptExtensions ();
					this.instructionDispatchLoop (listCommands);
					var script = this.viewer.getInterruptScript ();
					if (script !== "") this.runScriptBuffer (script, null);
				    } catch (er) {
					if (Clazz.exceptionOf (er, Error)) {
					    this.viewer.handleError (er, false);
					    this.setErrorMessage ("" + er + " " + this.viewer.getShapeErrorState ());
					    this.errorMessageUntranslated = "" + er;
					    this.scriptStatusOrBuffer (this.errorMessage);
					} else {
					    throw er;
					}
				    }
				} catch (e) {
				    if (Clazz.exceptionOf (e, org.jmol.script.ScriptException)) {
					this.setErrorMessage (e.toString ());
					this.errorMessageUntranslated = e.getErrorMessageUntranslated ();
					this.scriptStatusOrBuffer (this.errorMessage);
					this.viewer.notifyError ((this.errorMessage != null && this.errorMessage.indexOf ("java.lang.OutOfMemoryError") >= 0 ? "Error" : "ScriptException"), this.errorMessage, this.errorMessageUntranslated);
				    } else {
					throw e;
				    }
				}
				this.timeEndExecution = System.currentTimeMillis ();
				this.isCmdLine_C_Option = tempOpen;
				if (this.errorMessage == null && this.interruptExecution) this.setErrorMessage ("execution interrupted");
				else if (!this.tQuiet && !this.isSyntaxCheck) this.viewer.scriptStatus ("Script completed");
				this.isExecuting = this.isSyntaxCheck = isCmdLine_c_or_C_Option = historyDisabled = false;
				this.viewer.setTainted (true);
				this.viewer.popHoldRepaintWhy ("runEval");
			    }, "~B,~B,~B,~B,org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "runScriptBuffer", 
			    function (script, outputBuffer) {
				this.pushContext (null);
				this.contextPath += " >> script() ";
				this.outputBuffer = outputBuffer;
				if (this.compileScript (null, script + "\u0001## EDITOR_IGNORE ##", false)) this.instructionDispatchLoop (false);
				this.popContext (false, false);
			    }, "~S,org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "checkScriptSilent", 
			    function (script) {
				var sc = this.compiler.compile (null, script, false, true, false, true);
				if (sc.errorType != null) return sc;
				this.restoreScriptContext (sc, false, false, false);
				this.isSyntaxCheck = true;
				this.isCmdLine_c_or_C_Option = this.isCmdLine_C_Option = false;
				this.pc = 0;
				try {
				    this.instructionDispatchLoop (false);
				} catch (e) {
				    if (Clazz.exceptionOf (e, org.jmol.script.ScriptException)) {
					this.setErrorMessage (e.toString ());
					sc = this.getScriptContext ();
				    } else {
					throw e;
				    }
				}
				this.isSyntaxCheck = false;
				return sc;
			    }, "~S");
	Clazz.defineMethod (c$, "setDebugging", 
			    function () {
				this.debugScript = this.viewer.getDebugScript ();
				this.logMessages = (this.debugScript && org.jmol.util.Logger.debugging);
			    });
	Clazz.defineMethod (c$, "getExecutionWalltime", 
			    function () {
				return (this.timeEndExecution - this.timeBeginExecution);
			    });
	Clazz.defineMethod (c$, "haltExecution", 
			    function () {
				this.resumePausedExecution ();
				this.interruptExecution = true;
			    });
	Clazz.defineMethod (c$, "pauseExecution", 
			    function (withDelay) {
				if (this.isSyntaxCheck || this.viewer.isHeadless ()) return;
				if (withDelay) this.delayMillis (-100);
				this.viewer.popHoldRepaintWhy ("pauseExecution");
				this.executionStepping = false;
				this.executionPaused = true;
			    }, "~B");
	Clazz.defineMethod (c$, "stepPausedExecution", 
			    function () {
				this.executionStepping = true;
				this.executionPaused = false;
			    });
	Clazz.defineMethod (c$, "resumePausedExecution", 
			    function () {
				this.executionPaused = false;
				this.executionStepping = false;
			    });
	Clazz.defineMethod (c$, "isScriptExecuting", 
			    function () {
				return this.isExecuting && !this.interruptExecution;
			    });
	Clazz.defineMethod (c$, "isExecutionPaused", 
			    function () {
				return this.executionPaused;
			    });
	Clazz.defineMethod (c$, "isExecutionStepping", 
			    function () {
				return this.executionStepping;
			    });
	Clazz.defineMethod (c$, "getNextStatement", 
			    function () {
				return (this.pc < this.aatoken.length ? org.jmol.script.ScriptEvaluator.setErrorLineMessage (this.functionName, this.scriptFileName, this.getLinenumber (null), this.pc, org.jmol.script.ScriptEvaluator.statementAsString (this.aatoken[this.pc], -9999, this.logMessages)) : "");
			    });
	Clazz.defineMethod (c$, "getCommand", 
			    ($fz = function (pc, allThisLine, addSemi) {
				if (pc >= this.lineIndices.length) return "";
				if (allThisLine) {
				    var pt0 = -1;
				    var pt1 = this.$script.length;
				    for (var i = 0; i < this.lineNumbers.length; i++) if (this.lineNumbers[i] == this.lineNumbers[pc]) {
					if (pt0 < 0) pt0 = this.lineIndices[i][0];
					pt1 = this.lineIndices[i][1];
				    } else if (this.lineNumbers[i] == 0 || this.lineNumbers[i] > this.lineNumbers[pc]) {
					break;
				    }
				    if (pt1 == this.$script.length - 1 && this.$script.endsWith ("}")) pt1++;
				    return (pt0 == this.$script.length || pt1 < pt0 ? "" : this.$script.substring (Math.max (pt0, 0), Math.min (this.$script.length, pt1)));
				}var ichBegin = this.lineIndices[pc][0];
				var ichEnd = this.lineIndices[pc][1];
				var s = "";
				if (ichBegin < 0 || ichEnd <= ichBegin || ichEnd > this.$script.length) return "";
				try {
				    s = this.$script.substring (ichBegin, ichEnd);
				    if (s.indexOf ("\\\n") >= 0) s = org.jmol.util.TextFormat.simpleReplace (s, "\\\n", "  ");
				    if (s.indexOf ("\\\r") >= 0) s = org.jmol.util.TextFormat.simpleReplace (s, "\\\r", "  ");
				    if (s.length > 0 && !s.endsWith (";")) s += ";";
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.error ("darn problem in Eval getCommand: ichBegin=" + ichBegin + " ichEnd=" + ichEnd + " len = " + this.$script.length + "\n" + e);
				    } else {
					throw e;
				    }
				}
				return s;
			    }, $fz.isPrivate = true, $fz), "~N,~B,~B");
	Clazz.defineMethod (c$, "logDebugScript", 
			    ($fz = function (ifLevel) {
				if (this.logMessages) {
				    if (this.statement.length > 0) org.jmol.util.Logger.debug (this.statement[0].toString ());
				    for (var i = 1; i < this.statementLength; ++i) org.jmol.util.Logger.debug (this.statement[i].toString ());

				}this.iToken = -9999;
				if (this.logMessages) {
				    var strbufLog =  new org.jmol.util.StringXBuilder ();
				    var s = (ifLevel > 0 ? "                          ".substring (0, ifLevel * 2) : "");
				    strbufLog.append (s).append (org.jmol.script.ScriptEvaluator.statementAsString (this.statement, this.iToken, this.logMessages));
				    this.viewer.scriptStatus (strbufLog.toString ());
				} else {
				    var cmd = this.getCommand (this.pc, false, false);
				    if (cmd !== "") this.viewer.scriptStatus (cmd);
				}}, $fz.isPrivate = true, $fz), "~N");
	c$.evaluateExpression = Clazz.defineMethod (c$, "evaluateExpression", 
						    function (viewer, expr, asVariable) {
							var e =  new org.jmol.script.ScriptEvaluator (viewer);
							return (e.evaluate (expr, asVariable));
						    }, "org.jmol.viewer.Viewer,~O,~B");
	Clazz.defineMethod (c$, "evaluate", 
			    ($fz = function (expr, asVariable) {
				try {
				    if (Clazz.instanceOf (expr, String)) {
					if (this.compileScript (null, "e_x_p_r_e_s_s_i_o_n" + " = " + expr, false)) {
					    this.contextVariables = this.viewer.getContextVariables ();
					    this.setStatement (0);
					    return (asVariable ? this.parameterExpressionList (2, -1, false).get (0) : this.parameterExpressionString (2, 0));
					}} else if (Clazz.instanceOf (expr, Array)) {
					    this.contextVariables = this.viewer.getContextVariables ();
					    var bs = this.atomExpression (expr, 0, 0, true, false, true, false);
					    return (asVariable ? org.jmol.script.ScriptVariable.newScriptVariableBs (bs, -1) : bs);
					}} catch (ex) {
					    if (Clazz.exceptionOf (ex, Exception)) {
						org.jmol.util.Logger.error ("Error evaluating: " + expr + "\n" + ex);
					    } else {
						throw ex;
					    }
					}
				return (asVariable ? org.jmol.script.ScriptVariable.getVariable ("ERROR") : "ERROR");
			    }, $fz.isPrivate = true, $fz), "~O,~B");
	c$.evaluateContext = Clazz.defineMethod (c$, "evaluateContext", 
						 function (viewer, context, shapeManager) {
						     var e =  new org.jmol.script.ScriptEvaluator (viewer);
						     e.historyDisabled = true;
						     e.compiler =  new org.jmol.script.ScriptCompiler (e.compiler);
						     e.shapeManager = shapeManager;
						     try {
							 e.restoreScriptContext (context, true, false, false);
							 e.instructionDispatchLoop (false);
						     } catch (ex) {
							 if (Clazz.exceptionOf (ex, Exception)) {
							     viewer.setStringProperty ("_errormessage", "" + ex);
							     if (e.thisContext == null) {
								 org.jmol.util.Logger.error ("Error evaluating context");
								 ex.printStackTrace ();
							     }return false;
							 } else {
							     throw ex;
							 }
						     }
						     return true;
						 }, "org.jmol.viewer.Viewer,org.jmol.script.ScriptContext,org.jmol.viewer.ShapeManager");
	c$.getAtomBitSet = Clazz.defineMethod (c$, "getAtomBitSet", 
					       function (e, atomExpression) {
						   if (Clazz.instanceOf (atomExpression, org.jmol.util.BitSet)) return atomExpression;
						   var bs =  new org.jmol.util.BitSet ();
						   try {
						       e.pushContext (null);
						       var scr = "select (" + atomExpression + ")";
						       scr = org.jmol.util.TextFormat.replaceAllCharacters (scr, "\n\r", "),(");
						       scr = org.jmol.util.TextFormat.simpleReplace (scr, "()", "(none)");
						       if (e.compileScript (null, scr, false)) {
							   e.statement = e.aatoken[0];
							   bs = e.atomExpression (e.statement, 1, 0, false, false, true, true);
						       }e.popContext (false, false);
						   } catch (ex) {
						       if (Clazz.exceptionOf (ex, Exception)) {
							   org.jmol.util.Logger.error ("getAtomBitSet " + atomExpression + "\n" + ex);
						       } else {
							   throw ex;
						       }
						   }
						   return bs;
					       }, "org.jmol.script.ScriptEvaluator,~O");
	c$.getAtomBitSetVector = Clazz.defineMethod (c$, "getAtomBitSetVector", 
						     function (e, atomCount, atomExpression) {
							 var V =  new java.util.ArrayList ();
							 var bs = org.jmol.script.ScriptEvaluator.getAtomBitSet (e, atomExpression);
							 for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
							     V.add (Integer.$valueOf (i));
							 }
							 return V;
						     }, "org.jmol.script.ScriptEvaluator,~N,~O");
	Clazz.defineMethod (c$, "parameterExpressionList", 
			    ($fz = function (pt, ptAtom, isArrayItem) {
				return this.parameterExpression (pt, -1, null, true, true, ptAtom, isArrayItem, null, null);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~B");
	Clazz.defineMethod (c$, "parameterExpressionString", 
			    ($fz = function (pt, ptMax) {
				return this.parameterExpression (pt, ptMax, "", true, false, -1, false, null, null);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "parameterExpressionBoolean", 
			    ($fz = function (pt, ptMax) {
				return (this.parameterExpression (pt, ptMax, null, true, false, -1, false, null, null)).booleanValue ();
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "parameterExpressionToken", 
			    ($fz = function (pt) {
				var result = this.parameterExpressionList (pt, -1, false);
				return (result.size () > 0 ? result.get (0) : org.jmol.script.ScriptVariable.newVariable (4, ""));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "parameterExpression", 
			    ($fz = function (pt, ptMax, key, ignoreComma, asVector, ptAtom, isArrayItem, localVars, localVar) {
				var v;
				var res;
				var isImplicitAtomProperty = (localVar != null);
				var isOneExpressionOnly = (pt < 0);
				var returnBoolean = (!asVector && key == null);
				var returnString = (!asVector && key != null && key.length == 0);
				var nSquare = 0;
				if (isOneExpressionOnly) pt = -pt;
				var nParen = 0;
				var rpn =  new org.jmol.script.ScriptMathProcessor (this, isArrayItem, asVector, false);
				if (pt == 0 && ptMax == 0) pt = 2;
				if (ptMax < pt) ptMax = this.statementLength;
				out : for (var i = pt; i < ptMax; i++) {
				    v = null;
				    var tok = this.getToken (i).tok;
				    if (isImplicitAtomProperty && this.tokAt (i + 1) != 1048584) {
					var token = (localVars != null && localVars.containsKey (this.theToken.value) ? null : this.getBitsetPropertySelector (i, false));
					if (token != null) {
					    rpn.addXVar (localVars.get (localVar));
					    if (!rpn.addOpAllowMath (token, (this.tokAt (i + 1) == 269484048))) this.error (22);
					    if ((token.intValue == 135368713 || token.intValue == 102436) && this.tokAt (this.iToken + 1) != 269484048) {
						rpn.addOp (org.jmol.script.Token.tokenLeftParen);
						rpn.addOp (org.jmol.script.Token.tokenRightParen);
					    }i = this.iToken;
					    continue;
					}}switch (tok) {
					case 1060866:
					    if (this.tokAt (++i) == 1048577) {
						v = this.parameterExpressionToken (++i);
						i = this.iToken;
					    } else if (this.tokAt (i) == 2) {
						v = this.viewer.getAtomBits (1095763969, Integer.$valueOf (this.statement[i].intValue));
						break;
					    } else {
						v = this.getParameter (org.jmol.script.ScriptVariable.sValue (this.statement[i]), 1073742190);
					    }v = this.getParameter ((v).asString (), 1073742190);
					    break;
					case 135369225:
					    if (this.getToken (++i).tok != 269484048) this.error (22);
					    if (localVars == null) localVars =  new java.util.Hashtable ();
					    res = this.parameterExpression (++i, -1, null, ignoreComma, false, -1, false, localVars, localVar);
					    var TF = (res).booleanValue ();
					    var iT = this.iToken;
					    if (this.getToken (iT++).tok != 1048591) this.error (22);
					    this.parameterExpressionBoolean (iT, -1);
					    var iF = this.iToken;
					    if (this.tokAt (iF++) != 1048591) this.error (22);
					    this.parameterExpression (-iF, -1, null, ignoreComma, false, 1, false, localVars, localVar);
					    var iEnd = this.iToken;
					    if (this.tokAt (iEnd) != 269484049) this.error (22);
					    v = this.parameterExpression (TF ? iT : iF, TF ? iF : iEnd, "XXX", ignoreComma, false, 1, false, localVars, localVar);
					    i = iEnd;
					    break;
					case 135369224:
					case 135280132:
					    var isFunctionOfX = (pt > 0);
					    var isFor = (isFunctionOfX && tok == 135369224);
					    var dummy;
					    if (isFunctionOfX) {
						if (this.getToken (++i).tok != 269484048 || !org.jmol.script.Token.tokAttr (this.getToken (++i).tok, 1073741824)) this.error (22);
						dummy = this.parameterAsString (i);
						if (this.getToken (++i).tok != 1048591) this.error (22);
					    } else {
						dummy = "_x";
					    }v = this.parameterExpressionToken (-(++i)).value;
					    if (!(Clazz.instanceOf (v, org.jmol.util.BitSet))) this.error (22);
					    var bsAtoms = v;
					    i = this.iToken;
					    if (isFunctionOfX && this.getToken (i++).tok != 1048591) this.error (22);
					    var bsSelect =  new org.jmol.util.BitSet ();
					    var bsX =  new org.jmol.util.BitSet ();
					    var sout = (isFor ?  new Array (org.jmol.util.BitSetUtil.cardinalityOf (bsAtoms)) : null);
					    if (localVars == null) localVars =  new java.util.Hashtable ();
					    bsX.set (0);
					    var t = org.jmol.script.ScriptVariable.newScriptVariableBs (bsX, 0);
					    localVars.put (dummy, t.setName (dummy));
					    var pt2 = -1;
					    if (isFunctionOfX) {
						pt2 = i - 1;
						var np = 0;
						var tok2;
						while (np >= 0 && ++pt2 < ptMax) {
						    if ((tok2 = this.tokAt (pt2)) == 269484049) np--;
						    else if (tok2 == 269484048) np++;
						}
					    }var p = 0;
					    var jlast = 0;
					    var j = bsAtoms.nextSetBit (0);
					    if (j < 0) {
						this.iToken = pt2 - 1;
					    } else if (!this.isSyntaxCheck) {
						for (; j >= 0; j = bsAtoms.nextSetBit (j + 1)) {
						    if (jlast >= 0) bsX.clear (jlast);
						    jlast = j;
						    bsX.set (j);
						    t.index = j;
						    res = this.parameterExpression (i, pt2, (isFor ? "XXX" : null), ignoreComma, isFor, j, false, localVars, isFunctionOfX ? null : dummy);
						    if (isFor) {
							if (res == null || (res).size () == 0) this.error (22);
							sout[p++] = ((res).get (0)).asString ();
						    } else if ((res).booleanValue ()) {
							bsSelect.set (j);
						    }}
					    }if (isFor) {
						v = sout;
					    } else if (isFunctionOfX) {
						v = bsSelect;
					    } else {
						return this.bitsetVariableVector (bsSelect);
					    }i = this.iToken + 1;
					    break;
					case 1048591:
					    break out;
					case 3:
					    rpn.addXNum (org.jmol.script.ScriptVariable.newVariable (3, this.theToken.value));
					    break;
					case 1048614:
					case 2:
					    rpn.addXNum ( new org.jmol.script.ScriptVariableInt (this.theToken.intValue));
					    break;
					case 135266319:
					    if (this.tokAt (this.iToken + 1) == 269484048) {
						if (!rpn.addOpAllowMath (this.theToken, true)) this.error (22);
						break;
					    }rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (this.theToken));
					    break;
					case 1087375362:
					case 1087375361:
					case 1048580:
					case 1679429641:
					case 1087373316:
					case 1048582:
					case 1087375365:
					case 1087373318:
					case 1095766028:
					case 1095761934:
					case 1087373320:
					case 1095761938:
					case 135267335:
					case 135267336:
					case 1238369286:
					case 1641025539:
					case 1048589:
					case 1048588:
					case 4:
					case 8:
					case 9:
					case 11:
					case 12:
					case 10:
					case 6:
					    rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (this.theToken));
					    break;
					case 1048583:
					    this.ignoreError = true;
					    var ptc;
					    try {
						ptc = this.centerParameter (i);
						rpn.addXVar (org.jmol.script.ScriptVariable.newVariable (8, ptc));
					    } catch (e) {
						if (Clazz.exceptionOf (e, Exception)) {
						    rpn.addXStr ("");
						} else {
						    throw e;
						}
					    }
					    this.ignoreError = false;
					    i = this.iToken;
					    break;
					case 1048586:
					    if (this.tokAt (i + 1) == 4) v = this.getHash (i);
					    else v = this.getPointOrPlane (i, false, true, true, false, 3, 4);
					    i = this.iToken;
					    break;
					case 1048577:
					    if (this.tokAt (i + 1) == 1048578) {
						v =  new java.util.Hashtable ();
						i++;
						break;
					    } else if (this.tokAt (i + 1) == 1048579 && this.tokAt (i + 2) == 1048578) {
						tok = 1048579;
						this.iToken += 2;
					    }case 1048579:
					    if (tok == 1048579) v = this.viewer.getModelUndeletedAtomsBitSet (-1);
					    else v = this.atomExpression (this.statement, i, 0, true, true, true, true);
					    i = this.iToken;
					    if (nParen == 0 && isOneExpressionOnly) {
						this.iToken++;
						return this.bitsetVariableVector (v);
					    }break;
					case 1073742195:
					    rpn.addOp (this.theToken);
					    continue;
					case 1048578:
					    i++;
					    break out;
					case 1048590:
					    if (!ignoreComma && nParen == 0 && nSquare == 0) break out;
					    this.error (22);
					    break;
					case 269484080:
					    if (!ignoreComma && nParen == 0 && nSquare == 0) {
						break out;
					    }if (!rpn.addOp (this.theToken)) this.error (22);
					    break;
					case 1048584:
					    var token = this.getBitsetPropertySelector (i + 1, false);
					    if (token == null) this.error (22);
					    var isUserFunction = (token.intValue == 135368713);
					    var allowMathFunc = true;
					    var tok2 = this.tokAt (this.iToken + 2);
					    if (this.tokAt (this.iToken + 1) == 1048584) {
						switch (tok2) {
						case 1048579:
						    tok2 = 480;
						    if (this.tokAt (this.iToken + 3) == 1048584 && this.tokAt (this.iToken + 4) == 1276118529) tok2 = 224;
						case 32:
						case 64:
						case 192:
						case 128:
						case 160:
						case 96:
						    allowMathFunc = (isUserFunction || tok2 == 480 || tok2 == 224);
						    token.intValue |= tok2;
						    this.getToken (this.iToken + 2);
						}
					    }allowMathFunc = new Boolean (allowMathFunc & (this.tokAt (this.iToken + 1) == 269484048 || isUserFunction)).valueOf ();
					    if (!rpn.addOpAllowMath (token, allowMathFunc)) this.error (22);
					    i = this.iToken;
					    if (token.intValue == 135368713 && this.tokAt (i + 1) != 269484048) {
						rpn.addOp (org.jmol.script.Token.tokenLeftParen);
						rpn.addOp (org.jmol.script.Token.tokenRightParen);
					    }break;
					default:
					    if (org.jmol.script.Token.tokAttr (this.theTok, 269484032) || org.jmol.script.Token.tokAttr (this.theTok, 135266304) && this.tokAt (this.iToken + 1) == 269484048) {
						if (!rpn.addOp (this.theToken)) {
						    if (ptAtom >= 0) {
							break out;
						    }this.error (22);
						}switch (this.theTok) {
						case 269484048:
						    nParen++;
						    break;
						case 269484049:
						    if (--nParen <= 0 && nSquare == 0 && isOneExpressionOnly) {
							this.iToken++;
							break out;
						    }break;
						case 269484096:
						    nSquare++;
						    break;
						case 269484097:
						    if (--nSquare == 0 && nParen == 0 && isOneExpressionOnly) {
							this.iToken++;
							break out;
						    }break;
						}
					    } else {
						var name = this.parameterAsString (i).toLowerCase ();
						var haveParens = (this.tokAt (i + 1) == 269484048);
						if (this.isSyntaxCheck) {
						    v = name;
						} else if (!haveParens && (localVars == null || (v = localVars.get (name)) == null)) {
						    v = this.getContextVariableAsVariable (name);
						}if (v == null) {
						    if (org.jmol.script.Token.tokAttr (this.theTok, 1073741824) && this.viewer.isFunction (name)) {
							if (!rpn.addOp (org.jmol.script.ScriptVariable.newVariable (135368713, this.theToken.value))) this.error (22);
							if (!haveParens) {
							    rpn.addOp (org.jmol.script.Token.tokenLeftParen);
							    rpn.addOp (org.jmol.script.Token.tokenRightParen);
							}} else {
							    rpn.addXVar (this.viewer.getOrSetNewVariable (name, false));
							}}}}
				    if (v != null) {
					if (Clazz.instanceOf (v, org.jmol.util.BitSet)) rpn.addXBs (v);
					else rpn.addXObj (v);
				    }}
				var result = rpn.getResult (false);
				if (result == null) {
				    if (!this.isSyntaxCheck) rpn.dumpStacks ("null result");
				    this.error (13);
				}if (result.tok == 135198) return result.value;
				if (returnBoolean) return Boolean.$valueOf (result.asBoolean ());
				if (returnString) {
				    if (result.tok == 4) result.intValue = 2147483647;
				    return result.asString ();
				}switch (result.tok) {
				case 1048589:
				case 1048588:
				    return Boolean.$valueOf (result.intValue == 1);
				case 2:
				    return Integer.$valueOf (result.intValue);
				case 10:
				case 3:
				case 4:
				case 8:
				default:
				    return result.value;
				}
			    }, $fz.isPrivate = true, $fz), "~N,~N,~S,~B,~B,~N,~B,java.util.Map,~S");
	Clazz.defineMethod (c$, "getHash", 
			    ($fz = function (i) {
				var ht =  new java.util.Hashtable ();
				for (i = i + 1; i < this.statementLength; i++) {
				    if (this.tokAt (i) == 1048590) break;
				    var key = this.stringParameter (i++);
				    if (this.tokAt (i++) != 269484066) this.error (22);
				    var v = this.parameterExpression (i, 0, null, false, true, -1, false, null, null);
				    ht.put (key, v.get (0));
				    i = this.iToken;
				    if (this.tokAt (i) != 269484080) break;
				}
				this.iToken = i;
				if (this.tokAt (i) != 1048590) this.error (22);
				return ht;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "bitsetVariableVector", 
			    function (v) {
				var resx =  new java.util.ArrayList ();
				if (Clazz.instanceOf (v, org.jmol.util.BitSet)) {
				    resx.add (org.jmol.script.ScriptVariable.newVariable (10, v));
				}return resx;
			    }, "~O");
	Clazz.defineMethod (c$, "getBitsetIdent", 
			    function (bs, label, tokenValue, useAtomMap, index, isExplicitlyAll) {
				var isAtoms = !(Clazz.instanceOf (tokenValue, org.jmol.modelset.Bond.BondSet));
				if (isAtoms) {
				    if (label == null) label = this.viewer.getStandardLabelFormat (0);
				    else if (label.length == 0) label = "%[label]";
				}var pt = (label == null ? -1 : label.indexOf ("%"));
				var haveIndex = (index != 2147483647);
				if (bs == null || this.isSyntaxCheck || isAtoms && pt < 0) {
				    if (label == null) label = "";
				    return isExplicitlyAll ? [label] : label;
				}var modelSet = this.viewer.getModelSet ();
				var n = 0;
				var indices = (isAtoms || !useAtomMap ? null : (tokenValue).getAssociatedAtoms ());
				if (indices == null && label != null && label.indexOf ("%D") > 0) indices = this.viewer.getAtomIndices (bs);
				var asIdentity = (label == null || label.length == 0);
				var htValues = (isAtoms || asIdentity ? null : org.jmol.modelset.LabelToken.getBondLabelValues ());
				var tokens = (asIdentity ? null : isAtoms ? org.jmol.modelset.LabelToken.compile (this.viewer, label, '\0', null) : org.jmol.modelset.LabelToken.compile (this.viewer, label, '\1', htValues));
				var nmax = (haveIndex ? 1 : org.jmol.util.BitSetUtil.cardinalityOf (bs));
				var sout =  new Array (nmax);
				for (var j = (haveIndex ? index : bs.nextSetBit (0)); j >= 0; j = bs.nextSetBit (j + 1)) {
				    var str;
				    if (isAtoms) {
					if (asIdentity) str = modelSet.atoms[j].getInfo ();
					else str = org.jmol.modelset.LabelToken.formatLabelAtomArray (this.viewer, modelSet.atoms[j], tokens, '\0', indices);
				    } else {
					var bond = modelSet.getBondAt (j);
					if (asIdentity) str = bond.getIdentity ();
					else str = org.jmol.modelset.LabelToken.formatLabelBond (this.viewer, bond, tokens, htValues, indices);
				    }str = org.jmol.util.TextFormat.formatStringI (str, "#", (n + 1));
				    sout[n++] = str;
				    if (haveIndex) break;
				}
				return nmax == 1 && !isExplicitlyAll ? sout[0] : sout;
			    }, "org.jmol.util.BitSet,~S,~O,~B,~N,~B");
	Clazz.defineMethod (c$, "getBitsetPropertySelector", 
			    ($fz = function (i, mustBeSettable) {
				var tok = this.getToken (i).tok;
				switch (tok) {
				case 32:
				case 64:
				case 96:
				case 192:
				case 128:
				case 160:
				case 1716520973:
				    break;
				default:
				    if (org.jmol.script.Token.tokAttrOr (tok, 1078984704, 1141899264)) break;
				    if (tok != 806354977 && !org.jmol.script.Token.tokAttr (tok, 1073741824)) return null;
				    var name = this.parameterAsString (i);
				    if (!mustBeSettable && this.viewer.isFunction (name)) {
					tok = 135368713;
					break;
				    }if (!name.endsWith ("?")) return null;
				    tok = 1073741824;
				}
				if (mustBeSettable && !org.jmol.script.Token.tokAttr (tok, 2048)) return null;
				return org.jmol.script.ScriptVariable.newScriptVariableIntValue (269484241, tok, this.parameterAsString (i).toLowerCase ());
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "getBitsetPropertyFloat", 
			    ($fz = function (bs, tok, min, max) {
				var data = this.getBitsetProperty (bs, tok, null, null, null, null, false, 2147483647, false);
				if (!Float.isNaN (min)) for (var i = 0; i < data.length; i++) if (data[i] < min) data[i] = NaN;

				if (!Float.isNaN (max)) for (var i = 0; i < data.length; i++) if (data[i] > max) data[i] = NaN;

				return data;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,~N,~N,~N");
	Clazz.defineMethod (c$, "getBitsetProperty", 
			    function (bs, tok, ptRef, planeRef, tokenValue, opValue, useAtomMap, index, asVectorIfAll) {
				var haveIndex = (index != 2147483647);
				var isAtoms = haveIndex || !(Clazz.instanceOf (tokenValue, org.jmol.modelset.Bond.BondSet));
				var minmaxtype = tok & 480;
				var selectedFloat = (minmaxtype == 224);
				var atomCount = this.viewer.getAtomCount ();
				var fout = (minmaxtype == 256 ?  Clazz.newFloatArray (atomCount, 0) : null);
				var isExplicitlyAll = (minmaxtype == 480 || selectedFloat);
				tok &= -481;
				if (tok == 0) tok = (isAtoms ? 1141899265 : 1678770178);
				var isPt = false;
				var isInt = false;
				var isString = false;
				switch (tok) {
				case 1146095626:
				case 1146095631:
				case 1146095627:
				case 1146095629:
				case 1146093582:
				case 1766856708:
				case 1146095628:
				    isPt = true;
				    break;
				case 135368713:
				case 1276118018:
				    break;
				default:
				    isInt = org.jmol.script.Token.tokAttr (tok, 1095761920) && !org.jmol.script.Token.tokAttr (tok, 1112539136);
				    isString = !isInt && org.jmol.script.Token.tokAttr (tok, 1087373312);
				}
				var zero = (minmaxtype == 256 ?  new org.jmol.util.Point3f () : null);
				var pt = (isPt || !isAtoms ?  new org.jmol.util.Point3f () : null);
				if (isExplicitlyAll || isString && !haveIndex && minmaxtype != 256 && minmaxtype != 32) minmaxtype = 1048579;
				var vout = (minmaxtype == 1048579 ?  new java.util.ArrayList () : null);
				var bsNew = null;
				var userFunction = null;
				var params = null;
				var bsAtom = null;
				var tokenAtom = null;
				var ptT = null;
				var data = null;
				switch (tok) {
				case 1141899265:
				case 1678770178:
				    if (this.isSyntaxCheck) return bs;
				    bsNew = (tok == 1141899265 ? (isAtoms ? bs : this.viewer.getAtomBits (1678770178, bs)) : (isAtoms ?  new org.jmol.modelset.Bond.BondSet (this.viewer.getBondsForSelectedAtoms (bs)) : bs));
				    var i;
				    switch (minmaxtype) {
				    case 32:
					i = bsNew.nextSetBit (0);
					break;
				    case 64:
					i = bsNew.length () - 1;
					break;
				    case 192:
				    case 128:
				    case 160:
					return Float.$valueOf (NaN);
				    default:
					return bsNew;
				    }
				    bsNew.clearAll ();
				    if (i >= 0) bsNew.set (i);
				    return bsNew;
				case 1087373321:
				    switch (minmaxtype) {
				    case 0:
				    case 1048579:
					return this.getBitsetIdent (bs, null, tokenValue, useAtomMap, index, isExplicitlyAll);
				    }
				    return "";
				case 135368713:
				    userFunction = (opValue)[0];
				    params = (opValue)[1];
				    bsAtom = org.jmol.util.BitSetUtil.newBitSet (atomCount);
				    tokenAtom = org.jmol.script.ScriptVariable.newVariable (10, bsAtom);
				    break;
				case 1112539148:
				case 1112539149:
				    this.viewer.autoCalculate (tok);
				    break;
				case 1276118018:
				    if (ptRef == null && planeRef == null) return  new org.jmol.util.Point3f ();
				    break;
				case 1766856708:
				    ptT =  new org.jmol.util.Point3f ();
				    break;
				case 1716520973:
				    data = this.viewer.getDataFloat (opValue);
				    break;
				}
				var n = 0;
				var ivvMinMax = 0;
				var ivMinMax = 0;
				var fvMinMax = 0;
				var sum = 0;
				var sum2 = 0;
				switch (minmaxtype) {
				case 32:
				    ivMinMax = 2147483647;
				    fvMinMax = 3.4028235E38;
				    break;
				case 64:
				    ivMinMax = -2147483648;
				    fvMinMax = -3.4028235E38;
				    break;
				}
				var modelSet = this.viewer.getModelSet ();
				var mode = (isPt ? 3 : isString ? 2 : isInt ? 1 : 0);
				if (isAtoms) {
				    var haveBitSet = (bs != null);
				    var iModel = -1;
				    var i0;
				    var i1;
				    if (haveIndex) {
					i0 = index;
					i1 = index + 1;
				    } else if (haveBitSet) {
					i0 = bs.nextSetBit (0);
					i1 = Math.min (atomCount, bs.length ());
				    } else {
					i0 = 0;
					i1 = atomCount;
				    }if (this.isSyntaxCheck) i1 = 0;
				    for (var i = i0; i >= 0 && i < i1; i = (haveBitSet ? bs.nextSetBit (i + 1) : i + 1)) {
					n++;
					var atom = modelSet.atoms[i];
					switch (mode) {
					case 0:
					    var fv = 3.4028235E38;
					    switch (tok) {
					    case 135368713:
						bsAtom.set (i);
						fv = org.jmol.script.ScriptVariable.fValue (this.runFunctionRet (null, userFunction, params, tokenAtom, true, true));
						bsAtom.clear (i);
						break;
					    case 1716520973:
						fv = (data == null ? 0 : data[i]);
						break;
					    case 1276118018:
						if (planeRef != null) fv = org.jmol.util.Measure.distanceToPlane (planeRef, atom);
						else fv = atom.distance (ptRef);
						break;
					    default:
						fv = org.jmol.modelset.Atom.atomPropertyFloat (this.viewer, atom, tok);
					    }
					    if (fv == 3.4028235E38 || Float.isNaN (fv) && minmaxtype != 1048579) {
						n--;
						continue;
					    }switch (minmaxtype) {
					    case 32:
						if (fv < fvMinMax) fvMinMax = fv;
						break;
					    case 64:
						if (fv > fvMinMax) fvMinMax = fv;
						break;
					    case 256:
						fout[i] = fv;
						break;
					    case 1048579:
						vout.add (Float.$valueOf (fv));
						break;
					    case 160:
					    case 192:
						sum2 += (fv) * fv;
					    case 128:
					    default:
						sum += fv;
					    }
					    break;
					case 1:
					    var iv = 0;
					    switch (tok) {
					    case 1297090050:
						if (atom.getModelIndex () != iModel) iModel = atom.getModelIndex ();
						var bsSym = atom.getAtomSymmetry ();
						if (bsSym == null) break;
						var p = 0;
						switch (minmaxtype) {
						case 32:
						    ivvMinMax = 2147483647;
						    break;
						case 64:
						    ivvMinMax = -2147483648;
						    break;
						}
						for (var k = bsSym.nextSetBit (0); k >= 0; k = bsSym.nextSetBit (k + 1)) {
						    iv += k + 1;
						    switch (minmaxtype) {
						    case 32:
							ivvMinMax = Math.min (ivvMinMax, k + 1);
							break;
						    case 64:
							ivvMinMax = Math.max (ivvMinMax, k + 1);
							break;
						    }
						    p++;
						}
						switch (minmaxtype) {
						case 32:
						case 64:
						    iv = ivvMinMax;
						}
						n += p - 1;
						break;
					    case 1095766022:
					    case 1095761925:
						this.errorStr (45, org.jmol.script.Token.nameOf (tok));
						break;
					    default:
						iv = org.jmol.modelset.Atom.atomPropertyInt (atom, tok);
					    }
					    switch (minmaxtype) {
					    case 32:
						if (iv < ivMinMax) ivMinMax = iv;
						break;
					    case 64:
						if (iv > ivMinMax) ivMinMax = iv;
						break;
					    case 256:
						fout[i] = iv;
						break;
					    case 1048579:
						vout.add (Integer.$valueOf (iv));
						break;
					    case 160:
					    case 192:
						sum2 += (iv) * iv;
					    case 128:
					    default:
						sum += iv;
					    }
					    break;
					case 2:
					    var s = org.jmol.modelset.Atom.atomPropertyString (this.viewer, atom, tok);
					    switch (minmaxtype) {
					    case 256:
						fout[i] = org.jmol.util.Parser.parseFloatStr (s);
						break;
					    default:
						if (vout == null) return s;
						vout.add (s);
					    }
					    break;
					case 3:
					    var t = org.jmol.modelset.Atom.atomPropertyTuple (atom, tok);
					    if (t == null) this.errorStr (45, org.jmol.script.Token.nameOf (tok));
					    switch (minmaxtype) {
					    case 256:
						fout[i] = Math.sqrt (t.x * t.x + t.y * t.y + t.z * t.z);
						break;
					    case 1048579:
						vout.add (org.jmol.util.Point3f.newP (t));
						break;
					    default:
						pt.add (t);
					    }
					    break;
					}
					if (haveIndex) break;
				    }
				} else {
				    var isAll = (bs == null);
				    var i0 = (isAll ? 0 : bs.nextSetBit (0));
				    var i1 = this.viewer.getBondCount ();
				    for (var i = i0; i >= 0 && i < i1; i = (isAll ? i + 1 : bs.nextSetBit (i + 1))) {
					n++;
					var bond = modelSet.getBondAt (i);
					switch (tok) {
					case 1141899267:
					    var fv = bond.getAtom1 ().distance (bond.getAtom2 ());
					    switch (minmaxtype) {
					    case 32:
						if (fv < fvMinMax) fvMinMax = fv;
						break;
					    case 64:
						if (fv > fvMinMax) fvMinMax = fv;
						break;
					    case 1048579:
						vout.add (Float.$valueOf (fv));
						break;
					    case 160:
					    case 192:
						sum2 += fv * fv;
					    case 128:
					    default:
						sum += fv;
					    }
					    break;
					case 1146095626:
					    switch (minmaxtype) {
					    case 1048579:
						pt.setT (bond.getAtom1 ());
						pt.add (bond.getAtom2 ());
						pt.scale (0.5);
						vout.add (org.jmol.util.Point3f.newP (pt));
						break;
					    default:
						pt.add (bond.getAtom1 ());
						pt.add (bond.getAtom2 ());
						n++;
					    }
					    break;
					case 1766856708:
					    org.jmol.util.ColorUtil.colorPointFromInt (this.viewer.getColorArgbOrGray (bond.getColix ()), ptT);
					    switch (minmaxtype) {
					    case 1048579:
						vout.add (org.jmol.util.Point3f.newP (ptT));
						break;
					    default:
						pt.add (ptT);
					    }
					    break;
					default:
					    this.errorStr (46, org.jmol.script.Token.nameOf (tok));
					}
				    }
				}if (minmaxtype == 256) return fout;
				if (minmaxtype == 1048579) {
				    if (asVectorIfAll) return vout;
				    var len = vout.size ();
				    if (isString && !isExplicitlyAll && len == 1) return vout.get (0);
				    if (selectedFloat) {
					fout =  Clazz.newFloatArray (len, 0);
					for (var i = len; --i >= 0; ) {
					    var v = vout.get (i);
					    switch (mode) {
					    case 0:
						fout[i] = (v).floatValue ();
						break;
					    case 1:
						fout[i] = (v).floatValue ();
						break;
					    case 2:
						fout[i] = org.jmol.util.Parser.parseFloatStr (v);
						break;
					    case 3:
						fout[i] = (v).distance (zero);
						break;
					    }
					}
					return fout;
				    }if (tok == 1087373320) {
					var sb =  new org.jmol.util.StringXBuilder ();
					for (var i = 0; i < len; i++) sb.append (vout.get (i));

					return sb.toString ();
				    }var sout =  new Array (len);
				    for (var i = len; --i >= 0; ) {
					var v = vout.get (i);
					if (Clazz.instanceOf (v, org.jmol.util.Point3f)) sout[i] = org.jmol.util.Escape.escapePt (v);
					else sout[i] = "" + vout.get (i);
				    }
				    return sout;
				}if (isPt) return (n == 0 ? pt : org.jmol.util.Point3f.new3 (pt.x / n, pt.y / n, pt.z / n));
				if (n == 0 || n == 1 && minmaxtype == 192) return Float.$valueOf (NaN);
				if (isInt) {
				    switch (minmaxtype) {
				    case 32:
				    case 64:
					return Integer.$valueOf (ivMinMax);
				    case 160:
				    case 192:
					break;
				    case 128:
					return Integer.$valueOf (Clazz.doubleToInt (sum));
				    default:
					if (sum / n == Clazz.doubleToInt (sum / n)) return Integer.$valueOf (Clazz.doubleToInt (sum / n));
					return Float.$valueOf ((sum / n));
				    }
				}switch (minmaxtype) {
				case 32:
				case 64:
				    sum = fvMinMax;
				    break;
				case 128:
				    break;
				case 160:
				    sum = sum2;
				    break;
				case 192:
				    sum = Math.sqrt ((sum2 - sum * sum / n) / (n - 1));
				    break;
				default:
				    sum /= n;
				    break;
				}
				return Float.$valueOf (sum);
			    }, "org.jmol.util.BitSet,~N,org.jmol.util.Point3f,org.jmol.util.Point4f,~O,~O,~B,~N,~B");
	Clazz.defineMethod (c$, "setBitsetProperty", 
			    ($fz = function (bs, tok, iValue, fValue, tokenValue) {
				if (this.isSyntaxCheck || org.jmol.util.BitSetUtil.cardinalityOf (bs) == 0) return;
				var list = null;
				var sValue = null;
				var fvalues = null;
				var pt;
				var sv = null;
				var nValues = 0;
				var isStrProperty = org.jmol.script.Token.tokAttr (tok, 1087373312);
				if (tokenValue.tok == 7) {
				    sv = (tokenValue).getList ();
				    if ((nValues = sv.size ()) == 0) return;
				}switch (tok) {
				case 1146095626:
				case 1146095627:
				case 1146095629:
				case 1146095631:
				    switch (tokenValue.tok) {
				    case 8:
					this.viewer.setAtomCoord (bs, tok, tokenValue.value);
					break;
				    case 7:
					this.theToken = tokenValue;
					this.viewer.setAtomCoord (bs, tok, this.getPointArray (-1, nValues));
					break;
				    }
				    return;
				case 1766856708:
				    var value = null;
				    var prop = "color";
				    switch (tokenValue.tok) {
				    case 7:
					var values =  Clazz.newIntArray (nValues, 0);
					for (var i = nValues; --i >= 0; ) {
					    var svi = sv.get (i);
					    pt = org.jmol.script.ScriptVariable.ptValue (svi);
					    if (pt != null) {
						values[i] = org.jmol.util.ColorUtil.colorPtToInt (pt);
					    } else if (svi.tok == 2) {
						values[i] = svi.intValue;
					    } else {
						values[i] = org.jmol.util.ColorUtil.getArgbFromString (svi.asString ());
						if (values[i] == 0) values[i] = svi.asInt ();
					    }if (values[i] == 0) this.errorStr2 (50, "ARRAY", svi.asString ());
					}
					value = values;
					prop = "colorValues";
					break;
				    case 8:
					value = Integer.$valueOf (org.jmol.util.ColorUtil.colorPtToInt (tokenValue.value));
					break;
				    case 4:
					value = tokenValue.value;
					break;
				    default:
					value = Integer.$valueOf (org.jmol.script.ScriptVariable.iValue (tokenValue));
					break;
				    }
				    this.setShapePropertyBs (0, prop, value, bs);
				    return;
				case 1826248715:
				case 1288701960:
				    if (tokenValue.tok != 7) sValue = org.jmol.script.ScriptVariable.sValue (tokenValue);
				    break;
				case 1087375365:
				case 1095763976:
				    this.clearDefinedVariableAtomSets ();
				    isStrProperty = false;
				    break;
				}
				switch (tokenValue.tok) {
				case 7:
				    if (isStrProperty) list = org.jmol.script.ScriptVariable.listValue (tokenValue);
				    else fvalues = org.jmol.script.ScriptVariable.flistValue (tokenValue, nValues);
				    break;
				case 4:
				    if (sValue == null) list = org.jmol.util.Parser.getTokens (org.jmol.script.ScriptVariable.sValue (tokenValue));
				    break;
				}
				if (list != null) {
				    nValues = list.length;
				    if (!isStrProperty) {
					fvalues =  Clazz.newFloatArray (nValues, 0);
					for (var i = nValues; --i >= 0; ) fvalues[i] = (tok == 1087375365 ? org.jmol.util.Elements.elementNumberFromSymbol (list[i], false) : org.jmol.util.Parser.parseFloatStr (list[i]));

				    }if (tokenValue.tok != 7 && nValues == 1) {
					if (isStrProperty) sValue = list[0];
					else fValue = fvalues[0];
					iValue = Clazz.floatToInt (fValue);
					list = null;
					fvalues = null;
				    }}this.viewer.setAtomProperty (bs, tok, iValue, fValue, sValue, fvalues, list);
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,~N,~N,~N,org.jmol.script.Token");
	Clazz.defineMethod (c$, "getContextVariables", 
			    function () {
				return this.contextVariables;
			    });
	Clazz.defineMethod (c$, "getScript", 
			    function () {
				return this.$script;
			    });
	Clazz.defineMethod (c$, "compileScript", 
			    ($fz = function (filename, strScript, debugCompiler) {
				this.scriptFileName = filename;
				strScript = this.fixScriptPath (strScript, filename);
				this.restoreScriptContext (this.compiler.compile (filename, strScript, false, false, debugCompiler, false), false, false, false);
				this.isStateScript = (this.$script.indexOf ("# Jmol state version ") >= 0);
				this.forceNoAddHydrogens = (this.isStateScript && this.$script.indexOf ("pdbAddHydrogens") < 0);
				var s = this.$script;
				this.pc = this.setScriptExtensions ();
				if (!this.isSyntaxCheck && this.viewer.isScriptEditorVisible () && strScript.indexOf ("\u0001## EDITOR_IGNORE ##") < 0) this.viewer.scriptStatus ("");
				this.$script = s;
				return !this.$error;
			    }, $fz.isPrivate = true, $fz), "~S,~S,~B");
	Clazz.defineMethod (c$, "fixScriptPath", 
			    ($fz = function (strScript, filename) {
				if (filename != null && strScript.indexOf ("$SCRIPT_PATH$") >= 0) {
				    var path = filename;
				    var pt = Math.max (filename.lastIndexOf ("|"), filename.lastIndexOf ("/"));
				    path = path.substring (0, pt + 1);
				    strScript = org.jmol.util.TextFormat.simpleReplace (strScript, "$SCRIPT_PATH$/", path);
				    strScript = org.jmol.util.TextFormat.simpleReplace (strScript, "$SCRIPT_PATH$", path);
				}return strScript;
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "setScriptExtensions", 
			    ($fz = function () {
				var extensions = this.scriptExtensions;
				if (extensions == null) return 0;
				var pt = extensions.indexOf ("##SCRIPT_STEP");
				if (pt >= 0) {
				    this.executionStepping = true;
				}pt = extensions.indexOf ("##SCRIPT_START=");
				if (pt < 0) return 0;
				pt = org.jmol.util.Parser.parseInt (extensions.substring (pt + 15));
				if (pt == -2147483648) return 0;
				for (this.pc = 0; this.pc < this.lineIndices.length; this.pc++) {
				    if (this.lineIndices[this.pc][0] > pt || this.lineIndices[this.pc][1] >= pt) break;
				}
				if (this.pc > 0 && this.pc < this.lineIndices.length && this.lineIndices[this.pc][0] > pt) --this.pc;
				return this.pc;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "runScript", 
			    function (script) {
				if (!this.viewer.isPreviewOnly ()) this.runScriptBuffer (script, this.outputBuffer);
			    }, "~S");
	Clazz.defineMethod (c$, "compileScriptFileInternal", 
			    ($fz = function (filename, localPath, remotePath, scriptPath) {
				if (filename.toLowerCase ().indexOf ("javascript:") == 0) return this.compileScript (filename, this.viewer.jsEval (filename.substring (11)), this.debugScript);
				var data =  new Array (2);
				data[0] = filename;
				if (!this.viewer.getFileAsStringBin (data, 2147483647, false)) {
				    this.setErrorMessage ("io error reading " + data[0] + ": " + data[1]);
				    return false;
				}if (("\n" + data[1]).indexOf ("\nJmolManifest.txt\n") >= 0) {
				    var path;
				    if (filename.endsWith (".all.pngj") || filename.endsWith (".all.png")) {
					path = "|state.spt";
					filename += "|";
				    } else {
					data[0] = filename += "|JmolManifest.txt";
					if (!this.viewer.getFileAsStringBin (data, 2147483647, false)) {
					    this.setErrorMessage ("io error reading " + data[0] + ": " + data[1]);
					    return false;
					}path = org.jmol.io.JmolBinary.getManifestScriptPath (data[1]);
				    }if (path != null && path.length > 0) {
					data[0] = filename = filename.substring (0, filename.lastIndexOf ("|")) + path;
					if (!this.viewer.getFileAsStringBin (data, 2147483647, false)) {
					    this.setErrorMessage ("io error reading " + data[0] + ": " + data[1]);
					    return false;
					}}}this.scriptFileName = filename;
				data[1] = org.jmol.io.JmolBinary.getEmbeddedScript (data[1]);
				var script = this.fixScriptPath (data[1], data[0]);
				if (scriptPath == null) {
				    scriptPath = this.viewer.getFilePath (filename, false);
				    scriptPath = scriptPath.substring (0, Math.max (scriptPath.lastIndexOf ("|"), scriptPath.lastIndexOf ("/")));
				}script = org.jmol.viewer.FileManager.setScriptFileReferences (script, localPath, remotePath, scriptPath);
				return this.compileScript (filename, script, this.debugScript);
			    }, $fz.isPrivate = true, $fz), "~S,~S,~S,~S");
	Clazz.defineMethod (c$, "getParameter", 
			    ($fz = function (key, tokType) {
				var v = this.getContextVariableAsVariable (key);
				if (v == null) v = this.viewer.getParameter (key);
				switch (tokType) {
				case 1073742190:
				    return org.jmol.script.ScriptVariable.getVariable (v);
				case 4:
				    if (!(Clazz.instanceOf (v, java.util.List))) break;
				    var sv = v;
				    var sb =  new org.jmol.util.StringXBuilder ();
				    for (var i = 0; i < sv.size (); i++) sb.append (sv.get (i).asString ()).appendC ('\n');

				    return sb.toString ();
				}
				return (Clazz.instanceOf (v, org.jmol.script.ScriptVariable) ? org.jmol.script.ScriptVariable.oValue (v) : v);
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "getParameterEscaped", 
			    ($fz = function ($var) {
				var v = this.getContextVariableAsVariable ($var);
				return (v == null ? "" + this.viewer.getParameterEscaped ($var) : v.escape ());
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getStringParameter", 
			    ($fz = function ($var, orReturnName) {
				var v = this.getContextVariableAsVariable ($var);
				if (v != null) return v.asString ();
				var val = "" + this.viewer.getParameter ($var);
				return (val.length == 0 && orReturnName ? $var : val);
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "getNumericParameter", 
			    ($fz = function ($var) {
				if ($var.equalsIgnoreCase ("_modelNumber")) {
				    var modelIndex = this.viewer.getCurrentModelIndex ();
				    return Integer.$valueOf (modelIndex < 0 ? 0 : this.viewer.getModelFileNumber (modelIndex));
				}var v = this.getContextVariableAsVariable ($var);
				if (v == null) {
				    var val = this.viewer.getParameter ($var);
				    if (!(Clazz.instanceOf (val, String))) return val;
				    v = org.jmol.script.ScriptVariable.newVariable (4, val);
				}return org.jmol.script.ScriptVariable.nValue (v);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getContextVariableAsVariable", 
			    ($fz = function ($var) {
				if ($var.equals ("expressionBegin")) return null;
				$var = $var.toLowerCase ();
				if (this.contextVariables != null && this.contextVariables.containsKey ($var)) return this.contextVariables.get ($var);
				var context = this.thisContext;
				while (context != null) {
				    if (context.isFunction == true) return null;
				    if (context.contextVariables != null && context.contextVariables.containsKey ($var)) return context.contextVariables.get ($var);
				    context = context.parentContext;
				}
				return null;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getStringObjectAsVariable", 
			    ($fz = function (s, key) {
				if (s == null || s.length == 0) return s;
				var v = org.jmol.script.ScriptVariable.unescapePointOrBitsetAsVariable (s);
				if (Clazz.instanceOf (v, String) && key != null) v = this.viewer.setUserVariable (key, org.jmol.script.ScriptVariable.newVariable (4, v));
				return v;
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "evalFunctionFloat", 
			    function (func, params, values) {
				try {
				    var p = params;
				    for (var i = 0; i < values.length; i++) p.get (i).value =  new Float (values[i]);

				    var f = func;
				    return org.jmol.script.ScriptVariable.fValue (this.runFunctionRet (f, f.name, p, null, true, false));
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					return NaN;
				    } else {
					throw e;
				    }
				}
			    }, "~O,~O,~A");
	Clazz.defineMethod (c$, "runFunctionRet", 
			    function ($function, name, params, tokenAtom, getReturn, setContextPath) {
				if ($function == null) {
				    $function = this.viewer.getFunction (name);
				    if ($function == null) return null;
				    if (setContextPath) this.contextPath += " >> function " + name;
				} else if (setContextPath) {
				    this.contextPath += " >> " + name;
				}this.pushContext (null);
				var isTry = ($function.tok == 364558);
				this.thisContext.isTryCatch = isTry;
				this.thisContext.isFunction = !isTry;
				this.functionName = name;
				if (Clazz.instanceOf ($function, org.jmol.thread.ScriptParallelProcessor)) {
				    {
					this.parallelProcessor = $function;
					this.vProcess = null;
					this.runFunction ($function, params, tokenAtom);
					var sc = this.getScriptContext ();
					if (isTry) {
					    this.contextVariables.put ("_breakval",  new org.jmol.script.ScriptVariableInt (2147483647));
					    this.contextVariables.put ("_errorval", org.jmol.script.ScriptVariable.newVariable (4, ""));
					    this.viewer.resetError ();
					    this.parallelProcessor.addProcess ("try", sc);
					}($function).runAllProcesses (this.viewer, !isTry);
					if (isTry) {
					    var err = this.viewer.getParameter ("_errormessage");
					    if (err.length > 0) {
						this.contextVariables.put ("_errorval", org.jmol.script.ScriptVariable.newVariable (4, err));
						this.viewer.resetError ();
					    }this.contextVariables.put ("_tryret", this.contextVariables.get ("_retval"));
					    this.contextVariables.put ("_retval", org.jmol.script.ScriptVariable.newVariable (0, this.contextVariables));
					}}} else {
					    this.runFunction ($function, params, tokenAtom);
					}var v = (getReturn ? this.getContextVariableAsVariable ("_retval") : null);
				this.popContext (false, false);
				return v;
			    }, "org.jmol.script.ScriptFunction,~S,java.util.List,org.jmol.script.ScriptVariable,~B,~B");
	Clazz.defineMethod (c$, "runFunction", 
			    ($fz = function ($function, params, tokenAtom) {
				this.aatoken = $function.aatoken;
				this.lineNumbers = $function.lineNumbers;
				this.lineIndices = $function.lineIndices;
				this.$script = $function.script;
				this.pc = 0;
				if ($function.names != null) {
				    this.contextVariables =  new java.util.Hashtable ();
				    $function.setVariables (this.contextVariables, params);
				}if (tokenAtom != null) this.contextVariables.put ("_x", tokenAtom);
				if ($function.tok != 364558) this.instructionDispatchLoop (false);
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptFunction,java.util.List,org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "clearDefinedVariableAtomSets", 
			    ($fz = function () {
				this.definedAtomSets.remove ("# variable");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "defineSets", 
			    ($fz = function () {
				if (!this.definedAtomSets.containsKey ("# static")) {
				    for (var i = 0; i < org.jmol.viewer.JmolConstants.predefinedStatic.length; i++) this.defineAtomSet (org.jmol.viewer.JmolConstants.predefinedStatic[i]);

				    this.defineAtomSet ("# static");
				}if (this.definedAtomSets.containsKey ("# variable")) return;
				for (var i = 0; i < org.jmol.viewer.JmolConstants.predefinedVariable.length; i++) this.defineAtomSet (org.jmol.viewer.JmolConstants.predefinedVariable[i]);

				for (var i = org.jmol.util.Elements.elementNumberMax; --i >= 0; ) {
				    var definition = " elemno=" + i;
				    this.defineAtomSet ("@" + org.jmol.util.Elements.elementNameFromNumber (i) + definition);
				    this.defineAtomSet ("@_" + org.jmol.util.Elements.elementSymbolFromNumber (i) + definition);
				}
				for (var i = 4; --i >= 0; ) {
				    var definition = "@" + org.jmol.util.Elements.altElementNameFromIndex (i) + " _e=" + org.jmol.util.Elements.altElementNumberFromIndex (i);
				    this.defineAtomSet (definition);
				}
				for (var i = org.jmol.util.Elements.altElementMax; --i >= 4; ) {
				    var ei = org.jmol.util.Elements.altElementNumberFromIndex (i);
				    var def = " _e=" + ei;
				    var definition = "@_" + org.jmol.util.Elements.altElementSymbolFromIndex (i);
				    this.defineAtomSet (definition + def);
				    definition = "@_" + org.jmol.util.Elements.altIsotopeSymbolFromIndex (i);
				    this.defineAtomSet (definition + def);
				    definition = "@_" + org.jmol.util.Elements.altIsotopeSymbolFromIndex2 (i);
				    this.defineAtomSet (definition + def);
				    definition = "@" + org.jmol.util.Elements.altElementNameFromIndex (i);
				    if (definition.length > 1) this.defineAtomSet (definition + def);
				    var e = org.jmol.util.Elements.getElementNumber (ei);
				    ei = org.jmol.util.Elements.getNaturalIsotope (e);
				    if (ei > 0) {
					def = org.jmol.util.Elements.elementSymbolFromNumber (e);
					this.defineAtomSet ("@_" + def + ei + " _e=" + e);
					this.defineAtomSet ("@_" + ei + def + " _e=" + e);
				    }}
				this.defineAtomSet ("# variable");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "defineAtomSet", 
			    ($fz = function (script) {
				if (script.indexOf ("#") == 0) {
				    this.definedAtomSets.put (script, Boolean.TRUE);
				    return;
				}var sc = this.compiler.compile ("#predefine", script, true, false, false, false);
				if (sc.errorType != null) {
				    this.viewer.scriptStatus ("JmolConstants.java ERROR: predefined set compile error:" + script + "\ncompile error:" + sc.errorMessageUntranslated);
				    return;
				}if (sc.aatoken.length != 1) {
				    this.viewer.scriptStatus ("JmolConstants.java ERROR: predefinition does not have exactly 1 command:" + script);
				    return;
				}var statement = sc.aatoken[0];
				if (statement.length <= 2) {
				    this.viewer.scriptStatus ("JmolConstants.java ERROR: bad predefinition length:" + script);
				    return;
				}var tok = statement[1].tok;
				if (!org.jmol.script.Token.tokAttr (tok, 1073741824) && !org.jmol.script.Token.tokAttr (tok, 3145728)) {
				    this.viewer.scriptStatus ("JmolConstants.java ERROR: invalid variable name:" + script);
				    return;
				}var name = (statement[1].value).toLowerCase ();
				if (name.startsWith ("dynamic_")) name = "!" + name.substring (8);
				this.definedAtomSets.put (name, statement);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "lookupIdentifierValue", 
			    ($fz = function (identifier) {
				var bs = this.lookupValue (identifier, false);
				if (bs != null) return org.jmol.util.BitSetUtil.copy (bs);
				bs = this.getAtomBits (1073741824, identifier);
				return (bs == null ?  new org.jmol.util.BitSet () : bs);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "lookupValue", 
			    ($fz = function (setName, plurals) {
				if (this.isSyntaxCheck) {
				    return  new org.jmol.util.BitSet ();
				}this.defineSets ();
				setName = setName.toLowerCase ();
				var value = this.definedAtomSets.get (setName);
				var isDynamic = false;
				if (value == null) {
				    value = this.definedAtomSets.get ("!" + setName);
				    isDynamic = (value != null);
				}if (Clazz.instanceOf (value, org.jmol.util.BitSet)) return value;
				if (Clazz.instanceOf (value, Array)) {
				    this.pushContext (null);
				    var bs = this.atomExpression (value, -2, 0, true, false, true, true);
				    this.popContext (false, false);
				    if (!isDynamic) this.definedAtomSets.put (setName, bs);
				    return bs;
				}if (plurals) return null;
				var len = setName.length;
				if (len < 5) return null;
				if (setName.charAt (len - 1) != 's') return null;
				if (setName.endsWith ("ies")) setName = setName.substring (0, len - 3) + 'y';
				else setName = setName.substring (0, len - 1);
				return this.lookupValue (setName, true);
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "deleteAtomsInVariables", 
			    function (bsDeleted) {
				for (var entry, $entry = this.definedAtomSets.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
				    var value = entry.getValue ();
				    if (Clazz.instanceOf (value, org.jmol.util.BitSet)) {
					org.jmol.util.BitSetUtil.deleteBits (value, bsDeleted);
					if (!entry.getKey ().startsWith ("!")) this.viewer.setUserVariable ("@" + entry.getKey (), org.jmol.script.ScriptVariable.newVariable (10, value));
				    }}
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setStatement", 
			    ($fz = function (pc) {
				this.statement = this.aatoken[pc];
				this.statementLength = this.statement.length;
				if (this.statementLength == 0) return true;
				var fixed;
				var i;
				var tok;
				for (i = 1; i < this.statementLength; i++) {
				    if (this.statement[i] == null) {
					this.statementLength = i;
					return true;
				    }if (this.statement[i].tok == 1060866) break;
				}
				if (i == this.statementLength) return i == this.statementLength;
				switch (this.statement[0].tok) {
				case 102436:
				case 135368713:
				case 1073741824:
				    if (this.tokAt (1) == 269484048) return true;
				}
				fixed =  new Array (this.statementLength);
				fixed[0] = this.statement[0];
				var isExpression = false;
				var j = 1;
				for (i = 1; i < this.statementLength; i++) {
				    if (this.statement[i] == null) continue;
				    switch (tok = this.getToken (i).tok) {
				    default:
					fixed[j] = this.statement[i];
					break;
				    case 1048577:
				    case 1048578:
					isExpression = (tok == 1048577);
					fixed[j] = this.statement[i];
					break;
				    case 1060866:
					if (++i == this.statementLength) this.error (22);
					var v;
					var forceString = (this.theToken.intValue == 4);
					var s;
					var $var = this.parameterAsString (i);
					var isClauseDefine = (this.tokAt (i) == 1048577);
					var isSetAt = (j == 1 && this.statement[0] === org.jmol.script.Token.tokenSetCmd);
					if (isClauseDefine) {
					    var vt = this.parameterExpressionToken (++i);
					    i = this.iToken;
					    v = (vt.tok == 7 ? vt : org.jmol.script.ScriptVariable.oValue (vt));
					} else {
					    if (this.tokAt (i) == 2) {
						v = this.viewer.getAtomBits (1095763969, Integer.$valueOf (this.statement[i].intValue));
					    } else {
						v = this.getParameter ($var, 0);
					    }if (!isExpression && !isSetAt) isClauseDefine = true;
					}tok = this.tokAt (0);
					forceString = new Boolean (forceString | (org.jmol.script.Token.tokAttr (tok, 20480) || tok == 135271429)).valueOf ();
					if (Clazz.instanceOf (v, org.jmol.script.ScriptVariable)) {
					    fixed[j] = v;
					    if (isExpression && fixed[j].tok == 7) {
						var bs = org.jmol.script.ScriptVariable.getBitSet (v, true);
						fixed[j] = org.jmol.script.ScriptVariable.newVariable (10, bs == null ? org.jmol.script.ScriptEvaluator.getAtomBitSet (this, org.jmol.script.ScriptVariable.sValue (fixed[j])) : bs);
					    }} else if (Clazz.instanceOf (v, Boolean)) {
						fixed[j] = ((v).booleanValue () ? org.jmol.script.Token.tokenOn : org.jmol.script.Token.tokenOff);
					    } else if (Clazz.instanceOf (v, Integer)) {
						fixed[j] = org.jmol.script.Token.newTokenIntVal (2, (v).intValue (), v);
					    } else if (Clazz.instanceOf (v, Float)) {
						fixed[j] = org.jmol.script.Token.newTokenIntVal (3, org.jmol.script.ScriptEvaluator.getFloatEncodedInt ("" + v), v);
					    } else if (Clazz.instanceOf (v, String)) {
						if (!forceString) {
						    if ((tok != 1085443 || j > 1 && this.statement[1].tok != 537022465) && org.jmol.script.Token.tokAttr (tok, 36864)) {
							v = this.getParameter (v, 1073742190);
						    }if (Clazz.instanceOf (v, String)) {
							v = this.getStringObjectAsVariable (v, null);
						    }}if (Clazz.instanceOf (v, org.jmol.script.ScriptVariable)) {
							fixed[j] = v;
						    } else {
							s = v;
							if (isExpression && !forceString) {
							    fixed[j] = org.jmol.script.Token.newTokenObj (10, org.jmol.script.ScriptEvaluator.getAtomBitSet (this, s));
							} else {
							    if (!isExpression) {
							    }tok = (isSetAt ? org.jmol.script.Token.getTokFromName (s) : isClauseDefine || forceString || s.length == 0 || s.indexOf (".") >= 0 || s.indexOf (" ") >= 0 || s.indexOf ("=") >= 0 || s.indexOf (";") >= 0 || s.indexOf ("[") >= 0 || s.indexOf ("{") >= 0 ? 4 : 1073741824);
							    fixed[j] = org.jmol.script.Token.newTokenObj (tok, v);
							}}} else if (Clazz.instanceOf (v, org.jmol.util.BitSet)) {
							    fixed[j] = org.jmol.script.ScriptVariable.newVariable (10, v);
							} else if (Clazz.instanceOf (v, org.jmol.util.Point3f)) {
							    fixed[j] = org.jmol.script.ScriptVariable.newVariable (8, v);
							} else if (Clazz.instanceOf (v, org.jmol.util.Point4f)) {
							    fixed[j] = org.jmol.script.ScriptVariable.newVariable (9, v);
							} else if (Clazz.instanceOf (v, org.jmol.util.Matrix3f)) {
							    fixed[j] = org.jmol.script.ScriptVariable.newVariable (11, v);
							} else if (Clazz.instanceOf (v, org.jmol.util.Matrix4f)) {
							    fixed[j] = org.jmol.script.ScriptVariable.newVariable (12, v);
							} else if (Clazz.instanceOf (v, java.util.Map)) {
							    fixed[j] = org.jmol.script.ScriptVariable.newVariable (6, v);
							} else if (Clazz.instanceOf (v, java.util.List)) {
							    var sv = v;
							    var bs = null;
							    for (var k = 0; k < sv.size (); k++) {
								var svk = sv.get (k);
								if (svk.tok != 10) {
								    bs = null;
								    break;
								}if (bs == null) bs =  new org.jmol.util.BitSet ();
								bs.or (svk.value);
							    }
							    fixed[j] = (bs == null ? org.jmol.script.ScriptVariable.getVariable (v) : org.jmol.script.Token.newTokenObj (10, bs));
							} else {
							    var center = this.getObjectCenter ($var, -2147483648, -2147483648);
							    if (center == null) this.error (22);
							    fixed[j] = org.jmol.script.Token.newTokenObj (8, center);
							}if (isSetAt && !org.jmol.script.Token.tokAttr (fixed[j].tok, 536870912)) this.error (22);
					break;
				    }
				    j++;
				}
				this.statement = fixed;
				for (i = j; i < this.statement.length; i++) this.statement[i] = null;

				this.statementLength = j;
				return true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "clearState", 
			    ($fz = function (tQuiet) {
				this.thisContext = null;
				this.scriptLevel = 0;
				this.setErrorMessage (null);
				this.contextPath = "";
				this.tQuiet = tQuiet;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "pushContext", 
			    function (token) {
				if (this.scriptLevel == 100) this.error (44);
				this.thisContext = this.getScriptContext ();
				this.thisContext.token = token;
				if (token == null) {
				    this.scriptLevel = ++this.thisContext.scriptLevel;
				} else {
				    this.thisContext.scriptLevel = -1;
				    this.contextVariables =  new java.util.Hashtable ();
				    if (token.contextVariables != null) for (var key, $key = token.contextVariables.keySet ().iterator (); $key.hasNext () && ((key = $key.next ()) || true);) org.jmol.script.ScriptCompiler.addContextVariable (this.contextVariables, key);

				}if (this.debugScript || this.isCmdLine_c_or_C_Option) org.jmol.util.Logger.info ("-->>-------------".substring (0, Math.max (17, this.scriptLevel + 5)) + this.scriptLevel + " " + this.scriptFileName + " " + token + " " + this.thisContext);
			    }, "org.jmol.script.ContextToken");
	Clazz.defineMethod (c$, "getScriptContext", 
			    function () {
				var context =  new org.jmol.script.ScriptContext ();
				context.scriptLevel = this.scriptLevel;
				context.parentContext = this.thisContext;
				context.contextPath = this.contextPath;
				context.scriptFileName = this.scriptFileName;
				context.parallelProcessor = this.parallelProcessor;
				context.functionName = this.functionName;
				context.script = this.$script;
				context.lineNumbers = this.lineNumbers;
				context.lineIndices = this.lineIndices;
				context.aatoken = this.aatoken;
				context.statement = this.statement;
				context.statementLength = this.statementLength;
				context.pc = this.pc;
				context.lineEnd = this.lineEnd;
				context.pcEnd = this.pcEnd;
				context.iToken = this.iToken;
				context.outputBuffer = this.outputBuffer;
				context.contextVariables = this.contextVariables;
				context.isStateScript = this.isStateScript;
				context.errorMessage = this.errorMessage;
				context.errorType = this.errorType;
				context.iCommandError = this.iCommandError;
				context.isSyntaxCheck = this.isSyntaxCheck;
				context.executionStepping = this.executionStepping;
				context.executionPaused = this.executionPaused;
				context.scriptExtensions = this.scriptExtensions;
				return context;
			    });
	Clazz.defineMethod (c$, "resume", 
			    function (sc) {
				this.thisContext = sc;
				if (this.thisContext.scriptLevel > 0) this.scriptLevel = this.thisContext.scriptLevel - 1;
				this.restoreScriptContext (this.thisContext, true, false, false);
				this.instructionDispatchLoop (false);
			    }, "org.jmol.script.ScriptContext");
	Clazz.defineMethod (c$, "popContext", 
			    function (isFlowCommand, statementOnly) {
				if (this.thisContext == null) return;
				if (this.thisContext.scriptLevel > 0) this.scriptLevel = this.thisContext.scriptLevel - 1;
				var scTemp = (isFlowCommand ? this.getScriptContext () : null);
				this.restoreScriptContext (this.thisContext, true, isFlowCommand, statementOnly);
				if (scTemp != null) this.restoreScriptContext (scTemp, true, false, true);
				if (this.debugScript || this.isCmdLine_c_or_C_Option) org.jmol.util.Logger.info ("--<<-------------".substring (0, Math.max (17, this.scriptLevel + 5)) + this.scriptLevel + " " + this.scriptFileName + " " + (this.thisContext == null ? "" : "" + this.thisContext.token) + " " + this.thisContext);
			    }, "~B,~B");
	Clazz.defineMethod (c$, "restoreScriptContext", 
			    ($fz = function (context, isPopContext, isFlowCommand, statementOnly) {
				if (context == null) return;
				if (!isFlowCommand) {
				    this.statement = context.statement;
				    this.statementLength = context.statementLength;
				    this.pc = context.pc;
				    this.lineEnd = context.lineEnd;
				    this.pcEnd = context.pcEnd;
				    if (statementOnly) return;
				}this.$script = context.script;
				this.lineNumbers = context.lineNumbers;
				this.lineIndices = context.lineIndices;
				this.aatoken = context.aatoken;
				this.contextVariables = context.contextVariables;
				this.scriptExtensions = context.scriptExtensions;
				if (isPopContext) {
				    this.contextPath = context.contextPath;
				    this.scriptFileName = context.scriptFileName;
				    this.parallelProcessor = context.parallelProcessor;
				    this.functionName = context.functionName;
				    this.iToken = context.iToken;
				    this.outputBuffer = context.outputBuffer;
				    this.isStateScript = context.isStateScript;
				    this.thisContext = context.parentContext;
				} else {
				    this.$error = (context.errorType != null);
				    this.errorMessage = context.errorMessage;
				    this.errorMessageUntranslated = context.errorMessageUntranslated;
				    this.iCommandError = context.iCommandError;
				    this.errorType = context.errorType;
				}}, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptContext,~B,~B,~B");
	Clazz.defineMethod (c$, "getContext", 
			    ($fz = function (withVariables) {
				var sb =  new org.jmol.util.StringXBuilder ();
				var context = this.thisContext;
				while (context != null) {
				    if (withVariables) {
					if (context.contextVariables != null) {
					    sb.append (this.getScriptID (context));
					    sb.append (org.jmol.viewer.StateManager.getVariableList (context.contextVariables, 80, true, false));
					}} else {
					    sb.append (org.jmol.script.ScriptEvaluator.setErrorLineMessage (context.functionName, context.scriptFileName, this.getLinenumber (context), context.pc, org.jmol.script.ScriptEvaluator.statementAsString (context.statement, -9999, this.logMessages)));
					}context = context.parentContext;
				}
				if (withVariables) {
				    if (this.contextVariables != null) {
					sb.append (this.getScriptID (null));
					sb.append (org.jmol.viewer.StateManager.getVariableList (this.contextVariables, 80, true, false));
				    }} else {
					sb.append (org.jmol.script.ScriptEvaluator.setErrorLineMessage (this.functionName, this.scriptFileName, this.getLinenumber (null), this.pc, org.jmol.script.ScriptEvaluator.statementAsString (this.statement, -9999, this.logMessages)));
				    }return sb.toString ();
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getLinenumber", 
			    ($fz = function (c) {
				return (c == null ? this.lineNumbers[this.pc] : c.lineNumbers[c.pc]);
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptContext");
	Clazz.defineMethod (c$, "getScriptID", 
			    ($fz = function (context) {
				var fuName = (context == null ? this.functionName : "function " + context.functionName);
				var fiName = (context == null ? this.scriptFileName : context.scriptFileName);
				return "\n# " + fuName + " (file " + fiName + ")\n";
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptContext");
	Clazz.defineMethod (c$, "getErrorMessage", 
			    function () {
				return this.errorMessage;
			    });
	Clazz.defineMethod (c$, "getErrorMessageUntranslated", 
			    function () {
				return this.errorMessageUntranslated == null ? this.errorMessage : this.errorMessageUntranslated;
			    });
	Clazz.defineMethod (c$, "setErrorMessage", 
			    ($fz = function (err) {
				this.errorMessageUntranslated = null;
				if (err == null) {
				    this.$error = false;
				    this.errorType = null;
				    this.errorMessage = null;
				    this.iCommandError = -1;
				    return;
				}this.$error = true;
				if (this.errorMessage == null) this.errorMessage = org.jmol.i18n.GT._ ("script ERROR: ");
				this.errorMessage += err;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "planeExpected", 
			    ($fz = function () {
				this.errorMore (38, "{a b c d}", "\"xy\" \"xz\" \"yz\" \"x=...\" \"y=...\" \"z=...\"", "$xxxxx");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "integerOutOfRange", 
			    ($fz = function (min, max) {
				this.errorStr2 (21, "" + min, "" + max);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "numberOutOfRange", 
			    ($fz = function (min, max) {
				this.errorStr2 (36, "" + min, "" + max);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "errorAt", 
			    function (iError, i) {
				this.iToken = i;
				this.error (iError, null, null, null, false);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "error", 
			    function (iError) {
				this.error (iError, null, null, null, false);
			    }, "~N");
	Clazz.defineMethod (c$, "errorStr", 
			    function (iError, value) {
				this.error (iError, value, null, null, false);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "errorStr2", 
			    function (iError, value, more) {
				this.error (iError, value, more, null, false);
			    }, "~N,~S,~S");
	Clazz.defineMethod (c$, "errorMore", 
			    function (iError, value, more, more2) {
				this.error (iError, value, more, more2, false);
			    }, "~N,~S,~S,~S");
	Clazz.defineMethod (c$, "warning", 
			    ($fz = function (iError, value, more) {
				this.error (iError, value, more, null, true);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~S");
	Clazz.defineMethod (c$, "error", 
			    function (iError, value, more, more2, warningOnly) {
				var strError = this.ignoreError ? null : org.jmol.script.ScriptEvaluator.errorString (iError, value, more, more2, true);
				var strUntranslated = (!this.ignoreError && org.jmol.i18n.GT.getDoTranslate () ? org.jmol.script.ScriptEvaluator.errorString (iError, value, more, more2, false) : null);
				if (!warningOnly) this.evalError (strError, strUntranslated);
				this.showString (strError);
			    }, "~N,~S,~S,~S,~B");
	Clazz.defineMethod (c$, "evalError", 
			    function (message, strUntranslated) {
				if (this.ignoreError) throw  new NullPointerException ();
				if (!this.isSyntaxCheck) {
				    this.setCursorWait (false);
				    this.viewer.setBooleanProperty ("refreshing", true);
				    this.viewer.setStringProperty ("_errormessage", strUntranslated);
				}throw  new org.jmol.script.ScriptException (this, message, strUntranslated, true);
			    }, "~S,~S");
	c$.errorString = Clazz.defineMethod (c$, "errorString", 
					     function (iError, value, more, more2, translated) {
						 var doTranslate = false;
						 if (!translated && (doTranslate = org.jmol.i18n.GT.getDoTranslate ()) == true) org.jmol.i18n.GT.setDoTranslate (false);
						 var msg;
						 switch (iError) {
						 default:
						     msg = "Unknown error message number: " + iError;
						     break;
						 case 0:
						     msg = org.jmol.i18n.GT._ ("x y z axis expected");
						     break;
						 case 1:
						     msg = org.jmol.i18n.GT._ ("{0} not allowed with background model displayed");
						     break;
						 case 2:
						     msg = org.jmol.i18n.GT._ ("bad argument count");
						     break;
						 case 3:
						     msg = org.jmol.i18n.GT._ ("Miller indices cannot all be zero.");
						     break;
						 case 4:
						     msg = org.jmol.i18n.GT._ ("bad [R,G,B] color");
						     break;
						 case 5:
						     msg = org.jmol.i18n.GT._ ("boolean expected");
						     break;
						 case 6:
						     msg = org.jmol.i18n.GT._ ("boolean or number expected");
						     break;
						 case 7:
						     msg = org.jmol.i18n.GT._ ("boolean, number, or {0} expected");
						     break;
						 case 56:
						     msg = org.jmol.i18n.GT._ ("cannot set value");
						     break;
						 case 8:
						     msg = org.jmol.i18n.GT._ ("color expected");
						     break;
						 case 9:
						     msg = org.jmol.i18n.GT._ ("a color or palette name (Jmol, Rasmol) is required");
						     break;
						 case 10:
						     msg = org.jmol.i18n.GT._ ("command expected");
						     break;
						 case 11:
						     msg = org.jmol.i18n.GT._ ("{x y z} or $name or (atom expression) required");
						     break;
						 case 12:
						     msg = org.jmol.i18n.GT._ ("draw object not defined");
						     break;
						 case 13:
						     msg = org.jmol.i18n.GT._ ("unexpected end of script command");
						     break;
						 case 14:
						     msg = org.jmol.i18n.GT._ ("valid (atom expression) expected");
						     break;
						 case 15:
						     msg = org.jmol.i18n.GT._ ("(atom expression) or integer expected");
						     break;
						 case 16:
						     msg = org.jmol.i18n.GT._ ("filename expected");
						     break;
						 case 17:
						     msg = org.jmol.i18n.GT._ ("file not found");
						     break;
						 case 18:
						     msg = org.jmol.i18n.GT._ ("incompatible arguments");
						     break;
						 case 19:
						     msg = org.jmol.i18n.GT._ ("insufficient arguments");
						     break;
						 case 20:
						     msg = org.jmol.i18n.GT._ ("integer expected");
						     break;
						 case 21:
						     msg = org.jmol.i18n.GT._ ("integer out of range ({0} - {1})");
						     break;
						 case 22:
						     msg = org.jmol.i18n.GT._ ("invalid argument");
						     break;
						 case 23:
						     msg = org.jmol.i18n.GT._ ("invalid parameter order");
						     break;
						 case 24:
						     msg = org.jmol.i18n.GT._ ("keyword expected");
						     break;
						 case 25:
						     msg = org.jmol.i18n.GT._ ("no MO coefficient data available");
						     break;
						 case 26:
						     msg = org.jmol.i18n.GT._ ("An MO index from 1 to {0} is required");
						     break;
						 case 27:
						     msg = org.jmol.i18n.GT._ ("no MO basis/coefficient data available for this frame");
						     break;
						 case 28:
						     msg = org.jmol.i18n.GT._ ("no MO occupancy data available");
						     break;
						 case 29:
						     msg = org.jmol.i18n.GT._ ("Only one molecular orbital is available in this file");
						     break;
						 case 30:
						     msg = org.jmol.i18n.GT._ ("{0} require that only one model be displayed");
						     break;
						 case 55:
						     msg = org.jmol.i18n.GT._ ("{0} requires that only one model be loaded");
						     break;
						 case 31:
						     msg = org.jmol.i18n.GT._ ("No data available");
						     break;
						 case 32:
						     msg = org.jmol.i18n.GT._ ("No partial charges were read from the file; Jmol needs these to render the MEP data.");
						     break;
						 case 33:
						     msg = org.jmol.i18n.GT._ ("No unit cell");
						     break;
						 case 34:
						     msg = org.jmol.i18n.GT._ ("number expected");
						     break;
						 case 35:
						     msg = org.jmol.i18n.GT._ ("number must be ({0} or {1})");
						     break;
						 case 36:
						     msg = org.jmol.i18n.GT._ ("decimal number out of range ({0} - {1})");
						     break;
						 case 37:
						     msg = org.jmol.i18n.GT._ ("object name expected after '$'");
						     break;
						 case 38:
						     msg = org.jmol.i18n.GT._ ("plane expected -- either three points or atom expressions or {0} or {1} or {2}");
						     break;
						 case 39:
						     msg = org.jmol.i18n.GT._ ("property name expected");
						     break;
						 case 40:
						     msg = org.jmol.i18n.GT._ ("space group {0} was not found.");
						     break;
						 case 41:
						     msg = org.jmol.i18n.GT._ ("quoted string expected");
						     break;
						 case 42:
						     msg = org.jmol.i18n.GT._ ("quoted string or identifier expected");
						     break;
						 case 43:
						     msg = org.jmol.i18n.GT._ ("too many rotation points were specified");
						     break;
						 case 44:
						     msg = org.jmol.i18n.GT._ ("too many script levels");
						     break;
						 case 45:
						     msg = org.jmol.i18n.GT._ ("unrecognized atom property");
						     break;
						 case 46:
						     msg = org.jmol.i18n.GT._ ("unrecognized bond property");
						     break;
						 case 47:
						     msg = org.jmol.i18n.GT._ ("unrecognized command");
						     break;
						 case 48:
						     msg = org.jmol.i18n.GT._ ("runtime unrecognized expression");
						     break;
						 case 49:
						     msg = org.jmol.i18n.GT._ ("unrecognized object");
						     break;
						 case 50:
						     msg = org.jmol.i18n.GT._ ("unrecognized {0} parameter");
						     break;
						 case 51:
						     msg = org.jmol.i18n.GT._ ("unrecognized {0} parameter in Jmol state script (set anyway)");
						     break;
						 case 52:
						     msg = org.jmol.i18n.GT._ ("unrecognized SHOW parameter --  use {0}");
						     break;
						 case 53:
						     msg = "{0}";
						     break;
						 case 54:
						     msg = org.jmol.i18n.GT._ ("write what? {0} or {1} \"filename\"");
						     break;
						 }
						 if (msg.indexOf ("{0}") < 0) {
						     if (value != null) msg += ": " + value;
						 } else {
						     msg = org.jmol.util.TextFormat.simpleReplace (msg, "{0}", value);
						     if (msg.indexOf ("{1}") >= 0) msg = org.jmol.util.TextFormat.simpleReplace (msg, "{1}", more);
						     else if (more != null) msg += ": " + more;
						     if (msg.indexOf ("{2}") >= 0) msg = org.jmol.util.TextFormat.simpleReplace (msg, "{2}", more);
						 }if (doTranslate) org.jmol.i18n.GT.setDoTranslate (true);
						 return msg;
					     }, "~N,~S,~S,~S,~B");
	c$.setErrorLineMessage = Clazz.defineMethod (c$, "setErrorLineMessage", 
						     function (functionName, filename, lineCurrent, pcCurrent, lineInfo) {
							 var err = "\n----";
							 if (filename != null || functionName != null) err += "line " + lineCurrent + " command " + (pcCurrent + 1) + " of " + (functionName == null ? filename : functionName.equals ("try") ? "try" : "function " + functionName) + ":";
							 err += "\n         " + lineInfo;
							 return err;
						     }, "~S,~S,~N,~N,~S");
	Clazz.defineMethod (c$, "toString", 
			    function () {
				var str =  new org.jmol.util.StringXBuilder ();
				str.append ("Eval\n pc:");
				str.appendI (this.pc);
				str.append ("\n");
				str.appendI (this.aatoken.length);
				str.append (" statements\n");
				for (var i = 0; i < this.aatoken.length; ++i) {
				    str.append ("----\n");
				    var atoken = this.aatoken[i];
				    for (var j = 0; j < atoken.length; ++j) {
					str.appendO (atoken[j]);
					str.appendC ('\n');
				    }
				    str.appendC ('\n');
				}
				str.append ("END\n");
				return str.toString ();
			    });
	c$.statementAsString = Clazz.defineMethod (c$, "statementAsString", 
						   function (statement, iTok, doLogMessages) {
						       if (statement.length == 0) return "";
						       var sb =  new org.jmol.util.StringXBuilder ();
						       var tok = statement[0].tok;
						       switch (tok) {
						       case 0:
							   return statement[0].value;
						       case 1150985:
							   if (statement.length == 2 && (statement[1].tok == 135368713 || statement[1].tok == 102436)) return ((statement[1].value)).toString ();
						       }
						       var useBraces = true;
						       var inBrace = false;
						       var inClauseDefine = false;
						       var setEquals = (statement.length > 1 && tok == 1085443 && statement[0].value.equals ("") && (statement[0].intValue == 61 || statement[0].intValue == 35) && statement[1].tok != 1048577);
						       var len = statement.length;
						       for (var i = 0; i < len; ++i) {
							   var token = statement[i];
							   if (token == null) {
							       len = i;
							       break;
							   }if (iTok == i - 1) sb.append (" <<");
							   if (i != 0) sb.appendC (' ');
							   if (i == 2 && setEquals) {
							       if ((setEquals = (token.tok != 269484436)) || statement[0].intValue == 35) {
								   sb.append (setEquals ? "= " : "== ");
								   if (!setEquals) continue;
							       }}if (iTok == i && token.tok != 1048578) sb.append (">> ");
							   switch (token.tok) {
							   case 1048577:
							       if (useBraces) sb.append ("{");
							       continue;
							   case 1048578:
							       if (inClauseDefine && i == statement.length - 1) useBraces = false;
							       if (useBraces) sb.append ("}");
							       continue;
							   case 269484096:
							   case 269484097:
							       break;
							   case 1048586:
							   case 1048590:
							       inBrace = (token.tok == 1048586);
							       break;
							   case 1060866:
							       if (i > 0 && (token.value).equals ("define")) {
								   sb.append ("@");
								   if (i + 1 < statement.length && statement[i + 1].tok == 1048577) {
								       if (!useBraces) inClauseDefine = true;
								       useBraces = true;
								   }continue;
							       }break;
							   case 1048589:
							       sb.append ("true");
							       continue;
							   case 1048588:
							       sb.append ("false");
							       continue;
							   case 135280132:
							       break;
							   case 2:
							       sb.appendI (token.intValue);
							       continue;
							   case 8:
							   case 9:
							   case 10:
							       sb.append (org.jmol.script.ScriptVariable.sValue (token));
							       continue;
							   case 7:
							   case 6:
							       sb.append ((token).escape ());
							       continue;
							   case 5:
							       sb.appendC ('^');
							       continue;
							   case 1048615:
							       if (token.intValue != 2147483647) sb.appendI (token.intValue);
							       else sb.append (org.jmol.modelset.Group.getSeqcodeString (org.jmol.script.ScriptEvaluator.getSeqCode (token)));
							       token = statement[++i];
							       sb.appendC (' ');
							       sb.append (inBrace ? "-" : "- ");
							   case 1048614:
							       if (token.intValue != 2147483647) sb.appendI (token.intValue);
							       else sb.append (org.jmol.modelset.Group.getSeqcodeString (org.jmol.script.ScriptEvaluator.getSeqCode (token)));
							       continue;
							   case 1048609:
							       sb.append ("*:");
							       sb.appendC (String.fromCharCode (token.intValue));
							       continue;
							   case 1048607:
							       sb.append ("*%");
							       if (token.value != null) sb.append (token.value.toString ());
							       continue;
							   case 1048610:
							       sb.append ("*/");
							   case 1048611:
							   case 3:
							       if (token.intValue < 2147483647) {
								   sb.append (org.jmol.util.Escape.escapeModelFileNumber (token.intValue));
							       } else {
								   sb.append ("" + token.value);
							       }continue;
							   case 1048613:
							       sb.appendC ('[');
							       sb.append (org.jmol.modelset.Group.getGroup3 (token.intValue));
							       sb.appendC (']');
							       continue;
							   case 1048612:
							       sb.appendC ('[');
							       sb.appendO (token.value);
							       sb.appendC (']');
							       continue;
							   case 1048608:
							       sb.append ("*.");
							       break;
							   case 1095761925:
							       if (Clazz.instanceOf (token.value, org.jmol.util.Point3f)) {
								   var pt = token.value;
								   sb.append ("cell=").append (org.jmol.util.Escape.escapePt (pt));
								   continue;
							       }break;
							   case 4:
							       sb.append ("\"").appendO (token.value).append ("\"");
							       continue;
							   case 269484436:
							   case 269484434:
							   case 269484433:
							   case 269484432:
							   case 269484435:
							   case 269484438:
							       if (token.intValue == 1716520973) {
								   sb.append (statement[++i].value).append (" ");
							       } else if (token.intValue != 2147483647) sb.append (org.jmol.script.Token.nameOf (token.intValue)).append (" ");
							       break;
							   case 364558:
							       continue;
							   case 1150985:
							       sb.append ("end");
							       continue;
							   default:
							       if (org.jmol.script.Token.tokAttr (token.tok, 1073741824) || !doLogMessages) break;
							       sb.appendC ('\n').append (token.toString ()).appendC ('\n');
							       continue;
							   }
							   if (token.value != null) sb.append (token.value.toString ());
						       }
						       if (iTok >= len - 1 && iTok != 9999) sb.append (" <<");
						       return sb.toString ();
						   }, "~A,~N,~B");
	Clazz.defineMethod (c$, "getShapeProperty", 
			    ($fz = function (shapeType, propertyName) {
				return this.shapeManager.getShapePropertyIndex (shapeType, propertyName, -2147483648);
			    }, $fz.isPrivate = true, $fz), "~N,~S");
	Clazz.defineMethod (c$, "getShapePropertyData", 
			    ($fz = function (shapeType, propertyName, data) {
				return this.shapeManager.getShapePropertyData (shapeType, propertyName, data);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~A");
	Clazz.defineMethod (c$, "getShapePropertyIndex", 
			    ($fz = function (shapeType, propertyName, index) {
				return this.shapeManager.getShapePropertyIndex (shapeType, propertyName, index);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~N");
	Clazz.defineMethod (c$, "addShapeProperty", 
			    ($fz = function (propertyList, key, value) {
				if (this.isSyntaxCheck) return;
				propertyList.add ([key, value]);
			    }, $fz.isPrivate = true, $fz), "java.util.List,~S,~O");
	Clazz.defineMethod (c$, "setObjectMad", 
			    ($fz = function (iShape, name, mad) {
				if (this.isSyntaxCheck) return;
				this.viewer.setObjectMad (iShape, name, mad);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~N");
	Clazz.defineMethod (c$, "setObjectArgb", 
			    ($fz = function (str, argb) {
				if (this.isSyntaxCheck) return;
				this.viewer.setObjectArgb (str, argb);
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "setShapeProperty", 
			    ($fz = function (shapeType, propertyName, propertyValue) {
				if (this.isSyntaxCheck) return;
				this.shapeManager.setShapePropertyBs (shapeType, propertyName, propertyValue, null);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~O");
	Clazz.defineMethod (c$, "setShapePropertyBs", 
			    ($fz = function (iShape, propertyName, propertyValue, bs) {
				if (this.isSyntaxCheck) return;
				this.shapeManager.setShapePropertyBs (iShape, propertyName, propertyValue, bs);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapeSizeBs", 
			    ($fz = function (shapeType, size, bs) {
				if (this.isSyntaxCheck) return;
				this.shapeManager.setShapeSizeBs (shapeType, size, null, bs);
			    }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapeSize", 
			    ($fz = function (shapeType, rd) {
				if (this.isSyntaxCheck) return;
				this.shapeManager.setShapeSizeBs (shapeType, 0, rd, null);
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.atomdata.RadiusData");
	Clazz.defineMethod (c$, "setBooleanProperty", 
			    ($fz = function (key, value) {
				if (!this.isSyntaxCheck) this.viewer.setBooleanProperty (key, value);
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "setIntProperty", 
			    ($fz = function (key, value) {
				if (!this.isSyntaxCheck) this.viewer.setIntProperty (key, value);
				return true;
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "setFloatProperty", 
			    ($fz = function (key, value) {
				if (!this.isSyntaxCheck) this.viewer.setFloatProperty (key, value);
				return true;
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "setStringProperty", 
			    ($fz = function (key, value) {
				if (!this.isSyntaxCheck) this.viewer.setStringProperty (key, value);
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "showString", 
			    ($fz = function (str) {
				this.showStringPrint (str, false);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "showStringPrint", 
			    ($fz = function (str, isPrint) {
				if (this.isSyntaxCheck || str == null) return;
				if (this.outputBuffer != null) this.outputBuffer.append (str).appendC ('\n');
				else this.viewer.showString (str, isPrint);
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "scriptStatusOrBuffer", 
			    ($fz = function (s) {
				if (this.isSyntaxCheck) return;
				if (this.outputBuffer != null) {
				    this.outputBuffer.append (s).appendC ('\n');
				    return;
				}this.viewer.scriptStatus (s);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "atomExpressionAt", 
			    ($fz = function (index) {
				if (!this.checkToken (index)) this.errorAt (2, index);
				return this.atomExpression (this.statement, index, 0, true, false, true, true);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "atomExpression", 
			    ($fz = function (code, pcStart, pcStop, allowRefresh, allowUnderflow, mustBeBitSet, andNotDeleted) {
				this.isBondSet = false;
				if (code !== this.statement) {
				    this.tempStatement = this.statement;
				    this.statement = code;
				}var rpn =  new org.jmol.script.ScriptMathProcessor (this, false, false, mustBeBitSet);
				var val;
				var comparisonValue = 2147483647;
				var refreshed = false;
				this.iToken = 1000;
				var ignoreSubset = (pcStart < 0);
				var isInMath = false;
				var nExpress = 0;
				var atomCount = this.viewer.getAtomCount ();
				if (ignoreSubset) pcStart = -pcStart;
				ignoreSubset = new Boolean (ignoreSubset | this.isSyntaxCheck).valueOf ();
				if (pcStop == 0 && code.length > pcStart) pcStop = pcStart + 1;
				expression_loop : for (var pc = pcStart; pc < pcStop; ++pc) {
				    this.iToken = pc;
				    var instruction = code[pc];
				    if (instruction == null) break;
				    var value = instruction.value;
				    switch (instruction.tok) {
				    case 1048577:
					pcStart = pc;
					pcStop = code.length;
					nExpress++;
					break;
				    case 1048578:
					nExpress--;
					if (nExpress > 0) continue;
					break expression_loop;
				    case 1048586:
					if (this.isPoint3f (pc)) {
					    var pt = this.getPoint3f (pc, true);
					    if (pt != null) {
						rpn.addXPt (pt);
						pc = this.iToken;
						break;
					    }}break;
				    case 1048590:
					if (pc > 0 && code[pc - 1].tok == 1048586) rpn.addXBs ( new org.jmol.util.BitSet ());
					break;
				    case 269484096:
					isInMath = true;
					rpn.addOp (instruction);
					break;
				    case 269484097:
					isInMath = false;
					rpn.addOp (instruction);
					break;
				    case 1060866:
					rpn.addXBs (org.jmol.script.ScriptEvaluator.getAtomBitSet (this, value));
					break;
				    case 135267841:
					rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (instruction));
					rpn.addXVar (org.jmol.script.ScriptVariable.newVariable (9, this.hklParameter (pc + 2)));
					pc = this.iToken;
					break;
				    case 135266319:
					rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (instruction));
					rpn.addXVar (org.jmol.script.ScriptVariable.newVariable (9, this.planeParameter (pc + 2)));
					pc = this.iToken;
					break;
				    case 1048582:
					rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (instruction));
					rpn.addXPt (this.getPoint3f (pc + 2, true));
					pc = this.iToken;
					break;
				    case 4:
					var s = value;
					if (s.indexOf ("({") == 0) {
					    var bs = org.jmol.util.Escape.unescapeBitset (s);
					    if (bs != null) {
						rpn.addXBs (bs);
						break;
					    }}rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (instruction));
					if (s.equals ("hkl")) {
					    rpn.addXVar (org.jmol.script.ScriptVariable.newVariable (9, this.hklParameter (pc + 2)));
					    pc = this.iToken;
					}break;
				    case 135267336:
				    case 135267335:
				    case 1238369286:
				    case 135266324:
				    case 135402505:
				    case 135266310:
				    case 269484080:
					rpn.addOp (instruction);
					break;
				    case 1048579:
					rpn.addXBs (this.viewer.getModelUndeletedAtomsBitSet (-1));
					break;
				    case 1048587:
					rpn.addXBs ( new org.jmol.util.BitSet ());
					break;
				    case 1048589:
				    case 1048588:
					rpn.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (instruction));
					break;
				    case 1114638350:
					rpn.addXBs (org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSet (false)));
					break;
				    case 3158024:
					var bsSubset = this.viewer.getSelectionSubset ();
					rpn.addXBs (bsSubset == null ? this.viewer.getModelUndeletedAtomsBitSet (-1) : org.jmol.util.BitSetUtil.copy (bsSubset));
					break;
				    case 3145770:
					rpn.addXBs (org.jmol.util.BitSetUtil.copy (this.viewer.getHiddenSet ()));
					break;
				    case 1060869:
					rpn.addXBs (org.jmol.util.BitSetUtil.copy (this.viewer.getMotionFixedAtoms ()));
					break;
				    case 3145768:
					rpn.addXBs (org.jmol.util.BitSetUtil.copyInvert (this.viewer.getHiddenSet (), atomCount));
					break;
				    case 3145776:
					rpn.addXBs (this.viewer.getBaseModelBitSet ());
					break;
				    case 3145774:
					if (!this.isSyntaxCheck && !refreshed) this.viewer.setModelVisibility ();
					refreshed = true;
					rpn.addXBs (this.viewer.getVisibleSet ());
					break;
				    case 3145766:
					if (!this.isSyntaxCheck && allowRefresh) this.refresh ();
					rpn.addXBs (this.viewer.getClickableSet ());
					break;
				    case 1048608:
					if (this.viewer.allowSpecAtom ()) {
					    var atomID = instruction.intValue;
					    if (atomID > 0) rpn.addXBs (this.compareInt (1095761922, 269484436, atomID));
					    else rpn.addXBs (this.getAtomBits (instruction.tok, value));
					} else {
					    rpn.addXBs (this.lookupIdentifierValue ("_" + value));
					}break;
				    case 3145764:
				    case 3145732:
				    case 1613758470:
				    case 1048585:
				    case 3145742:
				    case 3145744:
				    case 3145746:
				    case 3145748:
				    case 3145750:
				    case 1048612:
				    case 1048607:
				    case 3145772:
				    case 1089470478:
				    case 1614417948:
					rpn.addXBs (this.getAtomBits (instruction.tok, value));
					break;
				    case 1048610:
				    case 1048611:
					var iModel = instruction.intValue;
					if (iModel == 2147483647 && Clazz.instanceOf (value, Integer)) {
					    iModel = (value).intValue ();
					    if (!this.viewer.haveFileSet ()) {
						rpn.addXBs (this.getAtomBits (1048610, Integer.$valueOf (iModel)));
						break;
					    }if (iModel <= 2147) iModel = iModel * 1000000;
					}rpn.addXBs (this.bitSetForModelFileNumber (iModel));
					break;
				    case 1048613:
				    case 1048609:
					rpn.addXBs (this.getAtomBits (instruction.tok,  new Integer (instruction.intValue)));
					break;
				    case 1048614:
					if (isInMath) rpn.addXNum ( new org.jmol.script.ScriptVariableInt (instruction.intValue));
					else rpn.addXBs (this.getAtomBits (1048614,  new Integer (org.jmol.script.ScriptEvaluator.getSeqCode (instruction))));
					break;
				    case 1048615:
					if (isInMath) {
					    rpn.addXNum ( new org.jmol.script.ScriptVariableInt (instruction.intValue));
					    rpn.addOp (org.jmol.script.Token.tokenMinus);
					    rpn.addXNum ( new org.jmol.script.ScriptVariableInt (code[++pc].intValue));
					    break;
					}var chainID = (pc + 3 < code.length && code[pc + 2].tok == 269484160 && code[pc + 3].tok == 1048609 ? code[pc + 3].intValue : 9);
					rpn.addXBs (this.getAtomBits (1048615, [org.jmol.script.ScriptEvaluator.getSeqCode (instruction), org.jmol.script.ScriptEvaluator.getSeqCode (code[++pc]), chainID]));
					if (chainID != 9) pc += 2;
					break;
				    case 1095761925:
					var pt = value;
					rpn.addXBs (this.getAtomBits (1095761925, [Clazz.doubleToInt (Math.floor (pt.x * 1000)), Clazz.doubleToInt (Math.floor (pt.y * 1000)), Clazz.doubleToInt (Math.floor (pt.z * 1000))]));
					break;
				    case 3145758:
					rpn.addXBs (this.viewer.getModelUndeletedAtomsBitSet (this.viewer.getCurrentModelIndex ()));
					break;
				    case 1613758476:
				    case 3145730:
				    case 1115297793:
				    case 1613758488:
				    case 137363468:
				    case 3145735:
				    case 3145736:
				    case 3145738:
				    case 3145754:
				    case 3145756:
					rpn.addXBs (this.lookupIdentifierValue (value));
					break;
				    case 269484435:
				    case 269484434:
				    case 269484433:
				    case 269484432:
				    case 269484436:
				    case 269484438:
					if (pc + 1 == code.length) this.error (22);
					val = code[++pc].value;
					var tokOperator = instruction.tok;
					var tokWhat = instruction.intValue;
					var property = (tokWhat == 1716520973 ? val : null);
					if (property != null) {
					    if (pc + 1 == code.length) this.error (22);
					    val = code[++pc].value;
					}if (tokWhat == 1095766022 && tokOperator != 269484436) this.error (22);
					if (this.isSyntaxCheck) {
					    rpn.addXBs ( new org.jmol.util.BitSet ());
					    break;
					}var isModel = (tokWhat == 1095766028);
					var isIntProperty = org.jmol.script.Token.tokAttr (tokWhat, 1095761920);
					var isFloatProperty = org.jmol.script.Token.tokAttr (tokWhat, 1112539136);
					var isIntOrFloat = isIntProperty && isFloatProperty;
					var isStringProperty = !isIntProperty && org.jmol.script.Token.tokAttr (tokWhat, 1087373312);
					if (tokWhat == 1087375365) isIntProperty = !(isStringProperty = false);
					var tokValue = code[pc].tok;
					comparisonValue = code[pc].intValue;
					var comparisonFloat = NaN;
					if (Clazz.instanceOf (val, org.jmol.util.Point3f)) {
					    if (tokWhat == 1766856708) {
						comparisonValue = org.jmol.util.ColorUtil.colorPtToInt (val);
						tokValue = 2;
						isIntProperty = true;
					    }} else if (Clazz.instanceOf (val, String)) {
						if (tokWhat == 1766856708) {
						    comparisonValue = org.jmol.util.ColorUtil.getArgbFromString (val);
						    if (comparisonValue == 0 && org.jmol.script.Token.tokAttr (tokValue, 1073741824)) {
							val = this.getStringParameter (val, true);
							if ((val).startsWith ("{")) {
							    val = org.jmol.util.Escape.unescapePoint (val);
							    if (Clazz.instanceOf (val, org.jmol.util.Point3f)) comparisonValue = org.jmol.util.ColorUtil.colorPtToInt (val);
							    else comparisonValue = 0;
							} else {
							    comparisonValue = org.jmol.util.ColorUtil.getArgbFromString (val);
							}}tokValue = 2;
						    isIntProperty = true;
						} else if (isStringProperty) {
						    if (org.jmol.script.Token.tokAttr (tokValue, 1073741824)) val = this.getStringParameter (val, true);
						} else {
						    if (org.jmol.script.Token.tokAttr (tokValue, 1073741824)) val = this.getNumericParameter (val);
						    if (Clazz.instanceOf (val, String)) {
							if (tokWhat == 1641025539 || tokWhat == 1238369286 || tokWhat == 1087375365) isStringProperty = !(isIntProperty = (comparisonValue != 2147483647));
							else val = org.jmol.script.ScriptVariable.nValue (code[pc]);
						    }if (Clazz.instanceOf (val, Integer)) comparisonFloat = comparisonValue = (val).intValue ();
						    else if (Clazz.instanceOf (val, Float) && isModel) comparisonValue = org.jmol.modelset.ModelCollection.modelFileNumberFromFloat ((val).floatValue ());
						}}if (isStringProperty && !(Clazz.instanceOf (val, String))) {
						    val = "" + val;
						}if (Clazz.instanceOf (val, Integer) || tokValue == 2) {
						    if (isModel) {
							if (comparisonValue >= 1000000) tokWhat = -1095766028;
						    } else if (isIntOrFloat) {
							isFloatProperty = false;
						    } else if (isFloatProperty) {
							comparisonFloat = comparisonValue;
						    }} else if (Clazz.instanceOf (val, Float)) {
							if (isModel) {
							    tokWhat = -1095766028;
							} else {
							    comparisonFloat = (val).floatValue ();
							    if (isIntOrFloat) {
								isIntProperty = false;
							    } else if (isIntProperty) {
								comparisonValue = Clazz.floatToInt (comparisonFloat);
							    }}} else if (!isStringProperty) {
								this.iToken++;
								this.error (22);
							    }if (isModel && comparisonValue >= 1000000 && comparisonValue % 1000000 == 0) {
								comparisonValue /= 1000000;
								tokWhat = 1229984263;
								isModel = false;
							    }if (tokWhat == -1095766028 && tokOperator == 269484436) {
								rpn.addXBs (this.bitSetForModelFileNumber (comparisonValue));
								break;
							    }if (value != null && (value).indexOf ("-") >= 0) {
								if (isIntProperty) comparisonValue = -comparisonValue;
								else if (!Float.isNaN (comparisonFloat)) comparisonFloat = -comparisonFloat;
							    }var data = (tokWhat == 1716520973 ? this.viewer.getDataFloat (property) : null);
					rpn.addXBs (isIntProperty ? this.compareInt (tokWhat, tokOperator, comparisonValue) : isStringProperty ? this.compareString (tokWhat, tokOperator, val) : this.compareFloat (tokWhat, data, tokOperator, comparisonFloat));
					break;
				    case 3:
				    case 2:
					rpn.addXNum (org.jmol.script.ScriptVariable.newScriptVariableToken (instruction));
					break;
				    case 10:
					var bs1 = org.jmol.util.BitSetUtil.copy (value);
					rpn.addXBs (bs1);
					break;
				    case 8:
					rpn.addXPt (value);
					break;
				    default:
					if (org.jmol.script.Token.tokAttr (instruction.tok, 269484032)) {
					    if (!rpn.addOp (instruction)) this.error (22);
					    break;
					}if (!(Clazz.instanceOf (value, String))) {
					    rpn.addXObj (value);
					    break;
					}val = this.getParameter (value, 0);
					if (isInMath) {
					    rpn.addXObj (val);
					    break;
					}if (Clazz.instanceOf (val, String)) val = this.getStringObjectAsVariable (val, null);
					if (Clazz.instanceOf (val, java.util.List)) {
					    var bs = org.jmol.script.ScriptVariable.unEscapeBitSetArray (val, true);
					    if (bs == null) val = value;
					    else val = bs;
					}if (Clazz.instanceOf (val, String)) val = this.lookupIdentifierValue (value);
					rpn.addXObj (val);
					break;
				    }
				}
				this.expressionResult = rpn.getResult (allowUnderflow);
				if (this.expressionResult == null) {
				    if (allowUnderflow) return null;
				    if (!this.isSyntaxCheck) rpn.dumpStacks ("after getResult");
				    this.error (13);
				}this.expressionResult = (this.expressionResult).value;
				if (Clazz.instanceOf (this.expressionResult, String) && (mustBeBitSet || (this.expressionResult).startsWith ("({"))) {
				    this.expressionResult = (this.isSyntaxCheck ?  new org.jmol.util.BitSet () : org.jmol.script.ScriptEvaluator.getAtomBitSet (this, this.expressionResult));
				}if (!mustBeBitSet && !(Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet))) return null;
				var bs = (Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet) ? this.expressionResult :  new org.jmol.util.BitSet ());
				this.isBondSet = (Clazz.instanceOf (this.expressionResult, org.jmol.modelset.Bond.BondSet));
				if (!this.isBondSet) {
				    this.viewer.excludeAtoms (bs, ignoreSubset);
				    if (bs.length () > this.viewer.getAtomCount ()) bs.clearAll ();
				}if (this.tempStatement != null) {
				    this.statement = this.tempStatement;
				    this.tempStatement = null;
				}return bs;
			    }, $fz.isPrivate = true, $fz), "~A,~N,~N,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "compareFloat", 
			    ($fz = function (tokWhat, data, tokOperator, comparisonFloat) {
				var bs =  new org.jmol.util.BitSet ();
				var atomCount = this.viewer.getAtomCount ();
				var modelSet = this.viewer.getModelSet ();
				var atoms = modelSet.atoms;
				var propertyFloat = 0;
				this.viewer.autoCalculate (tokWhat);
				for (var i = atomCount; --i >= 0; ) {
				    var match = false;
				    var atom = atoms[i];
				    switch (tokWhat) {
				    default:
					propertyFloat = org.jmol.modelset.Atom.atomPropertyFloat (this.viewer, atom, tokWhat);
					break;
				    case 1716520973:
					if (data == null || data.length <= i) continue;
					propertyFloat = data[i];
				    }
				    match = org.jmol.script.ScriptEvaluator.compareFloat (tokOperator, propertyFloat, comparisonFloat);
				    if (match) bs.set (i);
				}
				return bs;
			    }, $fz.isPrivate = true, $fz), "~N,~A,~N,~N");
	Clazz.defineMethod (c$, "compareString", 
			    ($fz = function (tokWhat, tokOperator, comparisonString) {
				var bs =  new org.jmol.util.BitSet ();
				var atoms = this.viewer.getModelSet ().atoms;
				var atomCount = this.viewer.getAtomCount ();
				var isCaseSensitive = (tokWhat == 1087373316 && this.viewer.getChainCaseSensitive ());
				if (!isCaseSensitive) comparisonString = comparisonString.toLowerCase ();
				for (var i = atomCount; --i >= 0; ) {
				    var propertyString = org.jmol.modelset.Atom.atomPropertyString (this.viewer, atoms[i], tokWhat);
				    if (!isCaseSensitive) propertyString = propertyString.toLowerCase ();
				    if (this.compareStringValues (tokOperator, propertyString, comparisonString)) bs.set (i);
				}
				return bs;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~S");
	Clazz.defineMethod (c$, "compareInt", 
			    function (tokWhat, tokOperator, comparisonValue) {
				var propertyValue = 2147483647;
				var propertyBitSet = null;
				var bitsetComparator = tokOperator;
				var bitsetBaseValue = comparisonValue;
				var atomCount = this.viewer.getAtomCount ();
				var modelSet = this.viewer.getModelSet ();
				var atoms = modelSet.atoms;
				var imax = -1;
				var imin = 0;
				var iModel = -1;
				var cellRange = null;
				var nOps = 0;
				var bs;
				switch (tokWhat) {
				case 1297090050:
				    switch (bitsetComparator) {
				    case 269484433:
				    case 269484432:
					imax = 2147483647;
					break;
				    }
				    break;
				case 1095761923:
				    try {
					switch (tokOperator) {
					case 269484435:
					    return org.jmol.util.BitSetUtil.newBitSet2 (0, comparisonValue);
					case 269484434:
					    return org.jmol.util.BitSetUtil.newBitSet2 (0, comparisonValue + 1);
					case 269484433:
					    return org.jmol.util.BitSetUtil.newBitSet2 (comparisonValue, atomCount);
					case 269484432:
					    return org.jmol.util.BitSetUtil.newBitSet2 (comparisonValue + 1, atomCount);
					case 269484436:
					    return (comparisonValue < atomCount ? org.jmol.util.BitSetUtil.newBitSet2 (comparisonValue, comparisonValue + 1) :  new org.jmol.util.BitSet ());
					case 269484438:
					default:
					    bs = org.jmol.util.BitSetUtil.setAll (atomCount);
					    if (comparisonValue >= 0) bs.clear (comparisonValue);
					    return bs;
					}
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    return  new org.jmol.util.BitSet ();
					} else {
					    throw e;
					}
				    }
				}
				bs = org.jmol.util.BitSetUtil.newBitSet (atomCount);
				for (var i = 0; i < atomCount; ++i) {
				    var match = false;
				    var atom = atoms[i];
				    switch (tokWhat) {
				    default:
					propertyValue = org.jmol.modelset.Atom.atomPropertyInt (atom, tokWhat);
					break;
				    case 1095766022:
					return org.jmol.util.BitSetUtil.copy (this.viewer.getConformation (-1, comparisonValue - 1, false));
				    case 1297090050:
					propertyBitSet = atom.getAtomSymmetry ();
					if (propertyBitSet == null) continue;
					if (atom.getModelIndex () != iModel) {
					    iModel = atom.getModelIndex ();
					    cellRange = modelSet.getModelCellRange (iModel);
					    nOps = modelSet.getModelSymmetryCount (iModel);
					}if (bitsetBaseValue >= 200) {
					    if (cellRange == null) continue;
					    comparisonValue = bitsetBaseValue % 1000;
					    var symop = Clazz.doubleToInt (bitsetBaseValue / 1000) - 1;
					    if (symop < 0) {
						match = true;
					    } else if (nOps == 0 || symop >= 0 && !(match = propertyBitSet.get (symop))) {
						continue;
					    }bitsetComparator = 1048587;
					    if (symop < 0) propertyValue = atom.getCellTranslation (comparisonValue, cellRange, nOps);
					    else propertyValue = atom.getSymmetryTranslation (symop, cellRange, nOps);
					} else if (nOps > 0) {
					    if (comparisonValue > nOps) {
						if (bitsetComparator != 269484435 && bitsetComparator != 269484434) continue;
					    }if (bitsetComparator == 269484438) {
						if (comparisonValue > 0 && comparisonValue <= nOps && !propertyBitSet.get (comparisonValue)) {
						    bs.set (i);
						}continue;
					    }}switch (bitsetComparator) {
					    case 269484435:
						imax = comparisonValue - 1;
						break;
					    case 269484434:
						imax = comparisonValue;
						break;
					    case 269484433:
						imin = comparisonValue - 1;
						break;
					    case 269484432:
						imin = comparisonValue;
						break;
					    case 269484436:
						imax = comparisonValue;
						imin = comparisonValue - 1;
						break;
					    case 269484438:
						match = !propertyBitSet.get (comparisonValue);
						break;
					    }
					if (imin < 0) imin = 0;
					if (imin < imax) {
					    var pt = propertyBitSet.nextSetBit (imin);
					    if (pt >= 0 && pt < imax) match = true;
					}if (!match || propertyValue == 2147483647) tokOperator = 1048587;
				    }
				    switch (tokOperator) {
				    case 1048587:
					break;
				    case 269484435:
					match = (propertyValue < comparisonValue);
					break;
				    case 269484434:
					match = (propertyValue <= comparisonValue);
					break;
				    case 269484433:
					match = (propertyValue >= comparisonValue);
					break;
				    case 269484432:
					match = (propertyValue > comparisonValue);
					break;
				    case 269484436:
					match = (propertyValue == comparisonValue);
					break;
				    case 269484438:
					match = (propertyValue != comparisonValue);
					break;
				    }
				    if (match) bs.set (i);
				}
				return bs;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "compareStringValues", 
			    ($fz = function (tokOperator, propertyValue, comparisonValue) {
				switch (tokOperator) {
				case 269484436:
				case 269484438:
				    return (org.jmol.util.TextFormat.isMatch (propertyValue, comparisonValue, true, true) == (tokOperator == 269484436));
				default:
				    this.error (22);
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~N,~S,~S");
	c$.compareFloat = Clazz.defineMethod (c$, "compareFloat", 
					      ($fz = function (tokOperator, propertyFloat, comparisonFloat) {
						  switch (tokOperator) {
						  case 269484435:
						      return propertyFloat < comparisonFloat;
						  case 269484434:
						      return propertyFloat <= comparisonFloat;
						  case 269484433:
						      return propertyFloat >= comparisonFloat;
						  case 269484432:
						      return propertyFloat > comparisonFloat;
						  case 269484436:
						      return propertyFloat == comparisonFloat;
						  case 269484438:
						      return propertyFloat != comparisonFloat;
						  }
						  return false;
					      }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "getAtomBits", 
			    ($fz = function (tokType, specInfo) {
				return (this.isSyntaxCheck ?  new org.jmol.util.BitSet () : this.viewer.getAtomBits (tokType, specInfo));
			    }, $fz.isPrivate = true, $fz), "~N,~O");
	c$.getSeqCode = Clazz.defineMethod (c$, "getSeqCode", 
					    ($fz = function (instruction) {
						return (instruction.intValue != 2147483647 ? org.jmol.modelset.Group.getSeqcode (instruction.intValue, ' ') : (instruction.value).intValue ());
					    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "checkLast", 
			    ($fz = function (i) {
				return this.checkLength (i + 1) - 1;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkLength", 
			    ($fz = function (length) {
				if (length >= 0) return this.checkLengthErrorPt (length, 0);
				if (this.statementLength > -length) {
				    this.iToken = -length;
				    this.error (2);
				}return this.statementLength;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkLengthErrorPt", 
			    ($fz = function (length, errorPt) {
				if (this.statementLength != length) {
				    this.iToken = errorPt > 0 ? errorPt : this.statementLength;
				    this.error (errorPt > 0 ? 22 : 2);
				}return this.statementLength;
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "checkLength23", 
			    ($fz = function () {
				this.iToken = this.statementLength;
				if (this.statementLength != 2 && this.statementLength != 3) this.error (2);
				return this.statementLength;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkLength34", 
			    ($fz = function () {
				this.iToken = this.statementLength;
				if (this.statementLength != 3 && this.statementLength != 4) this.error (2);
				return this.statementLength;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getToken", 
			    ($fz = function (i) {
				if (!this.checkToken (i)) this.error (13);
				this.theToken = this.statement[i];
				this.theTok = this.theToken.tok;
				return this.theToken;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "tokAt", 
			    ($fz = function (i) {
				return (i < this.statementLength && this.statement[i] != null ? this.statement[i].tok : 0);
			    }, $fz.isPrivate = true, $fz), "~N");
	c$.tokAtArray = Clazz.defineMethod (c$, "tokAtArray", 
					    ($fz = function (i, args) {
						return (i < args.length && args[i] != null ? args[i].tok : 0);
					    }, $fz.isPrivate = true, $fz), "~N,~A");
	Clazz.defineMethod (c$, "tokenAt", 
			    ($fz = function (i, args) {
				return (i < args.length ? args[i] : null);
			    }, $fz.isPrivate = true, $fz), "~N,~A");
	Clazz.defineMethod (c$, "checkToken", 
			    ($fz = function (i) {
				return (this.iToken = i) < this.statementLength;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "modelNumberParameter", 
			    ($fz = function (index) {
				var iFrame = 0;
				var useModelNumber = false;
				switch (this.tokAt (index)) {
				case 2:
				    useModelNumber = true;
				case 3:
				    iFrame = this.getToken (index).intValue;
				    break;
				case 4:
				    iFrame = org.jmol.script.ScriptEvaluator.getFloatEncodedInt (this.stringParameter (index));
				    break;
				default:
				    this.error (22);
				}
				return this.viewer.getModelNumberIndex (iFrame, useModelNumber, true);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "optParameterAsString", 
			    ($fz = function (i) {
				if (i >= this.statementLength) return "";
				return this.parameterAsString (i);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "parameterAsString", 
			    ($fz = function (i) {
				this.getToken (i);
				if (this.theToken == null) this.error (13);
				return org.jmol.script.ScriptVariable.sValue (this.theToken);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "intParameter", 
			    ($fz = function (index) {
				if (this.checkToken (index)) if (this.getToken (index).tok == 2) return this.theToken.intValue;
				this.error (20);
				return 0;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "intParameterRange", 
			    ($fz = function (i, min, max) {
				var val = this.intParameter (i);
				if (val < min || val > max) this.integerOutOfRange (min, max);
				return val;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "isFloatParameter", 
			    ($fz = function (index) {
				switch (this.tokAt (index)) {
				case 2:
				case 3:
				    return true;
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "floatParameterRange", 
			    ($fz = function (i, min, max) {
				var val = this.floatParameter (i);
				if (val < min || val > max) this.numberOutOfRange (min, max);
				return val;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "floatParameter", 
			    ($fz = function (index) {
				if (this.checkToken (index)) {
				    this.getToken (index);
				    switch (this.theTok) {
				    case 1048615:
					return -this.theToken.intValue;
				    case 1048614:
				    case 2:
					return this.theToken.intValue;
				    case 1048611:
				    case 3:
					return (this.theToken.value).floatValue ();
				    }
				}this.error (34);
				return 0;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "floatParameterSet", 
			    ($fz = function (i, nMin, nMax) {
				var tok = this.tokAt (i);
				if (tok == 1073742195) tok = this.tokAt (++i);
				var haveBrace = (tok == 1048586);
				var haveSquare = (tok == 269484096);
				var fparams = null;
				var v =  new java.util.ArrayList ();
				var n = 0;
				if (haveBrace || haveSquare) i++;
				var pt;
				var s = null;
				switch (this.tokAt (i)) {
				case 4:
				    s = org.jmol.script.ScriptVariable.sValue (this.statement[i]);
				    s = org.jmol.util.TextFormat.replaceAllCharacter (s, "{},[]\"'", ' ');
				    fparams = org.jmol.util.Parser.parseFloatArray (s);
				    n = fparams.length;
				    break;
				case 7:
				    fparams = org.jmol.script.ScriptVariable.flistValue (this.statement[i++], 0);
				    n = fparams.length;
				    break;
				default:
				    while (n < nMax) {
					tok = this.tokAt (i);
					if (haveBrace && tok == 1048590 || haveSquare && tok == 269484097) break;
					switch (tok) {
					case 269484080:
					case 1048586:
					case 1048590:
					    break;
					case 4:
					    break;
					case 8:
					    pt = this.getPoint3f (i, false);
					    v.add (Float.$valueOf (pt.x));
					    v.add (Float.$valueOf (pt.y));
					    v.add (Float.$valueOf (pt.z));
					    n += 3;
					    break;
					case 9:
					    var pt4 = this.getPoint4f (i);
					    v.add (Float.$valueOf (pt4.x));
					    v.add (Float.$valueOf (pt4.y));
					    v.add (Float.$valueOf (pt4.z));
					    v.add (Float.$valueOf (pt4.w));
					    n += 4;
					    break;
					default:
					    v.add (Float.$valueOf (this.floatParameter (i)));
					    n++;
					    if (n == nMax && haveSquare && this.tokAt (i + 1) == 1048590) i++;
					}
					i++;
				    }
				}
				if (haveBrace && this.tokAt (i++) != 1048590 || haveSquare && this.tokAt (i++) != 269484097) this.error (22);
				this.iToken = i - 1;
				if (n < nMin || n > nMax) this.error (22);
				if (fparams == null) {
				    fparams =  Clazz.newFloatArray (n, 0);
				    for (var j = 0; j < n; j++) fparams[j] = v.get (j).floatValue ();

				}return fparams;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "isArrayParameter", 
			    ($fz = function (i) {
				switch (this.tokAt (i)) {
				case 7:
				case 11:
				case 12:
				case 1073742195:
				case 269484096:
				    return true;
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getPointArray", 
			    ($fz = function (i, nPoints) {
				var points = (nPoints < 0 ? null :  new Array (nPoints));
				var vp = (nPoints < 0 ?  new java.util.ArrayList () : null);
				var tok = (i < 0 ? 7 : this.getToken (i++).tok);
				switch (tok) {
				case 7:
				    var v = (this.theToken).getList ();
				    if (nPoints >= 0 && v.size () != nPoints) this.error (22);
				    nPoints = v.size ();
				    if (points == null) points =  new Array (nPoints);
				    for (var j = 0; j < nPoints; j++) if ((points[j] = org.jmol.script.ScriptVariable.ptValue (v.get (j))) == null) this.error (22);

				    return points;
				case 1073742195:
				    tok = this.tokAt (i++);
				    break;
				}
				if (tok != 269484096) this.error (22);
				var n = 0;
				while (tok != 269484097 && tok != 0) {
				    tok = this.getToken (i).tok;
				    switch (tok) {
				    case 0:
				    case 269484097:
					break;
				    case 269484080:
					i++;
					break;
				    default:
					if (nPoints >= 0 && n == nPoints) {
					    tok = 0;
					    break;
					}var pt = this.getPoint3f (i, true);
					if (points == null) vp.add (pt);
					else points[n] = pt;
					n++;
					i = this.iToken + 1;
				    }
				}
				if (tok != 269484097) this.error (22);
				if (points == null) points = vp.toArray ( new Array (vp.size ()));
				return points;
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "floatArraySet", 
			    ($fz = function (i, nX, nY) {
				var tok = this.tokAt (i++);
				if (tok == 1073742195) tok = this.tokAt (i++);
				if (tok != 269484096) this.error (22);
				var fparams = org.jmol.util.ArrayUtil.newFloat2 (nX);
				var n = 0;
				while (tok != 269484097) {
				    tok = this.getToken (i).tok;
				    switch (tok) {
				    case 1073742195:
				    case 269484097:
					continue;
				    case 269484080:
					i++;
					break;
				    case 269484096:
					i++;
					var f =  Clazz.newFloatArray (nY, 0);
					fparams[n++] = f;
					for (var j = 0; j < nY; j++) {
					    f[j] = this.floatParameter (i++);
					    if (this.tokAt (i) == 269484080) i++;
					}
					if (this.tokAt (i++) != 269484097) this.error (22);
					tok = 0;
					if (n == nX && this.tokAt (i) != 269484097) this.error (22);
					break;
				    default:
					this.error (22);
				    }
				}
				return fparams;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "floatArraySetXYZ", 
			    ($fz = function (i, nX, nY, nZ) {
				var tok = this.tokAt (i++);
				if (tok == 1073742195) tok = this.tokAt (i++);
				if (tok != 269484096 || nX <= 0) this.error (22);
				var fparams = org.jmol.util.ArrayUtil.newFloat3 (nX, -1);
				var n = 0;
				while (tok != 269484097) {
				    tok = this.getToken (i).tok;
				    switch (tok) {
				    case 1073742195:
				    case 269484097:
					continue;
				    case 269484080:
					i++;
					break;
				    case 269484096:
					fparams[n++] = this.floatArraySet (i, nY, nZ);
					i = ++this.iToken;
					tok = 0;
					if (n == nX && this.tokAt (i) != 269484097) this.error (22);
					break;
				    default:
					this.error (22);
				    }
				}
				return fparams;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "stringParameter", 
			    ($fz = function (index) {
				if (!this.checkToken (index) || this.getToken (index).tok != 4) this.error (41);
				return this.theToken.value;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "stringParameterSet", 
			    ($fz = function (i) {
				switch (this.tokAt (i)) {
				case 4:
				    var s = this.stringParameter (i);
				    if (s.startsWith ("[\"")) {
					var o = this.viewer.evaluateExpression (s);
					if (Clazz.instanceOf (o, String)) return org.jmol.util.TextFormat.split (o, '\n');
				    }return [s];
				case 1073742195:
				    i += 2;
				    break;
				case 269484096:
				    ++i;
				    break;
				case 7:
				    return org.jmol.script.ScriptVariable.listValue (this.getToken (i));
				default:
				    this.error (22);
				}
				var tok;
				var v =  new java.util.ArrayList ();
				while ((tok = this.tokAt (i)) != 269484097) {
				    switch (tok) {
				    case 269484080:
					break;
				    case 4:
					v.add (this.stringParameter (i));
					break;
				    default:
				    case 0:
					this.error (22);
				    }
				    i++;
				}
				this.iToken = i;
				var n = v.size ();
				var sParams =  new Array (n);
				for (var j = 0; j < n; j++) {
				    sParams[j] = v.get (j);
				}
				return sParams;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "objectNameParameter", 
			    ($fz = function (index) {
				if (!this.checkToken (index)) this.error (37);
				return this.parameterAsString (index);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "booleanParameter", 
			    ($fz = function (i) {
				if (this.statementLength == i) return true;
				switch (this.getToken (this.checkLast (i)).tok) {
				case 1048589:
				    return true;
				case 1048588:
				    return false;
				default:
				    this.error (5);
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "atomCenterOrCoordinateParameter", 
			    ($fz = function (i) {
				switch (this.getToken (i).tok) {
				case 10:
				case 1048577:
				    var bs = this.atomExpression (this.statement, i, 0, true, false, false, true);
				    if (bs != null) return this.viewer.getAtomSetCenter (bs);
				    if (Clazz.instanceOf (this.expressionResult, org.jmol.util.Point3f)) return this.expressionResult;
				    this.error (22);
				    break;
				case 1048586:
				case 8:
				    return this.getPoint3f (i, true);
				}
				this.error (22);
				return null;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isCenterParameter", 
			    ($fz = function (i) {
				var tok = this.tokAt (i);
				return (tok == 1048583 || tok == 1048586 || tok == 1048577 || tok == 8 || tok == 10);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "centerParameter", 
			    ($fz = function (i) {
				return this.centerParameterForModel (i, -2147483648);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "centerParameterForModel", 
			    ($fz = function (i, modelIndex) {
				var center = null;
				this.expressionResult = null;
				if (this.checkToken (i)) {
				    switch (this.getToken (i).tok) {
				    case 1048583:
					var id = this.objectNameParameter (++i);
					var index = -2147483648;
					if (this.tokAt (i + 1) == 269484096) {
					    index = this.parameterExpressionList (-i - 1, -1, true).get (0).asInt ();
					    if (this.getToken (--this.iToken).tok != 269484097) this.error (22);
					}if (this.isSyntaxCheck) return  new org.jmol.util.Point3f ();
					if (this.tokAt (i + 1) == 1048584 && (this.tokAt (i + 2) == 1141899267 || this.tokAt (i + 2) == 1141899270)) {
					    index = 2147483647;
					    this.iToken = i + 2;
					}if ((center = this.getObjectCenter (id, index, modelIndex)) == null) this.errorStr (12, id);
					break;
				    case 10:
				    case 1048577:
				    case 1048586:
				    case 8:
					center = this.atomCenterOrCoordinateParameter (i);
					break;
				    }
				}if (center == null) this.error (11);
				return center;
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "planeParameter", 
			    ($fz = function (i) {
				var vAB =  new org.jmol.util.Vector3f ();
				var vAC =  new org.jmol.util.Vector3f ();
				var plane = null;
				var isNegated = (this.tokAt (i) == 269484192);
				if (isNegated) i++;
				if (i < this.statementLength) switch (this.getToken (i).tok) {
				case 9:
				    plane = org.jmol.util.Point4f.newPt (this.theToken.value);
				    break;
				case 1048583:
				    var id = this.objectNameParameter (++i);
				    if (this.isSyntaxCheck) return  new org.jmol.util.Point4f ();
				    var shapeType = this.shapeManager.getShapeIdFromObjectName (id);
				    switch (shapeType) {
				    case 22:
					this.setShapeProperty (22, "thisID", id);
					var points = this.getShapeProperty (22, "vertices");
					if (points == null || points.length < 3 || points[0] == null || points[1] == null || points[2] == null) break;
					org.jmol.util.Measure.getPlaneThroughPoints (points[0], points[1], points[2],  new org.jmol.util.Vector3f (), vAB, vAC, plane =  new org.jmol.util.Point4f ());
					break;
				    case 23:
					this.setShapeProperty (23, "thisID", id);
					plane = this.getShapeProperty (23, "plane");
					break;
				    }
				    break;
				case 1112541205:
				    if (!this.checkToken (++i) || this.getToken (i++).tok != 269484436) this.evalError ("x=?", null);
				    plane = org.jmol.util.Point4f.new4 (1, 0, 0, -this.floatParameter (i));
				    break;
				case 1112541206:
				    if (!this.checkToken (++i) || this.getToken (i++).tok != 269484436) this.evalError ("y=?", null);
				    plane = org.jmol.util.Point4f.new4 (0, 1, 0, -this.floatParameter (i));
				    break;
				case 1112541207:
				    if (!this.checkToken (++i) || this.getToken (i++).tok != 269484436) this.evalError ("z=?", null);
				    plane = org.jmol.util.Point4f.new4 (0, 0, 1, -this.floatParameter (i));
				    break;
				case 1073741824:
				case 4:
				    var str = this.parameterAsString (i);
				    if (str.equalsIgnoreCase ("xy")) return org.jmol.util.Point4f.new4 (0, 0, 1, 0);
				    if (str.equalsIgnoreCase ("xz")) return org.jmol.util.Point4f.new4 (0, 1, 0, 0);
				    if (str.equalsIgnoreCase ("yz")) return org.jmol.util.Point4f.new4 (1, 0, 0, 0);
				    this.iToken += 2;
				    break;
				case 1048586:
				    if (!this.isPoint3f (i)) {
					plane = this.getPoint4f (i);
					break;
				    }case 10:
				case 1048577:
				    var pt1 = this.atomCenterOrCoordinateParameter (i);
				    if (this.getToken (++this.iToken).tok == 269484080) ++this.iToken;
				    var pt2 = this.atomCenterOrCoordinateParameter (this.iToken);
				    if (this.getToken (++this.iToken).tok == 269484080) ++this.iToken;
				    var pt3 = this.atomCenterOrCoordinateParameter (this.iToken);
				    i = this.iToken;
				    var norm =  new org.jmol.util.Vector3f ();
				    var w = org.jmol.util.Measure.getNormalThroughPoints (pt1, pt2, pt3, norm, vAB, vAC);
				    plane =  new org.jmol.util.Point4f ();
				    plane.set (norm.x, norm.y, norm.z, w);
				    if (!this.isSyntaxCheck && org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("points: " + pt1 + pt2 + pt3 + " defined plane: " + plane);
				    break;
				}
				if (plane == null) this.planeExpected ();
				if (isNegated) {
				    plane.scale (-1);
				}return plane;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "hklParameter", 
			    ($fz = function (i) {
				if (!this.isSyntaxCheck && this.viewer.getCurrentUnitCell () == null) this.error (33);
				var pt = this.getPointOrPlane (i, false, true, false, true, 3, 3);
				var p = this.getHklPlane (pt);
				if (p == null) this.error (3);
				if (!this.isSyntaxCheck && org.jmol.util.Logger.debugging) org.jmol.util.Logger.info ("defined plane: " + p);
				return p;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getHklPlane", 
			    function (pt) {
				var vAB =  new org.jmol.util.Vector3f ();
				var vAC =  new org.jmol.util.Vector3f ();
				var pt1 = org.jmol.util.Point3f.new3 (pt.x == 0 ? 1 : 1 / pt.x, 0, 0);
				var pt2 = org.jmol.util.Point3f.new3 (0, pt.y == 0 ? 1 : 1 / pt.y, 0);
				var pt3 = org.jmol.util.Point3f.new3 (0, 0, pt.z == 0 ? 1 : 1 / pt.z);
				if (pt.x == 0 && pt.y == 0 && pt.z == 0) {
				    return null;
				} else if (pt.x == 0 && pt.y == 0) {
				    pt1.set (1, 0, pt3.z);
				    pt2.set (0, 1, pt3.z);
				} else if (pt.y == 0 && pt.z == 0) {
				    pt2.set (pt1.x, 0, 1);
				    pt3.set (pt1.x, 1, 0);
				} else if (pt.z == 0 && pt.x == 0) {
				    pt3.set (0, pt2.y, 1);
				    pt1.set (1, pt2.y, 0);
				} else if (pt.x == 0) {
				    pt1.set (1, pt2.y, 0);
				} else if (pt.y == 0) {
				    pt2.set (0, 1, pt3.z);
				} else if (pt.z == 0) {
				    pt3.set (pt1.x, 0, 1);
				}this.viewer.toCartesian (pt1, false);
				this.viewer.toCartesian (pt2, false);
				this.viewer.toCartesian (pt3, false);
				var plane =  new org.jmol.util.Vector3f ();
				var w = org.jmol.util.Measure.getNormalThroughPoints (pt1, pt2, pt3, plane, vAB, vAC);
				var pt4 =  new org.jmol.util.Point4f ();
				pt4.set (plane.x, plane.y, plane.z, w);
				return pt4;
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getMadParameter", 
			    ($fz = function () {
				var mad = 1;
				switch (this.getToken (1).tok) {
				case 1073742072:
				    this.restrictSelected (false, false);
				    break;
				case 1048589:
				    break;
				case 1048588:
				    mad = 0;
				    break;
				case 2:
				    var radiusRasMol = this.intParameterRange (1, 0, 750);
				    mad = radiusRasMol * 4 * 2;
				    break;
				case 3:
				    mad = Clazz.doubleToInt (Math.floor (this.floatParameterRange (1, -3, 3) * 1000 * 2));
				    if (mad < 0) {
					this.restrictSelected (false, false);
					mad = -mad;
				    }break;
				default:
				    this.error (6);
				}
				return mad;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getSetAxesTypeMad", 
			    ($fz = function (index) {
				if (index == this.statementLength) return 1;
				switch (this.getToken (this.checkLast (index)).tok) {
				case 1048589:
				    return 1;
				case 1048588:
				    return 0;
				case 1073741926:
				    return -1;
				case 2:
				    return this.intParameterRange (index, -1, 19);
				case 3:
				    var angstroms = this.floatParameterRange (index, 0, 2);
				    return Clazz.doubleToInt (Math.floor (angstroms * 1000 * 2));
				}
				this.errorStr (7, "\"DOTTED\"");
				return 0;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isColorParam", 
			    ($fz = function (i) {
				var tok = this.tokAt (i);
				return (tok == 570425378 || tok == 1073742195 || tok == 269484096 || tok == 7 || tok == 8 || this.isPoint3f (i) || (tok == 4 || org.jmol.script.Token.tokAttr (tok, 1073741824)) && org.jmol.util.ColorUtil.getArgbFromString (this.statement[i].value) != 0);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getArgbParam", 
			    ($fz = function (index) {
				return this.getArgbParamOrNone (index, false);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getArgbParamLast", 
			    ($fz = function (index, allowNone) {
				var icolor = this.getArgbParamOrNone (index, allowNone);
				this.checkLast (this.iToken);
				return icolor;
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "getArgbParamOrNone", 
			    ($fz = function (index, allowNone) {
				var pt = null;
				if (this.checkToken (index)) {
				    switch (this.getToken (index).tok) {
				    default:
					if (!org.jmol.script.Token.tokAttr (this.theTok, 1073741824)) break;
				    case 570425378:
				    case 4:
					return org.jmol.util.ColorUtil.getArgbFromString (this.parameterAsString (index));
				    case 1073742195:
					return this.getColorTriad (index + 2);
				    case 269484096:
					return this.getColorTriad (++index);
				    case 7:
					var rgb = org.jmol.script.ScriptVariable.flistValue (this.theToken, 3);
					if (rgb != null && rgb.length != 3) pt = org.jmol.util.Point3f.new3 (rgb[0], rgb[1], rgb[2]);
					break;
				    case 8:
					pt = this.theToken.value;
					break;
				    case 1048586:
					pt = this.getPoint3f (index, false);
					break;
				    case 1048587:
					if (allowNone) return 0;
				    }
				}if (pt == null) this.error (8);
				return org.jmol.util.ColorUtil.colorPtToInt (pt);
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "getColorTriad", 
			    ($fz = function (i) {
				var colors =  Clazz.newFloatArray (3, 0);
				var n = 0;
				var hex = "";
				this.getToken (i);
				var pt = null;
				var val = 0;
				out : switch (this.theTok) {
				case 2:
				case 1048614:
				case 3:
				    for (; i < this.statementLength; i++) {
					switch (this.getToken (i).tok) {
					case 269484080:
					    continue;
					case 1073741824:
					    if (n != 1 || colors[0] != 0) this.error (4);
					    hex = "0" + this.parameterAsString (i);
					    break out;
					case 3:
					    if (n > 2) this.error (4);
					    val = this.floatParameter (i);
					    break;
					case 2:
					    if (n > 2) this.error (4);
					    val = this.theToken.intValue;
					    break;
					case 1048614:
					    if (n > 2) this.error (4);
					    val = (this.theToken.value).intValue () % 256;
					    break;
					case 269484097:
					    if (n != 3) this.error (4);
					    --i;
					    pt = org.jmol.util.Point3f.new3 (colors[0], colors[1], colors[2]);
					    break out;
					default:
					    this.error (4);
					}
					colors[n++] = val;
				    }
				    this.error (4);
				    break;
				case 8:
				    pt = this.theToken.value;
				    break;
				case 1073741824:
				    hex = this.parameterAsString (i);
				    break;
				default:
				    this.error (4);
				}
				if (this.getToken (++i).tok != 269484097) this.error (4);
				if (pt != null) return org.jmol.util.ColorUtil.colorPtToInt (pt);
				if ((n = org.jmol.util.ColorUtil.getArgbFromString ("[" + hex + "]")) == 0) this.error (4);
				return n;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isPoint3f", 
			    ($fz = function (i) {
				var isOK;
				if ((isOK = (this.tokAt (i) == 8)) || this.tokAt (i) == 9 || this.isFloatParameter (i + 1) && this.isFloatParameter (i + 2) && this.isFloatParameter (i + 3) && this.isFloatParameter (i + 4)) return isOK;
				this.ignoreError = true;
				var t = this.iToken;
				isOK = true;
				try {
				    this.getPoint3f (i, true);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					isOK = false;
				    } else {
					throw e;
				    }
				}
				this.ignoreError = false;
				this.iToken = t;
				return isOK;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getPoint3f", 
			    ($fz = function (i, allowFractional) {
				return this.getPointOrPlane (i, false, allowFractional, true, false, 3, 3);
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "getPoint4f", 
			    ($fz = function (i) {
				return this.getPointOrPlane (i, false, false, false, false, 4, 4);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getPointOrPlane", 
			    ($fz = function (index, integerOnly, allowFractional, doConvert, implicitFractional, minDim, maxDim) {
				var coord =  Clazz.newFloatArray (6, 0);
				var n = 0;
				this.coordinatesAreFractional = implicitFractional;
				if (this.tokAt (index) == 8) {
				    if (minDim <= 3 && maxDim >= 3) return this.getToken (index).value;
				    this.error (22);
				}if (this.tokAt (index) == 9) {
				    if (minDim <= 4 && maxDim >= 4) return this.getToken (index).value;
				    this.error (22);
				}var multiplier = 1;
				out : for (var i = index; i < this.statement.length; i++) {
				    switch (this.getToken (i).tok) {
				    case 1048586:
				    case 269484080:
				    case 269484128:
				    case 269484160:
					break;
				    case 1048590:
					break out;
				    case 269484192:
					multiplier = -1;
					break;
				    case 1048615:
					if (n == 6) this.error (22);
					coord[n++] = this.theToken.intValue;
					multiplier = -1;
					break;
				    case 2:
				    case 1048614:
					if (n == 6) this.error (22);
					coord[n++] = this.theToken.intValue * multiplier;
					multiplier = 1;
					break;
				    case 269484208:
				    case 1048610:
					if (!allowFractional) this.error (22);
					if (this.theTok == 269484208) this.getToken (++i);
					n--;
					if (n < 0 || integerOnly) this.error (22);
					if (Clazz.instanceOf (this.theToken.value, Integer) || this.theTok == 2) {
					    coord[n++] /= (this.theToken.intValue == 2147483647 ? (this.theToken.value).intValue () : this.theToken.intValue);
					} else if (Clazz.instanceOf (this.theToken.value, Float)) {
					    coord[n++] /= (this.theToken.value).floatValue ();
					}this.coordinatesAreFractional = true;
					break;
				    case 3:
				    case 1048611:
					if (integerOnly) this.error (22);
					if (n == 6) this.error (22);
					coord[n++] = (this.theToken.value).floatValue ();
					break;
				    default:
					this.error (22);
				    }
				}
				if (n < minDim || n > maxDim) this.error (22);
				if (n == 3) {
				    var pt = org.jmol.util.Point3f.new3 (coord[0], coord[1], coord[2]);
				    if (this.coordinatesAreFractional && doConvert) {
					this.fractionalPoint = org.jmol.util.Point3f.newP (pt);
					if (!this.isSyntaxCheck) this.viewer.toCartesian (pt, !this.viewer.getFractionalRelative ());
				    }return pt;
				}if (n == 4) {
				    if (this.coordinatesAreFractional) this.error (22);
				    var plane = org.jmol.util.Point4f.new4 (coord[0], coord[1], coord[2], coord[3]);
				    return plane;
				}return coord;
			    }, $fz.isPrivate = true, $fz), "~N,~B,~B,~B,~B,~N,~N");
	Clazz.defineMethod (c$, "xypParameter", 
			    ($fz = function (index) {
				var tok = this.tokAt (index);
				if (tok == 1073742195) tok = this.tokAt (++index);
				if (tok != 269484096 || !this.isFloatParameter (++index)) return null;
				var pt =  new org.jmol.util.Point3f ();
				pt.x = this.floatParameter (index);
				if (this.tokAt (++index) == 269484080) index++;
				if (!this.isFloatParameter (index)) return null;
				pt.y = this.floatParameter (index);
				var isPercent = (this.tokAt (++index) == 269484210);
				if (isPercent) ++index;
				if (this.tokAt (index) != 269484097) return null;
				this.iToken = index;
				pt.z = (isPercent ? -1 : 1) * 3.4028235E38;
				return pt;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isCommandDisplayable", 
			    ($fz = function (i) {
				if (i >= this.aatoken.length || i >= this.pcEnd || this.aatoken[i] == null) return false;
				return (this.lineIndices[i][1] > this.lineIndices[i][0]);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkContinue", 
			    ($fz = function () {
				if (this.interruptExecution) return false;
				if (this.executionStepping && this.isCommandDisplayable (this.pc)) {
				    this.viewer.setScriptStatus ("Next: " + this.getNextStatement (), "stepping -- type RESUME to continue", 0, null);
				    this.executionPaused = true;
				} else if (!this.executionPaused) {
				    return true;
				}if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.info ("script execution paused at command " + (this.pc + 1) + " level " + this.scriptLevel + ": " + this.thisCommand);
				}try {
				    this.refresh ();
				    while (this.executionPaused) {
					this.viewer.popHoldRepaintWhy ("pause");
					Thread.sleep (100);
					var script = this.viewer.getInterruptScript ();
					if (script !== "") {
					    this.resumePausedExecution ();
					    this.setErrorMessage (null);
					    var scSave = this.getScriptContext ();
					    this.pc--;
					    try {
						this.runScript (script);
					    } catch (e$$) {
						if (Clazz.exceptionOf (e$$, Exception)) {
						    var e = e$$;
						    {
							this.setErrorMessage ("" + e);
						    }
						} else if (Clazz.exceptionOf (e$$, Error)) {
						    var er = e$$;
						    {
							this.setErrorMessage ("" + er);
						    }
						} else {
						    throw e$$;
						}
					    }
					    if (this.$error) {
						this.scriptStatusOrBuffer (this.errorMessage);
						this.setErrorMessage (null);
					    }this.restoreScriptContext (scSave, true, false, false);
					    this.pauseExecution (false);
					}this.viewer.pushHoldRepaintWhy ("pause");
				    }
				    if (!this.isSyntaxCheck && !this.interruptExecution && !this.executionStepping) {
					this.viewer.scriptStatus ("script execution " + (this.$error || this.interruptExecution ? "interrupted" : "resumed"));
				    }} catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    this.viewer.pushHoldRepaintWhy ("pause");
					} else {
					    throw e;
					}
				    }
				org.jmol.util.Logger.debug ("script execution resumed");
				return !this.$error && !this.interruptExecution;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "instructionDispatchLoop", 
			    ($fz = function (doList) {
				var timeBegin = 0;
				this.vProcess = null;
				var isForCheck = false;
				if (this.shapeManager == null) this.shapeManager = this.viewer.getShapeManager ();
				this.debugScript = this.logMessages = false;
				if (!this.isSyntaxCheck) this.setDebugging ();
				if (this.logMessages) {
				    timeBegin = System.currentTimeMillis ();
				    this.viewer.scriptStatus ("Eval.instructionDispatchLoop():" + timeBegin);
				    this.viewer.scriptStatus (this.$script);
				}if (this.pcEnd == 0) this.pcEnd = 2147483647;
				if (this.lineEnd == 0) this.lineEnd = 2147483647;
				var lastCommand = "";
				if (this.aatoken == null) return;
				for (; this.pc < this.aatoken.length && this.pc < this.pcEnd; this.pc++) {
				    if (!this.isSyntaxCheck && !this.checkContinue ()) break;
				    if (this.lineNumbers[this.pc] > this.lineEnd) break;
				    this.theToken = (this.aatoken[this.pc].length == 0 ? null : this.aatoken[this.pc][0]);
				    if (!this.historyDisabled && !this.isSyntaxCheck && this.scriptLevel <= this.commandHistoryLevelMax && !this.tQuiet) {
					var cmdLine = this.getCommand (this.pc, true, true);
					if (this.theToken != null && cmdLine.length > 0 && !cmdLine.equals (lastCommand) && (this.theToken.tok == 135368713 || this.theToken.tok == 102436 || !org.jmol.script.Token.tokAttr (this.theToken.tok, 102400))) this.viewer.addCommand (lastCommand = cmdLine);
				    }if (!this.isSyntaxCheck) {
					var script = this.viewer.getInterruptScript ();
					if (script !== "") this.runScript (script);
				    }if (!this.setStatement (this.pc)) {
					org.jmol.util.Logger.info (this.getCommand (this.pc, true, false) + " -- STATEMENT CONTAINING @{} SKIPPED");
					continue;
				    }this.thisCommand = this.getCommand (this.pc, false, true);
				    this.fullCommand = this.thisCommand + this.getNextComment ();
				    this.getToken (0);
				    this.iToken = 0;
				    if (doList || !this.isSyntaxCheck) {
					var milliSecDelay = this.viewer.getScriptDelay ();
					if (doList || milliSecDelay > 0 && this.scriptLevel > 0) {
					    if (milliSecDelay > 0) this.delayMillis (-milliSecDelay);
					    this.viewer.scriptEcho ("$[" + this.scriptLevel + "." + this.lineNumbers[this.pc] + "." + (this.pc + 1) + "] " + this.thisCommand);
					}}if (this.vProcess != null && (this.theTok != 1150985 || this.statementLength < 2 || this.statement[1].tok != 102439)) {
					    this.vProcess.add (this.statement);
					    continue;
					}if (this.isSyntaxCheck) {
					    if (this.isCmdLine_c_or_C_Option) org.jmol.util.Logger.info (this.thisCommand);
					    if (this.statementLength == 1 && this.statement[0].tok != 135368713 && this.statement[0].tok != 102436) continue;
					} else {
					    if (this.debugScript) this.logDebugScript (0);
					    if (this.scriptLevel == 0 && this.viewer.logCommands ()) this.viewer.log (this.thisCommand);
					    if (this.logMessages && this.theToken != null) org.jmol.util.Logger.debug (this.theToken.toString ());
					}if (this.theToken == null) continue;
				    if (org.jmol.script.Token.tokAttr (this.theToken.tok, 135168)) this.processShapeCommand (this.theToken.tok);
				    else switch (this.theToken.tok) {
				    case 0:
					if (this.isSyntaxCheck || !this.viewer.getMessageStyleChime ()) break;
					var s = this.theToken.value;
					if (s == null) break;
					if (this.outputBuffer == null) this.viewer.showMessage (s);
					this.scriptStatusOrBuffer (s);
					break;
				    case 266280:
					this.pushContext (this.theToken);
					break;
				    case 266278:
					this.popContext (true, false);
					break;
				    case 269484066:
					break;
				    case 20500:
				    case 528410:
					if (this.viewer.isHeadless ()) break;
				    case 102412:
				    case 102407:
				    case 102408:
				    case 364547:
				    case 102402:
				    case 1150985:
				    case 364548:
				    case 135369224:
				    case 135369225:
				    case 102410:
				    case 102411:
				    case 102413:
				    case 102439:
				    case 102406:
					isForCheck = this.flowControl (this.theToken.tok, isForCheck);
					break;
				    case 4097:
					this.animation ();
					break;
				    case 4098:
					this.assign ();
					break;
				    case 1610616835:
					this.background (1);
					break;
				    case 4100:
					this.bind ();
					break;
				    case 4101:
					this.bondorder ();
					break;
				    case 4102:
					this.calculate ();
					break;
				    case 135270422:
					this.cache ();
					break;
				    case 1069064:
					this.cd ();
					break;
				    case 12289:
					this.center (1);
					break;
				    case 4105:
					this.centerAt ();
					break;
				    case 1766856708:
					this.color ();
					break;
				    case 135270405:
					this.compare ();
					break;
				    case 1095766022:
					this.configuration ();
					break;
				    case 4106:
					this.connect (1);
					break;
				    case 528395:
					this.console ();
					break;
				    case 135270407:
					this.data ();
					break;
				    case 1060866:
					this.define ();
					break;
				    case 528397:
					this.delay ();
					break;
				    case 12291:
					this.$delete ();
					break;
				    case 554176526:
					this.slab (true);
					break;
				    case 1610625028:
					this.display (true);
					break;
				    case 266255:
				    case 266281:
					if (this.isSyntaxCheck) break;
					if (this.pc > 0 && this.theToken.tok == 266255) this.viewer.clearScriptQueue ();
					this.interruptExecution = (this.pc > 0 || !this.viewer.usingScriptQueue ());
					break;
				    case 266256:
					if (this.isSyntaxCheck) return;
					this.viewer.exitJmol ();
					break;
				    case 1229984263:
					this.file ();
					break;
				    case 1060869:
					this.fixed ();
					break;
				    case 4114:
					this.font (-1, 0);
					break;
				    case 4115:
				    case 1095766028:
					this.frame (1);
					break;
				    case 102436:
				    case 135368713:
				    case 1073741824:
					this.$function ();
					break;
				    case 135270410:
					this.getProperty ();
					break;
				    case 20482:
					this.help ();
					break;
				    case 12294:
					this.display (false);
					break;
				    case 1612189718:
					this.hbond ();
					break;
				    case 1610616855:
					this.history (1);
					break;
				    case 544771:
					this.hover ();
					break;
				    case 266264:
					if (!this.isSyntaxCheck) this.viewer.initialize (!this.isStateScript);
					break;
				    case 4121:
					this.invertSelected ();
					break;
				    case 135287308:
					this.script (135287308, null, false);
					break;
				    case 135271426:
					this.load ();
					break;
				    case 36869:
					this.log ();
					break;
				    case 1052700:
					this.mapProperty ();
					break;
				    case 20485:
					this.message ();
					break;
				    case 4126:
					this.minimize ();
					break;
				    case 4128:
					this.move ();
					break;
				    case 4130:
					this.moveto ();
					break;
				    case 4131:
					this.navigate ();
					break;
				    case 20487:
					this.pause ();
					break;
				    case 4133:
				    case 135270417:
				    case 1052714:
					this.plot (this.statement);
					break;
				    case 36865:
					this.print ();
					break;
				    case 135304707:
					this.prompt ();
					break;
				    case 4139:
				    case 4165:
					this.undoRedoMove ();
					break;
				    case 266284:
					this.refresh ();
					break;
				    case 4141:
					this.reset ();
					break;
				    case 4142:
					this.restore ();
					break;
				    case 12295:
					this.restrict ();
					break;
				    case 266287:
					if (!this.isSyntaxCheck) this.resumePausedExecution ();
					break;
				    case 36866:
					this.returnCmd (null);
					break;
				    case 528432:
					this.rotate (false, false);
					break;
				    case 4145:
					this.rotate (false, true);
					break;
				    case 4146:
					this.save ();
					break;
				    case 1085443:
					this.set ();
					break;
				    case 135271429:
					this.script (135271429, null, doList);
					break;
				    case 135280132:
					this.select (1);
					break;
				    case 1611141171:
					this.selectionHalo (1);
					break;
				    case 4148:
					this.show ();
					break;
				    case 554176565:
					this.slab (false);
					break;
				    case 1611141175:
					this.rotate (true, false);
					break;
				    case 1611141176:
					this.ssbond ();
					break;
				    case 266298:
					if (this.pause ()) this.stepPausedExecution ();
					break;
				    case 528443:
					this.stereo ();
					break;
				    case 1641025539:
					this.structure ();
					break;
				    case 3158024:
					this.subset ();
					break;
				    case 4156:
					this.sync ();
					break;
				    case 536875070:
					this.timeout (1);
					break;
				    case 4160:
					this.translate (false);
					break;
				    case 4162:
					this.translate (true);
					break;
				    case 4164:
					this.unbind ();
					break;
				    case 4166:
					this.vibration ();
					break;
				    case 135270421:
					this.write (null);
					break;
				    case 1060873:
					this.zap (true);
					break;
				    case 4168:
					this.zoom (false);
					break;
				    case 4170:
					this.zoom (true);
					break;
				    default:
					this.error (47);
				    }
				    this.setCursorWait (false);
				    if (this.executionStepping) {
					this.executionPaused = (this.isCommandDisplayable (this.pc + 1));
				    }}
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "cache", 
			    ($fz = function () {
				this.checkLength (3);
				var tok = this.tokAt (1);
				var fileName = this.parameterAsString (2);
				switch (tok) {
				case 1276118017:
				case 1073742119:
				    if (!this.isSyntaxCheck) {
					if (tok == 1073742119 && this.tokAt (2) == 1048579) fileName = null;
					var nBytes = this.viewer.cacheFileByName (fileName, tok == 1276118017);
					this.showString (nBytes < 0 ? "cache cleared" : nBytes + " bytes " + (tok == 1276118017 ? " cached" : " removed"));
				    }break;
				default:
				    this.error (22);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setCursorWait", 
			    ($fz = function (TF) {
				if (!this.isSyntaxCheck) this.viewer.setCursor (TF ? 4 : 0);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "processShapeCommand", 
			    ($fz = function (tok) {
				var iShape = 0;
				switch (tok) {
				case 1611272194:
				    iShape = 30;
				    break;
				case 1115297793:
				    iShape = 9;
				    break;
				case 1679429641:
				    iShape = 31;
				    break;
				case 1113200642:
				    iShape = 11;
				    break;
				case 135402505:
				    iShape = 24;
				    break;
				case 135174:
				    iShape = 17;
				    break;
				case 1113198595:
				    iShape = 16;
				    break;
				case 135176:
				    iShape = 22;
				    break;
				case 537022465:
				    iShape = 29;
				    break;
				case 1113198596:
				    iShape = 20;
				    break;
				case 1611272202:
				    iShape = 34;
				    break;
				case 1113198597:
				    iShape = 19;
				    break;
				case 1113200646:
				    iShape = 8;
				    break;
				case 135180:
				    iShape = 23;
				    break;
				case 1826248715:
				    iShape = 5;
				    break;
				case 135182:
				    iShape = 25;
				    break;
				case 537006096:
				case 1746538509:
				    iShape = 6;
				    break;
				case 1113200647:
				    iShape = 13;
				    break;
				case 1183762:
				    iShape = 26;
				    break;
				case 135190:
				    iShape = 28;
				    break;
				case 135188:
				    iShape = 27;
				    break;
				case 135192:
				    iShape = 21;
				    break;
				case 1113200649:
				    iShape = 14;
				    break;
				case 1113200650:
				    iShape = 15;
				    break;
				case 1113200651:
				    iShape = 0;
				    break;
				case 1113200652:
				    iShape = 7;
				    break;
				case 1650071565:
				    iShape = 12;
				    break;
				case 1708058:
				    iShape = 4;
				    break;
				case 1113200654:
				    iShape = 10;
				    break;
				case 1614417948:
				    iShape = 32;
				    break;
				case 135198:
				    iShape = 18;
				    break;
				case 659488:
				    iShape = 1;
				    break;
				default:
				    this.error (47);
				}
				switch (tok) {
				case 1115297793:
				case 1113200642:
				case 1113200647:
				case 1113200649:
				case 1113200650:
				case 1650071565:
				case 1113200654:
				    this.proteinShape (iShape);
				    return;
				case 1113198595:
				case 1113198597:
				    this.dots (iShape);
				    return;
				case 1113198596:
				    this.ellipsoid ();
				    return;
				case 1113200646:
				case 1113200651:
				case 1113200652:
				    this.setAtomShapeSize (iShape, (tok == 1113200646 ? -1.0 : 1));
				    return;
				case 1826248715:
				    this.label (1);
				    return;
				case 135182:
				    this.lcaoCartoon ();
				    return;
				case 135192:
				    this.polyhedra ();
				    return;
				case 1708058:
				    this.struts ();
				    return;
				case 135198:
				    this.vector ();
				    return;
				case 659488:
				    this.wireframe ();
				    return;
				}
				switch (tok) {
				case 1611272194:
				    this.axes (1);
				    return;
				case 1679429641:
				    this.boundbox (1);
				    return;
				case 135402505:
				    this.contact ();
				    return;
				case 135174:
				    this.dipole ();
				    return;
				case 135176:
				    this.draw ();
				    return;
				case 537022465:
				    this.echo (1, false);
				    return;
				case 1611272202:
				    this.frank (1);
				    return;
				case 135180:
				case 135190:
				case 135188:
				    this.isosurface (iShape);
				    return;
				case 537006096:
				case 1746538509:
				    this.measure ();
				    return;
				case 1183762:
				    this.mo (false);
				    return;
				case 1614417948:
				    this.unitcell (1);
				    return;
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "flowControl", 
			    ($fz = function (tok, isForCheck) {
				var ct;
				switch (tok) {
				case 20500:
				    this.gotoCmd (this.parameterAsString (this.checkLast (1)));
				    return isForCheck;
				case 528410:
				    this.delay ();
				    if (!this.isSyntaxCheck) this.pc = -1;
				    return isForCheck;
				}
				var pt = this.statement[0].intValue;
				var isDone = (pt < 0 && !this.isSyntaxCheck);
				var isOK = true;
				var ptNext = 0;
				switch (tok) {
				case 102412:
				    ct = this.theToken;
				    this.pushContext (ct);
				    if (!isDone && ct.name0 != null) this.contextVariables.put (ct.name0, ct.contextVariables.get (ct.name0));
				    isOK = !isDone;
				    break;
				case 102439:
				    this.pushContext (this.theToken);
				    isDone = isOK = true;
				    this.addProcess (this.pc, pt, true);
				    break;
				case 102410:
				case 102413:
				case 102411:
				    ptNext = Math.abs (this.aatoken[Math.abs (pt)][0].intValue);
				    switch (isDone ? 0 : this.switchCmd (this.theToken, tok)) {
				    case 0:
					ptNext = -ptNext;
					isOK = false;
					break;
				    case -1:
					isOK = false;
					break;
				    case 1:
				    }
				    this.aatoken[this.pc][0].intValue = Math.abs (pt);
				    this.theToken = this.aatoken[Math.abs (pt)][0];
				    if (this.theToken.tok != 1150985) this.theToken.intValue = ptNext;
				    break;
				case 135369225:
				case 102402:
				    isOK = (!isDone && this.ifCmd ());
				    if (this.isSyntaxCheck) break;
				    ptNext = Math.abs (this.aatoken[Math.abs (pt)][0].intValue);
				    ptNext = (isDone || isOK ? -ptNext : ptNext);
				    this.aatoken[Math.abs (pt)][0].intValue = ptNext;
				    if (tok == 102412) this.aatoken[this.pc][0].intValue = -pt;
				    break;
				case 364547:
				    this.checkLength (1);
				    if (pt < 0 && !this.isSyntaxCheck) this.pc = -pt - 1;
				    break;
				case 364548:
				    this.checkLength (1);
				    break;
				case 102406:
				    if (!isForCheck) this.pushContext (this.theToken);
				    isForCheck = false;
				    if (!this.ifCmd () && !this.isSyntaxCheck) {
					this.pc = pt;
					this.popContext (true, false);
				    }break;
				case 102407:
				    if (!this.isSyntaxCheck) {
					this.breakCmd (pt);
					break;
				    }if (this.statementLength == 1) break;
				    var n = this.intParameter (this.checkLast (1));
				    if (this.isSyntaxCheck) break;
				    for (var i = 0; i < n; i++) this.popContext (true, false);

				    break;
				case 102408:
				    isForCheck = true;
				    if (!this.isSyntaxCheck) this.pc = pt - 1;
				    if (this.statementLength > 1) this.intParameter (this.checkLast (1));
				    break;
				case 135369224:
				    var token = this.theToken;
				    var pts =  Clazz.newIntArray (2, 0);
				    var j = 0;
				    var bsOrList = null;
				    for (var i = 1, nSkip = 0; i < this.statementLength && j < 2; i++) {
					switch (this.tokAt (i)) {
					case 1048591:
					    if (nSkip > 0) nSkip--;
					    else pts[j++] = i;
					    break;
					case 1073741980:
					    nSkip -= 2;
					    if (this.tokAt (++i) == 1048577 || this.tokAt (i) == 10) {
						bsOrList = this.atomExpressionAt (i);
						if (this.isBondSet) bsOrList =  new org.jmol.modelset.Bond.BondSet (bsOrList);
					    } else {
						var what = this.parameterExpressionList (-i, 1, false);
						if (what == null || what.size () < 1) this.error (22);
						var vl = what.get (0);
						switch (vl.tok) {
						case 10:
						    bsOrList = org.jmol.script.ScriptVariable.getBitSet (vl, false);
						    break;
						case 7:
						    bsOrList = vl.getList ();
						    break;
						default:
						    this.error (22);
						}
					    }i = this.iToken;
					    break;
					case 135280132:
					    nSkip += 2;
					    break;
					}
				    }
				    if (isForCheck) {
					j = (bsOrList == null ? pts[1] + 1 : 2);
				    } else {
					this.pushContext (token);
					j = 2;
				    }if (this.tokAt (j) == 36868) j++;
				    var key = this.parameterAsString (j);
				    var isMinusMinus = key.equals ("--") || key.equals ("++");
				    if (isMinusMinus) {
					key = this.parameterAsString (++j);
				    }var v = null;
				    if (org.jmol.script.Token.tokAttr (this.tokAt (j), 1073741824) || (v = this.getContextVariableAsVariable (key)) != null) {
					if (bsOrList == null && !isMinusMinus && this.getToken (++j).tok != 269484436) this.error (22);
					if (bsOrList == null) {
					    if (isMinusMinus) j -= 2;
					    this.setVariable (++j, this.statementLength - 1, key, 0);
					} else {
					    isOK = true;
					    var key_incr = (key + "_incr");
					    if (v == null) v = this.getContextVariableAsVariable (key_incr);
					    if (v == null) {
						if (key.startsWith ("_")) this.error (22);
						v = this.viewer.getOrSetNewVariable (key_incr, true);
					    }if (!isForCheck || v.tok != 10 && v.tok != 7 || v.intValue == 2147483647) {
						if (isForCheck) {
						    isOK = false;
						} else {
						    v.set (org.jmol.script.ScriptVariable.getVariable (bsOrList), false);
						    v.intValue = 1;
						}} else {
						    v.intValue++;
						}isOK = isOK && (Clazz.instanceOf (bsOrList, org.jmol.util.BitSet) ? org.jmol.script.ScriptVariable.bsSelectVar (v).cardinality () == 1 : v.intValue <= v.getList ().size ());
					    if (isOK) {
						v = org.jmol.script.ScriptVariable.selectItemVar (v);
						var t = this.getContextVariableAsVariable (key);
						if (t == null) t = this.viewer.getOrSetNewVariable (key, true);
						t.set (v, false);
					    }}}if (bsOrList == null) isOK = this.parameterExpressionBoolean (pts[0] + 1, pts[1]);
				    pt++;
				    if (!isOK) this.popContext (true, false);
				    isForCheck = false;
				    break;
				case 1150985:
				    switch (this.getToken (this.checkLast (1)).tok) {
				    case 364558:
					var trycmd = this.getToken (1).value;
					if (this.isSyntaxCheck) return false;
					var cv = this.runFunctionRet (trycmd, "try", null, null, true, true).value;
					var ret = cv.get ("_tryret");
					if (ret.value != null || ret.intValue != 2147483647) {
					    this.returnCmd (ret);
					    return false;
					}var errMsg = (cv.get ("_errorval")).value;
					if (errMsg.length == 0) {
					    var iBreak = (cv.get ("_breakval")).intValue;
					    if (iBreak != 2147483647) {
						this.breakCmd (this.pc - iBreak);
						return false;
					    }}if (this.pc + 1 < this.aatoken.length && this.aatoken[this.pc + 1][0].tok == 102412) {
						ct = this.aatoken[this.pc + 1][0];
						if (ct.contextVariables != null && ct.name0 != null) ct.contextVariables.put (ct.name0, org.jmol.script.ScriptVariable.newVariable (4, errMsg));
						ct.intValue = (errMsg.length > 0 ? 1 : -1) * Math.abs (ct.intValue);
					    }return false;
				    case 102412:
					this.popContext (true, false);
					break;
				    case 135368713:
				    case 102436:
					this.viewer.addFunction (this.theToken.value);
					return isForCheck;
				    case 102439:
					this.addProcess (pt, this.pc, false);
					this.popContext (true, false);
					break;
				    case 102410:
					if (pt > 0 && this.switchCmd (this.aatoken[pt][0], 0) == -1) {
					    for (; pt < this.pc; pt++) if ((tok = this.aatoken[pt][0].tok) != 102413 && tok != 102411) break;

					    isOK = (this.pc == pt);
					}break;
				    }
				    if (isOK) isOK = (this.theTok == 102412 || this.theTok == 102439 || this.theTok == 135369225 || this.theTok == 102410);
				    isForCheck = (this.theTok == 135369224 || this.theTok == 102406);
				    break;
				}
				if (!isOK && !this.isSyntaxCheck) this.pc = Math.abs (pt) - 1;
				return isForCheck;
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "gotoCmd", 
			    ($fz = function (strTo) {
				var pcTo = (strTo == null ? this.aatoken.length - 1 : -1);
				var s = null;
				for (var i = pcTo + 1; i < this.aatoken.length; i++) {
				    var tokens = this.aatoken[i];
				    var tok = tokens[0].tok;
				    switch (tok) {
				    case 20485:
				    case 0:
					s = tokens[tokens.length - 1].value;
					if (tok == 0) s = s.substring (s.startsWith ("#") ? 1 : 2);
					break;
				    default:
					continue;
				    }
				    if (s.equalsIgnoreCase (strTo)) {
					pcTo = i;
					break;
				    }}
				if (pcTo < 0) this.error (22);
				if (strTo == null) pcTo = 0;
				var di = (pcTo < this.pc ? 1 : -1);
				var nPush = 0;
				for (var i = pcTo; i != this.pc; i += di) {
				    switch (this.aatoken[i][0].tok) {
				    case 266280:
				    case 102439:
				    case 135369224:
				    case 102412:
				    case 102406:
					nPush++;
					break;
				    case 266278:
					nPush--;
					break;
				    case 1150985:
					switch (this.aatoken[i][1].tok) {
					case 102439:
					case 135369224:
					case 102412:
					case 102406:
					    nPush--;
					}
					break;
				    }
				}
				if (strTo == null) {
				    pcTo = 2147483647;
				    for (; nPush > 0; --nPush) this.popContext (false, false);

				}if (nPush != 0) this.error (22);
				if (!this.isSyntaxCheck) this.pc = pcTo - 1;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "breakCmd", 
			    ($fz = function (pt) {
				if (pt < 0) {
				    this.getContextVariableAsVariable ("_breakval").intValue = -pt;
				    this.pcEnd = this.pc;
				    return;
				}this.pc = Math.abs (this.aatoken[pt][0].intValue);
				var tok = this.aatoken[pt][0].tok;
				if (tok == 102411 || tok == 102413) {
				    this.theToken = this.aatoken[this.pc--][0];
				    var ptNext = Math.abs (this.theToken.intValue);
				    if (this.theToken.tok != 1150985) this.theToken.intValue = -ptNext;
				} else {
				    while (this.thisContext != null && !org.jmol.script.ScriptCompiler.isBreakableContext (this.thisContext.token.tok)) this.popContext (true, false);

				    this.popContext (true, false);
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "addProcess", 
			    ($fz = function (pc, pt, isStart) {
				if (this.parallelProcessor == null) return;
				if (isStart) {
				    this.vProcess =  new java.util.ArrayList ();
				} else {
				    var statements =  new Array (pt);
				    for (var i = 0; i < this.vProcess.size (); i++) statements[i + 1 - pc] = this.vProcess.get (i);

				    var context = this.getScriptContext ();
				    context.aatoken = statements;
				    context.pc = 1 - pc;
				    context.pcEnd = pt;
				    this.parallelProcessor.addProcess ("p" + (($t$ = ++ org.jmol.script.ScriptEvaluator.iProcess, org.jmol.script.ScriptEvaluator.prototype.iProcess = org.jmol.script.ScriptEvaluator.iProcess, $t$)), context);
				    this.vProcess = null;
				}}, $fz.isPrivate = true, $fz), "~N,~N,~B");
	Clazz.defineMethod (c$, "switchCmd", 
			    ($fz = function (c, tok) {
				if (tok == 102410) c.addName ("_var");
				var $var = c.contextVariables.get ("_var");
				if ($var == null) return 1;
				if (tok == 0) {
				    c.contextVariables.remove ("_var");
				    return -1;
				}if (tok == 102413) return -1;
				var v = this.parameterExpressionToken (1);
				if (tok == 102411) {
				    var isOK = org.jmol.script.ScriptVariable.areEqual ($var, v);
				    if (isOK) c.contextVariables.remove ("_var");
				    return isOK ? 1 : -1;
				}c.contextVariables.put ("_var", v);
				return 1;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ContextToken,~N");
	Clazz.defineMethod (c$, "ifCmd", 
			    ($fz = function () {
				return this.parameterExpressionBoolean (1, 0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "returnCmd", 
			    ($fz = function (tv) {
				var t = this.getContextVariableAsVariable ("_retval");
				if (t == null) {
				    if (!this.isSyntaxCheck) this.gotoCmd (null);
				    return;
				}var v = (tv != null || this.statementLength == 1 ? null : this.parameterExpressionToken (1));
				if (this.isSyntaxCheck) return;
				if (tv == null) tv = (v == null ?  new org.jmol.script.ScriptVariableInt (0) : v);
				t.value = tv.value;
				t.intValue = tv.intValue;
				t.tok = tv.tok;
				this.gotoCmd (null);
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "help", 
			    ($fz = function () {
				if (this.isSyntaxCheck) return;
				var what = this.optParameterAsString (1).toLowerCase ();
				var pt = 0;
				if (what.startsWith ("mouse") && (pt = what.indexOf (" ")) >= 0 && pt == what.lastIndexOf (" ")) {
				    this.showString (this.viewer.getBindingInfo (what.substring (pt + 1)));
				    return;
				}if (org.jmol.script.Token.tokAttr (org.jmol.script.Token.getTokFromName (what), 4096)) what = "?command=" + what;
				this.viewer.getHelp (what);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "move", 
			    ($fz = function () {
				if (this.statementLength > 11) this.error (2);
				var dRot = org.jmol.util.Vector3f.new3 (this.floatParameter (1), this.floatParameter (2), this.floatParameter (3));
				var dZoom = this.floatParameter (4);
				var dTrans = org.jmol.util.Vector3f.new3 (this.intParameter (5), this.intParameter (6), this.intParameter (7));
				var dSlab = this.floatParameter (8);
				var floatSecondsTotal = this.floatParameter (9);
				var fps = (this.statementLength == 11 ? this.intParameter (10) : 30);
				if (this.isSyntaxCheck) return;
				this.refresh ();
				this.viewer.move (dRot, dZoom, dTrans, dSlab, floatSecondsTotal, fps);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "moveto", 
			    ($fz = function () {
				if (this.statementLength == 2 && this.tokAt (1) == 1073742162) {
				    if (!this.isSyntaxCheck) this.viewer.stopMotion ();
				    return;
				}if (this.statementLength == 2 && this.isFloatParameter (1)) {
				    var f = this.floatParameter (1);
				    if (this.isSyntaxCheck) return;
				    if (f > 0) this.refresh ();
				    this.viewer.moveTo (f, null, org.jmol.viewer.JmolConstants.axisZ, 0, null, 100, 0, 0, 0, null, NaN, NaN, NaN);
				    return;
				}var axis = org.jmol.util.Vector3f.new3 (NaN, 0, 0);
				var center = null;
				var i = 1;
				var floatSecondsTotal = (this.isFloatParameter (i) ? this.floatParameter (i++) : 2.0);
				var degrees = 90;
				var bsCenter = null;
				switch (this.getToken (i).tok) {
				case 135270417:
				    var q;
				    var isMolecular = false;
				    if (this.tokAt (++i) == 1073742030) {
					isMolecular = true;
					i++;
				    }if (this.tokAt (i) == 10 || this.tokAt (i) == 1048577) {
					isMolecular = true;
					center = this.centerParameter (i);
					if (!(Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet))) this.error (22);
					bsCenter = this.expressionResult;
					q = (this.isSyntaxCheck ?  new org.jmol.util.Quaternion () : this.viewer.getAtomQuaternion (bsCenter.nextSetBit (0)));
				    } else {
					q = this.getQuaternionParameter (i);
				    }i = this.iToken + 1;
				    if (q == null) this.error (22);
				    var aa = q.toAxisAngle4f ();
				    axis.set (aa.x, aa.y, aa.z);
				    degrees = (isMolecular ? -1 : 1) * (aa.angle * 180.0 / 3.141592653589793);
				    break;
				case 9:
				case 8:
				case 1048586:
				    if (this.isPoint3f (i)) {
					axis.setT (this.getPoint3f (i, true));
					i = this.iToken + 1;
					degrees = this.floatParameter (i++);
				    } else {
					var pt4 = this.getPoint4f (i);
					i = this.iToken + 1;
					axis.set (pt4.x, pt4.y, pt4.z);
					degrees = (pt4.x == 0 && pt4.y == 0 && pt4.z == 0 ? NaN : pt4.w);
				    }break;
				case 1073741954:
				    axis.set (1, 0, 0);
				    degrees = 0;
				    this.checkLength (++i);
				    break;
				case 1073741860:
				    axis.set (0, 1, 0);
				    degrees = 180;
				    this.checkLength (++i);
				    break;
				case 1073741996:
				    axis.set (0, 1, 0);
				    this.checkLength (++i);
				    break;
				case 1073742128:
				    axis.set (0, -1, 0);
				    this.checkLength (++i);
				    break;
				case 1074790748:
				    axis.set (1, 0, 0);
				    this.checkLength (++i);
				    break;
				case 1073741871:
				    axis.set (-1, 0, 0);
				    this.checkLength (++i);
				    break;
				default:
				    axis = org.jmol.util.Vector3f.new3 (this.floatParameter (i++), this.floatParameter (i++), this.floatParameter (i++));
				    degrees = this.floatParameter (i++);
				}
				if (Float.isNaN (axis.x) || Float.isNaN (axis.y) || Float.isNaN (axis.z)) axis.set (0, 0, 0);
				else if (axis.length () == 0 && degrees == 0) degrees = NaN;
				var isChange = !this.viewer.isInPosition (axis, degrees);
				var zoom = (this.isFloatParameter (i) ? this.floatParameter (i++) : NaN);
				var xTrans = 0;
				var yTrans = 0;
				if (this.isFloatParameter (i) && !this.isCenterParameter (i)) {
				    xTrans = this.floatParameter (i++);
				    yTrans = this.floatParameter (i++);
				    if (!isChange && Math.abs (xTrans - this.viewer.getTranslationXPercent ()) >= 1) isChange = true;
				    if (!isChange && Math.abs (yTrans - this.viewer.getTranslationYPercent ()) >= 1) isChange = true;
				}if (bsCenter == null && i != this.statementLength) {
				    center = this.centerParameter (i);
				    if (Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet)) bsCenter = this.expressionResult;
				    i = this.iToken + 1;
				}var rotationRadius = NaN;
				var zoom0 = this.viewer.getZoomSetting ();
				if (center != null) {
				    if (!isChange && center.distance (this.viewer.getRotationCenter ()) >= 0.1) isChange = true;
				    if (this.isFloatParameter (i)) rotationRadius = this.floatParameter (i++);
				    if (!this.isCenterParameter (i)) {
					if ((rotationRadius == 0 || Float.isNaN (rotationRadius)) && (zoom == 0 || Float.isNaN (zoom))) {
					    var newZoom = Math.abs (this.getZoom (0, i, bsCenter, (zoom == 0 ? 0 : zoom0)));
					    i = this.iToken + 1;
					    zoom = newZoom;
					} else {
					    if (!isChange && Math.abs (rotationRadius - this.viewer.getRotationRadius ()) >= 0.1) isChange = true;
					}}}if (zoom == 0 || Float.isNaN (zoom)) zoom = 100;
				if (Float.isNaN (rotationRadius)) rotationRadius = 0;
				if (!isChange && Math.abs (zoom - zoom0) >= 1) isChange = true;
				var navCenter = null;
				var xNav = NaN;
				var yNav = NaN;
				var navDepth = NaN;
				if (i != this.statementLength) {
				    navCenter = this.centerParameter (i);
				    i = this.iToken + 1;
				    if (i != this.statementLength) {
					xNav = this.floatParameter (i++);
					yNav = this.floatParameter (i++);
				    }if (i != this.statementLength) navDepth = this.floatParameter (i++);
				}if (i != this.statementLength) this.error (2);
				if (this.isSyntaxCheck) return;
				if (!isChange) floatSecondsTotal = 0;
				if (floatSecondsTotal > 0) this.refresh ();
				this.viewer.moveTo (floatSecondsTotal, center, axis, degrees, null, zoom, xTrans, yTrans, rotationRadius, navCenter, xNav, yNav, navDepth);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "navigate", 
			    ($fz = function () {
				if (this.statementLength == 1) {
				    this.setBooleanProperty ("navigationMode", true);
				    return;
				}var rotAxis = org.jmol.util.Vector3f.new3 (0, 1, 0);
				var pt;
				if (this.statementLength == 2) {
				    switch (this.getToken (1).tok) {
				    case 1048589:
				    case 1048588:
					if (this.isSyntaxCheck) return;
					this.setObjectMad (30, "axes", 1);
					this.setShapeProperty (30, "position", org.jmol.util.Point3f.new3 (50, 50, 3.4028235E38));
					this.setBooleanProperty ("navigationMode", true);
					this.viewer.setNavOn (this.theTok == 1048589);
					return;
				    case 1073742162:
					if (!this.isSyntaxCheck) this.viewer.setNavXYZ (0, 0, 0);
					return;
				    case 8:
					break;
				    default:
					this.error (22);
				    }
				}if (!this.viewer.getNavigationMode ()) this.setBooleanProperty ("navigationMode", true);
				for (var i = 1; i < this.statementLength; i++) {
				    var timeSec = (this.isFloatParameter (i) ? this.floatParameter (i++) : 2);
				    if (timeSec < 0) this.error (22);
				    if (!this.isSyntaxCheck && timeSec > 0) this.refresh ();
				    switch (this.getToken (i).tok) {
				    case 8:
				    case 1048586:
					pt = this.getPoint3f (i, true);
					this.iToken++;
					if (this.iToken != this.statementLength) this.error (22);
					if (this.isSyntaxCheck) return;
					this.viewer.setNavXYZ (pt.x, pt.y, pt.z);
					return;
				    case 554176526:
					var depth = this.floatParameter (++i);
					if (!this.isSyntaxCheck) this.viewer.setNavigationDepthPercent (timeSec, depth);
					continue;
				    case 12289:
					pt = this.centerParameter (++i);
					i = this.iToken;
					if (!this.isSyntaxCheck) this.viewer.navigatePt (timeSec, pt);
					continue;
				    case 528432:
					switch (this.getToken (++i).tok) {
					case 1112541205:
					    rotAxis.set (1, 0, 0);
					    i++;
					    break;
					case 1112541206:
					    rotAxis.set (0, 1, 0);
					    i++;
					    break;
					case 1112541207:
					    rotAxis.set (0, 0, 1);
					    i++;
					    break;
					case 8:
					case 1048586:
					    rotAxis.setT (this.getPoint3f (i, true));
					    i = this.iToken + 1;
					    break;
					case 1073741824:
					    this.error (22);
					    break;
					}
					var degrees = this.floatParameter (i);
					if (!this.isSyntaxCheck) this.viewer.navigateAxis (timeSec, rotAxis, degrees);
					continue;
				    case 4160:
					var x = NaN;
					var y = NaN;
					if (this.isFloatParameter (++i)) {
					    x = this.floatParameter (i);
					    y = this.floatParameter (++i);
					} else {
					    switch (this.tokAt (i)) {
					    case 1112541205:
						x = this.floatParameter (++i);
						break;
					    case 1112541206:
						y = this.floatParameter (++i);
						break;
					    default:
						pt = this.centerParameter (i);
						i = this.iToken;
						if (!this.isSyntaxCheck) this.viewer.navTranslate (timeSec, pt);
						continue;
					    }
					}if (!this.isSyntaxCheck) this.viewer.navTranslatePercent (timeSec, x, y);
					continue;
				    case 269484208:
					continue;
				    case 1113200654:
					var pathGuide;
					var vp =  new java.util.ArrayList ();
					var bs = this.atomExpressionAt (++i);
					i = this.iToken;
					if (this.isSyntaxCheck) return;
					this.viewer.getPolymerPointsAndVectors (bs, vp);
					var n;
					if ((n = vp.size ()) > 0) {
					    pathGuide =  new Array (n);
					    for (var j = 0; j < n; j++) {
						pathGuide[j] = vp.get (j);
					    }
					    this.viewer.navigateGuide (timeSec, pathGuide);
					    continue;
					}break;
				    case 3145756:
					if (i != 1) this.error (22);
					if (this.isSyntaxCheck) return;
					this.viewer.navigateSurface (timeSec, this.optParameterAsString (2));
					continue;
				    case 1073742084:
					var path;
					var theta = null;
					if (this.getToken (i + 1).tok == 1048583) {
					    i++;
					    var pathID = this.objectNameParameter (++i);
					    if (this.isSyntaxCheck) return;
					    this.setShapeProperty (22, "thisID", pathID);
					    path = this.getShapeProperty (22, "vertices");
					    this.refresh ();
					    if (path == null) this.error (22);
					    var indexStart = Clazz.floatToInt (this.isFloatParameter (i + 1) ? this.floatParameter (++i) : 0);
					    var indexEnd = Clazz.floatToInt (this.isFloatParameter (i + 1) ? this.floatParameter (++i) : 2147483647);
					    if (!this.isSyntaxCheck) this.viewer.navigatePath (timeSec, path, theta, indexStart, indexEnd);
					    continue;
					}var v =  new java.util.ArrayList ();
					while (this.isCenterParameter (i + 1)) {
					    v.add (this.centerParameter (++i));
					    i = this.iToken;
					}
					if (v.size () > 0) {
					    path = v.toArray ( new Array (v.size ()));
					    if (!this.isSyntaxCheck) this.viewer.navigatePath (timeSec, path, theta, 0, 2147483647);
					    continue;
					}default:
					this.error (22);
				    }
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "bondorder", 
			    ($fz = function () {
				this.checkLength (-3);
				var order = 0;
				switch (this.getToken (1).tok) {
				case 2:
				case 3:
				    if ((order = org.jmol.util.JmolEdge.getBondOrderFromFloat (this.floatParameter (1))) == 131071) this.error (22);
				    break;
				default:
				    if ((order = org.jmol.script.ScriptEvaluator.getBondOrderFromString (this.parameterAsString (1))) == 131071) this.error (22);
				    if (order == 33 && this.tokAt (2) == 3) {
					order = org.jmol.script.ScriptEvaluator.getPartialBondOrderFromFloatEncodedInt (this.statement[2].intValue);
				    }}
				this.setShapeProperty (1, "bondOrder", Integer.$valueOf (order));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "console", 
			    ($fz = function () {
				switch (this.getToken (1).tok) {
				case 1048588:
				    if (!this.isSyntaxCheck) this.viewer.showConsole (false);
				    break;
				case 1048589:
				    if (this.isSyntaxCheck) break;
				    this.viewer.showConsole (true);
				    break;
				default:
				    this.error (22);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "centerAt", 
			    ($fz = function () {
				var relativeTo = null;
				switch (this.getToken (1).tok) {
				case 1073741826:
				    relativeTo = "absolute";
				    break;
				case 96:
				    relativeTo = "average";
				    break;
				case 1679429641:
				    relativeTo = "boundbox";
				    break;
				default:
				    this.error (22);
				}
				var pt = org.jmol.util.Point3f.new3 (0, 0, 0);
				if (this.statementLength == 5) {
				    pt.x = this.floatParameter (2);
				    pt.y = this.floatParameter (3);
				    pt.z = this.floatParameter (4);
				} else if (this.isCenterParameter (2)) {
				    pt = this.centerParameter (2);
				    this.checkLast (this.iToken);
				} else {
				    this.checkLength (2);
				}if (!this.isSyntaxCheck) this.viewer.setCenterAt (relativeTo, pt);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "stereo", 
			    ($fz = function () {
				var stereoMode = org.jmol.constant.EnumStereoMode.DOUBLE;
				var degrees = -5;
				var degreesSeen = false;
				var colors = null;
				var colorpt = 0;
				for (var i = 1; i < this.statementLength; ++i) {
				    if (this.isColorParam (i)) {
					if (colorpt > 1) this.error (2);
					if (colorpt == 0) colors =  Clazz.newIntArray (2, 0);
					if (!degreesSeen) degrees = 3;
					colors[colorpt] = this.getArgbParam (i);
					if (colorpt++ == 0) colors[1] = ~colors[0];
					i = this.iToken;
					continue;
				    }switch (this.getToken (i).tok) {
				    case 1048589:
					this.checkLast (this.iToken = 1);
					this.iToken = 1;
					break;
				    case 1048588:
					this.checkLast (this.iToken = 1);
					stereoMode = org.jmol.constant.EnumStereoMode.NONE;
					break;
				    case 2:
				    case 3:
					degrees = this.floatParameter (i);
					degreesSeen = true;
					break;
				    case 1073741824:
					if (!degreesSeen) degrees = 3;
					stereoMode = org.jmol.constant.EnumStereoMode.getStereoMode (this.parameterAsString (i));
					if (stereoMode != null) break;
				    default:
					this.error (22);
				    }
				}
				if (this.isSyntaxCheck) return;
				this.viewer.setStereoMode (colors, stereoMode, degrees);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "compare", 
			    ($fz = function () {
				var isQuaternion = false;
				var doRotate = false;
				var doTranslate = false;
				var doAnimate = false;
				var nSeconds = NaN;
				var data1 = null;
				var data2 = null;
				var bsAtoms1 = null;
				var bsAtoms2 = null;
				var vAtomSets = null;
				var vQuatSets = null;
				var bsFrom = (this.tokAt (1) == 3158024 ? null : this.atomExpressionAt (1));
				var bsTo = (this.tokAt (++this.iToken) == 3158024 ? null : this.atomExpressionAt (this.iToken));
				if (bsFrom == null || bsTo == null) this.error (22);
				var bsSubset = null;
				var isSmiles = false;
				var strSmiles = null;
				var bs = org.jmol.util.BitSetUtil.copy (bsFrom);
				bs.or (bsTo);
				var isToSubsetOfFrom = bs.equals (bsFrom);
				var isFrames = isToSubsetOfFrom;
				for (var i = this.iToken + 1; i < this.statementLength; ++i) {
				    switch (this.getToken (i).tok) {
				    case 4115:
					isFrames = true;
					break;
				    case 135267336:
					isSmiles = true;
				    case 135267335:
					strSmiles = this.stringParameter (++i);
					break;
				    case 3:
				    case 2:
					nSeconds = Math.abs (this.floatParameter (i));
					if (nSeconds > 0) doAnimate = true;
					break;
				    case 269484080:
					break;
				    case 3158024:
					bsSubset = this.atomExpressionAt (++i);
					i = this.iToken;
					break;
				    case 10:
				    case 1048577:
					if (vQuatSets != null) this.error (22);
					bsAtoms1 = this.atomExpressionAt (this.iToken);
					var tok = (isToSubsetOfFrom ? 0 : this.tokAt (this.iToken + 1));
					bsAtoms2 = (tok == 10 || tok == 1048577 ? this.atomExpressionAt (++this.iToken) : org.jmol.util.BitSetUtil.copy (bsAtoms1));
					if (bsSubset != null) {
					    bsAtoms1.and (bsSubset);
					    bsAtoms2.and (bsSubset);
					}bsAtoms2.and (bsTo);
					if (vAtomSets == null) vAtomSets =  new java.util.ArrayList ();
					vAtomSets.add ([bsAtoms1, bsAtoms2]);
					i = this.iToken;
					break;
				    case 7:
					if (vAtomSets != null) this.error (22);
					isQuaternion = true;
					data1 = org.jmol.script.ScriptMathProcessor.getQuaternionArray ((this.theToken).getList (), 1073742001);
					this.getToken (++i);
					data2 = org.jmol.script.ScriptMathProcessor.getQuaternionArray ((this.theToken).getList (), 1073742001);
					if (vQuatSets == null) vQuatSets =  new java.util.ArrayList ();
					vQuatSets.add ([data1, data2]);
					break;
				    case 1073742077:
					isQuaternion = true;
					break;
				    case 135266320:
				    case 1141899265:
					isQuaternion = false;
					break;
				    case 528432:
					doRotate = true;
					break;
				    case 4160:
					doTranslate = true;
					break;
				    default:
					this.error (22);
				    }
				}
				if (this.isSyntaxCheck) return;
				if (isFrames) nSeconds = 0;
				if (Float.isNaN (nSeconds) || nSeconds < 0) nSeconds = 1;
				else if (!doRotate && !doTranslate) doRotate = doTranslate = true;
				doAnimate = (nSeconds != 0);
				var isAtoms = (!isQuaternion && strSmiles == null);
				if (vAtomSets == null && vQuatSets == null) {
				    if (bsSubset == null) {
					bsAtoms1 = (isAtoms ? this.viewer.getAtomBitSet ("spine") :  new org.jmol.util.BitSet ());
					if (bsAtoms1.nextSetBit (0) < 0) {
					    bsAtoms1 = bsFrom;
					    bsAtoms2 = bsTo;
					} else {
					    bsAtoms2 = org.jmol.util.BitSetUtil.copy (bsAtoms1);
					    bsAtoms1.and (bsFrom);
					    bsAtoms2.and (bsTo);
					}} else {
					    bsAtoms1 = org.jmol.util.BitSetUtil.copy (bsFrom);
					    bsAtoms2 = org.jmol.util.BitSetUtil.copy (bsTo);
					    bsAtoms1.and (bsSubset);
					    bsAtoms2.and (bsSubset);
					    bsAtoms1.and (bsFrom);
					    bsAtoms2.and (bsTo);
					}vAtomSets =  new java.util.ArrayList ();
				    vAtomSets.add ([bsAtoms1, bsAtoms2]);
				}var bsFrames;
				if (isFrames) {
				    var bsModels = this.viewer.getModelBitSet (bsFrom, false);
				    bsFrames =  new Array (bsModels.cardinality ());
				    for (var i = 0, iModel = bsModels.nextSetBit (0); iModel >= 0; iModel = bsModels.nextSetBit (iModel + 1), i++) bsFrames[i] = this.viewer.getModelUndeletedAtomsBitSet (iModel);

				} else {
				    bsFrames = [bsFrom];
				}for (var iFrame = 0; iFrame < bsFrames.length; iFrame++) {
				    bsFrom = bsFrames[iFrame];
				    var retStddev =  Clazz.newFloatArray (2, 0);
				    var q = null;
				    var vQ =  new java.util.ArrayList ();
				    var centerAndPoints = null;
				    var vAtomSets2 = (isFrames ?  new java.util.ArrayList () : vAtomSets);
				    for (var i = 0; i < vAtomSets.size (); ++i) {
					var bss = vAtomSets.get (i);
					if (isFrames) vAtomSets2.add (bss = [org.jmol.util.BitSetUtil.copy (bss[0]), bss[1]]);
					bss[0].and (bsFrom);
				    }
				    if (isAtoms) {
					centerAndPoints = this.viewer.getCenterAndPoints (vAtomSets2, true);
					q = org.jmol.util.Measure.calculateQuaternionRotation (centerAndPoints, retStddev, true);
					var r0 = (Float.isNaN (retStddev[1]) ? NaN : Math.round (retStddev[0] * 100) / 100);
					var r1 = (Float.isNaN (retStddev[1]) ? NaN : Math.round (retStddev[1] * 100) / 100);
					this.showString ("RMSD " + r0 + " --> " + r1 + " Angstroms");
				    } else if (isQuaternion) {
					if (vQuatSets == null) {
					    for (var i = 0; i < vAtomSets2.size (); i++) {
						var bss = vAtomSets2.get (i);
						data1 = this.viewer.getAtomGroupQuaternions (bss[0], 2147483647);
						data2 = this.viewer.getAtomGroupQuaternions (bss[1], 2147483647);
						for (var j = 0; j < data1.length && j < data2.length; j++) {
						    vQ.add (data2[j].div (data1[j]));
						}
					    }
					} else {
					    for (var j = 0; j < data1.length && j < data2.length; j++) {
						vQ.add (data2[j].div (data1[j]));
					    }
					}retStddev[0] = 0;
					data1 = vQ.toArray ( new Array (vQ.size ()));
					q = org.jmol.util.Quaternion.sphereMean (data1, retStddev, 0.0001);
					this.showString ("RMSD = " + retStddev[0] + " degrees");
				    } else {
					var m4 =  new org.jmol.util.Matrix4f ();
					var stddev = this.getSmilesCorrelation (bsFrom, bsTo, strSmiles, null, null, m4, null, !isSmiles, false);
					if (Float.isNaN (stddev)) this.error (22);
					var translation =  new org.jmol.util.Vector3f ();
					m4.get (translation);
					var m3 =  new org.jmol.util.Matrix3f ();
					m4.getRotationScale (m3);
					q = org.jmol.util.Quaternion.newM (m3);
				    }if (centerAndPoints == null) centerAndPoints = this.viewer.getCenterAndPoints (vAtomSets2, true);
				    var pt1 =  new org.jmol.util.Point3f ();
				    var endDegrees = NaN;
				    var translation = null;
				    if (doTranslate) {
					translation = org.jmol.util.Vector3f.newV (centerAndPoints[1][0]);
					translation.sub (centerAndPoints[0][0]);
					endDegrees = 0;
				    }if (doRotate) {
					if (q == null) this.evalError ("option not implemented", null);
					pt1.setT (centerAndPoints[0][0]);
					pt1.add (q.getNormal ());
					endDegrees = q.getTheta ();
				    }if (Float.isNaN (endDegrees) || Float.isNaN (pt1.x)) continue;
				    var ptsB = null;
				    if (doRotate && doTranslate && nSeconds != 0) {
					var ptsA = this.viewer.getAtomPointVector (bsFrom);
					var m4 = org.jmol.script.ScriptMathProcessor.getMatrix4f (q.getMatrix (), translation);
					ptsB = org.jmol.util.Measure.transformPoints (ptsA, m4, centerAndPoints[0][0]);
				    }this.viewer.rotateAboutPointsInternal (centerAndPoints[0][0], pt1, endDegrees / nSeconds, endDegrees, doAnimate, bsFrom, translation, ptsB);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getSmilesCorrelation", 
			    function (bsA, bsB, smiles, ptsA, ptsB, m, vReturn, isSmarts, asMap) {
				var tolerance = 0.1;
				try {
				    if (ptsA == null) {
					ptsA =  new java.util.ArrayList ();
					ptsB =  new java.util.ArrayList ();
				    }if (m == null) m =  new org.jmol.util.Matrix4f ();
				    var atoms = this.viewer.getModelSet ().atoms;
				    var atomCount = this.viewer.getAtomCount ();
				    var maps = this.viewer.getSmilesMatcher ().getCorrelationMaps (smiles, atoms, atomCount, bsA, isSmarts, true);
				    if (maps == null) this.evalError (this.viewer.getSmilesMatcher ().getLastException (), null);
				    if (maps.length == 0) return NaN;
				    for (var i = 0; i < maps[0].length; i++) ptsA.add (atoms[maps[0][i]]);

				    maps = this.viewer.getSmilesMatcher ().getCorrelationMaps (smiles, atoms, atomCount, bsB, isSmarts, false);
				    if (maps == null) this.evalError (this.viewer.getSmilesMatcher ().getLastException (), null);
				    if (maps.length == 0) return NaN;
				    if (asMap) {
					for (var i = 0; i < maps.length; i++) for (var j = 0; j < maps[i].length; j++) ptsB.add (atoms[maps[i][j]]);


					return 0;
				    }var lowestStdDev = 3.4028235E38;
				    var mapB = null;
				    for (var i = 0; i < maps.length; i++) {
					ptsB.clear ();
					for (var j = 0; j < maps[i].length; j++) ptsB.add (atoms[maps[i][j]]);

					var stddev = org.jmol.util.Measure.getTransformMatrix4 (ptsA, ptsB, m, null);
					org.jmol.util.Logger.info ("getSmilesCorrelation stddev=" + stddev);
					if (vReturn != null) {
					    if (stddev < tolerance) {
						var bs =  new org.jmol.util.BitSet ();
						for (var j = 0; j < maps[i].length; j++) bs.set (maps[i][j]);

						vReturn.add (bs);
					    }}if (stddev < lowestStdDev) {
						mapB = maps[i];
						lowestStdDev = stddev;
					    }}
				    for (var i = 0; i < mapB.length; i++) ptsB.add (atoms[mapB[i]]);

				    return lowestStdDev;
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					this.evalError (e.getMessage (), null);
					return 0;
				    } else {
					throw e;
				    }
				}
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,~S,java.util.List,java.util.List,org.jmol.util.Matrix4f,java.util.List,~B,~B");
	Clazz.defineMethod (c$, "getSmilesMatches", 
			    function (pattern, smiles, bsSelected, bsMatch3D, isSmarts, asOneBitset) {
				if (this.isSyntaxCheck) {
				    if (asOneBitset) return  new org.jmol.util.BitSet ();
				    return ["({})"];
				}if (pattern.length == 0) {
				    var isBioSmiles = (!asOneBitset);
				    var ret = this.viewer.getSmiles (0, 0, bsSelected, isBioSmiles, false, true, true);
				    if (ret == null) this.evalError (this.viewer.getSmilesMatcher ().getLastException (), null);
				    return ret;
				}var asAtoms = true;
				var b;
				if (bsMatch3D == null) {
				    asAtoms = (smiles == null);
				    if (asAtoms) b = this.viewer.getSmilesMatcher ().getSubstructureSetArray (pattern, this.viewer.getModelSet ().atoms, this.viewer.getAtomCount (), bsSelected, null, isSmarts, false);
				    else b = this.viewer.getSmilesMatcher ().find (pattern, smiles, isSmarts, false);
				    if (b == null) {
					this.showStringPrint (this.viewer.getSmilesMatcher ().getLastException (), false);
					if (!asAtoms && !isSmarts) return Integer.$valueOf (-1);
					return "?";
				    }} else {
					var vReturn =  new java.util.ArrayList ();
					var stddev = this.getSmilesCorrelation (bsMatch3D, bsSelected, pattern, null, null, null, vReturn, isSmarts, false);
					if (Float.isNaN (stddev)) {
					    if (asOneBitset) return  new org.jmol.util.BitSet ();
					    return [];
					}this.showString ("RMSD " + stddev + " Angstroms");
					b = vReturn.toArray ( new Array (vReturn.size ()));
				    }if (asOneBitset) {
					var bs =  new org.jmol.util.BitSet ();
					for (var j = 0; j < b.length; j++) bs.or (b[j]);

					if (asAtoms) return bs;
					if (!isSmarts) return Integer.$valueOf (bs.cardinality ());
					var iarray =  Clazz.newIntArray (bs.cardinality (), 0);
					var pt = 0;
					for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) iarray[pt++] = i + 1;

					return iarray;
				    }var matches =  new Array (b.length);
				for (var j = 0; j < b.length; j++) matches[j] = org.jmol.util.Escape.escapeBs (b[j], asAtoms);

				return matches;
			    }, "~S,~S,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B");
	Clazz.defineMethod (c$, "connect", 
			    ($fz = function (index) {
				var distances =  Clazz.newFloatArray (2, 0);
				var atomSets =  new Array (2);
				atomSets[0] = atomSets[1] = this.viewer.getSelectionSet (false);
				var radius = NaN;
				var color = -2147483648;
				var distanceCount = 0;
				var bondOrder = 131071;
				var bo;
				var operation = 1073742026;
				var isDelete = false;
				var haveType = false;
				var haveOperation = false;
				var translucency = null;
				var translucentLevel = 3.4028235E38;
				var isColorOrRadius = false;
				var nAtomSets = 0;
				var nDistances = 0;
				var bsBonds =  new org.jmol.util.BitSet ();
				var isBonds = false;
				var expression2 = 0;
				var ptColor = 0;
				var energy = 0;
				var addGroup = false;
				if (this.statementLength == 1) {
				    if (!this.isSyntaxCheck) this.viewer.rebondState (this.isStateScript);
				    return;
				}for (var i = index; i < this.statementLength; ++i) {
				    switch (this.getToken (i).tok) {
				    case 1048589:
				    case 1048588:
					this.checkLength (2);
					if (!this.isSyntaxCheck) this.viewer.rebondState (this.isStateScript);
					return;
				    case 2:
				    case 3:
					if (nAtomSets > 0) {
					    if (haveType || isColorOrRadius) this.error (23);
					    bo = org.jmol.util.JmolEdge.getBondOrderFromFloat (this.floatParameter (i));
					    if (bo == 131071) this.error (22);
					    bondOrder = bo;
					    haveType = true;
					    break;
					}if (++nDistances > 2) this.error (2);
					var dist = this.floatParameter (i);
					if (this.tokAt (i + 1) == 269484210) {
					    dist = -dist / 100;
					    i++;
					}distances[distanceCount++] = dist;
					break;
				    case 10:
				    case 1048577:
					if (nAtomSets > 2 || isBonds && nAtomSets > 0) this.error (2);
					if (haveType || isColorOrRadius) this.error (23);
					atomSets[nAtomSets++] = this.atomExpressionAt (i);
					isBonds = this.isBondSet;
					if (nAtomSets == 2) {
					    var pt = this.iToken;
					    for (var j = i; j < pt; j++) if (this.tokAt (j) == 1073741824 && this.parameterAsString (j).equals ("_1")) {
						expression2 = i;
						break;
					    }
					    this.iToken = pt;
					}i = this.iToken;
					break;
				    case 1087373318:
					addGroup = true;
					break;
				    case 1766856708:
					var tok = this.tokAt (i + 1);
					if (tok != 1073742180 && tok != 1073742074) ptColor = i + 1;
					continue;
				    case 1073742180:
				    case 1073742074:
					if (translucency != null) this.error (22);
					isColorOrRadius = true;
					translucency = this.parameterAsString (i);
					if (this.theTok == 1073742180 && this.isFloatParameter (i + 1)) translucentLevel = this.getTranslucentLevel (++i);
					ptColor = i + 1;
					break;
				    case 1074790662:
					var isAuto = (this.tokAt (2) == 1073741852);
					this.checkLength (isAuto ? 3 : 2);
					if (!this.isSyntaxCheck) this.viewer.setPdbConectBonding (isAuto, this.isStateScript);
					return;
				    case 1073741830:
				    case 1073741852:
				    case 1073741904:
				    case 1073742025:
				    case 1073742026:
					haveOperation = true;
					if (++i != this.statementLength) this.error (23);
					operation = this.theTok;
					if (this.theTok == 1073741852 && !(bondOrder == 131071 || bondOrder == 2048 || bondOrder == 515)) this.error (22);
					break;
				    case 1708058:
					if (!isColorOrRadius) {
					    color = 0xFFFFFF;
					    translucency = "translucent";
					    translucentLevel = 0.5;
					    radius = this.viewer.getStrutDefaultRadius ();
					    isColorOrRadius = true;
					}if (!haveOperation) operation = 1073742026;
					haveOperation = true;
				    case 1073741824:
				    case 1076887572:
				    case 1612189718:
					if (i > 0) {
					    if (ptColor == i) break;
					    if (this.isColorParam (i)) {
						ptColor = -i;
						break;
					    }}var cmd = this.parameterAsString (i);
					if ((bo = org.jmol.script.ScriptEvaluator.getBondOrderFromString (cmd)) == 131071) {
					    this.error (22);
					}if (haveType) this.error (18);
					haveType = true;
					switch (bo) {
					case 33:
					    switch (this.tokAt (i + 1)) {
					    case 3:
						bo = org.jmol.script.ScriptEvaluator.getPartialBondOrderFromFloatEncodedInt (this.statement[++i].intValue);
						break;
					    case 2:
						bo = this.intParameter (++i);
						break;
					    }
					    break;
					case 2048:
					    if (this.tokAt (i + 1) == 2) {
						bo = (this.intParameter (++i) << 11);
						energy = this.floatParameter (++i);
					    }break;
					}
					bondOrder = bo;
					break;
				    case 1666189314:
					radius = this.floatParameter (++i);
					isColorOrRadius = true;
					break;
				    case 1048587:
				    case 12291:
					if (++i != this.statementLength) this.error (23);
					operation = 12291;
					isDelete = true;
					isColorOrRadius = false;
					break;
				    default:
					ptColor = i;
					break;
				    }
				    if (i > 0) {
					if (ptColor == -i || ptColor == i && this.isColorParam (i)) {
					    color = this.getArgbParam (i);
					    i = this.iToken;
					    isColorOrRadius = true;
					} else if (ptColor == i) {
					    this.error (22);
					}}}
				if (this.isSyntaxCheck) return;
				if (distanceCount < 2) {
				    if (distanceCount == 0) distances[0] = 1.0E8;
				    distances[1] = distances[0];
				    distances[0] = 0.1;
				}if (translucency != null || !Float.isNaN (radius) || color != -2147483648) {
				    if (!haveType) bondOrder = 65535;
				    if (!haveOperation) operation = 1073742025;
				}var nNew = 0;
				var nModified = 0;
				var result;
				if (expression2 > 0) {
				    var bs =  new org.jmol.util.BitSet ();
				    this.definedAtomSets.put ("_1", bs);
				    var bs0 = atomSets[0];
				    for (var atom1 = bs0.nextSetBit (0); atom1 >= 0; atom1 = bs0.nextSetBit (atom1 + 1)) {
					bs.set (atom1);
					result = this.viewer.makeConnections (distances[0], distances[1], bondOrder, operation, bs, this.atomExpressionAt (expression2), bsBonds, isBonds, false, 0);
					nNew += Math.abs (result[0]);
					nModified += result[1];
					bs.clear (atom1);
				    }
				} else {
				    result = this.viewer.makeConnections (distances[0], distances[1], bondOrder, operation, atomSets[0], atomSets[1], bsBonds, isBonds, addGroup, energy);
				    nNew += Math.abs (result[0]);
				    nModified += result[1];
				}if (isDelete) {
				    if (!(this.tQuiet || this.scriptLevel > this.scriptReportingLevel)) this.scriptStatusOrBuffer (org.jmol.i18n.GT._ ("{0} connections deleted", nModified));
				    return;
				}if (isColorOrRadius) {
				    this.viewer.selectBonds (bsBonds);
				    if (!Float.isNaN (radius)) this.setShapeSizeBs (1, Math.round (radius * 2000), null);
				    if (color != -2147483648) this.setShapePropertyBs (1, "color", Integer.$valueOf (color), bsBonds);
				    if (translucency != null) {
					if (translucentLevel == 3.4028235E38) translucentLevel = this.viewer.getDefaultTranslucent ();
					this.setShapeProperty (1, "translucentLevel", Float.$valueOf (translucentLevel));
					this.setShapePropertyBs (1, "translucency", translucency, bsBonds);
				    }this.viewer.selectBonds (null);
				}if (!(this.tQuiet || this.scriptLevel > this.scriptReportingLevel)) this.scriptStatusOrBuffer (org.jmol.i18n.GT._ ("{0} new bonds; {1} modified", [Integer.$valueOf (nNew), Integer.$valueOf (nModified)]));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getTranslucentLevel", 
			    ($fz = function (i) {
				var f = this.floatParameter (i);
				return (this.theTok == 2 && f > 0 && f < 9 ? f + 1 : f);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getProperty", 
			    ($fz = function () {
				if (this.isSyntaxCheck) return;
				var retValue = "";
				var property = this.optParameterAsString (1);
				var name = property;
				if (name.indexOf (".") >= 0) name = name.substring (0, name.indexOf ("."));
				if (name.indexOf ("[") >= 0) name = name.substring (0, name.indexOf ("["));
				var propertyID = org.jmol.viewer.PropertyManager.getPropertyNumber (name);
				var param = this.optParameterAsString (2);
				var tok = this.tokAt (2);
				var bs = (tok == 1048577 || tok == 10 ? this.atomExpressionAt (2) : null);
				if (property.length > 0 && propertyID < 0) {
				    property = "";
				    param = "";
				} else if (propertyID >= 0 && this.statementLength < 3) {
				    param = org.jmol.viewer.PropertyManager.getDefaultParam (propertyID);
				    if (param.equals ("(visible)")) {
					this.viewer.setModelVisibility ();
					bs = this.viewer.getVisibleSet ();
				    }} else if (propertyID == 3) {
					for (var i = 3; i < this.statementLength; i++) param += this.parameterAsString (i);

				    }retValue = this.viewer.getProperty ("readable", property, (bs == null ? param : bs));
				this.showString (retValue);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "background", 
			    ($fz = function (i) {
				this.getToken (i);
				var argb;
				if (this.theTok == 1073741979) {
				    var file = this.parameterAsString (this.checkLast (++i));
				    if (this.isSyntaxCheck) return;
				    var retFileName =  new Array (1);
				    var image = null;
				    if (!file.equalsIgnoreCase ("none") && file.length > 0) {
					image = this.viewer.getFileAsImage (file, retFileName);
					if (image == null) this.evalError (retFileName[0], null);
				    }this.viewer.setBackgroundImage (retFileName[0], image);
				    return;
				}if (this.isColorParam (i) || this.theTok == 1048587) {
				    argb = this.getArgbParamLast (i, true);
				    if (this.isSyntaxCheck) return;
				    this.setObjectArgb ("background", argb);
				    this.viewer.setBackgroundImage (null, null);
				    return;
				}var iShape = this.getShapeType (this.theTok);
				this.colorShape (iShape, i + 1, true);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "center", 
			    ($fz = function (i) {
				if (this.statementLength == 1) {
				    this.viewer.setNewRotationCenter (null);
				    return;
				}var center = this.centerParameter (i);
				if (center == null) this.error (22);
				if (!this.isSyntaxCheck) this.viewer.setNewRotationCenter (center);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setObjectProperty", 
			    ($fz = function () {
				var s = "";
				var id = this.getShapeNameParameter (2);
				var data = [id, null];
				if (this.isSyntaxCheck) return "";
				var iTok = this.iToken;
				var tokCommand = this.tokAt (0);
				var isWild = org.jmol.util.TextFormat.isWild (id);
				for (var iShape = 17; ; ) {
				    if (iShape != 26 && this.getShapePropertyData (iShape, "checkID", data)) {
					this.setShapeProperty (iShape, "thisID", id);
					switch (tokCommand) {
					case 12291:
					    this.setShapeProperty (iShape, "delete", null);
					    break;
					case 12294:
					case 1610625028:
					    this.setShapeProperty (iShape, "hidden", tokCommand == 1610625028 ? Boolean.FALSE : Boolean.TRUE);
					    break;
					case 4148:
					    s += this.getShapeProperty (iShape, "command") + "\n";
					    break;
					case 1766856708:
					    this.colorShape (iShape, iTok + 1, false);
					    break;
					}
					if (!isWild) break;
				    }if (iShape == 17) iShape = 30;
				    if (--iShape < 22) break;
				}
				return s;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "color", 
			    ($fz = function () {
				var i = 1;
				if (this.isColorParam (1)) {
				    this.theTok = 1141899265;
				} else {
				    var argb = 0;
				    i = 2;
				    var tok = this.getToken (1).tok;
				    switch (tok) {
				    case 1048583:
					this.setObjectProperty ();
					return;
				    case 1087373315:
				    case 3145730:
				    case 1087373316:
				    case 1073741946:
				    case 1632634889:
				    case 1087373318:
				    case 1114638346:
				    case 1087373322:
				    case 1073741992:
				    case 1095761934:
				    case 1073742032:
				    case 1048587:
				    case 1073742074:
				    case 1112541196:
				    case 1095761935:
				    case 1716520973:
				    case 1073742116:
				    case 1113200651:
				    case 1073742144:
				    case 1112539148:
				    case 1641025539:
				    case 1112539149:
				    case 1112541199:
				    case 1073742180:
				    case 1073742186:
				    case 1649412112:
					this.theTok = 1141899265;
					i = 1;
					break;
				    case 4:
					i = 1;
					var strColor = this.stringParameter (i++);
					if (this.isArrayParameter (i)) {
					    strColor = strColor += "=" + org.jmol.script.ScriptVariable.sValue (org.jmol.script.ScriptVariable.getVariableAS (this.stringParameterSet (i))).$replace ('\n', ' ');
					    i = this.iToken + 1;
					}var isTranslucent = (this.tokAt (i) == 1073742180);
					if (!this.isSyntaxCheck) this.viewer.setPropertyColorScheme (strColor, isTranslucent, true);
					if (isTranslucent) ++i;
					if (this.tokAt (i) == 1073742114 || this.tokAt (i) == 1073741826) {
					    var min = this.floatParameter (++i);
					    var max = this.floatParameter (++i);
					    if (!this.isSyntaxCheck) this.viewer.setCurrentColorRange (min, max);
					}return;
				    case 1073742114:
				    case 1073741826:
					var min = this.floatParameter (2);
					var max = this.floatParameter (this.checkLast (3));
					if (!this.isSyntaxCheck) this.viewer.setCurrentColorRange (min, max);
					return;
				    case 1610616835:
					argb = this.getArgbParamLast (2, true);
					if (!this.isSyntaxCheck) this.setObjectArgb ("background", argb);
					return;
				    case 10:
				    case 1048577:
					i = -1;
					this.theTok = 1141899265;
					break;
				    case 1073742134:
					argb = this.getArgbParamLast (2, false);
					if (!this.isSyntaxCheck) this.viewer.setRubberbandArgb (argb);
					return;
				    case 536870920:
				    case 1611141171:
					i = 2;
					if (this.tokAt (2) == 1073742074) i++;
					argb = this.getArgbParamLast (i, true);
					if (this.isSyntaxCheck) return;
					this.shapeManager.loadShape (8);
					this.setShapeProperty (8, (tok == 1611141171 ? "argbSelection" : "argbHighlight"), Integer.$valueOf (argb));
					return;
				    case 1611272194:
				    case 1679429641:
				    case 1614417948:
				    case 1073741824:
				    case 1613758476:
					var str = this.parameterAsString (1);
					if (this.checkToken (2)) {
					    switch (this.getToken (2).tok) {
					    case 1073742116:
						argb = 1073742116;
						break;
					    case 1048587:
					    case 1073741992:
						argb = 1073741992;
						break;
					    default:
						argb = this.getArgbParam (2);
					    }
					}if (argb == 0) this.error (9);
					this.checkLast (this.iToken);
					if (str.equalsIgnoreCase ("axes") || org.jmol.viewer.StateManager.getObjectIdFromName (str) >= 0) {
					    this.setObjectArgb (str, argb);
					    return;
					}if (this.changeElementColor (str, argb)) return;
					this.error (22);
					break;
				    case 135180:
				    case 135402505:
					this.setShapeProperty (org.jmol.viewer.JmolConstants.shapeTokenIndex (tok), "thisID", "+PREVIOUS_MESH+");
					break;
				    }
				}this.colorShape (this.getShapeType (this.theTok), i, false);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "changeElementColor", 
			    ($fz = function (str, argb) {
				for (var i = org.jmol.util.Elements.elementNumberMax; --i >= 0; ) {
				    if (str.equalsIgnoreCase (org.jmol.util.Elements.elementNameFromNumber (i))) {
					if (!this.isSyntaxCheck) this.viewer.setElementArgb (i, argb);
					return true;
				    }}
				for (var i = org.jmol.util.Elements.altElementMax; --i >= 0; ) {
				    if (str.equalsIgnoreCase (org.jmol.util.Elements.altElementNameFromIndex (i))) {
					if (!this.isSyntaxCheck) this.viewer.setElementArgb (org.jmol.util.Elements.altElementNumberFromIndex (i), argb);
					return true;
				    }}
				if (str.charAt (0) != '_') return false;
				for (var i = org.jmol.util.Elements.elementNumberMax; --i >= 0; ) {
				    if (str.equalsIgnoreCase ("_" + org.jmol.util.Elements.elementSymbolFromNumber (i))) {
					if (!this.isSyntaxCheck) this.viewer.setElementArgb (i, argb);
					return true;
				    }}
				for (var i = org.jmol.util.Elements.altElementMax; --i >= 4; ) {
				    if (str.equalsIgnoreCase ("_" + org.jmol.util.Elements.altElementSymbolFromIndex (i))) {
					if (!this.isSyntaxCheck) this.viewer.setElementArgb (org.jmol.util.Elements.altElementNumberFromIndex (i), argb);
					return true;
				    }if (str.equalsIgnoreCase ("_" + org.jmol.util.Elements.altIsotopeSymbolFromIndex (i))) {
					if (!this.isSyntaxCheck) this.viewer.setElementArgb (org.jmol.util.Elements.altElementNumberFromIndex (i), argb);
					return true;
				    }}
				return false;
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "colorShape", 
			    ($fz = function (shapeType, index, isBackground) {
				var translucency = null;
				var colorvalue = null;
				var colorvalue1 = null;
				var bs = null;
				var prefix = "";
				var isColor = false;
				var isIsosurface = (shapeType == 23 || shapeType == 24);
				var typeMask = 0;
				var doClearBondSet = false;
				var translucentLevel = 3.4028235E38;
				if (index < 0) {
				    bs = this.atomExpressionAt (-index);
				    index = this.iToken + 1;
				    if (this.isBondSet) {
					doClearBondSet = true;
					shapeType = 1;
				    }}if (isBackground) this.getToken (index);
				else if ((isBackground = (this.getToken (index).tok == 1610616835)) == true) this.getToken (++index);
				if (isBackground) prefix = "bg";
				else if (isIsosurface) {
				    switch (this.theTok) {
				    case 1073742018:
					this.getToken (++index);
					prefix = "mesh";
					break;
				    case 1073742094:
					var argb = this.getArgbParamOrNone (++index, false);
					colorvalue1 = (argb == 0 ? null : Integer.$valueOf (argb));
					this.getToken (index = this.iToken + 1);
					break;
				    case 10:
				    case 1048577:
					if (Clazz.instanceOf (this.theToken.value, org.jmol.modelset.Bond.BondSet)) {
					    bs = this.theToken.value;
					    prefix = "vertex";
					} else {
					    bs = this.atomExpressionAt (index);
					    prefix = "atom";
					}translucentLevel = 1.4E-45;
					this.getToken (index = this.iToken + 1);
					break;
				    }
				}if (!this.isSyntaxCheck && shapeType == 26 && !this.mo (true)) return;
				var isTranslucent = (this.theTok == 1073742180);
				if (isTranslucent || this.theTok == 1073742074) {
				    if (translucentLevel == 1.4E-45) this.error (22);
				    translucency = this.parameterAsString (index++);
				    if (isTranslucent && this.isFloatParameter (index)) translucentLevel = this.getTranslucentLevel (index++);
				}var tok = 0;
				if (index < this.statementLength && this.tokAt (index) != 1048589 && this.tokAt (index) != 1048588) {
				    isColor = true;
				    tok = this.getToken (index).tok;
				    if ((!isIsosurface || this.tokAt (index + 1) != 1074790746) && this.isColorParam (index)) {
					var argb = this.getArgbParamOrNone (index, false);
					colorvalue = (argb == 0 ? null : Integer.$valueOf (argb));
					if (translucency == null && this.tokAt (index = this.iToken + 1) != 0) {
					    this.getToken (index);
					    isTranslucent = (this.theTok == 1073742180);
					    if (isTranslucent || this.theTok == 1073742074) {
						translucency = this.parameterAsString (index);
						if (isTranslucent && this.isFloatParameter (index + 1)) translucentLevel = this.getTranslucentLevel (++index);
					    }}} else if (shapeType == 25) {
						this.iToken--;
					    } else {
						var name = this.parameterAsString (index).toLowerCase ();
						var isByElement = (name.indexOf ("byelement") == 0);
						var isColorIndex = (isByElement || name.indexOf ("byresidue") == 0);
						var pal = (isColorIndex || isIsosurface ? org.jmol.constant.EnumPalette.PROPERTY : tok == 1113200651 ? org.jmol.constant.EnumPalette.CPK : org.jmol.constant.EnumPalette.getPalette (name));
						if (pal === org.jmol.constant.EnumPalette.UNKNOWN || (pal === org.jmol.constant.EnumPalette.TYPE || pal === org.jmol.constant.EnumPalette.ENERGY) && shapeType != 2) this.error (22);
						var data = null;
						var bsSelected = (pal !== org.jmol.constant.EnumPalette.PROPERTY && pal !== org.jmol.constant.EnumPalette.VARIABLE || !this.viewer.isRangeSelected () ? null : this.viewer.getSelectionSet (false));
						if (pal === org.jmol.constant.EnumPalette.PROPERTY) {
						    if (isColorIndex) {
							if (!this.isSyntaxCheck) {
							    data = this.getBitsetPropertyFloat (bsSelected, (isByElement ? 1095763976 : 1095761930) | 256, NaN, NaN);
							}} else {
							    if (!isColorIndex && !isIsosurface) index++;
							    if (name.equals ("property") && org.jmol.script.Token.tokAttr ((tok = this.getToken (index).tok), 1078984704) && !org.jmol.script.Token.tokAttr (tok, 1087373312)) {
								if (!this.isSyntaxCheck) {
								    data = this.getBitsetPropertyFloat (bsSelected, this.getToken (index++).tok | 256, NaN, NaN);
								}}}} else if (pal === org.jmol.constant.EnumPalette.VARIABLE) {
								    index++;
								    name = this.parameterAsString (index++);
								    data =  Clazz.newFloatArray (this.viewer.getAtomCount (), 0);
								    org.jmol.util.Parser.parseStringInfestedFloatArray ("" + this.getParameter (name, 4), null, data);
								    pal = org.jmol.constant.EnumPalette.PROPERTY;
								}if (pal === org.jmol.constant.EnumPalette.PROPERTY) {
								    var scheme = null;
								    if (this.tokAt (index) == 4) {
									scheme = this.parameterAsString (index++).toLowerCase ();
									if (this.isArrayParameter (index)) {
									    scheme += "=" + org.jmol.script.ScriptVariable.sValue (org.jmol.script.ScriptVariable.getVariableAS (this.stringParameterSet (index))).$replace ('\n', ' ');
									    index = this.iToken + 1;
									}} else if (isIsosurface && this.isColorParam (index)) {
									    scheme = this.getColorRange (index);
									    index = this.iToken + 1;
									}if (scheme != null && !isIsosurface) {
									    this.setStringProperty ("propertyColorScheme", (isTranslucent && translucentLevel == 3.4028235E38 ? "translucent " : "") + scheme);
									    isColorIndex = (scheme.indexOf ("byelement") == 0 || scheme.indexOf ("byresidue") == 0);
									}var min = 0;
								    var max = 3.4028235E38;
								    if (!isColorIndex && (this.tokAt (index) == 1073741826 || this.tokAt (index) == 1073742114)) {
									min = this.floatParameter (index + 1);
									max = this.floatParameter (index + 2);
									index += 3;
									if (min == max && isIsosurface) {
									    var range = this.getShapeProperty (shapeType, "dataRange");
									    if (range != null) {
										min = range[0];
										max = range[1];
									    }} else if (min == max) {
										max = 3.4028235E38;
									    }}if (!this.isSyntaxCheck) {
										if (isIsosurface) {
										} else if (data == null) {
										    this.viewer.setCurrentColorRange (name);
										} else {
										    this.viewer.setCurrentColorRangeData (data, bsSelected);
										}if (isIsosurface) {
										    this.checkLength (index);
										    isColor = false;
										    var ce = this.viewer.getColorEncoder (scheme);
										    if (ce == null) return;
										    ce.isTranslucent = (isTranslucent && translucentLevel == 3.4028235E38);
										    ce.setRange (min, max, min > max);
										    if (max == 3.4028235E38) ce.hi = max;
										    this.setShapeProperty (shapeType, "remapColor", ce);
										    this.showString (this.getIsosurfaceDataRange (shapeType, ""));
										    if (translucentLevel == 3.4028235E38) return;
										} else if (max != 3.4028235E38) {
										    this.viewer.setCurrentColorRange (min, max);
										}}} else {
										    index++;
										}this.checkLength (index);
						colorvalue = pal;
					    }}if (this.isSyntaxCheck || shapeType < 0) return;
				switch (shapeType) {
				case 4:
				    typeMask = 32768;
				    break;
				case 2:
				    typeMask = 30720;
				    break;
				case 3:
				    typeMask = 256;
				    break;
				case 1:
				    typeMask = 1023;
				    break;
				default:
				    typeMask = 0;
				}
				if (typeMask == 0) {
				    this.shapeManager.loadShape (shapeType);
				    if (shapeType == 5) this.setShapeProperty (5, "setDefaults", this.viewer.getNoneSelected ());
				} else {
				    if (bs != null) {
					this.viewer.selectBonds (bs);
					bs = null;
				    }shapeType = 1;
				    this.setShapeProperty (shapeType, "type", Integer.$valueOf (typeMask));
				}if (isColor) {
				    switch (tok) {
				    case 1112539149:
				    case 1112539148:
					this.viewer.autoCalculate (tok);
					break;
				    case 1112541199:
					if (this.viewer.isRangeSelected ()) this.viewer.clearBfactorRange ();
					break;
				    case 1087373318:
					this.viewer.calcSelectedGroupsCount ();
					break;
				    case 1095761935:
				    case 1073742032:
					this.viewer.calcSelectedMonomersCount ();
					break;
				    case 1095761934:
					this.viewer.calcSelectedMoleculesCount ();
					break;
				    }
				    if (isIsosurface && colorvalue1 != null) this.setShapeProperty (shapeType, "colorPhase", [colorvalue1, colorvalue]);
				    else if (bs == null) this.setShapeProperty (shapeType, prefix + "color", colorvalue);
				    else this.setShapePropertyBs (shapeType, prefix + "color", colorvalue, bs);
				}if (translucency != null) this.setShapeTranslucency (shapeType, prefix, translucency, translucentLevel, bs);
				if (typeMask != 0) this.setShapeProperty (1, "type", Integer.$valueOf (1023));
				if (doClearBondSet) this.viewer.selectBonds (null);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~B");
	Clazz.defineMethod (c$, "colorShapeBs", 
			    ($fz = function (shapeType, typeMask, argb, translucency, translucentLevel, bs) {
				if (typeMask != 0) {
				    this.setShapeProperty (shapeType = 1, "type", Integer.$valueOf (typeMask));
				}this.setShapePropertyBs (shapeType, "color", Integer.$valueOf (argb), bs);
				if (translucency != null) this.setShapeTranslucency (shapeType, "", translucency, translucentLevel, bs);
				if (typeMask != 0) this.setShapeProperty (1, "type", Integer.$valueOf (1023));
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~S,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapeTranslucency", 
			    ($fz = function (shapeType, prefix, translucency, translucentLevel, bs) {
				if (translucentLevel == 3.4028235E38) translucentLevel = this.viewer.getDefaultTranslucent ();
				this.setShapeProperty (shapeType, "translucentLevel", Float.$valueOf (translucentLevel));
				if (prefix == null) return;
				if (bs == null) this.setShapeProperty (shapeType, prefix + "translucency", translucency);
				else if (!this.isSyntaxCheck) this.setShapePropertyBs (shapeType, prefix + "translucency", translucency, bs);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~S,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "cd", 
			    ($fz = function () {
				if (this.isSyntaxCheck) return;
				var dir = (this.statementLength == 1 ? null : this.parameterAsString (1));
				this.showString (this.viewer.cd (dir));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "mapProperty", 
			    ($fz = function () {
				var bsFrom;
				var bsTo;
				var property1;
				var property2;
				var mapKey;
				var tokProp1 = 0;
				var tokProp2 = 0;
				var tokKey = 0;
				while (true) {
				    if (this.tokAt (1) == 1114638350) {
					bsFrom = this.viewer.getSelectionSet (false);
					bsTo = this.atomExpressionAt (2);
					property1 = property2 = "selected";
				    } else {
					bsFrom = this.atomExpressionAt (1);
					if (this.tokAt (++this.iToken) != 1048584 || !org.jmol.script.Token.tokAttr (tokProp1 = this.tokAt (++this.iToken), 1078984704)) break;
					property1 = this.parameterAsString (this.iToken);
					bsTo = this.atomExpressionAt (++this.iToken);
					if (this.tokAt (++this.iToken) != 1048584 || !org.jmol.script.Token.tokAttr (tokProp2 = this.tokAt (++this.iToken), 2048)) break;
					property2 = this.parameterAsString (this.iToken);
				    }if (org.jmol.script.Token.tokAttr (tokKey = this.tokAt (this.iToken + 1), 1078984704)) mapKey = this.parameterAsString (++this.iToken);
				    else mapKey = org.jmol.script.Token.nameOf (tokKey = 1095763969);
				    this.checkLast (this.iToken);
				    if (this.isSyntaxCheck) return;
				    var bsOut = null;
				    this.showString ("mapping " + property1.toUpperCase () + " for " + bsFrom.cardinality () + " atoms to " + property2.toUpperCase () + " for " + bsTo.cardinality () + " atoms using " + mapKey.toUpperCase ());
				    if (org.jmol.script.Token.tokAttrOr (tokProp1, 1095761920, 1112539136) && org.jmol.script.Token.tokAttrOr (tokProp2, 1095761920, 1112539136) && org.jmol.script.Token.tokAttrOr (tokKey, 1095761920, 1112539136)) {
					var data1 = this.getBitsetPropertyFloat (bsFrom, tokProp1 | 224, NaN, NaN);
					var data2 = this.getBitsetPropertyFloat (bsFrom, tokKey | 224, NaN, NaN);
					var data3 = this.getBitsetPropertyFloat (bsTo, tokKey | 224, NaN, NaN);
					var isProperty = (tokProp2 == 1716520973);
					var dataOut =  Clazz.newFloatArray (isProperty ? this.viewer.getAtomCount () : data3.length, 0);
					bsOut =  new org.jmol.util.BitSet ();
					if (data1.length == data2.length) {
					    var ht =  new java.util.Hashtable ();
					    for (var i = 0; i < data1.length; i++) {
						ht.put (Float.$valueOf (data2[i]), Float.$valueOf (data1[i]));
					    }
					    var pt = -1;
					    var nOut = 0;
					    for (var i = 0; i < data3.length; i++) {
						pt = bsTo.nextSetBit (pt + 1);
						var F = ht.get (Float.$valueOf (data3[i]));
						if (F == null) continue;
						bsOut.set (pt);
						dataOut[(isProperty ? pt : nOut)] = F.floatValue ();
						nOut++;
					    }
					    if (isProperty) this.viewer.setData (property2, [property2, dataOut, bsOut,  new Integer (0)], this.viewer.getAtomCount (), 0, 0, 2147483647, 0);
					    else this.viewer.setAtomProperty (bsOut, tokProp2, 0, 0, null, dataOut, null);
					}}if (bsOut == null) {
					    var format = "{" + mapKey + "=%[" + mapKey + "]}." + property2 + " = %[" + property1 + "]";
					    var data = this.getBitsetIdent (bsFrom, format, null, false, 2147483647, false);
					    var sb =  new org.jmol.util.StringXBuilder ();
					    for (var i = 0; i < data.length; i++) if (data[i].indexOf ("null") < 0) sb.append (data[i]).appendC ('\n');

					    if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.info (sb.toString ());
					    var bsSubset = org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSubset ());
					    this.viewer.setSelectionSubset (bsTo);
					    try {
						this.runScript (sb.toString ());
					    } catch (e$$) {
						if (Clazz.exceptionOf (e$$, Exception)) {
						    var e = e$$;
						    {
							this.viewer.setSelectionSubset (bsSubset);
							this.errorStr (-1, "Error: " + e.getMessage ());
						    }
						} else if (Clazz.exceptionOf (e$$, Error)) {
						    var er = e$$;
						    {
							this.viewer.setSelectionSubset (bsSubset);
							this.errorStr (-1, "Error: " + er.getMessage ());
						    }
						} else {
						    throw e$$;
						}
					    }
					    this.viewer.setSelectionSubset (bsSubset);
					}this.showString ("DONE");
				    return;
				}
				this.error (22);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "data", 
			    ($fz = function () {
				var dataString = null;
				var dataLabel = null;
				var isOneValue = false;
				var i;
				switch (this.iToken = this.statementLength) {
				case 5:
				    dataString = this.parameterAsString (2);
				case 4:
				case 2:
				    dataLabel = this.parameterAsString (1);
				    if (dataLabel.equalsIgnoreCase ("clear")) {
					if (!this.isSyntaxCheck) this.viewer.setData (null, null, 0, 0, 0, 0, 0);
					return;
				    }if ((i = dataLabel.indexOf ("@")) >= 0) {
					dataString = "" + this.getParameter (dataLabel.substring (i + 1), 4);
					dataLabel = dataLabel.substring (0, i).trim ();
				    } else if (dataString == null && (i = dataLabel.indexOf (" ")) >= 0) {
					dataString = dataLabel.substring (i + 1).trim ();
					dataLabel = dataLabel.substring (0, i).trim ();
					isOneValue = true;
				    }break;
				default:
				    this.error (2);
				}
				var dataType = dataLabel + " ";
				dataType = dataType.substring (0, dataType.indexOf (" ")).toLowerCase ();
				if (dataType.equals ("model") || dataType.equals ("append")) {
				    this.load ();
				    return;
				}if (this.isSyntaxCheck) return;
				var isDefault = (dataLabel.toLowerCase ().indexOf ("(default)") >= 0);
				this.$data =  new Array (4);
				if (dataType.equals ("element_vdw")) {
				    this.$data[0] = dataType;
				    this.$data[1] = dataString.$replace (';', '\n');
				    var n = org.jmol.util.Elements.elementNumberMax;
				    var eArray =  Clazz.newIntArray (n + 1, 0);
				    for (var ie = 1; ie <= n; ie++) eArray[ie] = ie;

				    this.$data[2] = eArray;
				    this.$data[3] =  new Integer (0);
				    this.viewer.setData ("element_vdw", this.$data, n, 0, 0, 0, 0);
				    return;
				}if (dataType.equals ("connect_atoms")) {
				    this.viewer.connect (org.jmol.util.Parser.parseFloatArray2d (dataString));
				    return;
				}if (dataType.indexOf ("ligand_") == 0) {
				    this.viewer.setLigandModel (dataLabel.substring (7), dataString.trim ());
				    return;
				}if (dataType.indexOf ("data2d_") == 0) {
				    this.$data[0] = dataLabel;
				    this.$data[1] = org.jmol.util.Parser.parseFloatArray2d (dataString);
				    this.$data[3] =  new Integer (2);
				    this.viewer.setData (dataLabel, this.$data, 0, 0, 0, 0, 0);
				    return;
				}if (dataType.indexOf ("data3d_") == 0) {
				    this.$data[0] = dataLabel;
				    this.$data[1] = org.jmol.util.Parser.parseFloatArray3d (dataString);
				    this.$data[3] =  new Integer (3);
				    this.viewer.setData (dataLabel, this.$data, 0, 0, 0, 0, 0);
				    return;
				}var tokens = org.jmol.util.Parser.getTokens (dataLabel);
				if (dataType.indexOf ("property_") == 0 && !(tokens.length == 2 && tokens[1].equals ("set"))) {
				    var bs = this.viewer.getSelectionSet (false);
				    this.$data[0] = dataType;
				    var atomNumberField = (isOneValue ? 0 : (this.viewer.getParameter ("propertyAtomNumberField")).intValue ());
				    var atomNumberFieldColumnCount = (isOneValue ? 0 : (this.viewer.getParameter ("propertyAtomNumberColumnCount")).intValue ());
				    var propertyField = (isOneValue ? -2147483648 : (this.viewer.getParameter ("propertyDataField")).intValue ());
				    var propertyFieldColumnCount = (isOneValue ? 0 : (this.viewer.getParameter ("propertyDataColumnCount")).intValue ());
				    if (!isOneValue && dataLabel.indexOf (" ") >= 0) {
					if (tokens.length == 3) {
					    dataLabel = tokens[0];
					    atomNumberField = org.jmol.util.Parser.parseInt (tokens[1]);
					    propertyField = org.jmol.util.Parser.parseInt (tokens[2]);
					}if (tokens.length == 5) {
					    dataLabel = tokens[0];
					    atomNumberField = org.jmol.util.Parser.parseInt (tokens[1]);
					    atomNumberFieldColumnCount = org.jmol.util.Parser.parseInt (tokens[2]);
					    propertyField = org.jmol.util.Parser.parseInt (tokens[3]);
					    propertyFieldColumnCount = org.jmol.util.Parser.parseInt (tokens[4]);
					}}if (atomNumberField < 0) atomNumberField = 0;
				    if (propertyField < 0) propertyField = 0;
				    var atomCount = this.viewer.getAtomCount ();
				    var atomMap = null;
				    var bsTemp = org.jmol.util.BitSetUtil.newBitSet (atomCount);
				    if (atomNumberField > 0) {
					atomMap =  Clazz.newIntArray (atomCount + 2, 0);
					for (var j = 0; j <= atomCount; j++) atomMap[j] = -1;

					for (var j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1)) {
					    var atomNo = this.viewer.getAtomNumber (j);
					    if (atomNo > atomCount + 1 || atomNo < 0 || bsTemp.get (atomNo)) continue;
					    bsTemp.set (atomNo);
					    atomMap[atomNo] = j;
					}
					this.$data[2] = atomMap;
				    } else {
					this.$data[2] = org.jmol.util.BitSetUtil.copy (bs);
				    }this.$data[1] = dataString;
				    this.$data[3] =  new Integer (0);
				    this.viewer.setData (dataType, this.$data, atomCount, atomNumberField, atomNumberFieldColumnCount, propertyField, propertyFieldColumnCount);
				    return;
				}var userType = org.jmol.modelset.AtomCollection.getUserSettableType (dataType);
				if (userType >= 0) {
				    this.viewer.setAtomData (userType, dataType, dataString, isDefault);
				    return;
				}this.$data[0] = dataLabel;
				this.$data[1] = dataString;
				this.$data[3] =  new Integer (0);
				this.viewer.setData (dataType, this.$data, 0, 0, 0, 0, 0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "define", 
			    ($fz = function () {
				if (this.statementLength < 3 || !(Clazz.instanceOf (this.getToken (1).value, String))) this.error (22);
				var setName = (this.getToken (1).value).toLowerCase ();
				if (org.jmol.util.Parser.parseInt (setName) != -2147483648) this.error (22);
				if (this.isSyntaxCheck) return;
				var isSite = setName.startsWith ("site_");
				var isDynamic = (setName.indexOf ("dynamic_") == 0);
				if (isDynamic || isSite) {
				    var code =  new Array (this.statementLength);
				    for (var i = this.statementLength; --i >= 0; ) code[i] = this.statement[i];

				    this.definedAtomSets.put ("!" + (isSite ? setName : setName.substring (8)), code);
				} else {
				    var bs = this.atomExpressionAt (2);
				    this.definedAtomSets.put (setName, bs);
				    if (!this.isSyntaxCheck) this.viewer.setUserVariable ("@" + setName, org.jmol.script.ScriptVariable.newVariable (10, bs));
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "echo", 
			    ($fz = function (index, isImage) {
				if (this.isSyntaxCheck) return;
				var text = this.optParameterAsString (index);
				if (this.viewer.getEchoStateActive ()) {
				    if (isImage) {
					var retFileName =  new Array (1);
					var image = this.viewer.getFileAsImage (text, retFileName);
					if (image == null) {
					    text = retFileName[0];
					} else {
					    this.setShapeProperty (29, "text", retFileName[0]);
					    this.setShapeProperty (29, "image", image);
					    text = null;
					}} else if (text.startsWith ("\1")) {
					    text = text.substring (1);
					    isImage = true;
					}if (text != null) this.setShapeProperty (29, "text", text);
				}if (!isImage && this.viewer.getRefreshing ()) this.showString (this.viewer.formatText (text));
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "message", 
			    ($fz = function () {
				var text = this.parameterAsString (this.checkLast (1));
				if (this.isSyntaxCheck) return;
				var s = this.viewer.formatText (text);
				if (this.outputBuffer == null) this.viewer.showMessage (s);
				if (!s.startsWith ("_")) this.scriptStatusOrBuffer (s);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "log", 
			    ($fz = function () {
				if (this.statementLength == 1) this.error (2);
				if (this.isSyntaxCheck) return;
				var s = this.parameterExpressionString (1, 0);
				if (this.tokAt (1) == 1048588) this.setStringProperty ("logFile", "");
				else this.viewer.log (s);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "label", 
			    ($fz = function (index) {
				if (this.isSyntaxCheck) return;
				this.shapeManager.loadShape (5);
				var strLabel = null;
				switch (this.getToken (index).tok) {
				case 1048589:
				    strLabel = this.viewer.getStandardLabelFormat (0);
				    break;
				case 1048588:
				    break;
				case 12294:
				case 1610625028:
				    this.setShapeProperty (5, "display", this.theTok == 1610625028 ? Boolean.TRUE : Boolean.FALSE);
				    return;
				default:
				    strLabel = this.parameterAsString (index);
				}
				this.shapeManager.setLabel (strLabel, this.viewer.getSelectionSet (false));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "hover", 
			    ($fz = function () {
				if (this.isSyntaxCheck) return;
				var strLabel = this.parameterAsString (1);
				if (strLabel.equalsIgnoreCase ("on")) strLabel = "%U";
				else if (strLabel.equalsIgnoreCase ("off")) strLabel = null;
				this.viewer.setHoverLabel (strLabel);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "load", 
			    ($fz = function () {
				var doLoadFiles = (!this.isSyntaxCheck || this.isCmdLine_C_Option);
				var isAppend = false;
				var isInline = false;
				var isSmiles = false;
				var isData = false;
				var bsModels;
				var i = (this.tokAt (0) == 135270407 ? 0 : 1);
				var appendNew = this.viewer.getAppendNew ();
				var filter = null;
				var firstLastSteps = null;
				var modelCount0 = this.viewer.getModelCount () - (this.viewer.getFileName ().equals ("zapped") ? 1 : 0);
				var atomCount0 = this.viewer.getAtomCount ();
				var loadScript =  new org.jmol.util.StringXBuilder ().append ("load");
				var nFiles = 1;
				var htParams =  new java.util.Hashtable ();
				if (this.isStateScript && this.forceNoAddHydrogens) htParams.put ("doNotAddHydrogens", Boolean.TRUE);
				var modelName = null;
				var filenames = null;
				var tempFileInfo = null;
				var errMsg = null;
				var sOptions = "";
				var tokType = 0;
				var tok;
				if (this.statementLength == 1) {
				    i = 0;
				} else {
				    modelName = this.parameterAsString (i);
				    if (this.statementLength == 2 && !this.isSyntaxCheck) {
					if (modelName.endsWith (".spt") || modelName.endsWith (".png") || modelName.endsWith (".pngj")) {
					    this.script (0, modelName, false);
					    return;
					}}switch (tok = this.tokAt (i)) {
					case 1073742015:
					    var m = this.parameterAsString (this.checkLast (2));
					    if (!this.isSyntaxCheck) this.viewer.setMenu (m, true);
					    return;
					case 135270407:
					    isData = true;
					    loadScript.append (" /*data*/ data");
					    var key = this.stringParameter (++i).toLowerCase ();
					    loadScript.append (" ").append (org.jmol.util.Escape.escapeStr (key));
					    isAppend = key.startsWith ("append");
					    var strModel = (key.indexOf ("@") >= 0 ? "" + this.getParameter (key.substring (key.indexOf ("@") + 1), 4) : this.parameterAsString (++i));
					    strModel = this.viewer.fixInlineString (strModel, this.viewer.getInlineChar ());
					    htParams.put ("fileData", strModel);
					    htParams.put ("isData", Boolean.TRUE);
					    loadScript.appendC ('\n');
					    loadScript.append (strModel);
					    if (key.indexOf ("@") < 0) {
						loadScript.append (" end ").append (org.jmol.util.Escape.escapeStr (key));
						i += 2;
					    }break;
					case 1073741839:
					    isAppend = true;
					    loadScript.append (" append");
					    modelName = this.optParameterAsString (++i);
					    tok = org.jmol.script.Token.getTokFromName (modelName);
					    break;
					case 1073741824:
					    i++;
					    loadScript.append (" " + modelName);
					    tokType = (tok == 1073741824 && org.jmol.util.Parser.isOneOf (modelName.toLowerCase (), "xyz;vxyz;vibration;temperature;occupancy;partialcharge") ? org.jmol.script.Token.getTokFromName (modelName) : 0);
					    if (tokType != 0) {
						htParams.put ("atomDataOnly", Boolean.TRUE);
						htParams.put ("modelNumber", Integer.$valueOf (1));
						if (tokType == 4166) tokType = 1146095631;
						tempFileInfo = this.viewer.getFileInfo ();
						isAppend = true;
					    }}
				    switch (tok) {
				    case 1229984263:
				    case 1073741983:
					isInline = (tok == 1073741983);
					i++;
					loadScript.append (" " + modelName);
					break;
				    case 135267336:
					isSmiles = true;
					i++;
					break;
				    case 536870926:
				    case 1095766028:
					i++;
					loadScript.append (" " + modelName);
					if (tok == 536870926) htParams.put ("isTrajectory", Boolean.TRUE);
					if (this.isPoint3f (i)) {
					    var pt = this.getPoint3f (i, false);
					    i = this.iToken + 1;
					    htParams.put ("firstLastStep", [Clazz.floatToInt (pt.x), Clazz.floatToInt (pt.y), Clazz.floatToInt (pt.z)]);
					    loadScript.append (" " + org.jmol.util.Escape.escapePt (pt));
					} else if (this.tokAt (i) == 10) {
					    bsModels = this.getToken (i++).value;
					    htParams.put ("bsModels", bsModels);
					    loadScript.append (" " + org.jmol.util.Escape.escape (bsModels));
					} else {
					    htParams.put ("firstLastStep", [0, -1, 1]);
					}break;
				    case 1073741824:
					break;
				    default:
					modelName = "fileset";
				    }
				    if (this.getToken (i).tok != 4) this.error (16);
				}var filePt = i;
				var localName = null;
				if (this.tokAt (filePt + 1) == 1073741848) {
				    localName = this.stringParameter (i = i + 2);
				    if (this.viewer.getPathForAllFiles () !== "") {
					localName = null;
					filePt = i;
				    }}var filename = null;
				var appendedData = null;
				var appendedKey = null;
				if (this.statementLength == i + 1) {
				    if (i == 0 || (filename = this.parameterAsString (filePt)).length == 0) filename = this.viewer.getFullPathName ();
				    if (filename == null) {
					this.zap (false);
					return;
				    }if (isSmiles) {
					filename = "$" + filename;
				    } else if (!isInline) {
					if (filename.indexOf ("[]") >= 0) return;
					if (filename.indexOf ("[") == 0) {
					    filenames = org.jmol.util.Escape.unescapeStringArray (filename);
					    if (filenames != null) {
						if (i == 1) loadScript.append (" files");
						if (loadScript.indexOf (" files") < 0) this.error (22);
						for (var j = 0; j < filenames.length; j++) loadScript.append (" /*file*/").append (org.jmol.util.Escape.escapeStr (filenames[j]));

					    }}}} else if (this.getToken (i + 1).tok == 1073742010 || this.theTok == 2 || this.theTok == 7 || this.theTok == 269484096 || this.theTok == 1073742195 || this.theTok == 1048586 || this.theTok == 8 || this.theTok == 1073742080 || this.theTok == 1073741877 || this.theTok == 1073742163 || this.theTok == 1073742114 || this.theTok == 1073742152 || this.theTok == 1614417948 || this.theTok == 1073742066 || this.theTok == 1073741940 && this.tokAt (i + 3) != 1048582 || this.theTok == 1073741839 || this.theTok == 1073741824 && this.tokAt (i + 3) != 1048582) {
						if ((filename = this.parameterAsString (filePt)).length == 0 && (filename = this.viewer.getFullPathName ()) == null) {
						    this.zap (false);
						    return;
						}if (filePt == i) i++;
						if (filename.indexOf ("[]") >= 0) return;
						if ((tok = this.tokAt (i)) == 1073742010) {
						    var manifest = this.stringParameter (++i);
						    htParams.put ("manifest", manifest);
						    sOptions += " MANIFEST " + org.jmol.util.Escape.escapeStr (manifest);
						    tok = this.tokAt (++i);
						}switch (tok) {
						case 2:
						    var n = this.intParameter (i);
						    sOptions += " " + n;
						    if (n < 0) htParams.put ("vibrationNumber", Integer.$valueOf (-n));
						    else htParams.put ("modelNumber", Integer.$valueOf (n));
						    tok = this.tokAt (++i);
						    break;
						case 7:
						case 269484096:
						case 1073742195:
						    var data = this.floatParameterSet (i, 1, 2147483647);
						    i = this.iToken;
						    var bs =  new org.jmol.util.BitSet ();
						    for (var j = 0; j < data.length; j++) if (data[j] >= 1 && data[j] == Clazz.floatToInt (data[j])) bs.set (Clazz.floatToInt (data[j]) - 1);

						    htParams.put ("bsModels", bs);
						    var iArray =  Clazz.newIntArray (bs.cardinality (), 0);
						    for (var pt = 0, j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1)) iArray[pt++] = j + 1;

						    sOptions += " " + org.jmol.util.Escape.escapeAI (iArray);
						    tok = this.tokAt (i);
						    break;
						}
						var lattice = null;
						if (tok == 1048586 || tok == 8) {
						    lattice = this.getPoint3f (i, false);
						    i = this.iToken + 1;
						    tok = this.tokAt (i);
						}switch (tok) {
						case 1073742080:
						case 1073741877:
						case 1073742163:
						case 1073742114:
						case 1073742152:
						case 1614417948:
						    if (lattice == null) lattice = org.jmol.util.Point3f.new3 (555, 555, -1);
						    this.iToken = i - 1;
						}
						var offset = null;
						if (lattice != null) {
						    htParams.put ("lattice", lattice);
						    i = this.iToken + 1;
						    sOptions += " {" + Clazz.floatToInt (lattice.x) + " " + Clazz.floatToInt (lattice.y) + " " + Clazz.floatToInt (lattice.z) + "}";
						    if (this.tokAt (i) == 1073742080) {
							htParams.put ("packed", Boolean.TRUE);
							sOptions += " PACKED";
							i++;
						    }if (this.tokAt (i) == 1073741877) {
							htParams.put ("centroid", Boolean.TRUE);
							sOptions += " CENTROID";
							i++;
							if (this.tokAt (i) == 1073742080 && !htParams.containsKey ("packed")) {
							    htParams.put ("packed", Boolean.TRUE);
							    sOptions += " PACKED";
							    i++;
							}}if (this.tokAt (i) == 1073742163) {
							    var supercell;
							    if (this.isPoint3f (++i)) {
								var pt = this.getPoint3f (i, false);
								if (pt.x != Clazz.floatToInt (pt.x) || pt.y != Clazz.floatToInt (pt.y) || pt.z != Clazz.floatToInt (pt.z) || pt.x < 1 || pt.y < 1 || pt.z < 1) {
								    this.iToken = i;
								    this.error (22);
								}supercell = pt;
								i = this.iToken + 1;
							    } else {
								supercell = this.stringParameter (i++);
							    }htParams.put ("supercell", supercell);
							}var distance = 0;
						    if (this.tokAt (i) == 1073742114) {
							i++;
							distance = this.floatParameter (i++);
							sOptions += " range " + distance;
						    }htParams.put ("symmetryRange", Float.$valueOf (distance));
						    var spacegroup = null;
						    var sg;
						    var iGroup = -2147483648;
						    if (this.tokAt (i) == 1073742152) {
							++i;
							spacegroup = org.jmol.util.TextFormat.simpleReplace (this.parameterAsString (i++), "''", "\"");
							sOptions += " spacegroup " + org.jmol.util.Escape.escapeStr (spacegroup);
							if (spacegroup.equalsIgnoreCase ("ignoreOperators")) {
							    iGroup = -999;
							} else {
							    if (spacegroup.length == 0) {
								sg = this.viewer.getCurrentUnitCell ();
								if (sg != null) spacegroup = sg.getSpaceGroupName ();
							    } else {
								if (spacegroup.indexOf (",") >= 0) if ((lattice.x < 9 && lattice.y < 9 && lattice.z == 0)) spacegroup += "#doNormalize=0";
							    }htParams.put ("spaceGroupName", spacegroup);
							    iGroup = -2;
							}}var fparams = null;
						    if (this.tokAt (i) == 1614417948) {
							++i;
							if (this.optParameterAsString (i).length == 0) {
							    sg = this.viewer.getCurrentUnitCell ();
							    if (sg != null) {
								fparams = sg.getUnitCellAsArray (true);
								offset = sg.getCartesianOffset ();
							    }} else {
								fparams = this.floatParameterSet (i, 6, 9);
							    }if (fparams == null || fparams.length != 6 && fparams.length != 9) this.error (22);
							sOptions += " unitcell {";
							for (var j = 0; j < fparams.length; j++) sOptions += (j == 0 ? "" : " ") + fparams[j];

							sOptions += "}";
							htParams.put ("unitcell", fparams);
							if (iGroup == -2147483648) iGroup = -1;
						    }i = this.iToken + 1;
						    if (iGroup != -2147483648) htParams.put ("spaceGroupIndex", Integer.$valueOf (iGroup));
						}if (offset != null) this.coordinatesAreFractional = false;
						else if (this.tokAt (i) == 1073742066) offset = this.getPoint3f (++i, true);
						if (offset != null) {
						    if (this.coordinatesAreFractional) {
							offset.setT (this.fractionalPoint);
							htParams.put ("unitCellOffsetFractional", (this.coordinatesAreFractional ? Boolean.TRUE : Boolean.FALSE));
							sOptions += " offset {" + offset.x + " " + offset.y + " " + offset.z + "/1}";
						    } else {
							sOptions += " offset " + org.jmol.util.Escape.escapePt (offset);
						    }htParams.put ("unitCellOffset", offset);
						    i = this.iToken + 1;
						}if (this.tokAt (i) == 1073741839) {
						    if (this.tokAt (++i) == 135270407) {
							i += 2;
							appendedData = this.getToken (i++).value;
							appendedKey = this.stringParameter (++i);
							++i;
						    } else {
							appendedKey = this.stringParameter (i++);
							appendedData = this.stringParameter (i++);
						    }htParams.put (appendedKey, appendedData);
						}if (this.tokAt (i) == 1073741940) filter = this.stringParameter (++i);
					    } else {
						if (i == 1) {
						    i++;
						    loadScript.append (" " + modelName);
						}var pt = null;
						var bs = null;
						var fNames =  new java.util.ArrayList ();
						while (i < this.statementLength) {
						    switch (this.tokAt (i)) {
						    case 1073741940:
							filter = this.stringParameter (++i);
							++i;
							continue;
						    case 1048582:
							htParams.remove ("isTrajectory");
							if (firstLastSteps == null) {
							    firstLastSteps =  new java.util.ArrayList ();
							    pt = org.jmol.util.Point3f.new3 (0, -1, 1);
							}if (this.isPoint3f (++i)) {
							    pt = this.getPoint3f (i, false);
							    i = this.iToken + 1;
							} else if (this.tokAt (i) == 10) {
							    bs = this.getToken (i).value;
							    pt = null;
							    i = this.iToken + 1;
							}break;
						    case 1073741824:
							this.error (22);
						    }
						    fNames.add (filename = this.parameterAsString (i++));
						    if (pt != null) {
							firstLastSteps.add ([Clazz.floatToInt (pt.x), Clazz.floatToInt (pt.y), Clazz.floatToInt (pt.z)]);
							loadScript.append (" COORD " + org.jmol.util.Escape.escapePt (pt));
						    } else if (bs != null) {
							firstLastSteps.add (bs);
							loadScript.append (" COORD " + org.jmol.util.Escape.escape (bs));
						    }loadScript.append (" /*file*/$FILENAME" + fNames.size () + "$");
						}
						if (firstLastSteps != null) {
						    htParams.put ("firstLastSteps", firstLastSteps);
						}nFiles = fNames.size ();
						filenames =  new Array (nFiles);
						for (var j = 0; j < nFiles; j++) filenames[j] = fNames.get (j);

						filename = "fileSet";
					    }if (!doLoadFiles) return;
				if (appendedData != null) {
				    sOptions += " APPEND data \"" + appendedKey + "\"\n" + appendedData + (appendedData.endsWith ("\n") ? "" : "\n") + "end \"" + appendedKey + "\"";
				}if (filter == null) filter = this.viewer.getDefaultLoadFilter ();
				if (filter.length > 0) {
				    htParams.put ("filter", filter);
				    if (filter.equalsIgnoreCase ("2d")) filter = "2D-noMin";
				    sOptions += " FILTER " + org.jmol.util.Escape.escapeStr (filter);
				}var isVariable = false;
				if (filenames == null) {
				    if (isInline) {
					htParams.put ("fileData", filename);
				    } else if (filename.startsWith ("@") && filename.length > 1) {
					isVariable = true;
					var s = this.getStringParameter (filename.substring (1), false);
					htParams.put ("fileData", s);
					loadScript =  new org.jmol.util.StringXBuilder ().append ("{\n    var ").append (filename.substring (1)).append (" = ").append (org.jmol.util.Escape.escapeStr (s)).append (";\n    ").appendSB (loadScript);
				    }}var os = null;
				if (localName != null) {
				    if (localName.equals (".")) localName = this.viewer.getFilePath (filename, true);
				    if (localName.length == 0 || this.viewer.getFilePath (localName, false).equalsIgnoreCase (this.viewer.getFilePath (filename, false))) this.error (22);
				    var fullPath = [localName];
				    os = this.viewer.getOutputStream (localName, fullPath);
				    if (os == null) org.jmol.util.Logger.error ("Could not create output stream for " + fullPath[0]);
				    else htParams.put ("OutputStream", os);
				}if (filenames == null && tokType == 0) {
				    loadScript.append (" ");
				    if (isVariable || isInline) {
					loadScript.append (org.jmol.util.Escape.escapeStr (filename));
				    } else if (!isData) {
					if (!filename.equals ("string") && !filename.equals ("string[]")) loadScript.append ("/*file*/");
					if (localName != null) localName = this.viewer.getFilePath (localName, false);
					loadScript.append ((localName != null ? org.jmol.util.Escape.escapeStr (localName) : "$FILENAME$"));
				    }if (sOptions.length > 0) loadScript.append (" /*options*/ ").append (sOptions);
				    if (isVariable) loadScript.append ("\n  }");
				    htParams.put ("loadScript", loadScript);
				}this.setCursorWait (true);
				errMsg = this.viewer.loadModelFromFile (null, filename, filenames, null, isAppend, htParams, loadScript, tokType);
				if (os != null) try {
				    this.viewer.setFileInfo ([localName, localName, localName]);
				    org.jmol.util.Logger.info (org.jmol.i18n.GT._ ("file {0} created", localName));
				    this.showString (this.viewer.getFilePath (localName, false) + " created");
				    os.close ();
				} catch (e) {
				    if (Clazz.exceptionOf (e, java.io.IOException)) {
					org.jmol.util.Logger.error ("error closing file " + e.getMessage ());
				    } else {
					throw e;
				    }
				}
				if (tokType > 0) {
				    this.viewer.setFileInfo (tempFileInfo);
				    if (errMsg != null && !this.isCmdLine_c_or_C_Option) this.evalError (errMsg, null);
				    return;
				}if (errMsg != null && !this.isCmdLine_c_or_C_Option) {
				    if (errMsg.indexOf ("NOTE: file recognized as a script file: ") == 0) {
					filename = errMsg.substring ("NOTE: file recognized as a script file: ".length).trim ();
					this.script (0, filename, false);
					return;
				    }this.evalError (errMsg, null);
				}if (isAppend && (appendNew || nFiles > 1)) {
				    this.viewer.setAnimationRange (-1, -1);
				    this.viewer.setCurrentModelIndex (modelCount0);
				}if (this.scriptLevel == 0 && !isAppend && nFiles < 2) this.showString (this.viewer.getModelSetAuxiliaryInfoValue ("modelLoadNote"));
				if (this.logMessages) this.scriptStatusOrBuffer ("Successfully loaded:" + (filenames == null ? htParams.get ("fullPathName") : modelName));
				var info = this.viewer.getModelSetAuxiliaryInfo ();
				if (info != null && info.containsKey ("centroidMinMax") && this.viewer.getAtomCount () > 0) this.viewer.setCentroid (isAppend ? atomCount0 : 0, this.viewer.getAtomCount () - 1, info.get ("centroidMinMax"));
				var script = this.viewer.getDefaultLoadScript ();
				var msg = "";
				if (script.length > 0) msg += "\nUsing defaultLoadScript: " + script;
				if (info != null && this.viewer.getAllowEmbeddedScripts ()) {
				    var embeddedScript = info.remove ("jmolscript");
				    if (embeddedScript != null && embeddedScript.length > 0) {
					msg += "\nAdding embedded #jmolscript: " + embeddedScript;
					script += ";" + embeddedScript;
					this.setStringProperty ("_loadScript", script);
					script = "allowEmbeddedScripts = false;try{" + script + "} allowEmbeddedScripts = true;";
				    }}this.logLoadInfo (msg);
				var siteScript = (info == null ? null : info.remove ("sitescript"));
				if (siteScript != null) script = siteScript + ";" + script;
				if (script.length > 0 && !this.isCmdLine_c_or_C_Option) this.runScript (script);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "logLoadInfo", 
			    ($fz = function (msg) {
				if (msg.length > 0) org.jmol.util.Logger.info (msg);
				var sb =  new org.jmol.util.StringXBuilder ();
				var modelCount = this.viewer.getModelCount ();
				if (modelCount > 1) sb.appendI (modelCount).append (" models\n");
				for (var i = 0; i < modelCount; i++) {
				    var moData = this.viewer.getModelAuxiliaryInfoValue (i, "moData");
				    if (moData == null) continue;
				    sb.appendI ((moData.get ("mos")).size ()).append (" molecular orbitals in model ").append (this.viewer.getModelNumberDotted (i)).append ("\n");
				}
				if (sb.length () > 0) this.showString (sb.toString ());
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getFullPathName", 
			    ($fz = function () {
				var filename = (!this.isSyntaxCheck || this.isCmdLine_C_Option ? this.viewer.getFullPathName () : "test.xyz");
				if (filename == null) this.error (22);
				return filename;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "measure", 
			    ($fz = function () {
				if (this.tokAt (1) == 135267335) {
				    var smarts = this.stringParameter (this.statementLength == 3 ? 2 : 4);
				    if (this.isSyntaxCheck) return;
				    var atoms = this.viewer.getModelSet ().atoms;
				    var atomCount = this.viewer.getAtomCount ();
				    var maps = this.viewer.getSmilesMatcher ().getCorrelationMaps (smarts, atoms, atomCount, this.viewer.getSelectionSet (false), true, false);
				    if (maps == null) return;
				    this.setShapeProperty (6, "maps", maps);
				    return;
				}switch (this.statementLength) {
				case 1:
				case 2:
				    switch (this.getToken (1).tok) {
				    case 0:
				    case 1048589:
					this.setShapeProperty (6, "hideAll", Boolean.FALSE);
					return;
				    case 1048588:
					this.setShapeProperty (6, "hideAll", Boolean.TRUE);
					return;
				    case 1073742001:
					if (!this.isSyntaxCheck) this.showStringPrint (this.viewer.getMeasurementInfoAsString (), false);
					return;
				    case 12291:
					if (!this.isSyntaxCheck) this.viewer.clearAllMeasurements ();
					return;
				    case 4:
					this.setShapeProperty (6, "setFormats", this.stringParameter (1));
					return;
				    }
				    this.errorStr (24, "ON, OFF, DELETE");
				    break;
				case 3:
				    switch (this.getToken (1).tok) {
				    case 12291:
					if (this.getToken (2).tok == 1048579) {
					    if (!this.isSyntaxCheck) this.viewer.clearAllMeasurements ();
					} else {
					    var i = this.intParameter (2) - 1;
					    if (!this.isSyntaxCheck) this.viewer.deleteMeasurement (i);
					}return;
				    }
				}
				var nAtoms = 0;
				var expressionCount = 0;
				var modelIndex = -1;
				var atomIndex = -1;
				var ptFloat = -1;
				var countPlusIndexes =  Clazz.newIntArray (5, 0);
				var rangeMinMax = [3.4028235E38, 3.4028235E38];
				var isAll = false;
				var isAllConnected = false;
				var isNotConnected = false;
				var isRange = true;
				var rd = null;
				var intramolecular = null;
				var tokAction = 269484114;
				var strFormat = null;
				var points =  new java.util.ArrayList ();
				var bs =  new org.jmol.util.BitSet ();
				var value = null;
				var tickInfo = null;
				var nBitSets = 0;
				for (var i = 1; i < this.statementLength; ++i) {
				    switch (this.getToken (i).tok) {
				    case 1073741824:
					this.errorStr (24, "ALL, ALLCONNECTED, DELETE");
					break;
				    default:
					this.error (15);
					break;
				    case 269484144:
					if (this.tokAt (i + 1) != 135266310) this.error (22);
					i++;
					isNotConnected = true;
					break;
				    case 135266310:
				    case 1073741834:
				    case 1048579:
					isAllConnected = (this.theTok == 1073741834);
					atomIndex = -1;
					isAll = true;
					if (isAllConnected && isNotConnected) this.error (22);
					break;
				    case 3:
					if (rd != null) this.error (22);
					isAll = true;
					isRange = true;
					ptFloat = (ptFloat + 1) % 2;
					rangeMinMax[ptFloat] = this.floatParameter (i);
					break;
				    case 12291:
					if (tokAction != 269484114) this.error (22);
					tokAction = 12291;
					break;
				    case 2:
					var iParam = this.intParameter (i);
					if (isAll) {
					    isRange = true;
					    ptFloat = (ptFloat + 1) % 2;
					    rangeMinMax[ptFloat] = iParam;
					} else {
					    atomIndex = this.viewer.getAtomIndexFromAtomNumber (iParam);
					    if (!this.isSyntaxCheck && atomIndex < 0) return;
					    if (value != null) this.error (22);
					    if ((countPlusIndexes[0] = ++nAtoms) > 4) this.error (2);
					    countPlusIndexes[nAtoms] = atomIndex;
					}break;
				    case 1095761933:
					modelIndex = this.intParameter (++i);
					break;
				    case 1048588:
					if (tokAction != 269484114) this.error (22);
					tokAction = 1048588;
					break;
				    case 1048589:
					if (tokAction != 269484114) this.error (22);
					tokAction = 1048589;
					break;
				    case 1073742114:
					isAll = true;
					isRange = true;
					atomIndex = -1;
					break;
				    case 1073741989:
				    case 1073741990:
					intramolecular = Boolean.$valueOf (this.theTok == 1073741989);
					isAll = true;
					isNotConnected = (this.theTok == 1073741990);
					break;
				    case 1649412112:
					if (ptFloat >= 0) this.error (22);
					rd = this.encodeRadiusParameter (i, false, true);
					rd.values = rangeMinMax;
					i = this.iToken;
					isNotConnected = true;
					isAll = true;
					intramolecular = Boolean.$valueOf (false);
					if (nBitSets == 1) {
					    nBitSets++;
					    nAtoms++;
					    var bs2 = org.jmol.util.BitSetUtil.copy (bs);
					    org.jmol.util.BitSetUtil.invertInPlace (bs2, this.viewer.getAtomCount ());
					    bs2.and (this.viewer.getAtomsWithinRadius (5, bs, false, null));
					    points.add (bs2);
					}break;
				    case 10:
				    case 1048577:
				    case 1048586:
				    case 8:
				    case 1048583:
					if (this.theTok == 10 || this.theTok == 1048577) nBitSets++;
					if (atomIndex >= 0) this.error (22);
					this.expressionResult = Boolean.FALSE;
					value = this.centerParameter (i);
					if (Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet)) {
					    value = bs = this.expressionResult;
					    if (!this.isSyntaxCheck && bs.length () == 0) return;
					}if (Clazz.instanceOf (value, org.jmol.util.Point3f)) {
					    var v =  new org.jmol.util.Point3fi ();
					    v.setT (value);
					    v.modelIndex = modelIndex;
					    value = v;
					}if ((nAtoms = ++expressionCount) > 4) this.error (2);
					i = this.iToken;
					points.add (value);
					break;
				    case 4:
					strFormat = this.stringParameter (i);
					break;
				    case 1073742164:
					tickInfo = this.checkTicks (i, false, true, true);
					i = this.iToken;
					tokAction = 1060866;
					break;
				    }
				}
				if (rd != null && (ptFloat >= 0 || nAtoms != 2) || nAtoms < 2 && (tickInfo == null || nAtoms == 1)) this.error (2);
				if (strFormat != null && strFormat.indexOf (nAtoms + ":") != 0) strFormat = nAtoms + ":" + strFormat;
				if (isRange) {
				    if (rangeMinMax[1] < rangeMinMax[0]) {
					rangeMinMax[1] = rangeMinMax[0];
					rangeMinMax[0] = (rangeMinMax[1] == 3.4028235E38 ? 3.4028235E38 : -200);
				    }}if (this.isSyntaxCheck) return;
				if (value != null || tickInfo != null) {
				    if (rd == null) rd =  new org.jmol.atomdata.RadiusData (rangeMinMax, 0, null, null);
				    if (value == null) tickInfo.id = "default";
				    if (value != null && strFormat != null && tokAction == 269484114) tokAction = 1060866;
				    this.setShapeProperty (6, "measure",  new org.jmol.modelset.MeasurementData (this.viewer, points, tokAction, rd, strFormat, null, tickInfo, isAllConnected, isNotConnected, intramolecular, isAll));
				    return;
				}switch (tokAction) {
				case 12291:
				    this.setShapeProperty (6, "delete", countPlusIndexes);
				    break;
				case 1048589:
				    this.setShapeProperty (6, "show", countPlusIndexes);
				    break;
				case 1048588:
				    this.setShapeProperty (6, "hide", countPlusIndexes);
				    break;
				default:
				    this.setShapeProperty (6, (strFormat == null ? "toggle" : "toggleOn"), countPlusIndexes);
				    if (strFormat != null) this.setShapeProperty (6, "setFormats", strFormat);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "plot", 
			    ($fz = function (args) {
				var modelIndex = this.viewer.getCurrentModelIndex ();
				if (modelIndex < 0) this.errorStr (30, "plot");
				modelIndex = this.viewer.getJmolDataSourceFrame (modelIndex);
				var pt = args.length - 1;
				var isReturnOnly = (args !== this.statement);
				var statementSave = this.statement;
				if (isReturnOnly) this.statement = args;
				var tokCmd = (isReturnOnly ? 4148 : args[0].tok);
				var pt0 = (isReturnOnly || tokCmd == 135270417 || tokCmd == 1052714 ? 0 : 1);
				var filename = null;
				var makeNewFrame = true;
				var isDraw = false;
				switch (tokCmd) {
				case 4133:
				case 135270417:
				case 1052714:
				    break;
				case 135176:
				    makeNewFrame = false;
				    isDraw = true;
				    break;
				case 4148:
				    makeNewFrame = false;
				    break;
				case 135270421:
				    makeNewFrame = false;
				    if (org.jmol.script.ScriptEvaluator.tokAtArray (pt, args) == 4) {
					filename = this.stringParameter (pt--);
				    } else if (org.jmol.script.ScriptEvaluator.tokAtArray (pt - 1, args) == 1048584) {
					filename = this.parameterAsString (pt - 2) + "." + this.parameterAsString (pt);
					pt -= 3;
				    } else {
					this.statement = statementSave;
					this.iToken = this.statement.length;
					this.error (13);
				    }break;
				}
				var qFrame = "";
				var parameters = null;
				var stateScript = "";
				var isQuaternion = false;
				var isDerivative = false;
				var isSecondDerivative = false;
				var isRamachandranRelative = false;
				var propertyX = 0;
				var propertyY = 0;
				var propertyZ = 0;
				var bs = org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSet (false));
				var preSelected = "; select " + org.jmol.util.Escape.escape (bs) + ";\n ";
				var type = this.optParameterAsString (pt).toLowerCase ();
				var minXYZ = null;
				var maxXYZ = null;
				var tok = org.jmol.script.ScriptEvaluator.tokAtArray (pt0, args);
				if (tok == 4) tok = org.jmol.script.Token.getTokFromName (args[pt0].value);
				switch (tok) {
				default:
				    this.iToken = 1;
				    this.error (22);
				    break;
				case 135270407:
				    this.iToken = 1;
				    type = "data";
				    preSelected = "";
				    break;
				case 1716520973:
				    this.iToken = pt0 + 1;
				    if (!org.jmol.script.Token.tokAttr (propertyX = this.tokAt (this.iToken++), 1078984704) || !org.jmol.script.Token.tokAttr (propertyY = this.tokAt (this.iToken++), 1078984704)) this.error (22);
				    if (org.jmol.script.Token.tokAttr (propertyZ = this.tokAt (this.iToken), 1078984704)) this.iToken++;
				    else propertyZ = 0;
				    if (this.tokAt (this.iToken) == 32) {
					minXYZ = this.getPoint3f (++this.iToken, false);
					this.iToken++;
				    }if (this.tokAt (this.iToken) == 64) {
					maxXYZ = this.getPoint3f (++this.iToken, false);
					this.iToken++;
				    }type = "property " + org.jmol.script.Token.nameOf (propertyX) + " " + org.jmol.script.Token.nameOf (propertyY) + (propertyZ == 0 ? "" : " " + org.jmol.script.Token.nameOf (propertyZ));
				    if (bs.nextSetBit (0) < 0) bs = this.viewer.getModelUndeletedAtomsBitSet (modelIndex);
				    stateScript = "select " + org.jmol.util.Escape.escape (bs) + ";\n ";
				    break;
				case 1052714:
				    if (type.equalsIgnoreCase ("draw")) {
					isDraw = true;
					type = this.optParameterAsString (--pt).toLowerCase ();
				    }isRamachandranRelative = (pt > pt0 && type.startsWith ("r"));
				    type = "ramachandran" + (isRamachandranRelative ? " r" : "") + (tokCmd == 135176 ? " draw" : "");
				    break;
				case 135270417:
				case 137363468:
				    qFrame = " \"" + this.viewer.getQuaternionFrame () + "\"";
				    stateScript = "set quaternionFrame" + qFrame + ";\n  ";
				    isQuaternion = true;
				    if (type.equalsIgnoreCase ("draw")) {
					isDraw = true;
					type = this.optParameterAsString (--pt).toLowerCase ();
				    }isDerivative = (type.startsWith ("deriv") || type.startsWith ("diff"));
				    isSecondDerivative = (isDerivative && type.indexOf ("2") > 0);
				    if (isDerivative) pt--;
				    if (type.equalsIgnoreCase ("helix") || type.equalsIgnoreCase ("axis")) {
					isDraw = true;
					isDerivative = true;
					pt = -1;
				    }type = ((pt <= pt0 ? "" : this.optParameterAsString (pt)) + "w").substring (0, 1);
				    if (type.equals ("a") || type.equals ("r")) isDerivative = true;
				    if (!org.jmol.util.Parser.isOneOf (type, "w;x;y;z;r;a")) this.evalError ("QUATERNION [w,x,y,z,a,r] [difference][2]", null);
				    type = "quaternion " + type + (isDerivative ? " difference" : "") + (isSecondDerivative ? "2" : "") + (isDraw ? " draw" : "");
				    break;
				}
				this.statement = statementSave;
				if (this.isSyntaxCheck) return "";
				if (makeNewFrame) {
				    stateScript += "plot " + type;
				    var ptDataFrame = this.viewer.getJmolDataFrameIndex (modelIndex, stateScript);
				    if (ptDataFrame > 0 && tokCmd != 135270421 && tokCmd != 4148) {
					this.viewer.setCurrentModelIndexClear (ptDataFrame, true);
					return "";
				    }}var dataX = null;
				var dataY = null;
				var dataZ = null;
				var factors = org.jmol.util.Point3f.new3 (1, 1, 1);
				if (tok == 1716520973) {
				    dataX = this.getBitsetPropertyFloat (bs, propertyX | 224, (minXYZ == null ? NaN : minXYZ.x), (maxXYZ == null ? NaN : maxXYZ.x));
				    dataY = this.getBitsetPropertyFloat (bs, propertyY | 224, (minXYZ == null ? NaN : minXYZ.y), (maxXYZ == null ? NaN : maxXYZ.y));
				    if (propertyZ != 0) dataZ = this.getBitsetPropertyFloat (bs, propertyZ | 224, (minXYZ == null ? NaN : minXYZ.z), (maxXYZ == null ? NaN : maxXYZ.z));
				    if (minXYZ == null) minXYZ = org.jmol.util.Point3f.new3 (org.jmol.script.ScriptEvaluator.getMinMax (dataX, false, propertyX), org.jmol.script.ScriptEvaluator.getMinMax (dataY, false, propertyY), org.jmol.script.ScriptEvaluator.getMinMax (dataZ, false, propertyZ));
				    if (maxXYZ == null) maxXYZ = org.jmol.util.Point3f.new3 (org.jmol.script.ScriptEvaluator.getMinMax (dataX, true, propertyX), org.jmol.script.ScriptEvaluator.getMinMax (dataY, true, propertyY), org.jmol.script.ScriptEvaluator.getMinMax (dataZ, true, propertyZ));
				    org.jmol.util.Logger.info ("plot min/max: " + minXYZ + " " + maxXYZ);
				    var center = org.jmol.util.Point3f.newP (maxXYZ);
				    center.add (minXYZ);
				    center.scale (0.5);
				    factors.setT (maxXYZ);
				    factors.sub (minXYZ);
				    factors.set (factors.x / 200, factors.y / 200, factors.z / 200);
				    if (org.jmol.script.Token.tokAttr (propertyX, 1095761920)) {
					factors.x = 1;
					center.x = 0;
				    } else if (factors.x > 0.1 && factors.x <= 10) {
					factors.x = 1;
				    }if (org.jmol.script.Token.tokAttr (propertyY, 1095761920)) {
					factors.y = 1;
					center.y = 0;
				    } else if (factors.y > 0.1 && factors.y <= 10) {
					factors.y = 1;
				    }if (org.jmol.script.Token.tokAttr (propertyZ, 1095761920)) {
					factors.z = 1;
					center.z = 0;
				    } else if (factors.z > 0.1 && factors.z <= 10) {
					factors.z = 1;
				    }if (propertyZ == 0) center.z = minXYZ.z = maxXYZ.z = factors.z = 0;
				    for (var i = 0; i < dataX.length; i++) dataX[i] = (dataX[i] - center.x) / factors.x;

				    for (var i = 0; i < dataY.length; i++) dataY[i] = (dataY[i] - center.y) / factors.y;

				    if (propertyZ != 0) for (var i = 0; i < dataZ.length; i++) dataZ[i] = (dataZ[i] - center.z) / factors.z;

				    parameters = [bs, dataX, dataY, dataZ, minXYZ, maxXYZ, factors, center];
				}if (tokCmd == 135270421) return this.viewer.streamFileData (filename, "PLOT", type, modelIndex, parameters);
				var data = (type.equals ("data") ? "1 0 H 0 0 0 # Jmol PDB-encoded data" : this.viewer.getPdbData (modelIndex, type, parameters));
				if (tokCmd == 4148) return data;
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.info (data);
				if (tokCmd == 135176) {
				    this.runScript (data);
				    return "";
				}var savedFileInfo = this.viewer.getFileInfo ();
				var oldAppendNew = this.viewer.getAppendNew ();
				this.viewer.setAppendNew (true);
				var isOK = (data != null && this.viewer.loadInline (data, true) == null);
				this.viewer.setAppendNew (oldAppendNew);
				this.viewer.setFileInfo (savedFileInfo);
				if (!isOK) return "";
				var modelCount = this.viewer.getModelCount ();
				this.viewer.setJmolDataFrame (stateScript, modelIndex, modelCount - 1);
				if (tok != 1716520973) stateScript += ";\n" + preSelected;
				var ss = this.viewer.addStateScript (stateScript, true, false);
				var radius = 150;
				var script;
				switch (tok) {
				default:
				    script = "frame 0.0; frame last; reset;select visible;wireframe only;";
				    radius = 10;
				    break;
				case 1716520973:
				    this.viewer.setFrameTitle (modelCount - 1, type + " plot for model " + this.viewer.getModelNumberDotted (modelIndex));
				    var f = 3;
				    script = "frame 0.0; frame last; reset;select visible; spacefill " + f + "; wireframe 0;" + "draw plotAxisX" + modelCount + " {100 -100 -100} {-100 -100 -100} \"" + org.jmol.script.Token.nameOf (propertyX) + "\";" + "draw plotAxisY" + modelCount + " {-100 100 -100} {-100 -100 -100} \"" + org.jmol.script.Token.nameOf (propertyY) + "\";";
				    if (propertyZ != 0) script += "draw plotAxisZ" + modelCount + " {-100 -100 100} {-100 -100 -100} \"" + org.jmol.script.Token.nameOf (propertyZ) + "\";";
				    break;
				case 1052714:
				    this.viewer.setFrameTitle (modelCount - 1, "ramachandran plot for model " + this.viewer.getModelNumberDotted (modelIndex));
				    script = "frame 0.0; frame last; reset;select visible; color structure; spacefill 3.0; wireframe 0;draw ramaAxisX" + modelCount + " {100 0 0} {-100 0 0} \"phi\";" + "draw ramaAxisY" + modelCount + " {0 100 0} {0 -100 0} \"psi\";";
				    break;
				case 135270417:
				case 137363468:
				    this.viewer.setFrameTitle (modelCount - 1, type.$replace ('w', ' ') + qFrame + " for model " + this.viewer.getModelNumberDotted (modelIndex));
				    var color = (org.jmol.util.Colix.getHexCode (this.viewer.getColixBackgroundContrast ()));
				    script = "frame 0.0; frame last; reset;select visible; wireframe 0; spacefill 3.0; isosurface quatSphere" + modelCount + " color " + color + " sphere 100.0 mesh nofill frontonly translucent 0.8;" + "draw quatAxis" + modelCount + "X {100 0 0} {-100 0 0} color red \"x\";" + "draw quatAxis" + modelCount + "Y {0 100 0} {0 -100 0} color green \"y\";" + "draw quatAxis" + modelCount + "Z {0 0 100} {0 0 -100} color blue \"z\";" + "color structure;" + "draw quatCenter" + modelCount + "{0 0 0} scale 0.02;";
				    break;
				}
				this.runScript (script + preSelected);
				ss.setModelIndex (this.viewer.getCurrentModelIndex ());
				this.viewer.setRotationRadius (radius, true);
				this.shapeManager.loadShape (29);
				this.showString ("frame " + this.viewer.getModelNumberDotted (modelCount - 1) + (type.length > 0 ? " created: " + type + (isQuaternion ? qFrame : "") : ""));
				return "";
			    }, $fz.isPrivate = true, $fz), "~A");
	c$.getMinMax = Clazz.defineMethod (c$, "getMinMax", 
					   ($fz = function (data, isMax, tok) {
					       if (data == null) return 0;
					       switch (tok) {
					       case 1112539142:
					       case 1112539143:
					       case 1112539144:
						   return (isMax ? 180 : -180);
					       case 1112539140:
					       case 1112539150:
						   return (isMax ? 360 : 0);
					       case 1112539148:
						   return (isMax ? 1 : -1);
					       }
					       var fmax = (isMax ? -1.0E10 : 1E10);
					       for (var i = data.length; --i >= 0; ) {
						   var f = data[i];
						   if (Float.isNaN (f)) continue;
						   if (isMax == (f > fmax)) fmax = f;
					       }
					       return fmax;
					   }, $fz.isPrivate = true, $fz), "~A,~B,~N");
	Clazz.defineMethod (c$, "pause", 
			    ($fz = function () {
				if (this.isSyntaxCheck) return false;
				var msg = this.optParameterAsString (1);
				if (!this.viewer.getBooleanProperty ("_useCommandThread")) {
				}if (this.viewer.autoExit || !this.viewer.haveDisplay && !this.viewer.isJS3D) return false;
				if (this.scriptLevel == 0 && this.pc == this.aatoken.length - 1) {
				    this.viewer.scriptStatus ("nothing to pause: " + msg);
				    return false;
				}msg = (msg.length == 0 ? ": RESUME to continue." : ": " + this.viewer.formatText (msg));
				this.pauseExecution (true);
				this.viewer.scriptStatusMsg ("script execution paused" + msg, "script paused for RESUME");
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "print", 
			    ($fz = function () {
				if (this.statementLength == 1) this.error (2);
				this.showStringPrint (this.parameterExpressionString (1, 0), true);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "prompt", 
			    ($fz = function () {
				var msg = null;
				if (this.statementLength == 1) {
				    if (!this.isSyntaxCheck) msg = this.getScriptContext ().getContextTrace (null, true).toString ();
				} else {
				    msg = this.parameterExpressionString (1, 0);
				}if (!this.isSyntaxCheck) this.viewer.prompt (msg, "OK", null, true);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "refresh", 
			    ($fz = function () {
				if (this.isSyntaxCheck) return;
				this.viewer.setTainted (true);
				this.viewer.requestRepaintAndWait ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "reset", 
			    ($fz = function () {
				if (this.statementLength == 3 && this.tokAt (1) == 135368713) {
				    if (!this.isSyntaxCheck) this.viewer.removeFunction (this.stringParameter (2));
				    return;
				}this.checkLength (-2);
				if (this.isSyntaxCheck) return;
				if (this.statementLength == 1) {
				    this.viewer.reset (false);
				    return;
				}switch (this.tokAt (1)) {
				case 135270422:
				    this.viewer.cacheClear ();
				    return;
				case 1073741936:
				    this.viewer.resetError ();
				    return;
				case 1087373323:
				    this.viewer.resetShapes (true);
				    return;
				case 135368713:
				    this.viewer.clearFunctions ();
				    return;
				case 1641025539:
				    var bsAllAtoms =  new org.jmol.util.BitSet ();
				    this.runScript (this.viewer.getDefaultStructure (null, bsAllAtoms));
				    this.viewer.resetBioshapes (bsAllAtoms);
				    return;
				case 1649412112:
				    this.viewer.setData ("element_vdw", [null, ""], 0, 0, 0, 0, 0);
				    return;
				case 1076887572:
				    this.viewer.resetAromatic ();
				    return;
				case 1611141175:
				    this.viewer.reset (true);
				    return;
				}
				var $var = this.parameterAsString (1);
				if ($var.charAt (0) == '_') this.error (22);
				this.viewer.unsetProperty ($var);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "restrict", 
			    ($fz = function () {
				var isBond = (this.tokAt (1) == 1678770178);
				this.select (isBond ? 2 : 1);
				this.restrictSelected (isBond, true);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "restrictSelected", 
			    ($fz = function (isBond, doInvert) {
				if (this.isSyntaxCheck) return;
				var bsSelected = org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSet (true));
				if (doInvert) {
				    this.viewer.invertSelection ();
				    var bsSubset = this.viewer.getSelectionSubset ();
				    if (bsSubset != null) {
					bsSelected = org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSet (true));
					bsSelected.and (bsSubset);
					this.viewer.select (bsSelected, false, null, true);
					org.jmol.util.BitSetUtil.invertInPlace (bsSelected, this.viewer.getAtomCount ());
					bsSelected.and (bsSubset);
				    }}org.jmol.util.BitSetUtil.andNot (bsSelected, this.viewer.getDeletedAtoms ());
				var bondmode = this.viewer.getBondSelectionModeOr ();
				if (!isBond) this.setBooleanProperty ("bondModeOr", true);
				this.setShapeSizeBs (1, 0, null);
				this.setShapeProperty (1, "type", Integer.$valueOf (32768));
				this.setShapeSizeBs (1, 0, null);
				this.setShapeProperty (1, "type", Integer.$valueOf (1023));
				for (var shapeType = 21; --shapeType >= 0; ) if (shapeType != 6) this.setShapeSizeBs (shapeType, 0, null);

				this.setShapeProperty (21, "delete", null);
				this.shapeManager.setLabel (null, this.viewer.getSelectionSet (true));
				if (!isBond) this.setBooleanProperty ("bondModeOr", bondmode);
				this.viewer.select (bsSelected, false, null, true);
			    }, $fz.isPrivate = true, $fz), "~B,~B");
	Clazz.defineMethod (c$, "rotate", 
			    ($fz = function (isSpin, isSelected) {
				if (this.statementLength == 2) switch (this.getToken (1).tok) {
				case 1048589:
				    if (!this.isSyntaxCheck) this.viewer.setSpinOn (true);
				    return;
				case 1048588:
				    if (!this.isSyntaxCheck) this.viewer.setSpinOn (false);
				    return;
				}
				var bsAtoms = null;
				var degreesPerSecond = 1.4E-45;
				var nPoints = 0;
				var endDegrees = 3.4028235E38;
				var isMolecular = false;
				var haveRotation = false;
				var ptsA = null;
				var points =  new Array (2);
				var rotAxis = org.jmol.util.Vector3f.new3 (0, 1, 0);
				var translation = null;
				var m4 = null;
				var m3 = null;
				var direction = 1;
				var tok;
				var q = null;
				var helicalPath = false;
				var ptsB = null;
				var bsCompare = null;
				var invPoint = null;
				var invPlane = null;
				var axesOrientationRasmol = this.viewer.getAxesOrientationRasmol ();
				for (var i = 1; i < this.statementLength; ++i) {
				    switch (tok = this.getToken (i).tok) {
				    case 10:
				    case 1048577:
				    case 1048586:
				    case 8:
				    case 1048583:
					if (tok == 10 || tok == 1048577) {
					    if (translation != null || q != null || nPoints == 2) {
						bsAtoms = this.atomExpressionAt (i);
						ptsB = null;
						isSelected = true;
						break;
					    }}haveRotation = true;
					if (nPoints == 2) nPoints = 0;
					var pt1 = this.centerParameterForModel (i, this.viewer.getCurrentModelIndex ());
					if (!this.isSyntaxCheck && tok == 1048583 && this.tokAt (i + 2) != 269484096) {
					    isMolecular = true;
					    rotAxis = this.getDrawObjectAxis (this.objectNameParameter (++i), this.viewer.getCurrentModelIndex ());
					}points[nPoints++] = pt1;
					break;
				    case 1611141175:
					isSpin = true;
					continue;
				    case 1073741988:
				    case 1073742030:
					isMolecular = true;
					continue;
				    case 1114638350:
					isSelected = true;
					break;
				    case 269484080:
					continue;
				    case 2:
				    case 3:
					if (isSpin) {
					    if (degreesPerSecond == 1.4E-45) {
						degreesPerSecond = this.floatParameter (i);
						continue;
					    } else if (endDegrees == 3.4028235E38) {
						endDegrees = degreesPerSecond;
						degreesPerSecond = this.floatParameter (i);
						continue;
					    }} else {
						if (endDegrees == 3.4028235E38) {
						    endDegrees = this.floatParameter (i);
						    continue;
						} else if (degreesPerSecond == 1.4E-45) {
						    degreesPerSecond = this.floatParameter (i);
						    isSpin = true;
						    continue;
						}}this.error (22);
					break;
				    case 269484192:
					direction = -1;
					continue;
				    case 1112541205:
					haveRotation = true;
					rotAxis.set (direction, 0, 0);
					continue;
				    case 1112541206:
					haveRotation = true;
					rotAxis.set (0, direction, 0);
					continue;
				    case 1112541207:
					haveRotation = true;
					rotAxis.set (0, 0, (axesOrientationRasmol && !isMolecular ? -direction : direction));
					continue;
				    case 9:
				    case 135270417:
					if (tok == 135270417) i++;
					haveRotation = true;
					q = this.getQuaternionParameter (i);
					rotAxis.setT (q.getNormal ());
					endDegrees = q.getTheta ();
					break;
				    case 135266307:
					haveRotation = true;
					if (this.isPoint3f (++i)) {
					    rotAxis.setT (this.centerParameter (i));
					    break;
					}var p4 = this.getPoint4f (i);
					rotAxis.set (p4.x, p4.y, p4.z);
					endDegrees = p4.w;
					q = org.jmol.util.Quaternion.newVA (rotAxis, endDegrees);
					break;
				    case 1048580:
					haveRotation = true;
					var iAtom1 = this.atomExpressionAt (++i).nextSetBit (0);
					var iAtom2 = this.atomExpressionAt (++this.iToken).nextSetBit (0);
					if (iAtom1 < 0 || iAtom2 < 0) return;
					bsAtoms = this.viewer.getBranchBitSet (iAtom2, iAtom1);
					isSelected = true;
					isMolecular = true;
					points[0] = this.viewer.getAtomPoint3f (iAtom1);
					points[1] = this.viewer.getAtomPoint3f (iAtom2);
					nPoints = 2;
					break;
				    case 4160:
					translation = org.jmol.util.Vector3f.newV (this.centerParameter (++i));
					isMolecular = isSelected = true;
					break;
				    case 137363468:
					helicalPath = true;
					continue;
				    case 1297090050:
					var symop = this.intParameter (++i);
					if (this.isSyntaxCheck) continue;
					var info = this.viewer.getSpaceGroupInfo (null);
					var op = (info == null ? null : info.get ("operations"));
					if (symop == 0 || op == null || op.length < Math.abs (symop)) this.error (22);
					op = op[Math.abs (symop) - 1];
					translation = op[5];
					invPoint = op[6];
					points[0] = op[7];
					if (op[8] != null) rotAxis = op[8];
					endDegrees = (op[9]).intValue ();
					if (symop < 0) {
					    endDegrees = -endDegrees;
					    if (translation != null) translation.scale (-1);
					}if (endDegrees == 0 && points[0] != null) {
					    rotAxis.normalize ();
					    org.jmol.util.Measure.getPlaneThroughPoint (points[0], rotAxis, invPlane =  new org.jmol.util.Point4f ());
					}q = org.jmol.util.Quaternion.newVA (rotAxis, endDegrees);
					nPoints = (points[0] == null ? 0 : 1);
					isMolecular = true;
					haveRotation = true;
					isSelected = true;
					continue;
				    case 135270405:
				    case 12:
				    case 11:
					haveRotation = true;
					if (tok == 135270405) {
					    bsCompare = this.atomExpressionAt (++i);
					    ptsA = this.viewer.getAtomPointVector (bsCompare);
					    if (ptsA == null) this.errorAt (22, i);
					    i = this.iToken;
					    ptsB = this.getPointVector (this.getToken (++i), i);
					    if (ptsB == null || ptsA.size () != ptsB.size ()) this.errorAt (22, i);
					    m4 =  new org.jmol.util.Matrix4f ();
					    points[0] =  new org.jmol.util.Point3f ();
					    nPoints = 1;
					    var stddev = (this.isSyntaxCheck ? 0 : org.jmol.util.Measure.getTransformMatrix4 (ptsA, ptsB, m4, points[0]));
					    if (stddev > 0.001) ptsB = null;
					} else if (tok == 12) {
					    m4 = this.theToken.value;
					}m3 =  new org.jmol.util.Matrix3f ();
					if (m4 != null) {
					    translation =  new org.jmol.util.Vector3f ();
					    m4.get (translation);
					    m4.getRotationScale (m3);
					} else {
					    m3 = this.theToken.value;
					}q = (this.isSyntaxCheck ?  new org.jmol.util.Quaternion () : org.jmol.util.Quaternion.newM (m3));
					rotAxis.setT (q.getNormal ());
					endDegrees = q.getTheta ();
					isMolecular = true;
					break;
				    default:
					this.error (22);
				    }
				    i = this.iToken;
				}
				if (this.isSyntaxCheck) return;
				if (isSelected && bsAtoms == null) bsAtoms = this.viewer.getSelectionSet (false);
				if (bsCompare != null) {
				    isSelected = true;
				    if (bsAtoms == null) bsAtoms = bsCompare;
				}var rate = (degreesPerSecond == 1.4E-45 ? 10 : endDegrees == 3.4028235E38 ? degreesPerSecond : (degreesPerSecond < 0) == (endDegrees > 0) ? -endDegrees / degreesPerSecond : degreesPerSecond);
				if (q != null) {
				    if (nPoints == 0 && translation != null) points[0] = this.viewer.getAtomSetCenter (bsAtoms != null ? bsAtoms : isSelected ? this.viewer.getSelectionSet (false) : this.viewer.getModelUndeletedAtomsBitSet (-1));
				    if (helicalPath && translation != null) {
					points[1] = org.jmol.util.Point3f.newP (points[0]);
					points[1].add (translation);
					var ret = org.jmol.util.Measure.computeHelicalAxis (null, 135266306, points[0], points[1], q);
					points[0] = ret[0];
					var theta = (ret[3]).x;
					if (theta != 0) {
					    translation = ret[1];
					    rotAxis = org.jmol.util.Vector3f.newV (translation);
					    if (theta < 0) rotAxis.scale (-1);
					}m4 = null;
				    }if (isSpin && m4 == null) m4 = org.jmol.script.ScriptMathProcessor.getMatrix4f (q.getMatrix (), translation);
				    if (points[0] != null) nPoints = 1;
				}if (invPoint != null) {
				    this.viewer.invertAtomCoordPt (invPoint, bsAtoms);
				    if (rotAxis == null) return;
				}if (invPlane != null) {
				    this.viewer.invertAtomCoordPlane (invPlane, bsAtoms);
				    if (rotAxis == null) return;
				}if (nPoints < 2) {
				    if (!isMolecular) {
					this.viewer.rotateAxisAngleAtCenter (points[0], rotAxis, rate, endDegrees, isSpin, bsAtoms);
					return;
				    }if (nPoints == 0) points[0] =  new org.jmol.util.Point3f ();
				    points[1] = org.jmol.util.Point3f.newP (points[0]);
				    points[1].add (rotAxis);
				    nPoints = 2;
				}if (nPoints == 0) points[0] =  new org.jmol.util.Point3f ();
				if (nPoints < 2 || points[0].distance (points[1]) == 0) {
				    points[1] = org.jmol.util.Point3f.newP (points[0]);
				    points[1].y += 1.0;
				}if (endDegrees == 3.4028235E38) endDegrees = 0;
				if (endDegrees != 0 && translation != null && !haveRotation) translation.scale (endDegrees / translation.length ());
				if (isSpin && translation != null && (endDegrees == 0 || degreesPerSecond == 0)) {
				    endDegrees = 0.01;
				    rate = (degreesPerSecond == 1.4E-45 ? 0.01 : degreesPerSecond < 0 ? -endDegrees / degreesPerSecond : degreesPerSecond * 0.01 / translation.length ());
				    degreesPerSecond = 0.01;
				}if (bsAtoms != null && isSpin && ptsB == null && m4 != null) {
				    ptsA = this.viewer.getAtomPointVector (bsAtoms);
				    ptsB = org.jmol.util.Measure.transformPoints (ptsA, m4, points[0]);
				}if (bsAtoms != null && !isSpin && ptsB != null) this.viewer.setAtomCoord (bsAtoms, 1146095626, ptsB);
				else this.viewer.rotateAboutPointsInternal (points[0], points[1], rate, endDegrees, isSpin, bsAtoms, translation, ptsB);
			    }, $fz.isPrivate = true, $fz), "~B,~B");
	Clazz.defineMethod (c$, "getQuaternionParameter", 
			    ($fz = function (i) {
				if (this.tokAt (i) == 7) {
				    var sv = (this.getToken (i)).getList ();
				    var p4 = null;
				    if (sv.size () == 0 || (p4 = org.jmol.script.ScriptVariable.pt4Value (sv.get (0))) == null) this.error (22);
				    return org.jmol.util.Quaternion.newP4 (p4);
				}return org.jmol.util.Quaternion.newP4 (this.getPoint4f (i));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getPointVector", 
			    function (t, i) {
				switch (t.tok) {
				case 10:
				    return this.viewer.getAtomPointVector (t.value);
				case 7:
				    var data =  new java.util.ArrayList ();
				    var pt;
				    var pts = (t).getList ();
				    for (var j = 0; j < pts.size (); j++) if ((pt = org.jmol.script.ScriptVariable.ptValue (pts.get (j))) != null) data.add (pt);
				    else return null;

				    return data;
				}
				if (i > 0) return this.viewer.getAtomPointVector (this.atomExpressionAt (i));
				return null;
			    }, "org.jmol.script.Token,~N");
	Clazz.defineMethod (c$, "getObjectCenter", 
			    ($fz = function (axisID, index, modelIndex) {
				var data = [axisID, Integer.$valueOf (index), Integer.$valueOf (modelIndex)];
				return (this.getShapePropertyData (22, "getCenter", data) || this.getShapePropertyData (23, "getCenter", data) || this.getShapePropertyData (27, "getCenter", data) || this.getShapePropertyData (24, "getCenter", data) || this.getShapePropertyData (26, "getCenter", data) ? data[2] : null);
			    }, $fz.isPrivate = true, $fz), "~S,~N,~N");
	Clazz.defineMethod (c$, "getObjectBoundingBox", 
			    ($fz = function (id) {
				var data = [id, null, null];
				return (this.getShapePropertyData (23, "getBoundingBox", data) || this.getShapePropertyData (27, "getBoundingBox", data) || this.getShapePropertyData (24, "getBoundingBox", data) || this.getShapePropertyData (26, "getBoundingBox", data) ? data[2] : null);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getDrawObjectAxis", 
			    ($fz = function (axisID, index) {
				var data = [axisID, Integer.$valueOf (index), null];
				return (this.getShapePropertyData (22, "getSpinAxis", data) ? data[2] : null);
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "script", 
			    ($fz = function (tok, filename, listCommands) {
				var loadCheck = true;
				var isCheck = false;
				var doStep = false;
				var lineNumber = 0;
				var pc = 0;
				var lineEnd = 0;
				var pcEnd = 0;
				var i = 2;
				var theScript = null;
				var localPath = null;
				var remotePath = null;
				var scriptPath = null;
				var params = null;
				if (tok == 135287308) {
				    this.checkLength (2);
				    if (!this.isSyntaxCheck) this.viewer.jsEval (this.parameterAsString (1));
				    return;
				}if (filename == null) {
				    tok = this.tokAt (1);
				    if (tok != 4) this.error (16);
				    filename = this.parameterAsString (1);
				    if (filename.equalsIgnoreCase ("applet")) {
					var appID = this.parameterAsString (2);
					theScript = this.parameterExpressionString (3, 0);
					this.checkLast (this.iToken);
					if (this.isSyntaxCheck) return;
					if (appID.length == 0 || appID.equals ("all")) appID = "*";
					if (!appID.equals (".")) {
					    this.viewer.jsEval (appID + "\1" + theScript);
					    if (!appID.equals ("*")) return;
					}} else {
					    tok = this.tokAt (this.statementLength - 1);
					    doStep = (tok == 266298);
					    if (filename.equalsIgnoreCase ("inline")) {
						theScript = this.parameterExpressionString (2, (doStep ? this.statementLength - 1 : 0));
						i = this.iToken + 1;
					    }while (filename.equalsIgnoreCase ("localPath") || filename.equalsIgnoreCase ("remotePath") || filename.equalsIgnoreCase ("scriptPath")) {
						if (filename.equalsIgnoreCase ("localPath")) localPath = this.parameterAsString (i++);
						else if (filename.equalsIgnoreCase ("scriptPath")) scriptPath = this.parameterAsString (i++);
						else remotePath = this.parameterAsString (i++);
						filename = this.parameterAsString (i++);
					    }
					    if ((tok = this.tokAt (i)) == 1073741878) {
						isCheck = true;
						tok = this.tokAt (++i);
					    }if (tok == 1073742050) {
						loadCheck = false;
						tok = this.tokAt (++i);
					    }if (tok == 1073741998 || tok == 1141899268) {
						i++;
						lineEnd = lineNumber = Math.max (this.intParameter (i++), 0);
						if (this.checkToken (i)) {
						    if (this.getToken (i).tok == 269484192) lineEnd = (this.checkToken (++i) ? this.intParameter (i++) : 0);
						    else lineEnd = -this.intParameter (i++);
						    if (lineEnd <= 0) this.error (22);
						}} else if (tok == 1073741890 || tok == 1073741892) {
						    i++;
						    pc = Math.max (this.intParameter (i++) - 1, 0);
						    pcEnd = pc + 1;
						    if (this.checkToken (i)) {
							if (this.getToken (i).tok == 269484192) pcEnd = (this.checkToken (++i) ? this.intParameter (i++) : 0);
							else pcEnd = -this.intParameter (i++);
							if (pcEnd <= 0) this.error (22);
						    }}if (this.tokAt (i) == 269484048) {
							params = this.parameterExpressionList (i, -1, false);
							i = this.iToken + 1;
						    }this.checkLength (doStep ? i + 1 : i);
					}}if (this.isSyntaxCheck && !this.isCmdLine_c_or_C_Option) return;
				if (this.isCmdLine_c_or_C_Option) isCheck = true;
				var wasSyntaxCheck = this.isSyntaxCheck;
				var wasScriptCheck = this.isCmdLine_c_or_C_Option;
				if (isCheck) this.isSyntaxCheck = this.isCmdLine_c_or_C_Option = true;
				this.pushContext (null);
				this.contextPath += " >> " + filename;
				if (theScript == null ? this.compileScriptFileInternal (filename, localPath, remotePath, scriptPath) : this.compileScript (null, theScript, false)) {
				    this.pcEnd = pcEnd;
				    this.lineEnd = lineEnd;
				    while (pc < this.lineNumbers.length && this.lineNumbers[pc] < lineNumber) pc++;

				    this.pc = pc;
				    var saveLoadCheck = this.isCmdLine_C_Option;
				    this.isCmdLine_C_Option = new Boolean (this.isCmdLine_C_Option & loadCheck).valueOf ();
				    this.executionStepping = new Boolean (this.executionStepping | doStep).valueOf ();
				    this.contextVariables =  new java.util.Hashtable ();
				    this.contextVariables.put ("_arguments", (params == null ? org.jmol.script.ScriptVariable.getVariableAI ([]) : org.jmol.script.ScriptVariable.getVariableList (params)));
				    this.instructionDispatchLoop (isCheck || listCommands);
				    if (this.debugScript && this.viewer.getMessageStyleChime ()) this.viewer.scriptStatus ("script <exiting>");
				    this.isCmdLine_C_Option = saveLoadCheck;
				    this.popContext (false, false);
				} else {
				    org.jmol.util.Logger.error (org.jmol.i18n.GT._ ("script ERROR: ") + this.errorMessage);
				    this.popContext (false, false);
				    if (wasScriptCheck) {
					this.setErrorMessage (null);
				    } else {
					this.evalError (null, null);
				    }}this.isSyntaxCheck = wasSyntaxCheck;
				this.isCmdLine_c_or_C_Option = wasScriptCheck;
			    }, $fz.isPrivate = true, $fz), "~N,~S,~B");
	Clazz.defineMethod (c$, "$function", 
			    ($fz = function () {
				if (this.isSyntaxCheck && !this.isCmdLine_c_or_C_Option) return;
				var name = this.getToken (0).value;
				if (!this.viewer.isFunction (name)) this.error (10);
				var params = (this.statementLength == 1 || this.statementLength == 3 && this.tokAt (1) == 269484048 && this.tokAt (2) == 269484049 ? null : this.parameterExpressionList (1, -1, false));
				if (this.isSyntaxCheck) return;
				this.runFunctionRet (null, name, params, null, false, true);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "sync", 
			    ($fz = function () {
				this.checkLength (-3);
				var text = "";
				var applet = "";
				switch (this.statementLength) {
				case 1:
				    applet = "*";
				    text = "ON";
				    break;
				case 2:
				    applet = this.parameterAsString (1);
				    if (applet.indexOf ("jmolApplet") == 0 || org.jmol.util.Parser.isOneOf (applet, "*;.;^")) {
					text = "ON";
					if (!this.isSyntaxCheck) this.viewer.syncScript (text, applet, 0);
					applet = ".";
					break;
				    }if (this.tokAt (1) == 2) {
					if (!this.isSyntaxCheck) this.viewer.syncScript (null, null, this.intParameter (1));
					return;
				    }text = applet;
				    applet = "*";
				    break;
				case 3:
				    if (this.isSyntaxCheck) return;
				    applet = this.parameterAsString (1);
				    text = (this.tokAt (2) == 528443 ? "GET_GRAPHICS" : this.parameterAsString (2));
				    if (this.tokAt (1) == 2) {
					this.viewer.syncScript (text, null, this.intParameter (1));
					return;
				    }break;
				}
				if (this.isSyntaxCheck) return;
				this.viewer.syncScript (text, applet, 0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "history", 
			    ($fz = function (pt) {
				if (this.statementLength == 1) {
				    this.showString (this.viewer.getSetHistory (2147483647));
				    return;
				}if (pt == 2) {
				    var n = this.intParameter (this.checkLast (2));
				    if (n < 0) this.error (22);
				    if (!this.isSyntaxCheck) this.viewer.getSetHistory (n == 0 ? 0 : -2 - n);
				    return;
				}switch (this.getToken (this.checkLast (1)).tok) {
				case 1048589:
				case 1073741882:
				    if (!this.isSyntaxCheck) this.viewer.getSetHistory (-2147483648);
				    return;
				case 1048588:
				    if (!this.isSyntaxCheck) this.viewer.getSetHistory (0);
				    break;
				default:
				    this.errorStr (24, "ON, OFF, CLEAR");
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "display", 
			    ($fz = function (isDisplay) {
				var bs = null;
				var addRemove = null;
				var i = 1;
				var tok;
				switch (tok = this.tokAt (1)) {
				case 1276118017:
				case 1073742119:
				    addRemove = Boolean.$valueOf (tok == 1276118017);
				    tok = this.tokAt (++i);
				    break;
				}
				var isGroup = (tok == 1087373318);
				if (isGroup) tok = this.tokAt (++i);
				switch (tok) {
				case 1048583:
				    this.setObjectProperty ();
				    return;
				case 0:
				    break;
				default:
				    if (this.statementLength == 4 && this.tokAt (2) == 1678770178) bs =  new org.jmol.modelset.Bond.BondSet (org.jmol.util.BitSetUtil.newBitSet2 (0, this.viewer.getModelSet ().getBondCount ()));
				    else bs = this.atomExpressionAt (i);
				}
				if (this.isSyntaxCheck) return;
				if (Clazz.instanceOf (bs, org.jmol.modelset.Bond.BondSet)) {
				    this.viewer.displayBonds (bs, isDisplay);
				    return;
				}this.viewer.displayAtoms (bs, isDisplay, isGroup, addRemove, this.tQuiet);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "$delete", 
			    ($fz = function () {
				if (this.statementLength == 1) {
				    this.zap (true);
				    return;
				}if (this.tokAt (1) == 1048583) {
				    this.setObjectProperty ();
				    return;
				}var bs = this.atomExpression (this.statement, 1, 0, true, false, true, false);
				if (this.isSyntaxCheck) return;
				var nDeleted = this.viewer.deleteAtoms (bs, false);
				if (!(this.tQuiet || this.scriptLevel > this.scriptReportingLevel)) this.scriptStatusOrBuffer (org.jmol.i18n.GT._ ("{0} atoms deleted", nDeleted));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "minimize", 
			    ($fz = function () {
				var bsSelected = null;
				var steps = 2147483647;
				var crit = 0;
				var addHydrogen = false;
				var isSilent = false;
				var bsFixed = null;
				var minimizer = this.viewer.getMinimizer (false);
				for (var i = 1; i < this.statementLength; i++) switch (this.getToken (i).tok) {
				case 1073741828:
				    addHydrogen = true;
				    continue;
				case 1073741874:
				case 1073742162:
				    this.checkLength (2);
				    if (this.isSyntaxCheck || minimizer == null) return;
				    minimizer.setProperty (this.parameterAsString (i), null);
				    return;
				case 1073741882:
				    this.checkLength (2);
				    if (this.isSyntaxCheck || minimizer == null) return;
				    minimizer.setProperty ("clear", null);
				    return;
				case 1073741894:
				    if (i != 1) this.error (22);
				    var n = 0;
				    var targetValue = 0;
				    var aList =  Clazz.newIntArray (5, 0);
				    if (this.tokAt (++i) == 1073741882) {
					this.checkLength (3);
				    } else {
					while (n < 4 && !this.isFloatParameter (i)) {
					    aList[++n] = this.atomExpressionAt (i).nextSetBit (0);
					    i = this.iToken + 1;
					}
					aList[0] = n;
					if (n == 1) this.error (22);
					targetValue = this.floatParameter (this.checkLast (i));
				    }if (!this.isSyntaxCheck) this.viewer.getMinimizer (true).setProperty ("constraint", [aList,  Clazz.newIntArray (n, 0), Float.$valueOf (targetValue)]);
				    return;
				case 1073741905:
				    crit = this.floatParameter (++i);
				    continue;
				case 1073741935:
				    steps = 0;
				    continue;
				case 1060869:
				    if (i != 1) this.error (22);
				    bsFixed = this.atomExpressionAt (++i);
				    if (bsFixed.nextSetBit (0) < 0) bsFixed = null;
				    i = this.iToken;
				    if (!this.isSyntaxCheck) this.viewer.getMinimizer (true).setProperty ("fixed", bsFixed);
				    if (i + 1 == this.statementLength) return;
				    continue;
				case 135280132:
				    bsSelected = this.atomExpressionAt (++i);
				    i = this.iToken;
				    continue;
				case 1073742148:
				    isSilent = true;
				    break;
				case 266298:
				    steps = this.intParameter (++i);
				    continue;
				default:
				    this.error (22);
				    break;
				}

				if (!this.isSyntaxCheck) this.viewer.minimize (steps, crit, bsSelected, bsFixed, 0, addHydrogen, isSilent, false);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "select", 
			    ($fz = function (i) {
				if (this.statementLength == 1) {
				    this.viewer.select (null, false, null, this.tQuiet || this.scriptLevel > this.scriptReportingLevel);
				    return;
				}if (this.statementLength == 2 && this.tokAt (1) == 1073742072) return;
				this.viewer.setNoneSelected (this.statementLength == 4 && this.tokAt (2) == 1048587);
				if (this.tokAt (2) == 10 && Clazz.instanceOf (this.getToken (2).value, org.jmol.modelset.Bond.BondSet) || this.getToken (2).tok == 1678770178 && this.getToken (3).tok == 10) {
				    if (this.statementLength == this.iToken + 2) {
					if (!this.isSyntaxCheck) this.viewer.selectBonds (this.theToken.value);
					return;
				    }this.error (22);
				}if (this.getToken (2).tok == 1746538509) {
				    if (this.statementLength == 5 && this.getToken (3).tok == 10) {
					if (!this.isSyntaxCheck) this.setShapeProperty (6, "select", this.theToken.value);
					return;
				    }this.error (22);
				}var bs = null;
				var addRemove = null;
				var isGroup = false;
				if (this.getToken (1).intValue == 0) {
				    var v = this.parameterExpressionToken (0).value;
				    if (!(Clazz.instanceOf (v, org.jmol.util.BitSet))) this.error (22);
				    this.checkLast (this.iToken);
				    bs = v;
				} else {
				    var tok = this.tokAt (i);
				    switch (tok) {
				    case 1276118017:
				    case 1073742119:
					addRemove = Boolean.$valueOf (tok == 1276118017);
					tok = this.tokAt (++i);
				    }
				    isGroup = (tok == 1087373318);
				    if (isGroup) tok = this.tokAt (++i);
				    bs = this.atomExpressionAt (i);
				}if (this.isSyntaxCheck) return;
				if (this.isBondSet) {
				    this.viewer.selectBonds (bs);
				} else {
				    if (bs.length () > this.viewer.getAtomCount ()) {
					var bs1 = this.viewer.getModelUndeletedAtomsBitSet (-1);
					bs1.and (bs);
					bs = bs1;
				    }this.viewer.select (bs, isGroup, addRemove, this.tQuiet || this.scriptLevel > this.scriptReportingLevel);
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "subset", 
			    ($fz = function () {
				var bs = null;
				if (!this.isSyntaxCheck) this.viewer.setSelectionSubset (null);
				if (this.statementLength != 1 && (this.statementLength != 4 || !this.getToken (2).value.equals ("off"))) bs = this.atomExpressionAt (1);
				if (!this.isSyntaxCheck) this.viewer.setSelectionSubset (bs);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "invertSelected", 
			    ($fz = function () {
				var pt = null;
				var plane = null;
				var bs = null;
				var iAtom = -2147483648;
				switch (this.tokAt (1)) {
				case 0:
				    if (this.isSyntaxCheck) return;
				    bs = this.viewer.getSelectionSet (false);
				    pt = this.viewer.getAtomSetCenter (bs);
				    this.viewer.invertAtomCoordPt (pt, bs);
				    return;
				case 528443:
				    iAtom = this.atomExpressionAt (2).nextSetBit (0);
				    bs = this.atomExpressionAt (this.iToken + 1);
				    break;
				case 135266320:
				    pt = this.centerParameter (2);
				    break;
				case 135266319:
				    plane = this.planeParameter (2);
				    break;
				case 135267841:
				    plane = this.hklParameter (2);
				    break;
				}
				this.checkLengthErrorPt (this.iToken + 1, 1);
				if (plane == null && pt == null && iAtom == -2147483648) this.error (22);
				if (this.isSyntaxCheck) return;
				if (iAtom == -1) return;
				this.viewer.invertSelected (pt, plane, iAtom, bs);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "translate", 
			    ($fz = function (isSelected) {
				var bs = null;
				var i = 1;
				var i0 = 0;
				if (this.tokAt (1) == 1114638350) {
				    isSelected = true;
				    i0 = 1;
				    i = 2;
				}if (this.isPoint3f (i)) {
				    var pt = this.getPoint3f (i, true);
				    bs = (!isSelected && this.iToken + 1 < this.statementLength ? this.atomExpressionAt (++this.iToken) : null);
				    this.checkLast (this.iToken);
				    if (!this.isSyntaxCheck) this.viewer.setAtomCoordRelative (pt, bs);
				    return;
				}var xyz = this.parameterAsString (i).toLowerCase ().charAt (0);
				if ("xyz".indexOf (xyz) < 0) this.error (0);
				var amount = this.floatParameter (++i);
				var type;
				switch (this.tokAt (++i)) {
				case 0:
				case 10:
				case 1048577:
				    type = '\0';
				    break;
				default:
				    type = (this.optParameterAsString (i).toLowerCase () + '\0').charAt (0);
				}
				if (amount == 0 && type != '\0') return;
				this.iToken = i0 + (type == '\0' ? 2 : 3);
				bs = (isSelected ? this.viewer.getSelectionSet (false) : this.iToken + 1 < this.statementLength ? this.atomExpressionAt (++this.iToken) : null);
				this.checkLast (this.iToken);
				if (!this.isSyntaxCheck) this.viewer.translate (xyz, amount, type, bs);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "zap", 
			    ($fz = function (isZapCommand) {
				if (this.statementLength == 1 || !isZapCommand) {
				    this.viewer.zap (true, isZapCommand && !this.isStateScript, true);
				    this.refresh ();
				    return;
				}var bs = this.atomExpressionAt (1);
				if (this.isSyntaxCheck) return;
				var nDeleted = this.viewer.deleteAtoms (bs, true);
				var isQuiet = (this.tQuiet || this.scriptLevel > this.scriptReportingLevel);
				if (!isQuiet) this.scriptStatusOrBuffer (org.jmol.i18n.GT._ ("{0} atoms deleted", nDeleted));
				this.viewer.select (null, false, null, isQuiet);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "zoom", 
			    ($fz = function (isZoomTo) {
				if (!isZoomTo) {
				    var tok = (this.statementLength > 1 ? this.getToken (1).tok : 1048589);
				    switch (tok) {
				    case 1073741980:
				    case 1073742079:
					break;
				    case 1048589:
				    case 1048588:
					if (this.statementLength > 2) this.error (2);
					if (!this.isSyntaxCheck) this.setBooleanProperty ("zoomEnabled", tok == 1048589);
					return;
				    }
				}var center = null;
				var i = 1;
				var time = (isZoomTo ? (this.isFloatParameter (i) ? this.floatParameter (i++) : 2) : 0);
				if (time < 0) {
				    i--;
				    time = 0;
				}var ptCenter = 0;
				var bsCenter = null;
				if (this.isCenterParameter (i)) {
				    ptCenter = i;
				    center = this.centerParameter (i);
				    if (Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet)) bsCenter = this.expressionResult;
				    i = this.iToken + 1;
				} else if (this.tokAt (i) == 2 && this.getToken (i).intValue == 0) {
				    bsCenter = this.viewer.getAtomBitSet ("visible");
				    center = this.viewer.getAtomSetCenter (bsCenter);
				}var isSameAtom = false;
				var zoom = this.viewer.getZoomSetting ();
				var newZoom = this.getZoom (ptCenter, i, bsCenter, zoom);
				i = this.iToken + 1;
				var xTrans = NaN;
				var yTrans = NaN;
				if (i != this.statementLength) {
				    xTrans = this.floatParameter (i++);
				    yTrans = this.floatParameter (i++);
				}if (i != this.statementLength) this.error (22);
				if (newZoom < 0) {
				    newZoom = -newZoom;
				    if (isZoomTo) {
					if (this.statementLength == 1 || isSameAtom) newZoom *= 2;
					else if (center == null) newZoom /= 2;
				    }}var max = this.viewer.getMaxZoomPercent ();
				if (newZoom < 5 || newZoom > max) this.numberOutOfRange (5, max);
				if (!this.viewer.isWindowCentered ()) {
				    if (center != null) {
					var bs = this.atomExpressionAt (ptCenter);
					if (!this.isSyntaxCheck) this.viewer.setCenterBitSet (bs, false);
				    }center = this.viewer.getRotationCenter ();
				    if (Float.isNaN (xTrans)) xTrans = this.viewer.getTranslationXPercent ();
				    if (Float.isNaN (yTrans)) yTrans = this.viewer.getTranslationYPercent ();
				}if (this.isSyntaxCheck) return;
				if (Float.isNaN (xTrans)) xTrans = 0;
				if (Float.isNaN (yTrans)) yTrans = 0;
				if (isSameAtom && Math.abs (zoom - newZoom) < 1) time = 0;
				this.viewer.moveTo (time, center, org.jmol.viewer.JmolConstants.center, NaN, null, newZoom, xTrans, yTrans, NaN, null, NaN, NaN, NaN);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getZoom", 
			    ($fz = function (ptCenter, i, bs, currentZoom) {
				var zoom = (this.isFloatParameter (i) ? this.floatParameter (i++) : NaN);
				if (zoom == 0 || currentZoom == 0) {
				    var r = NaN;
				    if (bs == null) {
					if (this.tokAt (ptCenter) == 1048583) {
					    var bbox = this.getObjectBoundingBox (this.objectNameParameter (ptCenter + 1));
					    if (bbox == null || (r = bbox[0].distance (bbox[1]) / 2) == 0) this.error (22);
					}} else {
					    r = this.viewer.calcRotationRadiusBs (bs);
					}if (Float.isNaN (r)) this.error (22);
				    currentZoom = this.viewer.getRotationRadius () / r * 100;
				    zoom = NaN;
				}if (zoom < 0) {
				    zoom += currentZoom;
				} else if (Float.isNaN (zoom)) {
				    var tok = this.tokAt (i);
				    switch (tok) {
				    case 1073742079:
				    case 1073741980:
					zoom = currentZoom * (tok == 1073742079 ? 0.5 : 2);
					i++;
					break;
				    case 269484208:
				    case 269484209:
				    case 269484193:
					var value = this.floatParameter (++i);
					i++;
					switch (tok) {
					case 269484208:
					    zoom = currentZoom / value;
					    break;
					case 269484209:
					    zoom = currentZoom * value;
					    break;
					case 269484193:
					    zoom = currentZoom + value;
					    break;
					}
					break;
				    default:
					zoom = (bs == null ? -currentZoom : currentZoom);
				    }
				}this.iToken = i - 1;
				return zoom;
			    }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "delay", 
			    ($fz = function () {
				var millis = 0;
				switch (this.getToken (1).tok) {
				case 1048589:
				    millis = 1;
				    break;
				case 2:
				    millis = this.intParameter (1) * 1000;
				    break;
				case 3:
				    millis = Clazz.floatToLong (this.floatParameter (1) * 1000);
				    break;
				default:
				    this.error (34);
				}
				if (!this.isSyntaxCheck) this.delayMillis (millis);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "delayMillis", 
			    ($fz = function (millis) {
				if (this.viewer.isHeadless () || this.viewer.isSingleThreaded ()) return;
				var timeBegin = System.currentTimeMillis ();
				this.refresh ();
				var delayMax;
				if (millis < 0) millis = -millis;
				else if ((delayMax = this.viewer.getDelayMaximum ()) > 0 && millis > delayMax) millis = delayMax;
				millis -= System.currentTimeMillis () - timeBegin;
				var seconds = Clazz.doubleToInt (millis / 1000);
				millis -= seconds * 1000;
				if (millis <= 0) millis = 1;
				while (seconds >= 0 && millis > 0 && !this.interruptExecution && this.currentThread === Thread.currentThread ()) {
				    this.viewer.popHoldRepaintWhy ("delay");
				    try {
					Thread.sleep ((seconds--) > 0 ? 1000 : millis);
				    } catch (e) {
					if (Clazz.exceptionOf (e, InterruptedException)) {
					} else {
					    throw e;
					}
				    }
				    this.viewer.pushHoldRepaintWhy ("delay");
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "slab", 
			    ($fz = function (isDepth) {
				var TF = false;
				var plane = null;
				var str;
				if (this.isCenterParameter (1) || this.tokAt (1) == 9) plane = this.planeParameter (1);
				else switch (this.getToken (1).tok) {
				case 2:
				    var percent = this.intParameter (this.checkLast (1));
				    if (!this.isSyntaxCheck) if (isDepth) this.viewer.depthToPercent (percent);
				    else this.viewer.slabToPercent (percent);
				    return;
				case 1048589:
				    this.checkLength (2);
				    TF = true;
				case 1048588:
				    this.checkLength (2);
				    this.setBooleanProperty ("slabEnabled", TF);
				    return;
				case 4141:
				    this.checkLength (2);
				    if (this.isSyntaxCheck) return;
				    this.viewer.slabReset ();
				    this.setBooleanProperty ("slabEnabled", true);
				    return;
				case 1085443:
				    this.checkLength (2);
				    if (this.isSyntaxCheck) return;
				    this.viewer.setSlabDepthInternal (isDepth);
				    this.setBooleanProperty ("slabEnabled", true);
				    return;
				case 269484192:
				    str = this.parameterAsString (2);
				    if (str.equalsIgnoreCase ("hkl")) plane = this.hklParameter (3);
				    else if (str.equalsIgnoreCase ("plane")) plane = this.planeParameter (3);
				    if (plane == null) this.error (22);
				    plane.scale (-1);
				    break;
				case 135266319:
				    switch (this.getToken (2).tok) {
				    case 1048587:
					break;
				    default:
					plane = this.planeParameter (2);
				    }
				    break;
				case 135267841:
				    plane = (this.getToken (2).tok == 1048587 ? null : this.hklParameter (2));
				    break;
				case 1073742118:
				    return;
				default:
				    this.error (22);
				}
				if (!this.isSyntaxCheck) this.viewer.slabInternal (plane, isDepth);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "ellipsoid", 
			    ($fz = function () {
				var mad = 0;
				var i = 1;
				switch (this.getToken (1).tok) {
				case 1048589:
				    mad = 50;
				    break;
				case 1048588:
				    break;
				case 2:
				    mad = this.intParameter (1);
				    break;
				case 1085443:
				    this.checkLength (3);
				    this.shapeManager.loadShape (20);
				    this.setShapeProperty (20, "select", Integer.$valueOf (this.intParameterRange (2, 1, 3)));
				    return;
				case 1074790550:
				case 269484209:
				case 1073741824:
				    this.shapeManager.loadShape (20);
				    if (this.theTok == 1074790550) i++;
				    this.setShapeId (20, i, false);
				    i = this.iToken;
				    while (++i < this.statementLength) {
					var key = this.parameterAsString (i);
					var value = null;
					switch (this.tokAt (i)) {
					case 1611272194:
					    var axes =  new Array (3);
					    for (var j = 0; j < 3; j++) {
						axes[j] =  new org.jmol.util.Vector3f ();
						axes[j].setT (this.centerParameter (++i));
						i = this.iToken;
					    }
					    value = axes;
					    break;
					case 12289:
					    value = this.centerParameter (++i);
					    i = this.iToken;
					    break;
					case 1766856708:
					    var translucentLevel = NaN;
					    if (this.tokAt (i) == 1766856708) i++;
					    if ((this.theTok = this.tokAt (i)) == 1073742180) {
						value = "translucent";
						if (this.isFloatParameter (++i)) translucentLevel = this.getTranslucentLevel (i++);
						else translucentLevel = this.viewer.getDefaultTranslucent ();
					    } else if (this.theTok == 1073742074) {
						value = "opaque";
						i++;
					    }if (this.isColorParam (i)) {
						this.setShapeProperty (20, "color", Integer.$valueOf (this.getArgbParam (i)));
						i = this.iToken;
					    }if (value == null) continue;
					    if (!Float.isNaN (translucentLevel)) this.setShapeProperty (20, "translucentLevel", Float.$valueOf (translucentLevel));
					    key = "translucency";
					    break;
					case 12291:
					    value = Boolean.TRUE;
					    this.checkLength (3);
					    break;
					case 1095761933:
					    value = Integer.$valueOf (this.intParameter (++i));
					    break;
					case 1048589:
					    value = Boolean.TRUE;
					    break;
					case 1048588:
					    key = "on";
					    value = Boolean.FALSE;
					    break;
					case 1073742138:
					    value = Float.$valueOf (this.floatParameter (++i));
					    break;
					}
					if (value == null) this.error (22);
					this.setShapeProperty (20, key.toLowerCase (), value);
				    }
				    this.setShapeProperty (20, "thisID", null);
				    return;
				default:
				    this.error (22);
				}
				this.setShapeSizeBs (20, mad, null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getShapeNameParameter", 
			    ($fz = function (i) {
				var id = this.parameterAsString (i);
				var isWild = id.equals ("*");
				if (id.length == 0) this.error (22);
				if (isWild) {
				    switch (this.tokAt (i + 1)) {
				    case 0:
				    case 1048589:
				    case 1048588:
				    case 3145768:
				    case 3145770:
				    case 1766856708:
				    case 12291:
					break;
				    default:
					if (this.setMeshDisplayProperty (-1, 0, this.tokAt (i + 1))) break;
					id += this.optParameterAsString (++i);
				    }
				}if (this.tokAt (i + 1) == 269484209) id += this.parameterAsString (++i);
				this.iToken = i;
				return id;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setShapeId", 
			    ($fz = function (iShape, i, idSeen) {
				if (idSeen) this.error (22);
				var name = this.getShapeNameParameter (i).toLowerCase ();
				this.setShapeProperty (iShape, "thisID", name);
				return name;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~B");
	Clazz.defineMethod (c$, "setAtomShapeSize", 
			    ($fz = function (shape, scale) {
				var rd = null;
				var tok = this.tokAt (1);
				var isOnly = false;
				switch (tok) {
				case 1073742072:
				    this.restrictSelected (false, false);
				    break;
				case 1048589:
				    break;
				case 1048588:
				    scale = 0;
				    break;
				case 3:
				    isOnly = (this.floatParameter (1) < 0);
				case 2:
				default:
				    rd = this.encodeRadiusParameter (1, isOnly, true);
				    if (Float.isNaN (rd.value)) this.error (22);
				}
				if (rd == null) rd =  new org.jmol.atomdata.RadiusData (null, scale, org.jmol.atomdata.RadiusData.EnumType.FACTOR, org.jmol.constant.EnumVdw.AUTO);
				if (isOnly) this.restrictSelected (false, false);
				this.setShapeSize (shape, rd);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "encodeRadiusParameter", 
			    ($fz = function (index, isOnly, allowAbsolute) {
				var value = NaN;
				var factorType = org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE;
				var vdwType = null;
				var tok = (index == -1 ? 1649412112 : this.getToken (index).tok);
				switch (tok) {
				case 1112539137:
				case 1112539138:
				case 1112541195:
				case 1114638346:
				case 1112541199:
				case 1649412112:
				    value = 1;
				    factorType = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
				    vdwType = (tok == 1649412112 ? null : org.jmol.constant.EnumVdw.getVdwType2 (org.jmol.script.Token.nameOf (tok)));
				    tok = this.tokAt (++index);
				    break;
				}
				switch (tok) {
				case 4141:
				    return this.viewer.getDefaultRadiusData ();
				case 1073741852:
				case 1073742116:
				case 1073741856:
				case 1073741858:
				case 1073741992:
				    value = 1;
				    factorType = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
				    this.iToken = index - 1;
				    break;
				case 269484193:
				case 2:
				case 3:
				    if (tok == 269484193) {
					index++;
				    } else if (this.tokAt (index + 1) == 269484210) {
					value = Math.round (this.floatParameter (index));
					this.iToken = ++index;
					factorType = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
					if (value < 0 || value > 200) this.integerOutOfRange (0, 200);
					value /= 100;
					break;
				    } else if (tok == 2) {
					value = this.intParameter (index);
					if (value > 749 || value < -200) this.integerOutOfRange (-200, 749);
					if (value > 0) {
					    value /= 250;
					    factorType = org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE;
					} else {
					    value /= -100;
					    factorType = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
					}break;
				    }value = this.floatParameterRange (index, (isOnly || !allowAbsolute ? -16 : 0), 16);
				    if (tok == 269484193 || !allowAbsolute) {
					factorType = org.jmol.atomdata.RadiusData.EnumType.OFFSET;
				    } else {
					factorType = org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE;
					vdwType = org.jmol.constant.EnumVdw.NADA;
				    }if (isOnly) value = -value;
				    break;
				default:
				    if (value == 1) index--;
				}
				if (vdwType == null) {
				    vdwType = org.jmol.constant.EnumVdw.getVdwType (this.optParameterAsString (++this.iToken));
				    if (vdwType == null) {
					this.iToken = index;
					vdwType = org.jmol.constant.EnumVdw.AUTO;
				    }}return  new org.jmol.atomdata.RadiusData (null, value, factorType, vdwType);
			    }, $fz.isPrivate = true, $fz), "~N,~B,~B");
	Clazz.defineMethod (c$, "structure", 
			    ($fz = function () {
				var type = org.jmol.constant.EnumStructure.getProteinStructureType (this.parameterAsString (1));
				if (type === org.jmol.constant.EnumStructure.NOT) this.error (22);
				var bs = null;
				switch (this.tokAt (2)) {
				case 10:
				case 1048577:
				    bs = this.atomExpressionAt (2);
				    this.checkLast (this.iToken);
				    break;
				default:
				    this.checkLength (2);
				}
				if (this.isSyntaxCheck) return;
				this.clearDefinedVariableAtomSets ();
				this.viewer.setProteinType (type, bs);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "wireframe", 
			    ($fz = function () {
				var mad = -2147483648;
				if (this.tokAt (1) == 4141) this.checkLast (1);
				else mad = this.getMadParameter ();
				if (this.isSyntaxCheck) return;
				this.setShapeProperty (1, "type", Integer.$valueOf (1023));
				this.setShapeSizeBs (1, mad == -2147483648 ? 300 : mad, null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "ssbond", 
			    ($fz = function () {
				var mad = this.getMadParameter ();
				this.setShapeProperty (1, "type", Integer.$valueOf (256));
				this.setShapeSizeBs (1, mad, null);
				this.setShapeProperty (1, "type", Integer.$valueOf (1023));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "struts", 
			    ($fz = function () {
				var defOn = (this.tokAt (1) == 1073742072 || this.tokAt (1) == 1048589 || this.statementLength == 1);
				var mad = this.getMadParameter ();
				if (defOn) mad = Math.round (this.viewer.getStrutDefaultRadius () * 2000);
				this.setShapeProperty (1, "type", Integer.$valueOf (32768));
				this.setShapeSizeBs (1, mad, null);
				this.setShapeProperty (1, "type", Integer.$valueOf (1023));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "hbond", 
			    ($fz = function () {
				if (this.statementLength == 2 && this.getToken (1).tok == 4102) {
				    if (this.isSyntaxCheck) return;
				    var n = this.viewer.autoHbond (null, null, false);
				    this.scriptStatusOrBuffer (org.jmol.i18n.GT._ ("{0} hydrogen bonds", Math.abs (n)));
				    return;
				}if (this.statementLength == 2 && this.getToken (1).tok == 12291) {
				    if (this.isSyntaxCheck) return;
				    this.connect (0);
				    return;
				}var mad = this.getMadParameter ();
				this.setShapeProperty (1, "type", Integer.$valueOf (30720));
				this.setShapeSizeBs (1, mad, null);
				this.setShapeProperty (1, "type", Integer.$valueOf (1023));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "configuration", 
			    ($fz = function () {
				var bsAtoms;
				if (this.statementLength == 1) {
				    bsAtoms = this.viewer.setConformation ();
				    this.viewer.addStateScriptRet ("select", null, this.viewer.getSelectionSet (false), null, "configuration", true, false);
				} else {
				    var n = this.intParameter (this.checkLast (1));
				    if (this.isSyntaxCheck) return;
				    bsAtoms = this.viewer.getConformation (this.viewer.getCurrentModelIndex (), n - 1, true);
				    this.viewer.addStateScript ("configuration " + n + ";", true, false);
				}if (this.isSyntaxCheck) return;
				this.setShapeProperty (1, "type", Integer.$valueOf (30720));
				this.setShapeSizeBs (1, 0, bsAtoms);
				this.viewer.autoHbond (bsAtoms, bsAtoms, true);
				this.viewer.select (bsAtoms, false, null, this.tQuiet);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "vector", 
			    ($fz = function () {
				var type = org.jmol.atomdata.RadiusData.EnumType.SCREEN;
				var value = 1;
				this.checkLength (-3);
				switch (this.iToken = this.statementLength) {
				case 1:
				    break;
				case 2:
				    switch (this.getToken (1).tok) {
				    case 1048589:
					break;
				    case 1048588:
					value = 0;
					break;
				    case 2:
					value = this.intParameterRange (1, 0, 19);
					break;
				    case 3:
					type = org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE;
					value = this.floatParameterRange (1, 0, 3);
					break;
				    default:
					this.error (6);
				    }
				    break;
				case 3:
				    if (this.tokAt (1) == 1073742138) {
					this.setFloatProperty ("vectorScale", this.floatParameterRange (2, -100, 100));
					return;
				    }}
				this.setShapeSize (18,  new org.jmol.atomdata.RadiusData (null, value, type, null));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "dipole", 
			    ($fz = function () {
				var propertyName = null;
				var propertyValue = null;
				var iHaveAtoms = false;
				var iHaveCoord = false;
				var idSeen = false;
				this.shapeManager.loadShape (17);
				if (this.tokAt (1) == 1073742001 && this.listIsosurface (17)) return;
				this.setShapeProperty (17, "init", null);
				if (this.statementLength == 1) {
				    this.setShapeProperty (17, "thisID", null);
				    return;
				}for (var i = 1; i < this.statementLength; ++i) {
				    propertyName = null;
				    propertyValue = null;
				    switch (this.getToken (i).tok) {
				    case 1048589:
					propertyName = "on";
					break;
				    case 1048588:
					propertyName = "off";
					break;
				    case 12291:
					propertyName = "delete";
					break;
				    case 2:
				    case 3:
					propertyName = "value";
					propertyValue = Float.$valueOf (this.floatParameter (i));
					break;
				    case 10:
					propertyName = "atomBitset";
				    case 1048577:
					if (propertyName == null) propertyName = (iHaveAtoms || iHaveCoord ? "endSet" : "startSet");
					propertyValue = this.atomExpressionAt (i);
					i = this.iToken;
					iHaveAtoms = true;
					break;
				    case 1048586:
				    case 8:
					var pt = this.getPoint3f (i, true);
					i = this.iToken;
					propertyName = (iHaveAtoms || iHaveCoord ? "endCoord" : "startCoord");
					propertyValue = pt;
					iHaveCoord = true;
					break;
				    case 1678770178:
					propertyName = "bonds";
					break;
				    case 4102:
					propertyName = "calculate";
					break;
				    case 1074790550:
					this.setShapeId (17, ++i, idSeen);
					i = this.iToken;
					break;
				    case 135267329:
					propertyName = "cross";
					propertyValue = Boolean.TRUE;
					break;
				    case 1073742040:
					propertyName = "cross";
					propertyValue = Boolean.FALSE;
					break;
				    case 1073742066:
					var v = this.floatParameter (++i);
					if (this.theTok == 2) {
					    propertyName = "offsetPercent";
					    propertyValue = Integer.$valueOf (Clazz.floatToInt (v));
					} else {
					    propertyName = "offset";
					    propertyValue = Float.$valueOf (v);
					}break;
				    case 1073742068:
					propertyName = "offsetSide";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					break;
				    case 1073742188:
					propertyName = "value";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					break;
				    case 1073742196:
					propertyName = "width";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					break;
				    default:
					if (this.theTok == 269484209 || org.jmol.script.Token.tokAttr (this.theTok, 1073741824)) {
					    this.setShapeId (17, i, idSeen);
					    i = this.iToken;
					    break;
					}this.error (22);
				    }
				    idSeen = (this.theTok != 12291 && this.theTok != 4102);
				    if (propertyName != null) this.setShapeProperty (17, propertyName, propertyValue);
				}
				if (iHaveCoord || iHaveAtoms) this.setShapeProperty (17, "set", null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "animationMode", 
			    ($fz = function () {
				var startDelay = 1;
				var endDelay = 1;
				if (this.statementLength > 5) this.error (2);
				var animationMode = null;
				switch (this.getToken (2).tok) {
				case 1073742070:
				    animationMode = org.jmol.constant.EnumAnimationMode.ONCE;
				    startDelay = endDelay = 0;
				    break;
				case 528410:
				    animationMode = org.jmol.constant.EnumAnimationMode.LOOP;
				    break;
				case 1073742082:
				    animationMode = org.jmol.constant.EnumAnimationMode.PALINDROME;
				    break;
				default:
				    this.error (22);
				}
				if (this.statementLength >= 4) {
				    startDelay = endDelay = this.floatParameter (3);
				    if (this.statementLength == 5) endDelay = this.floatParameter (4);
				}if (!this.isSyntaxCheck) this.viewer.setAnimationReplayMode (animationMode, startDelay, endDelay);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "vibration", 
			    ($fz = function () {
				this.checkLength (-3);
				var period = 0;
				switch (this.getToken (1).tok) {
				case 1048589:
				    this.checkLength (2);
				    period = this.viewer.getVibrationPeriod ();
				    break;
				case 1048588:
				    this.checkLength (2);
				    period = 0;
				    break;
				case 2:
				case 3:
				    this.checkLength (2);
				    period = this.floatParameter (1);
				    break;
				case 1073742138:
				    this.setFloatProperty ("vibrationScale", this.floatParameterRange (2, -10, 10));
				    return;
				case 1073742090:
				    this.setFloatProperty ("vibrationPeriod", this.floatParameter (2));
				    return;
				case 1073741824:
				    this.error (22);
				    break;
				default:
				    period = -1;
				}
				if (period < 0) this.error (22);
				if (this.isSyntaxCheck) return;
				if (period == 0) {
				    this.viewer.setVibrationOff ();
				    return;
				}this.viewer.setVibrationPeriod (-period);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "animationDirection", 
			    ($fz = function () {
				var i = 2;
				var direction = 0;
				switch (this.tokAt (i)) {
				case 269484192:
				    direction = -this.intParameter (++i);
				    break;
				case 269484193:
				    direction = this.intParameter (++i);
				    break;
				case 2:
				    direction = this.intParameter (i);
				    if (direction > 0) direction = 0;
				    break;
				default:
				    this.error (22);
				}
				this.checkLength (++i);
				if (direction != 1 && direction != -1) this.errorStr2 (35, "-1", "1");
				if (!this.isSyntaxCheck) this.viewer.setAnimationDirection (direction);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "calculate", 
			    ($fz = function () {
				var isSurface = false;
				var asDSSP = false;
				var bs;
				var bs2 = null;
				var n = -2147483648;
				if ((this.iToken = this.statementLength) >= 2) {
				    this.clearDefinedVariableAtomSets ();
				    switch (this.getToken (1).tok) {
				    case 1073741824:
					this.checkLength (2);
					break;
				    case 1076887572:
					this.checkLength (2);
					if (!this.isSyntaxCheck) this.viewer.assignAromaticBonds ();
					return;
				    case 1612189718:
					if (this.statementLength == 2) {
					    if (!this.isSyntaxCheck) {
						n = this.viewer.autoHbond (null, null, false);
						break;
					    }return;
					}var bs1 = null;
					asDSSP = (this.tokAt (++this.iToken) == 1641025539);
					if (asDSSP) bs1 = this.viewer.getSelectionSet (false);
					else bs1 = this.atomExpressionAt (this.iToken);
					if (!asDSSP && !(asDSSP = (this.tokAt (++this.iToken) == 1641025539))) bs2 = this.atomExpressionAt (this.iToken);
					if (!this.isSyntaxCheck) {
					    n = this.viewer.autoHbond (bs1, bs2, false);
					    break;
					}return;
				    case 1613758476:
					bs = (this.statementLength == 2 ? null : this.atomExpressionAt (2));
					this.checkLast (this.iToken);
					if (!this.isSyntaxCheck) this.viewer.addHydrogens (bs, false, false);
					return;
				    case 1112541196:
					this.iToken = 1;
					bs = (this.statementLength == 2 ? null : this.atomExpressionAt (2));
					this.checkLast (this.iToken);
					if (!this.isSyntaxCheck) this.viewer.calculatePartialCharges (bs);
					return;
				    case 1073742102:
					this.pointGroup ();
					return;
				    case 1112539148:
					this.checkLength (2);
					if (!this.isSyntaxCheck) {
					    this.viewer.calculateStraightness ();
					    this.viewer.addStateScript ("set quaternionFrame '" + this.viewer.getQuaternionFrame () + "'; calculate straightness", false, true);
					}return;
				    case 1641025539:
					bs = (this.statementLength < 4 ? null : this.atomExpressionAt (2));
					switch (this.tokAt (++this.iToken)) {
					case 1052714:
					    break;
					case 1073741915:
					    asDSSP = true;
					    break;
					case 0:
					    asDSSP = this.viewer.getDefaultStructureDSSP ();
					    break;
					default:
					    this.error (22);
					}
					if (!this.isSyntaxCheck) this.showString (this.viewer.calculateStructures (bs, asDSSP, true));
					return;
				    case 1708058:
					bs = (this.iToken + 1 < this.statementLength ? this.atomExpressionAt (++this.iToken) : null);
					bs2 = (this.iToken + 1 < this.statementLength ? this.atomExpressionAt (++this.iToken) : null);
					this.checkLength (++this.iToken);
					if (!this.isSyntaxCheck) {
					    n = this.viewer.calculateStruts (bs, bs2);
					    if (n > 0) this.colorShapeBs (4, 32768, 0x0FFFFFF, "translucent", 0.5, null);
					    this.showString (org.jmol.i18n.GT._ ("{0} struts added", n));
					}return;
				    case 3145756:
					isSurface = true;
				    case 1112539149:
					var isFrom = false;
					switch (this.tokAt (2)) {
					case 135266324:
					    this.iToken++;
					    break;
					case 0:
					    isFrom = !isSurface;
					    break;
					case 1073741952:
					    isFrom = true;
					    this.iToken++;
					    break;
					default:
					    isFrom = true;
					}
					bs = (this.iToken + 1 < this.statementLength ? this.atomExpressionAt (++this.iToken) : this.viewer.getSelectionSet (false));
					this.checkLength (++this.iToken);
					if (!this.isSyntaxCheck) this.viewer.calculateSurface (bs, (isFrom ? 3.4028235E38 : -1));
					return;
				    }
				    if (n != -2147483648) {
					this.scriptStatusOrBuffer (org.jmol.i18n.GT._ ("{0} hydrogen bonds", Math.abs (n)));
					return;
				    }}this.errorStr2 (53, "CALCULATE", "aromatic? hbonds? hydrogen? partialCharge? pointgroup? straightness? structure? struts? surfaceDistance FROM? surfaceDistance WITHIN?");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "pointGroup", 
			    ($fz = function () {
				switch (this.tokAt (0)) {
				case 4102:
				    if (!this.isSyntaxCheck) this.showString (this.viewer.calculatePointGroup ());
				    return;
				case 4148:
				    if (!this.isSyntaxCheck) this.showString (this.viewer.getPointGroupAsString (false, null, 0, 0));
				    return;
				}
				var pt = 2;
				var type = (this.tokAt (pt) == 1073742138 ? "" : this.optParameterAsString (pt));
				var scale = 1;
				var index = 0;
				if (type.length > 0) {
				    if (this.isFloatParameter (++pt)) index = this.intParameter (pt++);
				}if (this.tokAt (pt) == 1073742138) scale = this.floatParameter (++pt);
				if (!this.isSyntaxCheck) this.runScript (this.viewer.getPointGroupAsString (true, type, index, scale));
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "dots", 
			    ($fz = function (iShape) {
				if (!this.isSyntaxCheck) this.shapeManager.loadShape (iShape);
				this.setShapeProperty (iShape, "init", null);
				var value = NaN;
				var type = org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE;
				var ipt = 1;
				switch (this.getToken (ipt).tok) {
				case 1073742072:
				    this.restrictSelected (false, false);
				    value = 1;
				    type = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
				    break;
				case 1048589:
				    value = 1;
				    type = org.jmol.atomdata.RadiusData.EnumType.FACTOR;
				    break;
				case 1048588:
				    value = 0;
				    break;
				case 2:
				    var dotsParam = this.intParameter (ipt);
				    if (this.tokAt (ipt + 1) == 1666189314) {
					ipt++;
					this.setShapeProperty (iShape, "atom", Integer.$valueOf (dotsParam));
					this.setShapeProperty (iShape, "radius", Float.$valueOf (this.floatParameter (++ipt)));
					if (this.tokAt (++ipt) == 1766856708) {
					    this.setShapeProperty (iShape, "colorRGB", Integer.$valueOf (this.getArgbParam (++ipt)));
					    ipt++;
					}if (this.getToken (ipt).tok != 10) this.error (22);
					this.setShapeProperty (iShape, "dots", this.statement[ipt].value);
					return;
				    }break;
				}
				var rd = (Float.isNaN (value) ? this.encodeRadiusParameter (ipt, false, true) :  new org.jmol.atomdata.RadiusData (null, value, type, org.jmol.constant.EnumVdw.AUTO));
				if (Float.isNaN (rd.value)) this.error (22);
				this.setShapeSize (iShape, rd);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "proteinShape", 
			    ($fz = function (shapeType) {
				var mad = 0;
				switch (this.getToken (1).tok) {
				case 1073742072:
				    if (this.isSyntaxCheck) return;
				    this.restrictSelected (false, false);
				    mad = -1;
				    break;
				case 1048589:
				    mad = -1;
				    break;
				case 1048588:
				    break;
				case 1641025539:
				    mad = -2;
				    break;
				case 1112541199:
				case 1073741922:
				    mad = -4;
				    break;
				case 2:
				    mad = (this.intParameterRange (1, 0, 1000) * 8);
				    break;
				case 3:
				    mad = Math.round (this.floatParameterRange (1, -4.0, 4.0) * 2000);
				    if (mad < 0) {
					this.restrictSelected (false, false);
					mad = -mad;
				    }break;
				case 10:
				    if (!this.isSyntaxCheck) this.shapeManager.loadShape (shapeType);
				    this.setShapeProperty (shapeType, "bitset", this.theToken.value);
				    return;
				default:
				    this.error (6);
				}
				this.setShapeSizeBs (shapeType, mad, null);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "animation", 
			    ($fz = function () {
				var animate = false;
				switch (this.getToken (1).tok) {
				case 1048589:
				    animate = true;
				case 1048588:
				    if (!this.isSyntaxCheck) this.viewer.setAnimationOn (animate);
				    break;
				case 4115:
				    this.frame (2);
				    break;
				case 1073742024:
				    this.animationMode ();
				    break;
				case 1073741918:
				    this.animationDirection ();
				    break;
				case 1074790526:
				    this.setIntProperty ("animationFps", this.intParameter (this.checkLast (2)));
				    break;
				default:
				    this.frameControl (1);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "assign", 
			    ($fz = function () {
				var atomsOrBonds = this.tokAt (1);
				var index = this.atomExpressionAt (2).nextSetBit (0);
				var index2 = -1;
				var type = null;
				if (index < 0) this.error (22);
				if (atomsOrBonds == 4106) {
				    index2 = this.atomExpressionAt (++this.iToken).nextSetBit (0);
				} else {
				    type = this.parameterAsString (++this.iToken);
				}var pt = (++this.iToken < this.statementLength ? this.centerParameter (this.iToken) : null);
				if (this.isSyntaxCheck) return;
				switch (atomsOrBonds) {
				case 1141899265:
				    this.viewer.assignAtom (index, pt, type);
				    break;
				case 1678770178:
				    this.viewer.assignBond (index, (type + "p").charAt (0));
				    break;
				case 4106:
				    this.viewer.assignConnect (index, index2);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "file", 
			    ($fz = function () {
				var file = this.intParameter (this.checkLast (1));
				if (this.isSyntaxCheck) return;
				var modelIndex = this.viewer.getModelNumberIndex (file * 1000000 + 1, false, false);
				var modelIndex2 = -1;
				if (modelIndex >= 0) {
				    modelIndex2 = this.viewer.getModelNumberIndex ((file + 1) * 1000000 + 1, false, false);
				    if (modelIndex2 < 0) modelIndex2 = this.viewer.getModelCount ();
				    modelIndex2--;
				}this.viewer.setAnimationOn (false);
				this.viewer.setAnimationDirection (1);
				this.viewer.setAnimationRange (modelIndex, modelIndex2);
				this.viewer.setCurrentModelIndex (-1);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "fixed", 
			    ($fz = function () {
				var bs = (this.statementLength == 1 ? null : this.atomExpressionAt (1));
				if (this.isSyntaxCheck) return;
				this.viewer.setMotionFixedAtoms (bs);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "frame", 
			    ($fz = function (offset) {
				var useModelNumber = true;
				if (this.statementLength == 1 && offset == 1) {
				    var modelIndex = this.viewer.getCurrentModelIndex ();
				    var m;
				    if (!this.isSyntaxCheck && modelIndex >= 0 && (m = this.viewer.getJmolDataSourceFrame (modelIndex)) >= 0) this.viewer.setCurrentModelIndex (m == modelIndex ? -2147483648 : m);
				    return;
				}switch (this.tokAt (1)) {
				case 1048577:
				case 10:
				    var i = this.atomExpressionAt (1).nextSetBit (0);
				    this.checkLength (this.iToken + 1);
				    if (this.isSyntaxCheck || i < 0) return;
				    var bsa =  new org.jmol.util.BitSet ();
				    bsa.set (i);
				    this.viewer.setCurrentModelIndex (this.viewer.getModelBitSet (bsa, false).nextSetBit (0));
				    return;
				case 1074790550:
				    this.checkLength (3);
				    var id = this.stringParameter (2);
				    if (!this.isSyntaxCheck) this.viewer.setCurrentModelID (id);
				    return;
				case 528397:
				    var millis = 0;
				    this.checkLength (3);
				    switch (this.getToken (2).tok) {
				    case 2:
				    case 3:
					millis = Clazz.floatToLong (this.floatParameter (2) * 1000);
					break;
				    default:
					this.error (20);
				    }
				    if (!this.isSyntaxCheck) this.viewer.setFrameDelayMs (millis);
				    return;
				case 1073742166:
				    if (this.checkLength23 () > 0) if (!this.isSyntaxCheck) this.viewer.setFrameTitleObj (this.statementLength == 2 ? "@{_modelName}" : (this.tokAt (2) == 7 ? org.jmol.script.ScriptVariable.listValue (this.statement[2]) : this.parameterAsString (2)));
				    return;
				case 1073741832:
				    var bs = (this.statementLength == 2 || this.tokAt (2) == 1048587 ? null : this.atomExpressionAt (2));
				    if (!this.isSyntaxCheck) this.viewer.setFrameOffsets (bs);
				    return;
				}
				if (this.getToken (offset).tok == 269484192) {
				    ++offset;
				    if (this.getToken (this.checkLast (offset)).tok != 2 || this.intParameter (offset) != 1) this.error (22);
				    if (!this.isSyntaxCheck) this.viewer.setAnimation (1073742108);
				    return;
				}var isPlay = false;
				var isRange = false;
				var isAll = false;
				var isHyphen = false;
				var frameList = [-1, -1];
				var nFrames = 0;
				var fFrame = 0;
				var haveFileSet = this.viewer.haveFileSet ();
				for (var i = offset; i < this.statementLength; i++) {
				    switch (this.getToken (i).tok) {
				    case 1048579:
				    case 269484209:
					this.checkLength (offset + (isRange ? 2 : 1));
					isAll = true;
					break;
				    case 269484192:
					if (nFrames != 1) this.error (22);
					isHyphen = true;
					break;
				    case 1048587:
					this.checkLength (offset + 1);
					break;
				    case 3:
					useModelNumber = false;
					if ((fFrame = this.floatParameter (i)) < 0) this.error (22);
				    case 2:
				    case 4:
					if (nFrames == 2) this.error (22);
					var iFrame = (this.theTok == 4 ? org.jmol.script.ScriptEvaluator.getFloatEncodedInt (this.theToken.value) : this.theToken.intValue);
					if (iFrame < 0 && nFrames == 1) {
					    isHyphen = true;
					    iFrame = -iFrame;
					    if (haveFileSet && iFrame < 1000000) iFrame *= 1000000;
					}if (this.theTok == 3 && haveFileSet && fFrame == Clazz.floatToInt (fFrame)) iFrame = Clazz.floatToInt (fFrame) * 1000000;
					if (iFrame == 2147483647) {
					    if (i == 1) {
						var id = this.theToken.value.toString ();
						var modelIndex = (this.isSyntaxCheck ? -1 : this.viewer.getModelIndexFromId (id));
						if (modelIndex >= 0) {
						    this.checkLength (2);
						    this.viewer.setCurrentModelIndex (modelIndex);
						    return;
						}}iFrame = 0;
					}if (iFrame == -1) {
					    this.checkLength (offset + 1);
					    if (!this.isSyntaxCheck) this.viewer.setAnimation (1073742108);
					    return;
					}if (iFrame >= 1000 && iFrame < 1000000 && haveFileSet) iFrame = (Clazz.doubleToInt (iFrame / 1000)) * 1000000 + (iFrame % 1000);
					if (!useModelNumber && iFrame == 0 && nFrames == 0) isAll = true;
					if (iFrame >= 1000000) useModelNumber = false;
					frameList[nFrames++] = iFrame;
					break;
				    case 1073742096:
					isPlay = true;
					break;
				    case 1073742114:
					isRange = true;
					break;
				    default:
					this.frameControl (offset);
					return;
				    }
				}
				if (isRange && nFrames == 0) isAll = true;
				if (this.isSyntaxCheck) return;
				if (isAll) {
				    this.viewer.setAnimationOn (false);
				    this.viewer.setAnimationRange (-1, -1);
				    if (!isRange) this.viewer.setCurrentModelIndex (-1);
				    return;
				}if (nFrames == 2 && !isRange) isHyphen = true;
				if (haveFileSet) useModelNumber = false;
				else if (useModelNumber) for (var i = 0; i < nFrames; i++) if (frameList[i] >= 0) frameList[i] %= 1000000;

				var modelIndex = this.viewer.getModelNumberIndex (frameList[0], useModelNumber, false);
				var modelIndex2 = -1;
				if (haveFileSet && modelIndex < 0 && frameList[0] != 0) {
				    if (frameList[0] < 1000000) frameList[0] *= 1000000;
				    if (nFrames == 2 && frameList[1] < 1000000) frameList[1] *= 1000000;
				    if (frameList[0] % 1000000 == 0) {
					frameList[0]++;
					modelIndex = this.viewer.getModelNumberIndex (frameList[0], false, false);
					if (modelIndex >= 0) {
					    var i2 = (nFrames == 1 ? frameList[0] + 1000000 : frameList[1] == 0 ? -1 : frameList[1] % 1000000 == 0 ? frameList[1] + 1000001 : frameList[1] + 1);
					    modelIndex2 = this.viewer.getModelNumberIndex (i2, false, false);
					    if (modelIndex2 < 0) modelIndex2 = this.viewer.getModelCount ();
					    modelIndex2--;
					    if (isRange) nFrames = 2;
					    else if (!isHyphen && modelIndex2 != modelIndex) isHyphen = true;
					    isRange = isRange || modelIndex == modelIndex2;
					}} else {
					    return;
					}}if (!isPlay && !isRange || modelIndex >= 0) this.viewer.setCurrentModelIndexClear (modelIndex, false);
				if (isPlay && nFrames == 2 || isRange || isHyphen) {
				    if (modelIndex2 < 0) modelIndex2 = this.viewer.getModelNumberIndex (frameList[1], useModelNumber, false);
				    this.viewer.setAnimationOn (false);
				    this.viewer.setAnimationDirection (1);
				    this.viewer.setAnimationRange (modelIndex, modelIndex2);
				    this.viewer.setCurrentModelIndexClear (isHyphen && !isRange ? -1 : modelIndex >= 0 ? modelIndex : 0, false);
				}if (isPlay) this.viewer.setAnimation (266287);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "bitSetForModelFileNumber", 
			    function (m) {
				var bs = org.jmol.util.BitSetUtil.newBitSet (this.viewer.getAtomCount ());
				if (this.isSyntaxCheck) return bs;
				var modelCount = this.viewer.getModelCount ();
				var haveFileSet = this.viewer.haveFileSet ();
				if (m < 1000000 && haveFileSet) m *= 1000000;
				var pt = m % 1000000;
				if (pt == 0) {
				    var model1 = this.viewer.getModelNumberIndex (m + 1, false, false);
				    if (model1 < 0) return bs;
				    var model2 = (m == 0 ? modelCount : this.viewer.getModelNumberIndex (m + 1000001, false, false));
				    if (model1 < 0) model1 = 0;
				    if (model2 < 0) model2 = modelCount;
				    if (this.viewer.isTrajectory (model1)) model2 = model1 + 1;
				    for (var j = model1; j < model2; j++) bs.or (this.viewer.getModelUndeletedAtomsBitSet (j));

				} else {
				    var modelIndex = this.viewer.getModelNumberIndex (m, false, true);
				    if (modelIndex >= 0) bs.or (this.viewer.getModelUndeletedAtomsBitSet (modelIndex));
				}return bs;
			    }, "~N");
	Clazz.defineMethod (c$, "frameControl", 
			    ($fz = function (i) {
				switch (this.getToken (this.checkLast (i)).tok) {
				case 1073742098:
				case 1073742096:
				case 266287:
				case 20487:
				case 1073742037:
				case 1073742108:
				case 1073742126:
				case 1073741942:
				case 1073741993:
				    if (!this.isSyntaxCheck) this.viewer.setAnimation (this.theTok);
				    return;
				}
				this.error (22);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getShapeType", 
			    ($fz = function (tok) {
				var iShape = org.jmol.viewer.JmolConstants.shapeTokenIndex (tok);
				if (iShape < 0) this.error (49);
				return iShape;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "font", 
			    ($fz = function (shapeType, fontsize) {
				var fontface = "SansSerif";
				var fontstyle = "Plain";
				var sizeAdjust = 0;
				var scaleAngstromsPerPixel = -1;
				switch (this.iToken = this.statementLength) {
				case 6:
				    scaleAngstromsPerPixel = this.floatParameter (5);
				    if (scaleAngstromsPerPixel >= 5) scaleAngstromsPerPixel = this.viewer.getZoomSetting () / scaleAngstromsPerPixel / this.viewer.getScalePixelsPerAngstrom (false);
				case 5:
				    if (this.getToken (4).tok != 1073741824) this.error (22);
				    fontstyle = this.parameterAsString (4);
				case 4:
				    if (this.getToken (3).tok != 1073741824) this.error (22);
				    fontface = this.parameterAsString (3);
				    if (!this.isFloatParameter (2)) this.error (34);
				    fontsize = this.floatParameter (2);
				    shapeType = this.getShapeType (this.getToken (1).tok);
				    break;
				case 3:
				    if (!this.isFloatParameter (2)) this.error (34);
				    if (shapeType == -1) {
					shapeType = this.getShapeType (this.getToken (1).tok);
					fontsize = this.floatParameter (2);
				    } else {
					if (fontsize >= 1) fontsize += (sizeAdjust = 5);
				    }break;
				case 2:
				default:
				    if (shapeType == 5) {
					fontsize = 13;
					break;
				    }this.error (2);
				}
				if (shapeType == 5) {
				    if (fontsize < 0 || fontsize >= 1 && (fontsize < 6 || fontsize > 63)) this.integerOutOfRange (6 - sizeAdjust, 63 - sizeAdjust);
				    this.setShapeProperty (5, "setDefaults", this.viewer.getNoneSelected ());
				}if (this.isSyntaxCheck) return;
				if (org.jmol.util.GData.getFontStyleID (fontface) >= 0) {
				    fontstyle = fontface;
				    fontface = "SansSerif";
				}var font3d = this.viewer.getFont3D (fontface, fontstyle, fontsize);
				this.shapeManager.loadShape (shapeType);
				this.setShapeProperty (shapeType, "font", font3d);
				if (scaleAngstromsPerPixel >= 0) this.setShapeProperty (shapeType, "scalereference", Float.$valueOf (scaleAngstromsPerPixel));
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "set", 
			    ($fz = function () {
				if (this.statementLength == 1) {
				    this.showString (this.viewer.getAllSettings (null));
				    return;
				}var isJmolSet = (this.parameterAsString (0).equals ("set"));
				var key = this.optParameterAsString (1);
				if (isJmolSet && this.statementLength == 2 && key.indexOf ("?") >= 0) {
				    this.showString (this.viewer.getAllSettings (key.substring (0, key.indexOf ("?"))));
				    return;
				}var tok = this.getToken (1).tok;
				var newTok = 0;
				var sval;
				var ival = 2147483647;
				var showing = (!this.isSyntaxCheck && !this.tQuiet && this.scriptLevel <= this.scriptReportingLevel && !(this.statement[0].value).equals ("var"));
				switch (tok) {
				case 1611272194:
				    this.axes (2);
				    return;
				case 1610616835:
				    this.background (2);
				    return;
				case 1679429641:
				    this.boundbox (2);
				    return;
				case 1611272202:
				    this.frank (2);
				    return;
				case 1610616855:
				    this.history (2);
				    return;
				case 1826248715:
				    this.label (2);
				    return;
				case 1614417948:
				    this.unitcell (2);
				    return;
				case 536870920:
				    this.shapeManager.loadShape (8);
				    this.setShapeProperty (8, "highlight", (this.tokAt (2) == 1048588 ? null : this.atomExpressionAt (2)));
				    return;
				case 1610625028:
				case 1611141171:
				    this.selectionHalo (2);
				    return;
				case 536875070:
				    this.timeout (2);
				    return;
				}
				switch (tok) {
				case 1641025539:
				    var type = org.jmol.constant.EnumStructure.getProteinStructureType (this.parameterAsString (2));
				    if (type === org.jmol.constant.EnumStructure.NOT) this.error (22);
				    var data = this.floatParameterSet (3, 0, 2147483647);
				    if (data.length % 4 != 0) this.error (22);
				    this.viewer.setStructureList (data, type);
				    this.checkLast (this.iToken);
				    return;
				case 545259526:
				    ival = this.getArgbParam (2);
				    if (!this.isSyntaxCheck) this.setObjectArgb ("axes", ival);
				    return;
				case 1610612737:
				    this.setBondmode ();
				    return;
				case 536870916:
				    if (this.isSyntaxCheck) return;
				    var iLevel = (this.tokAt (2) == 1048588 || this.tokAt (2) == 2 && this.intParameter (2) == 0 ? 4 : 5);
				    org.jmol.util.Logger.setLogLevel (iLevel);
				    this.setIntProperty ("logLevel", iLevel);
				    if (iLevel == 4) {
					this.viewer.setDebugScript (false);
					if (showing) this.viewer.showParameter ("debugScript", true, 80);
				    }this.setDebugging ();
				    if (showing) this.viewer.showParameter ("logLevel", true, 80);
				    return;
				case 537022465:
				    this.setEcho ();
				    return;
				case 1610612738:
				    this.font (5, this.checkLength23 () == 2 ? 0 : this.floatParameter (2));
				    return;
				case 1612189718:
				    this.setHbond ();
				    return;
				case 1746538509:
				case 537006096:
				    this.setMonitor ();
				    return;
				case 1611141176:
				    this.setSsbond ();
				    return;
				case 1610612741:
				    this.setLabel ("toggle");
				    return;
				case 536870930:
				    this.setUserColors ();
				    return;
				case 553648188:
				    this.setZslab ();
				    return;
				}
				var justShow = true;
				switch (tok) {
				case 536870914:
				    if (this.statementLength > 2) {
					var modelDotted = this.stringSetting (2, false);
					var modelNumber;
					var useModelNumber = false;
					if (modelDotted.indexOf (".") < 0) {
					    modelNumber = org.jmol.util.Parser.parseInt (modelDotted);
					    useModelNumber = true;
					} else {
					    modelNumber = org.jmol.script.ScriptEvaluator.getFloatEncodedInt (modelDotted);
					}if (this.isSyntaxCheck) return;
					var modelIndex = this.viewer.getModelNumberIndex (modelNumber, useModelNumber, true);
					this.viewer.setBackgroundModelIndex (modelIndex);
					return;
				    }break;
				case 1649412112:
				    if (this.isSyntaxCheck) return;
				    this.viewer.setAtomProperty (this.viewer.getModelUndeletedAtomsBitSet (-1), 1649412112, -1, NaN, null, null, null);
				    switch (this.tokAt (2)) {
				    case 1073742109:
					this.runScript ("#VDW radii for PROBE;{_H}.vdw = 1.0;{_H and connected(_C) and not connected(within(smiles,\'[a]\'))}.vdw = 1.17;{_C}.vdw = 1.75;{_C and connected(3) and connected(_O)}.vdw = 1.65;{_N}.vdw = 1.55;{_O}.vdw = 1.4;{_P}.vdw = 1.8;{_S}.vdw = 1.8;message VDW radii for H, C, N, O, P, and S set according to Word, et al., J. Mol. Biol. (1999) 285, 1711-1733");
					return;
				    }
				    newTok = 545259555;
				case 545259555:
				    if (this.statementLength > 2) {
					sval = (this.statementLength == 3 && org.jmol.constant.EnumVdw.getVdwType (this.parameterAsString (2)) == null ? this.stringSetting (2, false) : this.parameterAsString (2));
					if (org.jmol.constant.EnumVdw.getVdwType (sval) == null) this.error (22);
					this.setStringProperty (key, sval);
				    }break;
				case 536870918:
				    if (this.statementLength > 2) {
					var pt;
					var $var = this.parameterExpressionToken (2);
					if ($var.tok == 8) pt = $var.value;
					else {
					    var ijk = $var.asInt ();
					    if (ijk < 555) pt =  new org.jmol.util.Point3f ();
					    else pt = this.viewer.getSymmetry ().ijkToPoint3f (ijk + 111);
					}if (!this.isSyntaxCheck) this.viewer.setDefaultLattice (pt);
				    }break;
				case 545259552:
				case 545259545:
				    if (this.statementLength > 2) {
					if ((this.theTok = this.tokAt (2)) == 1073741992 || this.theTok == 1073742116) {
					    sval = this.parameterAsString (this.checkLast (2));
					} else {
					    sval = this.stringSetting (2, false);
					}this.setStringProperty (key, sval);
				    }break;
				case 1632634889:
				    ival = this.intSetting (2);
				    if (ival == -2147483648) this.error (22);
				    if (!this.isSyntaxCheck) this.viewer.setFormalCharges (ival);
				    return;
				case 553648148:
				    ival = this.intSetting (2);
				    if (!this.isSyntaxCheck) {
					if (ival != -2147483648) this.commandHistoryLevelMax = ival;
					this.setIntProperty (key, ival);
				    }break;
				case 545259564:
				    if (this.statementLength > 2) this.setStringProperty (key, this.stringSetting (2, isJmolSet));
				    break;
				case 545259568:
				case 545259558:
				    if (this.statementLength > 2) this.setUnits (this.stringSetting (2, isJmolSet), tok);
				    break;
				case 545259572:
				    if (!this.isSyntaxCheck) this.viewer.setPicked (-1);
				    if (this.statementLength > 2) {
					this.setPicking ();
					return;
				    }break;
				case 545259574:
				    if (this.statementLength > 2) {
					this.setPickingStyle ();
					return;
				    }break;
				case 1716520973:
				    break;
				case 553648168:
				    ival = this.intSetting (2);
				    if (!this.isSyntaxCheck && ival != -2147483648) this.setIntProperty (key, this.scriptReportingLevel = ival);
				    break;
				case 536870924:
				    ival = this.intSetting (2);
				    if (ival == -2147483648 || ival == 0 || ival == 1) {
					justShow = false;
					break;
				    }tok = 553648174;
				    key = "specularPercent";
				    this.setIntProperty (key, ival);
				    break;
				case 1650071565:
				    tok = 553648178;
				    key = "strandCount";
				    this.setIntProperty (key, this.intSetting (2));
				    break;
				default:
				    justShow = false;
				}
				if (justShow && !showing) return;
				var isContextVariable = (!justShow && !isJmolSet && this.getContextVariableAsVariable (key) != null);
				if (!justShow && !isContextVariable) {
				    switch (tok) {
				    case 1678770178:
					newTok = 603979928;
					break;
				    case 1613758470:
					newTok = 603979908;
					break;
				    case 1613758476:
					newTok = 603979910;
					break;
				    case 1610612739:
					newTok = 603979878;
					break;
				    case 1666189314:
					newTok = 570425394;
					this.setFloatProperty ("solventProbeRadius", this.floatSetting (2));
					justShow = true;
					break;
				    case 1610612740:
					newTok = 570425390;
					break;
				    case 1613758488:
					newTok = 603979948;
					break;
				    case 1766856708:
					newTok = 545259545;
					break;
				    case 1611141175:
					sval = this.parameterAsString (2).toLowerCase ();
					switch ("x;y;z;fps".indexOf (sval + ";")) {
					case 0:
					    newTok = 570425398;
					    break;
					case 2:
					    newTok = 570425400;
					    break;
					case 4:
					    newTok = 570425402;
					    break;
					case 6:
					    newTok = 570425396;
					    break;
					default:
					    this.errorStr2 (50, "set SPIN ", sval);
					}
					if (!this.isSyntaxCheck) this.viewer.setSpin (sval, Clazz.floatToInt (this.floatParameter (this.checkLast (3))));
					justShow = true;
					break;
				    }
				}if (newTok != 0) {
				    key = org.jmol.script.Token.nameOf (tok = newTok);
				} else if (!justShow && !isContextVariable) {
				    if (key.length == 0 || key.charAt (0) == '_') this.error (56);
				    var lckey = key.toLowerCase ();
				    if (lckey.indexOf ("label") == 0 && org.jmol.util.Parser.isOneOf (key.substring (5).toLowerCase (), "front;group;atom;offset;offsetexact;pointer;alignment;toggle;scalereference")) {
					if (this.setLabel (key.substring (5))) return;
				    }if (lckey.endsWith ("callback")) tok = 536870912;
				}if (isJmolSet && !org.jmol.script.Token.tokAttr (tok, 536870912)) {
				    this.iToken = 1;
				    if (!this.isStateScript) this.errorStr2 (50, "SET", key);
				    this.warning (51, "SET", key);
				}if (!justShow && isJmolSet) {
				    switch (this.statementLength) {
				    case 2:
					this.setBooleanProperty (key, true);
					justShow = true;
					break;
				    case 3:
					if (ival != 2147483647) {
					    this.setIntProperty (key, ival);
					    justShow = true;
					}break;
				    }
				}if (!justShow && !isJmolSet && this.tokAt (2) == 1048587) {
				    if (!this.isSyntaxCheck) this.viewer.removeUserVariable (key.toLowerCase ());
				    justShow = true;
				}if (!justShow) {
				    var tok2 = (this.tokAt (1) == 1048577 ? 0 : this.tokAt (2));
				    var setType = this.statement[0].intValue;
				    var pt = (tok2 == 269484436 ? 3 : setType == 61 && !key.equals ("return") && tok2 != 269484436 ? 0 : 2);
				    this.setVariable (pt, 0, key, setType);
				    if (!isJmolSet) return;
				}if (showing) this.viewer.showParameter (key, true, 80);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setZslab", 
			    ($fz = function () {
				var pt = null;
				if (this.isFloatParameter (2)) {
				    this.checkLength (3);
				    this.setIntProperty ("zSlab", Clazz.floatToInt (this.floatParameter (2)));
				} else {
				    if (!this.isCenterParameter (2)) this.error (22);
				    pt = this.centerParameter (2);
				    this.checkLength (this.iToken + 1);
				}if (!this.isSyntaxCheck) this.viewer.setZslabPoint (pt);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setBondmode", 
			    ($fz = function () {
				var bondmodeOr = false;
				switch (this.getToken (this.checkLast (2)).tok) {
				case 269484128:
				    break;
				case 269484112:
				    bondmodeOr = true;
				    break;
				default:
				    this.error (22);
				}
				this.setBooleanProperty ("bondModeOr", bondmodeOr);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setEcho", 
			    ($fz = function () {
				var propertyName = null;
				var propertyValue = null;
				var id = null;
				var echoShapeActive = true;
				var pt = 2;
				switch (this.getToken (2).tok) {
				case 1048588:
				    id = propertyName = "allOff";
				    this.checkLength (++pt);
				    break;
				case 1048587:
				    echoShapeActive = false;
				case 1048579:
				    id = this.parameterAsString (2);
				    this.checkLength (++pt);
				    break;
				case 1073741996:
				case 12289:
				case 1073742128:
				case 1074790748:
				case 1073742019:
				case 1073741871:
				case 1073741824:
				case 4:
				case 1074790550:
				    if (this.theTok == 1074790550) pt++;
				    id = this.parameterAsString (pt++);
				    break;
				}
				if (!this.isSyntaxCheck) {
				    this.viewer.setEchoStateActive (echoShapeActive);
				    this.shapeManager.loadShape (29);
				    if (id != null) this.setShapeProperty (29, propertyName == null ? "target" : propertyName, id);
				}if (pt < this.statementLength) {
				    switch (this.getToken (pt++).tok) {
				    case 1073741832:
					propertyName = "align";
					switch (this.getToken (pt).tok) {
					case 1073741996:
					case 1073742128:
					case 12289:
					    propertyValue = this.parameterAsString (pt++);
					    break;
					default:
					    this.error (22);
					}
					break;
				    case 12289:
				    case 1073741996:
				    case 1073742128:
					propertyName = "align";
					propertyValue = this.parameterAsString (pt - 1);
					break;
				    case 554176526:
					propertyName = "%zpos";
					propertyValue = Integer.$valueOf (Clazz.floatToInt (this.floatParameter (pt++)));
					break;
				    case 1610625028:
				    case 3145768:
				    case 1048589:
					propertyName = "hidden";
					propertyValue = Boolean.FALSE;
					break;
				    case 12294:
				    case 3145770:
					propertyName = "hidden";
					propertyValue = Boolean.TRUE;
					break;
				    case 1095766028:
					var modelIndex = (this.isSyntaxCheck ? 0 : this.modelNumberParameter (pt++));
					if (modelIndex >= this.viewer.getModelCount ()) this.error (22);
					propertyName = "model";
					propertyValue = Integer.$valueOf (modelIndex);
					break;
				    case 269484096:
				    case 1073742195:
					propertyName = "xypos";
					propertyValue = this.xypParameter (--pt);
					if (propertyValue == null) pt--;
					else pt = this.iToken + 1;
					break;
				    case 2:
					pt--;
					var posx = this.intParameter (pt++);
					var namex = "xpos";
					if (this.tokAt (pt) == 269484210) {
					    namex = "%xpos";
					    pt++;
					}propertyName = "ypos";
					propertyValue = Integer.$valueOf (this.intParameter (pt++));
					if (this.tokAt (pt) == 269484210) {
					    propertyName = "%ypos";
					    pt++;
					}this.checkLength (pt);
					this.setShapeProperty (29, namex, Integer.$valueOf (posx));
					break;
				    case 1048588:
					propertyName = "off";
					break;
				    case 1073742138:
					propertyName = "scale";
					propertyValue = Float.$valueOf (this.floatParameter (pt++));
					break;
				    case 135271429:
					propertyName = "script";
					propertyValue = this.parameterAsString (pt++);
					break;
				    case 4:
				    case 1073741979:
					if (this.theTok == 1073741979) pt++;
					this.checkLength (pt);
					this.echo (pt - 1, this.theTok == 1073741979);
					return;
				    default:
					if (this.isCenterParameter (pt - 1)) {
					    propertyName = "xyz";
					    propertyValue = this.centerParameter (pt - 1);
					    pt = this.iToken + 1;
					    break;
					}this.error (22);
				    }
				}this.checkLength (pt);
				if (!this.isSyntaxCheck && propertyName != null) this.setShapeProperty (29, propertyName, propertyValue);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "intSetting", 
			    ($fz = function (pt) {
				if (pt == this.statementLength) return -2147483648;
				return this.parameterExpressionToken (pt).asInt ();
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "floatSetting", 
			    ($fz = function (pt) {
				if (pt == this.statementLength) return NaN;
				return org.jmol.script.ScriptVariable.fValue (this.parameterExpressionToken (pt));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "stringSetting", 
			    ($fz = function (pt, isJmolSet) {
				if (isJmolSet && this.statementLength == pt + 1) return this.parameterAsString (pt);
				return this.parameterExpressionToken (pt).asString ();
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "setLabel", 
			    ($fz = function (str) {
				this.shapeManager.loadShape (5);
				var propertyValue = null;
				this.setShapeProperty (5, "setDefaults", this.viewer.getNoneSelected ());
				while (true) {
				    if (str.equals ("scalereference")) {
					var scaleAngstromsPerPixel = this.floatParameter (2);
					if (scaleAngstromsPerPixel >= 5) scaleAngstromsPerPixel = this.viewer.getZoomSetting () / scaleAngstromsPerPixel / this.viewer.getScalePixelsPerAngstrom (false);
					propertyValue = Float.$valueOf (scaleAngstromsPerPixel);
					break;
				    }if (str.equals ("offset") || str.equals ("offsetexact")) {
					var xOffset = this.intParameterRange (2, -127, 127);
					var yOffset = this.intParameterRange (3, -127, 127);
					propertyValue = Integer.$valueOf (org.jmol.shape.Object2d.getOffset (xOffset, yOffset));
					break;
				    }if (str.equals ("alignment")) {
					switch (this.getToken (2).tok) {
					case 1073741996:
					case 1073742128:
					case 12289:
					    str = "align";
					    propertyValue = this.theToken.value;
					    break;
					default:
					    this.error (22);
					}
					break;
				    }if (str.equals ("pointer")) {
					var flags = 0;
					switch (this.getToken (2).tok) {
					case 1048588:
					case 1048587:
					    break;
					case 1610616835:
					    flags |= 2;
					case 1048589:
					    flags |= 1;
					    break;
					default:
					    this.error (22);
					}
					propertyValue = Integer.$valueOf (flags);
					break;
				    }if (str.equals ("toggle")) {
					this.iToken = 1;
					var bs = (this.statementLength == 2 ? null : this.atomExpressionAt (2));
					this.checkLast (this.iToken);
					if (!this.isSyntaxCheck) this.viewer.togglePickingLabel (bs);
					return true;
				    }this.iToken = 1;
				    var TF = (this.statementLength == 2 || this.getToken (2).tok == 1048589);
				    if (str.equals ("front") || str.equals ("group")) {
					if (!TF && this.tokAt (2) != 1048588) this.error (22);
					if (!TF) str = "front";
					propertyValue = (TF ? Boolean.TRUE : Boolean.FALSE);
					break;
				    }if (str.equals ("atom")) {
					if (!TF && this.tokAt (2) != 1048588) this.error (22);
					str = "front";
					propertyValue = (TF ? Boolean.FALSE : Boolean.TRUE);
					break;
				    }return false;
				}
				var bs = (this.iToken + 1 < this.statementLength ? this.atomExpressionAt (++this.iToken) : null);
				this.checkLast (this.iToken);
				if (this.isSyntaxCheck) return true;
				if (bs == null) this.setShapeProperty (5, str, propertyValue);
				else this.setShapePropertyBs (5, str, propertyValue, bs);
				return true;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setMonitor", 
			    ($fz = function () {
				var tok = this.tokAt (this.checkLast (2));
				switch (tok) {
				case 1048589:
				case 1048588:
				    this.setBooleanProperty ("measurementlabels", tok == 1048589);
				    return;
				case 1073741926:
				case 2:
				case 3:
				    this.setShapeSizeBs (6, this.getSetAxesTypeMad (2), null);
				    return;
				}
				this.setUnits (this.parameterAsString (2), 545259568);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setUnits", 
			    ($fz = function (units, tok) {
				if (tok == 545259568 && org.jmol.util.Parser.isOneOf (units.toLowerCase (), "angstroms;au;bohr;nanometers;nm;picometers;pm;vanderwaals;vdw")) {
				    if (!this.isSyntaxCheck) this.viewer.setUnits (units, true);
				} else if (tok == 545259558 && org.jmol.util.Parser.isOneOf (units.toLowerCase (), "kcal;kj")) {
				    if (!this.isSyntaxCheck) this.viewer.setUnits (units, false);
				} else {
				    this.errorStr2 (50, "set " + org.jmol.script.Token.nameOf (tok), units);
				}return true;
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "setSsbond", 
			    ($fz = function () {
				var ssbondsBackbone = false;
				switch (this.tokAt (this.checkLast (2))) {
				case 1115297793:
				    ssbondsBackbone = true;
				    break;
				case 3145754:
				    break;
				default:
				    this.error (22);
				}
				this.setBooleanProperty ("ssbondsBackbone", ssbondsBackbone);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setHbond", 
			    ($fz = function () {
				var bool = false;
				switch (this.tokAt (this.checkLast (2))) {
				case 1115297793:
				    bool = true;
				case 3145754:
				    this.setBooleanProperty ("hbondsBackbone", bool);
				    break;
				case 1073742150:
				    bool = true;
				case 1073741926:
				    this.setBooleanProperty ("hbondsSolid", bool);
				    break;
				default:
				    this.error (22);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setPicking", 
			    ($fz = function () {
				if (this.statementLength == 2) {
				    this.setStringProperty ("picking", "identify");
				    return;
				}if (this.statementLength > 4 || this.tokAt (2) == 4) {
				    this.setStringProperty ("picking", this.stringSetting (2, false));
				    return;
				}var i = 2;
				var type = "SELECT";
				switch (this.getToken (2).tok) {
				case 135280132:
				case 1746538509:
				case 1611141175:
				    if (this.checkLength34 () == 4) {
					type = this.parameterAsString (2).toUpperCase ();
					if (type.equals ("SPIN")) this.setIntProperty ("pickingSpinRate", this.intParameter (3));
					else i = 3;
				    }break;
				case 12291:
				    break;
				default:
				    this.checkLength (3);
				}
				var str = this.parameterAsString (i);
				switch (this.getToken (i).tok) {
				case 1048589:
				case 1073742056:
				    str = "identify";
				    break;
				case 1048588:
				case 1048587:
				    str = "off";
				    break;
				case 135280132:
				    str = "atom";
				    break;
				case 1826248715:
				    str = "label";
				    break;
				case 1678770178:
				    str = "bond";
				    break;
				case 12291:
				    this.checkLength (4);
				    if (this.tokAt (3) != 1678770178) this.error (22);
				    str = "deleteBond";
				    break;
				}
				var mode = ((mode = str.indexOf ("_")) >= 0 ? mode : str.length);
				mode = org.jmol.viewer.ActionManager.getPickingMode (str.substring (0, mode));
				if (mode < 0) this.errorStr2 (50, "SET PICKING " + type, str);
				this.setStringProperty ("picking", str);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setPickingStyle", 
			    ($fz = function () {
				if (this.statementLength > 4 || this.tokAt (2) == 4) {
				    this.setStringProperty ("pickingStyle", this.stringSetting (2, false));
				    return;
				}var i = 2;
				var isMeasure = false;
				var type = "SELECT";
				switch (this.getToken (2).tok) {
				case 1746538509:
				    isMeasure = true;
				    type = "MEASURE";
				case 135280132:
				    if (this.checkLength34 () == 4) i = 3;
				    break;
				default:
				    this.checkLength (3);
				}
				var str = this.parameterAsString (i);
				switch (this.getToken (i).tok) {
				case 1048587:
				case 1048588:
				    str = (isMeasure ? "measureoff" : "toggle");
				    break;
				case 1048589:
				    if (isMeasure) str = "measure";
				    break;
				}
				if (org.jmol.viewer.ActionManager.getPickingStyle (str) < 0) this.errorStr2 (50, "SET PICKINGSTYLE " + type, str);
				this.setStringProperty ("pickingStyle", str);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "timeout", 
			    ($fz = function (index) {
				var name = null;
				var script = null;
				var mSec = 0;
				if (this.statementLength == index) {
				    this.showString (this.viewer.showTimeout (null));
				    return;
				}for (var i = index; i < this.statementLength; i++) switch (this.getToken (i).tok) {
				case 1074790550:
				    name = this.parameterAsString (++i);
				    if (this.statementLength == 3) {
					if (!this.isSyntaxCheck) this.viewer.triggerTimeout (name);
					return;
				    }break;
				case 1048588:
				    break;
				case 2:
				    mSec = this.intParameter (i);
				    break;
				case 3:
				    mSec = Math.round (this.floatParameter (i) * 1000);
				    break;
				default:
				    if (name == null) name = this.parameterAsString (i);
				    else if (script == null) script = this.parameterAsString (i);
				    else this.error (22);
				    break;
				}

				if (!this.isSyntaxCheck && !this.viewer.isHeadless ()) this.viewer.setTimeout (name, mSec, script);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setUserColors", 
			    ($fz = function () {
				var v =  new java.util.ArrayList ();
				for (var i = 2; i < this.statementLength; i++) {
				    var argb = this.getArgbParam (i);
				    v.add (Integer.$valueOf (argb));
				    i = this.iToken;
				}
				if (this.isSyntaxCheck) return;
				var n = v.size ();
				var scale =  Clazz.newIntArray (n, 0);
				for (var i = n; --i >= 0; ) scale[i] = v.get (i).intValue ();

				this.viewer.setUserScale (scale);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setVariable", 
			    ($fz = function (pt, ptMax, key, setType) {
				var bs = null;
				var propertyName = "";
				var tokProperty = 0;
				var isArrayItem = (setType == 91);
				var settingProperty = false;
				var isExpression = false;
				var settingData = (key.startsWith ("property_"));
				var t = (settingData ? null : this.getContextVariableAsVariable (key));
				var isUserVariable = (t != null);
				if (pt > 0 && this.tokAt (pt - 1) == 1048577) {
				    bs = this.atomExpressionAt (pt - 1);
				    pt = this.iToken + 1;
				    isExpression = true;
				}if (this.tokAt (pt) == 1048584) {
				    settingProperty = true;
				    var token = this.getBitsetPropertySelector (++pt, true);
				    if (token == null) this.error (22);
				    if (this.tokAt (++pt) != 269484436) this.error (22);
				    pt++;
				    tokProperty = token.intValue;
				    propertyName = token.value;
				}if (isExpression && !settingProperty) this.error (22);
				var v = this.parameterExpression (pt, ptMax, key, true, true, -1, isArrayItem, null, null);
				var nv = v.size ();
				if (nv == 0 || !isArrayItem && nv > 1 || isArrayItem && (nv < 3 || nv % 2 != 1)) this.error (22);
				if (this.isSyntaxCheck) return;
				var tv = v.get (isArrayItem ? v.size () - 1 : 0);
				var needVariable = (!isUserVariable && !isExpression && !settingData && (isArrayItem || settingProperty || !(Clazz.instanceOf (tv.value, String) || tv.tok == 2 || Clazz.instanceOf (tv.value, Integer) || Clazz.instanceOf (tv.value, Float) || Clazz.instanceOf (tv.value, Boolean))));
				if (needVariable) {
				    if (key.startsWith ("_")) this.errorStr (22, key);
				    t = this.viewer.getOrSetNewVariable (key, true);
				    isUserVariable = true;
				}if (isArrayItem) {
				    var tnew = (org.jmol.script.ScriptVariable.newVariable (4, "")).set (tv, false);
				    var nParam = Clazz.doubleToInt (v.size () / 2);
				    for (var i = 0; i < nParam; i++) {
					var isLast = (i + 1 == nParam);
					var vv = v.get (i * 2);
					if (t.tok == 10) {
					    t.tok = 6;
					    t.value =  new java.util.Hashtable ();
					}if (t.tok == 6) {
					    var hkey = vv.asString ();
					    var tmap = t.value;
					    if (isLast) {
						tmap.put (hkey, tnew);
						break;
					    }t = tmap.get (hkey);
					} else {
					    var ipt = vv.asInt ();
					    if (t.tok == 7) t = org.jmol.script.ScriptVariable.selectItemVar (t);
					    switch (t.tok) {
					    case 7:
						var list = t.getList ();
						if (ipt > list.size () || isLast) break;
						if (ipt <= 0) ipt = list.size () + ipt;
						if (--ipt < 0) ipt = 0;
						t = list.get (ipt);
						continue;
					    case 11:
					    case 12:
						var dim = (t.tok == 11 ? 3 : 4);
						if (nParam == 1 && Math.abs (ipt) >= 1 && Math.abs (ipt) <= dim && tnew.tok == 7 && tnew.getList ().size () == dim) break;
						if (nParam == 2) {
						    var ipt2 = v.get (2).asInt ();
						    if (ipt2 >= 1 && ipt2 <= dim && (tnew.tok == 2 || tnew.tok == 3)) {
							i++;
							ipt = ipt * 10 + ipt2;
							break;
						    }}t.toArray ();
						--i;
						continue;
					    }
					    t.setSelectedValue (ipt, tnew);
					    break;
					}}
				    return;
				}if (settingProperty) {
				    if (!isExpression) {
					bs = org.jmol.script.ScriptVariable.getBitSet (t, true);
					if (bs == null) this.error (22);
				    }if (propertyName.startsWith ("property_")) {
					this.viewer.setData (propertyName, [propertyName, (tv.tok == 7 ? org.jmol.script.ScriptVariable.flistValue (tv, (tv.value).size () == bs.cardinality () ? bs.cardinality () : this.viewer.getAtomCount ()) : tv.asString ()), org.jmol.util.BitSetUtil.copy (bs),  new Integer (tv.tok == 7 ? 1 : 0)], this.viewer.getAtomCount (), 0, 0, tv.tok == 7 ? 2147483647 : -2147483648, 0);
					return;
				    }this.setBitsetProperty (bs, tokProperty, tv.asInt (), tv.asFloat (), tv);
				    return;
				}if (isUserVariable) {
				    t.set (tv, false);
				    return;
				}var vv = org.jmol.script.ScriptVariable.oValue (tv);
				if (key.startsWith ("property_")) {
				    if (tv.tok == 7) vv = tv.asString ();
				    this.viewer.setData (key, [key, "" + vv, org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSet (false)),  new Integer (0)], this.viewer.getAtomCount (), 0, 0, -2147483648, 0);
				    return;
				}if (Clazz.instanceOf (vv, Boolean)) {
				    this.setBooleanProperty (key, (vv).booleanValue ());
				} else if (Clazz.instanceOf (vv, Integer)) {
				    this.setIntProperty (key, (vv).intValue ());
				} else if (Clazz.instanceOf (vv, Float)) {
				    this.setFloatProperty (key, (vv).floatValue ());
				} else if (Clazz.instanceOf (vv, String)) {
				    this.setStringProperty (key, vv);
				} else if (Clazz.instanceOf (vv, org.jmol.modelset.Bond.BondSet)) {
				    this.setStringProperty (key, org.jmol.util.Escape.escapeBs (vv, false));
				} else if (Clazz.instanceOf (vv, org.jmol.util.BitSet) || Clazz.instanceOf (vv, org.jmol.util.Point3f) || Clazz.instanceOf (vv, org.jmol.util.Point4f)) {
				    this.setStringProperty (key, org.jmol.util.Escape.escape (vv));
				} else {
				    org.jmol.util.Logger.error ("ERROR -- return from propertyExpression was " + vv);
				}}, $fz.isPrivate = true, $fz), "~N,~N,~S,~N");
	Clazz.defineMethod (c$, "axes", 
			    ($fz = function (index) {
				var tickInfo = this.checkTicks (index, true, true, false);
				index = this.iToken + 1;
				var tok = this.tokAt (index);
				var type = this.optParameterAsString (index).toLowerCase ();
				if (this.statementLength == index + 1 && org.jmol.util.Parser.isOneOf (type, "window;unitcell;molecular")) {
				    this.setBooleanProperty ("axes" + type, true);
				    return;
				}switch (tok) {
				case 12289:
				    var center = this.centerParameter (index + 1);
				    this.setShapeProperty (30, "origin", center);
				    this.checkLast (this.iToken);
				    return;
				case 1073742138:
				    this.setFloatProperty ("axesScale", this.floatParameter (this.checkLast (++index)));
				    return;
				case 1826248715:
				    switch (tok = this.tokAt (index + 1)) {
				    case 1048588:
				    case 1048589:
					this.checkLength (index + 2);
					this.setShapeProperty (30, "labels" + (tok == 1048589 ? "On" : "Off"), null);
					return;
				    }
				    if (this.statementLength == index + 7) {
					this.setShapeProperty (30, "labels", [this.parameterAsString (++index), this.parameterAsString (++index), this.parameterAsString (++index), this.parameterAsString (++index), this.parameterAsString (++index), this.parameterAsString (++index)]);
				    } else {
					this.checkLength (index + 4);
					this.setShapeProperty (30, "labels", [this.parameterAsString (++index), this.parameterAsString (++index), this.parameterAsString (++index)]);
				    }return;
				}
				if (type.equals ("position")) {
				    var xyp;
				    if (this.tokAt (++index) == 1048588) {
					xyp =  new org.jmol.util.Point3f ();
				    } else {
					xyp = this.xypParameter (index);
					if (xyp == null) this.error (22);
					index = this.iToken;
				    }this.setShapeProperty (30, "position", xyp);
				    return;
				}var mad = this.getSetAxesTypeMad (index);
				if (this.isSyntaxCheck) return;
				this.setObjectMad (30, "axes", mad);
				if (tickInfo != null) this.setShapeProperty (30, "tickInfo", tickInfo);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "boundbox", 
			    ($fz = function (index) {
				var tickInfo = this.checkTicks (index, false, true, false);
				index = this.iToken + 1;
				var scale = 1;
				if (this.tokAt (index) == 1073742138) {
				    scale = this.floatParameter (++index);
				    if (!this.isSyntaxCheck && scale == 0) this.error (22);
				    index++;
				    if (index == this.statementLength) {
					if (!this.isSyntaxCheck) this.viewer.setBoundBox (null, null, true, scale);
					return;
				    }}var byCorner = (this.tokAt (index) == 1073741902);
				if (byCorner) index++;
				if (this.isCenterParameter (index)) {
				    this.expressionResult = null;
				    var index0 = index;
				    var pt1 = this.centerParameter (index);
				    index = this.iToken + 1;
				    if (byCorner || this.isCenterParameter (index)) {
					var pt2 = (byCorner ? this.centerParameter (index) : this.getPoint3f (index, true));
					index = this.iToken + 1;
					if (!this.isSyntaxCheck) this.viewer.setBoundBox (pt1, pt2, byCorner, scale);
				    } else if (this.expressionResult != null && Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet)) {
					if (!this.isSyntaxCheck) this.viewer.calcBoundBoxDimensions (this.expressionResult, scale);
				    } else if (this.expressionResult == null && this.tokAt (index0) == 1048583) {
					if (this.isSyntaxCheck) return;
					var bbox = this.getObjectBoundingBox (this.objectNameParameter (++index0));
					if (bbox == null) this.error (22);
					this.viewer.setBoundBox (bbox[0], bbox[1], true, scale);
					index = this.iToken + 1;
				    } else {
					this.error (22);
				    }if (index == this.statementLength) return;
				}var mad = this.getSetAxesTypeMad (index);
				if (this.isSyntaxCheck) return;
				if (tickInfo != null) this.setShapeProperty (31, "tickInfo", tickInfo);
				this.setObjectMad (31, "boundbox", mad);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkTicks", 
			    ($fz = function (index, allowUnitCell, allowScale, allowFirst) {
				this.iToken = index - 1;
				if (this.tokAt (index) != 1073742164) return null;
				var tickInfo;
				var str = " ";
				switch (this.tokAt (index + 1)) {
				case 1112541205:
				case 1112541206:
				case 1112541207:
				    str = this.parameterAsString (++index).toLowerCase ();
				    break;
				case 1073741824:
				    this.error (22);
				}
				if (this.tokAt (++index) == 1048587) {
				    tickInfo =  new org.jmol.modelset.TickInfo (null);
				    tickInfo.type = str;
				    this.iToken = index;
				    return tickInfo;
				}tickInfo =  new org.jmol.modelset.TickInfo (this.getPointOrPlane (index, false, true, false, false, 3, 3));
				if (this.coordinatesAreFractional || this.tokAt (this.iToken + 1) == 1614417948) {
				    tickInfo.scale = org.jmol.util.Point3f.new3 (NaN, NaN, NaN);
				    allowScale = false;
				}if (this.tokAt (this.iToken + 1) == 1614417948) this.iToken++;
				tickInfo.type = str;
				if (this.tokAt (this.iToken + 1) == 1288701960) tickInfo.tickLabelFormats = this.stringParameterSet (this.iToken + 2);
				if (!allowScale) return tickInfo;
				if (this.tokAt (this.iToken + 1) == 1073742138) {
				    if (this.isFloatParameter (this.iToken + 2)) {
					var f = this.floatParameter (this.iToken + 2);
					tickInfo.scale = org.jmol.util.Point3f.new3 (f, f, f);
				    } else {
					tickInfo.scale = this.getPoint3f (this.iToken + 2, true);
				    }}if (allowFirst) if (this.tokAt (this.iToken + 1) == 1073741942) tickInfo.first = this.floatParameter (this.iToken + 2);
				return tickInfo;
			    }, $fz.isPrivate = true, $fz), "~N,~B,~B,~B");
	Clazz.defineMethod (c$, "unitcell", 
			    ($fz = function (index) {
				var icell = 2147483647;
				var mad = 2147483647;
				var pt = null;
				var tickInfo = this.checkTicks (index, true, false, false);
				index = this.iToken;
				var id = null;
				var points = null;
				switch (this.tokAt (index + 1)) {
				case 4:
				    id = this.objectNameParameter (++index);
				    break;
				case 1048583:
				    index++;
				    id = this.objectNameParameter (++index);
				    break;
				default:
				    if (this.isArrayParameter (index + 1)) {
					points = this.getPointArray (++index, 4);
					index = this.iToken;
				    } else if (this.statementLength == index + 2) {
					if (this.getToken (index + 1).tok == 2 && this.intParameter (index + 1) >= 111) icell = this.intParameter (++index);
				    } else if (this.statementLength > index + 1) {
					pt = this.getPointOrPlane (++index, false, true, false, true, 3, 3);
					index = this.iToken;
				    }}
				mad = this.getSetAxesTypeMad (++index);
				this.checkLast (this.iToken);
				if (this.isSyntaxCheck) return;
				if (icell != 2147483647) this.viewer.setCurrentUnitCellOffset (icell);
				else if (id != null) this.viewer.setCurrentUnitCell (id);
				else if (points != null) this.viewer.setCurrentUnitCellPts (points);
				this.setObjectMad (32, "unitCell", mad);
				if (pt != null) this.viewer.setCurrentUnitCellOffsetPt (pt);
				if (tickInfo != null) this.setShapeProperty (32, "tickInfo", tickInfo);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "frank", 
			    ($fz = function (index) {
				this.setBooleanProperty ("frank", this.booleanParameter (index));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "selectionHalo", 
			    ($fz = function (pt) {
				var showHalo = false;
				switch (pt == this.statementLength ? 1048589 : this.getToken (pt).tok) {
				case 1048589:
				case 1114638350:
				    showHalo = true;
				case 1048588:
				case 1048587:
				case 1073742056:
				    this.setBooleanProperty ("selectionHalos", showHalo);
				    break;
				default:
				    this.error (22);
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "save", 
			    ($fz = function () {
				if (this.statementLength > 1) {
				    var saveName = this.optParameterAsString (2);
				    switch (this.tokAt (1)) {
				    case 1073742132:
					if (!this.isSyntaxCheck) this.viewer.saveOrientation (saveName);
					return;
				    case 1073742077:
					if (!this.isSyntaxCheck) this.viewer.saveOrientation (saveName);
					return;
				    case 1678770178:
					if (!this.isSyntaxCheck) this.viewer.saveBonds (saveName);
					return;
				    case 1073742158:
					if (!this.isSyntaxCheck) this.viewer.saveState (saveName);
					return;
				    case 1641025539:
					if (!this.isSyntaxCheck) this.viewer.saveStructure (saveName);
					return;
				    case 1048582:
					if (!this.isSyntaxCheck) this.viewer.saveCoordinates (saveName, this.viewer.getSelectionSet (false));
					return;
				    case 1073742140:
					if (!this.isSyntaxCheck) this.viewer.saveSelection (saveName);
					return;
				    }
				}this.errorStr2 (53, "SAVE", "bonds? coordinates? orientation? selection? state? structure?");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "restore", 
			    ($fz = function () {
				if (this.statementLength > 1) {
				    var saveName = this.optParameterAsString (2);
				    if (this.getToken (1).tok != 1073742077) this.checkLength23 ();
				    var timeSeconds;
				    switch (this.getToken (1).tok) {
				    case 1073742132:
					timeSeconds = (this.statementLength > 3 ? this.floatParameter (3) : 0);
					if (timeSeconds < 0) this.error (22);
					if (!this.isSyntaxCheck) this.viewer.restoreRotation (saveName, timeSeconds);
					return;
				    case 1073742077:
					timeSeconds = (this.statementLength > 3 ? this.floatParameter (3) : 0);
					if (timeSeconds < 0) this.error (22);
					if (!this.isSyntaxCheck) this.viewer.restoreOrientation (saveName, timeSeconds);
					return;
				    case 1678770178:
					if (!this.isSyntaxCheck) this.viewer.restoreBonds (saveName);
					return;
				    case 1048582:
					if (this.isSyntaxCheck) return;
					var script = this.viewer.getSavedCoordinates (saveName);
					if (script == null) this.error (22);
					this.runScript (script);
					this.viewer.checkCoordinatesChanged ();
					return;
				    case 1073742158:
					if (this.isSyntaxCheck) return;
					var state = this.viewer.getSavedState (saveName);
					if (state == null) this.error (22);
					this.runScript (state);
					return;
				    case 1641025539:
					if (this.isSyntaxCheck) return;
					var shape = this.viewer.getSavedStructure (saveName);
					if (shape == null) this.error (22);
					this.runScript (shape);
					return;
				    case 1073742140:
					if (!this.isSyntaxCheck) this.viewer.restoreSelection (saveName);
					return;
				    }
				}this.errorStr2 (53, "RESTORE", "bonds? coords? orientation? selection? state? structure?");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "write", 
			    function (args) {
				var pt = 0;
				var pt0 = 0;
				var isCommand;
				var isShow;
				if (args == null) {
				    args = this.statement;
				    pt = pt0 = 1;
				    isCommand = true;
				    isShow = (this.viewer.isApplet () && !this.viewer.isSignedApplet () || !this.viewer.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL) || this.viewer.getPathForAllFiles ().length > 0);
				} else {
				    isCommand = false;
				    isShow = true;
				}var argCount = (isCommand ? this.statementLength : args.length);
				var len = 0;
				var nVibes = 0;
				var width = -1;
				var height = -1;
				var quality = -2147483648;
				var driverList = this.viewer.getExportDriverList ();
				var sceneType = "PNGJ";
				var data = null;
				var type2 = "";
				var fileName = null;
				var localPath = null;
				var remotePath = null;
				var val = null;
				var msg = null;
				var fullPath =  new Array (1);
				var isCoord = false;
				var isExport = false;
				var isImage = false;
				var bsFrames = null;
				var scripts = null;
				var type = "SPT";
				var tok = (isCommand && args.length == 1 ? 1073741884 : org.jmol.script.ScriptEvaluator.tokAtArray (pt, args));
				switch (tok) {
				case 0:
				    break;
				case 135271429:
				    if (this.isArrayParameter (pt + 1)) {
					scripts = this.stringParameterSet (++pt);
					localPath = ".";
					remotePath = ".";
					pt0 = pt = this.iToken + 1;
					tok = this.tokAt (pt);
				    }break;
				default:
				    type = org.jmol.script.ScriptVariable.sValue (this.tokenAt (pt, args)).toUpperCase ();
				}
				switch (tok) {
				case 0:
				    break;
				case 135270417:
				case 1052714:
				case 1716520973:
				    msg = this.plot (args);
				    if (!isCommand) return msg;
				    break;
				case 1073741983:
				    type = "INLINE";
				    data = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args));
				    pt++;
				    break;
				case 1073742102:
				    type = "PGRP";
				    pt++;
				    type2 = org.jmol.script.ScriptVariable.sValue (this.tokenAt (pt, args)).toLowerCase ();
				    if (type2.equals ("draw")) pt++;
				    break;
				case 1048582:
				    pt++;
				    isCoord = true;
				    break;
				case 1073742158:
				case 135271429:
				    val = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args)).toLowerCase ();
				    while (val.equals ("localpath") || val.equals ("remotepath")) {
					if (val.equals ("localpath")) localPath = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args));
					else remotePath = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args));
					val = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args)).toLowerCase ();
				    }
				    type = "SPT";
				    break;
				case 1229984263:
				case 135368713:
				case 1610616855:
				case 135180:
				case 1073742015:
				case 1073742018:
				case 1183762:
				case 135188:
				    pt++;
				    break;
				case 1073741992:
				    type = "ZIPALL";
				    pt++;
				    break;
				case 36868:
				    type = "VAR";
				    pt += 2;
				    break;
				case 4115:
				case 1073741824:
				case 1073741979:
				case 1073742139:
				case 4:
				case 4166:
				    switch (tok) {
				    case 1073741979:
					pt++;
					break;
				    case 4166:
					nVibes = this.intParameterRange (++pt, 1, 10);
					if (!this.isSyntaxCheck) {
					    this.viewer.setVibrationOff ();
					    this.delayMillis (100);
					}pt++;
					break;
				    case 4115:
					var bsAtoms;
					if (pt + 1 < argCount && args[++pt].tok == 1048577 || args[pt].tok == 10) {
					    bsAtoms = this.atomExpression (args, pt, 0, true, false, true, true);
					    pt = this.iToken + 1;
					} else {
					    bsAtoms = this.viewer.getModelUndeletedAtomsBitSet (-1);
					}if (!this.isSyntaxCheck) bsFrames = this.viewer.getModelBitSet (bsAtoms, true);
					break;
				    case 1073742139:
					val = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args)).toUpperCase ();
					if (org.jmol.util.Parser.isOneOf (val, "PNG;PNGJ")) {
					    sceneType = val;
					    pt++;
					}break;
				    default:
				    case 4:
					var t = org.jmol.script.Token.getTokenFromName (org.jmol.script.ScriptVariable.sValue (args[pt]).toLowerCase ());
					if (t != null) {
					    tok = t.tok;
					    type = org.jmol.script.ScriptVariable.sValue (t).toUpperCase ();
					}if (org.jmol.util.Parser.isOneOf (type, driverList.toUpperCase ())) {
					    pt++;
					    type = type.substring (0, 1).toUpperCase () + type.substring (1).toLowerCase ();
					    isExport = true;
					    if (isCommand) fileName = "Jmol." + type;
					} else if (type.equals ("ZIP")) {
					    pt++;
					} else if (type.equals ("ZIPALL")) {
					    pt++;
					} else {
					    type = "(image)";
					}break;
				    }
				    if (org.jmol.script.ScriptEvaluator.tokAtArray (pt, args) == 2) {
					width = org.jmol.script.ScriptVariable.iValue (this.tokenAt (pt++, args));
					height = org.jmol.script.ScriptVariable.iValue (this.tokenAt (pt++, args));
				    }break;
				}
				if (msg == null) {
				    val = org.jmol.script.ScriptVariable.sValue (this.tokenAt (pt, args));
				    if (val.equalsIgnoreCase ("clipboard")) {
					if (this.isSyntaxCheck) return "";
				    } else if (org.jmol.util.Parser.isOneOf (val.toLowerCase (), "png;pngj;pngt;jpg;jpeg;jpg64;jpeg64") && org.jmol.script.ScriptEvaluator.tokAtArray (pt + 1, args) == 2) {
					quality = org.jmol.script.ScriptVariable.iValue (this.tokenAt (++pt, args));
				    } else if (org.jmol.util.Parser.isOneOf (val.toLowerCase (), "xyz;xyzrn;xyzvib;mol;sdf;v2000;v3000;cd;pdb;pqr;cml")) {
					type = val.toUpperCase ();
					if (pt + 1 == argCount) pt++;
				    }if (type.equals ("(image)") && org.jmol.util.Parser.isOneOf (val.toUpperCase (), "GIF;JPG;JPG64;JPEG;JPEG64;PNG;PNGJ;PNGT;PPM")) {
					type = val.toUpperCase ();
					pt++;
				    }if (pt + 2 == argCount) {
					data = org.jmol.script.ScriptVariable.sValue (this.tokenAt (++pt, args));
					if (data.length > 0 && data.charAt (0) != '.') type = val.toUpperCase ();
				    }switch (org.jmol.script.ScriptEvaluator.tokAtArray (pt, args)) {
				    case 0:
					isShow = true;
					break;
				    case 1073741884:
					break;
				    case 1073741824:
				    case 4:
					fileName = org.jmol.script.ScriptVariable.sValue (this.tokenAt (pt, args));
					if (pt == argCount - 3 && org.jmol.script.ScriptEvaluator.tokAtArray (pt + 1, args) == 1048584) {
					    fileName += "." + org.jmol.script.ScriptVariable.sValue (this.tokenAt (pt + 2, args));
					}if (type !== "VAR" && pt == pt0) type = "IMAGE";
					else if (fileName.length > 0 && fileName.charAt (0) == '.' && (pt == pt0 + 1 || pt == pt0 + 2)) {
					    fileName = org.jmol.script.ScriptVariable.sValue (this.tokenAt (pt - 1, args)) + fileName;
					    if (type !== "VAR" && pt == pt0 + 1) type = "IMAGE";
					}if (fileName.equalsIgnoreCase ("clipboard") || !this.viewer.isRestricted (org.jmol.viewer.Viewer.ACCESS.ALL)) fileName = null;
					break;
				    default:
					this.error (22);
				    }
				    if (type.equals ("IMAGE") || type.equals ("FRAME") || type.equals ("VIBRATION")) {
					type = (fileName != null && fileName.indexOf (".") >= 0 ? fileName.substring (fileName.lastIndexOf (".") + 1).toUpperCase () : "JPG");
				    }if (type.equals ("MNU")) {
					type = "MENU";
				    } else if (type.equals ("WRL") || type.equals ("VRML")) {
					type = "Vrml";
					isExport = true;
				    } else if (type.equals ("X3D")) {
					type = "X3d";
					isExport = true;
				    } else if (type.equals ("IDTF")) {
					type = "Idtf";
					isExport = true;
				    } else if (type.equals ("MA")) {
					type = "Maya";
					isExport = true;
				    } else if (type.equals ("JS")) {
					type = "Js";
					isExport = true;
				    } else if (type.equals ("OBJ")) {
					type = "Obj";
					isExport = true;
				    } else if (type.equals ("JVXL")) {
					type = "ISOSURFACE";
				    } else if (type.equals ("XJVXL")) {
					type = "ISOSURFACE";
				    } else if (type.equals ("JMOL")) {
					type = "ZIPALL";
				    } else if (type.equals ("HIS")) {
					type = "HISTORY";
				    }if (type.equals ("COORD")) type = (fileName != null && fileName.indexOf (".") >= 0 ? fileName.substring (fileName.lastIndexOf (".") + 1).toUpperCase () : "XYZ");
				    isImage = org.jmol.util.Parser.isOneOf (type, "GIF;JPEG64;JPEG;JPG64;JPG;PPM;PNG;PNGJ;PNGT;SCENE");
				    if (scripts != null) {
					if (type.equals ("PNG")) type = "PNGJ";
					if (!type.equals ("PNGJ") && !type.equals ("ZIPALL")) this.error (22);
				    }if (isImage && isShow) type = "JPG64";
				    else if (!isImage && !isExport && !org.jmol.util.Parser.isOneOf (type, "SCENE;JMOL;ZIP;ZIPALL;SPT;HISTORY;MO;ISOSURFACE;MESH;PMESH;VAR;FILE;FUNCTION;CD;CML;XYZ;XYZRN;XYZVIB;MENU;MOL;PDB;PGRP;PQR;QUAT;RAMA;SDF;V2000;V3000;INLINE")) this.errorStr2 (54, "COORDS|FILE|FUNCTIONS|HISTORY|IMAGE|INLINE|ISOSURFACE|JMOL|MENU|MO|POINTGROUP|QUATERNION [w,x,y,z] [derivative]|RAMACHANDRAN|SPT|STATE|VAR x|ZIP|ZIPALL  CLIPBOARD", "CML|GIF|JPG|JPG64|JMOL|JVXL|MESH|MOL|PDB|PMESH|PNG|PNGJ|PNGT|PPM|PQR|SDF|V2000|V3000|SPT|XJVXL|XYZ|XYZRN|XYZVIB|ZIP" + driverList.toUpperCase ().$replace (';', '|'));
				    if (this.isSyntaxCheck) return "";
				    var bytes = null;
				    var doDefer = false;
				    if (data == null || isExport) {
					data = type.intern ();
					if (isExport) {
					    fullPath[0] = fileName;
					    data = this.viewer.generateOutput (data, isCommand || fileName != null ? fullPath : null, width, height);
					    if (data == null || data.length == 0) return "";
					    if (!isCommand) return data;
					    if ((type.equals ("Povray") || type.equals ("Idtf")) && fullPath[0] != null) {
						var ext = (type.equals ("Idtf") ? ".tex" : ".ini");
						fileName = fullPath[0] + ext;
						msg = this.viewer.createImageSet (fileName, ext, data, null, -2147483648, 0, 0, null, 0, fullPath);
						if (type.equals ("Idtf")) data = data.substring (0, data.indexOf ("\\begin{comment}"));
						data = "Created " + fullPath[0] + ":\n\n" + data;
					    } else {
						msg = data;
					    }if (msg != null) {
						if (!msg.startsWith ("OK")) this.evalError (msg, null);
						this.scriptStatusOrBuffer (data);
					    }return "";
					} else if (data === "MENU") {
					    data = this.viewer.getMenu ("");
					} else if (data === "PGRP") {
					    data = this.viewer.getPointGroupAsString (type2.equals ("draw"), null, 0, 1.0);
					} else if (data === "PDB" || data === "PQR") {
					    if (isShow) {
						data = this.viewer.getPdbData (null, null);
					    } else {
						doDefer = true;
					    }} else if (data === "FILE") {
						if (isShow) data = this.viewer.getCurrentFileAsString ();
						else doDefer = true;
						if ("?".equals (fileName)) fileName = "?Jmol." + this.viewer.getParameter ("_fileType");
					    } else if ((data === "SDF" || data === "MOL" || data === "V2000" || data === "V3000" || data === "CD") && isCoord) {
						data = this.viewer.getModelExtract ("selected", true, data);
						if (data.startsWith ("ERROR:")) bytes = data;
					    } else if (data === "XYZ" || data === "XYZRN" || data === "XYZVIB" || data === "MOL" || data === "SDF" || data === "V2000" || data === "V3000" || data === "CML" || data === "CD") {
						data = this.viewer.getData ("selected", data);
						if (data.startsWith ("ERROR:")) bytes = data;
					    } else if (data === "FUNCTION") {
						data = this.viewer.getFunctionCalls (null);
						type = "TXT";
					    } else if (data === "VAR") {
						data = (this.getParameter (org.jmol.script.ScriptVariable.sValue (this.tokenAt (isCommand ? 2 : 1, args)), 1073742190)).asString ();
						type = "TXT";
					    } else if (data === "SPT") {
						if (isCoord) {
						    var tainted = this.viewer.getTaintedAtoms (2);
						    this.viewer.setAtomCoordRelative (org.jmol.util.Point3f.new3 (0, 0, 0), null);
						    data = this.viewer.getProperty ("string", "stateInfo", null);
						    this.viewer.setTaintedAtoms (tainted, 2);
						} else {
						    data = this.viewer.getProperty ("string", "stateInfo", null);
						    if (localPath != null || remotePath != null) data = org.jmol.viewer.FileManager.setScriptFileReferences (data, localPath, remotePath, null);
						}} else if (data === "ZIP" || data === "ZIPALL") {
						    data = this.viewer.getProperty ("string", "stateInfo", null);
						    bytes = this.viewer.createZip (fileName, type, data, scripts);
						} else if (data === "HISTORY") {
						    data = this.viewer.getSetHistory (2147483647);
						    type = "SPT";
						} else if (data === "MO") {
						    data = this.getMoJvxl (2147483647);
						    type = "XJVXL";
						} else if (data === "PMESH") {
						    if ((data = this.getIsosurfaceJvxl (true, 27)) == null) this.error (31);
						    type = "XJVXL";
						} else if (data === "ISOSURFACE" || data === "MESH") {
						    if ((data = this.getIsosurfaceJvxl (data === "MESH", 23)) == null) this.error (31);
						    type = (data.indexOf ("<?xml") >= 0 ? "XJVXL" : "JVXL");
						    if (!isShow) this.showString (this.getShapeProperty (23, "jvxlFileInfo"));
						} else {
						    len = -1;
						    if (quality < 0) quality = -1;
						}if (data == null && !doDefer) data = "";
					if (len == 0 && !doDefer) len = (bytes == null ? data.length : Clazz.instanceOf (bytes, String) ? (bytes).length : (bytes).length);
					if (isImage) {
					    this.refresh ();
					    if (width < 0) width = this.viewer.getScreenWidth ();
					    if (height < 0) height = this.viewer.getScreenHeight ();
					}}if (!isCommand) return data;
				    if (isShow) {
					this.showStringPrint (data, true);
					return "";
				    }if (bytes != null && Clazz.instanceOf (bytes, String)) {
					this.scriptStatusOrBuffer (bytes);
					return bytes;
				    }if (type.equals ("SCENE")) bytes = sceneType;
				    else if (bytes == null && (!isImage || fileName != null)) bytes = data;
				    if (doDefer) msg = this.viewer.streamFileData (fileName, type, type2, 0, null);
				    else msg = this.viewer.createImageSet (fileName, type, bytes, scripts, quality, width, height, bsFrames, nVibes, fullPath);
				}if (!this.isSyntaxCheck && msg != null) {
				    if (!msg.startsWith ("OK")) this.evalError (msg, null);
				    this.scriptStatusOrBuffer (msg + (isImage ? "; width=" + width + "; height=" + height : ""));
				    return msg;
				}return "";
			    }, "~A");
	Clazz.defineMethod (c$, "show", 
			    ($fz = function () {
				var value = null;
				var str = this.parameterAsString (1);
				var msg = null;
				var name = null;
				var len = 2;
				var token = this.getToken (1);
				var tok = (Clazz.instanceOf (token, org.jmol.script.ScriptVariable) ? 0 : token.tok);
				if (tok == 4) {
				    token = org.jmol.script.Token.getTokenFromName (str.toLowerCase ());
				    if (token != null) tok = token.tok;
				}if (tok != 1297090050 && tok != 1073742158) this.checkLength (-3);
				if (this.statementLength == 2 && str.indexOf ("?") >= 0) {
				    this.showString (this.viewer.getAllSettings (str.substring (0, str.indexOf ("?"))));
				    return;
				}switch (tok) {
				case 0:
				    msg = (this.theToken).escape ();
				    break;
				case 135270422:
				    msg = org.jmol.util.Escape.escape (this.viewer.cacheList ());
				    break;
				case 1073741915:
				    this.checkLength (2);
				    if (!this.isSyntaxCheck) msg = this.viewer.calculateStructures (null, true, false);
				    break;
				case 545259570:
				    this.checkLength (2);
				    if (!this.isSyntaxCheck) msg = this.viewer.getPathForAllFiles ();
				    break;
				case 1073742038:
				case 135267336:
				case 1073741929:
				case 1073741879:
				    this.checkLength (tok == 1073741879 ? 3 : 2);
				    if (this.isSyntaxCheck) return;
				    msg = this.viewer.getSmiles (0, 0, this.viewer.getSelectionSet (false), false, true, false, false);
				    switch (tok) {
				    case 1073741929:
					if (msg.length > 0) {
					    this.viewer.show2D (msg);
					    return;
					}msg = "Could not show drawing -- Either insufficient atoms are selected or the model is a PDB file.";
					break;
				    case 1073742038:
					if (msg.length > 0) {
					    this.viewer.showNMR (msg);
					    return;
					}msg = "Could not show nmr -- Either insufficient atoms are selected or the model is a PDB file.";
					break;
				    case 1073741879:
					len = 3;
					var info = null;
					if (msg.length > 0) {
					    var type = '/';
					    switch (this.getToken (2).tok) {
					    case 1073741977:
						type = 'I';
						break;
					    case 1073741978:
						type = 'K';
						break;
					    case 1073742035:
						type = 'N';
						break;
					    default:
						info = this.parameterAsString (2);
					    }
					    msg = this.viewer.getChemicalInfo (msg, type, info);
					    if (msg.indexOf ("FileNotFound") >= 0) msg = "?";
					} else {
					    msg = "Could not show name -- Either insufficient atoms are selected or the model is a PDB file.";
					}}
				    break;
				case 1297090050:
				    if (this.statementLength > 3) {
					var pt1 = this.centerParameter (2);
					var pt2 = this.centerParameter (++this.iToken);
					if (!this.isSyntaxCheck) msg = this.viewer.getSymmetryOperation (null, 0, pt1, pt2, false);
					len = ++this.iToken;
				    } else {
					var iop = (this.checkLength23 () == 2 ? 0 : this.intParameter (2));
					if (!this.isSyntaxCheck) msg = this.viewer.getSymmetryOperation (null, iop, null, null, false);
					len = -3;
				    }break;
				case 1649412112:
				    var vdwType = null;
				    if (this.statementLength > 2) {
					vdwType = org.jmol.constant.EnumVdw.getVdwType (this.parameterAsString (2));
					if (vdwType == null) this.error (22);
				    }if (!this.isSyntaxCheck) this.showString (this.viewer.getDefaultVdwTypeNameOrData (0, vdwType));
				    return;
				case 135368713:
				    this.checkLength23 ();
				    if (!this.isSyntaxCheck) this.showString (this.viewer.getFunctionCalls (this.optParameterAsString (2)));
				    return;
				case 1085443:
				    this.checkLength (2);
				    if (!this.isSyntaxCheck) this.showString (this.viewer.getAllSettings (null));
				    return;
				case 1074790760:
				    if ((len = this.statementLength) == 2) {
					if (!this.isSyntaxCheck) this.viewer.showUrl (this.getFullPathName ());
					return;
				    }name = this.parameterAsString (2);
				    if (!this.isSyntaxCheck) this.viewer.showUrl (name);
				    return;
				case 1766856708:
				    str = "defaultColorScheme";
				    break;
				case 1610612740:
				    str = "scaleAngstromsPerInch";
				    break;
				case 135270417:
				case 1052714:
				    if (this.isSyntaxCheck) return;
				    var modelIndex = this.viewer.getCurrentModelIndex ();
				    if (modelIndex < 0) this.errorStr (30, "show " + this.theToken.value);
				    msg = this.plot (this.statement);
				    len = this.statementLength;
				    break;
				case 1113200654:
				    if (!this.isSyntaxCheck) msg = this.getContext (false);
				    break;
				case 1073741888:
				    name = this.optParameterAsString (2);
				    if (name.length > 0) len = 3;
				    if (!this.isSyntaxCheck) value = this.viewer.getColorSchemeList (name);
				    break;
				case 1073742192:
				    if (!this.isSyntaxCheck) msg = this.viewer.getVariableList () + this.getContext (true);
				    break;
				case 536870926:
				    if (!this.isSyntaxCheck) msg = this.viewer.getTrajectoryInfo ();
				    break;
				case 553648148:
				    value = "" + this.commandHistoryLevelMax;
				    break;
				case 553648150:
				    value = "" + org.jmol.util.Logger.getLogLevel ();
				    break;
				case 603979824:
				    value = "" + this.viewer.getDebugScript ();
				    break;
				case 553648178:
				    msg = "set strandCountForStrands " + this.viewer.getStrandCount (12) + "; set strandCountForMeshRibbon " + this.viewer.getStrandCount (13);
				    break;
				case 536875070:
				    msg = this.viewer.showTimeout ((len = this.statementLength) == 2 ? null : this.parameterAsString (2));
				    break;
				case 536870918:
				    value = org.jmol.util.Escape.escapePt (this.viewer.getDefaultLattice ());
				    break;
				case 4126:
				    if (!this.isSyntaxCheck) msg = this.viewer.getMinimizationInfo ();
				    break;
				case 1611272194:
				    switch (this.viewer.getAxesMode ()) {
				    case org.jmol.constant.EnumAxesMode.UNITCELL:
					msg = "set axesUnitcell";
					break;
				    case org.jmol.constant.EnumAxesMode.BOUNDBOX:
					msg = "set axesWindow";
					break;
				    default:
					msg = "set axesMolecular";
				    }
				    break;
				case 1610612737:
				    msg = "set bondMode " + (this.viewer.getBondSelectionModeOr () ? "OR" : "AND");
				    break;
				case 1650071565:
				    if (!this.isSyntaxCheck) msg = "set strandCountForStrands " + this.viewer.getStrandCount (12) + "; set strandCountForMeshRibbon " + this.viewer.getStrandCount (13);
				    break;
				case 1612189718:
				    msg = "set hbondsBackbone " + this.viewer.getHbondsBackbone () + ";set hbondsSolid " + this.viewer.getHbondsSolid ();
				    break;
				case 1611141175:
				    if (!this.isSyntaxCheck) msg = this.viewer.getSpinState ();
				    break;
				case 1611141176:
				    msg = "set ssbondsBackbone " + this.viewer.getSsbondsBackbone ();
				    break;
				case 1610625028:
				case 1611141171:
				    msg = "selectionHalos " + (this.viewer.getSelectionHaloEnabled (false) ? "ON" : "OFF");
				    break;
				case 1613758470:
				    msg = "set selectHetero " + this.viewer.getRasmolSetting (tok);
				    break;
				case 1073741828:
				    msg = org.jmol.util.Escape.escapeAP (this.viewer.getAdditionalHydrogens (null, true, true, null));
				    break;
				case 1613758476:
				    msg = "set selectHydrogens " + this.viewer.getRasmolSetting (tok);
				    break;
				case 553648130:
				case 553648142:
				case 536870924:
				case 553648176:
				case 553648172:
				case 1073741995:
				    if (!this.isSyntaxCheck) msg = this.viewer.getSpecularState ();
				    break;
				case 4146:
				    if (!this.isSyntaxCheck) msg = this.viewer.listSavedStates ();
				    break;
				case 1614417948:
				    if (!this.isSyntaxCheck) msg = this.viewer.getUnitCellInfoText ();
				    break;
				case 1048582:
				    if ((len = this.statementLength) == 2) {
					if (!this.isSyntaxCheck) msg = this.viewer.getCoordinateState (this.viewer.getSelectionSet (false));
					break;
				    }var nameC = this.parameterAsString (2);
				    if (!this.isSyntaxCheck) msg = this.viewer.getSavedCoordinates (nameC);
				    break;
				case 1073742158:
				    if ((len = this.statementLength) == 2) {
					if (!this.isSyntaxCheck) msg = this.viewer.getStateInfo ();
					break;
				    }name = this.parameterAsString (2);
				    if (name.equals ("/") && (len = this.statementLength) == 4) {
					name = this.parameterAsString (3).toLowerCase ();
					if (!this.isSyntaxCheck) {
					    var info = org.jmol.util.TextFormat.split (this.viewer.getStateInfo (), '\n');
					    var sb =  new org.jmol.util.StringXBuilder ();
					    for (var i = 0; i < info.length; i++) if (info[i].toLowerCase ().indexOf (name) >= 0) sb.append (info[i]).appendC ('\n');

					    msg = sb.toString ();
					}break;
				    } else if (this.tokAt (2) == 1229984263 && (len = this.statementLength) == 4) {
					if (!this.isSyntaxCheck) msg = this.viewer.getEmbeddedFileState (this.parameterAsString (3));
					break;
				    }len = 3;
				    if (!this.isSyntaxCheck) msg = this.viewer.getSavedState (name);
				    break;
				case 1641025539:
				    if ((len = this.statementLength) == 2) {
					if (!this.isSyntaxCheck) msg = this.viewer.getProteinStructureState ();
					break;
				    }var shape = this.parameterAsString (2);
				    if (!this.isSyntaxCheck) msg = this.viewer.getSavedStructure (shape);
				    break;
				case 135270407:
				    var type = ((len = this.statementLength) == 3 ? this.parameterAsString (2) : null);
				    if (!this.isSyntaxCheck) {
					var data = (type == null ? this.$data : this.viewer.getData (type));
					msg = (data == null ? "no data" : org.jmol.util.Escape.encapsulateData (data[0], data[1], (data[3]).intValue ()));
				    }break;
				case 1073742152:
				    var info = null;
				    if ((len = this.statementLength) == 2) {
					if (!this.isSyntaxCheck) {
					    info = this.viewer.getSpaceGroupInfo (null);
					}} else {
					    var sg = this.parameterAsString (2);
					    if (!this.isSyntaxCheck) info = this.viewer.getSpaceGroupInfo (org.jmol.util.TextFormat.simpleReplace (sg, "''", "\""));
					}if (info != null) msg = "" + info.get ("spaceGroupInfo") + info.get ("symmetryInfo");
				    break;
				case 1048583:
				    len = 3;
				    msg = this.setObjectProperty ();
				    break;
				case 1679429641:
				    if (!this.isSyntaxCheck) {
					msg = this.viewer.getBoundBoxCommand (true);
				    }break;
				case 12289:
				    if (!this.isSyntaxCheck) msg = "center " + org.jmol.util.Escape.escapePt (this.viewer.getRotationCenter ());
				    break;
				case 135176:
				    if (!this.isSyntaxCheck) msg = this.getShapeProperty (22, "command");
				    break;
				case 1229984263:
				    if (this.statementLength == 2) {
					if (!this.isSyntaxCheck) msg = this.viewer.getCurrentFileAsString ();
					if (msg == null) msg = "<unavailable>";
					break;
				    }len = 3;
				    value = this.parameterAsString (2);
				    if (!this.isSyntaxCheck) msg = this.viewer.getFileAsString (value);
				    break;
				case 4115:
				    if (this.tokAt (2) == 1048579 && (len = 3) > 0) msg = this.viewer.getModelFileInfoAll ();
				    else msg = this.viewer.getModelFileInfo ();
				    break;
				case 1610616855:
				    var n = ((len = this.statementLength) == 2 ? 2147483647 : this.intParameter (2));
				    if (n < 1) this.error (22);
				    if (!this.isSyntaxCheck) {
					this.viewer.removeCommand ();
					msg = this.viewer.getSetHistory (n);
				    }break;
				case 135180:
				    if (!this.isSyntaxCheck) msg = this.getShapeProperty (23, "jvxlDataXml");
				    break;
				case 1183762:
				    if (this.optParameterAsString (2).equalsIgnoreCase ("list")) {
					msg = this.viewer.getMoInfo (-1);
					len = 3;
				    } else {
					var ptMO = ((len = this.statementLength) == 2 ? -2147483648 : this.intParameter (2));
					if (!this.isSyntaxCheck) msg = this.getMoJvxl (ptMO);
				    }break;
				case 1095766028:
				    if (!this.isSyntaxCheck) msg = this.viewer.getModelInfoAsString ();
				    break;
				case 537006096:
				    if (!this.isSyntaxCheck) msg = this.viewer.getMeasurementInfoAsString ();
				    break;
				case 1073742178:
				case 1073742132:
				case 4130:
				    if (!this.isSyntaxCheck) msg = this.viewer.getOrientationText (tok, null);
				    break;
				case 1073742077:
				    len = 2;
				    if (this.statementLength > 3) break;
				    switch (tok = this.tokAt (2)) {
				    case 1073742178:
				    case 1073742132:
				    case 4130:
				    case 0:
					if (!this.isSyntaxCheck) msg = this.viewer.getOrientationText (tok, null);
					break;
				    default:
					name = this.optParameterAsString (2);
					msg = this.viewer.getOrientationText (0, name);
				    }
				    len = this.statementLength;
				    break;
				case 1073742088:
				    if (!this.isSyntaxCheck) msg = this.viewer.getPDBHeader ();
				    break;
				case 1073742102:
				    this.pointGroup ();
				    return;
				case 1089470478:
				    if (!this.isSyntaxCheck) msg = this.viewer.getSymmetryInfoAsString ();
				    break;
				case 1073742176:
				    if (!this.isSyntaxCheck) msg = "transform:\n" + this.viewer.getTransformText ();
				    break;
				case 4168:
				    msg = "zoom " + (this.viewer.getZoomEnabled () ? ("" + this.viewer.getZoomSetting ()) : "off");
				    break;
				case 1611272202:
				    msg = (this.viewer.getShowFrank () ? "frank ON" : "frank OFF");
				    break;
				case 1666189314:
				    str = "solventProbeRadius";
				    break;
				case 1073741864:
				case 1087373316:
				case 1087373320:
				case 1073742120:
				case 1114638350:
				case 1087373318:
				case 1141899265:
				case 1073741982:
				case 1678770178:
				    msg = this.viewer.getChimeInfo (tok);
				    break;
				case 537022465:
				case 1610612738:
				case 1716520973:
				case 20482:
				case 1613758488:
				    value = "?";
				    break;
				case 1073741824:
				    if (str.equalsIgnoreCase ("fileHeader")) {
					if (!this.isSyntaxCheck) msg = this.viewer.getPDBHeader ();
				    } else if (str.equalsIgnoreCase ("menu")) {
					if (!this.isSyntaxCheck) value = this.viewer.getMenu ("");
				    } else if (str.equalsIgnoreCase ("mouse")) {
					var qualifiers = ((len = this.statementLength) == 2 ? null : this.parameterAsString (2));
					if (!this.isSyntaxCheck) msg = this.viewer.getBindingInfo (qualifiers);
				    }break;
				}
				this.checkLength (len);
				if (this.isSyntaxCheck) return;
				if (msg != null) this.showString (msg);
				else if (value != null) this.showString (str + " = " + value);
				else if (str != null) {
				    if (str.indexOf (" ") >= 0) this.showString (str);
				    else this.showString (str + " = " + this.getParameterEscaped (str));
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getIsosurfaceJvxl", 
			    ($fz = function (asMesh, iShape) {
				if (this.isSyntaxCheck) return "";
				return this.getShapeProperty (iShape, asMesh ? "jvxlMeshX" : "jvxlDataXml");
			    }, $fz.isPrivate = true, $fz), "~B,~N");
	Clazz.defineMethod (c$, "getMoJvxl", 
			    ($fz = function (ptMO) {
				this.shapeManager.loadShape (26);
				var modelIndex = this.viewer.getCurrentModelIndex ();
				if (modelIndex < 0) this.errorStr (30, "MO isosurfaces");
				var moData = this.viewer.getModelAuxiliaryInfoValue (modelIndex, "moData");
				if (moData == null) this.error (27);
				var n = this.getShapeProperty (26, "moNumber");
				if (n == null || n.intValue () == 0) {
				    this.setShapeProperty (26, "init", Integer.$valueOf (modelIndex));
				} else if (ptMO == 2147483647) {
				}this.setShapeProperty (26, "moData", moData);
				return this.getShapePropertyIndex (26, "showMO", ptMO);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "draw", 
			    ($fz = function () {
				this.shapeManager.loadShape (22);
				switch (this.tokAt (1)) {
				case 1073742001:
				    if (this.listIsosurface (22)) return;
				    break;
				case 1073742102:
				    this.pointGroup ();
				    return;
				case 137363468:
				case 135270417:
				case 1052714:
				    this.plot (this.statement);
				    return;
				}
				var havePoints = false;
				var isInitialized = false;
				var isSavedState = false;
				var isTranslucent = false;
				var isIntersect = false;
				var isFrame = false;
				var plane;
				var tokIntersect = 0;
				var translucentLevel = 3.4028235E38;
				var colorArgb = -2147483648;
				var intScale = 0;
				var swidth = "";
				var iptDisplayProperty = 0;
				var center = null;
				var thisId = this.initIsosurface (22);
				var idSeen = (thisId != null);
				var isWild = (idSeen && this.getShapeProperty (22, "ID") == null);
				var connections = null;
				var iConnect = 0;
				for (var i = this.iToken; i < this.statementLength; ++i) {
				    var propertyName = null;
				    var propertyValue = null;
				    switch (this.getToken (i).tok) {
				    case 1614417948:
				    case 1679429641:
					if (this.isSyntaxCheck) break;
					var vp = this.viewer.getPlaneIntersection (this.theTok, null, intScale / 100, 0);
					intScale = 0;
					propertyName = "polygon";
					propertyValue = vp;
					havePoints = true;
					break;
				    case 4106:
					connections =  Clazz.newIntArray (4, 0);
					iConnect = 4;
					var farray = this.floatParameterSet (++i, 4, 4);
					i = this.iToken;
					for (var j = 0; j < 4; j++) connections[j] = Clazz.floatToInt (farray[j]);

					havePoints = true;
					break;
				    case 1678770178:
				    case 1141899265:
					if (connections == null || iConnect > (this.theTok == 1095761924 ? 2 : 3)) {
					    iConnect = 0;
					    connections = [-1, -1, -1, -1];
					}connections[iConnect++] = this.atomExpressionAt (++i).nextSetBit (0);
					i = this.iToken;
					connections[iConnect++] = (this.theTok == 1678770178 ? this.atomExpressionAt (++i).nextSetBit (0) : -1);
					i = this.iToken;
					havePoints = true;
					break;
				    case 554176565:
					switch (this.getToken (++i).tok) {
					case 1048583:
					    propertyName = "slab";
					    propertyValue = this.objectNameParameter (++i);
					    i = this.iToken;
					    havePoints = true;
					    break;
					default:
					    this.error (22);
					}
					break;
				    case 135267842:
					switch (this.getToken (++i).tok) {
					case 1614417948:
					case 1679429641:
					    tokIntersect = this.theTok;
					    isIntersect = true;
					    continue;
					case 1048583:
					    propertyName = "intersect";
					    propertyValue = this.objectNameParameter (++i);
					    i = this.iToken;
					    isIntersect = true;
					    havePoints = true;
					    break;
					default:
					    this.error (22);
					}
					break;
				    case 1073742106:
					propertyName = "polygon";
					havePoints = true;
					var v =  new java.util.ArrayList ();
					var nVertices = 0;
					var nTriangles = 0;
					var points = null;
					var vpolygons = null;
					if (this.isArrayParameter (++i)) {
					    points = this.getPointArray (i, -1);
					    nVertices = points.length;
					} else {
					    nVertices = Math.max (0, this.intParameter (i));
					    points =  new Array (nVertices);
					    for (var j = 0; j < nVertices; j++) points[j] = this.centerParameter (++this.iToken);

					}switch (this.getToken (++this.iToken).tok) {
					case 11:
					case 12:
					    var sv = org.jmol.script.ScriptVariable.newScriptVariableToken (this.theToken);
					    sv.toArray ();
					    vpolygons = sv.getList ();
					    nTriangles = vpolygons.size ();
					    break;
					case 7:
					    vpolygons = (this.theToken).getList ();
					    nTriangles = vpolygons.size ();
					    break;
					default:
					    nTriangles = Math.max (0, this.intParameter (this.iToken));
					}
					var polygons = org.jmol.util.ArrayUtil.newInt2 (nTriangles);
					for (var j = 0; j < nTriangles; j++) {
					    var f = (vpolygons == null ? this.floatParameterSet (++this.iToken, 3, 4) : org.jmol.script.ScriptVariable.flistValue (vpolygons.get (j), 0));
					    if (f.length < 3 || f.length > 4) this.error (22);
					    polygons[j] = [Clazz.floatToInt (f[0]), Clazz.floatToInt (f[1]), Clazz.floatToInt (f[2]), (f.length == 3 ? 7 : Clazz.floatToInt (f[3]))];
					}
					if (nVertices > 0) {
					    v.add (points);
					    v.add (polygons);
					} else {
					    v = null;
					}propertyValue = v;
					i = this.iToken;
					break;
				    case 1297090050:
					var xyz = null;
					var iSym = 0;
					plane = null;
					var target = null;
					switch (this.tokAt (++i)) {
					case 4:
					    xyz = this.stringParameter (i);
					    break;
					case 12:
					    xyz = org.jmol.script.ScriptVariable.sValue (this.getToken (i));
					    break;
					case 2:
					default:
					    if (!this.isCenterParameter (i)) iSym = this.intParameter (i++);
					    if (this.isCenterParameter (i)) center = this.centerParameter (i);
					    if (this.isCenterParameter (this.iToken + 1)) target = this.centerParameter (++this.iToken);
					    if (this.isSyntaxCheck) return;
					    i = this.iToken;
					}
					var bsAtoms = null;
					if (center == null && i + 1 < this.statementLength) {
					    center = this.centerParameter (++i);
					    bsAtoms = (this.tokAt (i) == 10 || this.tokAt (i) == 1048577 ? this.atomExpressionAt (i) : null);
					    i = this.iToken + 1;
					}this.checkLast (this.iToken);
					if (!this.isSyntaxCheck) this.runScript (this.viewer.getSymmetryInfo (bsAtoms, xyz, iSym, center, target, thisId, 135176));
					return;
				    case 4115:
					isFrame = true;
					continue;
				    case 1048586:
				    case 9:
				    case 8:
					if (this.theTok == 9 || !this.isPoint3f (i)) {
					    propertyValue = this.getPoint4f (i);
					    if (isFrame) {
						this.checkLast (this.iToken);
						if (!this.isSyntaxCheck) this.runScript ((org.jmol.util.Quaternion.newP4 (propertyValue)).draw ((thisId == null ? "frame" : thisId), " " + swidth, (center == null ?  new org.jmol.util.Point3f () : center), intScale / 100));
						return;
					    }propertyName = "planedef";
					} else {
					    propertyValue = center = this.getPoint3f (i, true);
					    propertyName = "coord";
					}i = this.iToken;
					havePoints = true;
					break;
				    case 135267841:
				    case 135266319:
					if (!havePoints && !isIntersect && tokIntersect == 0 && this.theTok != 135267841) {
					    propertyName = "plane";
					    break;
					}if (this.theTok == 135266319) {
					    plane = this.planeParameter (++i);
					} else {
					    plane = this.hklParameter (++i);
					}i = this.iToken;
					if (tokIntersect != 0) {
					    if (this.isSyntaxCheck) break;
					    var vpc = this.viewer.getPlaneIntersection (tokIntersect, plane, intScale / 100, 0);
					    intScale = 0;
					    propertyName = "polygon";
					    propertyValue = vpc;
					} else {
					    propertyValue = plane;
					    propertyName = "planedef";
					}havePoints = true;
					break;
				    case 1073742000:
					propertyName = "lineData";
					propertyValue = this.floatParameterSet (++i, 0, 2147483647);
					i = this.iToken;
					havePoints = true;
					break;
				    case 10:
				    case 1048577:
					propertyName = "atomSet";
					propertyValue = this.atomExpressionAt (i);
					if (isFrame) center = this.centerParameter (i);
					i = this.iToken;
					havePoints = true;
					break;
				    case 7:
					propertyName = "modelBasedPoints";
					propertyValue = org.jmol.script.ScriptVariable.listValue (this.theToken);
					havePoints = true;
					break;
				    case 1073742195:
				    case 269484080:
					break;
				    case 269484096:
					propertyValue = this.xypParameter (i);
					if (propertyValue != null) {
					    i = this.iToken;
					    propertyName = "coord";
					    havePoints = true;
					    break;
					}if (isSavedState) this.error (22);
					isSavedState = true;
					break;
				    case 269484097:
					if (!isSavedState) this.error (22);
					isSavedState = false;
					break;
				    case 1141899269:
					propertyName = "reverse";
					break;
				    case 4:
					propertyValue = this.stringParameter (i);
					propertyName = "title";
					break;
				    case 135198:
					propertyName = "vector";
					break;
				    case 1141899267:
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					propertyName = "length";
					break;
				    case 3:
					propertyValue = Float.$valueOf (this.floatParameter (i));
					propertyName = "length";
					break;
				    case 1095761933:
					propertyName = "modelIndex";
					propertyValue = Integer.$valueOf (this.intParameter (++i));
					break;
				    case 2:
					if (isSavedState) {
					    propertyName = "modelIndex";
					    propertyValue = Integer.$valueOf (this.intParameter (i));
					} else {
					    intScale = this.intParameter (i);
					}break;
				    case 1073742138:
					if (++i >= this.statementLength) this.error (34);
					switch (this.getToken (i).tok) {
					case 2:
					    intScale = this.intParameter (i);
					    continue;
					case 3:
					    intScale = Math.round (this.floatParameter (i) * 100);
					    continue;
					}
					this.error (34);
					break;
				    case 1074790550:
					thisId = this.setShapeId (22, ++i, idSeen);
					isWild = (this.getShapeProperty (22, "ID") == null);
					i = this.iToken;
					break;
				    case 1073742028:
					propertyName = "fixed";
					propertyValue = Boolean.FALSE;
					break;
				    case 1060869:
					propertyName = "fixed";
					propertyValue = Boolean.TRUE;
					break;
				    case 1073742066:
					var pt = this.getPoint3f (++i, true);
					i = this.iToken;
					propertyName = "offset";
					propertyValue = pt;
					break;
				    case 1073741906:
					propertyName = "crossed";
					break;
				    case 1073742196:
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					propertyName = "width";
					swidth = propertyName + " " + propertyValue;
					break;
				    case 1073741998:
					propertyName = "line";
					propertyValue = Boolean.TRUE;
					break;
				    case 1073741908:
					propertyName = "curve";
					break;
				    case 1074790416:
					propertyName = "arc";
					break;
				    case 1073741846:
					propertyName = "arrow";
					break;
				    case 1073741880:
					propertyName = "circle";
					break;
				    case 1073741912:
					propertyName = "cylinder";
					break;
				    case 1073742194:
					propertyName = "vertices";
					break;
				    case 1073742048:
					propertyName = "nohead";
					break;
				    case 1073741861:
					propertyName = "isbarb";
					break;
				    case 1073742130:
					propertyName = "rotate45";
					break;
				    case 1073742092:
					propertyName = "perp";
					break;
				    case 1666189314:
				    case 1073741916:
					var isRadius = (this.theTok == 1666189314);
					var f = this.floatParameter (++i);
					if (isRadius) f *= 2;
					propertyValue = Float.$valueOf (f);
					propertyName = (isRadius || this.tokAt (i) == 3 ? "width" : "diameter");
					swidth = propertyName + (this.tokAt (i) == 3 ? " " + f : " " + (Clazz.floatToInt (f)));
					break;
				    case 1048583:
					if ((this.tokAt (i + 2) == 269484096 || isFrame)) {
					    var pto = center = this.centerParameter (i);
					    i = this.iToken;
					    propertyName = "coord";
					    propertyValue = pto;
					    havePoints = true;
					    break;
					}propertyValue = this.objectNameParameter (++i);
					propertyName = "identifier";
					havePoints = true;
					break;
				    case 1766856708:
				    case 1073742180:
				    case 1073742074:
					if (this.theTok != 1766856708) --i;
					if (this.tokAt (i + 1) == 1073742180) {
					    i++;
					    isTranslucent = true;
					    if (this.isFloatParameter (i + 1)) translucentLevel = this.getTranslucentLevel (++i);
					} else if (this.tokAt (i + 1) == 1073742074) {
					    i++;
					    isTranslucent = true;
					    translucentLevel = 0;
					}if (this.isColorParam (i + 1)) {
					    colorArgb = this.getArgbParam (++i);
					    i = this.iToken;
					} else if (!isTranslucent) {
					    this.error (22);
					}idSeen = true;
					continue;
				    default:
					if (!this.setMeshDisplayProperty (22, 0, this.theTok)) {
					    if (this.theTok == 269484209 || org.jmol.script.Token.tokAttr (this.theTok, 1073741824)) {
						thisId = this.setShapeId (22, i, idSeen);
						i = this.iToken;
						break;
					    }this.error (22);
					}if (iptDisplayProperty == 0) iptDisplayProperty = i;
					i = this.iToken;
					continue;
				    }
				    idSeen = (this.theTok != 12291);
				    if (havePoints && !isInitialized && !isFrame) {
					this.setShapeProperty (22, "points", Integer.$valueOf (intScale));
					isInitialized = true;
					intScale = 0;
				    }if (havePoints && isWild) this.error (22);
				    if (propertyName != null) this.setShapeProperty (22, propertyName, propertyValue);
				}
				if (havePoints) {
				    this.setShapeProperty (22, "set", connections);
				}if (colorArgb != -2147483648) this.setShapeProperty (22, "color", Integer.$valueOf (colorArgb));
				if (isTranslucent) this.setShapeTranslucency (22, "", "translucent", translucentLevel, null);
				if (intScale != 0) {
				    this.setShapeProperty (22, "scale", Integer.$valueOf (intScale));
				}if (iptDisplayProperty > 0) {
				    if (!this.setMeshDisplayProperty (22, iptDisplayProperty, 0)) this.error (22);
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "polyhedra", 
			    ($fz = function () {
				var needsGenerating = false;
				var onOffDelete = false;
				var typeSeen = false;
				var edgeParameterSeen = false;
				var isDesignParameter = false;
				var lighting = 0;
				var nAtomSets = 0;
				this.shapeManager.loadShape (21);
				this.setShapeProperty (21, "init", null);
				var setPropertyName = "centers";
				var decimalPropertyName = "radius_";
				var isTranslucent = false;
				var translucentLevel = 3.4028235E38;
				var color = -2147483648;
				for (var i = 1; i < this.statementLength; ++i) {
				    var propertyName = null;
				    var propertyValue = null;
				    switch (this.getToken (i).tok) {
				    case 12291:
				    case 1048589:
				    case 1048588:
					if (i + 1 != this.statementLength || needsGenerating || nAtomSets > 1 || nAtomSets == 0 && "to".equals (setPropertyName)) this.error (18);
					propertyName = (this.theTok == 1048588 ? "off" : this.theTok == 1048589 ? "on" : "delete");
					onOffDelete = true;
					break;
				    case 269484436:
				    case 269484080:
					continue;
				    case 1678770178:
					if (nAtomSets > 0) this.error (23);
					needsGenerating = true;
					propertyName = "bonds";
					break;
				    case 1666189314:
					decimalPropertyName = "radius";
					continue;
				    case 2:
				    case 3:
					if (nAtomSets > 0 && !isDesignParameter) this.error (23);
					if (this.theTok == 2) {
					    if (decimalPropertyName === "radius_") {
						propertyName = "nVertices";
						propertyValue = Integer.$valueOf (this.intParameter (i));
						needsGenerating = true;
						break;
					    }}propertyName = (decimalPropertyName === "radius_" ? "radius" : decimalPropertyName);
					propertyValue = Float.$valueOf (this.floatParameter (i));
					decimalPropertyName = "radius_";
					isDesignParameter = false;
					needsGenerating = true;
					break;
				    case 10:
				    case 1048577:
					if (typeSeen) this.error (23);
					if (++nAtomSets > 2) this.error (2);
					if ("to".equals (setPropertyName)) needsGenerating = true;
					propertyName = setPropertyName;
					setPropertyName = "to";
					propertyValue = this.atomExpressionAt (i);
					i = this.iToken;
					break;
				    case 1074790746:
					if (nAtomSets > 1) this.error (23);
					if (this.tokAt (i + 1) == 10 || this.tokAt (i + 1) == 1048577 && !needsGenerating) {
					    propertyName = "toBitSet";
					    propertyValue = this.atomExpressionAt (++i);
					    i = this.iToken;
					    needsGenerating = true;
					    break;
					} else if (!needsGenerating) {
					    this.error (19);
					}setPropertyName = "to";
					continue;
				    case 1073741937:
					if (!needsGenerating) this.error (19);
					decimalPropertyName = "faceCenterOffset";
					isDesignParameter = true;
					continue;
				    case 1073741924:
					if (!needsGenerating) this.error (19);
					decimalPropertyName = "distanceFactor";
					isDesignParameter = true;
					continue;
				    case 1766856708:
				    case 1073742180:
				    case 1073742074:
					isTranslucent = false;
					if (this.theTok != 1766856708) --i;
					if (this.tokAt (i + 1) == 1073742180) {
					    i++;
					    isTranslucent = true;
					    if (this.isFloatParameter (i + 1)) translucentLevel = this.getTranslucentLevel (++i);
					} else if (this.tokAt (i + 1) == 1073742074) {
					    i++;
					    isTranslucent = true;
					    translucentLevel = 0;
					}if (this.isColorParam (i + 1)) {
					    color = this.getArgbParam (i);
					    i = this.iToken;
					} else if (!isTranslucent) this.error (22);
					continue;
				    case 1073741886:
				    case 1073741948:
					propertyName = "collapsed";
					propertyValue = (this.theTok == 1073741886 ? Boolean.TRUE : Boolean.FALSE);
					if (typeSeen) this.error (18);
					typeSeen = true;
					break;
				    case 1073742044:
				    case 1073741934:
				    case 1073741956:
					if (edgeParameterSeen) this.error (18);
					propertyName = this.parameterAsString (i);
					edgeParameterSeen = true;
					break;
				    case 1073741964:
					lighting = this.theTok;
					continue;
				    default:
					if (this.isColorParam (i)) {
					    color = this.getArgbParam (i);
					    i = this.iToken;
					    continue;
					}this.error (22);
				    }
				    this.setShapeProperty (21, propertyName, propertyValue);
				    if (onOffDelete) return;
				}
				if (!needsGenerating && !typeSeen && !edgeParameterSeen && lighting == 0) this.error (19);
				if (needsGenerating) this.setShapeProperty (21, "generate", null);
				if (color != -2147483648) this.setShapeProperty (21, "colorThis", Integer.$valueOf (color));
				if (isTranslucent) this.setShapeTranslucency (21, "", "translucentThis", translucentLevel, null);
				if (lighting != 0) this.setShapeProperty (21, "token", Integer.$valueOf (lighting));
				this.setShapeProperty (21, "init", null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "contact", 
			    ($fz = function () {
				this.shapeManager.loadShape (24);
				if (this.tokAt (1) == 1073742001 && this.listIsosurface (24)) return;
				var iptDisplayProperty = 0;
				this.iToken = 1;
				var thisId = this.initIsosurface (24);
				var idSeen = (thisId != null);
				var isWild = (idSeen && this.getShapeProperty (24, "ID") == null);
				var bsA = null;
				var bsB = null;
				var bs = null;
				var rd = null;
				var params = null;
				var colorDensity = false;
				var sbCommand =  new org.jmol.util.StringXBuilder ();
				var minSet = 2147483647;
				var displayType = 135266319;
				var contactType = 0;
				var distance = NaN;
				var saProbeRadius = NaN;
				var localOnly = true;
				var intramolecular = null;
				var userSlabObject = null;
				var colorpt = 0;
				var colorByType = false;
				var tok;
				var okNoAtoms = (this.iToken > 1);
				for (var i = this.iToken; i < this.statementLength; ++i) {
				    switch (tok = this.getToken (i).tok) {
				    default:
					okNoAtoms = true;
					if (!this.setMeshDisplayProperty (24, 0, this.theTok)) {
					    if (this.theTok != 269484209 && !org.jmol.script.Token.tokAttr (this.theTok, 1073741824)) this.error (22);
					    thisId = this.setShapeId (24, i, idSeen);
					    i = this.iToken;
					    break;
					}if (iptDisplayProperty == 0) iptDisplayProperty = i;
					i = this.iToken;
					continue;
				    case 1074790550:
					okNoAtoms = true;
					this.setShapeId (24, ++i, idSeen);
					isWild = (this.getShapeProperty (24, "ID") == null);
					i = this.iToken;
					break;
				    case 1766856708:
					switch (this.tokAt (i + 1)) {
					case 1073741914:
					    tok = 0;
					    colorDensity = true;
					    sbCommand.append (" color density");
					    i++;
					    break;
					case 1141899272:
					    tok = 0;
					    colorByType = true;
					    sbCommand.append (" color type");
					    i++;
					    break;
					}
					if (tok == 0) break;
				    case 1073742180:
				    case 1073742074:
					okNoAtoms = true;
					if (colorpt == 0) colorpt = i;
					this.setMeshDisplayProperty (24, i, this.theTok);
					i = this.iToken;
					break;
				    case 554176565:
					okNoAtoms = true;
					userSlabObject = this.getCapSlabObject (i, false);
					this.setShapeProperty (24, "slab", userSlabObject);
					i = this.iToken;
					break;
				    case 1073741914:
					colorDensity = true;
					sbCommand.append (" density");
					if (this.isFloatParameter (i + 1)) {
					    if (params == null) params =  Clazz.newFloatArray (1, 0);
					    params[0] = -Math.abs (this.floatParameter (++i));
					    sbCommand.append (" " + -params[0]);
					}break;
				    case 1073742122:
					var resolution = this.floatParameter (++i);
					if (resolution > 0) {
					    sbCommand.append (" resolution ").appendF (resolution);
					    this.setShapeProperty (24, "resolution", Float.$valueOf (resolution));
					}break;
				    case 135266324:
				    case 1276118018:
					distance = this.floatParameter (++i);
					sbCommand.append (" within ").appendF (distance);
					break;
				    case 269484193:
				    case 2:
				    case 3:
					rd = this.encodeRadiusParameter (i, false, false);
					sbCommand.append (" ").appendO (rd);
					i = this.iToken;
					break;
				    case 1073741990:
				    case 1073741989:
					intramolecular = (tok == 1073741989 ? Boolean.TRUE : Boolean.FALSE);
					sbCommand.append (" ").appendO (this.theToken.value);
					break;
				    case 1073742020:
					minSet = this.intParameter (++i);
					break;
				    case 1612189718:
				    case 1073741881:
				    case 1649412112:
					contactType = tok;
					sbCommand.append (" ").appendO (this.theToken.value);
					break;
				    case 1073742136:
					if (this.isFloatParameter (i + 1)) saProbeRadius = this.floatParameter (++i);
				    case 1074790451:
				    case 1073742036:
				    case 3145756:
					localOnly = false;
				    case 1276117510:
				    case 1073741961:
				    case 135266319:
				    case 4106:
					displayType = tok;
					sbCommand.append (" ").appendO (this.theToken.value);
					if (tok == 1073742136) sbCommand.append (" ").appendF (saProbeRadius);
					break;
				    case 1073742083:
					params = this.floatParameterSet (++i, 1, 10);
					i = this.iToken;
					break;
				    case 10:
				    case 1048577:
					if (isWild || bsB != null) this.error (22);
					bs = org.jmol.util.BitSetUtil.copy (this.atomExpressionAt (i));
					i = this.iToken;
					if (bsA == null) bsA = bs;
					else bsB = bs;
					sbCommand.append (" ").append (org.jmol.util.Escape.escape (bs));
					break;
				    }
				    idSeen = (this.theTok != 12291);
				}
				if (!okNoAtoms && bsA == null) this.error (13);
				if (this.isSyntaxCheck) return;
				if (bsA != null) {
				    var rd1 = (rd == null ?  new org.jmol.atomdata.RadiusData (null, 0.26, org.jmol.atomdata.RadiusData.EnumType.OFFSET, org.jmol.constant.EnumVdw.AUTO) : rd);
				    if (displayType == 1073742036 && bsB == null && intramolecular != null && intramolecular.booleanValue ()) bsB = bsA;
				    else bsB = this.setContactBitSets (bsA, bsB, localOnly, distance, rd1, true);
				    switch (displayType) {
				    case 1074790451:
				    case 1073742136:
					var bsSolvent = this.lookupIdentifierValue ("solvent");
					bsA.andNot (bsSolvent);
					bsB.andNot (bsSolvent);
					bsB.andNot (bsA);
					break;
				    case 3145756:
					bsB.andNot (bsA);
					break;
				    case 1073742036:
					if (minSet == 2147483647) minSet = 100;
					this.setShapeProperty (24, "minset", Integer.$valueOf (minSet));
					sbCommand.append (" minSet ").appendI (minSet);
					if (params == null) params = [0.5, 2];
				    }
				    if (intramolecular != null) {
					params = (params == null ?  Clazz.newFloatArray (2, 0) : org.jmol.util.ArrayUtil.ensureLengthA (params, 2));
					params[1] = (intramolecular.booleanValue () ? 1 : 2);
				    }if (params != null) sbCommand.append (" parameters ").append (org.jmol.util.Escape.escape (params));
				    this.setShapeProperty (24, "set", [Integer.$valueOf (contactType), Integer.$valueOf (displayType), Boolean.$valueOf (colorDensity), Boolean.$valueOf (colorByType), bsA, bsB, rd, Float.$valueOf (saProbeRadius), params, sbCommand.toString ()]);
				    if (colorpt > 0) this.setMeshDisplayProperty (24, colorpt, 0);
				}if (iptDisplayProperty > 0) {
				    if (!this.setMeshDisplayProperty (24, iptDisplayProperty, 0)) this.error (22);
				}if (userSlabObject != null && bsA != null) this.setShapeProperty (24, "slab", userSlabObject);
				if (bsA != null && (displayType == 1073742036 || localOnly)) {
				    var volume = this.getShapeProperty (24, "volume");
				    if (org.jmol.util.Escape.isAD (volume)) {
					var vs = volume;
					var v = 0;
					for (var i = 0; i < vs.length; i++) v += Math.abs (vs[i]);

					volume = Float.$valueOf (v);
				    }var nsets = (this.getShapeProperty (24, "nSets")).intValue ();
				    if (colorDensity || displayType != 1276117510) {
					this.showString ((nsets == 0 ? "" : nsets + " contacts with ") + "net volume " + volume + " A^3");
				    }}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setContactBitSets", 
			    function (bsA, bsB, localOnly, distance, rd, warnMultiModel) {
				var withinAllModels;
				var bs;
				if (bsB == null) {
				    bsB = org.jmol.util.BitSetUtil.setAll (this.viewer.getAtomCount ());
				    org.jmol.util.BitSetUtil.andNot (bsB, this.viewer.getDeletedAtoms ());
				    bsB.andNot (bsA);
				    withinAllModels = false;
				} else {
				    bs = org.jmol.util.BitSetUtil.copy (bsA);
				    bs.or (bsB);
				    var nModels = this.viewer.getModelBitSet (bs, false).cardinality ();
				    withinAllModels = (nModels > 1);
				    if (warnMultiModel && nModels > 1 && !this.tQuiet) this.showString (org.jmol.i18n.GT._ ("Note: More than one model is involved in this contact!"));
				}if (!bsA.equals (bsB)) {
				    var setBfirst = (!localOnly || bsA.cardinality () < bsB.cardinality ());
				    if (setBfirst) {
					bs = this.viewer.getAtomsWithinRadius (distance, bsA, withinAllModels, (Float.isNaN (distance) ? rd : null));
					bsB.and (bs);
				    }if (localOnly) {
					bs = this.viewer.getAtomsWithinRadius (distance, bsB, withinAllModels, (Float.isNaN (distance) ? rd : null));
					bsA.and (bs);
					if (!setBfirst) {
					    bs = this.viewer.getAtomsWithinRadius (distance, bsA, withinAllModels, (Float.isNaN (distance) ? rd : null));
					    bsB.and (bs);
					}bs = org.jmol.util.BitSetUtil.copy (bsB);
					bs.and (bsA);
					if (bs.equals (bsA)) bsB.andNot (bsA);
					else if (bs.equals (bsB)) bsA.andNot (bsB);
				    }}return bsB;
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~N,org.jmol.atomdata.RadiusData,~B");
	Clazz.defineMethod (c$, "lcaoCartoon", 
			    ($fz = function () {
				this.shapeManager.loadShape (25);
				if (this.tokAt (1) == 1073742001 && this.listIsosurface (25)) return;
				this.setShapeProperty (25, "init", this.fullCommand);
				if (this.statementLength == 1) {
				    this.setShapeProperty (25, "lcaoID", null);
				    return;
				}var idSeen = false;
				var translucency = null;
				for (var i = 1; i < this.statementLength; i++) {
				    var propertyName = null;
				    var propertyValue = null;
				    switch (this.getToken (i).tok) {
				    case 1074790451:
				    case 554176565:
					propertyName = this.theToken.value;
					if (this.tokAt (i + 1) == 1048588) this.iToken = i + 1;
					propertyValue = this.getCapSlabObject (i, true);
					i = this.iToken;
					break;
				    case 12289:
					this.isosurface (25);
					return;
				    case 528432:
					var degx = 0;
					var degy = 0;
					var degz = 0;
					switch (this.getToken (++i).tok) {
					case 1112541205:
					    degx = this.floatParameter (++i) * 0.017453292;
					    break;
					case 1112541206:
					    degy = this.floatParameter (++i) * 0.017453292;
					    break;
					case 1112541207:
					    degz = this.floatParameter (++i) * 0.017453292;
					    break;
					default:
					    this.error (22);
					}
					propertyName = "rotationAxis";
					propertyValue = org.jmol.util.Vector3f.new3 (degx, degy, degz);
					break;
				    case 1048589:
				    case 1610625028:
				    case 3145768:
					propertyName = "on";
					break;
				    case 1048588:
				    case 12294:
				    case 3145770:
					propertyName = "off";
					break;
				    case 12291:
					propertyName = "delete";
					break;
				    case 10:
				    case 1048577:
					propertyName = "select";
					propertyValue = this.atomExpressionAt (i);
					i = this.iToken;
					break;
				    case 1766856708:
					translucency = this.setColorOptions (null, i + 1, 25, -2);
					if (translucency != null) this.setShapeProperty (25, "settranslucency", translucency);
					i = this.iToken;
					idSeen = true;
					continue;
				    case 1073742180:
				    case 1073742074:
					this.setMeshDisplayProperty (25, i, this.theTok);
					i = this.iToken;
					idSeen = true;
					continue;
				    case 1113200651:
				    case 4:
					propertyValue = this.parameterAsString (i).toLowerCase ();
					if (propertyValue.equals ("spacefill")) propertyValue = "cpk";
					propertyName = "create";
					if (this.optParameterAsString (i + 1).equalsIgnoreCase ("molecular")) {
					    i++;
					    propertyName = "molecular";
					}break;
				    case 135280132:
					if (this.tokAt (i + 1) == 10 || this.tokAt (i + 1) == 1048577) {
					    propertyName = "select";
					    propertyValue = this.atomExpressionAt (i + 1);
					    i = this.iToken;
					} else {
					    propertyName = "selectType";
					    propertyValue = this.parameterAsString (++i);
					    if (propertyValue.equals ("spacefill")) propertyValue = "cpk";
					}break;
				    case 1073742138:
					propertyName = "scale";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					break;
				    case 1073742004:
				    case 1073742006:
					propertyName = "lonePair";
					break;
				    case 1073742112:
				    case 1073742110:
					propertyName = "radical";
					break;
				    case 1073742030:
					propertyName = "molecular";
					break;
				    case 1073741904:
					propertyValue = this.parameterAsString (++i);
					propertyName = "create";
					if (this.optParameterAsString (i + 1).equalsIgnoreCase ("molecular")) {
					    i++;
					    propertyName = "molecular";
					}break;
				    case 1074790550:
					propertyValue = this.getShapeNameParameter (++i);
					i = this.iToken;
					if (idSeen) this.error (22);
					propertyName = "lcaoID";
					break;
				    default:
					if (this.theTok == 269484209 || org.jmol.script.Token.tokAttr (this.theTok, 1073741824)) {
					    if (this.theTok != 269484209) propertyValue = this.parameterAsString (i);
					    if (idSeen) this.error (22);
					    propertyName = "lcaoID";
					    break;
					}break;
				    }
				    if (this.theTok != 12291) idSeen = true;
				    if (propertyName == null) this.error (22);
				    this.setShapeProperty (25, propertyName, propertyValue);
				}
				this.setShapeProperty (25, "clear", null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getCapSlabObject", 
			    ($fz = function (i, isLcaoCartoon) {
				if (i < 0) {
				    return org.jmol.util.MeshSurface.getSlabWithinRange (i, 0);
				}var data = null;
				var tok0 = this.tokAt (i);
				var isSlab = (tok0 == 554176565);
				var tok = this.tokAt (i + 1);
				var plane = null;
				var pts = null;
				var d;
				var d2;
				var bs = null;
				var slabColix = null;
				var slabMeshType = null;
				if (tok == 1073742180) {
				    var slabTranslucency = (this.isFloatParameter (++i + 1) ? this.floatParameter (++i) : 0.5);
				    if (this.isColorParam (i + 1)) {
					slabColix = Short.$valueOf (org.jmol.util.Colix.getColixTranslucent3 (org.jmol.util.Colix.getColix (this.getArgbParam (i + 1)), slabTranslucency != 0, slabTranslucency));
					i = this.iToken;
				    } else {
					slabColix = Short.$valueOf (org.jmol.util.Colix.getColixTranslucent3 (1, slabTranslucency != 0, slabTranslucency));
				    }switch (tok = this.tokAt (i + 1)) {
				    case 1073742018:
				    case 1073741938:
					slabMeshType = Integer.$valueOf (tok);
					tok = this.tokAt (++i + 1);
					break;
				    default:
					slabMeshType = Integer.$valueOf (1073741938);
					break;
				    }
				}switch (tok) {
				case 10:
				case 1048577:
				    data = this.atomExpressionAt (i + 1);
				    tok = 3;
				    this.iToken++;
				    break;
				case 1048588:
				    this.iToken = i + 1;
				    return  new Integer (-2147483648);
				case 1048587:
				    this.iToken = i + 1;
				    break;
				case 1048583:
				    i++;
				    data = [Float.$valueOf (1), this.parameterAsString (++i)];
				    tok = 1073742018;
				    break;
				case 135266324:
				    i++;
				    if (this.tokAt (++i) == 1073742114) {
					d = this.floatParameter (++i);
					d2 = this.floatParameter (++i);
					data = [Float.$valueOf (d), Float.$valueOf (d2)];
					tok = 1073742114;
				    } else if (this.isFloatParameter (i)) {
					d = this.floatParameter (i);
					if (this.isCenterParameter (++i)) {
					    var pt = this.centerParameter (i);
					    if (this.isSyntaxCheck || !(Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet))) {
						pts = [pt];
					    } else {
						var atoms = this.viewer.getModelSet ().atoms;
						bs = this.expressionResult;
						pts =  new Array (bs.cardinality ());
						for (var k = 0, j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1), k++) pts[k] = atoms[j];

					    }} else {
						pts = this.getPointArray (i, -1);
					    }if (pts.length == 0) {
						this.iToken = i;
						this.error (22);
					    }data = [Float.$valueOf (d), pts, bs];
				    } else {
					data = this.getPointArray (i, 4);
					tok = 1679429641;
				    }break;
				case 1679429641:
				    this.iToken = i + 1;
				    data = org.jmol.util.BoxInfo.getCriticalPoints (this.viewer.getBoundBoxVertices (), null);
				    break;
				case 1073741872:
				case 1614417948:
				    this.iToken = i + 1;
				    var unitCell = this.viewer.getCurrentUnitCell ();
				    if (unitCell == null) {
					if (tok == 1614417948) this.error (22);
				    } else {
					pts = org.jmol.util.BoxInfo.getCriticalPoints (unitCell.getUnitCellVertices (), unitCell.getCartesianOffset ());
					var iType = Clazz.floatToInt (unitCell.getUnitCellInfoType (6));
					var v1 = null;
					var v2 = null;
					switch (iType) {
					case 3:
					    break;
					case 1:
					    v2 = org.jmol.util.Vector3f.newV (pts[2]);
					    v2.sub (pts[0]);
					    v2.scale (1000);
					case 2:
					    v1 = org.jmol.util.Vector3f.newV (pts[1]);
					    v1.sub (pts[0]);
					    v1.scale (1000);
					    pts[0].sub (v1);
					    pts[1].scale (2000);
					    if (iType == 1) {
						pts[0].sub (v2);
						pts[2].scale (2000);
					    }break;
					}
					data = pts;
				    }break;
				default:
				    if (!isLcaoCartoon && isSlab && this.isFloatParameter (i + 1)) {
					d = this.floatParameter (++i);
					if (!this.isFloatParameter (i + 1)) return  new Integer (Clazz.floatToInt (d));
					d2 = this.floatParameter (++i);
					data = [Float.$valueOf (d), Float.$valueOf (d2)];
					tok = 1073742114;
					break;
				    }plane = this.planeParameter (++i);
				    var off = (this.isFloatParameter (this.iToken + 1) ? this.floatParameter (++this.iToken) : NaN);
				    if (!Float.isNaN (off)) plane.w -= off;
				    data = plane;
				    tok = 135266319;
				}
				var colorData = (slabMeshType == null ? null : [slabMeshType, slabColix]);
				return org.jmol.util.MeshSurface.getSlabObject (tok, data, !isSlab, colorData);
			    }, $fz.isPrivate = true, $fz), "~N,~B");
	Clazz.defineMethod (c$, "mo", 
			    ($fz = function (isInitOnly) {
				var offset = 2147483647;
				var isNegOffset = false;
				var bsModels = this.viewer.getVisibleFramesBitSet ();
				var propertyList =  new java.util.ArrayList ();
				var i0 = 1;
				if (this.tokAt (1) == 1095766028 || this.tokAt (1) == 4115) {
				    i0 = this.modelNumberParameter (2);
				    if (i0 < 0) this.error (22);
				    bsModels.clearAll ();
				    bsModels.set (i0);
				    i0 = 3;
				}for (var iModel = bsModels.nextSetBit (0); iModel >= 0; iModel = bsModels.nextSetBit (iModel + 1)) {
				    this.shapeManager.loadShape (26);
				    var i = i0;
				    if (this.tokAt (i) == 1073742001 && this.listIsosurface (26)) return true;
				    this.setShapeProperty (26, "init", Integer.$valueOf (iModel));
				    var title = null;
				    var moNumber = (this.getShapeProperty (26, "moNumber")).intValue ();
				    var linearCombination = this.getShapeProperty (26, "moLinearCombination");
				    if (isInitOnly) return true;
				    if (moNumber == 0) moNumber = 2147483647;
				    var propertyName = null;
				    var propertyValue = null;
				    switch (this.getToken (i).tok) {
				    case 1074790451:
				    case 554176565:
					propertyName = this.theToken.value;
					propertyValue = this.getCapSlabObject (i, false);
					i = this.iToken;
					break;
				    case 2:
					moNumber = this.intParameter (i);
					linearCombination = (moNumber >= 0 ? null : [-100, -moNumber]);
					break;
				    case 269484192:
					switch (this.tokAt (++i)) {
					case 1073741973:
					case 1073742008:
					    break;
					default:
					    this.error (22);
					}
					isNegOffset = true;
				    case 1073741973:
				    case 1073742008:
					linearCombination = null;
					if ((offset = this.moOffset (i)) == 2147483647) this.error (22);
					moNumber = 0;
					break;
				    case 1073742037:
					linearCombination = null;
					moNumber = 1073742037;
					break;
				    case 1073742108:
					linearCombination = null;
					moNumber = 1073742108;
					break;
				    case 1766856708:
					this.setColorOptions (null, i + 1, 26, 2);
					break;
				    case 135266319:
					propertyName = "plane";
					propertyValue = this.planeParameter (i + 1);
					break;
				    case 135266320:
					this.addShapeProperty (propertyList, "randomSeed", this.tokAt (i + 2) == 2 ? Integer.$valueOf (this.intParameter (i + 2)) : null);
					propertyName = "monteCarloCount";
					propertyValue = Integer.$valueOf (this.intParameter (i + 1));
					break;
				    case 1073742138:
					propertyName = "scale";
					propertyValue = Float.$valueOf (this.floatParameter (i + 1));
					break;
				    case 1073741910:
					if (this.tokAt (i + 1) == 269484193) {
					    propertyName = "cutoffPositive";
					    propertyValue = Float.$valueOf (this.floatParameter (i + 2));
					} else {
					    propertyName = "cutoff";
					    propertyValue = Float.$valueOf (this.floatParameter (i + 1));
					}break;
				    case 536870916:
					propertyName = "debug";
					break;
				    case 1073742054:
					propertyName = "plane";
					break;
				    case 1073742104:
				    case 1073742122:
					propertyName = "resolution";
					propertyValue = Float.$valueOf (this.floatParameter (i + 1));
					break;
				    case 1073742156:
					propertyName = "squareData";
					propertyValue = Boolean.TRUE;
					break;
				    case 1073742168:
					if (i + 1 < this.statementLength && this.tokAt (i + 1) == 4) {
					    propertyName = "titleFormat";
					    propertyValue = this.parameterAsString (i + 1);
					}break;
				    case 1073741824:
					this.error (22);
					break;
				    default:
					if (this.isArrayParameter (i)) {
					    linearCombination = this.floatParameterSet (i, 2, 2147483647);
					    break;
					}var ipt = this.iToken;
					if (!this.setMeshDisplayProperty (26, 0, this.theTok)) this.error (22);
					this.setShapeProperty (26, "setProperties", propertyList);
					this.setMeshDisplayProperty (26, ipt, this.tokAt (ipt));
					return true;
				    }
				    if (propertyName != null) this.addShapeProperty (propertyList, propertyName, propertyValue);
				    if (moNumber != 2147483647 || linearCombination != null) {
					if (this.tokAt (i + 1) == 4) title = this.parameterAsString (i + 1);
					this.setCursorWait (true);
					this.setMoData (propertyList, moNumber, linearCombination, offset, isNegOffset, iModel, title);
					this.addShapeProperty (propertyList, "finalize", null);
				    }if (propertyList.size () > 0) this.setShapeProperty (26, "setProperties", propertyList);
				    propertyList.clear ();
				}
				return true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "setColorOptions", 
			    ($fz = function (sb, index, iShape, nAllowed) {
				this.getToken (index);
				var translucency = "opaque";
				if (this.theTok == 1073742180) {
				    translucency = "translucent";
				    if (nAllowed < 0) {
					var value = (this.isFloatParameter (index + 1) ? this.floatParameter (++index) : 3.4028235E38);
					this.setShapeTranslucency (iShape, null, "translucent", value, null);
					if (sb != null) {
					    sb.append (" translucent");
					    if (value != 3.4028235E38) sb.append (" ").appendF (value);
					}} else {
					    this.setMeshDisplayProperty (iShape, index, this.theTok);
					}} else if (this.theTok == 1073742074) {
					    if (nAllowed >= 0) this.setMeshDisplayProperty (iShape, index, this.theTok);
					} else {
					    this.iToken--;
					}nAllowed = Math.abs (nAllowed);
				for (var i = 0; i < nAllowed; i++) {
				    if (this.isColorParam (this.iToken + 1)) {
					var color = this.getArgbParam (++this.iToken);
					this.setShapeProperty (iShape, "colorRGB", Integer.$valueOf (color));
					if (sb != null) sb.append (" ").append (org.jmol.util.Escape.escapeColor (color));
				    } else if (this.iToken < index) {
					this.error (22);
				    } else {
					break;
				    }}
				return translucency;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~N,~N,~N");
	Clazz.defineMethod (c$, "moOffset", 
			    ($fz = function (index) {
				var isHomo = (this.getToken (index).tok == 1073741973);
				var offset = (isHomo ? 0 : 1);
				var tok = this.tokAt (++index);
				if (tok == 2 && this.intParameter (index) < 0) offset += this.intParameter (index);
				else if (tok == 269484193) offset += this.intParameter (++index);
				else if (tok == 269484192) offset -= this.intParameter (++index);
				return offset;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setMoData", 
			    ($fz = function (propertyList, moNumber, linearCombination, offset, isNegOffset, modelIndex, title) {
				if (this.isSyntaxCheck) return;
				if (modelIndex < 0) {
				    modelIndex = this.viewer.getCurrentModelIndex ();
				    if (modelIndex < 0) this.errorStr (30, "MO isosurfaces");
				}var firstMoNumber = moNumber;
				var moData = this.viewer.getModelAuxiliaryInfoValue (modelIndex, "moData");
				if (linearCombination == null) {
				    if (moData == null) this.error (27);
				    var lastMoNumber = (moData.containsKey ("lastMoNumber") ? (moData.get ("lastMoNumber")).intValue () : 0);
				    if (moNumber == 1073742108) moNumber = lastMoNumber - 1;
				    else if (moNumber == 1073742037) moNumber = lastMoNumber + 1;
				    var mos = (moData.get ("mos"));
				    var nOrb = (mos == null ? 0 : mos.size ());
				    if (nOrb == 0) this.error (25);
				    if (nOrb == 1 && moNumber > 1) this.error (29);
				    if (offset != 2147483647) {
					if (moData.containsKey ("HOMO")) {
					    moNumber = (moData.get ("HOMO")).intValue () + offset;
					} else {
					    moNumber = -1;
					    var f;
					    for (var i = 0; i < nOrb; i++) {
						var mo = mos.get (i);
						if ((f = mo.get ("occupancy")) != null) {
						    if (f.floatValue () < 0.5) {
							moNumber = i;
							break;
						    }continue;
						} else if ((f = mo.get ("energy")) != null) {
						    if (f.floatValue () > 0) {
							moNumber = i;
							break;
						    }continue;
						}break;
					    }
					    if (moNumber < 0) this.error (28);
					    moNumber += offset;
					}org.jmol.util.Logger.info ("MO " + moNumber);
				    }if (moNumber < 1 || moNumber > nOrb) this.errorStr (26, "" + nOrb);
				}moData.put ("lastMoNumber", Integer.$valueOf (moNumber));
				if (isNegOffset) linearCombination = [-100, moNumber];
				this.addShapeProperty (propertyList, "moData", moData);
				if (title != null) this.addShapeProperty (propertyList, "title", title);
				if (firstMoNumber < 0) this.addShapeProperty (propertyList, "charges", this.viewer.getAtomicCharges ());
				this.addShapeProperty (propertyList, "molecularOrbital", linearCombination != null ? linearCombination : Integer.$valueOf (firstMoNumber < 0 ? -moNumber : moNumber));
				this.addShapeProperty (propertyList, "clear", null);
			    }, $fz.isPrivate = true, $fz), "java.util.List,~N,~A,~N,~B,~N,~S");
	Clazz.defineMethod (c$, "initIsosurface", 
			    ($fz = function (iShape) {
				this.setShapeProperty (iShape, "init", this.fullCommand);
				this.iToken = 0;
				var tok1 = this.tokAt (1);
				var tok2 = this.tokAt (2);
				if (tok1 == 12291 || tok2 == 12291 && this.tokAt (++this.iToken) == 1048579) {
				    this.setShapeProperty (iShape, "delete", null);
				    this.iToken += 2;
				    if (this.statementLength > this.iToken) {
					this.setShapeProperty (iShape, "init", this.fullCommand);
					this.setShapeProperty (iShape, "thisID", "+PREVIOUS_MESH+");
				    }return null;
				}this.iToken = 1;
				if (!this.setMeshDisplayProperty (iShape, 0, tok1)) {
				    this.setShapeProperty (iShape, "thisID", "+PREVIOUS_MESH+");
				    if (iShape != 22) this.setShapeProperty (iShape, "title", [this.thisCommand]);
				    if (tok1 != 1074790550 && (tok2 == 269484209 || tok1 == 269484209 && this.setMeshDisplayProperty (iShape, 0, tok2))) {
					var id = this.setShapeId (iShape, 1, false);
					this.iToken++;
					return id;
				    }}return null;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getNextComment", 
			    ($fz = function () {
				var nextCommand = this.getCommand (this.pc + 1, false, true);
				return (nextCommand.startsWith ("#") ? nextCommand : "");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "listIsosurface", 
			    ($fz = function (iShape) {
				this.checkLength23 ();
				if (!this.isSyntaxCheck) this.showString (this.getShapeProperty (iShape, "list" + (this.tokAt (2) == 0 ? "" : " " + this.getToken (2).value)));
				return true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isosurface", 
			    ($fz = function (iShape) {
				this.shapeManager.loadShape (iShape);
				if (this.tokAt (1) == 1073742001 && this.listIsosurface (iShape)) return;
				var iptDisplayProperty = 0;
				var isIsosurface = (iShape == 23);
				var isPmesh = (iShape == 27);
				var isPlot3d = (iShape == 28);
				var isLcaoCartoon = (iShape == 25);
				var surfaceObjectSeen = false;
				var planeSeen = false;
				var isMapped = false;
				var isBicolor = false;
				var isPhased = false;
				var doCalcArea = false;
				var doCalcVolume = false;
				var isCavity = false;
				var haveRadius = false;
				var toCache = false;
				var isFxy = false;
				var haveSlab = false;
				var haveIntersection = false;
				var data = null;
				var cmd = null;
				var thisSetNumber = -1;
				var nFiles = 0;
				var nX;
				var nY;
				var nZ;
				var ptX;
				var ptY;
				var sigma = NaN;
				var cutoff = NaN;
				var ptWithin = 0;
				var smoothing = null;
				var smoothingPower = 2147483647;
				var bs = null;
				var bsSelect = null;
				var bsIgnore = null;
				var sbCommand =  new org.jmol.util.StringXBuilder ();
				var pt;
				var plane = null;
				var lattice = null;
				var pts;
				var str = null;
				var modelIndex = (this.isSyntaxCheck ? 0 : -2147483648);
				this.setCursorWait (true);
				var idSeen = (this.initIsosurface (iShape) != null);
				var isWild = (idSeen && this.getShapeProperty (iShape, "ID") == null);
				var isColorSchemeTranslucent = false;
				var isInline;
				var onlyOneModel = null;
				var translucency = null;
				var colorScheme = null;
				var mepOrMlp = null;
				var discreteColixes = null;
				var propertyList =  new java.util.ArrayList ();
				var defaultMesh = false;
				if (isPmesh || isPlot3d) this.addShapeProperty (propertyList, "fileType", "Pmesh");
				for (var i = this.iToken; i < this.statementLength; ++i) {
				    var propertyName = null;
				    var propertyValue = null;
				    this.getToken (i);
				    if (this.theTok == 1073741824) str = this.parameterAsString (i);
				    switch (this.theTok) {
				    case 603979871:
					smoothing = (this.getToken (++i).tok == 1048589 ? Boolean.TRUE : this.theTok == 1048588 ? Boolean.FALSE : null);
					if (smoothing == null) this.error (22);
					continue;
				    case 553648149:
					smoothingPower = this.intParameter (++i);
					continue;
				    case 4128:
					propertyName = "moveIsosurface";
					if (this.tokAt (++i) != 12) this.error (22);
					propertyValue = this.getToken (i++).value;
					break;
				    case 1073742066:
					propertyName = "offset";
					propertyValue = this.centerParameter (++i);
					i = this.iToken;
					break;
				    case 528432:
					propertyName = "rotate";
					propertyValue = (this.tokAt (this.iToken = ++i) == 1048587 ? null : this.getPoint4f (i));
					i = this.iToken;
					break;
				    case 1610612740:
					propertyName = "scale3d";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					break;
				    case 1073742090:
					sbCommand.append (" periodic");
					propertyName = "periodic";
					break;
				    case 1073742078:
				    case 266298:
				    case 135266320:
					propertyName = this.theToken.value.toString ();
					sbCommand.append (" ").appendO (this.theToken.value);
					propertyValue = this.centerParameter (++i);
					sbCommand.append (" ").append (org.jmol.util.Escape.escape (propertyValue));
					i = this.iToken;
					break;
				    case 1679429641:
					if (this.fullCommand.indexOf ("# BBOX=") >= 0) {
					    var bbox = org.jmol.util.TextFormat.split (org.jmol.util.Parser.getQuotedAttribute (this.fullCommand, "# BBOX"), ',');
					    pts = [org.jmol.util.Escape.unescapePoint (bbox[0]), org.jmol.util.Escape.unescapePoint (bbox[1])];
					} else if (this.isCenterParameter (i + 1)) {
					    pts = [this.getPoint3f (i + 1, true), this.getPoint3f (this.iToken + 1, true)];
					    i = this.iToken;
					} else {
					    pts = this.viewer.getBoundBoxVertices ();
					}sbCommand.append (" boundBox " + org.jmol.util.Escape.escapePt (pts[0]) + " " + org.jmol.util.Escape.escapePt (pts[pts.length - 1]));
					propertyName = "boundingBox";
					propertyValue = pts;
					break;
				    case 135188:
					isPmesh = true;
					sbCommand.append (" pmesh");
					propertyName = "fileType";
					propertyValue = "Pmesh";
					break;
				    case 135267842:
					bsSelect = this.atomExpressionAt (++i);
					if (this.isSyntaxCheck) {
					    bs =  new org.jmol.util.BitSet ();
					} else if (this.tokAt (this.iToken + 1) == 1048577 || this.tokAt (this.iToken + 1) == 10) {
					    bs = this.atomExpressionAt (++this.iToken);
					    bs.and (this.viewer.getAtomsWithinRadius (5.0, bsSelect, false, null));
					} else {
					    bs = this.viewer.getAtomsWithinRadius (5.0, bsSelect, true, null);
					    bs.andNot (this.viewer.getAtomBits (1095761934, bsSelect));
					}bs.andNot (bsSelect);
					sbCommand.append (" intersection ").append (org.jmol.util.Escape.escape (bsSelect)).append (" ").append (org.jmol.util.Escape.escape (bs));
					i = this.iToken;
					if (this.tokAt (i + 1) == 135368713) {
					    i++;
					    var f = this.getToken (++i).value;
					    sbCommand.append (" function ").append (org.jmol.util.Escape.escapeStr (f));
					    if (!this.isSyntaxCheck) this.addShapeProperty (propertyList, "func", (f.equals ("a+b") || f.equals ("a-b") ? f : this.createFunction ("__iso__", "a,b", f)));
					} else {
					    haveIntersection = true;
					}propertyName = "intersection";
					propertyValue = [bsSelect, bs];
					break;
				    case 1610625028:
				    case 135266324:
					var isDisplay = (this.theTok == 1610625028);
					if (isDisplay) {
					    sbCommand.append (" display");
					    iptDisplayProperty = i;
					    var tok = this.tokAt (i + 1);
					    if (tok == 0) continue;
					    i++;
					    this.addShapeProperty (propertyList, "token", Integer.$valueOf (1048589));
					    if (tok == 10 || tok == 1048579) {
						propertyName = "bsDisplay";
						if (tok == 1048579) {
						    sbCommand.append (" all");
						} else {
						    propertyValue = this.statement[i].value;
						    sbCommand.append (" ").append (org.jmol.util.Escape.escape (propertyValue));
						}this.checkLast (i);
						break;
					    } else if (tok != 135266324) {
						this.iToken = i;
						this.error (22);
					    }} else {
						ptWithin = i;
					    }var distance;
					var ptc = null;
					bs = null;
					var havePt = false;
					if (this.tokAt (i + 1) == 1048577) {
					    distance = this.floatParameter (i + 3);
					    if (this.isPoint3f (i + 4)) {
						ptc = this.centerParameter (i + 4);
						havePt = true;
						this.iToken = this.iToken + 2;
					    } else if (this.isPoint3f (i + 5)) {
						ptc = this.centerParameter (i + 5);
						havePt = true;
						this.iToken = this.iToken + 2;
					    } else {
						bs = this.atomExpression (this.statement, i + 5, this.statementLength, true, false, false, true);
						if (bs == null) this.error (22);
					    }} else {
						distance = this.floatParameter (++i);
						ptc = this.centerParameter (++i);
					    }if (isDisplay) this.checkLast (this.iToken);
					i = this.iToken;
					if (this.fullCommand.indexOf ("# WITHIN=") >= 0) bs = org.jmol.util.Escape.unescapeBitset (org.jmol.util.Parser.getQuotedAttribute (this.fullCommand, "# WITHIN"));
					else if (!havePt) bs = (Clazz.instanceOf (this.expressionResult, org.jmol.util.BitSet) ? this.expressionResult : null);
					if (!this.isSyntaxCheck) {
					    if (bs != null && modelIndex >= 0) {
						bs.and (this.viewer.getModelUndeletedAtomsBitSet (modelIndex));
					    }if (ptc == null) ptc = this.viewer.getAtomSetCenter (bs);
					    this.getWithinDistanceVector (propertyList, distance, ptc, bs, isDisplay);
					    sbCommand.append (" within ").appendF (distance).append (" ").append (bs == null ? org.jmol.util.Escape.escapePt (ptc) : org.jmol.util.Escape.escape (bs));
					}continue;
				    case 1073742083:
					propertyName = "parameters";
					var fparams = this.floatParameterSet (++i, 1, 10);
					i = this.iToken;
					propertyValue = fparams;
					sbCommand.append (" parameters ").append (org.jmol.util.Escape.escape (fparams));
					break;
				    case 1716520973:
				    case 1073742190:
					onlyOneModel = this.theToken.value;
					var isVariable = (this.theTok == 1073742190);
					if (mepOrMlp == null) {
					    if (!surfaceObjectSeen && !isMapped && !planeSeen) {
						this.addShapeProperty (propertyList, "sasurface", Float.$valueOf (0));
						sbCommand.append (" vdw");
						surfaceObjectSeen = true;
					    }propertyName = "property";
					    if (smoothing == null) smoothing = this.viewer.getIsosurfacePropertySmoothing (false) == 1 ? Boolean.TRUE : Boolean.FALSE;
					    this.addShapeProperty (propertyList, "propertySmoothing", smoothing);
					    sbCommand.append (" isosurfacePropertySmoothing " + smoothing);
					    if (smoothingPower == 2147483647) smoothingPower = this.viewer.getIsosurfacePropertySmoothing (true);
					    this.addShapeProperty (propertyList, "propertySmoothingPower", Integer.$valueOf (smoothingPower));
					    if (smoothing === Boolean.TRUE) sbCommand.append (" isosurfacePropertySmoothingPower " + smoothingPower);
					    if (this.viewer.isRangeSelected ()) this.addShapeProperty (propertyList, "rangeSelected", Boolean.TRUE);
					} else {
					    propertyName = mepOrMlp;
					}str = this.parameterAsString (i);
					sbCommand.append (" ").append (str);
					if (str.toLowerCase ().indexOf ("property_") == 0) {
					    data =  Clazz.newFloatArray (this.viewer.getAtomCount (), 0);
					    if (this.isSyntaxCheck) continue;
					    data = this.viewer.getDataFloat (str);
					    if (data == null) this.error (22);
					    this.addShapeProperty (propertyList, propertyName, data);
					    continue;
					}var atomCount = this.viewer.getAtomCount ();
					data =  Clazz.newFloatArray (atomCount, 0);
					if (isVariable) {
					    var vname = this.parameterAsString (++i);
					    if (vname.length == 0) {
						data = this.floatParameterSet (i, atomCount, atomCount);
					    } else {
						data =  Clazz.newFloatArray (atomCount, 0);
						if (!this.isSyntaxCheck) org.jmol.util.Parser.parseStringInfestedFloatArray ("" + this.getParameter (vname, 4), null, data);
					    }if (!this.isSyntaxCheck) sbCommand.append (" \"\" ").append (org.jmol.util.Escape.escape (data));
					} else {
					    var tokProperty = this.getToken (++i).tok;
					    if (!this.isSyntaxCheck) {
						sbCommand.append (" " + this.theToken.value);
						var atoms = this.viewer.getModelSet ().atoms;
						this.viewer.autoCalculate (tokProperty);
						for (var iAtom = atomCount; --iAtom >= 0; ) data[iAtom] = org.jmol.modelset.Atom.atomPropertyFloat (this.viewer, atoms[iAtom], tokProperty);

					    }if (tokProperty == 1766856708) colorScheme = "colorRGB";
					    if (this.tokAt (i + 1) == 135266324) {
						var d = this.floatParameter (i = i + 2);
						sbCommand.append (" within " + d);
						this.addShapeProperty (propertyList, "propertyDistanceMax", Float.$valueOf (d));
					    }}propertyValue = data;
					break;
				    case 1095766028:
					if (surfaceObjectSeen) this.error (22);
					modelIndex = this.modelNumberParameter (++i);
					sbCommand.append (" model " + modelIndex);
					if (modelIndex < 0) {
					    propertyName = "fixed";
					    propertyValue = Boolean.TRUE;
					    break;
					}propertyName = "modelIndex";
					propertyValue = Integer.$valueOf (modelIndex);
					break;
				    case 135280132:
					propertyName = "select";
					var bs1 = this.atomExpressionAt (++i);
					propertyValue = bs1;
					i = this.iToken;
					var isOnly = (this.tokAt (i + 1) == 1073742072);
					if (isOnly) {
					    i++;
					    var bs2 = org.jmol.util.BitSetUtil.copy (bs1);
					    org.jmol.util.BitSetUtil.invertInPlace (bs2, this.viewer.getAtomCount ());
					    this.addShapeProperty (propertyList, "ignore", bs2);
					    sbCommand.append (" ignore ").append (org.jmol.util.Escape.escape (bs2));
					}if (surfaceObjectSeen || isMapped) {
					    sbCommand.append (" select " + org.jmol.util.Escape.escape (propertyValue));
					} else {
					    bsSelect = propertyValue;
					    if (modelIndex < 0 && bsSelect.nextSetBit (0) >= 0) modelIndex = this.viewer.getAtomModelIndex (bsSelect.nextSetBit (0));
					}break;
				    case 1085443:
					thisSetNumber = this.intParameter (++i);
					break;
				    case 12289:
					propertyName = "center";
					propertyValue = this.centerParameter (++i);
					sbCommand.append (" center " + org.jmol.util.Escape.escape (propertyValue));
					i = this.iToken;
					break;
				    case 1073742147:
				    case 1766856708:
					var color;
					idSeen = true;
					var isSign = (this.theTok == 1073742147);
					if (isSign) {
					    sbCommand.append (" sign");
					    this.addShapeProperty (propertyList, "sign", Boolean.TRUE);
					} else {
					    if (this.tokAt (i + 1) == 1073741914) {
						i++;
						propertyName = "colorDensity";
						sbCommand.append (" color density");
						break;
					    }if (this.getToken (i + 1).tok == 4) {
						colorScheme = this.parameterAsString (++i);
						if (colorScheme.indexOf (" ") > 0) {
						    discreteColixes = org.jmol.util.Colix.getColixArray (colorScheme);
						    if (discreteColixes == null) this.error (4);
						}} else if (this.theTok == 1073742018) {
						    i++;
						    sbCommand.append (" color mesh");
						    color = this.getArgbParam (++i);
						    this.addShapeProperty (propertyList, "meshcolor", Integer.$valueOf (color));
						    sbCommand.append (" ").append (org.jmol.util.Escape.escapeColor (color));
						    i = this.iToken;
						    continue;
						}if ((this.theTok = this.tokAt (i + 1)) == 1073742180 || this.theTok == 1073742074) {
						    sbCommand.append (" color");
						    translucency = this.setColorOptions (sbCommand, i + 1, 23, -2);
						    i = this.iToken;
						    continue;
						}switch (this.tokAt (i + 1)) {
						case 1073741826:
						case 1073742114:
						    this.getToken (++i);
						    sbCommand.append (" color range");
						    this.addShapeProperty (propertyList, "rangeAll", null);
						    if (this.tokAt (i + 1) == 1048579) {
							i++;
							sbCommand.append (" all");
							continue;
						    }var min = this.floatParameter (++i);
						    var max = this.floatParameter (++i);
						    this.addShapeProperty (propertyList, "red", Float.$valueOf (min));
						    this.addShapeProperty (propertyList, "blue", Float.$valueOf (max));
						    sbCommand.append (" ").appendF (min).append (" ").appendF (max);
						    continue;
						}
					    if (this.isColorParam (i + 1)) {
						color = this.getArgbParam (i + 1);
						if (this.tokAt (i + 2) == 1074790746) {
						    colorScheme = this.getColorRange (i + 1);
						    i = this.iToken;
						    break;
						}}sbCommand.append (" color");
					}if (this.isColorParam (i + 1)) {
					    color = this.getArgbParam (++i);
					    sbCommand.append (" ").append (org.jmol.util.Escape.escapeColor (color));
					    i = this.iToken;
					    this.addShapeProperty (propertyList, "colorRGB", Integer.$valueOf (color));
					    idSeen = true;
					    if (this.isColorParam (i + 1)) {
						color = this.getArgbParam (++i);
						i = this.iToken;
						this.addShapeProperty (propertyList, "colorRGB", Integer.$valueOf (color));
						sbCommand.append (" ").append (org.jmol.util.Escape.escapeColor (color));
						isBicolor = true;
					    } else if (isSign) {
						this.error (23);
					    }} else if (!isSign && discreteColixes == null) {
						this.error (23);
					    }continue;
				    case 135270422:
					if (!isIsosurface) this.error (22);
					toCache = !this.isSyntaxCheck;
					continue;
				    case 1229984263:
					if (this.tokAt (i + 1) != 4) this.error (23);
					continue;
				    case 1112541195:
				    case 1649412112:
					sbCommand.append (" ").appendO (this.theToken.value);
					var rd = this.encodeRadiusParameter (i, false, true);
					sbCommand.append (" ").appendO (rd);
					if (Float.isNaN (rd.value)) rd.value = 100;
					propertyValue = rd;
					propertyName = "radius";
					haveRadius = true;
					if (isMapped) surfaceObjectSeen = false;
					i = this.iToken;
					break;
				    case 135266319:
					planeSeen = true;
					propertyName = "plane";
					propertyValue = this.planeParameter (++i);
					i = this.iToken;
					sbCommand.append (" plane ").append (org.jmol.util.Escape.escape (propertyValue));
					break;
				    case 1073742138:
					propertyName = "scale";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					sbCommand.append (" scale ").appendO (propertyValue);
					break;
				    case 1048579:
					if (idSeen) this.error (22);
					propertyName = "thisID";
					break;
				    case 1113198596:
					surfaceObjectSeen = true;
					++i;
					try {
					    propertyValue = this.getPoint4f (i);
					    propertyName = "ellipsoid";
					    i = this.iToken;
					    sbCommand.append (" ellipsoid ").append (org.jmol.util.Escape.escape (propertyValue));
					    break;
					} catch (e) {
					    if (Clazz.exceptionOf (e, org.jmol.script.ScriptException)) {
					    } else {
						throw e;
					    }
					}
					try {
					    propertyName = "ellipsoid";
					    propertyValue = this.floatParameterSet (i, 6, 6);
					    i = this.iToken;
					    sbCommand.append (" ellipsoid ").append (org.jmol.util.Escape.escape (propertyValue));
					    break;
					} catch (e) {
					    if (Clazz.exceptionOf (e, org.jmol.script.ScriptException)) {
					    } else {
						throw e;
					    }
					}
					bs = this.atomExpressionAt (i);
					sbCommand.append (" ellipsoid ").append (org.jmol.util.Escape.escape (bs));
					var iAtom = bs.nextSetBit (0);
					var atoms = this.viewer.getModelSet ().atoms;
					if (iAtom >= 0) propertyValue = atoms[iAtom].getEllipsoid ();
					if (propertyValue == null) return;
					i = this.iToken;
					propertyName = "ellipsoid";
					if (!this.isSyntaxCheck) this.addShapeProperty (propertyList, "center", this.viewer.getAtomPoint3f (iAtom));
					break;
				    case 135267841:
					planeSeen = true;
					propertyName = "plane";
					propertyValue = this.hklParameter (++i);
					i = this.iToken;
					sbCommand.append (" plane ").append (org.jmol.util.Escape.escape (propertyValue));
					break;
				    case 135182:
					surfaceObjectSeen = true;
					var lcaoType = this.parameterAsString (++i);
					this.addShapeProperty (propertyList, "lcaoType", lcaoType);
					sbCommand.append (" lcaocartoon ").append (org.jmol.util.Escape.escapeStr (lcaoType));
					switch (this.getToken (++i).tok) {
					case 10:
					case 1048577:
					    propertyName = "lcaoCartoon";
					    bs = this.atomExpressionAt (i);
					    i = this.iToken;
					    if (this.isSyntaxCheck) continue;
					    var atomIndex = bs.nextSetBit (0);
					    if (atomIndex < 0) this.error (14);
					    sbCommand.append (" ({").appendI (atomIndex).append ("})");
					    modelIndex = this.viewer.getAtomModelIndex (atomIndex);
					    this.addShapeProperty (propertyList, "modelIndex", Integer.$valueOf (modelIndex));
					    var axes = [ new org.jmol.util.Vector3f (),  new org.jmol.util.Vector3f (), org.jmol.util.Vector3f.newV (this.viewer.getAtomPoint3f (atomIndex)),  new org.jmol.util.Vector3f ()];
					    if (!lcaoType.equalsIgnoreCase ("s") && this.viewer.getHybridizationAndAxes (atomIndex, axes[0], axes[1], lcaoType) == null) return;
					    propertyValue = axes;
					    break;
					default:
					    this.error (14);
					}
					break;
				    case 1183762:
					var moNumber = 2147483647;
					var offset = 2147483647;
					var isNegOffset = (this.tokAt (i + 1) == 269484192);
					if (isNegOffset) i++;
					var linearCombination = null;
					switch (this.tokAt (++i)) {
					case 0:
					    this.error (2);
					    break;
					case 1073741973:
					case 1073742008:
					    offset = this.moOffset (i);
					    moNumber = 0;
					    i = this.iToken;
					    sbCommand.append (" mo " + (isNegOffset ? "-" : "") + "HOMO ");
					    if (offset > 0) sbCommand.append ("+");
					    if (offset != 0) sbCommand.appendI (offset);
					    break;
					case 2:
					    moNumber = this.intParameter (i);
					    sbCommand.append (" mo ").appendI (moNumber);
					    break;
					default:
					    if (this.isArrayParameter (i)) {
						linearCombination = this.floatParameterSet (i, 2, 2147483647);
						i = this.iToken;
					    }}
					if (this.tokAt (i + 1) == 135266320) {
					    ++i;
					    var monteCarloCount = this.intParameter (++i);
					    var seed = (this.tokAt (i + 1) == 2 ? this.intParameter (++i) : (-System.currentTimeMillis ()) % 10000);
					    this.addShapeProperty (propertyList, "monteCarloCount", Integer.$valueOf (monteCarloCount));
					    this.addShapeProperty (propertyList, "randomSeed", Integer.$valueOf (seed));
					    sbCommand.append (" points ").appendI (monteCarloCount).appendC (' ').appendI (seed);
					}this.setMoData (propertyList, moNumber, linearCombination, offset, isNegOffset, modelIndex, null);
					surfaceObjectSeen = true;
					continue;
				    case 1073742036:
					propertyName = "nci";
					sbCommand.append (" " + propertyName);
					var tok = this.tokAt (i + 1);
					var isPromolecular = (tok != 1229984263 && tok != 4 && tok != 1073742033);
					propertyValue = Boolean.$valueOf (isPromolecular);
					if (isPromolecular) surfaceObjectSeen = true;
					break;
				    case 1073742016:
				    case 1073742022:
					var isMep = (this.theTok == 1073742016);
					propertyName = (isMep ? "mep" : "mlp");
					sbCommand.append (" " + propertyName);
					var fname = null;
					var calcType = -1;
					surfaceObjectSeen = true;
					if (this.tokAt (i + 1) == 2) {
					    calcType = this.intParameter (++i);
					    sbCommand.append (" " + calcType);
					    this.addShapeProperty (propertyList, "mepCalcType", Integer.$valueOf (calcType));
					}if (this.tokAt (i + 1) == 4) {
					    fname = this.stringParameter (++i);
					    sbCommand.append (" /*file*/" + org.jmol.util.Escape.escapeStr (fname));
					} else if (this.tokAt (i + 1) == 1716520973) {
					    mepOrMlp = propertyName;
					    continue;
					}if (!this.isSyntaxCheck) try {
					    data = (fname == null && isMep ? this.viewer.getPartialCharges () : this.viewer.getAtomicPotentials (isMep, bsSelect, bsIgnore, fname));
					} catch (e) {
					    if (Clazz.exceptionOf (e, Exception)) {
					    } else {
						throw e;
					    }
					}
					if (!this.isSyntaxCheck && data == null) this.error (32);
					propertyValue = data;
					break;
				    case 1313866247:
					doCalcVolume = !this.isSyntaxCheck;
					sbCommand.append (" volume");
					break;
				    case 1074790550:
					this.setShapeId (iShape, ++i, idSeen);
					isWild = (this.getShapeProperty (iShape, "ID") == null);
					i = this.iToken;
					break;
				    case 1073741888:
					if (this.tokAt (i + 1) == 1073742180) {
					    isColorSchemeTranslucent = true;
					    i++;
					}colorScheme = this.parameterAsString (++i).toLowerCase ();
					if (colorScheme.equals ("sets")) {
					    sbCommand.append (" colorScheme \"sets\"");
					} else if (this.isColorParam (i)) {
					    colorScheme = this.getColorRange (i);
					    i = this.iToken;
					}break;
				    case 1073741828:
					propertyName = "addHydrogens";
					propertyValue = Boolean.TRUE;
					sbCommand.append (" addHydrogens");
					break;
				    case 1073741836:
					propertyName = "angstroms";
					sbCommand.append (" angstroms");
					break;
				    case 1073741838:
					propertyName = "anisotropy";
					propertyValue = this.getPoint3f (++i, false);
					sbCommand.append (" anisotropy").append (org.jmol.util.Escape.escapePt (propertyValue));
					i = this.iToken;
					break;
				    case 1073741842:
					doCalcArea = !this.isSyntaxCheck;
					sbCommand.append (" area");
					break;
				    case 1073741850:
				    case 1073742076:
					surfaceObjectSeen = true;
					if (isBicolor && !isPhased) {
					    sbCommand.append (" phase \"_orb\"");
					    this.addShapeProperty (propertyList, "phase", "_orb");
					}var nlmZprs =  Clazz.newFloatArray (7, 0);
					nlmZprs[0] = this.intParameter (++i);
					nlmZprs[1] = this.intParameter (++i);
					nlmZprs[2] = this.intParameter (++i);
					nlmZprs[3] = (this.isFloatParameter (i + 1) ? this.floatParameter (++i) : 6);
					sbCommand.append (" atomicOrbital ").appendI (Clazz.floatToInt (nlmZprs[0])).append (" ").appendI (Clazz.floatToInt (nlmZprs[1])).append (" ").appendI (Clazz.floatToInt (nlmZprs[2])).append (" ").appendF (nlmZprs[3]);
					if (this.tokAt (i + 1) == 135266320) {
					    i += 2;
					    nlmZprs[4] = this.intParameter (i);
					    nlmZprs[5] = (this.tokAt (i + 1) == 3 ? this.floatParameter (++i) : 0);
					    nlmZprs[6] = (this.tokAt (i + 1) == 2 ? this.intParameter (++i) : (-System.currentTimeMillis ()) % 10000);
					    sbCommand.append (" points ").appendI (Clazz.floatToInt (nlmZprs[4])).appendC (' ').appendF (nlmZprs[5]).appendC (' ').appendI (Clazz.floatToInt (nlmZprs[6]));
					}propertyName = "hydrogenOrbital";
					propertyValue = nlmZprs;
					break;
				    case 1073741866:
					sbCommand.append (" binary");
					continue;
				    case 1073741868:
					sbCommand.append (" blockData");
					propertyName = "blockData";
					propertyValue = Boolean.TRUE;
					break;
				    case 1074790451:
				    case 554176565:
					haveSlab = true;
					propertyName = this.theToken.value;
					propertyValue = this.getCapSlabObject (i, false);
					i = this.iToken;
					break;
				    case 1073741876:
					if (!isIsosurface) this.error (22);
					isCavity = true;
					if (this.isSyntaxCheck) continue;
					var cavityRadius = (this.isFloatParameter (i + 1) ? this.floatParameter (++i) : 1.2);
					var envelopeRadius = (this.isFloatParameter (i + 1) ? this.floatParameter (++i) : 10);
					if (envelopeRadius > 10) this.integerOutOfRange (0, 10);
					sbCommand.append (" cavity ").appendF (cavityRadius).append (" ").appendF (envelopeRadius);
					this.addShapeProperty (propertyList, "envelopeRadius", Float.$valueOf (envelopeRadius));
					this.addShapeProperty (propertyList, "cavityRadius", Float.$valueOf (cavityRadius));
					propertyName = "cavity";
					break;
				    case 1073741896:
				    case 1073741900:
					propertyName = "contour";
					sbCommand.append (" contour");
					switch (this.tokAt (i + 1)) {
					case 1073741920:
					    propertyValue = this.floatParameterSet (i + 2, 1, 2147483647);
					    sbCommand.append (" discrete ").append (org.jmol.util.Escape.escape (propertyValue));
					    i = this.iToken;
					    break;
					case 1073741981:
					    pt = this.getPoint3f (i + 2, false);
					    if (pt.z <= 0 || pt.y < pt.x) this.error (22);
					    if (pt.z == Clazz.floatToInt (pt.z) && pt.z > (pt.y - pt.x)) pt.z = (pt.y - pt.x) / pt.z;
					    propertyValue = pt;
					    i = this.iToken;
					    sbCommand.append (" increment ").append (org.jmol.util.Escape.escapePt (pt));
					    break;
					default:
					    propertyValue = Integer.$valueOf (this.tokAt (i + 1) == 2 ? this.intParameter (++i) : 0);
					    sbCommand.append (" ").appendO (propertyValue);
					}
					break;
				    case 3:
				    case 2:
				    case 269484193:
				    case 1073741910:
					sbCommand.append (" cutoff ");
					if (this.theTok == 1073741910) i++;
					if (this.tokAt (i) == 269484193) {
					    propertyName = "cutoffPositive";
					    propertyValue = Float.$valueOf (cutoff = this.floatParameter (++i));
					    sbCommand.append ("+").appendO (propertyValue);
					} else if (this.isFloatParameter (i)) {
					    propertyName = "cutoff";
					    propertyValue = Float.$valueOf (cutoff = this.floatParameter (i));
					    sbCommand.appendO (propertyValue);
					} else {
					    propertyName = "cutoffRange";
					    propertyValue = this.floatParameterSet (i, 2, 2);
					    this.addShapeProperty (propertyList, "cutoff", Float.$valueOf (0));
					    sbCommand.append (org.jmol.util.Escape.escape (propertyValue));
					    i = this.iToken;
					}break;
				    case 1073741928:
					propertyName = "downsample";
					propertyValue = Integer.$valueOf (this.intParameter (++i));
					sbCommand.append (" downsample ").appendO (propertyValue);
					break;
				    case 1073741930:
					propertyName = "eccentricity";
					propertyValue = this.getPoint4f (++i);
					sbCommand.append (" eccentricity ").append (org.jmol.util.Escape.escape (propertyValue));
					i = this.iToken;
					break;
				    case 1074790508:
					sbCommand.append (" ed");
					this.setMoData (propertyList, -1, null, 0, false, modelIndex, null);
					surfaceObjectSeen = true;
					continue;
				    case 536870916:
				    case 1073742041:
					sbCommand.append (" ").appendO (this.theToken.value);
					propertyName = "debug";
					propertyValue = (this.theTok == 536870916 ? Boolean.TRUE : Boolean.FALSE);
					break;
				    case 1060869:
					sbCommand.append (" fixed");
					propertyName = "fixed";
					propertyValue = Boolean.TRUE;
					break;
				    case 1073741962:
					sbCommand.append (" fullPlane");
					propertyName = "fullPlane";
					propertyValue = Boolean.TRUE;
					break;
				    case 1073741966:
				    case 1073741968:
					var isFxyz = (this.theTok == 1073741968);
					propertyName = "" + this.theToken.value;
					var vxy =  new java.util.ArrayList ();
					propertyValue = vxy;
					isFxy = surfaceObjectSeen = true;
					sbCommand.append (" ").append (propertyName);
					var name = this.parameterAsString (++i);
					if (name.equals ("=")) {
					    sbCommand.append (" =");
					    name = this.parameterAsString (++i);
					    sbCommand.append (" ").append (org.jmol.util.Escape.escapeStr (name));
					    vxy.add (name);
					    if (!this.isSyntaxCheck) this.addShapeProperty (propertyList, "func", this.createFunction ("__iso__", "x,y,z", name));
					    break;
					}var dName = org.jmol.util.Parser.getQuotedAttribute (this.fullCommand, "# DATA" + (isFxy ? "2" : ""));
					if (dName == null) dName = "inline";
					else name = dName;
					var isXYZ = (name.indexOf ("data2d_") == 0);
					var isXYZV = (name.indexOf ("data3d_") == 0);
					isInline = name.equals ("inline");
					sbCommand.append (" inline");
					vxy.add (name);
					var pt3 = this.getPoint3f (++i, false);
					sbCommand.append (" ").append (org.jmol.util.Escape.escapePt (pt3));
					vxy.add (pt3);
					var pt4;
					ptX = ++this.iToken;
					vxy.add (pt4 = this.getPoint4f (ptX));
					sbCommand.append (" ").append (org.jmol.util.Escape.escape (pt4));
					nX = Clazz.floatToInt (pt4.x);
					ptY = ++this.iToken;
					vxy.add (pt4 = this.getPoint4f (ptY));
					sbCommand.append (" ").append (org.jmol.util.Escape.escape (pt4));
					nY = Clazz.floatToInt (pt4.x);
					vxy.add (pt4 = this.getPoint4f (++this.iToken));
					sbCommand.append (" ").append (org.jmol.util.Escape.escape (pt4));
					nZ = Clazz.floatToInt (pt4.x);
					if (nX == 0 || nY == 0 || nZ == 0) this.error (22);
					if (!this.isSyntaxCheck) {
					    var fdata = null;
					    var xyzdata = null;
					    if (isFxyz) {
						if (isInline) {
						    nX = Math.abs (nX);
						    nY = Math.abs (nY);
						    nZ = Math.abs (nZ);
						    xyzdata = this.floatArraySetXYZ (++this.iToken, nX, nY, nZ);
						} else if (isXYZV) {
						    xyzdata = this.viewer.getDataFloat3D (name);
						} else {
						    xyzdata = this.viewer.functionXYZ (name, nX, nY, nZ);
						}nX = Math.abs (nX);
						nY = Math.abs (nY);
						nZ = Math.abs (nZ);
						if (xyzdata == null) {
						    this.iToken = ptX;
						    this.errorStr (53, "xyzdata is null.");
						}if (xyzdata.length != nX || xyzdata[0].length != nY || xyzdata[0][0].length != nZ) {
						    this.iToken = ptX;
						    this.errorStr (53, "xyzdata[" + xyzdata.length + "][" + xyzdata[0].length + "][" + xyzdata[0][0].length + "] is not of size [" + nX + "][" + nY + "][" + nZ + "]");
						}vxy.add (xyzdata);
						sbCommand.append (" ").append (org.jmol.util.Escape.escape (xyzdata));
					    } else {
						if (isInline) {
						    nX = Math.abs (nX);
						    nY = Math.abs (nY);
						    fdata = this.floatArraySet (++this.iToken, nX, nY);
						} else if (isXYZ) {
						    fdata = this.viewer.getDataFloat2D (name);
						    nX = (fdata == null ? 0 : fdata.length);
						    nY = 3;
						} else {
						    fdata = this.viewer.functionXY (name, nX, nY);
						    nX = Math.abs (nX);
						    nY = Math.abs (nY);
						}if (fdata == null) {
						    this.iToken = ptX;
						    this.errorStr (53, "fdata is null.");
						}if (fdata.length != nX && !isXYZ) {
						    this.iToken = ptX;
						    this.errorStr (53, "fdata length is not correct: " + fdata.length + " " + nX + ".");
						}for (var j = 0; j < nX; j++) {
						    if (fdata[j] == null) {
							this.iToken = ptY;
							this.errorStr (53, "fdata[" + j + "] is null.");
						    }if (fdata[j].length != nY) {
							this.iToken = ptY;
							this.errorStr (53, "fdata[" + j + "] is not the right length: " + fdata[j].length + " " + nY + ".");
						    }}
						vxy.add (fdata);
						sbCommand.append (" ").append (org.jmol.util.Escape.escape (fdata));
					    }}i = this.iToken;
					break;
				    case 1073741970:
					propertyName = "gridPoints";
					sbCommand.append (" gridPoints");
					break;
				    case 1073741976:
					propertyName = "ignore";
					propertyValue = bsIgnore = this.atomExpressionAt (++i);
					sbCommand.append (" ignore ").append (org.jmol.util.Escape.escape (propertyValue));
					i = this.iToken;
					break;
				    case 1073741984:
					propertyName = "insideOut";
					sbCommand.append (" insideout");
					break;
				    case 1073741988:
				    case 1073741986:
				    case 1073742100:
					sbCommand.append (" ").appendO (this.theToken.value);
					propertyName = "pocket";
					propertyValue = (this.theTok == 1073742100 ? Boolean.TRUE : Boolean.FALSE);
					break;
				    case 1073742002:
					propertyName = "lobe";
					propertyValue = this.getPoint4f (++i);
					i = this.iToken;
					sbCommand.append (" lobe ").append (org.jmol.util.Escape.escape (propertyValue));
					surfaceObjectSeen = true;
					break;
				    case 1073742004:
				    case 1073742006:
					propertyName = "lp";
					propertyValue = this.getPoint4f (++i);
					i = this.iToken;
					sbCommand.append (" lp ").append (org.jmol.util.Escape.escape (propertyValue));
					surfaceObjectSeen = true;
					break;
				    case 1052700:
					if (isMapped || this.statementLength == i + 1) this.error (22);
					isMapped = true;
					if ((isCavity || haveRadius || haveIntersection) && !surfaceObjectSeen) {
					    surfaceObjectSeen = true;
					    this.addShapeProperty (propertyList, "bsSolvent", (haveRadius || haveIntersection ?  new org.jmol.util.BitSet () : this.lookupIdentifierValue ("solvent")));
					    this.addShapeProperty (propertyList, "sasurface", Float.$valueOf (0));
					}if (sbCommand.length () == 0) {
					    plane = this.getShapeProperty (23, "plane");
					    if (plane == null) {
						if (this.getShapeProperty (23, "contours") != null) {
						    this.addShapeProperty (propertyList, "nocontour", null);
						}} else {
						    this.addShapeProperty (propertyList, "plane", plane);
						    sbCommand.append ("plane ").append (org.jmol.util.Escape.escape (plane));
						    planeSeen = true;
						    plane = null;
						}} else if (!surfaceObjectSeen && !planeSeen) {
						    this.error (22);
						}sbCommand.append ("; isosurface map");
					this.addShapeProperty (propertyList, "map", (surfaceObjectSeen ? Boolean.TRUE : Boolean.FALSE));
					break;
				    case 1073742014:
					propertyName = "maxset";
					propertyValue = Integer.$valueOf (this.intParameter (++i));
					sbCommand.append (" maxSet ").appendO (propertyValue);
					break;
				    case 1073742020:
					propertyName = "minset";
					propertyValue = Integer.$valueOf (this.intParameter (++i));
					sbCommand.append (" minSet ").appendO (propertyValue);
					break;
				    case 1073742112:
					surfaceObjectSeen = true;
					propertyName = "rad";
					propertyValue = this.getPoint4f (++i);
					i = this.iToken;
					sbCommand.append (" radical ").append (org.jmol.util.Escape.escape (propertyValue));
					break;
				    case 1073742028:
					propertyName = "fixed";
					propertyValue = Boolean.FALSE;
					sbCommand.append (" modelBased");
					break;
				    case 1073742030:
				    case 1073742136:
				    case 1613758488:
					onlyOneModel = this.theToken.value;
					var radius;
					if (this.theTok == 1073742030) {
					    propertyName = "molecular";
					    sbCommand.append (" molecular");
					    radius = 1.4;
					} else {
					    this.addShapeProperty (propertyList, "bsSolvent", this.lookupIdentifierValue ("solvent"));
					    propertyName = (this.theTok == 1073742136 ? "sasurface" : "solvent");
					    sbCommand.append (" ").appendO (this.theToken.value);
					    radius = (this.isFloatParameter (i + 1) ? this.floatParameter (++i) : this.viewer.getSolventProbeRadius ());
					    sbCommand.append (" ").appendF (radius);
					}propertyValue = Float.$valueOf (radius);
					if (this.tokAt (i + 1) == 1073741961) {
					    this.addShapeProperty (propertyList, "doFullMolecular", null);
					    sbCommand.append (" full");
					    i++;
					}surfaceObjectSeen = true;
					break;
				    case 1073742033:
					this.addShapeProperty (propertyList, "fileType", "MRC");
					sbCommand.append (" mrc");
					continue;
				    case 1073742064:
				    case 1073742062:
					this.addShapeProperty (propertyList, "fileType", "Obj");
					sbCommand.append (" obj");
					continue;
				    case 1073742034:
					this.addShapeProperty (propertyList, "fileType", "Msms");
					sbCommand.append (" msms");
					continue;
				    case 1073742094:
					if (surfaceObjectSeen) this.error (22);
					propertyName = "phase";
					isPhased = true;
					propertyValue = (this.tokAt (i + 1) == 4 ? this.stringParameter (++i) : "_orb");
					sbCommand.append (" phase ").append (org.jmol.util.Escape.escape (propertyValue));
					break;
				    case 1073742104:
				    case 1073742122:
					propertyName = "resolution";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					sbCommand.append (" resolution ").appendO (propertyValue);
					break;
				    case 1073742124:
					propertyName = "reverseColor";
					propertyValue = Boolean.TRUE;
					sbCommand.append (" reversecolor");
					break;
				    case 1073742146:
					propertyName = "sigma";
					propertyValue = Float.$valueOf (sigma = this.floatParameter (++i));
					sbCommand.append (" sigma ").appendO (propertyValue);
					break;
				    case 1073742154:
					propertyName = "sphere";
					propertyValue = Float.$valueOf (this.floatParameter (++i));
					sbCommand.append (" sphere ").appendO (propertyValue);
					surfaceObjectSeen = true;
					break;
				    case 1073742156:
					propertyName = "squareData";
					propertyValue = Boolean.TRUE;
					sbCommand.append (" squared");
					break;
				    case 1073741983:
				    case 4:
					var filename = this.parameterAsString (i);
					var sType = null;
					isInline = filename.equalsIgnoreCase ("inline");
					if (this.tokAt (i + 1) == 4) {
					    sType = this.stringParameter (++i);
					    if (!isInline) this.addShapeProperty (propertyList, "calculationType", sType);
					}var firstPass = (!surfaceObjectSeen && !planeSeen);
					propertyName = (firstPass ? "readFile" : "mapColor");
					if (isInline) {
					    if (sType == null) this.error (22);
					    if (isPmesh) sType = org.jmol.util.TextFormat.replaceAllCharacter (sType, "{,}|", ' ');
					    if (this.logMessages) org.jmol.util.Logger.debug ("pmesh inline data:\n" + sType);
					    propertyValue = (this.isSyntaxCheck ? null : sType);
					    this.addShapeProperty (propertyList, "fileName", "");
					    sbCommand.append (" INLINE");
					    surfaceObjectSeen = true;
					} else {
					    if (filename.startsWith ("=") && filename.length > 1) {
						var info = this.viewer.setLoadFormat (filename, '_', false);
						filename = info[0];
						var strCutoff = (!firstPass || !Float.isNaN (cutoff) ? null : info[1]);
						if (strCutoff != null && !this.isSyntaxCheck) {
						    cutoff = org.jmol.script.ScriptVariable.fValue (org.jmol.script.ScriptVariable.getVariable (this.viewer.evaluateExpression (strCutoff)));
						    if (cutoff > 0) {
							if (!Float.isNaN (sigma)) {
							    cutoff *= sigma;
							    sigma = NaN;
							    this.addShapeProperty (propertyList, "sigma", Float.$valueOf (sigma));
							}this.addShapeProperty (propertyList, "cutoff", Float.$valueOf (cutoff));
							sbCommand.append (" cutoff ").appendF (cutoff);
						    }}if (ptWithin == 0) {
							onlyOneModel = "=xxxx";
							if (modelIndex < 0) modelIndex = this.viewer.getCurrentModelIndex ();
							bs = this.viewer.getModelUndeletedAtomsBitSet (modelIndex);
							this.getWithinDistanceVector (propertyList, 2.0, null, bs, false);
							sbCommand.append (" within 2.0 ").append (org.jmol.util.Escape.escape (bs));
						    }if (firstPass) defaultMesh = true;
					    }if (firstPass && this.viewer.getParameter ("_fileType").equals ("Pdb") && Float.isNaN (sigma) && Float.isNaN (cutoff)) {
						this.addShapeProperty (propertyList, "sigma", Float.$valueOf (-1));
						sbCommand.append (" sigma -1.0");
					    }if (filename.equals ("TESTDATA") && org.jmol.script.ScriptEvaluator.testData != null) {
						propertyValue = org.jmol.script.ScriptEvaluator.testData;
						break;
					    }if (filename.equals ("TESTDATA2") && org.jmol.script.ScriptEvaluator.testData2 != null) {
						propertyValue = org.jmol.script.ScriptEvaluator.testData2;
						break;
					    }if (filename.length == 0) {
						if (modelIndex < 0) modelIndex = this.viewer.getCurrentModelIndex ();
						if (surfaceObjectSeen || planeSeen) propertyValue = this.viewer.getModelAuxiliaryInfoValue (modelIndex, "jmolMappedDataInfo");
						if (propertyValue == null) propertyValue = this.viewer.getModelAuxiliaryInfoValue (modelIndex, "jmolSurfaceInfo");
						if (propertyValue != null) {
						    surfaceObjectSeen = true;
						    break;
						}filename = this.getFullPathName ();
					    }var fileIndex = -1;
					    if (this.tokAt (i + 1) == 2) this.addShapeProperty (propertyList, "fileIndex", Integer.$valueOf (fileIndex = this.intParameter (++i)));
					    if (!this.isSyntaxCheck) {
						var fullPathNameOrError;
						var localName = null;
						if (this.fullCommand.indexOf ("# FILE" + nFiles + "=") >= 0) {
						    filename = org.jmol.util.Parser.getQuotedAttribute (this.fullCommand, "# FILE" + nFiles);
						    if (this.tokAt (i + 1) == 1073741848) i += 2;
						} else if (this.tokAt (i + 1) == 1073741848) {
						    localName = this.viewer.getFilePath (this.stringParameter (this.iToken = (i = i + 2)), false);
						    fullPathNameOrError = this.viewer.getFullPathNameOrError (localName);
						    localName = fullPathNameOrError[0];
						    if (this.viewer.getPathForAllFiles () !== "") {
							filename = localName;
							localName = null;
						    } else {
							this.addShapeProperty (propertyList, "localName", localName);
							this.viewer.setPrivateKeyForShape (iShape);
						    }}if (!filename.startsWith ("cache://")) {
							fullPathNameOrError = this.viewer.getFullPathNameOrError (filename);
							filename = fullPathNameOrError[0];
							if (fullPathNameOrError[1] != null) this.errorStr (17, filename + ":" + fullPathNameOrError[1]);
						    }org.jmol.util.Logger.info ("reading isosurface data from " + filename);
						this.addShapeProperty (propertyList, "fileName", filename);
						if (localName != null) filename = localName;
						sbCommand.append (" /*file*/").append (org.jmol.util.Escape.escapeStr (filename));
					    }if (fileIndex >= 0) sbCommand.append (" ").appendI (fileIndex);
					}if (sType != null) sbCommand.append (" ").append (org.jmol.util.Escape.escapeStr (sType));
					surfaceObjectSeen = true;
					break;
				    case 4106:
					propertyName = "connections";
					switch (this.tokAt (++i)) {
					case 10:
					case 1048577:
					    propertyValue = [this.atomExpressionAt (i).nextSetBit (0)];
					    break;
					default:
					    propertyValue = [Clazz.floatToInt (this.floatParameterSet (i, 1, 1)[0])];
					    break;
					}
					i = this.iToken;
					break;
				    case 1073741999:
					propertyName = "link";
					sbCommand.append (" link");
					break;
				    case 1073741994:
					if (iShape != 23) this.error (22);
					pt = this.getPoint3f (this.iToken + 1, false);
					i = this.iToken;
					if (pt.x <= 0 || pt.y <= 0 || pt.z <= 0) break;
					pt.x = Clazz.floatToInt (pt.x);
					pt.y = Clazz.floatToInt (pt.y);
					pt.z = Clazz.floatToInt (pt.z);
					sbCommand.append (" lattice ").append (org.jmol.util.Escape.escapePt (pt));
					if (isMapped) {
					    propertyName = "mapLattice";
					    propertyValue = pt;
					} else {
					    lattice = pt;
					}break;
				    default:
					if (this.theTok == 1073741824) {
					    propertyName = "thisID";
					    propertyValue = str;
					}if (!this.setMeshDisplayProperty (iShape, 0, this.theTok)) {
					    if (org.jmol.script.Token.tokAttr (this.theTok, 1073741824) && !idSeen) {
						this.setShapeId (iShape, i, idSeen);
						i = this.iToken;
						break;
					    }this.error (22);
					}if (iptDisplayProperty == 0) iptDisplayProperty = i;
					i = this.statementLength - 1;
					break;
				    }
				    idSeen = (this.theTok != 12291);
				    if (isWild && surfaceObjectSeen) this.error (22);
				    if (propertyName != null) this.addShapeProperty (propertyList, propertyName, propertyValue);
				}
				if (!this.isSyntaxCheck) {
				    if ((isCavity || haveRadius) && !surfaceObjectSeen) {
					surfaceObjectSeen = true;
					this.addShapeProperty (propertyList, "bsSolvent", (haveRadius ?  new org.jmol.util.BitSet () : this.lookupIdentifierValue ("solvent")));
					this.addShapeProperty (propertyList, "sasurface", Float.$valueOf (0));
				    }if (planeSeen && !surfaceObjectSeen && !isMapped) {
					this.addShapeProperty (propertyList, "nomap", Float.$valueOf (0));
					surfaceObjectSeen = true;
				    }if (thisSetNumber >= 0) this.addShapeProperty (propertyList, "getSurfaceSets", Integer.$valueOf (thisSetNumber - 1));
				    if (discreteColixes != null) {
					this.addShapeProperty (propertyList, "colorDiscrete", discreteColixes);
				    } else if ("sets".equals (colorScheme)) {
					this.addShapeProperty (propertyList, "setColorScheme", null);
				    } else if (colorScheme != null) {
					var ce = this.viewer.getColorEncoder (colorScheme);
					if (ce != null) {
					    ce.isTranslucent = isColorSchemeTranslucent;
					    ce.hi = 3.4028235E38;
					    this.addShapeProperty (propertyList, "remapColor", ce);
					}}if (surfaceObjectSeen && !isLcaoCartoon && sbCommand.indexOf (";") != 0) {
					    propertyList.add (0, ["newObject", null]);
					    var needSelect = (bsSelect == null);
					    if (needSelect) bsSelect = org.jmol.util.BitSetUtil.copy (this.viewer.getSelectionSet (false));
					    if (modelIndex < 0) modelIndex = this.viewer.getCurrentModelIndex ();
					    bsSelect.and (this.viewer.getModelUndeletedAtomsBitSet (modelIndex));
					    if (onlyOneModel != null) {
						var bsModels = this.viewer.getModelBitSet (bsSelect, false);
						if (bsModels.cardinality () != 1) this.errorStr (30, "ISOSURFACE " + onlyOneModel);
						if (needSelect) {
						    propertyList.add (0, ["select", bsSelect]);
						    if (sbCommand.indexOf ("; isosurface map") == 0) {
							sbCommand =  new org.jmol.util.StringXBuilder ().append ("; isosurface map select ").append (org.jmol.util.Escape.escape (bsSelect)).append (sbCommand.substring (16));
						    }}}}if (haveIntersection && !haveSlab) {
							if (!surfaceObjectSeen) this.addShapeProperty (propertyList, "sasurface", Float.$valueOf (0));
							if (!isMapped) {
							    this.addShapeProperty (propertyList, "map", Boolean.TRUE);
							    this.addShapeProperty (propertyList, "select", bs);
							    this.addShapeProperty (propertyList, "sasurface", Float.$valueOf (0));
							}this.addShapeProperty (propertyList, "slab", this.getCapSlabObject (-100, false));
						    }this.setShapeProperty (iShape, "setProperties", propertyList);
				    if (defaultMesh) {
					this.setShapeProperty (iShape, "token", Integer.$valueOf (1073742018));
					this.setShapeProperty (iShape, "token", Integer.$valueOf (1073742046));
					this.setShapeProperty (iShape, "token", Integer.$valueOf (1073741960));
					sbCommand.append (" mesh nofill frontOnly");
				    }}if (lattice != null) this.setShapeProperty (23, "lattice", lattice);
				if (iptDisplayProperty > 0) {
				    if (!this.setMeshDisplayProperty (iShape, iptDisplayProperty, 0)) this.error (22);
				}if (this.isSyntaxCheck) return;
				var area = null;
				var volume = null;
				if (doCalcArea) {
				    area = this.getShapeProperty (iShape, "area");
				    if (Clazz.instanceOf (area, Float)) this.viewer.setFloatProperty ("isosurfaceArea", (area).floatValue ());
				    else this.viewer.setUserVariable ("isosurfaceArea", org.jmol.script.ScriptVariable.getVariableAD (area));
				}if (doCalcVolume) {
				    volume = (doCalcVolume ? this.getShapeProperty (iShape, "volume") : null);
				    if (Clazz.instanceOf (volume, Float)) this.viewer.setFloatProperty ("isosurfaceVolume", (volume).floatValue ());
				    else this.viewer.setUserVariable ("isosurfaceVolume", org.jmol.script.ScriptVariable.getVariableAD (volume));
				}if (!isLcaoCartoon) {
				    var s = null;
				    if (isMapped && !surfaceObjectSeen) {
					this.setShapeProperty (iShape, "finalize", sbCommand.toString ());
				    } else if (surfaceObjectSeen) {
					cmd = sbCommand.toString ();
					this.setShapeProperty (iShape, "finalize", (cmd.indexOf ("; isosurface map") == 0 ? "" : " select " + org.jmol.util.Escape.escape (bsSelect) + " ") + cmd);
					s = this.getShapeProperty (iShape, "ID");
					if (s != null && !this.tQuiet) {
					    cutoff = (this.getShapeProperty (iShape, "cutoff")).floatValue ();
					    if (Float.isNaN (cutoff) && !Float.isNaN (sigma)) {
						org.jmol.util.Logger.error ("sigma not supported");
					    }s += " created";
					    if (isIsosurface) s += " with cutoff=" + cutoff;
					    var minMax = this.getShapeProperty (iShape, "minMaxInfo");
					    if (minMax[0] != 3.4028235E38) s += " min=" + minMax[0] + " max=" + minMax[1];
					    s += "; " + org.jmol.viewer.JmolConstants.shapeClassBases[iShape].toLowerCase () + " count: " + this.getShapeProperty (iShape, "count");
					    s += this.getIsosurfaceDataRange (iShape, "\n");
					}}var sarea;
				    var svol;
				    if (doCalcArea || doCalcVolume) {
					sarea = (doCalcArea ? "isosurfaceArea = " + (Clazz.instanceOf (area, Float) ? area : org.jmol.util.Escape.escapeAF (area)) : null);
					svol = (doCalcVolume ? "isosurfaceVolume = " + (Clazz.instanceOf (volume, Float) ? volume : org.jmol.util.Escape.escapeAF (volume)) : null);
					if (s == null) {
					    if (doCalcArea) this.showString (sarea);
					    if (doCalcVolume) this.showString (svol);
					} else {
					    if (doCalcArea) s += "\n" + sarea;
					    if (doCalcVolume) s += "\n" + svol;
					}}if (s != null) this.showString (s);
				}if (translucency != null) this.setShapeProperty (iShape, "translucency", translucency);
				this.setShapeProperty (iShape, "clear", null);
				if (toCache) {
				    var id = this.getShapeProperty (iShape, "ID");
				    this.viewer.cachePut ("cache://isosurface_" + id, this.getShapeProperty (iShape, "jvxlDataXml"));
				    this.runScript ("isosurface ID \"" + id + "\" delete;isosurface ID \"" + id + "\"" + (modelIndex >= 0 ? " model " + modelIndex : "") + " \"cache://isosurface_" + this.getShapeProperty (iShape, "ID") + "\"");
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getColorRange", 
			    ($fz = function (i) {
				var color1 = this.getArgbParam (i);
				if (this.tokAt (++this.iToken) != 1074790746) this.error (22);
				var color2 = this.getArgbParam (++this.iToken);
				var nColors = (this.tokAt (this.iToken + 1) == 2 ? this.intParameter (++this.iToken) : 0);
				return org.jmol.util.ColorEncoder.getColorSchemeList (org.jmol.util.ColorEncoder.getPaletteAtoB (color1, color2, nColors));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getIsosurfaceDataRange", 
			    ($fz = function (iShape, sep) {
				var dataRange = this.getShapeProperty (iShape, "dataRange");
				return (dataRange != null && dataRange[0] != 3.4028235E38 && dataRange[0] != dataRange[1] ? sep + "isosurface" + " full data range " + dataRange[0] + " to " + dataRange[1] + " with color scheme spanning " + dataRange[2] + " to " + dataRange[3] : "");
			    }, $fz.isPrivate = true, $fz), "~N,~S");
	Clazz.defineMethod (c$, "getWithinDistanceVector", 
			    ($fz = function (propertyList, distance, ptc, bs, isShow) {
				var v =  new java.util.ArrayList ();
				var pts =  new Array (2);
				if (bs == null) {
				    var pt1 = org.jmol.util.Point3f.new3 (distance, distance, distance);
				    var pt0 = org.jmol.util.Point3f.newP (ptc);
				    pt0.sub (pt1);
				    pt1.add (ptc);
				    pts[0] = pt0;
				    pts[1] = pt1;
				    v.add (ptc);
				} else {
				    var bbox = this.viewer.getBoxInfo (bs, -Math.abs (distance));
				    pts[0] = bbox.getBboxVertices ()[0];
				    pts[1] = bbox.getBboxVertices ()[7];
				    if (bs.cardinality () == 1) v.add (this.viewer.getAtomPoint3f (bs.nextSetBit (0)));
				}if (v.size () == 1 && !isShow) {
				    this.addShapeProperty (propertyList, "withinDistance", Float.$valueOf (distance));
				    this.addShapeProperty (propertyList, "withinPoint", v.get (0));
				}this.addShapeProperty (propertyList, (isShow ? "displayWithin" : "withinPoints"), [Float.$valueOf (distance), pts, bs, v]);
			    }, $fz.isPrivate = true, $fz), "java.util.List,~N,org.jmol.util.Point3f,org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "setMeshDisplayProperty", 
			    ($fz = function (shape, i, tok) {
				var propertyName = null;
				var propertyValue = null;
				var allowCOLOR = (shape == 24);
				var checkOnly = (i == 0);
				if (!checkOnly) tok = this.getToken (i).tok;
				switch (tok) {
				case 1766856708:
				    if (allowCOLOR) this.iToken++;
				    else break;
				case 1073742074:
				case 1073742180:
				    if (!checkOnly) this.colorShape (shape, this.iToken, false);
				    return true;
				case 0:
				case 12291:
				case 1048589:
				case 1048588:
				case 12294:
				case 3145770:
				case 1610625028:
				case 3145768:
				    if (this.iToken == 1 && shape >= 0 && this.tokAt (2) == 0) this.setShapeProperty (shape, "thisID", null);
				    if (tok == 0) return (this.iToken == 1);
				    if (checkOnly) return true;
				    switch (tok) {
				    case 12291:
					this.setShapeProperty (shape, "delete", null);
					return true;
				    case 3145770:
				    case 12294:
					tok = 1048588;
					break;
				    case 3145768:
					tok = 1048589;
					break;
				    case 1610625028:
					if (i + 1 == this.statementLength) tok = 1048589;
					break;
				    }
				case 1073741958:
				case 1073741862:
				case 1073741964:
				case 1073741898:
				case 1073742039:
				case 1113198595:
				case 1073742042:
				case 1073742018:
				case 1073742052:
				case 1073741938:
				case 1073742046:
				case 1073742182:
				case 1073742060:
				case 1073741960:
				case 1073742058:
				    propertyName = "token";
				    propertyValue = Integer.$valueOf (tok);
				    break;
				}
				if (propertyName == null) return false;
				if (checkOnly) return true;
				this.setShapeProperty (shape, propertyName, propertyValue);
				if ((this.tokAt (this.iToken + 1)) != 0) {
				    if (!this.setMeshDisplayProperty (shape, ++this.iToken, 0)) --this.iToken;
				}return true;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "bind", 
			    ($fz = function () {
				var mouseAction = this.stringParameter (1);
				var name = this.parameterAsString (2);
				var range1 = null;
				var range2 = null;
				this.checkLength (3);
				if (!this.isSyntaxCheck) this.viewer.bindAction (mouseAction, name, range1, range2);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "unbind", 
			    ($fz = function () {
				if (this.statementLength != 1) this.checkLength23 ();
				var mouseAction = this.optParameterAsString (1);
				var name = this.optParameterAsString (2);
				if (mouseAction.length == 0 || this.tokAt (1) == 1048579) mouseAction = null;
				if (name.length == 0 || this.tokAt (2) == 1048579) name = null;
				if (name == null && mouseAction != null && org.jmol.viewer.ActionManager.getActionFromName (mouseAction) >= 0) {
				    name = mouseAction;
				    mouseAction = null;
				}if (!this.isSyntaxCheck) this.viewer.unBindAction (mouseAction, name);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "undoRedoMove", 
			    ($fz = function () {
				var n = 1;
				var len = 2;
				switch (this.tokAt (1)) {
				case 0:
				    len = 1;
				    break;
				case 1048579:
				    n = 0;
				    break;
				case 2:
				    n = this.intParameter (1);
				    break;
				default:
				    this.error (22);
				}
				this.checkLength (len);
				if (!this.isSyntaxCheck) this.viewer.undoMoveAction (this.tokAt (0), n);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getAtomsNearSurface", 
			    function (distance, surfaceId) {
				var data = [surfaceId, null, null];
				if (this.isSyntaxCheck) return  new org.jmol.util.BitSet ();
				if (this.getShapePropertyData (23, "getVertices", data)) return this.viewer.getAtomsNearPts (distance, data[1], data[2]);
				data[1] = Integer.$valueOf (0);
				data[2] = Integer.$valueOf (-1);
				if (this.getShapePropertyData (22, "getCenter", data)) return this.viewer.getAtomsNearPt (distance, data[2]);
				return  new org.jmol.util.BitSet ();
			    }, "~N,~S");
	c$.getFloatEncodedInt = Clazz.defineMethod (c$, "getFloatEncodedInt", 
						    function (strDecimal) {
							var pt = strDecimal.indexOf (".");
							if (pt < 1 || strDecimal.charAt (0) == '-' || strDecimal.endsWith (".") || strDecimal.contains (".0")) return 2147483647;
							var i = 0;
							var j = 0;
							if (pt > 0) {
							    try {
								i = Integer.parseInt (strDecimal.substring (0, pt));
								if (i < 0) i = -i;
							    } catch (e) {
								if (Clazz.exceptionOf (e, NumberFormatException)) {
								    i = -1;
								} else {
								    throw e;
								}
							    }
							}if (pt < strDecimal.length - 1) try {
							    j = Integer.parseInt (strDecimal.substring (pt + 1));
							} catch (e) {
							    if (Clazz.exceptionOf (e, NumberFormatException)) {
							    } else {
								throw e;
							    }
							}
							i = i * 1000000 + j;
							return (i < 0 ? 2147483647 : i);
						    }, "~S");
	c$.getPartialBondOrderFromFloatEncodedInt = Clazz.defineMethod (c$, "getPartialBondOrderFromFloatEncodedInt", 
									function (bondOrderInteger) {
									    return (((Clazz.doubleToInt (bondOrderInteger / 1000000)) % 6) << 5) + ((bondOrderInteger % 1000000) & 0x1F);
									}, "~N");
	c$.getBondOrderFromString = Clazz.defineMethod (c$, "getBondOrderFromString", 
							function (s) {
							    return (s.indexOf (' ') < 0 ? org.jmol.util.JmolEdge.getBondOrderFromString (s) : s.toLowerCase ().indexOf ("partial ") == 0 ? org.jmol.script.ScriptEvaluator.getPartialBondOrderFromString (s.substring (8).trim ()) : 131071);
							}, "~S");
	c$.getPartialBondOrderFromString = Clazz.defineMethod (c$, "getPartialBondOrderFromString", 
							       ($fz = function (s) {
								   return org.jmol.script.ScriptEvaluator.getPartialBondOrderFromFloatEncodedInt (org.jmol.script.ScriptEvaluator.getFloatEncodedInt (s));
							       }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineStatics (c$,
			     "SCRIPT_COMPLETED", "Script completed",
			     "EXPRESSION_KEY", "e_x_p_r_e_s_s_i_o_n",
			     "scriptLevelMax", 100,
			     "ERROR_axisExpected", 0,
			     "ERROR_backgroundModelError", 1,
			     "ERROR_badArgumentCount", 2,
			     "ERROR_badMillerIndices", 3,
			     "ERROR_badRGBColor", 4,
			     "ERROR_booleanExpected", 5,
			     "ERROR_booleanOrNumberExpected", 6,
			     "ERROR_booleanOrWhateverExpected", 7,
			     "ERROR_colorExpected", 8,
			     "ERROR_colorOrPaletteRequired", 9,
			     "ERROR_commandExpected", 10,
			     "ERROR_coordinateOrNameOrExpressionRequired", 11,
			     "ERROR_drawObjectNotDefined", 12,
			     "ERROR_endOfStatementUnexpected", 13,
			     "ERROR_expressionExpected", 14,
			     "ERROR_expressionOrIntegerExpected", 15,
			     "ERROR_filenameExpected", 16,
			     "ERROR_fileNotFoundException", 17,
			     "ERROR_incompatibleArguments", 18,
			     "ERROR_insufficientArguments", 19,
			     "ERROR_integerExpected", 20,
			     "ERROR_integerOutOfRange", 21,
			     "ERROR_invalidArgument", 22,
			     "ERROR_invalidParameterOrder", 23,
			     "ERROR_keywordExpected", 24,
			     "ERROR_moCoefficients", 25,
			     "ERROR_moIndex", 26,
			     "ERROR_moModelError", 27,
			     "ERROR_moOccupancy", 28,
			     "ERROR_moOnlyOne", 29,
			     "ERROR_multipleModelsDisplayedNotOK", 30,
			     "ERROR_noData", 31,
			     "ERROR_noPartialCharges", 32,
			     "ERROR_noUnitCell", 33,
			     "ERROR_numberExpected", 34,
			     "ERROR_numberMustBe", 35,
			     "ERROR_numberOutOfRange", 36,
			     "ERROR_objectNameExpected", 37,
			     "ERROR_planeExpected", 38,
			     "ERROR_propertyNameExpected", 39,
			     "ERROR_spaceGroupNotFound", 40,
			     "ERROR_stringExpected", 41,
			     "ERROR_stringOrIdentifierExpected", 42,
			     "ERROR_tooManyPoints", 43,
			     "ERROR_tooManyScriptLevels", 44,
			     "ERROR_unrecognizedAtomProperty", 45,
			     "ERROR_unrecognizedBondProperty", 46,
			     "ERROR_unrecognizedCommand", 47,
			     "ERROR_unrecognizedExpression", 48,
			     "ERROR_unrecognizedObject", 49,
			     "ERROR_unrecognizedParameter", 50,
			     "ERROR_unrecognizedParameterWarning", 51,
			     "ERROR_unrecognizedShowParameter", 52,
			     "ERROR_what", 53,
			     "ERROR_writeWhat", 54,
			     "ERROR_multipleModelsNotOK", 55,
			     "ERROR_cannotSet", 56,
			     "iProcess", 0,
			     "testData", null,
			     "testData2", null);
    });
    // 
    //// org\jmol\script\ScriptVariableInt.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["org.jmol.script.ScriptVariable"], "org.jmol.script.ScriptVariableInt", null, function () {
	c$ = Clazz.declareType (org.jmol.script, "ScriptVariableInt", org.jmol.script.ScriptVariable);
	Clazz.makeConstructor (c$, 
			       function (intValue) {
				   Clazz.superConstructor (this, org.jmol.script.ScriptVariableInt, [2]);
				   this.intValue = intValue;
			       }, "~N");
    });
    // 
    //// org\jmol\shape\Shape.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (null, "org.jmol.shape.Shape", ["org.jmol.constant.EnumPalette", "org.jmol.util.Colix", "$.Logger", "org.jmol.viewer.JmolConstants", "$.StateManager"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.modelSet = null;
	    this.gdata = null;
	    this.shapeID = 0;
	    this.myVisibilityFlag = 0;
	    this.translucentLevel = 0;
	    this.translucentAllowed = true;
	    this.isBioShape = false;
	    this.xmlProperties = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "Shape");
	Clazz.defineMethod (c$, "getViewer", 
			    function () {
				return this.viewer;
			    });
	Clazz.defineMethod (c$, "initializeShape", 
			    function (viewer, g3d, modelSet, shapeID) {
				this.viewer = viewer;
				this.gdata = g3d;
				this.shapeID = shapeID;
				this.myVisibilityFlag = org.jmol.viewer.JmolConstants.getShapeVisibilityFlag (shapeID);
				this.setModelSet (modelSet);
				this.initShape ();
			    }, "org.jmol.viewer.Viewer,org.jmol.util.GData,org.jmol.modelset.ModelSet,~N");
	Clazz.defineMethod (c$, "setModelSet", 
			    function (modelSet) {
				this.modelSet = modelSet;
				this.initModelSet ();
			    }, "org.jmol.modelset.ModelSet");
	Clazz.defineMethod (c$, "initModelSet", 
			    function () {
			    });
	Clazz.defineMethod (c$, "initShape", 
			    function () {
			    });
	Clazz.defineMethod (c$, "merge", 
			    function (shape) {
			    }, "org.jmol.shape.Shape");
	Clazz.defineMethod (c$, "setShapeSizeRD", 
			    function (size, rd, bsSelected) {
				this.setXmlProperty ("size", (rd == null ? Integer.$valueOf (size) : rd), bsSelected);
				if (rd == null) this.setSize (size, bsSelected);
				else this.setSizeRD (rd, bsSelected);
			    }, "~N,org.jmol.atomdata.RadiusData,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setSize", 
			    function (size, bsSelected) {
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setSizeRD", 
			    function (rd, bsSelected) {
			    }, "org.jmol.atomdata.RadiusData,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapeProperty", 
			    function (propertyName, value, bsSelected) {
				if (!this.setXmlProperty (propertyName, value, bsSelected)) this.setProperty (propertyName, value, bsSelected == null ? this.viewer.getSelectionSet (false) : bsSelected);
			    }, "~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setXmlProperty", 
			    ($fz = function (propertyName, value, bs) {
				var myType = org.jmol.viewer.JmolConstants.shapeClassBases[this.shapeID];
				if (org.jmol.util.Logger.debuggingHigh && this.shapeID != 33) org.jmol.util.Logger.info (myType + " setProperty: " + propertyName + " = " + value);
				return false;
			    }, $fz.isPrivate = true, $fz), "~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setProperty", 
			    function (propertyName, value, bsSelected) {
				if (propertyName === "setProperties") {
				    var propertyList = value;
				    while (propertyList.size () > 0) {
					var data = propertyList.remove (0);
					this.setShapeProperty ((data[0]).intern (), data[1], null);
				    }
				    return;
				}if (propertyName === "translucentLevel") {
				    this.translucentLevel = (value).floatValue ();
				    return;
				}if (propertyName === "refreshTrajectories") {
				    return;
				}org.jmol.util.Logger.warn ("unassigned " + org.jmol.viewer.JmolConstants.shapeClassBases[this.shapeID] + " + shape setProperty:" + propertyName + ":" + value);
			    }, "~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getPropertyData", 
			    function (property, data) {
				return false;
			    }, "~S,~A");
	Clazz.defineMethod (c$, "getProperty", 
			    function (property, index) {
				return null;
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getIndexFromName", 
			    function (thisID) {
				return -1;
			    }, "~S");
	Clazz.defineMethod (c$, "wasClicked", 
			    function (x, y) {
				return false;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "findNearestAtomIndex", 
			    function (xMouse, yMouse, closest, bsNot) {
			    }, "~N,~N,~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "checkBoundsMinMax", 
			    function (pointMin, pointMax) {
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setModelClickability", 
			    function () {
			    });
	Clazz.defineMethod (c$, "checkObjectClicked", 
			    function (x, y, modifiers, bsVisible) {
				return null;
			    }, "~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "checkObjectHovered", 
			    function (x, y, bsVisible) {
				return false;
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "checkObjectDragged", 
			    function (prevX, prevY, x, y, modifiers, bsVisible) {
				return false;
			    }, "~N,~N,~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "coordinateInRange", 
			    function (x, y, vertex, dmin2, ptXY) {
				this.viewer.transformPtScr (vertex, ptXY);
				var d2 = (x - ptXY.x) * (x - ptXY.x) + (y - ptXY.y) * (y - ptXY.y);
				return (d2 < dmin2 ? d2 : -1);
			    }, "~N,~N,org.jmol.util.Point3f,~N,org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "setColix", 
			    function (colix, paletteID, atomIndex) {
				return this.setColix (colix, paletteID, this.modelSet.atoms[atomIndex]);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "setColix", 
			    function (colix, paletteID, atom) {
				return (colix == 2 ? this.viewer.getColixAtomPalette (atom, paletteID) : colix);
			    }, "~N,~N,org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "setColix", 
			    function (colix, pid, bond) {
				return (colix == 2 ? this.viewer.getColixBondPalette (bond, pid) : colix);
			    }, "~N,~N,org.jmol.modelset.Bond");
	Clazz.defineMethod (c$, "getShapeDetail", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getShapeState", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "setVisibilityFlags", 
			    function (bs) {
			    }, "org.jmol.util.BitSet");
	c$.setStateInfo = Clazz.defineMethod (c$, "setStateInfo", 
					      function (ht, i, key) {
						  org.jmol.shape.Shape.setStateInfo (ht, i, i, key);
					      }, "java.util.Map,~N,~S");
	c$.setStateInfo = Clazz.defineMethod (c$, "setStateInfo", 
					      function (ht, i1, i2, key) {
						  org.jmol.viewer.StateManager.setStateInfo (ht, i1, i2, key);
					      }, "java.util.Map,~N,~N,~S");
	c$.getShapeCommands = Clazz.defineMethod (c$, "getShapeCommands", 
						  function (htDefine, htMore) {
						      return org.jmol.viewer.StateManager.getCommands (htDefine, htMore, "select");
						  }, "java.util.Map,java.util.Map");
	c$.getShapeCommandsSel = Clazz.defineMethod (c$, "getShapeCommandsSel", 
						     function (htDefine, htMore, selectCmd) {
							 return org.jmol.viewer.StateManager.getCommands (htDefine, htMore, selectCmd);
						     }, "java.util.Map,java.util.Map,~S");
	c$.appendCmd = Clazz.defineMethod (c$, "appendCmd", 
					   function (s, cmd) {
					       org.jmol.viewer.StateManager.appendCmd (s, cmd);
					   }, "org.jmol.util.StringXBuilder,~S");
	c$.getFontCommand = Clazz.defineMethod (c$, "getFontCommand", 
						function (type, font) {
						    if (font == null) return "";
						    return "font " + type + " " + font.fontSizeNominal + " " + font.fontFace + " " + font.fontStyle;
						}, "~S,org.jmol.util.JmolFont");
	Clazz.defineMethod (c$, "getColorCommandUnk", 
			    function (type, colix) {
				return this.getColorCommand (type, org.jmol.constant.EnumPalette.UNKNOWN.id, colix);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getColorCommand", 
			    function (type, pid, colix) {
				if (pid == org.jmol.constant.EnumPalette.UNKNOWN.id && colix == 0) return "";
				return "color " + type + " " + org.jmol.shape.Shape.encodeTransColor (pid, colix, this.translucentAllowed);
			    }, "~S,~N,~N");
	c$.encodeTransColor = Clazz.defineMethod (c$, "encodeTransColor", 
						  ($fz = function (pid, colix, translucentAllowed) {
						      if (pid == org.jmol.constant.EnumPalette.UNKNOWN.id && colix == 0) return "";
						      return (translucentAllowed ? org.jmol.shape.Shape.getTranslucentLabel (colix) + " " : "") + (pid != org.jmol.constant.EnumPalette.UNKNOWN.id && !org.jmol.constant.EnumPalette.isPaletteVariable (pid) ? org.jmol.constant.EnumPalette.getPaletteName (pid) : org.jmol.shape.Shape.encodeColor (colix));
						  }, $fz.isPrivate = true, $fz), "~N,~N,~B");
	c$.encodeColor = Clazz.defineMethod (c$, "encodeColor", 
					     function (colix) {
						 return (org.jmol.util.Colix.isColixColorInherited (colix) ? "none" : org.jmol.util.Colix.getHexCode (colix));
					     }, "~N");
	c$.getTranslucentLabel = Clazz.defineMethod (c$, "getTranslucentLabel", 
						     function (colix) {
							 return (org.jmol.util.Colix.isColixTranslucent (colix) ? "translucent " + org.jmol.util.Colix.getColixTranslucencyFractional (colix) : "opaque");
						     }, "~N");
	c$.getColix = Clazz.defineMethod (c$, "getColix", 
					  function (colixes, i, atom) {
					      return org.jmol.util.Colix.getColixInherited ((colixes == null || i >= colixes.length ? 0 : colixes[i]), atom.getColix ());
					  }, "~A,~N,org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getSize", 
			    function (atomIndex) {
				return 0;
			    }, "~N");
	Clazz.defineMethod (c$, "getSize", 
			    function (group) {
				return 0;
			    }, "org.jmol.modelset.Group");
	Clazz.defineStatics (c$,
			     "RADIUS_MAX", 4);
    });
    // 
    //// java\io\ByteArrayInputStream.js 
    // 
    ﻿Clazz.load (["java.io.InputStream"], "java.io.ByteArrayInputStream", ["java.lang.IndexOutOfBoundsException", "$.NullPointerException"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.buf = null;
	    this.pos = 0;
	    this.$mark = 0;
	    this.count = 0;
	    Clazz.instantialize (this, arguments);
	}, java.io, "ByteArrayInputStream", java.io.InputStream);
	Clazz.makeConstructor (c$, 
			       function (buf) {
				   Clazz.superConstructor (this, java.io.ByteArrayInputStream, []);
				   this.buf = buf;
				   this.pos = 0;
				   this.count = buf.length;
			       }, "~A");
	Clazz.overrideMethod (c$, "readByteAsInt", 
			      function () {
				  return (this.pos < this.count) ? (this.buf[this.pos++] & 0xff) : -1;
			      });
	Clazz.overrideMethod (c$, "read", 
			      function (b, off, len) {
				  if (b == null) {
				      throw  new NullPointerException ();
				  } else if (off < 0 || len < 0 || len > b.length - off) {
				      throw  new IndexOutOfBoundsException ();
				  }if (this.pos >= this.count) {
				      return -1;
				  }var avail = this.count - this.pos;
				  if (len > avail) {
				      len = avail;
				  }if (len <= 0) {
				      return 0;
				  }System.arraycopy (this.buf, this.pos, b, off, len);
				  this.pos += len;
				  return len;
			      }, "~A,~N,~N");
	Clazz.overrideMethod (c$, "skip", 
			      function (n) {
				  var k = this.count - this.pos;
				  if (n < k) {
				      k = n < 0 ? 0 : n;
				  }this.pos += k;
				  return k;
			      }, "~N");
	Clazz.overrideMethod (c$, "available", 
			      function () {
				  return this.count - this.pos;
			      });
	Clazz.overrideMethod (c$, "markSupported", 
			      function () {
				  return true;
			      });
	Clazz.overrideMethod (c$, "mark", 
			      function (readAheadLimit) {
				  this.$mark = this.pos;
			      }, "~N");
	Clazz.overrideMethod (c$, "reset", 
			      function () {
				  this.pos = this.$mark;
			      });
	Clazz.overrideMethod (c$, "close", 
			      function () {
			      });
    });
    // 
    //// java\io\InputStreamReader.js 
    // 
    ﻿Clazz.load (["java.io.Reader"], "java.io.InputStreamReader", ["java.io.UTFDataFormatException", "java.lang.NullPointerException"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$in = null;
	    this.isOpen = true;
	    this.bytearr = null;
	    this.pos = 0;
	    Clazz.instantialize (this, arguments);
	}, java.io, "InputStreamReader", java.io.Reader);
	Clazz.makeConstructor (c$, 
			       function ($in, charsetName) {
				   Clazz.superConstructor (this, java.io.InputStreamReader, [$in]);
				   this.$in = $in;
				   if (!"UTF-8".equals (charsetName)) throw  new NullPointerException ("charsetName");
			       }, "java.io.InputStream,~S");
	Clazz.defineMethod (c$, "getEncoding", 
			    function () {
				return "UTF-8";
			    });
	Clazz.overrideMethod (c$, "read", 
			      function (cbuf, offset, length) {
				  if (this.bytearr == null || this.bytearr.length < length) this.bytearr =  Clazz.newByteArray (length, 0);
				  var c;
				  var char2;
				  var char3;
				  var count = 0;
				  var chararr_count = 0;
				  var len = this.$in.read (this.bytearr, this.pos, length - this.pos);
				  if (len < 0) return -1;
				  this.pos = 0;
				  while (count < len) {
				      c = this.bytearr[count] & 0xff;
				      if (c > 127) break;
				      count++;
				      cbuf[chararr_count++] = String.fromCharCode (c);
				  }
				  while (count < len) {
				      c = this.bytearr[count] & 0xff;
				      switch (c >> 4) {
				      case 0:
				      case 1:
				      case 2:
				      case 3:
				      case 4:
				      case 5:
				      case 6:
				      case 7:
					  count++;
					  cbuf[chararr_count++] = String.fromCharCode (c);
					  break;
				      case 12:
				      case 13:
					  if (count > len - 2) break;
					  count += 2;
					  char2 = this.bytearr[count - 1];
					  if ((char2 & 0xC0) != 0x80) throw  new java.io.UTFDataFormatException ("malformed input around byte " + count);
					  cbuf[chararr_count++] = String.fromCharCode (((c & 0x1F) << 6) | (char2 & 0x3F));
					  break;
				      case 14:
					  if (count > len - 3) break;
					  count += 3;
					  char2 = this.bytearr[count - 2];
					  char3 = this.bytearr[count - 1];
					  if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw  new java.io.UTFDataFormatException ("malformed input around byte " + (count - 1));
					  cbuf[chararr_count++] = String.fromCharCode (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
					  break;
				      default:
					  throw  new java.io.UTFDataFormatException ("malformed input around byte " + count);
				      }
				  }
				  this.pos = len - count;
				  for (var i = 0; i < this.pos; i++) {
				      this.bytearr[i] = this.bytearr[count++];
				  }
				  return len - this.pos;
			      }, "~A,~N,~N");
	Clazz.overrideMethod (c$, "ready", 
			      function () {
				  return this.isOpen;
			      });
	Clazz.overrideMethod (c$, "close", 
			      function () {
				  this.$in.close ();
				  this.isOpen = false;
			      });
    });
    // 
    //// org\jmol\viewer\FileManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.lang.Enum", "java.util.Hashtable"], "org.jmol.viewer.FileManager", ["java.io.BufferedInputStream", "$.ByteArrayInputStream", "java.net.URL", "$.URLEncoder", "java.util.ArrayList", "org.jmol.api.Interface", "org.jmol.io.Base64", "$.FileReader", "$.JmolBinary", "org.jmol.util.Escape", "$.Logger", "$.StringXBuilder", "$.TextFormat", "org.jmol.viewer.DataManager", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.pathForAllFiles = "";
	    this.nameAsGiven = "zapped";
	    this.fullPathName = null;
	    this.fileName = null;
	    this.appletDocumentBaseURL = null;
	    this.appletProxy = null;
	    this.pngjCache = null;
	    this.spardirCache = null;
	    this.cache = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "FileManager");
	Clazz.prepareFields (c$, function () {
	    this.cache =  new java.util.Hashtable ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
				   this.clear ();
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.fullPathName = this.fileName = this.nameAsGiven = this.viewer.getZapName ();
				this.spardirCache = null;
			    });
	Clazz.defineMethod (c$, "setLoadState", 
			    ($fz = function (htParams) {
				if (this.viewer.getPreserveState ()) {
				    htParams.put ("loadState", this.viewer.getLoadState (htParams));
				}}, $fz.isPrivate = true, $fz), "java.util.Map");
	Clazz.defineMethod (c$, "getPathForAllFiles", 
			    function () {
				return this.pathForAllFiles;
			    });
	Clazz.defineMethod (c$, "setPathForAllFiles", 
			    function (value) {
				if (value.length > 0 && !value.endsWith ("/") && !value.endsWith ("|")) value += "/";
				return this.pathForAllFiles = value;
			    }, "~S");
	Clazz.defineMethod (c$, "setFileInfo", 
			    function (fileInfo) {
				this.fullPathName = fileInfo[0];
				this.fileName = fileInfo[1];
				this.nameAsGiven = fileInfo[2];
			    }, "~A");
	Clazz.defineMethod (c$, "getFileInfo", 
			    function () {
				return [this.fullPathName, this.fileName, this.nameAsGiven];
			    });
	Clazz.defineMethod (c$, "getFullPathName", 
			    function () {
				return this.fullPathName != null ? this.fullPathName : this.nameAsGiven;
			    });
	Clazz.defineMethod (c$, "getFileName", 
			    function () {
				return this.fileName != null ? this.fileName : this.nameAsGiven;
			    });
	Clazz.defineMethod (c$, "getAppletDocumentBase", 
			    function () {
				return (this.appletDocumentBaseURL == null ? "" : this.appletDocumentBaseURL.toString ());
			    });
	Clazz.defineMethod (c$, "setAppletContext", 
			    function (documentBase) {
				try {
				    this.appletDocumentBaseURL = (documentBase.length == 0 ? null :  new java.net.URL (Clazz.castNullAs ("java.net.URL"), documentBase, null));
				} catch (e) {
				    if (Clazz.exceptionOf (e, java.net.MalformedURLException)) {
				    } else {
					throw e;
				    }
				}
			    }, "~S");
	Clazz.defineMethod (c$, "setAppletProxy", 
			    function (appletProxy) {
				this.appletProxy = (appletProxy == null || appletProxy.length == 0 ? null : appletProxy);
			    }, "~S");
	Clazz.defineMethod (c$, "getState", 
			    function (sfunc) {
				var commands =  new org.jmol.util.StringXBuilder ();
				if (sfunc != null) {
				    sfunc.append ("  _setFileState;\n");
				    commands.append ("function _setFileState() {\n\n");
				}if (commands.indexOf ("append") < 0 && this.viewer.getModelSetFileName ().equals ("zapped")) commands.append ("  zap;\n");
				this.viewer.appendLoadStates (commands);
				if (sfunc != null) commands.append ("\n}\n\n");
				return commands.toString ();
			    }, "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "getFileTypeName", 
			    function (fileName) {
				var pt = fileName.indexOf ("::");
				if (pt >= 0) return fileName.substring (0, pt);
				if (fileName.startsWith ("=")) return "pdb";
				var br = this.getUnzippedBufferedReaderOrErrorMessageFromName (fileName, null, true, false, true, true);
				if (Clazz.instanceOf (br, java.io.BufferedReader)) return this.viewer.getModelAdapter ().getFileTypeName (br);
				if (Clazz.instanceOf (br, org.jmol.api.ZInputStream)) {
				    var zipDirectory = this.getZipDirectoryAsString (fileName);
				    if (zipDirectory.indexOf ("JmolManifest") >= 0) return "Jmol";
				    return this.viewer.getModelAdapter ().getFileTypeName (org.jmol.io.JmolBinary.getBufferedReaderForString (zipDirectory));
				}if (org.jmol.util.Escape.isAS (br)) {
				    return (br)[0];
				}return null;
			    }, "~S");
	Clazz.defineMethod (c$, "getZipDirectoryAsString", 
			    ($fz = function (fileName) {
				var t = this.getBufferedInputStreamOrErrorMessageFromName (fileName, fileName, false, false, null, false);
				return org.jmol.io.JmolBinary.getZipDirectoryAsStringAndClose (t);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "createAtomSetCollectionFromFile", 
			    function (name, htParams, isAppend) {
				if (htParams.get ("atomDataOnly") == null) {
				    this.setLoadState (htParams);
				}name = this.viewer.resolveDatabaseFormat (name);
				var pt = name.indexOf ("::");
				var nameAsGiven = (pt >= 0 ? name.substring (pt + 2) : name);
				var fileType = (pt >= 0 ? name.substring (0, pt) : null);
				org.jmol.util.Logger.info ("\nFileManager.getAtomSetCollectionFromFile(" + nameAsGiven + ")" + (name.equals (nameAsGiven) ? "" : " //" + name));
				var names = this.classifyName (nameAsGiven, true);
				if (names.length == 1) return names[0];
				var fullPathName = names[0];
				var fileName = names[1];
				htParams.put ("fullPathName", (fileType == null ? "" : fileType + "::") + fullPathName.$replace ('\\', '/'));
				if (this.viewer.getMessageStyleChime () && this.viewer.getDebugScript ()) this.viewer.scriptStatus ("Requesting " + fullPathName);
				var fileReader =  new org.jmol.io.FileReader (this, this.viewer, fileName, fullPathName, nameAsGiven, fileType, null, htParams, isAppend);
				fileReader.run ();
				return fileReader.getAtomSetCollection ();
			    }, "~S,java.util.Map,~B");
	Clazz.defineMethod (c$, "createAtomSetCollectionFromFiles", 
			    function (fileNames, htParams, isAppend) {
				this.setLoadState (htParams);
				var fullPathNames =  new Array (fileNames.length);
				var namesAsGiven =  new Array (fileNames.length);
				var fileTypes =  new Array (fileNames.length);
				for (var i = 0; i < fileNames.length; i++) {
				    var pt = fileNames[i].indexOf ("::");
				    var nameAsGiven = (pt >= 0 ? fileNames[i].substring (pt + 2) : fileNames[i]);
				    var fileType = (pt >= 0 ? fileNames[i].substring (0, pt) : null);
				    var names = this.classifyName (nameAsGiven, true);
				    if (names.length == 1) return names[0];
				    fullPathNames[i] = names[0];
				    fileNames[i] = names[0].$replace ('\\', '/');
				    fileTypes[i] = fileType;
				    namesAsGiven[i] = nameAsGiven;
				}
				htParams.put ("fullPathNames", fullPathNames);
				htParams.put ("fileTypes", fileTypes);
				var filesReader = this.newFilesReader (fullPathNames, namesAsGiven, fileTypes, null, htParams, isAppend);
				filesReader.run ();
				return filesReader.getAtomSetCollection ();
			    }, "~A,java.util.Map,~B");
	Clazz.defineMethod (c$, "createAtomSetCollectionFromString", 
			    function (strModel, loadScript, htParams, isAppend, isLoadVariable) {
				if (!isLoadVariable) org.jmol.viewer.DataManager.getInlineData (loadScript, strModel, isAppend, this.viewer.getDefaultLoadFilter ());
				this.setLoadState (htParams);
				var isAddH = (strModel.indexOf ("Viewer.AddHydrogens") >= 0);
				var fnames = (isAddH ? this.getFileInfo () : null);
				var fileReader =  new org.jmol.io.FileReader (this, this.viewer, "string", "string", "string", null, org.jmol.io.JmolBinary.getBufferedReaderForString (strModel), htParams, isAppend);
				fileReader.run ();
				if (fnames != null) this.setFileInfo (fnames);
				if (!isAppend && !(Clazz.instanceOf (fileReader.getAtomSetCollection (), String))) {
				    this.viewer.zap (false, true, false);
				    this.fullPathName = this.fileName = (strModel === "1 0 C 0 0" ? "Jmol Model Kit" : "string");
				}return fileReader.getAtomSetCollection ();
			    }, "~S,org.jmol.util.StringXBuilder,java.util.Map,~B,~B");
	Clazz.defineMethod (c$, "createAtomSeCollectionFromStrings", 
			    function (arrayModels, loadScript, htParams, isAppend) {
				if (!htParams.containsKey ("isData")) {
				    var oldSep = "\"" + this.viewer.getDataSeparator () + "\"";
				    var tag = "\"" + (isAppend ? "append" : "model") + " inline\"";
				    var sb =  new org.jmol.util.StringXBuilder ();
				    sb.append ("set dataSeparator \"~~~next file~~~\";\ndata ").append (tag);
				    for (var i = 0; i < arrayModels.length; i++) {
					if (i > 0) sb.append ("~~~next file~~~");
					sb.append (arrayModels[i]);
				    }
				    sb.append ("end ").append (tag).append (";set dataSeparator ").append (oldSep);
				    loadScript.appendSB (sb);
				}this.setLoadState (htParams);
				org.jmol.util.Logger.info ("FileManager.getAtomSetCollectionFromStrings(string[])");
				var fullPathNames =  new Array (arrayModels.length);
				var readers =  new Array (arrayModels.length);
				for (var i = 0; i < arrayModels.length; i++) {
				    fullPathNames[i] = "string[" + i + "]";
				    readers[i] = this.newDataReader (arrayModels[i]);
				}
				var filesReader = this.newFilesReader (fullPathNames, fullPathNames, null, readers, htParams, isAppend);
				filesReader.run ();
				return filesReader.getAtomSetCollection ();
			    }, "~A,org.jmol.util.StringXBuilder,java.util.Map,~B");
	Clazz.defineMethod (c$, "createAtomSeCollectionFromArrayData", 
			    function (arrayData, htParams, isAppend) {
				org.jmol.util.Logger.info ("FileManager.getAtomSetCollectionFromArrayData(Vector)");
				var nModels = arrayData.size ();
				var fullPathNames =  new Array (nModels);
				var readers =  new Array (nModels);
				for (var i = 0; i < nModels; i++) {
				    fullPathNames[i] = "String[" + i + "]";
				    readers[i] = this.newDataReader (arrayData.get (i));
				}
				var filesReader = this.newFilesReader (fullPathNames, fullPathNames, null, readers, htParams, isAppend);
				filesReader.run ();
				return filesReader.getAtomSetCollection ();
			    }, "java.util.List,java.util.Map,~B");
	Clazz.defineMethod (c$, "newFilesReader", 
			    ($fz = function (fullPathNames, namesAsGiven, fileTypes, readers, htParams, isAppend) {
				var fr = org.jmol.api.Interface.getOptionInterface ("io2.FilesReader");
				fr.set (this, this.viewer, fullPathNames, namesAsGiven, fileTypes, readers, htParams, isAppend);
				return fr;
			    }, $fz.isPrivate = true, $fz), "~A,~A,~A,~A,java.util.Map,~B");
	Clazz.defineMethod (c$, "newDataReader", 
			    ($fz = function (data) {
				var reader = (Clazz.instanceOf (data, String) ? "String" : org.jmol.util.Escape.isAS (data) ? "Array" : Clazz.instanceOf (data, java.util.List) ? "List" : null);
				if (reader == null) return null;
				var dr = org.jmol.api.Interface.getOptionInterface ("io2." + reader + "DataReader");
				return dr.setData (data);
			    }, $fz.isPrivate = true, $fz), "~O");
	Clazz.defineMethod (c$, "createAtomSetCollectionFromDOM", 
			    function (DOMNode, htParams) {
				var aDOMReader = org.jmol.api.Interface.getOptionInterface ("io2.DOMReadaer");
				aDOMReader.set (this, this.viewer, DOMNode, htParams);
				aDOMReader.run ();
				return aDOMReader.getAtomSetCollection ();
			    }, "~O,java.util.Map");
	Clazz.defineMethod (c$, "createAtomSetCollectionFromReader", 
			    function (fullPathName, name, reader, htParams) {
				var fileReader =  new org.jmol.io.FileReader (this, this.viewer, name, fullPathName, name, null, reader, htParams, false);
				fileReader.run ();
				return fileReader.getAtomSetCollection ();
			    }, "~S,~S,~O,java.util.Map");
	Clazz.defineMethod (c$, "getBufferedInputStream", 
			    function (fullPathName) {
				var ret = this.getBufferedReaderOrErrorMessageFromName (fullPathName,  new Array (2), true, true);
				return (Clazz.instanceOf (ret, java.io.BufferedInputStream) ? ret : null);
			    }, "~S");
	Clazz.defineMethod (c$, "getBufferedInputStreamOrErrorMessageFromName", 
			    function (name, fullName, showMsg, checkOnly, outputBytes, allowReader) {
				var cacheBytes = (fullName == null ? null : org.jmol.io.JmolBinary.getCachedPngjBytes (this, fullName));
				if (cacheBytes == null) cacheBytes = this.cacheGet (name, true);
				var bis = null;
				var ret = null;
				var errorMessage = null;
				try {
				    if (cacheBytes == null) {
					var isPngjBinaryPost = (name.indexOf ("?POST?_PNGJBIN_") >= 0);
					var isPngjPost = (isPngjBinaryPost || name.indexOf ("?POST?_PNGJ_") >= 0);
					if (name.indexOf ("?POST?_PNG_") > 0 || isPngjPost) {
					    var o = this.viewer.getImageAs (isPngjPost ? "PNGJ" : "PNG", -1, 0, 0, null, null);
					    if (!org.jmol.util.Escape.isAB (o)) return o;
					    if (isPngjBinaryPost) {
						outputBytes = o;
						name = org.jmol.util.TextFormat.simpleReplace (name, "?_", "=_");
					    } else {
						name =  new org.jmol.util.StringXBuilder ().append (name).append ("=").appendSB (org.jmol.io.Base64.getBase64 (o)).toString ();
					    }}var iurl = org.jmol.viewer.FileManager.urlPrefixes.length;
					for (; --iurl >= 0; ) if (name.startsWith (org.jmol.viewer.FileManager.urlPrefixes[iurl])) break;

					var isURL = (iurl >= 0);
					var post = null;
					if (isURL && (iurl = name.indexOf ("?POST?")) >= 0) {
					    post = name.substring (iurl + 6);
					    name = name.substring (0, iurl);
					}var isApplet = (this.appletDocumentBaseURL != null);
					var fai = this.viewer.getFileAdapter ();
					if (isApplet || isURL) {
					    if (isApplet && isURL && this.appletProxy != null) name = this.appletProxy + "?url=" + this.urlEncode (name);
					    var url = (isApplet ?  new java.net.URL (this.appletDocumentBaseURL, name, null) :  new java.net.URL (Clazz.castNullAs ("java.net.URL"), name, null));
					    if (checkOnly) return null;
					    name = url.toString ();
					    if (showMsg && name.toLowerCase ().indexOf ("password") < 0) org.jmol.util.Logger.info ("FileManager opening " + name);
					    ret = fai.getBufferedURLInputStream (url, outputBytes, post);
					    if (Clazz.instanceOf (ret, org.jmol.util.StringXBuilder)) {
						var sb = ret;
						if (allowReader && !org.jmol.io.JmolBinary.isBase64 (sb)) return org.jmol.io.JmolBinary.getBufferedReaderForString (sb.toString ());
						ret = org.jmol.io.JmolBinary.getBISForStringXBuilder (sb);
					    } else if (org.jmol.util.Escape.isAB (ret)) {
						ret =  new java.io.BufferedInputStream ( new java.io.ByteArrayInputStream (ret));
					    }} else if ((cacheBytes = this.cacheGet (name, true)) == null) {
						if (showMsg) org.jmol.util.Logger.info ("FileManager opening " + name);
						ret = fai.getBufferedFileInputStream (name);
					    }if (Clazz.instanceOf (ret, String)) return ret;
				    }if (cacheBytes == null) bis = ret;
				    else bis =  new java.io.BufferedInputStream ( new java.io.ByteArrayInputStream (cacheBytes));
				    if (checkOnly) {
					bis.close ();
					bis = null;
				    }return bis;
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					try {
					    if (bis != null) bis.close ();
					} catch (e1) {
					    if (Clazz.exceptionOf (e1, java.io.IOException)) {
					    } else {
						throw e1;
					    }
					}
					errorMessage = "" + e;
				    } else {
					throw e;
				    }
				}
				return errorMessage;
			    }, "~S,~S,~B,~B,~A,~B");
	Clazz.defineMethod (c$, "urlEncode", 
			    ($fz = function (name) {
				try {
				    return java.net.URLEncoder.encode (name, "utf-8");
				} catch (e) {
				    if (Clazz.exceptionOf (e, java.io.UnsupportedEncodingException)) {
					return name;
				    } else {
					throw e;
				    }
				}
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getFullPathNameOrError", 
			    function (filename) {
				var names = this.classifyName (filename, true);
				if (names == null || names[0] == null || names.length < 2) return [null, "cannot read file name: " + filename];
				var name = names[0];
				var fullPath = names[0].$replace ('\\', '/');
				name = org.jmol.io.JmolBinary.getZipRoot (name);
				var errMsg = this.getBufferedInputStreamOrErrorMessageFromName (name, fullPath, false, true, null, false);
				return [fullPath, (Clazz.instanceOf (errMsg, String) ? errMsg : null)];
			    }, "~S");
	Clazz.defineMethod (c$, "getBufferedReaderOrErrorMessageFromName", 
			    function (name, fullPathNameReturn, isBinary, doSpecialLoad) {
				var data = this.cacheGet (name, false);
				var isBytes = org.jmol.util.Escape.isAB (data);
				var bytes = (isBytes ? data : null);
				if (name.startsWith ("cache://")) {
				    if (data == null) return "cannot read " + name;
				    if (isBytes) {
					bytes = data;
				    } else {
					return org.jmol.io.JmolBinary.getBufferedReaderForString (data);
				    }}var names = this.classifyName (name, true);
				if (names == null) return "cannot read file name: " + name;
				if (fullPathNameReturn != null) fullPathNameReturn[0] = names[0].$replace ('\\', '/');
				return this.getUnzippedBufferedReaderOrErrorMessageFromName (names[0], bytes, false, isBinary, false, doSpecialLoad);
			    }, "~S,~A,~B,~B");
	Clazz.defineMethod (c$, "getEmbeddedFileState", 
			    function (fileName) {
				var dir = null;
				dir = this.getZipDirectory (fileName, false);
				if (dir.length == 0) {
				    var state = this.viewer.getFileAsStringBin (fileName, 2147483647, false, true);
				    return (state.indexOf ("**** Jmol Embedded Script ****") < 0 ? "" : org.jmol.io.JmolBinary.getEmbeddedScript (state));
				}for (var i = 0; i < dir.length; i++) if (dir[i].indexOf (".spt") >= 0) {
				    var data = [fileName + "|" + dir[i], null];
				    this.getFileDataOrErrorAsString (data, 2147483647, false, false);
				    return data[1];
				}
				return "";
			    }, "~S");
	Clazz.defineMethod (c$, "getUnzippedBufferedReaderOrErrorMessageFromName", 
			    function (name, bytes, allowZipStream, asInputStream, isTypeCheckOnly, doSpecialLoad) {
				var subFileList = null;
				var info = (bytes == null && doSpecialLoad ? this.getSpartanFileList (name) : null);
				var name00 = name;
				if (info != null) {
				    if (isTypeCheckOnly) return info;
				    if (info[2] != null) {
					var header = info[1];
					var fileData =  new java.util.Hashtable ();
					if (info.length == 3) {
					    var name0 = this.getObjectAsSections (info[2], header, fileData);
					    fileData.put ("OUTPUT", name0);
					    info = org.jmol.io.JmolBinary.spartanFileList (name, fileData.get (name0));
					    if (info.length == 3) {
						name0 = this.getObjectAsSections (info[2], header, fileData);
						fileData.put ("OUTPUT", name0);
						info = org.jmol.io.JmolBinary.spartanFileList (info[1], fileData.get (name0));
					    }}var sb =  new org.jmol.util.StringXBuilder ();
					if (fileData.get ("OUTPUT") != null) sb.append (fileData.get (fileData.get ("OUTPUT")));
					var s;
					for (var i = 2; i < info.length; i++) {
					    name = info[i];
					    name = this.getObjectAsSections (name, header, fileData);
					    org.jmol.util.Logger.info ("reading " + name);
					    s = fileData.get (name);
					    sb.append (s);
					}
					s = sb.toString ();
					if (this.spardirCache == null) this.spardirCache =  new java.util.Hashtable ();
					this.spardirCache.put (name00.$replace ('\\', '/'), s.getBytes ());
					return org.jmol.io.JmolBinary.getBufferedReaderForString (s);
				    }}if (bytes == null) bytes = org.jmol.io.JmolBinary.getCachedPngjBytes (this, name);
				var fullName = name;
				if (name.indexOf ("|") >= 0) {
				    subFileList = org.jmol.util.TextFormat.splitChars (name, "|");
				    if (bytes == null) org.jmol.util.Logger.info ("FileManager opening " + name);
				    name = subFileList[0];
				}var t = (bytes == null ? this.getBufferedInputStreamOrErrorMessageFromName (name, fullName, true, false, null, !asInputStream) :  new java.io.BufferedInputStream ( new java.io.ByteArrayInputStream (bytes)));
				try {
				    if (Clazz.instanceOf (t, String)) return t;
				    if (Clazz.instanceOf (t, java.io.BufferedReader)) return t;
				    var bis = t;
				    if (org.jmol.io.JmolBinary.isGzipS (bis)) {
					do {
					    bis =  new java.io.BufferedInputStream (org.jmol.io.JmolBinary.newGZIPInputStream (bis));
					} while (org.jmol.io.JmolBinary.isGzipS (bis));
				    }if (org.jmol.io.JmolBinary.isCompoundDocumentStream (bis)) {
					var doc = org.jmol.api.Interface.getOptionInterface ("io2.CompoundDocument");
					doc.setStream (bis, true);
					return org.jmol.io.JmolBinary.getBufferedReaderForString (doc.getAllDataFiles ("Molecule", "Input").toString ());
				    }bis = org.jmol.io.JmolBinary.checkPngZipStream (bis);
				    if (org.jmol.io.JmolBinary.isZipStream (bis)) {
					if (allowZipStream) return org.jmol.io.JmolBinary.newZipInputStream (bis);
					if (asInputStream) return org.jmol.io.JmolBinary.getZipFileContents (bis, subFileList, 1, true);
					var s = org.jmol.io.JmolBinary.getZipFileContents (bis, subFileList, 1, false);
					bis.close ();
					return org.jmol.io.JmolBinary.getBufferedReaderForString (s);
				    }return (asInputStream ? bis : org.jmol.io.JmolBinary.getInputStreamReader (bis));
				} catch (ioe) {
				    if (Clazz.exceptionOf (ioe, Exception)) {
					return ioe.getMessage ();
				    } else {
					throw ioe;
				    }
				}
			    }, "~S,~A,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "getSpartanFileList", 
			    ($fz = function (name) {
				if (name.endsWith (".spt")) return [null, null, null];
				if (name.endsWith (".spardir.zip")) return ["SpartanSmol", "Directory Entry ", name + "|output"];
				name = name.$replace ('\\', '/');
				if (!name.endsWith (".spardir") && name.indexOf (".spardir/") < 0) return null;
				var pt = name.lastIndexOf (".spardir");
				if (pt < 0) return null;
				if (name.lastIndexOf ("/") > pt) {
				    return ["SpartanSmol", "Directory Entry ", name + "/input", name + "/archive", name + "/Molecule:asBinaryString", name + "/proparc"];
				}return ["SpartanSmol", "Directory Entry ", name + "/output"];
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getObjectAsSections", 
			    ($fz = function (name, header, fileData) {
				if (name == null) return null;
				var subFileList = null;
				var asBinaryString = false;
				var name0 = name.$replace ('\\', '/');
				if (name.indexOf (":asBinaryString") >= 0) {
				    asBinaryString = true;
				    name = name.substring (0, name.indexOf (":asBinaryString"));
				}var sb = null;
				if (fileData.containsKey (name0)) return name0;
				if (name.indexOf ("#JMOL_MODEL ") >= 0) {
				    fileData.put (name0, name0 + "\n");
				    return name0;
				}var fullName = name;
				if (name.indexOf ("|") >= 0) {
				    subFileList = org.jmol.util.TextFormat.splitChars (name, "|");
				    name = subFileList[0];
				}var bis = null;
				try {
				    var t = this.getBufferedInputStreamOrErrorMessageFromName (name, fullName, false, false, null, false);
				    if (Clazz.instanceOf (t, String)) {
					fileData.put (name0, t + "\n");
					return name0;
				    }bis = t;
				    if (org.jmol.io.JmolBinary.isCompoundDocumentStream (bis)) {
					var doc = org.jmol.api.Interface.getOptionInterface ("io2.CompoundDocument");
					doc.setStream (bis, true);
					doc.getAllDataMapped (name.$replace ('\\', '/'), "Molecule", fileData);
				    } else if (org.jmol.io.JmolBinary.isZipStream (bis)) {
					org.jmol.io.JmolBinary.getAllZipData (bis, subFileList, name.$replace ('\\', '/'), "Molecule", fileData);
				    } else if (asBinaryString) {
					var bd = org.jmol.api.Interface.getOptionInterface ("io2.BinaryDocument");
					bd.setStream (bis, false);
					sb =  new org.jmol.util.StringXBuilder ();
					if (header != null) sb.append ("BEGIN Directory Entry " + name0 + "\n");
					try {
					    while (true) sb.append (Integer.toHexString (bd.readByte () & 0xFF)).appendC (' ');

					} catch (e1) {
					    if (Clazz.exceptionOf (e1, Exception)) {
						sb.appendC ('\n');
					    } else {
						throw e1;
					    }
					}
					if (header != null) sb.append ("\nEND Directory Entry " + name0 + "\n");
					fileData.put (name0, sb.toString ());
				    } else {
					var br = org.jmol.io.JmolBinary.getInputStreamReader (org.jmol.io.JmolBinary.isGzipS (bis) ? org.jmol.io.JmolBinary.newGZIPInputStream (bis) : bis);
					var line;
					sb =  new org.jmol.util.StringXBuilder ();
					if (header != null) sb.append ("BEGIN Directory Entry " + name0 + "\n");
					while ((line = br.readLine ()) != null) {
					    sb.append (line);
					    sb.appendC ('\n');
					}
					br.close ();
					if (header != null) sb.append ("\nEND Directory Entry " + name0 + "\n");
					fileData.put (name0, sb.toString ());
				    }} catch (ioe) {
					if (Clazz.exceptionOf (ioe, Exception)) {
					    fileData.put (name0, ioe.getMessage ());
					} else {
					    throw ioe;
					}
				    }
				if (bis != null) try {
				    bis.close ();
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				if (!fileData.containsKey (name0)) fileData.put (name0, "FILE NOT FOUND: " + name0 + "\n");
				return name0;
			    }, $fz.isPrivate = true, $fz), "~S,~S,java.util.Map");
	Clazz.defineMethod (c$, "getZipDirectory", 
			    function (fileName, addManifest) {
				var t = this.getBufferedInputStreamOrErrorMessageFromName (fileName, fileName, false, false, null, false);
				return org.jmol.io.JmolBinary.getZipDirectoryAndClose (t, addManifest);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "getFileAsBytes", 
			    function (name, os, allowZip) {
				if (name == null) return null;
				var fullName = name;
				var subFileList = null;
				if (name.indexOf ("|") >= 0) {
				    subFileList = org.jmol.util.TextFormat.splitChars (name, "|");
				    name = subFileList[0];
				    allowZip = true;
				}var t = this.getBufferedInputStreamOrErrorMessageFromName (name, fullName, false, false, null, false);
				if (Clazz.instanceOf (t, String)) return "Error:" + t;
				try {
				    var bis = t;
				    var bytes = (os != null || subFileList == null || subFileList.length <= 1 || !allowZip || !org.jmol.io.JmolBinary.isZipStream (bis) && !org.jmol.io.JmolBinary.isPngZipStream (bis) ? org.jmol.io.JmolBinary.getStreamAsBytes (bis, os) : org.jmol.io.JmolBinary.getZipFileContentsAsBytes (bis, subFileList, 1));
				    bis.close ();
				    return bytes;
				} catch (ioe) {
				    if (Clazz.exceptionOf (ioe, Exception)) {
					return ioe.getMessage ();
				    } else {
					throw ioe;
				    }
				}
			    }, "~S,java.io.OutputStream,~B");
	Clazz.defineMethod (c$, "getFileDataOrErrorAsString", 
			    function (data, nBytesMax, doSpecialLoad, allowBinary) {
				data[1] = "";
				var name = data[0];
				if (name == null) return false;
				var t = this.getBufferedReaderOrErrorMessageFromName (name, data, false, doSpecialLoad);
				if (Clazz.instanceOf (t, String)) {
				    data[1] = t;
				    return false;
				}try {
				    var br = t;
				    var sb = org.jmol.util.StringXBuilder.newN (8192);
				    var line;
				    if (nBytesMax == 2147483647) {
					line = br.readLine ();
					if (allowBinary || line != null && line.indexOf ('\0') < 0 && (line.length != 4 || line.charCodeAt (0) != 65533 || line.indexOf ("PNG") != 1)) {
					    sb.append (line).appendC ('\n');
					    while ((line = br.readLine ()) != null) sb.append (line).appendC ('\n');

					}} else {
					    var n = 0;
					    var len;
					    while (n < nBytesMax && (line = br.readLine ()) != null) {
						if (nBytesMax - n < (len = line.length) + 1) line = line.substring (0, nBytesMax - n - 1);
						sb.append (line).appendC ('\n');
						n += len + 1;
					    }
					}br.close ();
				    data[1] = sb.toString ();
				    org.jmol.viewer.FileManager.fixUnicode (data, 1);
				    return true;
				} catch (ioe) {
				    if (Clazz.exceptionOf (ioe, Exception)) {
					data[1] = ioe.getMessage ();
					return false;
				    } else {
					throw ioe;
				    }
				}
			    }, "~A,~N,~B,~B");
	c$.fixUnicode = Clazz.defineMethod (c$, "fixUnicode", 
					    ($fz = function (data, i) {
						var s = data[i];
						var encoding = org.jmol.viewer.FileManager.Encoding.NONE;
						if (s.indexOf ("\357\273\277") == 0) encoding = org.jmol.viewer.FileManager.Encoding.UTF8;
						else if (s.indexOf ("\0\0\376\377") == 0) encoding = org.jmol.viewer.FileManager.Encoding.UTF_32BE;
						else if (s.indexOf ("\377\376\0\0") == 0) encoding = org.jmol.viewer.FileManager.Encoding.UTF_32LE;
						else if (s.indexOf ("\377\376") == 0) encoding = org.jmol.viewer.FileManager.Encoding.UTF_16LE;
						else if (s.indexOf ("\376\377") == 0) encoding = org.jmol.viewer.FileManager.Encoding.UTF_16BE;
						if (encoding === org.jmol.viewer.FileManager.Encoding.NONE) return;
						org.jmol.util.Logger.info ("FileManager found encoding " + encoding.name ());
						try {
						    s =  String.instantialize (s.getBytes (), encoding.name ().$replace ('_', '-'));
						    switch (encoding) {
						    case org.jmol.viewer.FileManager.Encoding.UTF8:
						    case org.jmol.viewer.FileManager.Encoding.UTF_16BE:
							s = s.substring (1);
							break;
						    case org.jmol.viewer.FileManager.Encoding.UTF_16LE:
							s = s.substring (1, s.length - 1);
							break;
						    default:
							break;
						    }
						} catch (e) {
						    if (Clazz.exceptionOf (e, java.io.UnsupportedEncodingException)) {
							System.out.println (e);
						    } else {
							throw e;
						    }
						}
						data[i] = s;
					    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "getFileAsImage", 
			    function (name, retFileNameOrError) {
				if (name == null) {
				    retFileNameOrError[0] = "";
				    return null;
				}var names = this.classifyName (name, true);
				if (names == null) {
				    retFileNameOrError[0] = "cannot read file name: " + name;
				    return null;
				}var image = null;
				var apiPlatform = this.viewer.apiPlatform;
				var fullPathName = names[0].$replace ('\\', '/');
				if (fullPathName.indexOf ("|") > 0) {
				    var ret = this.getFileAsBytes (fullPathName, null, true);
				    if (!org.jmol.util.Escape.isAB (ret)) {
					retFileNameOrError[0] = "" + ret;
					return null;
				    }image = apiPlatform.createImage (ret);
				} else if (org.jmol.viewer.FileManager.urlTypeIndex (fullPathName) >= 0) {
				    try {
					image = apiPlatform.createImage ( new java.net.URL (Clazz.castNullAs ("java.net.URL"), fullPathName, null));
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    retFileNameOrError[0] = "bad URL: " + fullPathName;
					    return null;
					} else {
					    throw e;
					}
				    }
				} else {
				    image = apiPlatform.createImage (fullPathName);
				}if (image == null) return null;
				try {
				    if (!apiPlatform.waitForDisplay (this.viewer.getDisplay (), image)) {
					return null;
				    }} catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    System.out.println (e.getMessage ());
					    retFileNameOrError[0] = e.getMessage () + " opening " + fullPathName;
					    return null;
					} else {
					    throw e;
					}
				    }
				if (apiPlatform.getImageWidth (image) < 1) {
				    retFileNameOrError[0] = "invalid or missing image " + fullPathName;
				    return null;
				}retFileNameOrError[0] = fullPathName;
				return image;
			    }, "~S,~A");
	c$.urlTypeIndex = Clazz.defineMethod (c$, "urlTypeIndex", 
					      function (name) {
						  for (var i = 0; i < org.jmol.viewer.FileManager.urlPrefixes.length; ++i) {
						      if (name.startsWith (org.jmol.viewer.FileManager.urlPrefixes[i])) {
							  return i;
						      }}
						  return -1;
					      }, "~S");
	Clazz.defineMethod (c$, "classifyName", 
			    function (name, isFullLoad) {
				if (name == null) return [null];
				var doSetPathForAllFiles = (this.pathForAllFiles.length > 0);
				if (name.startsWith ("?")) {
				    if ((name = this.viewer.dialogAsk ("load", name.substring (1))) == null) return [isFullLoad ? "#CANCELED#" : null];
				    doSetPathForAllFiles = false;
				}var file = null;
				var url = null;
				var names = null;
				if (name.startsWith ("cache://")) {
				    names =  new Array (3);
				    names[0] = names[2] = name;
				    names[1] = org.jmol.viewer.FileManager.stripPath (names[0]);
				    return names;
				}name = this.viewer.resolveDatabaseFormat (name);
				if (name.indexOf (":") < 0 && name.indexOf ("/") != 0) name = org.jmol.viewer.FileManager.addDirectory (this.viewer.getDefaultDirectory (), name);
				if (this.appletDocumentBaseURL != null) {
				    try {
					if (name.indexOf (":\\") == 1 || name.indexOf (":/") == 1) name = "file:/" + name;
					url =  new java.net.URL (this.appletDocumentBaseURL, name, null);
				    } catch (e) {
					if (Clazz.exceptionOf (e, java.net.MalformedURLException)) {
					    return [isFullLoad ? e.getMessage () : null];
					} else {
					    throw e;
					}
				    }
				} else {
				    if (org.jmol.viewer.FileManager.urlTypeIndex (name) >= 0 || this.viewer.isRestricted (org.jmol.viewer.Viewer.ACCESS.NONE) || this.viewer.isRestricted (org.jmol.viewer.Viewer.ACCESS.READSPT) && !name.endsWith (".spt") && !name.endsWith ("/")) {
					try {
					    url =  new java.net.URL (Clazz.castNullAs ("java.net.URL"), name, null);
					} catch (e) {
					    if (Clazz.exceptionOf (e, java.net.MalformedURLException)) {
						return [isFullLoad ? e.getMessage () : null];
					    } else {
						throw e;
					    }
					}
				    } else {
					file = this.viewer.apiPlatform.newFile (name);
					names = [file.getAbsolutePath (), file.getName (), "file:/" + file.getAbsolutePath ().$replace ('\\', '/')];
				    }}if (url != null) {
					names =  new Array (3);
					names[0] = names[2] = url.toString ();
					names[1] = org.jmol.viewer.FileManager.stripPath (names[0]);
				    }if (doSetPathForAllFiles) {
					var name0 = names[0];
					names[0] = this.pathForAllFiles + names[1];
					org.jmol.util.Logger.info ("FileManager substituting " + name0 + " --> " + names[0]);
				    }if (isFullLoad && (file != null || org.jmol.viewer.FileManager.urlTypeIndex (names[0]) == 3)) {
					var path = (file == null ? org.jmol.util.TextFormat.trim (names[0].substring (5), "/") : names[0]);
					var pt = path.length - names[1].length - 1;
					if (pt > 0) {
					    path = path.substring (0, pt);
					    org.jmol.viewer.FileManager.setLocalPath (this.viewer, path, true);
					}}return names;
			    }, "~S,~B");
	c$.addDirectory = Clazz.defineMethod (c$, "addDirectory", 
					      ($fz = function (defaultDirectory, name) {
						  if (defaultDirectory.length == 0) return name;
						  var ch = (name.length > 0 ? name.charAt (0) : ' ');
						  var s = defaultDirectory.toLowerCase ();
						  if ((s.endsWith (".zip") || s.endsWith (".tar")) && ch != '|' && ch != '/') defaultDirectory += "|";
						  return defaultDirectory + (ch == '/' || ch == '/' || (ch = defaultDirectory.charAt (defaultDirectory.length - 1)) == '|' || ch == '/' ? "" : "/") + name;
					      }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "getDefaultDirectory", 
			    function (name) {
				var names = this.classifyName (name, true);
				if (names == null) return "";
				name = org.jmol.viewer.FileManager.fixPath (names[0]);
				return (name == null ? "" : name.substring (0, name.lastIndexOf ("/")));
			    }, "~S");
	c$.fixPath = Clazz.defineMethod (c$, "fixPath", 
					 ($fz = function (path) {
					     path = path.$replace ('\\', '/');
					     path = org.jmol.util.TextFormat.simpleReplace (path, "/./", "/");
					     var pt = path.lastIndexOf ("//") + 1;
					     if (pt < 1) pt = path.indexOf (":/") + 1;
					     if (pt < 1) pt = path.indexOf ("/");
					     if (pt < 0) return null;
					     var protocol = path.substring (0, pt);
					     path = path.substring (pt);
					     while ((pt = path.lastIndexOf ("/../")) >= 0) {
						 var pt0 = path.substring (0, pt).lastIndexOf ("/");
						 if (pt0 < 0) return org.jmol.util.TextFormat.simpleReplace (protocol + path, "/../", "/");
						 path = path.substring (0, pt0) + path.substring (pt + 3);
					     }
					     if (path.length == 0) path = "/";
					     return protocol + path;
					 }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getFilePath", 
			    function (name, addUrlPrefix, asShortName) {
				var names = this.classifyName (name, false);
				return (names == null || names.length == 1 ? "" : asShortName ? names[1] : addUrlPrefix ? names[2] : names[0] == null ? "" : names[0].$replace ('\\', '/'));
			    }, "~S,~B,~B");
	c$.getLocalUrl = Clazz.defineMethod (c$, "getLocalUrl", 
					     function (file) {
						 if (file.getName ().startsWith ("=")) return file.getName ();
						 var path = file.getAbsolutePath ().$replace ('\\', '/');
						 for (var i = 0; i < org.jmol.viewer.FileManager.urlPrefixPairs.length; i++) if (path.indexOf (org.jmol.viewer.FileManager.urlPrefixPairs[i]) == 0) return null;

						 for (var i = 0; i < org.jmol.viewer.FileManager.urlPrefixPairs.length; i += 2) if (path.indexOf (org.jmol.viewer.FileManager.urlPrefixPairs[i]) > 0) return org.jmol.viewer.FileManager.urlPrefixPairs[i + 1] + org.jmol.util.TextFormat.trim (path.substring (path.indexOf (org.jmol.viewer.FileManager.urlPrefixPairs[i]) + org.jmol.viewer.FileManager.urlPrefixPairs[i].length), "/");

						 return null;
					     }, "org.jmol.api.JmolFileInterface");
	c$.getLocalDirectory = Clazz.defineMethod (c$, "getLocalDirectory", 
						   function (viewer, forDialog) {
						       var localDir = viewer.getParameter (forDialog ? "currentLocalPath" : "defaultDirectoryLocal");
						       if (forDialog && localDir.length == 0) localDir = viewer.getParameter ("defaultDirectoryLocal");
						       if (localDir.length == 0) return (viewer.isApplet () ? null : viewer.apiPlatform.newFile (System.getProperty ("user.dir", ".")));
						       if (viewer.isApplet () && localDir.indexOf ("file:/") == 0) localDir = localDir.substring (6);
						       var f = viewer.apiPlatform.newFile (localDir);
						       return f.isDirectory () ? f : f.getParentAsFile ();
						   }, "org.jmol.api.JmolViewer,~B");
	c$.setLocalPath = Clazz.defineMethod (c$, "setLocalPath", 
					      function (viewer, path, forDialog) {
						  while (path.endsWith ("/") || path.endsWith ("\\")) path = path.substring (0, path.length - 1);

						  viewer.setStringProperty ("currentLocalPath", path);
						  if (!forDialog) viewer.setStringProperty ("defaultDirectoryLocal", path);
					      }, "org.jmol.api.JmolViewer,~S,~B");
	c$.getLocalPathForWritingFile = Clazz.defineMethod (c$, "getLocalPathForWritingFile", 
							    function (viewer, file) {
								if (file.indexOf ("file:/") == 0) return file.substring (6);
								if (file.indexOf ("/") == 0 || file.indexOf (":") >= 0) return file;
								var dir = org.jmol.viewer.FileManager.getLocalDirectory (viewer, false);
								return (dir == null ? file : org.jmol.viewer.FileManager.fixPath (dir.toString () + "/" + file));
							    }, "org.jmol.api.JmolViewer,~S");
	c$.setScriptFileReferences = Clazz.defineMethod (c$, "setScriptFileReferences", 
							 function (script, localPath, remotePath, scriptPath) {
							     if (localPath != null) script = org.jmol.viewer.FileManager.setScriptFileReferences (script, localPath, true);
							     if (remotePath != null) script = org.jmol.viewer.FileManager.setScriptFileReferences (script, remotePath, false);
							     script = org.jmol.util.TextFormat.simpleReplace (script, "\1\"", "\"");
							     if (scriptPath != null) {
								 while (scriptPath.endsWith ("/")) scriptPath = scriptPath.substring (0, scriptPath.length - 1);

								 for (var ipt = 0; ipt < org.jmol.viewer.FileManager.scriptFilePrefixes.length; ipt++) {
								     var tag = org.jmol.viewer.FileManager.scriptFilePrefixes[ipt];
								     script = org.jmol.util.TextFormat.simpleReplace (script, tag + ".", tag + scriptPath);
								 }
							     }return script;
							 }, "~S,~S,~S,~S");
	c$.setScriptFileReferences = Clazz.defineMethod (c$, "setScriptFileReferences", 
							 ($fz = function (script, dataPath, isLocal) {
							     if (dataPath == null) return script;
							     var noPath = (dataPath.length == 0);
							     var fileNames =  new java.util.ArrayList ();
							     org.jmol.io.JmolBinary.getFileReferences (script, fileNames);
							     var oldFileNames =  new java.util.ArrayList ();
							     var newFileNames =  new java.util.ArrayList ();
							     var nFiles = fileNames.size ();
							     for (var iFile = 0; iFile < nFiles; iFile++) {
								 var name0 = fileNames.get (iFile);
								 var name = name0;
								 var itype = org.jmol.viewer.FileManager.urlTypeIndex (name);
								 if (isLocal == (itype < 0 || itype == 3)) {
								     var pt = (noPath ? -1 : name.indexOf ("/" + dataPath + "/"));
								     if (pt >= 0) {
									 name = name.substring (pt + 1);
								     } else {
									 pt = name.lastIndexOf ("/");
									 if (pt < 0 && !noPath) name = "/" + name;
									 if (pt < 0 || noPath) pt++;
									 name = dataPath + name.substring (pt);
								     }}org.jmol.util.Logger.info ("FileManager substituting " + name0 + " --> " + name);
								 oldFileNames.add ("\"" + name0 + "\"");
								 newFileNames.add ("\1\"" + name + "\"");
							     }
							     return org.jmol.util.TextFormat.replaceStrings (script, oldFileNames, newFileNames);
							 }, $fz.isPrivate = true, $fz), "~S,~S,~B");
	c$.stripPath = Clazz.defineMethod (c$, "stripPath", 
					   function (name) {
					       var pt = Math.max (name.lastIndexOf ("|"), name.lastIndexOf ("/"));
					       return name.substring (pt + 1);
					   }, "~S");
	c$.fixFileNameVariables = Clazz.defineMethod (c$, "fixFileNameVariables", 
						      function (format, fname) {
							  var str = org.jmol.util.TextFormat.simpleReplace (format, "%FILE", fname);
							  if (str.indexOf ("%LC") < 0) return str;
							  fname = fname.toLowerCase ();
							  str = org.jmol.util.TextFormat.simpleReplace (str, "%LCFILE", fname);
							  if (fname.length == 4) str = org.jmol.util.TextFormat.simpleReplace (str, "%LC13", fname.substring (1, 3));
							  return str;
						      }, "~S,~S");
	Clazz.defineMethod (c$, "clearPngjCache", 
			    function (fileName) {
				if (fileName == null || this.pngjCache != null && this.pngjCache.containsKey (this.getCanonicalName (org.jmol.io.JmolBinary.getZipRoot (fileName)))) this.pngjCache = null;
			    }, "~S");
	Clazz.defineMethod (c$, "cachePut", 
			    function (key, data) {
				key = key.$replace ('\\', '/');
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.info ("cachePut " + key);
				if (data == null || data.equals ("")) this.cache.remove (key);
				else this.cache.put (key, data);
			    }, "~S,~O");
	Clazz.defineMethod (c$, "cacheGet", 
			    function (key, bytesOnly) {
				key = key.$replace ('\\', '/');
				if (org.jmol.util.Logger.debugging && this.cache.containsKey (key)) org.jmol.util.Logger.info ("cacheGet " + key);
				var data = this.cache.get (key);
				return (bytesOnly && (Clazz.instanceOf (data, String)) ? null : data);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "cacheClear", 
			    function () {
				this.cache.clear ();
			    });
	Clazz.defineMethod (c$, "cacheFileByName", 
			    function (fileName, isAdd) {
				if (fileName == null || !isAdd && fileName.equalsIgnoreCase ("")) {
				    this.cacheClear ();
				    return -1;
				}var data;
				if (isAdd) {
				    fileName = this.viewer.resolveDatabaseFormat (fileName);
				    data = this.getFileAsBytes (fileName, null, true);
				    if (Clazz.instanceOf (data, String)) return 0;
				    this.cachePut (fileName, data);
				} else {
				    data = this.cache.remove (fileName.$replace ('\\', '/'));
				}return (data == null ? 0 : Clazz.instanceOf (data, String) ? (data).length : (data).length);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "cacheList", 
			    function () {
				var map =  new java.util.Hashtable ();
				for (var entry, $entry = this.cache.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) map.put (entry.getKey (), Integer.$valueOf (org.jmol.util.Escape.isAB (entry.getValue ()) ? (entry.getValue ()).length : entry.getValue ().toString ().length));

				return map;
			    });
	Clazz.defineMethod (c$, "getCanonicalName", 
			    function (pathName) {
				var names = this.classifyName (pathName, true);
				return (names == null ? pathName : names[2]);
			    }, "~S");
	Clazz.pu$h ();
	c$ = Clazz.declareType (org.jmol.viewer.FileManager, "Encoding", Enum);
	Clazz.defineEnumConstant (c$, "NONE", 0, []);
	Clazz.defineEnumConstant (c$, "UTF8", 1, []);
	Clazz.defineEnumConstant (c$, "UTF_16BE", 2, []);
	Clazz.defineEnumConstant (c$, "UTF_16LE", 3, []);
	Clazz.defineEnumConstant (c$, "UTF_32BE", 4, []);
	Clazz.defineEnumConstant (c$, "UTF_32LE", 5, []);
	c$ = Clazz.p0p ();
	Clazz.defineStatics (c$,
			     "URL_LOCAL", 3,
			     "urlPrefixes", ["http:", "https:", "ftp:", "file:"],
			     "urlPrefixPairs", ["http:", "http://", "www.", "http://www.", "https:", "https://", "ftp:", "ftp://", "file:", "file:///"]);
	c$.scriptFilePrefixes = c$.prototype.scriptFilePrefixes = ["/*file*/\"", "FILE0=\"", "FILE1=\""];
    });
    // 
    //// org\jmol\script\ContextToken.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["org.jmol.script.Token"], "org.jmol.script.ContextToken", ["java.util.Hashtable", "org.jmol.script.ScriptCompiler"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.contextVariables = null;
	    this.name0 = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ContextToken", org.jmol.script.Token);
	Clazz.makeConstructor (c$, 
			       function (tok, intValue, value) {
				   Clazz.superConstructor (this, org.jmol.script.ContextToken, [tok]);
				   this.intValue = intValue;
				   this.value = value;
			       }, "~N,~N,~O");
	Clazz.makeConstructor (c$, 
			       function (tok, value) {
				   Clazz.superConstructor (this, org.jmol.script.ContextToken, [tok]);
				   this.value = value;
				   if (tok == 102410) this.addName ("_var");
			       }, "~N,~O");
	Clazz.defineMethod (c$, "addName", 
			    function (name) {
				if (this.contextVariables == null) this.contextVariables =  new java.util.Hashtable ();
				org.jmol.script.ScriptCompiler.addContextVariable (this.contextVariables, name);
			    }, "~S");
    });
    // 
    //// org\jmol\script\ScriptContext.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (null, "org.jmol.script.ScriptContext", ["org.jmol.script.ScriptEvaluator", "org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.fullpath = "";
	    this.scriptFileName = null;
	    this.parallelProcessor = null;
	    this.functionName = null;
	    this.script = null;
	    this.lineNumbers = null;
	    this.lineIndices = null;
	    this.aatoken = null;
	    this.statement = null;
	    this.statementLength = 0;
	    this.pc = 0;
	    this.pcEnd = 2147483647;
	    this.lineEnd = 2147483647;
	    this.iToken = 0;
	    this.outputBuffer = null;
	    this.contextVariables = null;
	    this.isFunction = false;
	    this.isStateScript = false;
	    this.isTryCatch = false;
	    this.errorMessage = null;
	    this.errorMessageUntranslated = null;
	    this.iCommandError = -1;
	    this.errorType = null;
	    this.scriptLevel = 0;
	    this.isSyntaxCheck = false;
	    this.executionStepping = false;
	    this.executionPaused = false;
	    this.scriptExtensions = null;
	    this.contextPath = " >> ";
	    this.parentContext = null;
	    this.token = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptContext");
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.defineMethod (c$, "getContextTrace", 
			    function (sb, isTop) {
				if (sb == null) sb =  new org.jmol.util.StringXBuilder ();
				sb.append (org.jmol.script.ScriptEvaluator.setErrorLineMessage (this.functionName, this.scriptFileName, this.lineNumbers[this.pc], this.pc, org.jmol.script.ScriptEvaluator.statementAsString (this.statement, (isTop ? this.iToken : 9999), false)));
				if (this.parentContext != null) this.parentContext.getContextTrace (sb, false);
				return sb;
			    }, "org.jmol.util.StringXBuilder,~B");
    });
    // 
    //// org\jmol\constant\EnumAnimationMode.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.constant");
    Clazz.load (["java.lang.Enum"], "org.jmol.constant.EnumAnimationMode", null, function () {
	c$ = Clazz.declareType (org.jmol.constant, "EnumAnimationMode", Enum);
	Clazz.defineEnumConstant (c$, "ONCE", 0, []);
	Clazz.defineEnumConstant (c$, "LOOP", 1, []);
	Clazz.defineEnumConstant (c$, "PALINDROME", 2, []);
    });
    // 
    //// org\jmol\io\FileReader.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    Clazz.load (null, "org.jmol.io.FileReader", ["java.io.BufferedReader", "org.jmol.io.JmolBinary", "org.jmol.util.Escape", "$.Logger", "$.TextFormat"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.fm = null;
	    this.viewer = null;
	    this.fileNameIn = null;
	    this.fullPathNameIn = null;
	    this.nameAsGivenIn = null;
	    this.fileTypeIn = null;
	    this.atomSetCollection = null;
	    this.reader = null;
	    this.htParams = null;
	    this.isAppend = false;
	    this.bytes = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.io, "FileReader");
	Clazz.makeConstructor (c$, 
			       function (fileManager, viewer, fileName, fullPathName, nameAsGiven, type, reader, htParams, isAppend) {
				   this.fm = fileManager;
				   this.viewer = viewer;
				   this.fileNameIn = fileName;
				   this.fullPathNameIn = fullPathName;
				   this.nameAsGivenIn = nameAsGiven;
				   this.fileTypeIn = type;
				   this.reader = (Clazz.instanceOf (reader, java.io.BufferedReader) ? reader : Clazz.instanceOf (reader, java.io.Reader) ?  new java.io.BufferedReader (reader) : null);
				   this.bytes = (org.jmol.util.Escape.isAB (reader) ? reader : null);
				   this.htParams = htParams;
				   this.isAppend = isAppend;
			       }, "org.jmol.viewer.FileManager,org.jmol.viewer.Viewer,~S,~S,~S,~S,~O,java.util.Map,~B");
	Clazz.defineMethod (c$, "run", 
			    function () {
				if (!this.isAppend && this.viewer.displayLoadErrors) this.viewer.zap (false, true, false);
				var errorMessage = null;
				var t = null;
				if (this.reader == null) {
				    t = this.fm.getUnzippedBufferedReaderOrErrorMessageFromName (this.fullPathNameIn, this.bytes, true, false, false, true);
				    if (t == null || Clazz.instanceOf (t, String)) {
					errorMessage = (t == null ? "error opening:" + this.nameAsGivenIn : t);
					if (!errorMessage.startsWith ("NOTE:")) org.jmol.util.Logger.error ("file ERROR: " + this.fullPathNameIn + "\n" + errorMessage);
					this.atomSetCollection = errorMessage;
					return;
				    }}if (this.reader == null) {
					if (Clazz.instanceOf (t, java.io.BufferedReader)) {
					    this.reader = t;
					} else if (Clazz.instanceOf (t, org.jmol.api.ZInputStream)) {
					    var name = this.fullPathNameIn;
					    var subFileList = null;
					    if (name.indexOf ("|") >= 0 && !name.endsWith (".zip")) {
						subFileList = org.jmol.util.TextFormat.splitChars (name, "|");
						name = subFileList[0];
					    }if (subFileList != null) this.htParams.put ("subFileList", subFileList);
					    var zis = t;
					    var zipDirectory = this.fm.getZipDirectory (name, true);
					    this.atomSetCollection = org.jmol.io.JmolBinary.getAtomSetCollectionOrBufferedReaderFromZip (this.viewer.getModelAdapter (), zis, name, zipDirectory, this.htParams, false, false);
					    try {
						zis.close ();
					    } catch (e) {
						if (Clazz.exceptionOf (e, Exception)) {
						} else {
						    throw e;
						}
					    }
					}}if (this.reader != null) {
					    this.atomSetCollection = this.viewer.getModelAdapter ().getAtomSetCollectionReader (this.fullPathNameIn, this.fileTypeIn, this.reader, this.htParams);
					    if (!(Clazz.instanceOf (this.atomSetCollection, String))) this.atomSetCollection = this.viewer.getModelAdapter ().getAtomSetCollection (this.atomSetCollection);
					}if (this.reader != null) try {
					    this.reader.close ();
					} catch (e) {
					    if (Clazz.exceptionOf (e, java.io.IOException)) {
					    } else {
						throw e;
					    }
					}
				if (Clazz.instanceOf (this.atomSetCollection, String)) return;
				if (!this.isAppend && !this.viewer.displayLoadErrors) this.viewer.zap (false, true, false);
				this.fm.fullPathName = this.fullPathNameIn;
				this.fm.nameAsGiven = this.nameAsGivenIn;
				this.fm.fileName = this.fileNameIn;
			    });
	Clazz.defineMethod (c$, "getAtomSetCollection", 
			    function () {
				return this.atomSetCollection;
			    });
    });
    // 
    //// org\jmol\viewer\DataManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.util.Hashtable", "org.jmol.constant.EnumVdw"], "org.jmol.viewer.DataManager", ["org.jmol.script.Token", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Elements", "$.Escape", "$.Logger", "$.Parser", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.dataValues = null;
	    this.viewer = null;
	    this.userVdws = null;
	    this.userVdwMars = null;
	    this.defaultVdw = null;
	    this.bsUserVdws = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "DataManager");
	Clazz.prepareFields (c$, function () {
	    this.dataValues =  new java.util.Hashtable ();
	    this.defaultVdw = org.jmol.constant.EnumVdw.JMOL;
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.dataValues.clear ();
			    });
	Clazz.defineMethod (c$, "setData", 
			    function (type, data, arrayCount, actualAtomCount, matchField, matchFieldColumnCount, field, fieldColumnCount) {
				if (type == null) {
				    this.clear ();
				    return;
				}type = type.toLowerCase ();
				if (type.equals ("element_vdw")) {
				    var stringData = (data[1]).trim ();
				    if (stringData.length == 0) {
					this.userVdwMars = null;
					this.userVdws = null;
					this.bsUserVdws = null;
					return;
				    }if (this.bsUserVdws == null) this.setUserVdw (this.defaultVdw);
				    org.jmol.util.Parser.parseFloatArrayFromMatchAndField (stringData, this.bsUserVdws, 1, 0, data[2], 2, 0, this.userVdws, 1);
				    for (var i = this.userVdws.length; --i >= 0; ) this.userVdwMars[i] = Clazz.doubleToInt (Math.floor (this.userVdws[i] * 1000));

				    return;
				}if (data[2] != null && arrayCount > 0) {
				    var createNew = (matchField != 0 || field != -2147483648 && field != 2147483647);
				    var oldData = this.dataValues.get (type);
				    var bs;
				    var f = (oldData == null || createNew ?  Clazz.newFloatArray (actualAtomCount, 0) : org.jmol.util.ArrayUtil.ensureLengthA ((oldData[1]), actualAtomCount));
				    var depth = (data[3]).intValue ();
				    var stringData = (depth == 0 ? data[1] : null);
				    var floatData = (depth == 1 ? data[1] : null);
				    var strData = null;
				    if (field == -2147483648 && (strData = org.jmol.util.Parser.getTokens (stringData)).length > 1) field = 0;
				    if (field == -2147483648) {
					bs = data[2];
					org.jmol.util.Parser.setSelectedFloats (org.jmol.util.Parser.parseFloatStr (stringData), bs, f);
				    } else if (field == 0 || field == 2147483647) {
					bs = data[2];
					if (floatData != null) {
					    if (floatData.length == bs.cardinality ()) for (var i = bs.nextSetBit (0), pt = 0; i >= 0; i = bs.nextSetBit (i + 1), pt++) f[i] = floatData[pt];

					    else for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) f[i] = floatData[i];

					} else {
					    org.jmol.util.Parser.parseFloatArrayBsData (strData == null ? org.jmol.util.Parser.getTokens (stringData) : strData, bs, f);
					}} else if (matchField <= 0) {
					    bs = data[2];
					    org.jmol.util.Parser.parseFloatArrayFromMatchAndField (stringData, bs, 0, 0, null, field, fieldColumnCount, f, 1);
					} else {
					    var iData = data[2];
					    org.jmol.util.Parser.parseFloatArrayFromMatchAndField (stringData, null, matchField, matchFieldColumnCount, iData, field, fieldColumnCount, f, 1);
					    bs =  new org.jmol.util.BitSet ();
					    for (var i = iData.length; --i >= 0; ) if (iData[i] >= 0) bs.set (iData[i]);

					}if (oldData != null && Clazz.instanceOf (oldData[2], org.jmol.util.BitSet) && !createNew) bs.or ((oldData[2]));
				    data[2] = bs;
				    data[1] = f;
				    if (type.indexOf ("property_atom.") == 0) {
					var tok = org.jmol.script.Token.getSettableTokFromString (type = type.substring (14));
					if (tok == 0) {
					    org.jmol.util.Logger.error ("Unknown atom property: " + type);
					    return;
					}var nValues = bs.cardinality ();
					var fValues =  Clazz.newFloatArray (nValues, 0);
					for (var n = 0, i = bs.nextSetBit (0); n < nValues; i = bs.nextSetBit (i + 1)) fValues[n++] = f[i];

					this.viewer.setAtomProperty (bs, tok, 0, 0, null, fValues, null);
					return;
				    }}this.dataValues.put (type, data);
			    }, "~S,~A,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "getData", 
			    function (type) {
				if (this.dataValues == null || type == null) return null;
				if (type.equalsIgnoreCase ("types")) {
				    var info =  new Array (2);
				    info[0] = "types";
				    info[1] = "";
				    var n = 0;
				    var e = this.dataValues.keySet ().iterator ();
				    while (e.hasNext ()) info[1] += (n++ > 0 ? "\n" : "") + e.next ();

				    return info;
				}return this.dataValues.get (type);
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloatA", 
			    function (label) {
				if (this.dataValues == null) return null;
				var data = this.getData (label);
				if (data == null || (data[3]).intValue () != 1) return null;
				return data[1];
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloat", 
			    function (label, atomIndex) {
				if (this.dataValues != null) {
				    var data = this.getData (label);
				    if (data != null && (data[3]).intValue () == 1) {
					var f = data[1];
					if (atomIndex < f.length) return f[atomIndex];
				    }}return NaN;
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getDataFloat2D", 
			    function (label) {
				if (this.dataValues == null) return null;
				var data = this.getData (label);
				if (data == null || (data[3]).intValue () != 2) return null;
				return data[1];
			    }, "~S");
	Clazz.defineMethod (c$, "getDataFloat3D", 
			    function (label) {
				if (this.dataValues == null) return null;
				var data = this.getData (label);
				if (data == null || (data[3]).intValue () != 3) return null;
				return data[1];
			    }, "~S");
	Clazz.defineMethod (c$, "deleteModelAtoms", 
			    function (firstAtomIndex, nAtoms, bsDeleted) {
				if (this.dataValues == null) return;
				var e = this.dataValues.keySet ().iterator ();
				while (e.hasNext ()) {
				    var name = e.next ();
				    if (name.indexOf ("property_") == 0) {
					var obj = this.dataValues.get (name);
					org.jmol.util.BitSetUtil.deleteBits (obj[2], bsDeleted);
					switch ((obj[3]).intValue ()) {
					case 1:
					    obj[1] = org.jmol.util.ArrayUtil.deleteElements (obj[1], firstAtomIndex, nAtoms);
					    break;
					case 2:
					    obj[1] = org.jmol.util.ArrayUtil.deleteElements (obj[1], firstAtomIndex, nAtoms);
					    break;
					default:
					    break;
					}
				    }}
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getDataState", 
			    function (state, sfunc, atomProps) {
				if (this.dataValues == null) return;
				var e = this.dataValues.keySet ().iterator ();
				var sb =  new org.jmol.util.StringXBuilder ();
				var n = 0;
				if (atomProps.length > 0) {
				    n = 1;
				    sb.append (atomProps);
				}while (e.hasNext ()) {
				    var name = e.next ();
				    if (name.indexOf ("property_") == 0) {
					n++;
					var obj = this.dataValues.get (name);
					var data = obj[1];
					if (data != null && (obj[3]).intValue () == 1) {
					    this.viewer.getAtomicPropertyState (sb, 14, obj[2], name, data);
					    sb.append ("\n");
					} else {
					    sb.append ("\n").append (org.jmol.util.Escape.encapsulateData (name, data, 0));
					}} else if (name.indexOf ("data2d") == 0) {
					    var obj = this.dataValues.get (name);
					    var data = obj[1];
					    if (data != null && (obj[3]).intValue () == 2) {
						n++;
						sb.append ("\n").append (org.jmol.util.Escape.encapsulateData (name, data, 2));
					    }} else if (name.indexOf ("data3d") == 0) {
						var obj = this.dataValues.get (name);
						var data = obj[1];
						if (data != null && (obj[3]).intValue () == 3) {
						    n++;
						    sb.append ("\n").append (org.jmol.util.Escape.encapsulateData (name, data, 3));
						}}}
				if (this.userVdws != null) {
				    var info = this.getDefaultVdwNameOrData (0, org.jmol.constant.EnumVdw.USER, this.bsUserVdws);
				    if (info.length > 0) {
					n++;
					sb.append (info);
				    }}if (n == 0) return;
				if (sfunc != null) state.append ("function _setDataState() {\n");
				state.appendSB (sb);
				if (sfunc != null) {
				    sfunc.append ("  _setDataState;\n");
				    state.append ("}\n\n");
				}}, "org.jmol.util.StringXBuilder,org.jmol.util.StringXBuilder,~S");
	Clazz.defineMethod (c$, "setUserVdw", 
			    ($fz = function (mode) {
				this.userVdwMars =  Clazz.newIntArray (org.jmol.util.Elements.elementNumberMax, 0);
				this.userVdws =  Clazz.newFloatArray (org.jmol.util.Elements.elementNumberMax, 0);
				this.bsUserVdws =  new org.jmol.util.BitSet ();
				if (mode === org.jmol.constant.EnumVdw.USER) mode = org.jmol.constant.EnumVdw.JMOL;
				for (var i = 1; i < org.jmol.util.Elements.elementNumberMax; i++) {
				    this.userVdwMars[i] = org.jmol.util.Elements.getVanderwaalsMar (i, mode);
				    this.userVdws[i] = this.userVdwMars[i] / 1000;
				}
			    }, $fz.isPrivate = true, $fz), "org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "setDefaultVdw", 
			    function (type) {
				switch (type) {
				case org.jmol.constant.EnumVdw.JMOL:
				case org.jmol.constant.EnumVdw.BABEL:
				case org.jmol.constant.EnumVdw.RASMOL:
				case org.jmol.constant.EnumVdw.AUTO:
				case org.jmol.constant.EnumVdw.USER:
				    break;
				default:
				    type = org.jmol.constant.EnumVdw.JMOL;
				}
				if (type !== this.defaultVdw && type === org.jmol.constant.EnumVdw.USER && this.bsUserVdws == null) this.setUserVdw (this.defaultVdw);
				this.defaultVdw = type;
			    }, "org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "getDefaultVdwNameOrData", 
			    function (mode, type, bs) {
				switch (mode) {
				case -2147483648:
				    return this.defaultVdw.getVdwLabel ();
				case 2147483647:
				    if ((bs = this.bsUserVdws) == null) return "";
				    type = org.jmol.constant.EnumVdw.USER;
				    break;
				}
				if (type == null || type === org.jmol.constant.EnumVdw.AUTO) type = this.defaultVdw;
				if (type === org.jmol.constant.EnumVdw.USER && this.bsUserVdws == null) this.setUserVdw (this.defaultVdw);
				var sb =  new org.jmol.util.StringXBuilder ();
				sb.append (type.getVdwLabel ()).append ("\n");
				var isAll = (bs == null);
				var i0 = (isAll ? 1 : bs.nextSetBit (0));
				var i1 = (isAll ? org.jmol.util.Elements.elementNumberMax : bs.length ());
				for (var i = i0; i < i1 && i >= 0; i = (isAll ? i + 1 : bs.nextSetBit (i + 1))) sb.appendI (i).appendC ('\t').appendF (type === org.jmol.constant.EnumVdw.USER ? this.userVdws[i] : org.jmol.util.Elements.getVanderwaalsMar (i, type) / 1000).appendC ('\t').append (org.jmol.util.Elements.elementSymbolFromNumber (i)).appendC ('\n');

				return (bs == null ? sb.toString () : "\n  DATA \"element_vdw\"\n" + sb.append ("  end \"element_vdw\";\n\n").toString ());
			    }, "~N,org.jmol.constant.EnumVdw,org.jmol.util.BitSet");
	c$.getInlineData = Clazz.defineMethod (c$, "getInlineData", 
					       function (loadScript, strModel, isAppend, loadFilter) {
						   var tag = (isAppend ? "append" : "model") + " inline";
						   loadScript.append ("load /*data*/ data \"").append (tag).append ("\"\n").append (strModel).append ("end \"").append (tag).append (loadFilter == null || loadFilter.length == 0 ? "" : " filter" + org.jmol.util.Escape.escapeStr (loadFilter)).append ("\";");
					       }, "org.jmol.util.StringXBuilder,~S,~B,~S");
    });
    // 
    //// org\jmol\util\JmolNode.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.declareInterface (org.jmol.util, "JmolNode");
    // 
    //// org\jmol\util\Point3fi.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Point3f"], "org.jmol.util.Point3fi", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.index = 0;
	    this.screenX = 0;
	    this.screenY = 0;
	    this.screenZ = 0;
	    this.screenDiameter = -1;
	    this.modelIndex = -1;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Point3fi", org.jmol.util.Point3f);
	c$.set2 = Clazz.defineMethod (c$, "set2", 
				      function (p3f, p3i) {
					  p3f.x = p3i.x;
					  p3f.y = p3i.y;
					  p3f.z = p3i.z;
				      }, "org.jmol.util.Point3f,org.jmol.util.Point3i");
    });
    // 
    //// org\jmol\modelset\Atom.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.util.JmolNode", "$.Point3fi", "org.jmol.constant.EnumPalette", "org.jmol.viewer.JmolConstants"], "org.jmol.modelset.Atom", ["java.lang.Float", "org.jmol.atomdata.RadiusData", "org.jmol.constant.EnumVdw", "org.jmol.util.Colix", "$.ColorUtil", "$.Elements", "$.Point3f", "$.StringXBuilder", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.alternateLocationID = '\0';
	    this.atomID = 0;
	    this.atomSite = 0;
	    this.group = null;
	    this.userDefinedVanDerWaalRadius = 0;
	    this.valence = 0;
	    this.atomicAndIsotopeNumber = 0;
	    this.atomSymmetry = null;
	    this.formalChargeAndFlags = 0;
	    this.madAtom = 0;
	    this.colixAtom = 0;
	    this.paletteID = 0;
	    this.bonds = null;
	    this.nBondsDisplayed = 0;
	    this.nBackbonesDisplayed = 0;
	    this.clickabilityFlags = 0;
	    this.shapeVisibilityFlags = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "Atom", org.jmol.util.Point3fi, org.jmol.util.JmolNode);
	Clazz.prepareFields (c$, function () {
	    this.paletteID = org.jmol.constant.EnumPalette.CPK.id;
	});
	Clazz.defineMethod (c$, "getAtomID", 
			    function () {
				return this.atomID;
			    });
	Clazz.defineMethod (c$, "getBonds", 
			    function () {
				return this.bonds;
			    });
	Clazz.defineMethod (c$, "setBonds", 
			    function (bonds) {
				this.bonds = bonds;
			    }, "~A");
	Clazz.defineMethod (c$, "getNBackbonesDisplayed", 
			    function () {
				return this.nBackbonesDisplayed;
			    });
	Clazz.makeConstructor (c$, 
			       function (modelIndex, atomIndex, x, y, z, radius, atomSymmetry, atomSite, atomicAndIsotopeNumber, formalCharge, isHetero) {
				   Clazz.superConstructor (this, org.jmol.modelset.Atom, []);
				   this.modelIndex = modelIndex;
				   this.atomSymmetry = atomSymmetry;
				   this.atomSite = atomSite;
				   this.index = atomIndex;
				   this.atomicAndIsotopeNumber = atomicAndIsotopeNumber;
				   if (isHetero) this.formalChargeAndFlags = 2;
				   this.setFormalCharge (formalCharge);
				   this.userDefinedVanDerWaalRadius = radius;
				   this.set (x, y, z);
			       }, "~N,~N,~N,~N,~N,~N,org.jmol.util.BitSet,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "setAltLoc", 
			    function (altLoc) {
				this.alternateLocationID = altLoc;
			    }, "~S");
	Clazz.defineMethod (c$, "setShapeVisibilityFlags", 
			    function (flag) {
				this.shapeVisibilityFlags = flag;
			    }, "~N");
	Clazz.defineMethod (c$, "setShapeVisibility", 
			    function (flag, isVisible) {
				if (isVisible) {
				    this.shapeVisibilityFlags |= flag;
				} else {
				    this.shapeVisibilityFlags &= ~flag;
				}}, "~N,~B");
	Clazz.defineMethod (c$, "isCovalentlyBonded", 
			    function (atomOther) {
				if (this.bonds != null) for (var i = this.bonds.length; --i >= 0; ) if (this.bonds[i].isCovalent () && this.bonds[i].getOtherAtom (this) === atomOther) return true;

				return false;
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "isBonded", 
			    function (atomOther) {
				if (this.bonds != null) for (var i = this.bonds.length; --i >= 0; ) if (this.bonds[i].getOtherAtom (this) === atomOther) return true;

				return false;
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getBond", 
			    function (atomOther) {
				if (this.bonds != null) for (var i = this.bonds.length; --i >= 0; ) if (this.bonds[i].getOtherAtom (atomOther) != null) return this.bonds[i];

				return null;
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "addDisplayedBond", 
			    function (stickVisibilityFlag, isVisible) {
				this.nBondsDisplayed += (isVisible ? 1 : -1);
				this.setShapeVisibility (stickVisibilityFlag, (this.nBondsDisplayed > 0));
			    }, "~N,~B");
	Clazz.defineMethod (c$, "addDisplayedBackbone", 
			    function (backboneVisibilityFlag, isVisible) {
				this.nBackbonesDisplayed += (isVisible ? 1 : -1);
				this.setShapeVisibility (backboneVisibilityFlag, isVisible);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "deleteBond", 
			    function (bond) {
				if (this.bonds != null) for (var i = this.bonds.length; --i >= 0; ) if (this.bonds[i] === bond) {
				    this.deleteBondAt (i);
				    return;
				}
			    }, "org.jmol.modelset.Bond");
	Clazz.defineMethod (c$, "deleteBondAt", 
			    ($fz = function (i) {
				var newLength = this.bonds.length - 1;
				if (newLength == 0) {
				    this.bonds = null;
				    return;
				}var bondsNew =  new Array (newLength);
				var j = 0;
				for (; j < i; ++j) bondsNew[j] = this.bonds[j];

				for (; j < newLength; ++j) bondsNew[j] = this.bonds[j + 1];

				this.bonds = bondsNew;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "clearBonds", 
			    function () {
				this.bonds = null;
			    });
	Clazz.overrideMethod (c$, "getBondedAtomIndex", 
			      function (bondIndex) {
				  return this.bonds[bondIndex].getOtherAtom (this).index;
			      }, "~N");
	Clazz.defineMethod (c$, "setMadAtom", 
			    function (viewer, rd) {
				this.madAtom = this.calculateMad (viewer, rd);
			    }, "org.jmol.viewer.Viewer,org.jmol.atomdata.RadiusData");
	Clazz.defineMethod (c$, "calculateMad", 
			    function (viewer, rd) {
				if (rd == null) return 0;
				var f = rd.value;
				if (f == 0) return 0;
				switch (rd.factorType) {
				case org.jmol.atomdata.RadiusData.EnumType.SCREEN:
				    return Clazz.floatToShort (f);
				case org.jmol.atomdata.RadiusData.EnumType.FACTOR:
				case org.jmol.atomdata.RadiusData.EnumType.OFFSET:
				    var r = 0;
				    switch (rd.vdwType) {
				    case org.jmol.constant.EnumVdw.TEMP:
					var tmax = viewer.getBfactor100Hi ();
					r = (tmax > 0 ? this.getBfactor100 () / tmax : 0);
					break;
				    case org.jmol.constant.EnumVdw.HYDRO:
					r = Math.abs (this.getHydrophobicity ());
					break;
				    case org.jmol.constant.EnumVdw.IONIC:
					r = this.getBondingRadiusFloat ();
					break;
				    case org.jmol.constant.EnumVdw.ADPMIN:
				    case org.jmol.constant.EnumVdw.ADPMAX:
					r = this.getADPMinMax (rd.vdwType === org.jmol.constant.EnumVdw.ADPMAX);
					break;
				    default:
					r = this.getVanderwaalsRadiusFloat (viewer, rd.vdwType);
				    }
				    if (rd.factorType === org.jmol.atomdata.RadiusData.EnumType.FACTOR) f *= r;
				    else f += r;
				    break;
				case org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE:
				    break;
				}
				var mad = Clazz.floatToShort (f < 0 ? f : f * 2000);
				if (mad < 0 && f > 0) mad = 0;
				return mad;
			    }, "org.jmol.viewer.Viewer,org.jmol.atomdata.RadiusData");
	Clazz.defineMethod (c$, "getADPMinMax", 
			    function (isMax) {
				var ellipsoid = this.getEllipsoid ();
				return (ellipsoid == null ? 0 : ellipsoid[0] == null ? ellipsoid[1].lengths[isMax ? 2 : 0] * ellipsoid[1].$scale : ellipsoid[0].lengths[isMax ? 2 : 0] * ellipsoid[0].$scale);
			    }, "~B");
	Clazz.defineMethod (c$, "getRasMolRadius", 
			    function () {
				return Math.abs (Clazz.doubleToInt (this.madAtom / 8));
			    });
	Clazz.overrideMethod (c$, "getCovalentBondCount", 
			      function () {
				  if (this.bonds == null) return 0;
				  var n = 0;
				  var b;
				  for (var i = this.bonds.length; --i >= 0; ) if (((b = this.bonds[i]).order & 1023) != 0 && !b.getOtherAtom (this).isDeleted ()) ++n;

				  return n;
			      });
	Clazz.overrideMethod (c$, "getCovalentHydrogenCount", 
			      function () {
				  if (this.bonds == null) return 0;
				  var n = 0;
				  for (var i = this.bonds.length; --i >= 0; ) {
				      if ((this.bonds[i].order & 1023) == 0) continue;
				      var a = this.bonds[i].getOtherAtom (this);
				      if (a.valence >= 0 && a.getElementNumber () == 1) ++n;
				  }
				  return n;
			      });
	Clazz.overrideMethod (c$, "getEdges", 
			      function () {
				  return this.bonds;
			      });
	Clazz.defineMethod (c$, "setColixAtom", 
			    function (colixAtom) {
				this.colixAtom = colixAtom;
			    }, "~N");
	Clazz.defineMethod (c$, "setPaletteID", 
			    function (paletteID) {
				this.paletteID = paletteID;
			    }, "~N");
	Clazz.defineMethod (c$, "setTranslucent", 
			    function (isTranslucent, translucentLevel) {
				this.colixAtom = org.jmol.util.Colix.getColixTranslucent3 (this.colixAtom, isTranslucent, translucentLevel);
			    }, "~B,~N");
	Clazz.defineMethod (c$, "isTranslucent", 
			    function () {
				return org.jmol.util.Colix.isColixTranslucent (this.colixAtom);
			    });
	Clazz.overrideMethod (c$, "getElementNumber", 
			      function () {
				  return org.jmol.util.Elements.getElementNumber (this.atomicAndIsotopeNumber);
			      });
	Clazz.overrideMethod (c$, "getIsotopeNumber", 
			      function () {
				  return org.jmol.util.Elements.getIsotopeNumber (this.atomicAndIsotopeNumber);
			      });
	Clazz.overrideMethod (c$, "getAtomicAndIsotopeNumber", 
			      function () {
				  return this.atomicAndIsotopeNumber;
			      });
	Clazz.defineMethod (c$, "setAtomicAndIsotopeNumber", 
			    function (n) {
				if (n < 0 || (n % 128) >= org.jmol.util.Elements.elementNumberMax || n > 32767) n = 0;
				this.atomicAndIsotopeNumber = n;
			    }, "~N");
	Clazz.defineMethod (c$, "getElementSymbolIso", 
			    function (withIsotope) {
				return org.jmol.util.Elements.elementSymbolFromNumber (withIsotope ? this.atomicAndIsotopeNumber : this.atomicAndIsotopeNumber % 128);
			    }, "~B");
	Clazz.defineMethod (c$, "getElementSymbol", 
			    function () {
				return this.getElementSymbolIso (true);
			    });
	Clazz.defineMethod (c$, "getAlternateLocationID", 
			    function () {
				return this.alternateLocationID;
			    });
	Clazz.defineMethod (c$, "isAlternateLocationMatch", 
			    function (strPattern) {
				if (strPattern == null) return (this.alternateLocationID == '\0');
				if (strPattern.length != 1) return false;
				var ch = strPattern.charAt (0);
				return (ch == '*' || ch == '?' && this.alternateLocationID != '\0' || this.alternateLocationID == ch);
			    }, "~S");
	Clazz.defineMethod (c$, "isHetero", 
			    function () {
				return (this.formalChargeAndFlags & 2) != 0;
			    });
	Clazz.defineMethod (c$, "hasVibration", 
			    function () {
				return (this.formalChargeAndFlags & 1) != 0;
			    });
	Clazz.defineMethod (c$, "setFormalCharge", 
			    function (charge) {
				this.formalChargeAndFlags = ((this.formalChargeAndFlags & 3) | ((charge == -2147483648 ? 0 : charge > 7 ? 7 : charge < -3 ? -3 : charge) << 2));
			    }, "~N");
	Clazz.defineMethod (c$, "setVibrationVector", 
			    function () {
				this.formalChargeAndFlags |= 1;
			    });
	Clazz.overrideMethod (c$, "getFormalCharge", 
			      function () {
				  return this.formalChargeAndFlags >> 2;
			      });
	Clazz.defineMethod (c$, "getOccupancy100", 
			    function () {
				var occupancies = this.group.chain.model.modelSet.occupancies;
				return occupancies == null ? 100 : occupancies[this.index];
			    });
	Clazz.defineMethod (c$, "getBfactor100", 
			    function () {
				var bfactor100s = this.group.chain.model.modelSet.bfactor100s;
				if (bfactor100s == null) return 0;
				return bfactor100s[this.index];
			    });
	Clazz.defineMethod (c$, "getHydrophobicity", 
			    ($fz = function () {
				var values = this.group.chain.model.modelSet.hydrophobicities;
				if (values == null) return org.jmol.util.Elements.getHydrophobicity (this.group.getGroupID ());
				return values[this.index];
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setRadius", 
			    function (radius) {
				return !Float.isNaN (this.userDefinedVanDerWaalRadius = (radius > 0 ? radius : NaN));
			    }, "~N");
	Clazz.defineMethod (c$, "$delete", 
			    function (bsBonds) {
				this.valence = -1;
				if (this.bonds != null) for (var i = this.bonds.length; --i >= 0; ) {
				    var bond = this.bonds[i];
				    bond.getOtherAtom (this).deleteBond (bond);
				    bsBonds.set (bond.index);
				}
				this.bonds = null;
			    }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "isDeleted", 
			      function () {
				  return (this.valence < 0);
			      });
	Clazz.defineMethod (c$, "setValence", 
			    function (nBonds) {
				if (this.isDeleted ()) return;
				this.valence = (nBonds < 0 ? 0 : nBonds < 0xEF ? nBonds : 0xEF);
			    }, "~N");
	Clazz.overrideMethod (c$, "getValence", 
			      function () {
				  if (this.isDeleted ()) return -1;
				  var n = this.valence;
				  if (n == 0 && this.bonds != null) for (var i = this.bonds.length; --i >= 0; ) n += this.bonds[i].getValence ();

				  return n;
			      });
	Clazz.overrideMethod (c$, "getImplicitHydrogenCount", 
			      function () {
				  return this.group.chain.model.modelSet.getImplicitHydrogenCount (this);
			      });
	Clazz.defineMethod (c$, "getTargetValence", 
			    function () {
				switch (this.getElementNumber ()) {
				case 6:
				case 14:
				    return 4;
				case 5:
				case 7:
				case 15:
				    return 3;
				case 8:
				case 16:
				    return 2;
				case 9:
				case 17:
				case 35:
				case 53:
				    return 1;
				}
				return -1;
			    });
	Clazz.defineMethod (c$, "getDimensionValue", 
			    function (dimension) {
				return (dimension == 0 ? this.x : (dimension == 1 ? this.y : this.z));
			    }, "~N");
	Clazz.defineMethod (c$, "getVanderwaalsRadiusFloat", 
			    function (viewer, type) {
				return (Float.isNaN (this.userDefinedVanDerWaalRadius) ? viewer.getVanderwaalsMarType (this.atomicAndIsotopeNumber % 128, this.getVdwType (type)) / 1000 : this.userDefinedVanDerWaalRadius);
			    }, "org.jmol.viewer.Viewer,org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "getVdwType", 
			    ($fz = function (type) {
				switch (type) {
				case org.jmol.constant.EnumVdw.AUTO:
				    type = this.group.chain.model.modelSet.getDefaultVdwType (this.modelIndex);
				    break;
				case org.jmol.constant.EnumVdw.NOJMOL:
				    type = this.group.chain.model.modelSet.getDefaultVdwType (this.modelIndex);
				    if (type === org.jmol.constant.EnumVdw.AUTO_JMOL) type = org.jmol.constant.EnumVdw.AUTO_BABEL;
				    break;
				}
				return type;
			    }, $fz.isPrivate = true, $fz), "org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "getCovalentRadiusFloat", 
			    ($fz = function () {
				return org.jmol.util.Elements.getBondingRadiusFloat (this.atomicAndIsotopeNumber, 0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getBondingRadiusFloat", 
			    function () {
				var ionicRadii = this.group.chain.model.modelSet.ionicRadii;
				var r = (ionicRadii == null ? 0 : ionicRadii[this.index]);
				return (r == 0 ? org.jmol.util.Elements.getBondingRadiusFloat (this.atomicAndIsotopeNumber, this.getFormalCharge ()) : r);
			    });
	Clazz.defineMethod (c$, "getVolume", 
			    function (viewer, vType) {
				var r1 = (vType == null ? this.userDefinedVanDerWaalRadius : NaN);
				if (Float.isNaN (r1)) r1 = viewer.getVanderwaalsMarType (this.getElementNumber (), this.getVdwType (vType)) / 1000;
				var volume = 0;
				if (this.bonds != null) for (var j = 0; j < this.bonds.length; j++) {
				    if (!this.bonds[j].isCovalent ()) continue;
				    var atom2 = this.bonds[j].getOtherAtom (this);
				    var r2 = (vType == null ? atom2.userDefinedVanDerWaalRadius : NaN);
				    if (Float.isNaN (r2)) r2 = viewer.getVanderwaalsMarType (atom2.getElementNumber (), atom2.getVdwType (vType)) / 1000;
				    var d = this.distance (atom2);
				    if (d > r1 + r2) continue;
				    if (d + r1 <= r2) return 0;
				    var h = r1 - (r1 * r1 + d * d - r2 * r2) / (2.0 * d);
				    volume -= 1.0471975511965976 * h * h * (3 * r1 - h);
				}
				return (volume + 4.1887902047863905 * r1 * r1 * r1);
			    }, "org.jmol.viewer.Viewer,org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "getCurrentBondCount", 
			    function () {
				return this.bonds == null ? 0 : this.bonds.length;
			    });
	Clazz.defineMethod (c$, "getColix", 
			    function () {
				return this.colixAtom;
			    });
	Clazz.defineMethod (c$, "getPaletteID", 
			    function () {
				return this.paletteID;
			    });
	Clazz.defineMethod (c$, "getRadius", 
			    function () {
				return Math.abs (this.madAtom / (2000.0));
			    });
	Clazz.overrideMethod (c$, "getIndex", 
			      function () {
				  return this.index;
			      });
	Clazz.overrideMethod (c$, "getAtomSite", 
			      function () {
				  return this.atomSite;
			      });
	Clazz.defineMethod (c$, "setAtomSymmetry", 
			    function (bsSymmetry) {
				this.atomSymmetry = bsSymmetry;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomSymmetry", 
			    function () {
				return this.atomSymmetry;
			    });
	Clazz.defineMethod (c$, "setGroup", 
			    function (group) {
				this.group = group;
			    }, "org.jmol.modelset.Group");
	Clazz.defineMethod (c$, "getGroup", 
			    function () {
				return this.group;
			    });
	Clazz.overrideMethod (c$, "getGroupBits", 
			      function (bs) {
				  this.group.selectAtoms (bs);
			      }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getAtomName", 
			      function () {
				  return (this.atomID > 0 ? org.jmol.viewer.JmolConstants.getSpecialAtomName (this.atomID) : this.group.chain.model.modelSet.atomNames[this.index]);
			      });
	Clazz.overrideMethod (c$, "getAtomType", 
			      function () {
				  var atomTypes = this.group.chain.model.modelSet.atomTypes;
				  var type = (atomTypes == null ? null : atomTypes[this.index]);
				  return (type == null ? this.getAtomName () : type);
			      });
	Clazz.defineMethod (c$, "getAtomNumber", 
			    function () {
				var atomSerials = this.group.chain.model.modelSet.atomSerials;
				return (atomSerials != null ? atomSerials[this.index] : this.index);
			    });
	Clazz.defineMethod (c$, "isInFrame", 
			    function () {
				return ((this.shapeVisibilityFlags & 1) != 0);
			    });
	Clazz.defineMethod (c$, "getShapeVisibilityFlags", 
			    function () {
				return this.shapeVisibilityFlags;
			    });
	Clazz.defineMethod (c$, "isShapeVisible", 
			    function (shapeVisibilityFlag) {
				return ((this.shapeVisibilityFlags & shapeVisibilityFlag) != 0);
			    }, "~N");
	Clazz.defineMethod (c$, "getPartialCharge", 
			    function () {
				var partialCharges = this.group.chain.model.modelSet.partialCharges;
				return partialCharges == null ? 0 : partialCharges[this.index];
			    });
	Clazz.defineMethod (c$, "getEllipsoid", 
			    function () {
				return this.group.chain.model.modelSet.getEllipsoid (this.index);
			    });
	Clazz.defineMethod (c$, "scaleEllipsoid", 
			    function (size, iSelect) {
				var ellipsoid = this.getEllipsoid ();
				if (ellipsoid == null || iSelect >= ellipsoid.length || ellipsoid[iSelect] == null) return;
				ellipsoid[iSelect].setSize (size);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getSymmetryTranslation", 
			    function (symop, cellRange, nOps) {
				var pt = symop;
				for (var i = 0; i < cellRange.length; i++) if (this.atomSymmetry.get (pt += nOps)) return cellRange[i];

				return 0;
			    }, "~N,~A,~N");
	Clazz.defineMethod (c$, "getCellTranslation", 
			    function (cellNNN, cellRange, nOps) {
				var pt = nOps;
				for (var i = 0; i < cellRange.length; i++) for (var j = 0; j < nOps; j++, pt++) if (this.atomSymmetry.get (pt) && cellRange[i] == cellNNN) return cellRange[i];


				return 0;
			    }, "~N,~A,~N");
	Clazz.defineMethod (c$, "getSymmetryOperatorList", 
			    function () {
				var str = "";
				var f = this.group.chain.model.modelSet;
				var nOps = f.getModelSymmetryCount (this.modelIndex);
				if (nOps == 0 || this.atomSymmetry == null) return "";
				var cellRange = f.getModelCellRange (this.modelIndex);
				var pt = nOps;
				var n = (cellRange == null ? 1 : cellRange.length);
				for (var i = 0; i < n; i++) for (var j = 0; j < nOps; j++) if (this.atomSymmetry.get (pt++)) str += "," + (j + 1) + "" + cellRange[i];


				return str.substring (1);
			    });
	Clazz.overrideMethod (c$, "getModelIndex", 
			      function () {
				  return this.modelIndex;
			      });
	Clazz.defineMethod (c$, "getMoleculeNumber", 
			    function (inModel) {
				return (this.group.chain.model.modelSet.getMoleculeIndex (this.index, inModel) + 1);
			    }, "~B");
	Clazz.defineMethod (c$, "getFractionalCoord", 
			    ($fz = function (ch, asAbsolute) {
				var pt = this.getFractionalCoordPt (asAbsolute);
				return (ch == 'X' ? pt.x : ch == 'Y' ? pt.y : pt.z);
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "getFractionalCoordPt", 
			    ($fz = function (asAbsolute) {
				var c = this.group.chain.model.modelSet.getUnitCell (this.modelIndex);
				if (c == null) return this;
				var pt = org.jmol.util.Point3f.newP (this);
				c.toFractional (pt, asAbsolute);
				return pt;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getFractionalUnitCoord", 
			    ($fz = function (ch) {
				var pt = this.getFractionalUnitCoordPt (false);
				return (ch == 'X' ? pt.x : ch == 'Y' ? pt.y : pt.z);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getFractionalUnitCoordPt", 
			    function (asCartesian) {
				var c = this.group.chain.model.modelSet.getUnitCell (this.modelIndex);
				if (c == null) return this;
				var pt = org.jmol.util.Point3f.newP (this);
				if (this.group.chain.model.isJmolDataFrame) {
				    c.toFractional (pt, false);
				    if (asCartesian) c.toCartesian (pt, false);
				} else {
				    c.toUnitCell (pt, null);
				    if (!asCartesian) c.toFractional (pt, false);
				}return pt;
			    }, "~B");
	Clazz.defineMethod (c$, "getFractionalUnitDistance", 
			    function (pt, ptTemp1, ptTemp2) {
				var c = this.group.chain.model.modelSet.getUnitCell (this.modelIndex);
				if (c == null) return this.distance (pt);
				ptTemp1.setT (this);
				ptTemp2.setT (pt);
				if (this.group.chain.model.isJmolDataFrame) {
				    c.toFractional (ptTemp1, true);
				    c.toFractional (ptTemp2, true);
				} else {
				    c.toUnitCell (ptTemp1, null);
				    c.toUnitCell (ptTemp2, null);
				}return ptTemp1.distance (ptTemp2);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setFractionalCoord", 
			    function (tok, fValue, asAbsolute) {
				var c = this.group.chain.model.modelSet.getUnitCell (this.modelIndex);
				if (c != null) c.toFractional (this, asAbsolute);
				switch (tok) {
				case 1112541191:
				case 1112541188:
				    this.x = fValue;
				    break;
				case 1112541192:
				case 1112541189:
				    this.y = fValue;
				    break;
				case 1112541193:
				case 1112541190:
				    this.z = fValue;
				    break;
				}
				if (c != null) c.toCartesian (this, asAbsolute);
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "setFractionalCoordTo", 
			    function (ptNew, asAbsolute) {
				this.setFractionalCoordPt (this, ptNew, asAbsolute);
			    }, "org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "setFractionalCoordPt", 
			    function (pt, ptNew, asAbsolute) {
				pt.setT (ptNew);
				var c = this.group.chain.model.modelSet.getUnitCell (this.modelIndex);
				if (c != null) c.toCartesian (pt, asAbsolute && !this.group.chain.model.isJmolDataFrame);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "isCursorOnTopOf", 
			    function (xCursor, yCursor, minRadius, competitor) {
				var r = Clazz.doubleToInt (this.screenDiameter / 2);
				if (r < minRadius) r = minRadius;
				var r2 = r * r;
				var dx = this.screenX - xCursor;
				var dx2 = dx * dx;
				if (dx2 > r2) return false;
				var dy = this.screenY - yCursor;
				var dy2 = dy * dy;
				var dz2 = r2 - (dx2 + dy2);
				if (dz2 < 0) return false;
				if (competitor == null) return true;
				var z = this.screenZ;
				var zCompetitor = competitor.screenZ;
				var rCompetitor = Clazz.doubleToInt (competitor.screenDiameter / 2);
				if (z < zCompetitor - rCompetitor) return true;
				var dxCompetitor = competitor.screenX - xCursor;
				var dx2Competitor = dxCompetitor * dxCompetitor;
				var dyCompetitor = competitor.screenY - yCursor;
				var dy2Competitor = dyCompetitor * dyCompetitor;
				var r2Competitor = rCompetitor * rCompetitor;
				var dz2Competitor = r2Competitor - (dx2Competitor + dy2Competitor);
				return (z - Math.sqrt (dz2) < zCompetitor - Math.sqrt (dz2Competitor));
			    }, "~N,~N,~N,org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getInfo", 
			    function () {
				return this.getIdentity (true);
			    });
	Clazz.defineMethod (c$, "getInfoXYZ", 
			    function (useChimeFormat) {
				if (useChimeFormat) {
				    var group3 = this.getGroup3 (true);
				    var chainID = this.getChainID ();
				    var pt = this.getFractionalCoordPt (true);
				    return "Atom: " + (group3 == null ? this.getElementSymbol () : this.getAtomName ()) + " " + this.getAtomNumber () + (group3 != null && group3.length > 0 ? (this.isHetero () ? " Hetero: " : " Group: ") + group3 + " " + this.getResno () + (chainID.charCodeAt (0) != 0 && chainID != ' ' ? " Chain: " + chainID : "") : "") + " Model: " + this.getModelNumber () + " Coordinates: " + this.x + " " + this.y + " " + this.z + (pt == null ? "" : " Fractional: " + pt.x + " " + pt.y + " " + pt.z);
				}return this.getIdentityXYZ (true);
			    }, "~B");
	Clazz.defineMethod (c$, "getIdentityXYZ", 
			    function (allInfo) {
				var pt = (this.group.chain.model.isJmolDataFrame ? this.getFractionalCoordPt (false) : this);
				return this.getIdentity (allInfo) + " " + pt.x + " " + pt.y + " " + pt.z;
			    }, "~B");
	Clazz.defineMethod (c$, "getIdentity", 
			    function (allInfo) {
				var info =  new org.jmol.util.StringXBuilder ();
				var group3 = this.getGroup3 (true);
				if (group3 != null && group3.length > 0) {
				    info.append ("[");
				    info.append (group3);
				    info.append ("]");
				    var seqcodeString = this.getSeqcodeString ();
				    if (seqcodeString != null) info.append (seqcodeString);
				    var chainID = this.getChainID ();
				    if (chainID.charCodeAt (0) != 0 && chainID != ' ') {
					info.append (":");
					info.appendC (chainID);
				    }if (!allInfo) return info.toString ();
				    info.append (".");
				}info.append (this.getAtomName ());
				if (info.length () == 0) {
				    info.append (this.getElementSymbolIso (false));
				    info.append (" ");
				    info.appendI (this.getAtomNumber ());
				}if (this.alternateLocationID.charCodeAt (0) != 0) {
				    info.append ("%");
				    info.appendC (this.alternateLocationID);
				}if (this.group.chain.model.modelSet.getModelCount () > 1) {
				    info.append ("/");
				    info.append (this.getModelNumberForLabel ());
				}info.append (" #");
				info.appendI (this.getAtomNumber ());
				return info.toString ();
			    }, "~B");
	Clazz.overrideMethod (c$, "getGroup3", 
			      function (allowNull) {
				  var group3 = this.group.getGroup3 ();
				  return (allowNull || group3 != null && group3.length > 0 ? group3 : "UNK");
			      }, "~B");
	Clazz.overrideMethod (c$, "getGroup1", 
			      function (c0) {
				  var c = this.group.getGroup1 ();
				  return (c != '\0' ? "" + c : c0 != '\0' ? "" + c0 : "");
			      }, "~S");
	Clazz.overrideMethod (c$, "isProtein", 
			      function () {
				  return this.group.isProtein ();
			      });
	Clazz.defineMethod (c$, "isCarbohydrate", 
			    function () {
				return this.group.isCarbohydrate ();
			    });
	Clazz.overrideMethod (c$, "isNucleic", 
			      function () {
				  return this.group.isNucleic ();
			      });
	Clazz.overrideMethod (c$, "isDna", 
			      function () {
				  return this.group.isDna ();
			      });
	Clazz.overrideMethod (c$, "isRna", 
			      function () {
				  return this.group.isRna ();
			      });
	Clazz.overrideMethod (c$, "isPurine", 
			      function () {
				  return this.group.isPurine ();
			      });
	Clazz.overrideMethod (c$, "isPyrimidine", 
			      function () {
				  return this.group.isPyrimidine ();
			      });
	Clazz.defineMethod (c$, "getSeqcode", 
			    function () {
				return this.group.getSeqcode ();
			    });
	Clazz.overrideMethod (c$, "getResno", 
			      function () {
				  return this.group.getResno ();
			      });
	Clazz.defineMethod (c$, "isClickable", 
			    function () {
				if (!this.isVisible (0)) return false;
				var flags = this.shapeVisibilityFlags | this.group.shapeVisibilityFlags;
				return ((flags & this.clickabilityFlags) != 0);
			    });
	Clazz.defineMethod (c$, "getClickabilityFlags", 
			    function () {
				return this.clickabilityFlags;
			    });
	Clazz.defineMethod (c$, "setClickable", 
			    function (flag) {
				if (flag == 0) this.clickabilityFlags = 0;
				else this.clickabilityFlags |= flag;
			    }, "~N");
	Clazz.defineMethod (c$, "isVisible", 
			    function (flags) {
				if (!this.isInFrame () || this.group.chain.model.modelSet.isAtomHidden (this.index)) return false;
				if (flags != 0) return (this.isShapeVisible (flags));
				flags = this.shapeVisibilityFlags;
				if (this.group.shapeVisibilityFlags != org.jmol.modelset.Atom.BACKBONE_VISIBILITY_FLAG || this.isLeadAtom ()) flags |= this.group.shapeVisibilityFlags;
				return ((flags & -2) != 0);
			    }, "~N");
	Clazz.overrideMethod (c$, "isLeadAtom", 
			      function () {
				  return this.group.isLeadAtom (this.index);
			      });
	Clazz.defineMethod (c$, "getGroupParameter", 
			    function (tok) {
				return this.group.getGroupParameter (tok);
			    }, "~N");
	Clazz.overrideMethod (c$, "getChainID", 
			      function () {
				  return this.group.chain.chainID;
			      });
	Clazz.defineMethod (c$, "getSurfaceDistance100", 
			    function () {
				return this.group.chain.model.modelSet.getSurfaceDistance100 (this.index);
			    });
	Clazz.defineMethod (c$, "getVibrationVector", 
			    function () {
				return this.group.chain.model.modelSet.getVibrationVector (this.index, false);
			    });
	Clazz.defineMethod (c$, "getVibrationCoord", 
			    function (ch) {
				return this.group.chain.model.modelSet.getVibrationCoord (this.index, ch);
			    }, "~S");
	Clazz.defineMethod (c$, "getPolymerLength", 
			    function () {
				return this.group.getBioPolymerLength ();
			    });
	Clazz.defineMethod (c$, "getPolymerIndexInModel", 
			    function () {
				return this.group.getBioPolymerIndexInModel ();
			    });
	Clazz.defineMethod (c$, "getMonomerIndex", 
			    function () {
				return this.group.getMonomerIndex ();
			    });
	Clazz.defineMethod (c$, "getSelectedGroupCountWithinChain", 
			    function () {
				return this.group.chain.selectedGroupCount;
			    });
	Clazz.defineMethod (c$, "getSelectedGroupIndexWithinChain", 
			    function () {
				return this.group.getSelectedGroupIndex ();
			    });
	Clazz.defineMethod (c$, "getSelectedMonomerCountWithinPolymer", 
			    function () {
				return this.group.getSelectedMonomerCount ();
			    });
	Clazz.defineMethod (c$, "getSelectedMonomerIndexWithinPolymer", 
			    function () {
				return this.group.getSelectedMonomerIndex ();
			    });
	Clazz.defineMethod (c$, "getChain", 
			    function () {
				return this.group.chain;
			    });
	Clazz.defineMethod (c$, "getModelNumberForLabel", 
			    function () {
				return this.group.chain.model.modelSet.getModelNumberForAtomLabel (this.modelIndex);
			    });
	Clazz.defineMethod (c$, "getModelNumber", 
			    function () {
				return this.group.chain.model.modelSet.getModelNumber (this.modelIndex) % 1000000;
			    });
	Clazz.defineMethod (c$, "getModelFileIndex", 
			    function () {
				return this.group.chain.model.fileIndex;
			    });
	Clazz.defineMethod (c$, "getModelFileNumber", 
			    function () {
				return this.group.chain.model.modelSet.getModelFileNumber (this.modelIndex);
			    });
	Clazz.overrideMethod (c$, "getBioStructureTypeName", 
			      function () {
				  return this.getProteinStructureType ().getBioStructureTypeName (true);
			      });
	Clazz.defineMethod (c$, "getProteinStructureType", 
			    function () {
				return this.group.getProteinStructureType ();
			    });
	Clazz.defineMethod (c$, "getProteinStructureSubType", 
			    function () {
				return this.group.getProteinStructureSubType ();
			    });
	Clazz.defineMethod (c$, "getStrucNo", 
			    function () {
				return this.group.getStrucNo ();
			    });
	Clazz.defineMethod (c$, "getStructureId", 
			    function () {
				return this.group.getStructureId ();
			    });
	Clazz.defineMethod (c$, "getProteinStructureTag", 
			    function () {
				return this.group.getProteinStructureTag ();
			    });
	Clazz.defineMethod (c$, "getGroupID", 
			    function () {
				return this.group.groupID;
			    });
	Clazz.defineMethod (c$, "getSeqcodeString", 
			    function () {
				return this.group.getSeqcodeString ();
			    });
	Clazz.defineMethod (c$, "getSeqNumber", 
			    function () {
				return this.group.getSeqNumber ();
			    });
	Clazz.defineMethod (c$, "getInsertionCode", 
			    function () {
				return this.group.getInsertionCode ();
			    });
	Clazz.overrideMethod (c$, "equals", 
			      function (obj) {
				  return (this === obj);
			      }, "~O");
	Clazz.overrideMethod (c$, "hashCode", 
			      function () {
				  return this.index;
			      });
	Clazz.defineMethod (c$, "findAromaticNeighbor", 
			    function (notAtomIndex) {
				if (this.bonds == null) return null;
				for (var i = this.bonds.length; --i >= 0; ) {
				    var bondT = this.bonds[i];
				    var a = bondT.getOtherAtom (this);
				    if (bondT.isAromatic () && a.index != notAtomIndex) return a;
				}
				return null;
			    }, "~N");
	c$.atomPropertyInt = Clazz.defineMethod (c$, "atomPropertyInt", 
						 function (atom, tokWhat) {
						     switch (tokWhat) {
						     case 1095763969:
							 return atom.getAtomNumber ();
						     case 1095761922:
							 return atom.atomID;
						     case 1095761923:
							 return atom.getIndex ();
						     case 1095761924:
							 return atom.getCovalentBondCount ();
						     case 1766856708:
							 return atom.group.chain.model.modelSet.viewer.getColorArgbOrGray (atom.getColix ());
						     case 1087375365:
						     case 1095763976:
							 return atom.getElementNumber ();
						     case 1095761927:
							 return atom.atomicAndIsotopeNumber;
						     case 1229984263:
							 return atom.getModelFileIndex () + 1;
						     case 1632634889:
							 return atom.getFormalCharge ();
						     case 1095761930:
							 return atom.getGroupID ();
						     case 1095761931:
							 return atom.group.getGroupIndex ();
						     case 1095766028:
							 return atom.getModelNumber ();
						     case -1095766028:
							 return atom.getModelFileNumber ();
						     case 1095761933:
							 return atom.modelIndex;
						     case 1095761934:
							 return atom.getMoleculeNumber (true);
						     case 1129318401:
							 return atom.getOccupancy100 ();
						     case 1095761935:
							 return atom.getGroup ().getBioPolymerIndexInModel () + 1;
						     case 1095761936:
							 return atom.getPolymerLength ();
						     case 1666189314:
							 return atom.getRasMolRadius ();
						     case 1095761937:
							 return atom.getResno ();
						     case 1095761938:
							 return atom.getAtomSite ();
						     case 1641025539:
							 return atom.getProteinStructureType ().getId ();
						     case 1238369286:
							 return atom.getProteinStructureSubType ().getId ();
						     case 1095761939:
							 return atom.getStrucNo ();
						     case 1095763988:
							 return atom.getValence ();
						     }
						     return 0;
						 }, "org.jmol.modelset.Atom,~N");
	c$.atomPropertyFloat = Clazz.defineMethod (c$, "atomPropertyFloat", 
						   function (viewer, atom, tokWhat) {
						       switch (tokWhat) {
						       case 1666189314:
							   return atom.getRadius ();
						       case 1114638350:
							   return (viewer.isAtomSelected (atom.index) ? 1 : 0);
						       case 1112539149:
							   atom.group.chain.model.modelSet.getSurfaceDistanceMax ();
							   return atom.getSurfaceDistance100 () / 100;
						       case 1112541199:
							   return atom.getBfactor100 () / 100;
						       case 1114638346:
							   return atom.getHydrophobicity ();
						       case 1313866247:
							   return atom.getVolume (viewer, org.jmol.constant.EnumVdw.AUTO);
						       case 1112539137:
							   return atom.getADPMinMax (true);
						       case 1112539138:
							   return atom.getADPMinMax (false);
						       case 1112541185:
						       case 1112541205:
							   return atom.x;
						       case 1112541186:
						       case 1112541206:
							   return atom.y;
						       case 1112541187:
						       case 1112541207:
							   return atom.z;
						       case 1112539139:
							   return atom.getCovalentRadiusFloat ();
						       case 1112541188:
							   return atom.getFractionalCoord ('X', true);
						       case 1112541189:
							   return atom.getFractionalCoord ('Y', true);
						       case 1112541190:
							   return atom.getFractionalCoord ('Z', true);
						       case 1112541191:
							   return atom.getFractionalCoord ('X', false);
						       case 1112541192:
							   return atom.getFractionalCoord ('Y', false);
						       case 1112541193:
							   return atom.getFractionalCoord ('Z', false);
						       case 1112539145:
							   return atom.screenX;
						       case 1112539146:
							   return atom.group.chain.model.modelSet.viewer.getScreenHeight () - atom.screenY;
						       case 1112539147:
							   return atom.screenZ;
						       case 1112541195:
							   return atom.getBondingRadiusFloat ();
						       case 1112539141:
							   return atom.getMass ();
						       case 1129318401:
							   return atom.getOccupancy100 () / 100;
						       case 1112541196:
							   return atom.getPartialCharge ();
						       case 1112539143:
						       case 1112539144:
						       case 1112539142:
							   if (atom.group.chain.model.isJmolDataFrame && atom.group.chain.model.jmolFrameType.startsWith ("plot ramachandran")) {
							       switch (tokWhat) {
							       case 1112539143:
								   return atom.getFractionalCoord ('X', false);
							       case 1112539144:
								   return atom.getFractionalCoord ('Y', false);
							       case 1112539142:
								   if (atom.group.chain.model.isJmolDataFrame && atom.group.chain.model.jmolFrameType.equals ("plot ramachandran")) {
								       var omega = atom.getFractionalCoord ('Z', false) - 180;
								       return (omega < -180 ? 360 + omega : omega);
								   }}
							   }return atom.getGroupParameter (tokWhat);
						       case 1112539140:
						       case 1112539150:
						       case 1112539148:
							   return atom.getGroupParameter (tokWhat);
						       case 1113200651:
							   return atom.getRadius ();
						       case 1115297793:
						       case 1113200642:
						       case 1113198595:
						       case 1113198596:
						       case 1113198597:
						       case 1113200646:
						       case 1113200647:
						       case 1113200649:
						       case 1113200650:
						       case 1113200652:
						       case 1650071565:
						       case 1113200654:
							   return viewer.getAtomShapeValue (tokWhat, atom.group, atom.index);
						       case 1112539151:
							   return atom.getFractionalUnitCoord ('X');
						       case 1112539152:
							   return atom.getFractionalUnitCoord ('Y');
						       case 1112539153:
							   return atom.getFractionalUnitCoord ('Z');
						       case 1649412112:
							   return atom.getVanderwaalsRadiusFloat (viewer, org.jmol.constant.EnumVdw.AUTO);
						       case 1112541202:
							   return atom.getVibrationCoord ('X');
						       case 1112541203:
							   return atom.getVibrationCoord ('Y');
						       case 1112541204:
							   return atom.getVibrationCoord ('Z');
						       case 1649410065:
							   var v = atom.getVibrationVector ();
							   return (v == null ? 0 : v.length () * viewer.getVectorScale ());
						       }
						       return org.jmol.modelset.Atom.atomPropertyInt (atom, tokWhat);
						   }, "org.jmol.viewer.Viewer,org.jmol.modelset.Atom,~N");
	Clazz.defineMethod (c$, "getMass", 
			    ($fz = function () {
				var mass = this.getIsotopeNumber ();
				return (mass > 0 ? mass : org.jmol.util.Elements.getAtomicMass (this.getElementNumber ()));
			    }, $fz.isPrivate = true, $fz));
	c$.atomPropertyString = Clazz.defineMethod (c$, "atomPropertyString", 
						    function (viewer, atom, tokWhat) {
							var ch;
							switch (tokWhat) {
							case 1087373315:
							    ch = atom.getAlternateLocationID ();
							    return (ch == '\0' ? "" : "" + ch);
							case 1087375362:
							    return atom.getAtomName ();
							case 1087375361:
							    return atom.getAtomType ();
							case 1087373316:
							    ch = atom.getChainID ();
							    return (ch == '\0' ? "" : "" + ch);
							case 1087373320:
							    return atom.getGroup1 ('?');
							case 1087373319:
							    return atom.getGroup1 ('\0');
							case 1087373318:
							    return atom.getGroup3 (false);
							case 1087375365:
							    return atom.getElementSymbolIso (true);
							case 1087373321:
							    return atom.getIdentity (true);
							case 1087373322:
							    ch = atom.getInsertionCode ();
							    return (ch == '\0' ? "" : "" + ch);
							case 1826248715:
							case 1288701960:
							    var s = atom.group.chain.model.modelSet.getAtomLabel (atom.getIndex ());
							    if (s == null) s = "";
							    return s;
							case 1641025539:
							    return atom.getProteinStructureType ().getBioStructureTypeName (false);
							case 1238369286:
							    return atom.getProteinStructureSubType ().getBioStructureTypeName (false);
							case 1087373324:
							    return atom.getStructureId ();
							case 1087373323:
							    return viewer.getHybridizationAndAxes (atom.index, null, null, "d");
							case 1087375373:
							    return atom.getElementSymbolIso (false);
							case 1089470478:
							    return atom.getSymmetryOperatorList ();
							}
							return "";
						    }, "org.jmol.viewer.Viewer,org.jmol.modelset.Atom,~N");
	c$.atomPropertyTuple = Clazz.defineMethod (c$, "atomPropertyTuple", 
						   function (atom, tok) {
						       switch (tok) {
						       case 1146095627:
							   return atom.getFractionalCoordPt (!atom.group.chain.model.isJmolDataFrame);
						       case 1146095629:
							   return atom.getFractionalCoordPt (false);
						       case 1146093582:
							   return (atom.group.chain.model.isJmolDataFrame ? atom.getFractionalCoordPt (false) : atom.getFractionalUnitCoordPt (false));
						       case 1146095628:
							   return org.jmol.util.Point3f.new3 (atom.screenX, atom.group.chain.model.modelSet.viewer.getScreenHeight () - atom.screenY, atom.screenZ);
						       case 1146095631:
							   var v = atom.getVibrationVector ();
							   if (v == null) v =  new org.jmol.util.Vector3f ();
							   return v;
						       case 1146095626:
							   return atom;
						       case 1766856708:
							   return org.jmol.util.ColorUtil.colorPointFromInt2 (atom.group.chain.model.modelSet.viewer.getColorArgbOrGray (atom.getColix ()));
						       }
						       return null;
						   }, "org.jmol.modelset.Atom,~N");
	Clazz.defineMethod (c$, "isWithinStructure", 
			    function (type) {
				return this.group.isWithinStructure (type);
			    }, "org.jmol.constant.EnumStructure");
	Clazz.overrideMethod (c$, "getOffsetResidueAtom", 
			      function (name, offset) {
				  return this.group.chain.model.modelSet.getGroupAtom (this, offset, name);
			      }, "~S,~N");
	Clazz.overrideMethod (c$, "isCrossLinked", 
			      function (node) {
				  return this.group.isCrossLinked ((node).getGroup ());
			      }, "org.jmol.util.JmolNode");
	Clazz.overrideMethod (c$, "getCrossLinkLeadAtomIndexes", 
			      function (vReturn) {
				  return this.group.getCrossLinkLead (vReturn);
			      }, "java.util.List");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return this.getInfo ();
			      });
	Clazz.defineMethod (c$, "isWithinFourBonds", 
			    function (atomOther) {
				if (this.modelIndex != atomOther.modelIndex) return false;
				if (this.isCovalentlyBonded (atomOther)) return true;
				var bondsOther = atomOther.bonds;
				for (var i = 0; i < bondsOther.length; i++) {
				    var atom2 = bondsOther[i].getOtherAtom (atomOther);
				    if (this.isCovalentlyBonded (atom2)) return true;
				    for (var j = 0; j < this.bonds.length; j++) if (this.bonds[j].getOtherAtom (this).isCovalentlyBonded (atom2)) return true;

				}
				return false;
			    }, "org.jmol.modelset.Atom");
	Clazz.overrideMethod (c$, "findAtomsLike", 
			      function (atomExpression) {
				  return this.group.chain.model.modelSet.viewer.getAtomBitSet (atomExpression);
			      }, "~S");
	Clazz.defineStatics (c$,
			     "VIBRATION_VECTOR_FLAG", 1,
			     "IS_HETERO_FLAG", 2,
			     "FLAG_MASK", 3,
			     "RADIUS_MAX", 16);
	c$.BACKBONE_VISIBILITY_FLAG = c$.prototype.BACKBONE_VISIBILITY_FLAG = org.jmol.viewer.JmolConstants.getShapeVisibilityFlag (9);
    });
    // 
    //// org\jmol\modelset\AtomCollection.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["java.lang.Float", "org.jmol.util.BitSet", "$.Vector3f"], "org.jmol.modelset.AtomCollection", ["java.lang.Character", "java.util.ArrayList", "$.Arrays", "org.jmol.atomdata.RadiusData", "org.jmol.constant.EnumPalette", "$.EnumStructure", "$.EnumVdw", "org.jmol.geodesic.EnvelopeCalculation", "org.jmol.modelset.Group", "$.LabelToken", "org.jmol.script.Token", "org.jmol.util.ArrayUtil", "$.AxisAngle4f", "$.BitSetUtil", "$.Elements", "$.Escape", "$.Logger", "$.Matrix3f", "$.Measure", "$.Parser", "$.Point3f", "$.StringXBuilder", "$.TextFormat", "org.jmol.viewer.JmolConstants", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.g3d = null;
	    this.atoms = null;
	    this.atomCount = 0;
	    this.atomNames = null;
	    this.atomTypes = null;
	    this.atomSerials = null;
	    this.vibrationVectors = null;
	    this.occupancies = null;
	    this.bfactor100s = null;
	    this.partialCharges = null;
	    this.ionicRadii = null;
	    this.hydrophobicities = null;
	    this.ellipsoids = null;
	    this.surfaceDistance100s = null;
	    this.haveStraightness = false;
	    this.bsHidden = null;
	    this.maxBondingRadius = 1.4E-45;
	    this.maxVanderwaalsRadius = 1.4E-45;
	    this.hasBfactorRange = false;
	    this.bfactor100Lo = 0;
	    this.bfactor100Hi = 0;
	    this.surfaceDistanceMax = 0;
	    this.bsSurface = null;
	    this.nSurfaceAtoms = 0;
	    this.bspf = null;
	    this.preserveState = true;
	    this.tainted = null;
	    this.canSkipLoad = true;
	    this.bsEmpty = null;
	    this.bsFoundRectangle = null;
	    this.aaRet = null;
	    if (!Clazz.isClassDefined ("org.jmol.modelset.AtomCollection.AtomSorter")) {
		org.jmol.modelset.AtomCollection.$AtomCollection$AtomSorter$ ();
	    }
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "AtomCollection");
	Clazz.prepareFields (c$, function () {
	    this.bsHidden =  new org.jmol.util.BitSet ();
	    this.bsEmpty =  new org.jmol.util.BitSet ();
	    this.bsFoundRectangle =  new org.jmol.util.BitSet ();
	});
	Clazz.defineMethod (c$, "releaseModelSet", 
			    function () {
				this.atoms = null;
				this.viewer = null;
				this.g3d = null;
				this.bspf = null;
				this.surfaceDistance100s = null;
				this.bsSurface = null;
				this.tainted = null;
				this.atomNames = null;
				this.atomTypes = null;
				this.atomSerials = null;
				this.vibrationVectors = null;
				this.occupancies = null;
				this.bfactor100s = null;
				this.partialCharges = null;
				this.ionicRadii = null;
				this.ellipsoids = null;
			    });
	Clazz.defineMethod (c$, "mergeAtomArrays", 
			    function (mergeModelSet) {
				this.tainted = mergeModelSet.tainted;
				this.atomNames = mergeModelSet.atomNames;
				this.atomTypes = mergeModelSet.atomTypes;
				this.atomSerials = mergeModelSet.atomSerials;
				this.vibrationVectors = mergeModelSet.vibrationVectors;
				this.occupancies = mergeModelSet.occupancies;
				this.bfactor100s = mergeModelSet.bfactor100s;
				this.ionicRadii = mergeModelSet.ionicRadii;
				this.partialCharges = mergeModelSet.partialCharges;
				this.ellipsoids = mergeModelSet.ellipsoids;
				this.setHaveStraightness (false);
				this.surfaceDistance100s = null;
			    }, "org.jmol.modelset.AtomCollection");
	Clazz.defineMethod (c$, "setHaveStraightness", 
			    function (TF) {
				this.haveStraightness = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "getHaveStraightness", 
			    function () {
				return this.haveStraightness;
			    });
	Clazz.defineMethod (c$, "getAtomPointVector", 
			    function (bs) {
				var v =  new java.util.ArrayList ();
				if (bs != null) {
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					v.add (this.atoms[i]);
				    }
				}return v;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomCount", 
			    function () {
				return this.atomCount;
			    });
	Clazz.defineMethod (c$, "modelSetHasVibrationVectors", 
			    function () {
				return (this.vibrationVectors != null);
			    });
	Clazz.defineMethod (c$, "getAtomTypes", 
			    function () {
				return this.atomTypes;
			    });
	Clazz.defineMethod (c$, "getPartialCharges", 
			    function () {
				return this.partialCharges;
			    });
	Clazz.defineMethod (c$, "getIonicRadii", 
			    function () {
				return this.ionicRadii;
			    });
	Clazz.defineMethod (c$, "getBFactors", 
			    function () {
				return this.bfactor100s;
			    });
	Clazz.defineMethod (c$, "getHydrophobicity", 
			    function () {
				return this.hydrophobicities;
			    });
	Clazz.defineMethod (c$, "setBsHidden", 
			    function (bs) {
				this.bsHidden = bs;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "isAtomHidden", 
			    function (iAtom) {
				return this.bsHidden.get (iAtom);
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomInfo", 
			    function (i, format) {
				return (format == null ? this.atoms[i].getInfo () : org.jmol.modelset.LabelToken.formatLabel (this.viewer, this.atoms[i], format));
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getAtomInfoXYZ", 
			    function (i, useChimeFormat) {
				return this.atoms[i].getInfoXYZ (useChimeFormat);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getElementSymbol", 
			    function (i) {
				return this.atoms[i].getElementSymbol ();
			    }, "~N");
	Clazz.defineMethod (c$, "getElementNumber", 
			    function (i) {
				return this.atoms[i].getElementNumber ();
			    }, "~N");
	Clazz.defineMethod (c$, "getElementName", 
			    function (i) {
				return org.jmol.util.Elements.elementNameFromNumber (this.atoms[i].getAtomicAndIsotopeNumber ());
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomName", 
			    function (i) {
				return this.atoms[i].getAtomName ();
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomNumber", 
			    function (i) {
				return this.atoms[i].getAtomNumber ();
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomPoint3f", 
			    function (i) {
				return this.atoms[i];
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomRadius", 
			    function (i) {
				return this.atoms[i].getRadius ();
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomVdwRadius", 
			    function (i, type) {
				return this.atoms[i].getVanderwaalsRadiusFloat (this.viewer, type);
			    }, "~N,org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "getAtomColix", 
			    function (i) {
				return this.atoms[i].getColix ();
			    }, "~N");
	Clazz.defineMethod (c$, "getAtomChain", 
			    function (i) {
				return "" + this.atoms[i].getChainID ();
			    }, "~N");
	Clazz.defineMethod (c$, "getEllipsoid", 
			    function (i) {
				return (i < 0 || this.ellipsoids == null || i >= this.ellipsoids.length ? null : this.ellipsoids[i]);
			    }, "~N");
	Clazz.defineMethod (c$, "getQuaternion", 
			    function (i, qtype) {
				return (i < 0 ? null : this.atoms[i].group.getQuaternion (qtype));
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getHelixData", 
			    function (bs, tokType) {
				var iAtom = bs.nextSetBit (0);
				return (iAtom < 0 ? "null" : this.atoms[iAtom].group.getHelixData (tokType, this.viewer.getQuaternionFrame (), this.viewer.getHelixStep ()));
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getAtomIndexFromAtomNumber", 
			    function (atomNumber, bsVisibleFrames) {
				for (var i = 0; i < this.atomCount; i++) {
				    var atom = this.atoms[i];
				    if (atom.getAtomNumber () == atomNumber && bsVisibleFrames.get (atom.modelIndex)) return i;
				}
				return -1;
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setFormalCharges", 
			    function (bs, formalCharge) {
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    this.atoms[i].setFormalCharge (formalCharge);
				    this.taintAtom (i, 4);
				}
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getAtomicCharges", 
			    function () {
				var charges =  Clazz.newFloatArray (this.atomCount, 0);
				for (var i = this.atomCount; --i >= 0; ) charges[i] = this.atoms[i].getElementNumber ();

				return charges;
			    });
	Clazz.defineMethod (c$, "getRadiusVdwJmol", 
			    function (atom) {
				return org.jmol.util.Elements.getVanderwaalsMar (atom.getElementNumber (), org.jmol.constant.EnumVdw.JMOL) / 1000;
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getMaxVanderwaalsRadius", 
			    function () {
				if (this.maxVanderwaalsRadius == 1.4E-45) this.findMaxRadii ();
				return this.maxVanderwaalsRadius;
			    });
	Clazz.defineMethod (c$, "findMaxRadii", 
			    function () {
				for (var i = this.atomCount; --i >= 0; ) {
				    var atom = this.atoms[i];
				    var bondingRadius = atom.getBondingRadiusFloat ();
				    if (bondingRadius > this.maxBondingRadius) this.maxBondingRadius = bondingRadius;
				    var vdwRadius = atom.getVanderwaalsRadiusFloat (this.viewer, org.jmol.constant.EnumVdw.AUTO);
				    if (vdwRadius > this.maxVanderwaalsRadius) this.maxVanderwaalsRadius = vdwRadius;
				}
			    });
	Clazz.defineMethod (c$, "clearBfactorRange", 
			    function () {
				this.hasBfactorRange = false;
			    });
	Clazz.defineMethod (c$, "calcBfactorRange", 
			    ($fz = function (bs) {
				if (this.hasBfactorRange) return;
				this.bfactor100Lo = 2147483647;
				this.bfactor100Hi = -2147483648;
				if (bs == null) {
				    for (var i = 0; i < this.atomCount; i++) this.setBf (i);

				} else {
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) this.setBf (i);

				}this.hasBfactorRange = true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setBf", 
			    ($fz = function (i) {
				var bf = this.atoms[i].getBfactor100 ();
				if (bf < this.bfactor100Lo) this.bfactor100Lo = bf;
				else if (bf > this.bfactor100Hi) this.bfactor100Hi = bf;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getBfactor100Lo", 
			    function () {
				if (!this.hasBfactorRange) {
				    if (this.viewer.isRangeSelected ()) {
					this.calcBfactorRange (this.viewer.getSelectionSet (false));
				    } else {
					this.calcBfactorRange (null);
				    }}return this.bfactor100Lo;
			    });
	Clazz.defineMethod (c$, "getBfactor100Hi", 
			    function () {
				this.getBfactor100Lo ();
				return this.bfactor100Hi;
			    });
	Clazz.defineMethod (c$, "getSurfaceDistanceMax", 
			    function () {
				if (this.surfaceDistance100s == null) this.calcSurfaceDistances ();
				return this.surfaceDistanceMax;
			    });
	Clazz.defineMethod (c$, "calculateVolume", 
			    function (bs, vType) {
				var volume = 0;
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) volume += this.atoms[i].getVolume (this.viewer, vType);

				return volume;
			    }, "org.jmol.util.BitSet,org.jmol.constant.EnumVdw");
	Clazz.defineMethod (c$, "getSurfaceDistance100", 
			    function (atomIndex) {
				if (this.nSurfaceAtoms == 0) return -1;
				if (this.surfaceDistance100s == null) this.calcSurfaceDistances ();
				return this.surfaceDistance100s[atomIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "calcSurfaceDistances", 
			    ($fz = function () {
				this.calculateSurface (null, -1);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "calculateSurface", 
			    function (bsSelected, envelopeRadius) {
				if (envelopeRadius < 0) envelopeRadius = 3.0;
				var ec =  new org.jmol.geodesic.EnvelopeCalculation (this.viewer, this.atomCount, null);
				ec.calculate ( new org.jmol.atomdata.RadiusData (null, envelopeRadius, org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE, null), 3.4028235E38, bsSelected, org.jmol.util.BitSetUtil.copyInvert (bsSelected, this.atomCount), false, false, false, true);
				var points = ec.getPoints ();
				this.surfaceDistanceMax = 0;
				this.bsSurface = ec.getBsSurfaceClone ();
				this.surfaceDistance100s =  Clazz.newIntArray (this.atomCount, 0);
				this.nSurfaceAtoms = org.jmol.util.BitSetUtil.cardinalityOf (this.bsSurface);
				if (this.nSurfaceAtoms == 0 || points == null || points.length == 0) return points;
				var radiusAdjust = (envelopeRadius == 3.4028235E38 ? 0 : envelopeRadius);
				for (var i = 0; i < this.atomCount; i++) {
				    if (this.bsSurface.get (i)) {
					this.surfaceDistance100s[i] = 0;
				    } else {
					var dMin = 3.4028235E38;
					var atom = this.atoms[i];
					for (var j = points.length; --j >= 0; ) {
					    var d = Math.abs (points[j].distance (atom) - radiusAdjust);
					    if (d < 0 && org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("draw d" + j + " " + org.jmol.util.Escape.escapePt (points[j]) + " \"" + d + " ? " + atom.getInfo () + "\"");
					    dMin = Math.min (d, dMin);
					}
					var d = this.surfaceDistance100s[i] = Clazz.doubleToInt (Math.floor (dMin * 100));
					this.surfaceDistanceMax = Math.max (this.surfaceDistanceMax, d);
				    }}
				return points;
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "setAtomCoord", 
			    function (bs, tokType, xyzValues) {
				var xyz = null;
				var values = null;
				var v = null;
				var type = 0;
				var nValues = 1;
				if (Clazz.instanceOf (xyzValues, org.jmol.util.Point3f)) {
				    xyz = xyzValues;
				} else if (Clazz.instanceOf (xyzValues, java.util.List)) {
				    v = xyzValues;
				    if ((nValues = v.size ()) == 0) return;
				    type = 1;
				} else if (org.jmol.util.Escape.isAP (xyzValues)) {
				    values = xyzValues;
				    if ((nValues = values.length) == 0) return;
				    type = 2;
				} else {
				    return;
				}var n = 0;
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    switch (type) {
				    case 1:
					if (n >= nValues) return;
					xyz = v.get (n++);
					break;
				    case 2:
					if (n >= nValues) return;
					xyz = values[n++];
					break;
				    }
				    switch (tokType) {
				    case 1146095626:
					this.setAtomCoord (i, xyz.x, xyz.y, xyz.z);
					break;
				    case 1146095627:
					this.atoms[i].setFractionalCoordTo (xyz, true);
					this.taintAtom (i, 2);
					break;
				    case 1146095629:
					this.atoms[i].setFractionalCoordTo (xyz, false);
					this.taintAtom (i, 2);
					break;
				    case 1146095631:
					this.setAtomVibrationVector (i, xyz.x, xyz.y, xyz.z);
					break;
				    }
				}
			    }, "org.jmol.util.BitSet,~N,~O");
	Clazz.defineMethod (c$, "setAtomVibrationVector", 
			    ($fz = function (atomIndex, x, y, z) {
				this.setVibrationVector (atomIndex, x, y, z);
				this.taintAtom (atomIndex, 12);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomCoord", 
			    function (atomIndex, x, y, z) {
				if (atomIndex < 0 || atomIndex >= this.atomCount) return;
				this.atoms[atomIndex].x = x;
				this.atoms[atomIndex].y = y;
				this.atoms[atomIndex].z = z;
				this.taintAtom (atomIndex, 2);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomCoordRelative", 
			    function (atomIndex, x, y, z) {
				if (atomIndex < 0 || atomIndex >= this.atomCount) return;
				this.atoms[atomIndex].x += x;
				this.atoms[atomIndex].y += y;
				this.atoms[atomIndex].z += z;
				this.taintAtom (atomIndex, 2);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomsCoordRelative", 
			    function (bs, x, y, z) {
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) this.setAtomCoordRelative (i, x, y, z);

			    }, "org.jmol.util.BitSet,~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomProperty", 
			    function (bs, tok, iValue, fValue, sValue, values, list) {
				var n = 0;
				if (values != null && values.length == 0 || bs == null) return;
				var isAll = (values != null && values.length == this.atomCount || list != null && list.length == this.atomCount);
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (isAll) n = i;
				    if (values != null) {
					if (n >= values.length) return;
					fValue = values[n++];
					iValue = Clazz.floatToInt (fValue);
				    } else if (list != null) {
					if (n >= list.length) return;
					sValue = list[n++];
				    }var atom = this.atoms[i];
				    switch (tok) {
				    case 1087375362:
					this.taintAtom (i, 0);
					this.setAtomName (i, sValue);
					break;
				    case 1095763969:
					this.taintAtom (i, 13);
					this.setAtomNumber (i, iValue);
					break;
				    case 1087375361:
					this.taintAtom (i, 1);
					this.setAtomType (i, sValue);
					break;
				    case 1112541185:
				    case 1112541205:
					this.setAtomCoord (i, fValue, atom.y, atom.z);
					break;
				    case 1112541186:
				    case 1112541206:
					this.setAtomCoord (i, atom.x, fValue, atom.z);
					break;
				    case 1112541187:
				    case 1112541207:
					this.setAtomCoord (i, atom.x, atom.y, fValue);
					break;
				    case 1112541202:
				    case 1112541203:
				    case 1112541204:
					this.setVibrationVector (i, tok, fValue);
					break;
				    case 1112541188:
				    case 1112541189:
				    case 1112541190:
					atom.setFractionalCoord (tok, fValue, true);
					this.taintAtom (i, 2);
					break;
				    case 1112541191:
				    case 1112541192:
				    case 1112541193:
					atom.setFractionalCoord (tok, fValue, false);
					this.taintAtom (i, 2);
					break;
				    case 1095763976:
				    case 1087375365:
					this.setElement (atom, iValue);
					break;
				    case 1632634889:
					atom.setFormalCharge (iValue);
					this.taintAtom (i, 4);
					break;
				    case 1114638346:
					if (this.setHydrophobicity (i, fValue)) this.taintAtom (i, 5);
					break;
				    case 1826248715:
				    case 1288701960:
					this.viewer.setAtomLabel (sValue, i);
					break;
				    case 1129318401:
					if (iValue < 2) iValue = Clazz.doubleToInt (Math.floor (100 * fValue));
					if (this.setOccupancy (i, iValue)) this.taintAtom (i, 7);
					break;
				    case 1112541196:
					if (this.setPartialCharge (i, fValue)) this.taintAtom (i, 8);
					break;
				    case 1112541195:
					if (this.setIonicRadius (i, fValue)) this.taintAtom (i, 6);
					break;
				    case 1666189314:
				    case 1113200651:
					if (fValue < 0) fValue = 0;
					else if (fValue > 16) fValue = 16;
					atom.madAtom = (Clazz.floatToShort (fValue * 2000));
					break;
				    case 1114638350:
					this.viewer.setSelectedAtom (atom.index, (fValue != 0));
					break;
				    case 1112541199:
					if (this.setBFactor (i, fValue)) this.taintAtom (i, 9);
					break;
				    case 1095763988:
					atom.setValence (iValue);
					this.taintAtom (i, 10);
					break;
				    case 1649412112:
					if (atom.setRadius (fValue)) this.taintAtom (i, 11);
					else this.untaint (i, 11);
					break;
				    default:
					org.jmol.util.Logger.error ("unsettable atom property: " + org.jmol.script.Token.nameOf (tok));
					break;
				    }
				}
				if (tok == 1114638350) this.viewer.setSelectedAtom (-1, false);
			    }, "org.jmol.util.BitSet,~N,~N,~N,~S,~A,~A");
	Clazz.defineMethod (c$, "setElement", 
			    function (atom, atomicNumber) {
				this.taintAtom (atom.index, 3);
				atom.setAtomicAndIsotopeNumber (atomicNumber);
				atom.setPaletteID (org.jmol.constant.EnumPalette.CPK.id);
				atom.setColixAtom (this.viewer.getColixAtomPalette (atom, org.jmol.constant.EnumPalette.CPK.id));
			    }, "org.jmol.modelset.Atom,~N");
	Clazz.defineMethod (c$, "getVibrationCoord", 
			    function (atomIndex, c) {
				if (this.vibrationVectors == null || this.vibrationVectors[atomIndex] == null) return 0;
				switch (c) {
				case 'X':
				    return this.vibrationVectors[atomIndex].x;
				case 'Y':
				    return this.vibrationVectors[atomIndex].y;
				default:
				    return this.vibrationVectors[atomIndex].z;
				}
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getVibrationVector", 
			    function (atomIndex, forceNew) {
				var v = (this.vibrationVectors == null ? null : this.vibrationVectors[atomIndex]);
				return (v == null && forceNew ?  new org.jmol.util.Vector3f () : v);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setVibrationVector", 
			    function (atomIndex, x, y, z) {
				if (Float.isNaN (x) || Float.isNaN (y) || Float.isNaN (z)) return;
				if (this.vibrationVectors == null || this.vibrationVectors.length < atomIndex) this.vibrationVectors =  new Array (this.atoms.length);
				if (this.vibrationVectors[atomIndex] == null) this.vibrationVectors[atomIndex] = org.jmol.util.Vector3f.new3 (x, y, z);
				else this.vibrationVectors[atomIndex].set (x, y, z);
				this.atoms[atomIndex].setVibrationVector ();
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setVibrationVector", 
			    ($fz = function (atomIndex, tok, fValue) {
				var v = this.getVibrationVector (atomIndex, true);
				if (v == null) v =  new org.jmol.util.Vector3f ();
				switch (tok) {
				case 1112541202:
				    v.x = fValue;
				    break;
				case 1112541203:
				    v.y = fValue;
				    break;
				case 1112541204:
				    v.z = fValue;
				    break;
				}
				this.setAtomVibrationVector (atomIndex, v.x, v.y, v.z);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "setAtomName", 
			    function (atomIndex, name) {
				var id = org.jmol.viewer.JmolConstants.lookupSpecialAtomID (name);
				this.atoms[atomIndex].atomID = id;
				if (id > 0 && (this).models[this.atoms[atomIndex].modelIndex].isBioModel) return;
				if (this.atomNames == null) this.atomNames =  new Array (this.atoms.length);
				this.atomNames[atomIndex] = name;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setAtomType", 
			    function (atomIndex, type) {
				if (this.atomTypes == null) this.atomTypes =  new Array (this.atoms.length);
				this.atomTypes[atomIndex] = type;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setAtomNumber", 
			    function (atomIndex, atomno) {
				if (this.atomSerials == null) {
				    this.atomSerials =  Clazz.newIntArray (this.atoms.length, 0);
				}this.atomSerials[atomIndex] = atomno;
				return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setOccupancy", 
			    function (atomIndex, occupancy) {
				if (this.occupancies == null) {
				    if (occupancy == 100) return false;
				    this.occupancies =  Clazz.newByteArray (this.atoms.length, 0);
				}this.occupancies[atomIndex] = (occupancy > 255 ? 255 : occupancy < 0 ? 0 : occupancy);
				return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setPartialCharge", 
			    function (atomIndex, partialCharge) {
				if (Float.isNaN (partialCharge)) return false;
				if (this.partialCharges == null) {
				    if (partialCharge == 0 && !Float.$valueOf (partialCharge).equals (org.jmol.modelset.AtomCollection.MINUSZERO)) return false;
				    this.partialCharges =  Clazz.newFloatArray (this.atoms.length, 0);
				}this.partialCharges[atomIndex] = partialCharge;
				return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setIonicRadius", 
			    function (atomIndex, radius) {
				if (Float.isNaN (radius)) return false;
				if (this.ionicRadii == null) {
				    this.ionicRadii =  Clazz.newFloatArray (this.atoms.length, 0);
				}this.ionicRadii[atomIndex] = radius;
				return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setBFactor", 
			    function (atomIndex, bfactor) {
				if (Float.isNaN (bfactor)) return false;
				if (this.bfactor100s == null) {
				    if (bfactor == 0 && this.bfactor100s == null) return false;
				    this.bfactor100s =  Clazz.newShortArray (this.atoms.length, 0);
				}this.bfactor100s[atomIndex] = Clazz.doubleToShort ((bfactor < -327.68 ? -327.68 : bfactor > 327.67 ? 327.67 : bfactor) * 100 + (bfactor < 0 ? -0.5 : 0.5));
				return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setHydrophobicity", 
			    function (atomIndex, value) {
				if (Float.isNaN (value)) return false;
				if (this.hydrophobicities == null) {
				    this.hydrophobicities =  Clazz.newFloatArray (this.atoms.length, 0);
				    for (var i = 0; i < this.atoms.length; i++) this.hydrophobicities[i] = org.jmol.util.Elements.getHydrophobicity (this.atoms[i].getGroupID ());

				}this.hydrophobicities[atomIndex] = value;
				return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setEllipsoid", 
			    function (atomIndex, ellipsoid) {
				if (ellipsoid == null) return;
				if (this.ellipsoids == null) this.ellipsoids =  new Array (this.atoms.length);
				this.ellipsoids[atomIndex] = ellipsoid;
			    }, "~N,~A");
	Clazz.defineMethod (c$, "setAtomData", 
			    function (type, name, dataString, isDefault) {
				var fData = null;
				var bs = null;
				switch (type) {
				case 2:
				    this.loadCoordinates (dataString, false, !isDefault);
				    return;
				case 12:
				    this.loadCoordinates (dataString, true, true);
				    return;
				case 14:
				    fData =  Clazz.newFloatArray (this.atomCount, 0);
				    bs = org.jmol.util.BitSetUtil.newBitSet (this.atomCount);
				    break;
				}
				var lines = org.jmol.util.Parser.markLines (dataString, ';');
				var n = 0;
				try {
				    var nData = org.jmol.util.Parser.parseInt (dataString.substring (0, lines[0] - 1));
				    for (var i = 1; i <= nData; i++) {
					var tokens = org.jmol.util.Parser.getTokens (org.jmol.util.Parser.parseTrimmed (dataString.substring (lines[i], lines[i + 1] - 1)));
					var atomIndex = org.jmol.util.Parser.parseInt (tokens[0]) - 1;
					if (atomIndex < 0 || atomIndex >= this.atomCount) continue;
					var atom = this.atoms[atomIndex];
					n++;
					var pt = tokens.length - 1;
					var x = org.jmol.util.Parser.parseFloatStr (tokens[pt]);
					switch (type) {
					case 14:
					    fData[atomIndex] = x;
					    bs.set (atomIndex);
					    continue;
					case 13:
					    this.setAtomNumber (atomIndex, Clazz.floatToInt (x));
					    break;
					case 0:
					    this.setAtomName (atomIndex, tokens[pt]);
					    break;
					case 1:
					    this.setAtomType (atomIndex, tokens[pt]);
					    break;
					case 3:
					    atom.setAtomicAndIsotopeNumber (Clazz.floatToInt (x));
					    atom.setPaletteID (org.jmol.constant.EnumPalette.CPK.id);
					    atom.setColixAtom (this.viewer.getColixAtomPalette (atom, org.jmol.constant.EnumPalette.CPK.id));
					    break;
					case 4:
					    atom.setFormalCharge (Clazz.floatToInt (x));
					    break;
					case 5:
					    this.setHydrophobicity (atomIndex, x);
					    break;
					case 6:
					    this.setIonicRadius (atomIndex, x);
					    break;
					case 8:
					    this.setPartialCharge (atomIndex, x);
					    break;
					case 9:
					    this.setBFactor (atomIndex, x);
					    break;
					case 10:
					    atom.setValence (Clazz.floatToInt (x));
					    break;
					case 11:
					    atom.setRadius (x);
					    break;
					}
					this.taintAtom (atomIndex, type);
				    }
				    if (type == 14 && n > 0) this.viewer.setData (name, [name, fData, bs,  new Integer (1)], 0, 0, 0, 0, 0);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.error ("AtomCollection.loadData error: " + e);
				    } else {
					throw e;
				    }
				}
			    }, "~N,~S,~S,~B");
	Clazz.defineMethod (c$, "loadCoordinates", 
			    ($fz = function (data, isVibrationVectors, doTaint) {
				var lines = org.jmol.util.Parser.markLines (data, ';');
				try {
				    var nData = org.jmol.util.Parser.parseInt (data.substring (0, lines[0] - 1));
				    for (var i = 1; i <= nData; i++) {
					var tokens = org.jmol.util.Parser.getTokens (org.jmol.util.Parser.parseTrimmed (data.substring (lines[i], lines[i + 1])));
					var atomIndex = org.jmol.util.Parser.parseInt (tokens[0]) - 1;
					var x = org.jmol.util.Parser.parseFloatStr (tokens[3]);
					var y = org.jmol.util.Parser.parseFloatStr (tokens[4]);
					var z = org.jmol.util.Parser.parseFloatStr (tokens[5]);
					if (isVibrationVectors) {
					    this.setAtomVibrationVector (atomIndex, x, y, z);
					} else {
					    this.setAtomCoord (atomIndex, x, y, z);
					    if (!doTaint) this.untaint (atomIndex, 2);
					}}
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.error ("Frame.loadCoordinate error: " + e);
				    } else {
					throw e;
				    }
				}
			    }, $fz.isPrivate = true, $fz), "~S,~B,~B");
	Clazz.defineMethod (c$, "validateBspf", 
			    function (isValid) {
				if (this.bspf != null) this.bspf.validate (isValid);
			    }, "~B");
	Clazz.defineMethod (c$, "validateBspfForModel", 
			    function (modelIndex, isValid) {
				if (this.bspf != null) this.bspf.validateModel (modelIndex, isValid);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setPreserveState", 
			    function (TF) {
				this.preserveState = TF;
			    }, "~B");
	c$.getUserSettableType = Clazz.defineMethod (c$, "getUserSettableType", 
						     function (dataType) {
							 var isExplicit = (dataType.indexOf ("property_") == 0);
							 var check = (isExplicit ? dataType.substring (9) : dataType);
							 for (var i = 0; i < 14; i++) if (org.jmol.modelset.AtomCollection.userSettableValues[i].equalsIgnoreCase (check)) return i;

							 return (isExplicit ? 14 : -1);
						     }, "~S");
	Clazz.defineMethod (c$, "isTainted", 
			    ($fz = function (atomIndex, type) {
				return (this.tainted != null && this.tainted[type] != null && this.tainted[type].get (atomIndex));
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "getTaintedAtoms", 
			    function (type) {
				return this.tainted == null ? null : this.tainted[type];
			    }, "~N");
	Clazz.defineMethod (c$, "taintAtoms", 
			    function (bsAtoms, type) {
				this.canSkipLoad = false;
				if (!this.preserveState) return;
				for (var i = bsAtoms.nextSetBit (0); i >= 0; i = bsAtoms.nextSetBit (i + 1)) this.taintAtom (i, type);

			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "taintAtom", 
			    function (atomIndex, type) {
				if (!this.preserveState) return;
				if (this.tainted == null) this.tainted =  new Array (14);
				if (this.tainted[type] == null) this.tainted[type] = org.jmol.util.BitSetUtil.newBitSet (this.atomCount);
				this.tainted[type].set (atomIndex);
				if (type == 2) this.validateBspfForModel (this.atoms[atomIndex].modelIndex, false);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "untaint", 
			    ($fz = function (atomIndex, type) {
				if (!this.preserveState) return;
				if (this.tainted == null || this.tainted[type] == null) return;
				this.tainted[type].clear (atomIndex);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "setTaintedAtoms", 
			    function (bs, type) {
				if (!this.preserveState) return;
				if (bs == null) {
				    if (this.tainted == null) return;
				    this.tainted[type] = null;
				    return;
				}if (this.tainted == null) this.tainted =  new Array (14);
				if (this.tainted[type] == null) this.tainted[type] = org.jmol.util.BitSetUtil.newBitSet (this.atomCount);
				org.jmol.util.BitSetUtil.copy2 (bs, this.tainted[type]);
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "unTaintAtoms", 
			    function (bs, type) {
				if (this.tainted == null || this.tainted[type] == null) return;
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) this.tainted[type].clear (i);

				if (this.tainted[type].nextSetBit (0) < 0) this.tainted[type] = null;
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getAtomicPropertyState", 
			    function (taintWhat, bsSelected) {
				if (!this.preserveState) return "";
				var bs;
				var commands =  new org.jmol.util.StringXBuilder ();
				for (var i = 0; i < 14; i++) if (taintWhat < 0 || i == taintWhat) if ((bs = (bsSelected != null ? bsSelected : this.getTaintedAtoms (i))) != null) this.getAtomicPropertyStateBuffer (commands, i, bs, null, null);

				return commands.toString ();
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomicPropertyStateBuffer", 
			    function (commands, type, bs, label, fData) {
				if (!this.viewer.getPreserveState ()) return;
				var s =  new org.jmol.util.StringXBuilder ();
				var dataLabel = (label == null ? org.jmol.modelset.AtomCollection.userSettableValues[type] : label) + " set";
				var n = 0;
				var isDefault = (type == 2);
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    s.appendI (i + 1).append (" ").append (this.atoms[i].getElementSymbol ()).append (" ").append (this.atoms[i].getInfo ().$replace (' ', '_')).append (" ");
				    switch (type) {
				    case 14:
					if (i < fData.length) s.appendF (fData[i]);
					break;
				    case 13:
					s.appendI (this.atoms[i].getAtomNumber ());
					break;
				    case 0:
					s.append (this.atoms[i].getAtomName ());
					break;
				    case 1:
					s.append (this.atoms[i].getAtomType ());
					break;
				    case 2:
					if (this.isTainted (i, 2)) isDefault = false;
					s.appendF (this.atoms[i].x).append (" ").appendF (this.atoms[i].y).append (" ").appendF (this.atoms[i].z);
					break;
				    case 12:
					var v = this.atoms[i].getVibrationVector ();
					if (v == null) v =  new org.jmol.util.Vector3f ();
					s.appendF (v.x).append (" ").appendF (v.y).append (" ").appendF (v.z);
					break;
				    case 3:
					s.appendI (this.atoms[i].getAtomicAndIsotopeNumber ());
					break;
				    case 4:
					s.appendI (this.atoms[i].getFormalCharge ());
					break;
				    case 6:
					s.appendF (this.atoms[i].getBondingRadiusFloat ());
					break;
				    case 7:
					s.appendI (this.atoms[i].getOccupancy100 ());
					break;
				    case 8:
					s.appendF (this.atoms[i].getPartialCharge ());
					break;
				    case 9:
					s.appendF (this.atoms[i].getBfactor100 () / 100);
					break;
				    case 10:
					s.appendI (this.atoms[i].getValence ());
					break;
				    case 11:
					s.appendF (this.atoms[i].getVanderwaalsRadiusFloat (this.viewer, org.jmol.constant.EnumVdw.AUTO));
					break;
				    }
				    s.append (" ;\n");
				    ++n;
				}
				if (n == 0) return;
				if (isDefault) dataLabel += "(default)";
				commands.append ("\n  DATA \"" + dataLabel + "\"\n").appendI (n).append (" ;\nJmol Property Data Format 1 -- Jmol ").append (org.jmol.viewer.Viewer.getJmolVersion ()).append (";\n");
				commands.appendSB (s);
				commands.append ("  end \"" + dataLabel + "\";\n");
			    }, "org.jmol.util.StringXBuilder,~N,org.jmol.util.BitSet,~S,~A");
	Clazz.defineMethod (c$, "findNearestAtomIndex", 
			    function (x, y, closest, bsNot) {
				var champion = null;
				var min = this.viewer.getMinPixelSelRadius ();
				for (var i = this.atomCount; --i >= 0; ) {
				    if (bsNot != null && bsNot.get (i)) continue;
				    var contender = this.atoms[i];
				    if (contender.isClickable () && this.isCursorOnTopOf (contender, x, y, min, champion)) champion = contender;
				}
				closest[0] = champion;
			    }, "~N,~N,~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "isCursorOnTopOf", 
			    function (contender, x, y, radius, champion) {
				return contender.screenZ > 1 && !this.g3d.isClippedZ (contender.screenZ) && this.g3d.isInDisplayRange (contender.screenX, contender.screenY) && contender.isCursorOnTopOf (x, y, radius, champion);
			    }, "org.jmol.modelset.Atom,~N,~N,~N,org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "findAtomsInRectangle", 
			    function (rect, bsModels) {
				this.bsFoundRectangle.and (this.bsEmpty);
				for (var i = this.atomCount; --i >= 0; ) {
				    var atom = this.atoms[i];
				    if (bsModels.get (atom.modelIndex) && atom.isVisible (0) && rect.contains (atom.screenX, atom.screenY)) this.bsFoundRectangle.set (i);
				}
				return this.bsFoundRectangle;
			    }, "org.jmol.util.Rectangle,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "fillAtomData", 
			    function (atomData, mode) {
				atomData.atomXyz = this.atoms;
				atomData.atomCount = this.atomCount;
				atomData.atomicNumber =  Clazz.newIntArray (this.atomCount, 0);
				var includeRadii = ((mode & 2) != 0);
				if (includeRadii) atomData.atomRadius =  Clazz.newFloatArray (this.atomCount, 0);
				var isMultiModel = ((mode & 16) != 0);
				for (var i = 0; i < this.atomCount; i++) {
				    var atom = this.atoms[i];
				    if (atom.isDeleted () || !isMultiModel && atomData.modelIndex >= 0 && atom.modelIndex != atomData.firstModelIndex) {
					if (atomData.bsIgnored == null) atomData.bsIgnored =  new org.jmol.util.BitSet ();
					atomData.bsIgnored.set (i);
					continue;
				    }atomData.atomicNumber[i] = atom.getElementNumber ();
				    atomData.lastModelIndex = atom.modelIndex;
				    if (includeRadii) atomData.atomRadius[i] = this.getWorkingRadius (atom, atomData);
				}
			    }, "org.jmol.atomdata.AtomData,~N");
	Clazz.defineMethod (c$, "getWorkingRadius", 
			    ($fz = function (atom, atomData) {
				var r = 0;
				var rd = atomData.radiusData;
				switch (rd.factorType) {
				case org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE:
				    r = rd.value;
				    break;
				case org.jmol.atomdata.RadiusData.EnumType.FACTOR:
				case org.jmol.atomdata.RadiusData.EnumType.OFFSET:
				    switch (rd.vdwType) {
				    case org.jmol.constant.EnumVdw.IONIC:
					r = atom.getBondingRadiusFloat ();
					break;
				    case org.jmol.constant.EnumVdw.ADPMAX:
					r = atom.getADPMinMax (true);
					break;
				    case org.jmol.constant.EnumVdw.ADPMIN:
					r = atom.getADPMinMax (false);
					break;
				    default:
					r = atom.getVanderwaalsRadiusFloat (this.viewer, atomData.radiusData.vdwType);
				    }
				    if (rd.factorType === org.jmol.atomdata.RadiusData.EnumType.FACTOR) r *= rd.value;
				    else r += rd.value;
				}
				return r + rd.valueExtended;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,org.jmol.atomdata.AtomData");
	Clazz.defineMethod (c$, "calculateHydrogens", 
			    function (bs, nTotal, doAll, justCarbon, vConnect) {
				var z =  new org.jmol.util.Vector3f ();
				var x =  new org.jmol.util.Vector3f ();
				var hAtoms =  new Array (this.atomCount);
				var bsDeleted = this.viewer.getDeletedAtoms ();
				var pt;
				var nH = 0;
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (bsDeleted != null && bsDeleted.get (i)) continue;
				    var atom = this.atoms[i];
				    var atomicNumber = atom.getElementNumber ();
				    if (justCarbon && atomicNumber != 6) continue;
				    var dHX = (atomicNumber <= 6 ? 1.1 : atomicNumber <= 10 ? 1.0 : 1.3);
				    switch (atomicNumber) {
				    case 7:
				    case 8:
					dHX = 1.0;
					break;
				    case 6:
				    }
				    if (doAll && atom.getCovalentHydrogenCount () > 0) continue;
				    var n = this.getImplicitHydrogenCount (atom);
				    if (n == 0) continue;
				    var targetValence = this.aaRet[0];
				    var hybridization = this.aaRet[2];
				    var nBonds = this.aaRet[3];
				    hAtoms[i] =  new Array (n);
				    var hPt = 0;
				    if (nBonds == 0) {
					switch (n) {
					case 4:
					    z.set (0.635, 0.635, 0.635);
					    pt = org.jmol.util.Point3f.newP (z);
					    pt.add (atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					case 3:
					    z.set (-0.635, -0.635, 0.635);
					    pt = org.jmol.util.Point3f.newP (z);
					    pt.add (atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					case 2:
					    z.set (-0.635, 0.635, -0.635);
					    pt = org.jmol.util.Point3f.newP (z);
					    pt.add (atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					case 1:
					    z.set (0.635, -0.635, -0.635);
					    pt = org.jmol.util.Point3f.newP (z);
					    pt.add (atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					}
				    } else {
					switch (n) {
					default:
					    break;
					case 3:
					    this.getHybridizationAndAxes (i, atomicNumber, z, x, "sp3b", false, true);
					    pt =  new org.jmol.util.Point3f ();
					    pt.scaleAdd2 (dHX, z, atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					    this.getHybridizationAndAxes (i, atomicNumber, z, x, "sp3c", false, true);
					    pt =  new org.jmol.util.Point3f ();
					    pt.scaleAdd2 (dHX, z, atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					    this.getHybridizationAndAxes (i, atomicNumber, z, x, "sp3d", false, true);
					    pt =  new org.jmol.util.Point3f ();
					    pt.scaleAdd2 (dHX, z, atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					    break;
					case 2:
					    var isEne = (hybridization == 2 || atomicNumber == 5 || nBonds == 1 && targetValence == 4 || atomicNumber == 7 && this.isAdjacentSp2 (atom));
					    this.getHybridizationAndAxes (i, atomicNumber, z, x, (isEne ? "sp2b" : targetValence == 3 ? "sp3c" : "lpa"), false, true);
					    pt = org.jmol.util.Point3f.newP (z);
					    pt.scaleAdd2 (dHX, z, atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					    this.getHybridizationAndAxes (i, atomicNumber, z, x, (isEne ? "sp2c" : targetValence == 3 ? "sp3d" : "lpb"), false, true);
					    pt = org.jmol.util.Point3f.newP (z);
					    pt.scaleAdd2 (dHX, z, atom);
					    hAtoms[i][hPt++] = pt;
					    if (vConnect != null) vConnect.add (atom);
					    break;
					case 1:
					    switch (targetValence - nBonds) {
					    case 1:
						if (atomicNumber == 8 && atom === atom.getGroup ().getCarbonylOxygenAtom ()) {
						    hAtoms[i] = null;
						    continue;
						}if (this.getHybridizationAndAxes (i, atomicNumber, z, x, (hybridization == 2 || atomicNumber == 5 || atomicNumber == 7 && this.isAdjacentSp2 (atom) ? "sp2c" : "sp3d"), true, false) != null) {
						    pt = org.jmol.util.Point3f.newP (z);
						    pt.scaleAdd2 (dHX, z, atom);
						    hAtoms[i][hPt++] = pt;
						    if (vConnect != null) vConnect.add (atom);
						} else {
						    hAtoms[i] =  new Array (0);
						}break;
					    case 2:
						this.getHybridizationAndAxes (i, atomicNumber, z, x, (targetValence == 4 ? "sp2c" : "sp2b"), false, false);
						pt = org.jmol.util.Point3f.newP (z);
						pt.scaleAdd2 (dHX, z, atom);
						hAtoms[i][hPt++] = pt;
						if (vConnect != null) vConnect.add (atom);
						break;
					    case 3:
						this.getHybridizationAndAxes (i, atomicNumber, z, x, "spb", false, true);
						pt = org.jmol.util.Point3f.newP (z);
						pt.scaleAdd2 (dHX, z, atom);
						hAtoms[i][hPt++] = pt;
						if (vConnect != null) vConnect.add (atom);
						break;
					    }
					}
				    }nH += hPt;
				}
				nTotal[0] = nH;
				return hAtoms;
			    }, "org.jmol.util.BitSet,~A,~B,~B,java.util.List");
	Clazz.defineMethod (c$, "isAdjacentSp2", 
			    ($fz = function (atom) {
				var bonds = atom.bonds;
				for (var i = 0; i < bonds.length; i++) {
				    var b2 = bonds[i].getOtherAtom (atom).bonds;
				    for (var j = 0; j < b2.length; j++) switch (b2[j].order) {
				    case 515:
				    case 514:
				    case 2:
				    case 3:
					return true;
				    }

				}
				return false;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getImplicitHydrogenCount", 
			    function (atom) {
				var targetValence = atom.getTargetValence ();
				var charge = atom.getFormalCharge ();
				if (this.aaRet == null) this.aaRet =  Clazz.newIntArray (4, 0);
				this.aaRet[0] = targetValence;
				this.aaRet[1] = charge;
				this.aaRet[2] = 0;
				this.aaRet[3] = atom.getCovalentBondCount ();
				var model = (this).models[atom.modelIndex];
				var s = (model.isBioModel && !model.isPdbWithMultipleBonds ? atom.group.getGroup3 () : null);
				if (s != null && charge == 0) {
				    if (org.jmol.viewer.JmolConstants.getAminoAcidValenceAndCharge (s, atom.getAtomName (), this.aaRet)) {
					targetValence = this.aaRet[0];
					charge = this.aaRet[1];
				    }}if (charge != 0) {
					targetValence += (targetValence == 4 ? -Math.abs (charge) : charge);
					this.aaRet[0] = targetValence;
				    }var n = targetValence - atom.getValence ();
				return (n < 0 ? 0 : n);
			    }, "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getHybridizationAndAxes", 
			    function (atomIndex, atomicNumber, z, x, lcaoTypeRaw, hybridizationCompatible, doAlignZ) {
				var lcaoType = (lcaoTypeRaw.length > 0 && lcaoTypeRaw.charAt (0) == '-' ? lcaoTypeRaw.substring (1) : lcaoTypeRaw);
				if (lcaoTypeRaw.indexOf ("d") >= 0 && !lcaoTypeRaw.equals ("sp3d")) return this.getHybridizationAndAxesD (atomIndex, z, x, lcaoType);
				var atom = this.atoms[atomIndex];
				if (atomicNumber == 0) atomicNumber = atom.getElementNumber ();
				var attached = this.getAttached (atom, 4, hybridizationCompatible);
				var nAttached = attached.length;
				var pt = lcaoType.charCodeAt (lcaoType.length - 1) - 97;
				if (pt < 0 || pt > 6) pt = 0;
				var vTemp =  new org.jmol.util.Vector3f ();
				z.set (0, 0, 0);
				x.set (0, 0, 0);
				var v =  new Array (4);
				for (var i = 0; i < nAttached; i++) {
				    v[i] = org.jmol.util.Vector3f.newV (atom);
				    v[i].sub (attached[i]);
				    v[i].normalize ();
				    z.add (v[i]);
				}
				if (nAttached > 0) x.setT (v[0]);
				var isPlanar = false;
				if (nAttached >= 3) {
				    if (x.angle (v[1]) < 2.984513) vTemp.cross (x, v[1]);
				    else vTemp.cross (x, v[2]);
				    vTemp.normalize ();
				    var vTemp2 =  new org.jmol.util.Vector3f ();
				    if (v[1].angle (v[2]) < 2.984513) vTemp2.cross (v[1], v[2]);
				    else vTemp2.cross (x, v[2]);
				    vTemp2.normalize ();
				    isPlanar = (Math.abs (vTemp2.dot (vTemp)) >= 0.95);
				}var isSp3 = (lcaoType.indexOf ("sp3") == 0);
				var isSp2 = (!isSp3 && lcaoType.indexOf ("sp2") == 0);
				var isSp = (!isSp3 && !isSp2 && lcaoType.indexOf ("sp") == 0);
				var isP = (lcaoType.indexOf ("p") == 0);
				var isLp = (lcaoType.indexOf ("lp") == 0);
				var hybridization = null;
				if (hybridizationCompatible) {
				    if (nAttached == 0) return null;
				    if (isSp3) {
					if (pt > 3 || nAttached > 4) return null;
				    } else if (isSp2) {
					if (pt > 2 || nAttached > 3) return null;
				    } else if (isSp) {
					if (pt > 1 || nAttached > 2) return null;
				    }switch (nAttached) {
				    case 1:
					if (atomicNumber == 1 && !isSp3) return null;
					if (isSp3) {
					    hybridization = "sp3";
					    break;
					}switch (attached[0].getCovalentBondCount ()) {
					case 1:
					    if (attached[0].getValence () != 2) {
						hybridization = "sp";
						break;
					    }case 2:
					    hybridization = (isSp ? "sp" : "sp2");
					    break;
					case 3:
					    if (!isSp2 && !isP) return null;
					    hybridization = "sp2";
					    break;
					}
					break;
				    case 2:
					if (z.length () < 0.1) {
					    if (lcaoType.indexOf ("2") >= 0 || lcaoType.indexOf ("3") >= 0) return null;
					    hybridization = "sp";
					    break;
					}hybridization = (isSp3 ? "sp3" : "sp2");
					if (lcaoType.indexOf ("sp") == 0) {
					    break;
					}if (isLp) {
					    hybridization = "lp";
					    break;
					}hybridization = lcaoType;
					break;
				    default:
					if (isPlanar) {
					    hybridization = "sp2";
					} else {
					    if (isLp && nAttached == 3) {
						hybridization = "lp";
						break;
					    }hybridization = "sp3";
					}}
				    if (hybridization == null) return null;
				    if (lcaoType.indexOf ("p") == 0) {
					if (hybridization === "sp3") return null;
				    } else if (lcaoType.indexOf (hybridization) < 0) {
					return null;
				    }}if (pt < nAttached && !lcaoType.startsWith ("p") && !lcaoType.startsWith ("l")) {
					z.sub2 (attached[pt], atom);
					z.normalize ();
					return hybridization;
				    }switch (nAttached) {
				    case 0:
					if (lcaoType.equals ("sp3c") || lcaoType.equals ("sp2d") || lcaoType.equals ("lpa")) {
					    z.set (-0.5, -0.7, 1);
					    x.set (1, 0, 0);
					} else if (lcaoType.equals ("sp3b") || lcaoType.equals ("lpb")) {
					    z.set (0.5, -0.7, -1.0);
					    x.set (1, 0, 0);
					} else if (lcaoType.equals ("sp3a")) {
					    z.set (0, 1, 0);
					    x.set (1, 0, 0);
					} else {
					    z.set (0, 0, 1);
					    x.set (1, 0, 0);
					}break;
				    case 1:
					vTemp.setT (org.jmol.modelset.AtomCollection.vRef);
					x.cross (vTemp, z);
					if (isSp3) {
					    for (var i = 0; i < attached[0].bonds.length; i++) {
						if (attached[0].bonds[i].isCovalent () && attached[0].getBondedAtomIndex (i) != atom.index) {
						    x.sub2 (attached[0], attached[0].bonds[i].getOtherAtom (attached[0]));
						    x.cross (z, x);
						    if (x.length () == 0) continue;
						    x.cross (x, z);
						    break;
						}}
					    x.normalize ();
					    if (Float.isNaN (x.x)) {
						x.setT (org.jmol.modelset.AtomCollection.vRef);
						x.cross (x, z);
					    }vTemp.cross (z, x);
					    vTemp.normalize ();
					    z.normalize ();
					    x.scaleAdd2 (2.828, x, z);
					    if (pt != 3) {
						x.normalize ();
						var a = org.jmol.util.AxisAngle4f.new4 (z.x, z.y, z.z, (pt == 2 ? 1 : -1) * 2.09439507);
						var m =  new org.jmol.util.Matrix3f ();
						m.setIdentity ();
						m.setAA (a);
						m.transform (x);
					    }z.setT (x);
					    x.cross (vTemp, z);
					    break;
					}vTemp.cross (x, z);
					switch (attached[0].getCovalentBondCount ()) {
					case 1:
					    if (attached[0].getValence () != 2) {
						break;
					    }case 2:
					    var isCumulated = false;
					    var a0 = attached[0];
					    x.setT (z);
					    vTemp.setT (org.jmol.modelset.AtomCollection.vRef);
					    while (a0 != null && a0.getCovalentBondCount () == 2) {
						var bonds = a0.bonds;
						var a = null;
						isCumulated = !isCumulated;
						for (var i = 0; i < bonds.length; i++) if (bonds[i].isCovalent ()) {
						    a = bonds[i].getOtherAtom (a0);
						    if (a !== atom) {
							vTemp.sub2 (a, a0);
							break;
						    }}
						vTemp.cross (vTemp, x);
						if (vTemp.length () > 0.1 || a.getCovalentBondCount () != 2) break;
						atom = a0;
						a0 = a;
					    }
					    if (vTemp.length () > 0.1) {
						z.cross (vTemp, x);
						z.normalize ();
						if (pt == 1) z.scale (-1);
						z.scale (org.jmol.modelset.AtomCollection.sqrt3_2);
						z.scaleAdd2 (0.5, x, z);
						if (isP) {
						    vTemp.cross (z, x);
						    z.setT (vTemp);
						    vTemp.setT (x);
						}x.cross (vTemp, z);
					    } else {
						z.setT (x);
						x.cross (org.jmol.modelset.AtomCollection.vRef, x);
					    }break;
					case 3:
					    this.getHybridizationAndAxes (attached[0].index, 0, x, vTemp, "pz", false, doAlignZ);
					    vTemp.setT (x);
					    if (isSp2) {
						x.cross (x, z);
						if (pt == 1) x.scale (-1);
						x.scale (org.jmol.modelset.AtomCollection.sqrt3_2);
						z.scaleAdd2 (0.5, z, x);
					    } else {
						vTemp.setT (z);
						z.setT (x);
					    }x.cross (vTemp, z);
					    break;
					}
					break;
				    case 2:
					if (z.length () < 0.1) {
					    if (!lcaoType.equals ("pz")) {
						var a = attached[0];
						var ok = (a.getCovalentBondCount () == 3);
						if (!ok) ok = ((a = attached[1]).getCovalentBondCount () == 3);
						if (ok) {
						    this.getHybridizationAndAxes (a.index, 0, x, z, "pz", false, doAlignZ);
						    if (lcaoType.equals ("px")) x.scale (-1);
						    z.setT (v[0]);
						    break;
						}vTemp.setT (org.jmol.modelset.AtomCollection.vRef);
						z.cross (vTemp, x);
						vTemp.cross (z, x);
					    }z.setT (x);
					    x.cross (vTemp, z);
					    break;
					}vTemp.cross (z, x);
					if (isSp2) {
					    x.cross (z, vTemp);
					    break;
					}if (isSp3 || isLp) {
					    vTemp.normalize ();
					    z.normalize ();
					    if (!lcaoType.equals ("lp")) {
						if (pt == 0 || pt == 2) z.scaleAdd2 (-1.2, vTemp, z);
						else z.scaleAdd2 (1.2, vTemp, z);
					    }x.cross (z, vTemp);
					    break;
					}x.cross (z, vTemp);
					z.setT (vTemp);
					if (z.z < 0) {
					    z.scale (-1);
					    x.scale (-1);
					}break;
				    default:
					if (isSp3) break;
					if (!isPlanar) {
					    x.cross (z, x);
					    break;
					}z.setT (vTemp);
					if (z.z < 0 && doAlignZ) {
					    z.scale (-1);
					    x.scale (-1);
					}}
				x.normalize ();
				z.normalize ();
				if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.debug (atom.getInfo () + " nAttached=" + nAttached + " " + hybridization);
				}return hybridization;
			    }, "~N,~N,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~S,~B,~B");
	Clazz.defineMethod (c$, "getHybridizationAndAxesD", 
			    ($fz = function (atomIndex, z, x, lcaoType) {
				if (lcaoType.startsWith ("sp3d2")) lcaoType = "d2sp3" + (lcaoType.length == 5 ? "a" : lcaoType.substring (5));
				if (lcaoType.startsWith ("sp3d")) lcaoType = "dsp3" + (lcaoType.length == 4 ? "a" : lcaoType.substring (4));
				if (lcaoType.equals ("d2sp3") || lcaoType.equals ("dsp3")) lcaoType += "a";
				var isTrigonal = lcaoType.startsWith ("dsp3");
				var pt = lcaoType.charCodeAt (lcaoType.length - 1) - 97;
				if (z != null && (!isTrigonal && (pt > 5 || !lcaoType.startsWith ("d2sp3")) || isTrigonal && pt > 4)) return null;
				var atom = this.atoms[atomIndex];
				var attached = this.getAttached (atom, 6, true);
				if (attached == null) return (z == null ? null : "?");
				var nAttached = attached.length;
				if (nAttached < 3 && z != null) return null;
				var isLP = (pt >= nAttached);
				var nAngles = Clazz.doubleToInt (nAttached * (nAttached - 1) / 2);
				var angles = org.jmol.util.ArrayUtil.newInt2 (nAngles);
				var ntypes =  Clazz.newIntArray (3, 0);
				var typePtrs =  Clazz.newIntArray (3, nAngles, 0);
				var n = 0;
				var _90 = 0;
				var _120 = 1;
				var _180 = 2;
				var n120_atom0 = 0;
				for (var i = 0; i < nAttached - 1; i++) for (var j = i + 1; j < nAttached; j++) {
				    var angle = org.jmol.util.Measure.computeAngleABC (attached[i], atom, attached[j], true);
				    var itype = (angle < 105 ? _90 : angle >= 150 ? _180 : _120);
				    typePtrs[itype][ntypes[itype]] = n;
				    ntypes[itype]++;
				    angles[n++] = [i, j];
				    if (i == 0 && itype == _120) n120_atom0++;
				}

				n = ntypes[_90] * 100 + ntypes[_120] * 10 + ntypes[_180];
				if (z == null) {
				    switch (n) {
				    default:
					return "";
				    case 0:
					return "";
				    case 1:
					return "linear";
				    case 100:
				    case 10:
					return "bent";
				    case 111:
				    case 201:
					return "T-shaped";
				    case 30:
				    case 120:
				    case 210:
				    case 300:
					if (Math.abs (org.jmol.util.Measure.computeTorsion (attached[0], atom, attached[1], attached[2], true)) > 162) return "trigonal planar";
					return "trigonal pyramidal";
				    case 330:
					return (n120_atom0 % 2 == 1 ? "tetrahedral" : "uncapped trigonal pyramid");
				    case 60:
				    case 150:
				    case 240:
					return "tetrahedral";
				    case 402:
					return "square planar";
				    case 411:
				    case 501:
					return "see-saw";
				    case 631:
					return "trigonal bipyramidal";
				    case 802:
					return "uncapped square pyramid";
				    case 1203:
					return "octahedral";
				    }
				}switch (n) {
				default:
				    return null;
				case 201:
				    break;
				case 210:
				case 330:
				case 411:
				case 631:
				    if (!isTrigonal) return null;
				    break;
				case 300:
				case 402:
				case 501:
				case 802:
				case 1203:
				    if (isTrigonal) return null;
				    break;
				}
				if (isLP) {
				    var a;
				    var bs;
				    if (isTrigonal) {
					switch (ntypes[_120]) {
					case 0:
					    z.sub2 (attached[angles[typePtrs[_90][0]][0]], atom);
					    x.sub2 (attached[angles[typePtrs[_90][0]][1]], atom);
					    z.cross (z, x);
					    z.normalize ();
					    if (pt == 4) z.scale (-1);
					    bs = this.findNotAttached (nAttached, angles, typePtrs[_180], ntypes[_180]);
					    var i = bs.nextSetBit (0);
					    x.sub2 (attached[i], atom);
					    x.normalize ();
					    x.scale (0.5);
					    z.scaleAdd2 (org.jmol.modelset.AtomCollection.sqrt3_2, z, x);
					    pt = -1;
					    break;
					case 1:
					    if (pt == 4) {
						a = angles[typePtrs[_120][0]];
						z.add2 (attached[a[0]], attached[a[1]]);
						z.scaleAdd2 (-2, atom, z);
						pt = -1;
					    } else {
						bs = this.findNotAttached (nAttached, angles, typePtrs[_120], ntypes[_120]);
						pt = bs.nextSetBit (0);
					    }break;
					default:
					    bs = this.findNotAttached (nAttached, angles, typePtrs[_120], ntypes[_120]);
					    pt = bs.nextSetBit (0);
					}
				    } else {
					var isPlanar = false;
					if (nAttached == 4) {
					    switch (ntypes[_180]) {
					    case 1:
						bs = this.findNotAttached (nAttached, angles, typePtrs[_180], ntypes[_180]);
						var i = bs.nextSetBit (0);
						if (pt == 4) pt = i;
						else pt = bs.nextSetBit (i + 1);
						break;
					    default:
						isPlanar = true;
					    }
					} else {
					    bs = this.findNotAttached (nAttached, angles, typePtrs[_180], ntypes[_180]);
					    var i = bs.nextSetBit (0);
					    for (var j = nAttached; j < pt && i >= 0; j++) i = bs.nextSetBit (i + 1);

					    if (i == -1) isPlanar = true;
					    else pt = i;
					}if (isPlanar) {
					    z.sub2 (attached[angles[typePtrs[_90][0]][0]], atom);
					    x.sub2 (attached[angles[typePtrs[_90][0]][1]], atom);
					    z.cross (z, x);
					    if (pt == 4) z.scale (-1);
					    pt = -1;
					}}}if (pt >= 0) z.sub2 (attached[pt], atom);
				if (isLP) z.scale (-1);
				z.normalize ();
				return (isTrigonal ? "dsp3" : "d2sp3");
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~S");
	Clazz.defineMethod (c$, "getAttached", 
			    ($fz = function (atom, nMax, doSort) {
				var nAttached = atom.getCovalentBondCount ();
				if (nAttached > nMax) return null;
				var attached =  new Array (nAttached);
				if (nAttached > 0) {
				    var bonds = atom.bonds;
				    var n = 0;
				    for (var i = 0; i < bonds.length; i++) if (bonds[i].isCovalent ()) attached[n++] = bonds[i].getOtherAtom (atom);

				    if (doSort) java.util.Arrays.sort (attached, Clazz.innerTypeInstance (org.jmol.modelset.AtomCollection.AtomSorter, this, null));
				}return attached;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,~N,~B");
	Clazz.defineMethod (c$, "findNotAttached", 
			    ($fz = function (nAttached, angles, ptrs, nPtrs) {
				var bs = org.jmol.util.BitSetUtil.newBitSet (nAttached);
				bs.setBits (0, nAttached);
				for (var i = 0; i < nAttached; i++) for (var j = 0; j < nPtrs; j++) {
				    var a = angles[ptrs[j]];
				    if (a[0] == i || a[1] == i) bs.clear (i);
				}

				return bs;
			    }, $fz.isPrivate = true, $fz), "~N,~A,~A,~N");
	Clazz.defineMethod (c$, "getChimeInfo", 
			    function (tok, bs) {
				var info =  new org.jmol.util.StringXBuilder ();
				info.append ("\n");
				var id;
				var s = "";
				var clast = null;
				var glast = null;
				var modelLast = -1;
				var n = 0;
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    id = this.atoms[i].getChainID ();
				    s = (id == '\0' ? " " : "" + id);
				    switch (tok) {
				    case 1087373316:
					break;
				    case 1114638350:
					s = this.atoms[i].getInfo ();
					break;
				    case 1141899265:
					s = "" + this.atoms[i].getAtomNumber ();
					break;
				    case 1087373318:
					s = this.atoms[i].getGroup3 (false);
					break;
				    case 1073742120:
					s = "[" + this.atoms[i].getGroup3 (false) + "]" + this.atoms[i].getSeqcodeString () + ":" + s;
					break;
				    case 1087373320:
					if (this.atoms[i].getModelIndex () != modelLast) {
					    info.appendC ('\n');
					    n = 0;
					    modelLast = this.atoms[i].getModelIndex ();
					    info.append ("Model " + this.atoms[i].getModelNumber ());
					    glast = null;
					    clast = null;
					}if (this.atoms[i].getChain () !== clast) {
					    info.appendC ('\n');
					    n = 0;
					    clast = this.atoms[i].getChain ();
					    info.append ("Chain " + s + ":\n");
					    glast = null;
					}var g = this.atoms[i].getGroup ();
					if (g !== glast) {
					    if ((n++) % 5 == 0 && n > 1) info.appendC ('\n');
					    org.jmol.util.TextFormat.lFill (info, "          ", "[" + this.atoms[i].getGroup3 (false) + "]" + this.atoms[i].getResno () + " ");
					    glast = g;
					}continue;
				    default:
					return "";
				    }
				    if (info.indexOf ("\n" + s + "\n") < 0) info.append (s).appendC ('\n');
				}
				if (tok == 1087373320) info.appendC ('\n');
				return info.toString ().substring (1);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomBitsMaybeDeleted", 
			    function (tokType, specInfo) {
				var bs =  new org.jmol.util.BitSet ();
				var bsInfo;
				var bsTemp;
				var iSpec;
				var i = 0;
				switch (tokType) {
				case 1095763969:
				    iSpec = (specInfo).intValue ();
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].getAtomNumber () == iSpec) bs.set (i);

				    break;
				case 1087375362:
				    var names = "," + specInfo + ",";
				    for (i = this.atomCount; --i >= 0; ) {
					var name = this.atoms[i].getAtomName ();
					if (names.indexOf (name) >= 0) if (names.indexOf ("," + name + ",") >= 0) bs.set (i);
				    }
				    break;
				case 1087375361:
				    var types = "," + specInfo + ",";
				    for (i = this.atomCount; --i >= 0; ) {
					var type = this.atoms[i].getAtomType ();
					if (types.indexOf (type) >= 0) if (types.indexOf ("," + type + ",") >= 0) bs.set (i);
				    }
				    break;
				case 1048613:
				    iSpec = (specInfo).intValue ();
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].getGroupID () == iSpec) bs.set (i);

				    break;
				case 1048609:
				    return org.jmol.util.BitSetUtil.copy (this.getChainBits (String.fromCharCode ((specInfo).intValue ())));
				case 1048614:
				    return org.jmol.util.BitSetUtil.copy (this.getSeqcodeBits ((specInfo).intValue (), true));
				case 1613758470:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isHetero ()) bs.set (i);

				    break;
				case 1613758476:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].getElementNumber () == 1) bs.set (i);

				    break;
				case 3145744:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isProtein ()) bs.set (i);

				    break;
				case 3145764:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isCarbohydrate ()) bs.set (i);

				    break;
				case 137363468:
				case 3145760:
				    var type = (tokType == 137363468 ? org.jmol.constant.EnumStructure.HELIX : org.jmol.constant.EnumStructure.SHEET);
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isWithinStructure (type)) bs.set (i);

				    break;
				case 3145742:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isNucleic ()) bs.set (i);

				    break;
				case 3145732:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isDna ()) bs.set (i);

				    break;
				case 3145750:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isRna ()) bs.set (i);

				    break;
				case 3145746:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isPurine ()) bs.set (i);

				    break;
				case 3145748:
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isPyrimidine ()) bs.set (i);

				    break;
				case 1087375365:
				    bsInfo = specInfo;
				    bsTemp =  new org.jmol.util.BitSet ();
				    for (i = bsInfo.nextSetBit (0); i >= 0; i = bsInfo.nextSetBit (i + 1)) bsTemp.set (this.getElementNumber (i));

				    for (i = this.atomCount; --i >= 0; ) if (bsTemp.get (this.getElementNumber (i))) bs.set (i);

				    break;
				case 1095761938:
				    bsInfo = specInfo;
				    bsTemp =  new org.jmol.util.BitSet ();
				    for (i = bsInfo.nextSetBit (0); i >= 0; i = bsInfo.nextSetBit (i + 1)) bsTemp.set (this.atoms[i].atomSite);

				    for (i = this.atomCount; --i >= 0; ) if (bsTemp.get (this.atoms[i].atomSite)) bs.set (i);

				    break;
				case 1073741824:
				    return this.getIdentifierOrNull (specInfo);
				case 1048608:
				    var atomSpec = (specInfo).toUpperCase ();
				    if (atomSpec.indexOf ("\\?") >= 0) atomSpec = org.jmol.util.TextFormat.simpleReplace (atomSpec, "\\?", "\1");
				    for (i = this.atomCount; --i >= 0; ) if (this.isAtomNameMatch (this.atoms[i], atomSpec, false)) bs.set (i);

				    break;
				case 1048607:
				    var spec = specInfo;
				    for (i = this.atomCount; --i >= 0; ) if (this.atoms[i].isAlternateLocationMatch (spec)) bs.set (i);

				    break;
				case 1048612:
				    return this.getSpecName (specInfo);
				}
				if (i < 0) return bs;
				bsInfo = specInfo;
				var iModel;
				var iPolymer;
				var i0 = bsInfo.nextSetBit (0);
				if (i0 < 0) return bs;
				i = 0;
				switch (tokType) {
				case 1087373318:
				    for (i = i0; i >= 0; i = bsInfo.nextSetBit (i + 1)) {
					var j = this.atoms[i].getGroup ().selectAtoms (bs);
					if (j > i) i = j;
				    }
				    break;
				case 1095766028:
				    for (i = i0; i >= 0; i = bsInfo.nextSetBit (i + 1)) {
					if (bs.get (i)) continue;
					iModel = this.atoms[i].modelIndex;
					bs.set (i);
					for (var j = i; --j >= 0; ) if (this.atoms[j].modelIndex == iModel) bs.set (j);
					else break;

					for (; ++i < this.atomCount; ) if (this.atoms[i].modelIndex == iModel) bs.set (i);
					else break;

				    }
				    break;
				case 1087373316:
				    bsInfo = org.jmol.util.BitSetUtil.copy (specInfo);
				    for (i = bsInfo.nextSetBit (0); i >= 0; i = bsInfo.nextSetBit (i + 1)) {
					var chain = this.atoms[i].getChain ();
					chain.setAtomBitSet (bs);
					bsInfo.andNot (bs);
				    }
				    break;
				case 1095761935:
				    for (i = i0; i >= 0; i = bsInfo.nextSetBit (i + 1)) {
					if (bs.get (i)) continue;
					iPolymer = this.atoms[i].getPolymerIndexInModel ();
					bs.set (i);
					for (var j = i; --j >= 0; ) if (this.atoms[j].getPolymerIndexInModel () == iPolymer) bs.set (j);
					else break;

					for (; ++i < this.atomCount; ) if (this.atoms[i].getPolymerIndexInModel () == iPolymer) bs.set (i);
					else break;

				    }
				    break;
				case 1641025539:
				    for (i = i0; i >= 0; i = bsInfo.nextSetBit (i + 1)) {
					if (bs.get (i)) continue;
					var structure = this.atoms[i].getGroup ().getStructure ();
					bs.set (i);
					for (var j = i; --j >= 0; ) if (this.atoms[j].getGroup ().getStructure () === structure) bs.set (j);
					else break;

					for (; ++i < this.atomCount; ) if (this.atoms[i].getGroup ().getStructure () === structure) bs.set (i);
					else break;

				    }
				    break;
				}
				if (i == 0) org.jmol.util.Logger.error ("MISSING getAtomBits entry for " + org.jmol.script.Token.nameOf (tokType));
				return bs;
			    }, "~N,~O");
	Clazz.defineMethod (c$, "getIdentifierOrNull", 
			    ($fz = function (identifier) {
				var bs = this.getSpecNameOrNull (identifier, false);
				if (identifier.indexOf ("\\?") >= 0) identifier = org.jmol.util.TextFormat.simpleReplace (identifier, "\\?", "\1");
				if (bs != null || identifier.indexOf ("?") > 0) return bs;
				if (identifier.indexOf ("*") > 0) return this.getSpecNameOrNull (identifier, true);
				var len = identifier.length;
				var pt = 0;
				while (pt < len && Character.isLetter (identifier.charAt (pt))) ++pt;

				bs = this.getSpecNameOrNull (identifier.substring (0, pt), false);
				if (pt == len) return bs;
				if (bs == null) bs =  new org.jmol.util.BitSet ();
				var pt0 = pt;
				while (pt < len && Character.isDigit (identifier.charAt (pt))) ++pt;

				var seqNumber = 0;
				try {
				    seqNumber = Integer.parseInt (identifier.substring (pt0, pt));
				} catch (nfe) {
				    if (Clazz.exceptionOf (nfe, NumberFormatException)) {
					return null;
				    } else {
					throw nfe;
				    }
				}
				var insertionCode = ' ';
				if (pt < len && identifier.charAt (pt) == '^') if (++pt < len) insertionCode = identifier.charAt (pt);
				var seqcode = org.jmol.modelset.Group.getSeqcode (seqNumber, insertionCode);
				var bsInsert = this.getSeqcodeBits (seqcode, false);
				if (bsInsert == null) {
				    if (insertionCode != ' ') bsInsert = this.getSeqcodeBits (Character.toUpperCase (identifier.charAt (pt)).charCodeAt (0), false);
				    if (bsInsert == null) return null;
				    pt++;
				}bs.and (bsInsert);
				if (pt >= len) return bs;
				var chainID = identifier.charAt (pt++);
				bs.and (this.getChainBits (chainID));
				if (pt == len) return bs;
				return null;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getSpecName", 
			    ($fz = function (name) {
				var bs = this.getSpecNameOrNull (name, false);
				if (bs != null) return bs;
				if (name.indexOf ("*") > 0) bs = this.getSpecNameOrNull (name, true);
				return (bs == null ?  new org.jmol.util.BitSet () : bs);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getSpecNameOrNull", 
			    ($fz = function (name, checkStar) {
				var bs = null;
				name = name.toUpperCase ();
				if (name.indexOf ("\\?") >= 0) name = org.jmol.util.TextFormat.simpleReplace (name, "\\?", "\1");
				for (var i = this.atomCount; --i >= 0; ) {
				    var g3 = this.atoms[i].getGroup3 (true);
				    if (g3 != null && g3.length > 0) {
					if (org.jmol.util.TextFormat.isMatch (g3, name, checkStar, true)) {
					    if (bs == null) bs = org.jmol.util.BitSetUtil.newBitSet (i + 1);
					    bs.set (i);
					    while (--i >= 0 && this.atoms[i].getGroup3 (true).equals (g3)) bs.set (i);

					    i++;
					}} else if (this.isAtomNameMatch (this.atoms[i], name, checkStar)) {
					    if (bs == null) bs = org.jmol.util.BitSetUtil.newBitSet (i + 1);
					    bs.set (i);
					}}
				return bs;
			    }, $fz.isPrivate = true, $fz), "~S,~B");
	Clazz.defineMethod (c$, "isAtomNameMatch", 
			    ($fz = function (atom, strPattern, checkStar) {
				return org.jmol.util.TextFormat.isMatch (atom.getAtomName ().toUpperCase (), strPattern, checkStar, false);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,~S,~B");
	Clazz.defineMethod (c$, "getSeqcodeBits", 
			    function (seqcode, returnEmpty) {
				var bs =  new org.jmol.util.BitSet ();
				var seqNum = org.jmol.modelset.Group.getSequenceNumber (seqcode);
				var haveSeqNumber = (seqNum != 2147483647);
				var isEmpty = true;
				var insCode = org.jmol.modelset.Group.getInsertionCode (seqcode);
				switch (insCode) {
				case '?':
				    for (var i = this.atomCount; --i >= 0; ) {
					var atomSeqcode = this.atoms[i].getSeqcode ();
					if (!haveSeqNumber || seqNum == org.jmol.modelset.Group.getSequenceNumber (atomSeqcode) && org.jmol.modelset.Group.getInsertionCodeValue (atomSeqcode) != 0) {
					    bs.set (i);
					    isEmpty = false;
					}}
				    break;
				default:
				    for (var i = this.atomCount; --i >= 0; ) {
					var atomSeqcode = this.atoms[i].getSeqcode ();
					if (seqcode == atomSeqcode || !haveSeqNumber && seqcode == org.jmol.modelset.Group.getInsertionCodeValue (atomSeqcode) || insCode == '*' && seqNum == org.jmol.modelset.Group.getSequenceNumber (atomSeqcode)) {
					    bs.set (i);
					    isEmpty = false;
					}}
				}
				return (!isEmpty || returnEmpty ? bs : null);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getChainBits", 
			    function (chainId) {
				var caseSensitive = this.viewer.getChainCaseSensitive ();
				if (!caseSensitive) chainId = Character.toUpperCase (chainId);
				var bs =  new org.jmol.util.BitSet ();
				var bsDone = org.jmol.util.BitSetUtil.newBitSet (this.atomCount);
				for (var i = bsDone.nextClearBit (0); i < this.atomCount; i = bsDone.nextClearBit (i + 1)) {
				    var chain = this.atoms[i].getChain ();
				    if (chainId == (caseSensitive ? chain.chainID : Character.toUpperCase (chain.chainID))) {
					chain.setAtomBitSet (bs);
					bsDone.or (bs);
				    } else {
					chain.setAtomBitSet (bsDone);
				    }}
				return bs;
			    }, "~S");
	Clazz.defineMethod (c$, "getAtomIndices", 
			    function (bs) {
				var n = 0;
				var indices =  Clazz.newIntArray (this.atomCount, 0);
				for (var j = bs.nextSetBit (0); j >= 0 && j < this.atomCount; j = bs.nextSetBit (j + 1)) indices[j] = ++n;

				return indices;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomsWithin", 
			    function (distance, plane) {
				var bsResult =  new org.jmol.util.BitSet ();
				for (var i = this.atomCount; --i >= 0; ) {
				    var atom = this.atoms[i];
				    var d = org.jmol.util.Measure.distanceToPlane (plane, atom);
				    if (distance > 0 && d >= -0.1 && d <= distance || distance < 0 && d <= 0.1 && d >= distance || distance == 0 && Math.abs (d) < 0.01) bsResult.set (atom.index);
				}
				return bsResult;
			    }, "~N,org.jmol.util.Point4f");
	Clazz.defineMethod (c$, "getAtomsWithinBs", 
			    function (distance, points, bsInclude) {
				var bsResult =  new org.jmol.util.BitSet ();
				if (points.length == 0 || bsInclude != null && bsInclude.cardinality () == 0) return bsResult;
				if (bsInclude == null) bsInclude = org.jmol.util.BitSetUtil.setAll (points.length);
				for (var i = this.atomCount; --i >= 0; ) {
				    var atom = this.atoms[i];
				    for (var j = bsInclude.nextSetBit (0); j >= 0; j = bsInclude.nextSetBit (j + 1)) if (atom.distance (points[j]) < distance) {
					bsResult.set (i);
					break;
				    }
				}
				return bsResult;
			    }, "~N,~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getVisibleSet", 
			    function () {
				var bs =  new org.jmol.util.BitSet ();
				for (var i = this.atomCount; --i >= 0; ) if (this.atoms[i].isVisible (0)) bs.set (i);

				return bs;
			    });
	Clazz.defineMethod (c$, "getClickableSet", 
			    function () {
				var bs =  new org.jmol.util.BitSet ();
				for (var i = this.atomCount; --i >= 0; ) if (this.atoms[i].isClickable ()) bs.set (i);

				return bs;
			    });
	Clazz.defineMethod (c$, "deleteModelAtoms", 
			    function (firstAtomIndex, nAtoms, bs) {
				this.atoms = org.jmol.util.ArrayUtil.deleteElements (this.atoms, firstAtomIndex, nAtoms);
				this.atomCount = this.atoms.length;
				for (var j = firstAtomIndex; j < this.atomCount; j++) {
				    this.atoms[j].index = j;
				    this.atoms[j].modelIndex--;
				}
				this.atomNames = org.jmol.util.ArrayUtil.deleteElements (this.atomNames, firstAtomIndex, nAtoms);
				this.atomTypes = org.jmol.util.ArrayUtil.deleteElements (this.atomTypes, firstAtomIndex, nAtoms);
				this.atomSerials = org.jmol.util.ArrayUtil.deleteElements (this.atomSerials, firstAtomIndex, nAtoms);
				this.bfactor100s = org.jmol.util.ArrayUtil.deleteElements (this.bfactor100s, firstAtomIndex, nAtoms);
				this.hasBfactorRange = false;
				this.occupancies = org.jmol.util.ArrayUtil.deleteElements (this.occupancies, firstAtomIndex, nAtoms);
				this.partialCharges = org.jmol.util.ArrayUtil.deleteElements (this.partialCharges, firstAtomIndex, nAtoms);
				this.ellipsoids = org.jmol.util.ArrayUtil.deleteElements (this.ellipsoids, firstAtomIndex, nAtoms);
				this.vibrationVectors = org.jmol.util.ArrayUtil.deleteElements (this.vibrationVectors, firstAtomIndex, nAtoms);
				this.nSurfaceAtoms = 0;
				this.bsSurface = null;
				this.surfaceDistance100s = null;
				if (this.tainted != null) for (var i = 0; i < 14; i++) org.jmol.util.BitSetUtil.deleteBits (this.tainted[i], bs);

			    }, "~N,~N,org.jmol.util.BitSet");
	c$.$AtomCollection$AtomSorter$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		Clazz.instantialize (this, arguments);
	    }, org.jmol.modelset.AtomCollection, "AtomSorter", null, java.util.Comparator);
	    Clazz.overrideMethod (c$, "compare", 
				  function (a, b) {
				      return (a.index > b.index ? 1 : a.index < b.index ? -1 : 0);
				  }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom");
	    c$ = Clazz.p0p ();
	};
	c$.MINUSZERO = c$.prototype.MINUSZERO = Float.$valueOf (-0.0);
	Clazz.defineStatics (c$,
			     "TAINT_ATOMNAME", 0,
			     "TAINT_ATOMTYPE", 1,
			     "TAINT_COORD", 2,
			     "TAINT_ELEMENT", 3,
			     "TAINT_FORMALCHARGE", 4,
			     "TAINT_HYDROPHOBICITY", 5,
			     "TAINT_IONICRADIUS", 6,
			     "TAINT_OCCUPANCY", 7,
			     "TAINT_PARTIALCHARGE", 8,
			     "TAINT_TEMPERATURE", 9,
			     "TAINT_VALENCE", 10,
			     "TAINT_VANDERWAALS", 11,
			     "TAINT_VIBRATION", 12,
			     "TAINT_ATOMNO", 13,
			     "TAINT_MAX", 14,
			     "userSettableValues", ["atomName", "atomType", "coord", "element", "formalCharge", "hydrophobicity", "ionic", "occupany", "partialCharge", "temperature", "valence", "vanderWaals", "vibrationVector", "atomNo"]);
	{
	    if (org.jmol.modelset.AtomCollection.userSettableValues.length != 14) org.jmol.util.Logger.error ("AtomCollection.java userSettableValues is not length TAINT_MAX!");
	}c$.sqrt3_2 = c$.prototype.sqrt3_2 = (Math.sqrt (3) / 2);
	c$.vRef = c$.prototype.vRef = org.jmol.util.Vector3f.new3 (3.14159, 2.71828, 1.41421);
	Clazz.defineStatics (c$,
			     "almost180", 2.984513);
    });
    // 
    //// org\jmol\modelset\LabelToken.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (null, "org.jmol.modelset.LabelToken", ["java.lang.Character", "$.Float", "java.util.Hashtable", "org.jmol.modelset.Atom", "org.jmol.script.Token", "org.jmol.util.Escape", "$.StringXBuilder", "$.TextFormat"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.text = null;
	    this.key = null;
	    this.data = null;
	    this.tok = 0;
	    this.pt = -1;
	    this.ch1 = '\0';
	    this.width = 0;
	    this.precision = 2147483647;
	    this.alignLeft = false;
	    this.zeroPad = false;
	    this.intAsFloat = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "LabelToken");
	c$.isLabelPropertyTok = Clazz.defineMethod (c$, "isLabelPropertyTok", 
						    ($fz = function (tok) {
							for (var i = org.jmol.modelset.LabelToken.labelTokenIds.length; --i >= 0; ) if (org.jmol.modelset.LabelToken.labelTokenIds[i] == tok) return true;

							return false;
						    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.makeConstructor (c$, 
			       ($fz = function (text, pt) {
				   this.text = text;
				   this.pt = pt;
			       }, $fz.isPrivate = true, $fz), "~S,~N");
	c$.compile = Clazz.defineMethod (c$, "compile", 
					 function (viewer, strFormat, chAtom, htValues) {
					     if (strFormat == null || strFormat.length == 0) return null;
					     if (strFormat.indexOf ("%") < 0 || strFormat.length < 2) return [ new org.jmol.modelset.LabelToken (strFormat, -1)];
					     var n = 0;
					     var ich = -1;
					     var cch = strFormat.length;
					     while (++ich < cch && (ich = strFormat.indexOf ('%', ich)) >= 0) n++;

					     var tokens =  new Array (n * 2 + 1);
					     var ichPercent;
					     var i = 0;
					     for (ich = 0; (ichPercent = strFormat.indexOf ('%', ich)) >= 0; ) {
						 if (ich != ichPercent) tokens[i++] =  new org.jmol.modelset.LabelToken (strFormat.substring (ich, ichPercent), -1);
						 var lt = tokens[i++] =  new org.jmol.modelset.LabelToken (null, ichPercent);
						 viewer.autoCalculate (lt.tok);
						 ich = org.jmol.modelset.LabelToken.setToken (viewer, strFormat, lt, cch, chAtom.charCodeAt (0), htValues);
					     }
					     if (ich < cch) tokens[i++] =  new org.jmol.modelset.LabelToken (strFormat.substring (ich), -1);
					     return tokens;
					 }, "org.jmol.viewer.Viewer,~S,~S,java.util.Map");
	c$.formatLabel = Clazz.defineMethod (c$, "formatLabel", 
					     function (viewer, atom, strFormat) {
						 if (strFormat == null || strFormat.length == 0) return null;
						 var tokens = org.jmol.modelset.LabelToken.compile (viewer, strFormat, '\0', null);
						 return org.jmol.modelset.LabelToken.formatLabelAtomArray (viewer, atom, tokens, '\0', null);
					     }, "org.jmol.viewer.Viewer,org.jmol.modelset.Atom,~S");
	c$.formatLabelAtomArray = Clazz.defineMethod (c$, "formatLabelAtomArray", 
						      function (viewer, atom, tokens, chAtom, indices) {
							  if (atom == null) return null;
							  var strLabel = (chAtom > '0' ? null :  new org.jmol.util.StringXBuilder ());
							  if (tokens != null) for (var i = 0; i < tokens.length; i++) {
							      var t = tokens[i];
							      if (t == null) break;
							      if (chAtom > '0' && t.ch1 != chAtom) continue;
							      if (t.tok <= 0 || t.key != null) {
								  if (strLabel != null) {
								      strLabel.append (t.text);
								      if (t.ch1 != '\0') strLabel.appendC (t.ch1);
								  }} else {
								      org.jmol.modelset.LabelToken.appendAtomTokenValue (viewer, atom, t, strLabel, indices);
								  }}
							  return (strLabel == null ? null : strLabel.toString ().intern ());
						      }, "org.jmol.viewer.Viewer,org.jmol.modelset.Atom,~A,~S,~A");
	c$.getBondLabelValues = Clazz.defineMethod (c$, "getBondLabelValues", 
						    function () {
							var htValues =  new java.util.Hashtable ();
							htValues.put ("#", "");
							htValues.put ("ORDER", "");
							htValues.put ("TYPE", "");
							htValues.put ("LENGTH",  new Float (0));
							htValues.put ("ENERGY",  new Float (0));
							return htValues;
						    });
	c$.formatLabelBond = Clazz.defineMethod (c$, "formatLabelBond", 
						 function (viewer, bond, tokens, values, indices) {
						     values.put ("#", "" + (bond.index + 1));
						     values.put ("ORDER", "" + bond.getOrderNumberAsString ());
						     values.put ("TYPE", bond.getOrderName ());
						     values.put ("LENGTH",  new Float (bond.atom1.distance (bond.atom2)));
						     values.put ("ENERGY",  new Float (bond.getEnergy ()));
						     org.jmol.modelset.LabelToken.setValues (tokens, values);
						     org.jmol.modelset.LabelToken.formatLabelAtomArray (viewer, bond.atom1, tokens, '1', indices);
						     org.jmol.modelset.LabelToken.formatLabelAtomArray (viewer, bond.atom2, tokens, '2', indices);
						     return org.jmol.modelset.LabelToken.getLabel (tokens);
						 }, "org.jmol.viewer.Viewer,org.jmol.modelset.Bond,~A,java.util.Map,~A");
	c$.formatLabelMeasure = Clazz.defineMethod (c$, "formatLabelMeasure", 
						    function (viewer, measurement, label, value, units) {
							var htValues =  new java.util.Hashtable ();
							htValues.put ("#", "" + (measurement.getIndex () + 1));
							htValues.put ("VALUE",  new Float (value));
							htValues.put ("UNITS", units);
							var tokens = org.jmol.modelset.LabelToken.compile (viewer, label, '\1', htValues);
							org.jmol.modelset.LabelToken.setValues (tokens, htValues);
							var atoms = measurement.modelSet.atoms;
							var indices = measurement.getCountPlusIndices ();
							for (var i = indices[0]; i >= 1; --i) if (indices[i] >= 0) org.jmol.modelset.LabelToken.formatLabelAtomArray (viewer, atoms[indices[i]], tokens, String.fromCharCode (48 + i), null);

							label = org.jmol.modelset.LabelToken.getLabel (tokens);
							return (label == null ? "" : label);
						    }, "org.jmol.viewer.Viewer,org.jmol.modelset.Measurement,~S,~N,~S");
	c$.setValues = Clazz.defineMethod (c$, "setValues", 
					   function (tokens, values) {
					       for (var i = 0; i < tokens.length; i++) {
						   var lt = tokens[i];
						   if (lt == null) break;
						   if (lt.key == null) continue;
						   var value = values.get (lt.key);
						   lt.text = (Clazz.instanceOf (value, Float) ? lt.format ((value).floatValue (), null, null) : lt.format (NaN, value, null));
					       }
					   }, "~A,java.util.Map");
	c$.getLabel = Clazz.defineMethod (c$, "getLabel", 
					  function (tokens) {
					      var sb =  new org.jmol.util.StringXBuilder ();
					      for (var i = 0; i < tokens.length; i++) {
						  var lt = tokens[i];
						  if (lt == null) break;
						  sb.append (lt.text);
					      }
					      return sb.toString ();
					  }, "~A");
	c$.setToken = Clazz.defineMethod (c$, "setToken", 
					  ($fz = function (viewer, strFormat, lt, cch, chAtom, htValues) {
					      var ich = lt.pt + 1;
					      var ch;
					      if (strFormat.charAt (ich) == '-') {
						  lt.alignLeft = true;
						  ++ich;
					      }if (ich < cch && strFormat.charAt (ich) == '0') {
						  lt.zeroPad = true;
						  ++ich;
					      }while (ich < cch && Character.isDigit (ch = strFormat.charAt (ich))) {
						  lt.width = (10 * lt.width) + (ch.charCodeAt (0) - 48);
						  ++ich;
					      }
					      lt.precision = 2147483647;
					      var isNegative = false;
					      if (ich < cch && strFormat.charAt (ich) == '.') {
						  ++ich;
						  if (ich < cch && (ch = strFormat.charAt (ich)) == '-') {
						      isNegative = true;
						      ++ich;
						  }if (ich < cch && Character.isDigit (ch = strFormat.charAt (ich))) {
						      lt.precision = ch.charCodeAt (0) - 48;
						      if (isNegative) lt.precision = -1 - lt.precision;
						      ++ich;
						  }}if (ich < cch && htValues != null) {
						      var keys = htValues.keySet ().iterator ();
						      while (keys.hasNext ()) {
							  var key = keys.next ();
							  if (strFormat.indexOf (key) == ich) {
							      lt.key = key;
							      return ich + key.length;
							  }}
						  }if (ich < cch) switch (ch = strFormat.charAt (ich++)) {
						  case '%':
						      lt.text = "%";
						      return ich;
						  case '[':
						      var ichClose = strFormat.indexOf (']', ich);
						      if (ichClose < ich) {
							  ich = cch;
							  break;
						      }var propertyName = strFormat.substring (ich, ichClose).toLowerCase ();
						      if (propertyName.startsWith ("property_")) {
							  lt.text = propertyName;
							  lt.tok = 135270407;
							  lt.data = viewer.getDataFloat (lt.text);
						      } else {
							  var token = org.jmol.script.Token.getTokenFromName (propertyName);
							  if (token != null && org.jmol.modelset.LabelToken.isLabelPropertyTok (token.tok)) lt.tok = token.tok;
						      }ich = ichClose + 1;
						      break;
						  case '{':
						      var ichCloseBracket = strFormat.indexOf ('}', ich);
						      if (ichCloseBracket < ich) {
							  ich = cch;
							  break;
						      }lt.text = strFormat.substring (ich, ichCloseBracket);
						      lt.data = viewer.getDataFloat (lt.text);
						      if (lt.data == null) {
							  lt.data = viewer.getData (lt.text);
							  if (Clazz.instanceOf (lt.data, Array)) {
							      lt.data = (lt.data)[1];
							      if (Clazz.instanceOf (lt.data, String)) lt.data = org.jmol.util.TextFormat.split (lt.data, '\n');
							      if (!(org.jmol.util.Escape.isAS (lt.data))) lt.data = null;
							  }lt.tok = (lt.data == null ? 4 : 135266306);
						      } else {
							  lt.tok = 135270407;
						      }ich = ichCloseBracket + 1;
						      break;
						  default:
						      var i;
						      var i1;
						      if (ich < cch && (i = "fuv".indexOf (ch)) >= 0 && (i1 = "xyz".indexOf (strFormat.charAt (ich))) >= 0) {
							  lt.tok = org.jmol.modelset.LabelToken.twoCharLabelTokenIds[i * 3 + i1];
							  ich++;
						      } else if ((i = "AaBbCcDEefGgIiLlMmNnoPpQqRrSsTtUuVvWXxYyZz%%%gqW".indexOf (ch)) >= 0) {
							  lt.tok = org.jmol.modelset.LabelToken.labelTokenIds[i];
						      }}
					      lt.text = strFormat.substring (lt.pt, ich);
					      if (ich < cch && chAtom != 0 && Character.isDigit (ch = strFormat.charAt (ich))) {
						  ich++;
						  lt.ch1 = ch;
						  if (ch.charCodeAt (0) != chAtom && chAtom != 1) lt.tok = 0;
					      }return ich;
					  }, $fz.isPrivate = true, $fz), "org.jmol.viewer.Viewer,~S,org.jmol.modelset.LabelToken,~N,~N,java.util.Map");
	c$.appendAtomTokenValue = Clazz.defineMethod (c$, "appendAtomTokenValue", 
						      ($fz = function (viewer, atom, t, strLabel, indices) {
							  var strT = null;
							  var floatT = NaN;
							  var ptT = null;
							  try {
							      switch (t.tok) {
							      case 1095761923:
								  strT = "" + (indices == null ? atom.index : indices[atom.index]);
								  break;
							      case 1766856708:
								  ptT = org.jmol.modelset.Atom.atomPropertyTuple (atom, t.tok);
								  break;
							      case 135270407:
								  if (t.data != null) {
								      floatT = (t.data)[atom.index];
								  }break;
							      case 135266306:
								  if (t.data != null) {
								      var sdata = t.data;
								      strT = (atom.index < sdata.length ? sdata[atom.index] : "");
								  }break;
							      case 1632634889:
								  var formalCharge = atom.getFormalCharge ();
								  if (formalCharge > 0) strT = "" + formalCharge + "+";
								  else if (formalCharge < 0) strT = "" + -formalCharge + "-";
								  else strT = "";
								  break;
							      case 'g':
								  strT = "" + atom.getSelectedGroupIndexWithinChain ();
								  break;
							      case 1095766028:
								  strT = atom.getModelNumberForLabel ();
								  break;
							      case 1129318401:
								  strT = "" + org.jmol.modelset.Atom.atomPropertyInt (atom, t.tok);
								  break;
							      case 'Q':
								  floatT = atom.getOccupancy100 () / 100;
								  break;
							      case 1666189314:
								  floatT = org.jmol.modelset.Atom.atomPropertyFloat (viewer, atom, t.tok);
								  break;
							      case 'r':
								  strT = atom.getSeqcodeString ();
								  break;
							      case 1087373324:
								  strT = atom.getStructureId ();
								  break;
							      case 1095761939:
								  var id = atom.getStrucNo ();
								  strT = (id <= 0 ? "" : "" + id);
								  break;
							      case 1112539148:
								  floatT = atom.getGroupParameter (1112539148);
								  if (Float.isNaN (floatT)) strT = "null";
								  break;
							      case 4:
								  strT = viewer.getModelAtomProperty (atom, t.text.substring (2, t.text.length - 1));
								  break;
							      case 1641025539:
							      case 1238369286:
								  strT = org.jmol.modelset.Atom.atomPropertyString (viewer, atom, t.tok);
								  break;
							      case 'W':
								  strT = atom.getIdentityXYZ (false);
								  break;
							      default:
								  switch (t.tok & 1137704960) {
								  case 1095761920:
								      if (t.intAsFloat) floatT = org.jmol.modelset.Atom.atomPropertyInt (atom, t.tok);
								      else strT = "" + org.jmol.modelset.Atom.atomPropertyInt (atom, t.tok);
								      break;
								  case 1112539136:
								      floatT = org.jmol.modelset.Atom.atomPropertyFloat (viewer, atom, t.tok);
								      break;
								  case 1087373312:
								      strT = org.jmol.modelset.Atom.atomPropertyString (viewer, atom, t.tok);
								      break;
								  case 1078984704:
								      ptT = org.jmol.modelset.Atom.atomPropertyTuple (atom, t.tok);
								      break;
								  default:
								  }
							      }
							  } catch (ioobe) {
							      if (Clazz.exceptionOf (ioobe, IndexOutOfBoundsException)) {
								  floatT = NaN;
								  strT = null;
								  ptT = null;
							      } else {
								  throw ioobe;
							      }
							  }
							  strT = t.format (floatT, strT, ptT);
							  if (strLabel == null) t.text = strT;
							  else strLabel.append (strT);
						      }, $fz.isPrivate = true, $fz), "org.jmol.viewer.Viewer,org.jmol.modelset.Atom,org.jmol.modelset.LabelToken,org.jmol.util.StringXBuilder,~A");
	Clazz.defineMethod (c$, "format", 
			    ($fz = function (floatT, strT, ptT) {
				if (!Float.isNaN (floatT)) {
				    return org.jmol.util.TextFormat.formatF (floatT, this.width, this.precision, this.alignLeft, this.zeroPad);
				} else if (strT != null) {
				    return org.jmol.util.TextFormat.formatS (strT, this.width, this.precision, this.alignLeft, this.zeroPad);
				} else if (ptT != null) {
				    if (this.width == 0 && this.precision == 2147483647) {
					this.width = 6;
					this.precision = 2;
				    }return org.jmol.util.TextFormat.formatF (ptT.x, this.width, this.precision, false, false) + org.jmol.util.TextFormat.formatF (ptT.y, this.width, this.precision, false, false) + org.jmol.util.TextFormat.formatF (ptT.z, this.width, this.precision, false, false);
				} else {
				    return this.text;
				}}, $fz.isPrivate = true, $fz), "~N,~S,org.jmol.util.Tuple3f");
	Clazz.defineStatics (c$,
			     "labelTokenParams", "AaBbCcDEefGgIiLlMmNnoPpQqRrSsTtUuVvWXxYyZz%%%gqW",
			     "labelTokenIds", [1087373315, 1087375362, 1087375361, 1112541199, 1632634889, 1087373316, 1095761923, 1087373322, 1087375365, 1112539143, 1095761931, 'g', 1112541195, 1095763969, 1095761936, 1095763976, 1095766028, 1087373319, 1095761934, 1087373318, 1089470478, 1112541196, 1112539144, 'Q', 1129318401, 1095761937, 'r', 1095761938, 1087373316, 1112539148, 1112541199, 1087373321, 1112539149, 1649412112, 1146095631, 'W', 1112541188, 1112541185, 1112541189, 1112541186, 1112541190, 1112541187, 1115297793, 1113200642, 1113198595, 1113198596, 1113198597, 1113200646, 1113200647, 1113200649, 1113200650, 1113200652, 1650071565, 1113200654, 1112539137, 1112539138, 1095761922, 1095761924, 1766856708, 1095761930, 1112539139, 1229984263, 1288701960, 1826248715, 1112539141, 1095761933, 1112539140, 1112539142, 1095761935, 1716520973, 1666189314, 1114638350, 1087373323, 1087373320, 1113200651, 1641025539, 1238369286, 1095761939, 1087373324, 1087375373, 1112539150, 1112539151, 1112539152, 1112539153, 1095763988, 1649410065, 1112541202, 1112541203, 1112541204, 1313866247, 1146093582, 1146095627, 1146095626, 1146095629, 1112541191, 1112541192, 1112541193, 1114638346, 1112539145, 1112539146, 1112539147, 1146095628],
			     "STANDARD_LABEL", "%[identify]",
			     "twoCharLabelTokenParams", "fuv",
			     "twoCharLabelTokenIds", [1112541188, 1112541189, 1112541190, 1112539151, 1112539152, 1112539153, 1112541202, 1112541203, 1112541204]);
    });
    // 
    //// org\jmol\api\JmolMeasurementClient.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolMeasurementClient");
    // 
    //// org\jmol\modelset\MeasurementData.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.api.JmolMeasurementClient"], "org.jmol.modelset.MeasurementData", ["java.util.ArrayList", "org.jmol.modelset.Measurement", "org.jmol.util.BitSetUtil"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.client = null;
	    this.measurementStrings = null;
	    this.atoms = null;
	    this.mustBeConnected = false;
	    this.mustNotBeConnected = false;
	    this.tickInfo = null;
	    this.tokAction = 0;
	    this.points = null;
	    this.radiusData = null;
	    this.strFormat = null;
	    this.isAll = false;
	    this.units = null;
	    this.intramolecular = null;
	    this.minArray = null;
	    this.viewer = null;
	    this.iFirstAtom = 0;
	    this.justOneModel = true;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "MeasurementData", null, org.jmol.api.JmolMeasurementClient);
	Clazz.makeConstructor (c$, 
			       function (viewer, points, tokAction, radiusData, strFormat, units, tickInfo, mustBeConnected, mustNotBeConnected, intramolecular, isAll) {
				   this.viewer = viewer;
				   this.tokAction = tokAction;
				   this.points = points;
				   if (points.size () >= 2 && Clazz.instanceOf (points.get (0), org.jmol.util.BitSet) && Clazz.instanceOf (points.get (1), org.jmol.util.BitSet)) {
				       this.justOneModel = org.jmol.util.BitSetUtil.haveCommon (viewer.getModelBitSet (points.get (0), false), viewer.getModelBitSet (points.get (1), false));
				   }this.radiusData = radiusData;
				   this.strFormat = strFormat;
				   this.units = units;
				   this.tickInfo = tickInfo;
				   this.mustBeConnected = mustBeConnected;
				   this.mustNotBeConnected = mustNotBeConnected;
				   this.intramolecular = intramolecular;
				   this.isAll = isAll;
			       }, "org.jmol.viewer.Viewer,java.util.List,~N,org.jmol.atomdata.RadiusData,~S,~S,org.jmol.modelset.TickInfo,~B,~B,Boolean,~B");
	Clazz.defineMethod (c$, "processNextMeasure", 
			    function (m) {
				var value = m.getMeasurement ();
				if (this.radiusData != null && !m.isInRange (this.radiusData, value)) return;
				if (this.measurementStrings == null) {
				    var f = this.minArray[this.iFirstAtom];
				    m.value = value;
				    value = m.fixValue (this.units, false);
				    this.minArray[this.iFirstAtom] = (1 / f == -Infinity ? value : Math.min (f, value));
				    return;
				}this.measurementStrings.add (m.getStringUsing (this.viewer, this.strFormat, this.units));
			    }, "org.jmol.modelset.Measurement");
	Clazz.defineMethod (c$, "getMeasurements", 
			    function (asMinArray) {
				if (asMinArray) {
				    this.minArray =  Clazz.newFloatArray ((this.points.get (0)).cardinality (), 0);
				    for (var i = 0; i < this.minArray.length; i++) this.minArray[i] = -0.0;

				    this.define (null, this.viewer.getModelSet ());
				    return this.minArray;
				}this.measurementStrings =  new java.util.ArrayList ();
				this.define (null, this.viewer.getModelSet ());
				return this.measurementStrings;
			    }, "~B");
	Clazz.defineMethod (c$, "define", 
			    function (client, modelSet) {
				this.client = (client == null ? this : client);
				this.atoms = modelSet.atoms;
				var nPoints = this.points.size ();
				if (nPoints < 2) return;
				var modelIndex = -1;
				var pts =  new Array (4);
				var indices =  Clazz.newIntArray (5, 0);
				var m =  new org.jmol.modelset.Measurement (modelSet, indices, pts, null);
				m.setCount (nPoints);
				var ptLastAtom = -1;
				for (var i = 0; i < nPoints; i++) {
				    var obj = this.points.get (i);
				    if (Clazz.instanceOf (obj, org.jmol.util.BitSet)) {
					var bs = obj;
					var nAtoms = bs.cardinality ();
					if (nAtoms == 0) return;
					if (nAtoms > 1) modelIndex = 0;
					ptLastAtom = i;
					if (i == 0) this.iFirstAtom = 0;
					indices[i + 1] = bs.nextSetBit (0);
				    } else {
					pts[i] = obj;
					indices[i + 1] = -2 - i;
				    }}
				this.nextMeasure (0, ptLastAtom, m, modelIndex);
			    }, "org.jmol.api.JmolMeasurementClient,org.jmol.modelset.ModelSet");
	Clazz.defineMethod (c$, "nextMeasure", 
			    ($fz = function (thispt, ptLastAtom, m, thisModel) {
				if (thispt > ptLastAtom) {
				    if (m.isValid () && (!this.mustBeConnected || m.isConnected (this.atoms, thispt)) && (!this.mustNotBeConnected || !m.isConnected (this.atoms, thispt)) && (this.intramolecular == null || m.isIntramolecular (this.atoms, thispt) == this.intramolecular.booleanValue ())) this.client.processNextMeasure (m);
				    return;
				}var bs = this.points.get (thispt);
				var indices = m.getCountPlusIndices ();
				var thisAtomIndex = (thispt == 0 ? 2147483647 : indices[thispt]);
				if (thisAtomIndex < 0) {
				    this.nextMeasure (thispt + 1, ptLastAtom, m, thisModel);
				    return;
				}var haveNext = false;
				for (var i = bs.nextSetBit (0), pt = 0; i >= 0; i = bs.nextSetBit (i + 1), pt++) {
				    if (i == thisAtomIndex) continue;
				    var modelIndex = this.atoms[i].getModelIndex ();
				    if (thisModel >= 0 && this.justOneModel) {
					if (thispt == 0) thisModel = modelIndex;
					else if (thisModel != modelIndex) continue;
				    }indices[thispt + 1] = i;
				    if (thispt == 0) this.iFirstAtom = pt;
				    haveNext = true;
				    this.nextMeasure (thispt + 1, ptLastAtom, m, thisModel);
				}
				if (!haveNext) this.nextMeasure (thispt + 1, ptLastAtom, m, thisModel);
			    }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.modelset.Measurement,~N");
    });
    // 
    //// org\jmol\util\BoxInfo.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Point3f", "$.Point3i", "$.Vector3f"], "org.jmol.util.BoxInfo", ["java.util.ArrayList", "$.Hashtable", "org.jmol.util.Measure", "$.Point3fi", "$.Point4f", "$.TriangleData"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bbCorner0 = null;
	    this.bbCorner1 = null;
	    this.bbCenter = null;
	    this.bbVector = null;
	    this.bbVertices = null;
	    this.isScaleSet = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "BoxInfo");
	Clazz.prepareFields (c$, function () {
	    this.bbCorner0 =  new org.jmol.util.Point3f ();
	    this.bbCorner1 =  new org.jmol.util.Point3f ();
	    this.bbCenter =  new org.jmol.util.Point3f ();
	    this.bbVector =  new org.jmol.util.Vector3f ();
	    this.bbVertices =  new Array (8);
	    {
		for (var i = 8; --i >= 0; ) this.bbVertices[i] =  new org.jmol.util.Point3fi ();

	    }{
		for (var i = 0; i < 8; i++) {
		    org.jmol.util.BoxInfo.unitBboxPoints[i] = org.jmol.util.Point3f.new3 (-1, -1, -1);
		    org.jmol.util.BoxInfo.unitBboxPoints[i].scaleAdd2 (2, org.jmol.util.BoxInfo.unitCubePoints[i], org.jmol.util.BoxInfo.unitBboxPoints[i]);
		}
	    }});
	Clazz.makeConstructor (c$, 
			       function () {
				   this.reset ();
			       });
	Clazz.defineMethod (c$, "intersectPlane", 
			    function (plane, scale, flags) {
				var v =  new java.util.ArrayList ();
				v.add (this.getCanonicalCopy (scale));
				return org.jmol.util.TriangleData.intersectPlane (plane, v, flags);
			    }, "org.jmol.util.Point4f,~N,~N");
	Clazz.defineMethod (c$, "getCanonicalCopy", 
			    function (scale) {
				return org.jmol.util.BoxInfo.getCanonicalCopy (this.bbVertices, scale);
			    }, "~N");
	c$.getCanonicalCopy = Clazz.defineMethod (c$, "getCanonicalCopy", 
						  function (bbUcPoints, scale) {
						      var pts =  new Array (8);
						      for (var i = 0; i < 8; i++) pts[org.jmol.util.BoxInfo.toCanonical[i]] = org.jmol.util.Point3f.newP (bbUcPoints[i]);

						      org.jmol.util.BoxInfo.scaleBox (pts, scale);
						      return pts;
						  }, "~A,~N");
	c$.scaleBox = Clazz.defineMethod (c$, "scaleBox", 
					  function (pts, scale) {
					      if (scale == 0 || scale == 1) return;
					      var center =  new org.jmol.util.Point3f ();
					      var v =  new org.jmol.util.Vector3f ();
					      for (var i = 0; i < 8; i++) center.add (pts[i]);

					      center.scale (0.125);
					      for (var i = 0; i < 8; i++) {
						  v.sub2 (pts[i], center);
						  v.scale (scale);
						  pts[i].add2 (center, v);
					      }
					  }, "~A,~N");
	c$.getFacesFromCriticalPoints = Clazz.defineMethod (c$, "getFacesFromCriticalPoints", 
							    function (points) {
								var faces =  new Array (6);
								var vNorm =  new org.jmol.util.Vector3f ();
								var vAB =  new org.jmol.util.Vector3f ();
								var vAC =  new org.jmol.util.Vector3f ();
								var va =  new org.jmol.util.Point3f ();
								var vb =  new org.jmol.util.Point3f ();
								var vc =  new org.jmol.util.Point3f ();
								var vertices =  new Array (8);
								for (var i = 0; i < 8; i++) {
								    vertices[i] = org.jmol.util.Point3f.newP (points[0]);
								    if ((i & 1) == 1) vertices[i].add (points[1]);
								    if ((i & 2) == 2) vertices[i].add (points[2]);
								    if ((i & 4) == 4) vertices[i].add (points[3]);
								}
								for (var i = 0; i < 6; i++) {
								    va.setT (vertices[org.jmol.util.BoxInfo.facePoints[i].x]);
								    vb.setT (vertices[org.jmol.util.BoxInfo.facePoints[i].y]);
								    vc.setT (vertices[org.jmol.util.BoxInfo.facePoints[i].z]);
								    org.jmol.util.Measure.getPlaneThroughPoints (va, vb, vc, vNorm, vAB, vAC, faces[i] =  new org.jmol.util.Point4f ());
								}
								return faces;
							    }, "~A");
	c$.getCriticalPoints = Clazz.defineMethod (c$, "getCriticalPoints", 
						   function (bbVertices, offset) {
						       var center = org.jmol.util.Point3f.newP (bbVertices[0]);
						       var a = org.jmol.util.Point3f.newP (bbVertices[1]);
						       var b = org.jmol.util.Point3f.newP (bbVertices[2]);
						       var c = org.jmol.util.Point3f.newP (bbVertices[4]);
						       a.sub (center);
						       b.sub (center);
						       c.sub (center);
						       if (offset != null) center.add (offset);
						       return [center, a, b, c];
						   }, "~A,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "getBoundBoxCenter", 
			    function () {
				if (!this.isScaleSet) this.setBbcage (1);
				return this.bbCenter;
			    });
	Clazz.defineMethod (c$, "getBoundBoxCornerVector", 
			    function () {
				if (!this.isScaleSet) this.setBbcage (1);
				return this.bbVector;
			    });
	Clazz.defineMethod (c$, "getBoundBoxPoints", 
			    function (isAll) {
				if (!this.isScaleSet) this.setBbcage (1);
				return (isAll ? [this.bbCenter, org.jmol.util.Point3f.newP (this.bbVector), this.bbCorner0, this.bbCorner1] : [this.bbCorner0, this.bbCorner1]);
			    }, "~B");
	Clazz.defineMethod (c$, "getBboxVertices", 
			    function () {
				if (!this.isScaleSet) this.setBbcage (1);
				return this.bbVertices;
			    });
	Clazz.defineMethod (c$, "getBoundBoxInfo", 
			    function () {
				if (!this.isScaleSet) this.setBbcage (1);
				var info =  new java.util.Hashtable ();
				info.put ("center", org.jmol.util.Point3f.newP (this.bbCenter));
				info.put ("vector", org.jmol.util.Vector3f.newV (this.bbVector));
				info.put ("corner0", org.jmol.util.Point3f.newP (this.bbCorner0));
				info.put ("corner1", org.jmol.util.Point3f.newP (this.bbCorner1));
				return info;
			    });
	Clazz.defineMethod (c$, "setBoundBox", 
			    function (pt1, pt2, byCorner, scale) {
				if (pt1 != null) {
				    if (scale == 0) return;
				    if (byCorner) {
					if (pt1.distance (pt2) == 0) return;
					this.bbCorner0.set (Math.min (pt1.x, pt2.x), Math.min (pt1.y, pt2.y), Math.min (pt1.z, pt2.z));
					this.bbCorner1.set (Math.max (pt1.x, pt2.x), Math.max (pt1.y, pt2.y), Math.max (pt1.z, pt2.z));
				    } else {
					if (pt2.x == 0 || pt2.y == 0 && pt2.z == 0) return;
					this.bbCorner0.set (pt1.x - pt2.x, pt1.y - pt2.y, pt1.z - pt2.z);
					this.bbCorner1.set (pt1.x + pt2.x, pt1.y + pt2.y, pt1.z + pt2.z);
				    }}this.setBbcage (scale);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~B,~N");
	Clazz.defineMethod (c$, "reset", 
			    function () {
				this.isScaleSet = false;
				this.bbCorner0.set (3.4028235E38, 3.4028235E38, 3.4028235E38);
				this.bbCorner1.set (-3.4028235E38, -3.4028235E38, -3.4028235E38);
			    });
	Clazz.defineMethod (c$, "addBoundBoxPoint", 
			    function (pt) {
				this.isScaleSet = false;
				org.jmol.util.BoxInfo.addPoint (pt, this.bbCorner0, this.bbCorner1, 0);
			    }, "org.jmol.util.Point3f");
	c$.addPoint = Clazz.defineMethod (c$, "addPoint", 
					  function (pt, xyzMin, xyzMax, margin) {
					      if (pt.x - margin < xyzMin.x) xyzMin.x = pt.x - margin;
					      if (pt.x + margin > xyzMax.x) xyzMax.x = pt.x + margin;
					      if (pt.y - margin < xyzMin.y) xyzMin.y = pt.y - margin;
					      if (pt.y + margin > xyzMax.y) xyzMax.y = pt.y + margin;
					      if (pt.z - margin < xyzMin.z) xyzMin.z = pt.z - margin;
					      if (pt.z + margin > xyzMax.z) xyzMax.z = pt.z + margin;
					  }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "setBbcage", 
			    function (scale) {
				this.isScaleSet = true;
				this.bbCenter.add2 (this.bbCorner0, this.bbCorner1);
				this.bbCenter.scale (0.5);
				this.bbVector.sub2 (this.bbCorner1, this.bbCenter);
				if (scale > 0) {
				    this.bbVector.scale (scale);
				} else {
				    this.bbVector.x -= scale / 2;
				    this.bbVector.y -= scale / 2;
				    this.bbVector.z -= scale / 2;
				}for (var i = 8; --i >= 0; ) {
				    var pt = this.bbVertices[i];
				    pt.setT (org.jmol.util.BoxInfo.unitBboxPoints[i]);
				    pt.x *= this.bbVector.x;
				    pt.y *= this.bbVector.y;
				    pt.z *= this.bbVector.z;
				    pt.add (this.bbCenter);
				}
				this.bbCorner0.setT (this.bbVertices[0]);
				this.bbCorner1.setT (this.bbVertices[7]);
			    }, "~N");
	Clazz.defineMethod (c$, "isWithin", 
			    function (pt) {
				if (!this.isScaleSet) this.setBbcage (1);
				return (pt.x >= this.bbCorner0.x && pt.x <= this.bbCorner1.x && pt.y >= this.bbCorner0.y && pt.y <= this.bbCorner1.y && pt.z >= this.bbCorner0.z && pt.z <= this.bbCorner1.z);
			    }, "org.jmol.util.Point3f");
	Clazz.defineStatics (c$,
			     "bbcageTickEdges", ['z', '\0', '\0', 'y', 'x', '\0', '\0', '\0', '\0', '\0', '\0', '\0'],
			     "uccageTickEdges", ['z', 'y', 'x', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'],
			     "edges", [0, 1, 0, 2, 0, 4, 1, 3, 1, 5, 2, 3, 2, 6, 3, 7, 4, 5, 4, 6, 5, 7, 6, 7]);
	c$.unitCubePoints = c$.prototype.unitCubePoints = [org.jmol.util.Point3f.new3 (0, 0, 0), org.jmol.util.Point3f.new3 (0, 0, 1), org.jmol.util.Point3f.new3 (0, 1, 0), org.jmol.util.Point3f.new3 (0, 1, 1), org.jmol.util.Point3f.new3 (1, 0, 0), org.jmol.util.Point3f.new3 (1, 0, 1), org.jmol.util.Point3f.new3 (1, 1, 0), org.jmol.util.Point3f.new3 (1, 1, 1)];
	c$.facePoints = c$.prototype.facePoints = [org.jmol.util.Point3i.new3 (4, 0, 6), org.jmol.util.Point3i.new3 (4, 6, 5), org.jmol.util.Point3i.new3 (5, 7, 1), org.jmol.util.Point3i.new3 (1, 3, 0), org.jmol.util.Point3i.new3 (6, 2, 7), org.jmol.util.Point3i.new3 (1, 0, 5)];
	Clazz.defineStatics (c$,
			     "toCanonical", [0, 3, 4, 7, 1, 2, 5, 6]);
	c$.cubeVertexOffsets = c$.prototype.cubeVertexOffsets = [org.jmol.util.Point3i.new3 (0, 0, 0), org.jmol.util.Point3i.new3 (1, 0, 0), org.jmol.util.Point3i.new3 (1, 0, 1), org.jmol.util.Point3i.new3 (0, 0, 1), org.jmol.util.Point3i.new3 (0, 1, 0), org.jmol.util.Point3i.new3 (1, 1, 0), org.jmol.util.Point3i.new3 (1, 1, 1), org.jmol.util.Point3i.new3 (0, 1, 1)];
	c$.unitBboxPoints = c$.prototype.unitBboxPoints =  new Array (8);
    });
    // 
    //// org\jmol\modelset\BondCollection.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.AtomCollection", "org.jmol.util.BitSet"], "org.jmol.modelset.BondCollection", ["org.jmol.modelset.Bond", "$.BondIteratorSelected", "$.HBond", "org.jmol.util.ArrayUtil", "$.BitSetUtil", "$.JmolEdge", "$.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.molecules = null;
	    this.moleculeCount = 0;
	    this.bonds = null;
	    this.bondCount = 0;
	    this.numCached = null;
	    this.freeBonds = null;
	    this.haveWarned = false;
	    this.defaultCovalentMad = 0;
	    this.bsAromaticSingle = null;
	    this.bsAromaticDouble = null;
	    this.bsAromatic = null;
	    this.haveHiddenBonds = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "BondCollection", org.jmol.modelset.AtomCollection);
	Clazz.prepareFields (c$, function () {
	    this.numCached =  Clazz.newIntArray (5, 0);
	    this.freeBonds =  new Array (5);
	    {
		for (var i = 5; --i > 0; ) this.freeBonds[i] =  new Array (200);

	    }this.bsAromatic =  new org.jmol.util.BitSet ();
	});
	Clazz.defineMethod (c$, "releaseModelSet", 
			    function () {
				this.bonds = null;
				this.freeBonds = null;
				Clazz.superCall (this, org.jmol.modelset.BondCollection, "releaseModelSet", []);
			    });
	Clazz.defineMethod (c$, "resetMolecules", 
			    function () {
				this.molecules = null;
				this.moleculeCount = 0;
			    });
	Clazz.defineMethod (c$, "getBonds", 
			    function () {
				return this.bonds;
			    });
	Clazz.defineMethod (c$, "getBondAt", 
			    function (bondIndex) {
				return this.bonds[bondIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getBondCount", 
			    function () {
				return this.bondCount;
			    });
	Clazz.defineMethod (c$, "getBondIteratorForType", 
			    function (bondType, bsAtoms) {
				return  new org.jmol.modelset.BondIteratorSelected (this.bonds, this.bondCount, bondType, bsAtoms, this.viewer.getBondSelectionModeOr ());
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getBondIterator", 
			    function (bsBonds) {
				return  new org.jmol.modelset.BondIteratorSelected (this.bonds, this.bondCount, 131071, bsBonds, false);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getBondAtom1", 
			    function (i) {
				return this.bonds[i].atom1;
			    }, "~N");
	Clazz.defineMethod (c$, "getBondAtom2", 
			    function (i) {
				return this.bonds[i].atom2;
			    }, "~N");
	Clazz.defineMethod (c$, "getBondRadius", 
			    function (i) {
				return this.bonds[i].getRadius ();
			    }, "~N");
	Clazz.defineMethod (c$, "getBondOrder", 
			    function (i) {
				return this.bonds[i].order;
			    }, "~N");
	Clazz.defineMethod (c$, "getBondColix1", 
			    function (i) {
				return this.bonds[i].getColix1 ();
			    }, "~N");
	Clazz.defineMethod (c$, "getBondColix2", 
			    function (i) {
				return this.bonds[i].getColix2 ();
			    }, "~N");
	Clazz.defineMethod (c$, "getBondModelIndex", 
			    function (i) {
				return this.bonds[i].atom1.modelIndex;
			    }, "~N");
	Clazz.defineMethod (c$, "getBondCountInModel", 
			    function (modelIndex) {
				var n = 0;
				for (var i = this.bondCount; --i >= 0; ) if (this.bonds[i].atom1.modelIndex == modelIndex) n++;

				return n;
			    }, "~N");
	Clazz.defineMethod (c$, "getBondsForSelectedAtoms", 
			    function (bsAtoms, bondSelectionModeOr) {
				var bs =  new org.jmol.util.BitSet ();
				for (var iBond = 0; iBond < this.bondCount; ++iBond) {
				    var bond = this.bonds[iBond];
				    var isSelected1 = bsAtoms.get (bond.atom1.index);
				    var isSelected2 = bsAtoms.get (bond.atom2.index);
				    if (( new Boolean (!bondSelectionModeOr & isSelected1 & isSelected2).valueOf ()) || ( new Boolean (bondSelectionModeOr & ( new Boolean (isSelected1 | isSelected2).valueOf ())).valueOf ())) bs.set (iBond);
				}
				return bs;
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "bondAtoms", 
			    function (atom1, atom2, order, mad, bsBonds, energy, addGroup, isNew) {
				var bond = this.getOrAddBond (atom1, atom2, order, mad, bsBonds, energy, true);
				if (isNew) {
				    bond.order |= 131072;
				    if (addGroup) {
					atom1.group = atom2.group;
					atom1.group.addAtoms (atom1.index);
				    }}return bond;
			    }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N,org.jmol.util.BitSet,~N,~B,~B");
	Clazz.defineMethod (c$, "getOrAddBond", 
			    ($fz = function (atom, atomOther, order, mad, bsBonds, energy, overrideBonding) {
				var i;
				if (order == 131071 || order == 65535) order = 1;
				if (atom.isBonded (atomOther)) {
				    i = atom.getBond (atomOther).index;
				    if (overrideBonding) {
					this.bonds[i].setOrder (order);
					this.bonds[i].setMad (mad);
					if (Clazz.instanceOf (this.bonds[i], org.jmol.modelset.HBond)) (this.bonds[i]).energy = energy;
				    }} else {
					if (this.bondCount == this.bonds.length) this.bonds = org.jmol.util.ArrayUtil.arrayCopyObject (this.bonds, this.bondCount + 250);
					i = this.setBond (this.bondCount++, this.bondMutually (atom, atomOther, order, mad, energy)).index;
				    }if (bsBonds != null) bsBonds.set (i);
				return this.bonds[i];
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N,org.jmol.util.BitSet,~N,~B");
	Clazz.defineMethod (c$, "setBond", 
			    function (index, bond) {
				return this.bonds[bond.index = index] = bond;
			    }, "~N,org.jmol.modelset.Bond");
	Clazz.defineMethod (c$, "bondMutually", 
			    function (atom, atomOther, order, mad, energy) {
				var bond;
				if (org.jmol.modelset.Bond.isHydrogen (order)) {
				    bond =  new org.jmol.modelset.HBond (atom, atomOther, order, mad, 0, energy);
				} else {
				    bond =  new org.jmol.modelset.Bond (atom, atomOther, order, mad, 0);
				}this.addBondToAtom (atom, bond);
				this.addBondToAtom (atomOther, bond);
				return bond;
			    }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N,~N");
	Clazz.defineMethod (c$, "addBondToAtom", 
			    ($fz = function (atom, bond) {
				if (atom.bonds == null) {
				    atom.bonds =  new Array (1);
				    atom.bonds[0] = bond;
				} else {
				    atom.bonds = this.addToBonds (bond, atom.bonds);
				}}, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,org.jmol.modelset.Bond");
	Clazz.defineMethod (c$, "addToBonds", 
			    ($fz = function (newBond, oldBonds) {
				var newBonds;
				if (oldBonds == null) {
				    if (this.numCached[1] > 0) newBonds = this.freeBonds[1][--this.numCached[1]];
				    else newBonds =  new Array (1);
				    newBonds[0] = newBond;
				} else {
				    var oldLength = oldBonds.length;
				    var newLength = oldLength + 1;
				    if (newLength < 5 && this.numCached[newLength] > 0) newBonds = this.freeBonds[newLength][--this.numCached[newLength]];
				    else newBonds =  new Array (newLength);
				    newBonds[oldLength] = newBond;
				    for (var i = oldLength; --i >= 0; ) newBonds[i] = oldBonds[i];

				    if (oldLength < 5 && this.numCached[oldLength] < 200) this.freeBonds[oldLength][this.numCached[oldLength]++] = oldBonds;
				}return newBonds;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Bond,~A");
	Clazz.defineMethod (c$, "addHBond", 
			    function (atom1, atom2, order, energy) {
				if (this.bondCount == this.bonds.length) this.bonds = org.jmol.util.ArrayUtil.arrayCopyObject (this.bonds, this.bondCount + 250);
				return this.setBond (this.bondCount++, this.bondMutually (atom1, atom2, order, 1, energy)).index;
			    }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N");
	c$.getBondOrder = Clazz.defineMethod (c$, "getBondOrder", 
					      function (bondingRadiusA, bondingRadiusB, distance2, minBondDistance2, bondTolerance) {
						  if (bondingRadiusA == 0 || bondingRadiusB == 0 || distance2 < minBondDistance2) return 0;
						  var maxAcceptable = bondingRadiusA + bondingRadiusB + bondTolerance;
						  var maxAcceptable2 = maxAcceptable * maxAcceptable;
						  return (distance2 > maxAcceptable2 ? 0 : 1);
					      }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "checkValencesAndBond", 
			    function (atomA, atomB, order, mad, bsBonds) {
				if (atomA.getCurrentBondCount () > 20 || atomB.getCurrentBondCount () > 20) {
				    if (!this.haveWarned) org.jmol.util.Logger.warn ("maximum auto bond count reached");
				    this.haveWarned = true;
				    return false;
				}var formalChargeA = atomA.getFormalCharge ();
				if (formalChargeA != 0) {
				    var formalChargeB = atomB.getFormalCharge ();
				    if ((formalChargeA < 0 && formalChargeB < 0) || (formalChargeA > 0 && formalChargeB > 0)) return false;
				}if (atomA.alternateLocationID != atomB.alternateLocationID && atomA.alternateLocationID != '\0' && atomB.alternateLocationID != '\0') return false;
				this.getOrAddBond (atomA, atomB, order, mad, bsBonds, 0, false);
				return true;
			    }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteAllBonds", 
			    function () {
				this.viewer.setShapeProperty (1, "reset", null);
				for (var i = this.bondCount; --i >= 0; ) {
				    this.bonds[i].deleteAtomReferences ();
				    this.bonds[i] = null;
				}
				this.bondCount = 0;
			    });
	Clazz.defineMethod (c$, "getDefaultMadFromOrder", 
			    function (order) {
				return (org.jmol.modelset.Bond.isHydrogen (order) ? 1 : (order & 32768) != 0 ? Clazz.doubleToInt (Math.floor (this.viewer.getStrutDefaultRadius () * 2000)) : this.defaultCovalentMad);
			    }, "~N");
	Clazz.defineMethod (c$, "deleteConnections", 
			    function (minDistance, maxDistance, order, bsA, bsB, isBonds, matchNull, minDistanceSquared, maxDistanceSquared) {
				var minDistanceIsFractionRadius = (minDistance < 0);
				var maxDistanceIsFractionRadius = (maxDistance < 0);
				var dAB = 0;
				var dABcalc = 0;
				if (minDistanceIsFractionRadius) minDistance = -minDistance;
				if (maxDistanceIsFractionRadius) maxDistance = -maxDistance;
				var bsDelete =  new org.jmol.util.BitSet ();
				var nDeleted = 0;
				var newOrder = order |= 131072;
				if (!matchNull && org.jmol.modelset.Bond.isHydrogen (order)) order = 30720;
				var bsBonds;
				if (isBonds) {
				    bsBonds = bsA;
				} else {
				    bsBonds =  new org.jmol.util.BitSet ();
				    for (var i = bsA.nextSetBit (0); i >= 0; i = bsA.nextSetBit (i + 1)) {
					var a = this.atoms[i];
					if (a.bonds != null) for (var j = a.bonds.length; --j >= 0; ) if (bsB.get (a.getBondedAtomIndex (j))) bsBonds.set (a.bonds[j].index);

				    }
				}for (var i = bsBonds.nextSetBit (0); i < this.bondCount && i >= 0; i = bsBonds.nextSetBit (i + 1)) {
				    var bond = this.bonds[i];
				    var atom1 = bond.atom1;
				    var atom2 = bond.atom2;
				    var distanceSquared = atom1.distanceSquared (atom2);
				    if (minDistanceIsFractionRadius || maxDistanceIsFractionRadius) {
					dAB = atom1.distance (atom2);
					dABcalc = atom1.getBondingRadiusFloat () + atom2.getBondingRadiusFloat ();
				    }if ((minDistanceIsFractionRadius ? dAB < dABcalc * minDistance : distanceSquared < minDistanceSquared) || (maxDistanceIsFractionRadius ? dAB > dABcalc * maxDistance : distanceSquared > maxDistanceSquared)) continue;
				    if (matchNull || newOrder == (bond.order & -257 | 131072) || (order & bond.order & 30720) != 0) {
					bsDelete.set (i);
					nDeleted++;
				    }}
				if (nDeleted > 0) this.deleteBonds (bsDelete, false);
				return [0, nDeleted];
			    }, "~N,~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,~N,~N");
	Clazz.defineMethod (c$, "deleteBonds", 
			    function (bsBond, isFullModel) {
				var iDst = bsBond.nextSetBit (0);
				if (iDst < 0) return;
				this.resetMolecules ();
				var modelIndexLast = -1;
				var n = bsBond.cardinality ();
				for (var iSrc = iDst; iSrc < this.bondCount; ++iSrc) {
				    var bond = this.bonds[iSrc];
				    if (n > 0 && bsBond.get (iSrc)) {
					n--;
					if (!isFullModel) {
					    var modelIndex = bond.atom1.modelIndex;
					    if (modelIndex != modelIndexLast) (this).models[modelIndexLast = modelIndex].resetBoundCount ();
					}bond.deleteAtomReferences ();
				    } else {
					this.setBond (iDst++, bond);
				    }}
				for (var i = this.bondCount; --i >= iDst; ) this.bonds[i] = null;

				this.bondCount = iDst;
				var sets = this.viewer.getShapeProperty (1, "sets");
				if (sets != null) for (var i = 0; i < sets.length; i++) org.jmol.util.BitSetUtil.deleteBits (sets[i], bsBond);

				org.jmol.util.BitSetUtil.deleteBits (this.bsAromatic, bsBond);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "resetAromatic", 
			    function () {
				for (var i = this.bondCount; --i >= 0; ) {
				    var bond = this.bonds[i];
				    if (bond.isAromatic ()) bond.setOrder (515);
				}
			    });
	Clazz.defineMethod (c$, "assignAromaticBonds", 
			    function () {
				this.assignAromaticBondsBs (true, null);
			    });
	Clazz.defineMethod (c$, "assignAromaticBondsBs", 
			    function (isUserCalculation, bsBonds) {
				if (!isUserCalculation) this.bsAromatic =  new org.jmol.util.BitSet ();
				this.bsAromaticSingle =  new org.jmol.util.BitSet ();
				this.bsAromaticDouble =  new org.jmol.util.BitSet ();
				var isAll = (bsBonds == null);
				var i0 = (isAll ? this.bondCount - 1 : bsBonds.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsBonds.nextSetBit (i + 1))) {
				    var bond = this.bonds[i];
				    if (this.bsAromatic.get (i)) bond.setOrder (515);
				    switch (bond.order & -131073) {
				    case 515:
					this.bsAromatic.set (i);
					break;
				    case 513:
					this.bsAromaticSingle.set (i);
					break;
				    case 514:
					this.bsAromaticDouble.set (i);
					break;
				    }
				}
				var bond;
				isAll = (bsBonds == null);
				i0 = (isAll ? this.bondCount - 1 : bsBonds.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsBonds.nextSetBit (i + 1))) {
				    bond = this.bonds[i];
				    if (!bond.is (515) || this.bsAromaticDouble.get (i) || this.bsAromaticSingle.get (i)) continue;
				    if (!this.assignAromaticDouble (bond)) this.assignAromaticSingle (bond);
				}
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsBonds.nextSetBit (i + 1))) {
				    bond = this.bonds[i];
				    if (this.bsAromaticDouble.get (i)) {
					if (!bond.is (514)) {
					    this.bsAromatic.set (i);
					    bond.setOrder (514);
					}} else if (this.bsAromaticSingle.get (i) || bond.isAromatic ()) {
					    if (!bond.is (513)) {
						this.bsAromatic.set (i);
						bond.setOrder (513);
					    }}}
				this.assignAromaticNandO (bsBonds);
				this.bsAromaticSingle = null;
				this.bsAromaticDouble = null;
			    }, "~B,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "assignAromaticDouble", 
			    ($fz = function (bond) {
				var bondIndex = bond.index;
				if (this.bsAromaticSingle.get (bondIndex)) return false;
				if (this.bsAromaticDouble.get (bondIndex)) return true;
				this.bsAromaticDouble.set (bondIndex);
				if (!this.assignAromaticSingleForAtom (bond.atom1, bondIndex) || !this.assignAromaticSingleForAtom (bond.atom2, bondIndex)) {
				    this.bsAromaticDouble.clear (bondIndex);
				    return false;
				}return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Bond");
	Clazz.defineMethod (c$, "assignAromaticSingle", 
			    ($fz = function (bond) {
				var bondIndex = bond.index;
				if (this.bsAromaticDouble.get (bondIndex)) return false;
				if (this.bsAromaticSingle.get (bondIndex)) return true;
				this.bsAromaticSingle.set (bondIndex);
				if (!this.assignAromaticDoubleForAtom (bond.atom1) || !this.assignAromaticDoubleForAtom (bond.atom2)) {
				    this.bsAromaticSingle.clear (bondIndex);
				    return false;
				}return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Bond");
	Clazz.defineMethod (c$, "assignAromaticSingleForAtom", 
			    ($fz = function (atom, notBondIndex) {
				var bonds = atom.bonds;
				if (bonds == null || this.assignAromaticSingleHetero (atom)) return false;
				for (var i = bonds.length; --i >= 0; ) {
				    var bond = bonds[i];
				    var bondIndex = bond.index;
				    if (bondIndex == notBondIndex || !bond.isAromatic () || this.bsAromaticSingle.get (bondIndex)) continue;
				    if (this.bsAromaticDouble.get (bondIndex) || !this.assignAromaticSingle (bond)) {
					return false;
				    }}
				return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,~N");
	Clazz.defineMethod (c$, "assignAromaticDoubleForAtom", 
			    ($fz = function (atom) {
				var bonds = atom.bonds;
				if (bonds == null) return false;
				var haveDouble = this.assignAromaticSingleHetero (atom);
				var lastBond = -1;
				for (var i = bonds.length; --i >= 0; ) {
				    if (this.bsAromaticDouble.get (bonds[i].index)) haveDouble = true;
				    if (bonds[i].isAromatic ()) lastBond = i;
				}
				for (var i = bonds.length; --i >= 0; ) {
				    var bond = bonds[i];
				    var bondIndex = bond.index;
				    if (!bond.isAromatic () || this.bsAromaticDouble.get (bondIndex) || this.bsAromaticSingle.get (bondIndex)) continue;
				    if (!haveDouble && this.assignAromaticDouble (bond)) haveDouble = true;
				    else if ((haveDouble || i < lastBond) && !this.assignAromaticSingle (bond)) {
					return false;
				    }}
				return haveDouble;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "assignAromaticSingleHetero", 
			    ($fz = function (atom) {
				var n = atom.getElementNumber ();
				switch (n) {
				case 6:
				case 7:
				case 8:
				case 16:
				    break;
				default:
				    return true;
				}
				var nAtoms = atom.getValence ();
				switch (n) {
				case 6:
				    return (nAtoms == 4);
				case 7:
				case 8:
				    return (nAtoms == 10 - n && atom.getFormalCharge () < 1);
				case 16:
				    return (nAtoms == 18 - n && atom.getFormalCharge () < 1);
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "assignAromaticNandO", 
			    ($fz = function (bsSelected) {
				var bond;
				var isAll = (bsSelected == null);
				var i0 = (isAll ? this.bondCount - 1 : bsSelected.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsSelected.nextSetBit (i + 1))) {
				    bond = this.bonds[i];
				    if (!bond.is (513)) continue;
				    var atom1;
				    var atom2 = bond.atom2;
				    var n1;
				    var n2 = atom2.getElementNumber ();
				    if (n2 == 7 || n2 == 8) {
					n1 = n2;
					atom1 = atom2;
					atom2 = bond.atom1;
					n2 = atom2.getElementNumber ();
				    } else {
					atom1 = bond.atom1;
					n1 = atom1.getElementNumber ();
				    }if (n1 != 7 && n1 != 8) continue;
				    var valence = atom1.getValence ();
				    if (valence < 0) continue;
				    var bondorder = atom1.getCovalentBondCount ();
				    var charge = atom1.getFormalCharge ();
				    switch (n1) {
				    case 7:
					if (valence == 3 && bondorder == 3 && charge < 1 && n2 == 6 && atom2.getValence () == 3) bond.setOrder (514);
					break;
				    case 8:
					if (valence == 1 && charge == 0 && (n2 == 14 || n2 == 16)) bond.setOrder (514);
					break;
				    }
				}
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomBitsMaybeDeleted", 
			    function (tokType, specInfo) {
				var bs;
				switch (tokType) {
				default:
				    return Clazz.superCall (this, org.jmol.modelset.BondCollection, "getAtomBitsMaybeDeleted", [tokType, specInfo]);
				case 1048585:
				    bs =  new org.jmol.util.BitSet ();
				    for (var i = this.bondCount; --i >= 0; ) if (this.bonds[i].isAromatic ()) {
					bs.set (this.bonds[i].atom1.index);
					bs.set (this.bonds[i].atom2.index);
				    }
				    return bs;
				case 1678770178:
				    bs =  new org.jmol.util.BitSet ();
				    var bsBonds = specInfo;
				    for (var i = bsBonds.nextSetBit (0); i >= 0; i = bsBonds.nextSetBit (i + 1)) {
					bs.set (this.bonds[i].atom1.index);
					bs.set (this.bonds[i].atom2.index);
				    }
				    return bs;
				}
			    }, "~N,~O");
	Clazz.defineMethod (c$, "setBondOrder", 
			    function (bondIndex, type) {
				var bondOrder = type.charCodeAt (0) - 48;
				var bond = this.bonds[bondIndex];
				switch (type) {
				case '0':
				case '1':
				case '2':
				case '3':
				    break;
				case 'p':
				case 'm':
				    bondOrder = org.jmol.util.JmolEdge.getBondOrderNumberFromOrder (bond.getCovalentOrder ()).charCodeAt (0) - 48 + (type == 'p' ? 1 : -1);
				    if (bondOrder > 3) bondOrder = 1;
				    else if (bondOrder < 0) bondOrder = 3;
				    break;
				default:
				    return null;
				}
				var bsAtoms =  new org.jmol.util.BitSet ();
				try {
				    if (bondOrder == 0) {
					var bs =  new org.jmol.util.BitSet ();
					bs.set (bond.index);
					bsAtoms.set (bond.getAtomIndex1 ());
					bsAtoms.set (bond.getAtomIndex2 ());
					this.deleteBonds (bs, false);
					return bsAtoms;
				    }bond.setOrder (bondOrder | 131072);
				    this.removeUnnecessaryBonds (bond.atom1, false);
				    this.removeUnnecessaryBonds (bond.atom2, false);
				    bsAtoms.set (bond.getAtomIndex1 ());
				    bsAtoms.set (bond.getAtomIndex2 ());
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.error ("Exception in seBondOrder: " + e.getMessage ());
				    } else {
					throw e;
				    }
				}
				return bsAtoms;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "removeUnnecessaryBonds", 
			    function (atom, deleteAtom) {
				var bs =  new org.jmol.util.BitSet ();
				var bsBonds =  new org.jmol.util.BitSet ();
				var bonds = atom.bonds;
				if (bonds == null) return;
				for (var i = 0; i < bonds.length; i++) if (bonds[i].isCovalent ()) {
				    var atom2 = bonds[i].getOtherAtom (atom);
				    if (atom2.getElementNumber () == 1) bs.set (bonds[i].getOtherAtom (atom).index);
				} else {
				    bsBonds.set (bonds[i].index);
				}
				if (bsBonds.nextSetBit (0) >= 0) this.deleteBonds (bsBonds, false);
				if (deleteAtom) bs.set (atom.index);
				if (bs.nextSetBit (0) >= 0) this.viewer.deleteAtoms (bs, false);
			    }, "org.jmol.modelset.Atom,~B");
	Clazz.defineMethod (c$, "displayBonds", 
			    function (bs, isDisplay) {
				if (!isDisplay) this.haveHiddenBonds = true;
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) if (i < this.bondCount && this.bonds[i].mad != 0) this.bonds[i].setShapeVisibility (isDisplay);

			    }, "org.jmol.modelset.Bond.BondSet,~B");
	Clazz.defineStatics (c$,
			     "BOND_GROWTH_INCREMENT", 250,
			     "MAX_BONDS_LENGTH_TO_CACHE", 5,
			     "MAX_NUM_TO_CACHE", 200);
    });
    // 
    //// org\jmol\modelset\ModelCollection.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.BondCollection", "java.util.ArrayList", "org.jmol.util.BitSet", "$.BoxInfo", "$.Point3f"], "org.jmol.modelset.ModelCollection", ["java.lang.Boolean", "$.Character", "$.Float", "java.util.Calendar", "$.Date", "$.Hashtable", "org.jmol.api.Interface", "org.jmol.bspt.Bspf", "org.jmol.constant.EnumPalette", "$.EnumVdw", "org.jmol.io.OutputStringBuilder", "$.XmlUtil", "org.jmol.modelset.Atom", "$.AtomIteratorWithinModel", "$.AtomIteratorWithinModelSet", "$.Bond", "$.HBond", "$.LabelToken", "org.jmol.util.ArrayUtil", "$.BitSetUtil", "$.Elements", "$.Escape", "$.JmolEdge", "$.JmolMolecule", "$.Logger", "$.Parser", "$.StringXBuilder", "$.TextFormat", "$.TriangleData", "$.Vector3f", "org.jmol.viewer.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bsSymmetry = null;
	    this.modelSetName = null;
	    this.models = null;
	    this.modelCount = 0;
	    this.unitCells = null;
	    this.modelNumbers = null;
	    this.modelFileNumbers = null;
	    this.modelNumbersForAtomLabel = null;
	    this.modelNames = null;
	    this.frameTitles = null;
	    this.elementsPresent = null;
	    this.isXYZ = false;
	    this.isPDB = false;
	    this.modelSetProperties = null;
	    this.modelSetAuxiliaryInfo = null;
	    this.someModelsHaveSymmetry = false;
	    this.someModelsHaveAromaticBonds = false;
	    this.someModelsHaveFractionalCoordinates = false;
	    this.ptTemp = null;
	    this.averageAtomPoint = null;
	    this.isBbcageDefault = false;
	    this.bboxModels = null;
	    this.bboxAtoms = null;
	    this.boxInfo = null;
	    this.stateScripts = null;
	    this.thisStateModel = 0;
	    this.trajectorySteps = null;
	    this.vibrationSteps = null;
	    this.selectedMolecules = null;
	    this.selectedMoleculeCount = 0;
	    this.showRebondTimes = true;
	    this.bsAll = null;
	    this.shapeManager = null;
	    this.proteinStructureTainted = false;
	    this.symTemp = null;
	    this.htPeaks = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "ModelCollection", org.jmol.modelset.BondCollection);
	Clazz.prepareFields (c$, function () {
	    this.models =  new Array (1);
	    this.modelNumbers =  Clazz.newIntArray (1, 0);
	    this.modelFileNumbers =  Clazz.newIntArray (1, 0);
	    this.modelNumbersForAtomLabel =  new Array (1);
	    this.modelNames =  new Array (1);
	    this.frameTitles =  new Array (1);
	    this.ptTemp =  new org.jmol.util.Point3f ();
	    this.averageAtomPoint =  new org.jmol.util.Point3f ();
	    this.boxInfo =  new org.jmol.util.BoxInfo ();
	    {
		this.boxInfo.addBoundBoxPoint (org.jmol.util.Point3f.new3 (-10, -10, -10));
		this.boxInfo.addBoundBoxPoint (org.jmol.util.Point3f.new3 (10, 10, 10));
	    }this.stateScripts =  new java.util.ArrayList ();
	    this.selectedMolecules =  new org.jmol.util.BitSet ();
	});
	Clazz.defineMethod (c$, "mergeModelArrays", 
			    function (mergeModelSet) {
				this.atoms = mergeModelSet.atoms;
				this.bonds = mergeModelSet.bonds;
				this.stateScripts = mergeModelSet.stateScripts;
				this.proteinStructureTainted = mergeModelSet.proteinStructureTainted;
				this.thisStateModel = -1;
				this.bsSymmetry = mergeModelSet.bsSymmetry;
				this.modelFileNumbers = mergeModelSet.modelFileNumbers;
				this.modelNumbersForAtomLabel = mergeModelSet.modelNumbersForAtomLabel;
				this.modelNames = mergeModelSet.modelNames;
				this.modelNumbers = mergeModelSet.modelNumbers;
				this.frameTitles = mergeModelSet.frameTitles;
				this.mergeAtomArrays (mergeModelSet);
			    }, "org.jmol.modelset.ModelSet");
	Clazz.defineMethod (c$, "releaseModelSet", 
			    function () {
				this.models = null;
				this.bsSymmetry = null;
				this.bsAll = null;
				this.unitCells = null;
				Clazz.superCall (this, org.jmol.modelset.ModelCollection, "releaseModelSet", []);
			    });
	Clazz.defineMethod (c$, "getModelSetName", 
			    function () {
				return this.modelSetName;
			    });
	Clazz.defineMethod (c$, "getModels", 
			    function () {
				return this.models;
			    });
	Clazz.defineMethod (c$, "getModelCount", 
			    function () {
				return this.modelCount;
			    });
	Clazz.defineMethod (c$, "getCellInfos", 
			    function () {
				return this.unitCells;
			    });
	Clazz.defineMethod (c$, "haveUnitCells", 
			    function () {
				if (this.unitCells != null) return true;
				for (var i = this.modelCount; --i >= 0; ) if (this.models[i].unitCell != null) return true;

				return false;
			    });
	Clazz.defineMethod (c$, "getUnitCell", 
			    function (modelIndex) {
				if (modelIndex < 0 || modelIndex >= this.modelCount) return null;
				if (this.models[modelIndex].unitCell != null) return this.models[modelIndex].unitCell;
				return (this.unitCells == null || modelIndex >= this.unitCells.length || !this.unitCells[modelIndex].haveUnitCell () ? null : this.unitCells[modelIndex]);
			    }, "~N");
	Clazz.defineMethod (c$, "setUnitCell", 
			    function (modelIndex, unitCell) {
				if (modelIndex < 0 || modelIndex >= this.modelCount) return;
				this.models[modelIndex].unitCell = unitCell;
			    }, "~N,org.jmol.api.SymmetryInterface");
	Clazz.defineMethod (c$, "getPlaneIntersection", 
			    function (type, plane, scale, flags, modelIndex) {
				var pts = null;
				switch (type) {
				case 1614417948:
				    var uc = this.getUnitCell (modelIndex);
				    if (uc == null) return null;
				    pts = uc.getCanonicalCopy (scale);
				    break;
				case 1679429641:
				    pts = this.boxInfo.getCanonicalCopy (scale);
				    break;
				}
				var v =  new java.util.ArrayList ();
				v.add (pts);
				return org.jmol.util.TriangleData.intersectPlane (plane, v, flags);
			    }, "~N,org.jmol.util.Point4f,~N,~N,~N");
	Clazz.defineMethod (c$, "getModelName", 
			    function (modelIndex) {
				return this.modelCount < 1 ? "" : modelIndex >= 0 ? this.modelNames[modelIndex] : this.modelNumbersForAtomLabel[-1 - modelIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getModelTitle", 
			    function (modelIndex) {
				return this.getModelAuxiliaryInfoValue (modelIndex, "title");
			    }, "~N");
	Clazz.defineMethod (c$, "getModelFileName", 
			    function (modelIndex) {
				return this.getModelAuxiliaryInfoValue (modelIndex, "fileName");
			    }, "~N");
	Clazz.defineMethod (c$, "setFrameTitle", 
			    function (bsFrames, title) {
				if (Clazz.instanceOf (title, String)) {
				    for (var i = bsFrames.nextSetBit (0); i >= 0; i = bsFrames.nextSetBit (i + 1)) this.frameTitles[i] = title;

				} else {
				    var list = title;
				    for (var i = bsFrames.nextSetBit (0), n = 0; i >= 0; i = bsFrames.nextSetBit (i + 1)) if (n < list.length) this.frameTitles[i] = list[n++];

				}}, "org.jmol.util.BitSet,~O");
	Clazz.defineMethod (c$, "getFrameTitle", 
			    function (modelIndex) {
				return (modelIndex >= 0 && modelIndex < this.modelCount ? this.frameTitles[modelIndex] : "");
			    }, "~N");
	Clazz.defineMethod (c$, "getModelNumberForAtomLabel", 
			    function (modelIndex) {
				return this.modelNumbersForAtomLabel[modelIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "calculatePolymers", 
			    function (groups, groupCount, baseGroupIndex, modelsExcluded) {
				if (!this.isPDB) return;
				for (var i = 0; i < this.modelCount; i++) if ((modelsExcluded == null || !modelsExcluded.get (i)) && this.models[i].isBioModel) {
				    this.models[i].calculatePolymers (groups, groupCount, baseGroupIndex, modelsExcluded);
				    return;
				}
			    }, "~A,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getGroups", 
			    function () {
				var n = 0;
				for (var i = 0; i < this.modelCount; i++) n += this.models[i].getGroupCount ();

				var groups =  new Array (n);
				for (var i = 0, iGroup = 0; i < this.modelCount; i++) for (var j = 0; j < this.models[i].chainCount; j++) for (var k = 0; k < this.models[i].chains[j].groupCount; k++) {
				    groups[iGroup] = this.models[i].chains[j].groups[k];
				    groups[iGroup].groupIndex = iGroup;
				    iGroup++;
				}


				return groups;
			    });
	Clazz.defineMethod (c$, "getNotionalUnitcell", 
			    function () {
				var c = this.getUnitCell (0);
				return (c == null ? null : c.getNotionalUnitCell ());
			    });
	Clazz.defineMethod (c$, "setCrystallographicDefaults", 
			    function () {
				return !this.isPDB && this.someModelsHaveSymmetry && this.someModelsHaveFractionalCoordinates;
			    });
	Clazz.defineMethod (c$, "getAverageAtomPoint", 
			    function () {
				return this.averageAtomPoint;
			    });
	Clazz.defineMethod (c$, "getBoundBoxCenter", 
			    function (modelIndex) {
				if (this.isJmolDataFrameForModel (modelIndex)) return  new org.jmol.util.Point3f ();
				return this.boxInfo.getBoundBoxCenter ();
			    }, "~N");
	Clazz.defineMethod (c$, "getBoundBoxCornerVector", 
			    function () {
				return this.boxInfo.getBoundBoxCornerVector ();
			    });
	Clazz.defineMethod (c$, "getBboxVertices", 
			    function () {
				return this.boxInfo.getBboxVertices ();
			    });
	Clazz.defineMethod (c$, "getBoundBoxInfo", 
			    function () {
				return this.boxInfo.getBoundBoxInfo ();
			    });
	Clazz.defineMethod (c$, "getBoundBoxModels", 
			    function () {
				return this.bboxModels;
			    });
	Clazz.defineMethod (c$, "setBoundBox", 
			    function (pt1, pt2, byCorner, scale) {
				this.isBbcageDefault = false;
				this.bboxModels = null;
				this.bboxAtoms = null;
				this.boxInfo.setBoundBox (pt1, pt2, byCorner, scale);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~B,~N");
	Clazz.defineMethod (c$, "getBoundBoxCommand", 
			    function (withOptions) {
				if (!withOptions && this.bboxAtoms != null) return "boundbox " + org.jmol.util.Escape.escape (this.bboxAtoms);
				this.ptTemp.setT (this.boxInfo.getBoundBoxCenter ());
				var bbVector = this.boxInfo.getBoundBoxCornerVector ();
				var s = (withOptions ? "boundbox " + org.jmol.util.Escape.escapePt (this.ptTemp) + " " + org.jmol.util.Escape.escapePt (bbVector) + "\n#or\n" : "");
				this.ptTemp.sub (bbVector);
				s += "boundbox corners " + org.jmol.util.Escape.escapePt (this.ptTemp) + " ";
				this.ptTemp.scaleAdd2 (2, bbVector, this.ptTemp);
				var v = Math.abs (8 * bbVector.x * bbVector.y * bbVector.z);
				s += org.jmol.util.Escape.escapePt (this.ptTemp) + " # volume = " + v;
				return s;
			    }, "~B");
	Clazz.defineMethod (c$, "getDefaultVdwType", 
			    function (modelIndex) {
				return (!this.models[modelIndex].isBioModel ? org.jmol.constant.EnumVdw.AUTO_BABEL : this.models[modelIndex].hydrogenCount == 0 ? org.jmol.constant.EnumVdw.AUTO_JMOL : org.jmol.constant.EnumVdw.AUTO_BABEL);
			    }, "~N");
	Clazz.defineMethod (c$, "setRotationRadius", 
			    function (modelIndex, angstroms) {
				if (this.isJmolDataFrameForModel (modelIndex)) {
				    this.models[modelIndex].defaultRotationRadius = angstroms;
				    return false;
				}return true;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "calcRotationRadius", 
			    function (modelIndex, center) {
				if (this.isJmolDataFrameForModel (modelIndex)) {
				    var r = this.models[modelIndex].defaultRotationRadius;
				    return (r == 0 ? 10 : r);
				}var maxRadius = 0;
				for (var i = this.atomCount; --i >= 0; ) {
				    if (this.isJmolDataFrameForAtom (this.atoms[i])) {
					modelIndex = this.atoms[i].modelIndex;
					while (i >= 0 && this.atoms[i].modelIndex == modelIndex) i--;

					continue;
				    }var atom = this.atoms[i];
				    var distAtom = center.distance (atom);
				    var outerVdw = distAtom + this.getRadiusVdwJmol (atom);
				    if (outerVdw > maxRadius) maxRadius = outerVdw;
				}
				return (maxRadius == 0 ? 10 : maxRadius);
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "calcBoundBoxDimensions", 
			    function (bs, scale) {
				if (bs != null && bs.nextSetBit (0) < 0) bs = null;
				if (bs == null && this.isBbcageDefault || this.atomCount < 2) return;
				this.bboxModels = this.getModelBitSet (this.bboxAtoms = org.jmol.util.BitSetUtil.copy (bs), false);
				if (this.calcAtomsMinMax (bs, this.boxInfo) == this.atomCount) this.isBbcageDefault = true;
				if (bs == null) {
				    this.averageAtomPoint.setT (this.getAtomSetCenter (null));
				    if (this.unitCells != null) this.calcUnitCellMinMax ();
				}this.boxInfo.setBbcage (scale);
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getBoxInfo", 
			    function (bs, scale) {
				if (bs == null) return this.boxInfo;
				var bi =  new org.jmol.util.BoxInfo ();
				this.calcAtomsMinMax (bs, bi);
				bi.setBbcage (scale);
				return bi;
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "calcAtomsMinMax", 
			    function (bs, boxInfo) {
				boxInfo.reset ();
				var nAtoms = 0;
				var isAll = (bs == null);
				var i0 = (isAll ? this.atomCount - 1 : bs.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bs.nextSetBit (i + 1))) {
				    nAtoms++;
				    if (!this.isJmolDataFrameForAtom (this.atoms[i])) boxInfo.addBoundBoxPoint (this.atoms[i]);
				}
				return nAtoms;
			    }, "org.jmol.util.BitSet,org.jmol.util.BoxInfo");
	Clazz.defineMethod (c$, "calcUnitCellMinMax", 
			    ($fz = function () {
				for (var i = 0; i < this.modelCount; i++) {
				    if (!this.unitCells[i].getCoordinatesAreFractional ()) continue;
				    var vertices = this.unitCells[i].getUnitCellVertices ();
				    for (var j = 0; j < 8; j++) this.boxInfo.addBoundBoxPoint (vertices[j]);

				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "calcRotationRadiusBs", 
			    function (bs) {
				var center = this.getAtomSetCenter (bs);
				var maxRadius = 0;
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    var atom = this.atoms[i];
				    var distAtom = center.distance (atom);
				    var outerVdw = distAtom + this.getRadiusVdwJmol (atom);
				    if (outerVdw > maxRadius) maxRadius = outerVdw;
				}
				return (maxRadius == 0 ? 10 : maxRadius);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getCenterAndPoints", 
			    function (vAtomSets, addCenters) {
				var bsAtoms1;
				var bsAtoms2;
				var n = (addCenters ? 1 : 0);
				for (var ii = vAtomSets.size (); --ii >= 0; ) {
				    var bss = vAtomSets.get (ii);
				    bsAtoms1 = bss[0];
				    bsAtoms2 = bss[1];
				    n += Math.min (bsAtoms1.cardinality (), bsAtoms2.cardinality ());
				}
				var points =  Clazz.newArray (2, n, null);
				if (addCenters) {
				    points[0][0] =  new org.jmol.util.Point3f ();
				    points[1][0] =  new org.jmol.util.Point3f ();
				}for (var ii = vAtomSets.size (); --ii >= 0; ) {
				    var bss = vAtomSets.get (ii);
				    bsAtoms1 = bss[0];
				    bsAtoms2 = bss[1];
				    for (var i = bsAtoms1.nextSetBit (0), j = bsAtoms2.nextSetBit (0); i >= 0 && j >= 0; i = bsAtoms1.nextSetBit (i + 1), j = bsAtoms2.nextSetBit (j + 1)) {
					points[0][--n] = this.atoms[i];
					points[1][n] = this.atoms[j];
					if (addCenters) {
					    points[0][0].add (this.atoms[i]);
					    points[1][0].add (this.atoms[j]);
					}}
				}
				if (addCenters) {
				    points[0][0].scale (1 / (points[0].length - 1));
				    points[1][0].scale (1 / (points[1].length - 1));
				}return points;
			    }, "java.util.List,~B");
	Clazz.defineMethod (c$, "getAtomSetCenter", 
			    function (bs) {
				var ptCenter = org.jmol.util.Point3f.new3 (0, 0, 0);
				var nPoints = 0;
				if (bs != null) for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (!this.isJmolDataFrameForAtom (this.atoms[i])) {
					nPoints++;
					ptCenter.add (this.atoms[i]);
				    }}
				if (nPoints > 0) ptCenter.scale (1.0 / nPoints);
				return ptCenter;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setAtomProperty", 
			    function (bs, tok, iValue, fValue, sValue, values, list) {
				Clazz.superCall (this, org.jmol.modelset.ModelCollection, "setAtomProperty", [bs, tok, iValue, fValue, sValue, values, list]);
				if ((tok == 1095763988 || tok == 1632634889) && this.viewer.getSmartAromatic ()) this.assignAromaticBonds ();
			    }, "org.jmol.util.BitSet,~N,~N,~N,~S,~A,~A");
	Clazz.defineMethod (c$, "addStateScript", 
			    function (script1, bsBonds, bsAtoms1, bsAtoms2, script2, addFrameNumber, postDefinitions) {
				var iModel = this.viewer.getCurrentModelIndex ();
				if (addFrameNumber) {
				    if (this.thisStateModel != iModel) script1 = "frame " + (iModel < 0 ? "all #" + iModel : this.getModelNumberDotted (iModel)) + ";\n  " + script1;
				    this.thisStateModel = iModel;
				} else {
				    this.thisStateModel = -1;
				}var stateScript =  new org.jmol.modelset.ModelCollection.StateScript (this.thisStateModel, script1, bsBonds, bsAtoms1, bsAtoms2, script2, postDefinitions);
				if (stateScript.isValid ()) {
				    this.stateScripts.add (stateScript);
				}return stateScript;
			    }, "~S,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~S,~B,~B");
	Clazz.defineMethod (c$, "calculateStructuresAllExcept", 
			    function (alreadyDefined, asDSSP, doReport, dsspIgnoreHydrogen, setStructure, includeAlpha) {
				this.freezeModels ();
				var ret = "";
				var bsModels = org.jmol.util.BitSetUtil.copyInvert (alreadyDefined, this.modelCount);
				if (setStructure) this.setDefaultStructure (bsModels);
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) {
				    ret += this.models[i].calculateStructures (asDSSP, doReport, dsspIgnoreHydrogen, setStructure, includeAlpha);
				}
				if (setStructure) {
				    this.setStructureIndexes ();
				}return ret;
			    }, "org.jmol.util.BitSet,~B,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "setDefaultStructure", 
			    function (bsModels) {
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) if (this.models[i].isBioModel && this.models[i].defaultStructure == null) this.models[i].defaultStructure = this.getProteinStructureState (this.models[i].bsAtoms, false, false, 0);

			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setProteinType", 
			    function (bs, type) {
				var monomerIndexCurrent = -1;
				var iLast = -1;
				var bsModels = this.getModelBitSet (bs, false);
				this.setDefaultStructure (bsModels);
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (iLast != i - 1) monomerIndexCurrent = -1;
				    monomerIndexCurrent = this.atoms[i].group.setProteinStructureType (type, monomerIndexCurrent);
				    var modelIndex = this.atoms[i].modelIndex;
				    this.proteinStructureTainted = this.models[modelIndex].structureTainted = true;
				    iLast = i = this.atoms[i].group.lastAtomIndex;
				}
				var lastStrucNo =  Clazz.newIntArray (this.modelCount, 0);
				for (var i = 0; i < this.atomCount; ) {
				    var modelIndex = this.atoms[i].modelIndex;
				    if (!bsModels.get (modelIndex)) {
					i = this.models[modelIndex].firstAtomIndex + this.models[modelIndex].atomCount;
					continue;
				    }iLast = this.atoms[i].getStrucNo ();
				    if (iLast < 1000 && iLast > lastStrucNo[modelIndex]) lastStrucNo[modelIndex] = iLast;
				    i = this.atoms[i].group.lastAtomIndex + 1;
				}
				for (var i = 0; i < this.atomCount; ) {
				    var modelIndex = this.atoms[i].modelIndex;
				    if (!bsModels.get (modelIndex)) {
					i = this.models[modelIndex].firstAtomIndex + this.models[modelIndex].atomCount;
					continue;
				    }if (this.atoms[i].getStrucNo () > 1000) this.atoms[i].group.setStrucNo (++lastStrucNo[modelIndex]);
				    i = this.atoms[i].group.lastAtomIndex + 1;
				}
			    }, "org.jmol.util.BitSet,org.jmol.constant.EnumStructure");
	Clazz.defineMethod (c$, "freezeModels", 
			    function () {
				for (var iModel = this.modelCount; --iModel >= 0; ) this.models[iModel].freeze ();

			    });
	Clazz.defineMethod (c$, "getStructureList", 
			    function () {
				return this.viewer.getStructureList ();
			    });
	Clazz.defineMethod (c$, "setStructureList", 
			    function (structureList) {
				for (var iModel = this.modelCount; --iModel >= 0; ) this.models[iModel].setStructureList (structureList);

			    }, "java.util.Map");
	Clazz.defineMethod (c$, "setConformation", 
			    function (bsAtoms) {
				var bsModels = this.getModelBitSet (bsAtoms, false);
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) this.models[i].setConformation (bsAtoms);

				return bsAtoms;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getConformation", 
			    function (modelIndex, conformationIndex, doSet) {
				var bs =  new org.jmol.util.BitSet ();
				for (var i = this.modelCount; --i >= 0; ) if (i == modelIndex || modelIndex < 0) {
				    var altLocs = this.getAltLocListInModel (i);
				    var nAltLocs = this.getAltLocCountInModel (i);
				    if (conformationIndex > 0 && conformationIndex >= nAltLocs) continue;
				    var bsConformation = this.viewer.getModelUndeletedAtomsBitSet (i);
				    if (conformationIndex >= 0) {
					if (!this.models[i].getPdbConformation (bsConformation, conformationIndex)) for (var c = nAltLocs; --c >= 0; ) if (c != conformationIndex) bsConformation.andNot (this.getAtomBitsMaybeDeleted (1048607, altLocs.substring (c, c + 1)));

				    }if (bsConformation.nextSetBit (0) >= 0) {
					bs.or (bsConformation);
					if (doSet) this.models[i].setConformation (bsConformation);
				    }}
				return bs;
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "getHeteroList", 
			    function (modelIndex) {
				var htFull =  new java.util.Hashtable ();
				var ok = false;
				for (var i = this.modelCount; --i >= 0; ) if (modelIndex < 0 || i == modelIndex) {
				    var ht = this.getModelAuxiliaryInfoValue (i, "hetNames");
				    if (ht == null) continue;
				    ok = true;
				    for (var entry, $entry = ht.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
					var key = entry.getKey ();
					htFull.put (key, entry.getValue ());
				    }
				}
				return (ok ? htFull : this.getModelSetAuxiliaryInfoValue ("hetNames"));
			    }, "~N");
	Clazz.defineMethod (c$, "getModelSetProperties", 
			    function () {
				return this.modelSetProperties;
			    });
	Clazz.defineMethod (c$, "getModelSetAuxiliaryInfo", 
			    function () {
				return this.modelSetAuxiliaryInfo;
			    });
	Clazz.defineMethod (c$, "getModelSetProperty", 
			    function (propertyName) {
				return (this.modelSetProperties == null ? null : this.modelSetProperties.getProperty (propertyName));
			    }, "~S");
	Clazz.defineMethod (c$, "getModelSetAuxiliaryInfoValue", 
			    function (keyName) {
				return (this.modelSetAuxiliaryInfo == null ? null : this.modelSetAuxiliaryInfo.get (keyName));
			    }, "~S");
	Clazz.defineMethod (c$, "getModelSetAuxiliaryInfoBoolean", 
			    function (keyName) {
				var info = this.modelSetAuxiliaryInfo;
				return (info != null && info.containsKey (keyName) && (info.get (keyName)).booleanValue ());
			    }, "~S");
	Clazz.defineMethod (c$, "getMergeTrajectoryCount", 
			    function (isTrajectory) {
				if (this.trajectorySteps == null) {
				    if (!isTrajectory) return 0;
				    this.trajectorySteps =  new java.util.ArrayList ();
				}for (var i = this.trajectorySteps.size (); i < this.modelCount; i++) this.trajectorySteps.add (null);

				return this.modelCount;
			    }, "~B");
	Clazz.defineMethod (c$, "getTrajectoryIndex", 
			    function (modelIndex) {
				return this.models[modelIndex].trajectoryBaseIndex;
			    }, "~N");
	Clazz.defineMethod (c$, "isTrajectory", 
			    function (modelIndex) {
				return this.models[modelIndex].isTrajectory;
			    }, "~N");
	Clazz.defineMethod (c$, "isTrajectoryMeasurement", 
			    function (countPlusIndices) {
				if (countPlusIndices == null) return false;
				var count = countPlusIndices[0];
				var atomIndex;
				for (var i = 1; i <= count; i++) if ((atomIndex = countPlusIndices[i]) >= 0 && this.models[this.atoms[atomIndex].modelIndex].isTrajectory) return true;

				return false;
			    }, "~A");
	Clazz.defineMethod (c$, "getModelBitSet", 
			    function (atomList, allTrajectories) {
				var bs =  new org.jmol.util.BitSet ();
				var modelIndex = 0;
				var isAll = (atomList == null);
				var i0 = (isAll ? 0 : atomList.nextSetBit (0));
				for (var i = i0; i >= 0 && i < this.atomCount; i = (isAll ? i + 1 : atomList.nextSetBit (i + 1))) {
				    bs.set (modelIndex = this.atoms[i].modelIndex);
				    if (allTrajectories) {
					var iBase = this.models[modelIndex].trajectoryBaseIndex;
					for (var j = 0; j < this.modelCount; j++) if (this.models[j].trajectoryBaseIndex == iBase) bs.set (j);

				    }i = this.models[modelIndex].firstAtomIndex + this.models[modelIndex].atomCount - 1;
				}
				return bs;
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "getIterativeModels", 
			    function (allowJmolData) {
				var bs =  new org.jmol.util.BitSet ();
				for (var i = 0; i < this.modelCount; i++) {
				    if (!allowJmolData && this.isJmolDataFrameForModel (i)) continue;
				    if (this.models[i].trajectoryBaseIndex == i) bs.set (i);
				}
				return bs;
			    }, "~B");
	Clazz.defineMethod (c$, "isTrajectorySubFrame", 
			    function (i) {
				return (this.models[i].isTrajectory && this.models[i].trajectoryBaseIndex != i);
			    }, "~N");
	Clazz.defineMethod (c$, "selectDisplayedTrajectories", 
			    function (bs) {
				for (var i = 0; i < this.modelCount; i++) {
				    if (this.models[i].isTrajectory && this.atoms[this.models[i].firstAtomIndex].modelIndex != i) bs.clear (i);
				}
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "fillAtomData", 
			    function (atomData, mode) {
				if ((mode & 4) != 0) {
				    this.getMolecules ();
				    atomData.bsMolecules =  new Array (this.molecules.length);
				    atomData.atomMolecule =  Clazz.newIntArray (this.atomCount, 0);
				    var bs;
				    for (var i = 0; i < this.molecules.length; i++) {
					bs = atomData.bsMolecules[i] = this.molecules[i].atomList;
					for (var iAtom = bs.nextSetBit (0); iAtom >= 0; iAtom = bs.nextSetBit (iAtom + 1)) atomData.atomMolecule[iAtom] = i;

				    }
				}if ((mode & 8) != 0) {
				    var nH =  Clazz.newIntArray (1, 0);
				    atomData.hAtomRadius = this.viewer.getVanderwaalsMar (1) / 1000;
				    atomData.hAtoms = this.calculateHydrogens (atomData.bsSelected, nH, false, true, null);
				    atomData.hydrogenAtomCount = nH[0];
				    return;
				}if (atomData.modelIndex < 0) atomData.firstAtomIndex = (atomData.bsSelected == null ? 0 : Math.max (0, atomData.bsSelected.nextSetBit (0)));
				else atomData.firstAtomIndex = this.models[atomData.modelIndex].firstAtomIndex;
				atomData.lastModelIndex = atomData.firstModelIndex = (this.atomCount == 0 ? 0 : this.atoms[atomData.firstAtomIndex].modelIndex);
				atomData.modelName = this.getModelNumberDotted (atomData.firstModelIndex);
				Clazz.superCall (this, org.jmol.modelset.ModelCollection, "fillAtomData", [atomData, mode]);
			    }, "org.jmol.atomdata.AtomData,~N");
	Clazz.defineMethod (c$, "getModelNumberDotted", 
			    function (modelIndex) {
				return (this.modelCount < 1 || modelIndex >= this.modelCount || modelIndex < 0 ? "" : org.jmol.util.Escape.escapeModelFileNumber (this.modelFileNumbers[modelIndex]));
			    }, "~N");
	Clazz.defineMethod (c$, "getModelNumber", 
			    function (modelIndex) {
				if (modelIndex == 2147483647) modelIndex = this.modelCount - 1;
				return this.modelNumbers[modelIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getModelFileNumber", 
			    function (modelIndex) {
				return this.modelFileNumbers[modelIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getModelProperties", 
			    function (modelIndex) {
				return this.models[modelIndex].properties;
			    }, "~N");
	Clazz.defineMethod (c$, "getModelProperty", 
			    function (modelIndex, property) {
				var props = this.models[modelIndex].properties;
				return props == null ? null : props.getProperty (property);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getModelAuxiliaryInfo", 
			    function (modelIndex) {
				return (modelIndex < 0 ? null : this.models[modelIndex].auxiliaryInfo);
			    }, "~N");
	Clazz.defineMethod (c$, "setModelAuxiliaryInfo", 
			    function (modelIndex, key, value) {
				this.models[modelIndex].auxiliaryInfo.put (key, value);
			    }, "~N,~O,~O");
	Clazz.defineMethod (c$, "getModelAuxiliaryInfoValue", 
			    function (modelIndex, key) {
				if (modelIndex < 0) {
				    return null;
				}return this.models[modelIndex].auxiliaryInfo.get (key);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getModelAuxiliaryInfoBoolean", 
			    function (modelIndex, keyName) {
				var info = this.models[modelIndex].auxiliaryInfo;
				return (info != null && info.containsKey (keyName) && (info.get (keyName)).booleanValue ());
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getModelAuxiliaryInfoInt", 
			    function (modelIndex, keyName) {
				var info = this.models[modelIndex].auxiliaryInfo;
				if (info != null && info.containsKey (keyName)) {
				    return (info.get (keyName)).intValue ();
				}return -2147483648;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getModelAtomProperty", 
			    function (atom, text) {
				var data = this.getModelAuxiliaryInfoValue (atom.modelIndex, text);
				if (!(Clazz.instanceOf (data, Array))) return "";
				var sdata = data;
				var iatom = atom.index - this.models[atom.modelIndex].firstAtomIndex;
				return (iatom < sdata.length ? sdata[iatom].toString () : "");
			    }, "org.jmol.modelset.Atom,~S");
	Clazz.defineMethod (c$, "getInsertionCountInModel", 
			    function (modelIndex) {
				return this.models[modelIndex].nInsertions;
			    }, "~N");
	Clazz.defineMethod (c$, "getModelFileType", 
			    function (modelIndex) {
				return this.getModelAuxiliaryInfoValue (modelIndex, "fileType");
			    }, "~N");
	c$.modelFileNumberFromFloat = Clazz.defineMethod (c$, "modelFileNumberFromFloat", 
							  function (fDotM) {
							      var file = Clazz.doubleToInt (Math.floor (fDotM));
							      var model = Clazz.doubleToInt (Math.floor ((fDotM - file + 0.00001) * 10000));
							      while (model != 0 && model % 10 == 0) model /= 10;

							      return file * 1000000 + model;
							  }, "~N");
	Clazz.defineMethod (c$, "getAltLocCountInModel", 
			    function (modelIndex) {
				return this.models[modelIndex].nAltLocs;
			    }, "~N");
	Clazz.defineMethod (c$, "getChainCount", 
			    function (addWater) {
				var chainCount = 0;
				for (var i = this.modelCount; --i >= 0; ) chainCount += this.models[i].getChainCount (addWater);

				return chainCount;
			    }, "~B");
	Clazz.defineMethod (c$, "getBioPolymerCount", 
			    function () {
				var polymerCount = 0;
				for (var i = this.modelCount; --i >= 0; ) if (!this.isTrajectorySubFrame (i)) polymerCount += this.models[i].getBioPolymerCount ();

				return polymerCount;
			    });
	Clazz.defineMethod (c$, "getBioPolymerCountInModel", 
			    function (modelIndex) {
				return (modelIndex < 0 ? this.getBioPolymerCount () : this.isTrajectorySubFrame (modelIndex) ? 0 : this.models[modelIndex].getBioPolymerCount ());
			    }, "~N");
	Clazz.defineMethod (c$, "getPolymerPointsAndVectors", 
			    function (bs, vList) {
				var isTraceAlpha = this.viewer.getTraceAlpha ();
				var sheetSmoothing = this.viewer.getSheetSmoothing ();
				for (var i = 0; i < this.modelCount; ++i) this.models[i].getPolymerPointsAndVectors (bs, vList, isTraceAlpha, sheetSmoothing);

			    }, "org.jmol.util.BitSet,java.util.List");
	Clazz.defineMethod (c$, "recalculateLeadMidpointsAndWingVectors", 
			    function (modelIndex) {
				if (modelIndex < 0) {
				    for (var i = 0; i < this.modelCount; i++) this.recalculateLeadMidpointsAndWingVectors (i);

				    return;
				}this.models[modelIndex].recalculateLeadMidpointsAndWingVectors ();
			    }, "~N");
	Clazz.defineMethod (c$, "getPolymerLeadMidPoints", 
			    function (iModel, iPolymer) {
				return this.models[iModel].getPolymerLeadMidPoints (iPolymer);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getChainCountInModel", 
			    function (modelIndex, countWater) {
				if (modelIndex < 0) return this.getChainCount (countWater);
				return this.models[modelIndex].getChainCount (countWater);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getGroupCount", 
			    function () {
				var groupCount = 0;
				for (var i = this.modelCount; --i >= 0; ) groupCount += this.models[i].getGroupCount ();

				return groupCount;
			    });
	Clazz.defineMethod (c$, "getGroupCountInModel", 
			    function (modelIndex) {
				if (modelIndex < 0) return this.getGroupCount ();
				return this.models[modelIndex].getGroupCount ();
			    }, "~N");
	Clazz.defineMethod (c$, "calcSelectedGroupsCount", 
			    function (bsSelected) {
				for (var i = this.modelCount; --i >= 0; ) this.models[i].calcSelectedGroupsCount (bsSelected);

			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calcSelectedMonomersCount", 
			    function (bsSelected) {
				for (var i = this.modelCount; --i >= 0; ) this.models[i].calcSelectedMonomersCount (bsSelected);

			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calcRasmolHydrogenBonds", 
			    function (bsA, bsB, vHBonds, nucleicOnly, nMax, dsspIgnoreHydrogens, bsHBonds) {
				var isSame = (bsB == null || bsA.equals (bsB));
				for (var i = this.modelCount; --i >= 0; ) if (this.models[i].isBioModel && this.models[i].trajectoryBaseIndex == i) {
				    if (vHBonds == null) {
					this.models[i].clearRasmolHydrogenBonds (bsA);
					if (!isSame) this.models[i].clearRasmolHydrogenBonds (bsB);
				    }this.models[i].getRasmolHydrogenBonds (bsA, bsB, vHBonds, nucleicOnly, nMax, dsspIgnoreHydrogens, bsHBonds);
				}
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,java.util.List,~B,~N,~B,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calculateStraightness", 
			    function () {
				if (this.getHaveStraightness ()) return;
				var ctype = 'S';
				var qtype = this.viewer.getQuaternionFrame ();
				var mStep = this.viewer.getHelixStep ();
				for (var i = this.modelCount; --i >= 0; ) this.models[i].calculateStraightness (this.viewer, ctype, qtype, mStep);

				this.setHaveStraightness (true);
			    });
	Clazz.defineMethod (c$, "getAtomGroupQuaternions", 
			    function (bsAtoms, nMax, qtype) {
				var n = 0;
				var v =  new java.util.ArrayList ();
				for (var i = bsAtoms.nextSetBit (0); i >= 0 && n < nMax; i = bsAtoms.nextSetBit (i + 1)) {
				    var g = this.atoms[i].group;
				    var q = g.getQuaternion (qtype);
				    if (q == null) {
					if (g.seqcode == -2147483648) q = g.getQuaternionFrame (this.atoms);
					if (q == null) continue;
				    }n++;
				    v.add (q);
				    i = g.lastAtomIndex;
				}
				return v.toArray ( new Array (v.size ()));
			    }, "org.jmol.util.BitSet,~N,~S");
	Clazz.defineMethod (c$, "getPdbAtomData", 
			    function (bs, sb) {
				if (this.atomCount == 0 || bs.nextSetBit (0) < 0) return "";
				if (sb == null) sb =  new org.jmol.io.OutputStringBuilder (null);
				var iModel = this.atoms[bs.nextSetBit (0)].modelIndex;
				var iModelLast = -1;
				var isPQR = "PQR".equals (sb.type);
				var occTemp = "%6.2Q%6.2b          ";
				if (isPQR) {
				    occTemp = "%8.4P%7.4V       ";
				    var charge = 0;
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) charge += this.atoms[i].getPartialCharge ();

				    sb.append ("REMARK   1 PQR file generated by Jmol " + org.jmol.viewer.Viewer.getJmolVersion ()).append ("\nREMARK   1 " + "created " + ( new java.util.Date ())).append ("\nREMARK   1 Forcefield Used: unknown\nREMARK   1").append ("\nREMARK   5").append ("\nREMARK   6 Total charge on this protein: " + charge + " e\nREMARK   6\n");
				}var lastAtomIndex = bs.length () - 1;
				var showModels = (iModel != this.atoms[lastAtomIndex].modelIndex);
				var sbCONECT = (showModels ? null :  new org.jmol.util.StringXBuilder ());
				var isMultipleBondPDB = this.models[iModel].isPdbWithMultipleBonds;
				var tokens;
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    var a = this.atoms[i];
				    if (showModels && a.modelIndex != iModelLast) {
					if (iModelLast != -1) sb.append ("ENDMDL\n");
					iModelLast = a.modelIndex;
					sb.append ("MODEL     " + (iModelLast + 1) + "\n");
				    }var sa = a.getAtomName ();
				    var leftJustify = (a.getElementSymbol ().length == 2 || sa.length >= 4 || Character.isDigit (sa.charAt (0)));
				    var isBiomodel = this.models[a.modelIndex].isBioModel;
				    var isHetero = a.isHetero ();
				    if (!isBiomodel) tokens = (leftJustify ? org.jmol.modelset.LabelToken.compile (this.viewer, "HETATM%5.-5i %-4.4a%1AUNK %1c   1%1E   %8.3x%8.3y%8.3z" + occTemp, '\0', null) : org.jmol.modelset.LabelToken.compile (this.viewer, "HETATM%5.-5i  %-3.3a%1AUNK %1c   1%1E   %8.3x%8.3y%8.3z" + occTemp, '\0', null));
				    else if (isHetero) tokens = (leftJustify ? org.jmol.modelset.LabelToken.compile (this.viewer, "HETATM%5.-5i %-4.4a%1A%3.-3n %1c%4.-4R%1E   %8.3x%8.3y%8.3z" + occTemp, '\0', null) : org.jmol.modelset.LabelToken.compile (this.viewer, "HETATM%5.-5i  %-3.3a%1A%3.-3n %1c%4.-4R%1E   %8.3x%8.3y%8.3z" + occTemp, '\0', null));
				    else tokens = (leftJustify ? org.jmol.modelset.LabelToken.compile (this.viewer, "ATOM  %5.-5i %-4.4a%1A%3.-3n %1c%4.-4R%1E   %8.3x%8.3y%8.3z" + occTemp, '\0', null) : org.jmol.modelset.LabelToken.compile (this.viewer, "ATOM  %5.-5i  %-3.3a%1A%3.-3n %1c%4.-4R%1E   %8.3x%8.3y%8.3z" + occTemp, '\0', null));
				    var XX = a.getElementSymbolIso (false).toUpperCase ();
				    sb.append (org.jmol.modelset.LabelToken.formatLabelAtomArray (this.viewer, a, tokens, '\0', null)).append (XX.length == 1 ? " " + XX : XX.substring (0, 2)).append ("  \n");
				    if (!showModels && (!isBiomodel || isHetero || isMultipleBondPDB)) {
					var bonds = a.getBonds ();
					if (bonds != null) for (var j = 0; j < bonds.length; j++) {
					    var iThis = a.getAtomNumber ();
					    var a2 = bonds[j].getOtherAtom (a);
					    if (!bs.get (a2.index)) continue;
					    var n = bonds[j].getCovalentOrder ();
					    if (n == 1 && isMultipleBondPDB && !isHetero) continue;
					    var iOther = a2.getAtomNumber ();
					    switch (n) {
					    case 2:
					    case 3:
						if (iOther < iThis) continue;
					    case 1:
						sbCONECT.append ("CONECT").append (org.jmol.util.TextFormat.formatStringI ("%5i", "i", iThis));
						for (var k = 0; k < n; k++) sbCONECT.append (org.jmol.util.TextFormat.formatStringI ("%5i", "i", iOther));

						sbCONECT.appendC ('\n');
						break;
					    }
					}
				    }}
				if (showModels) sb.append ("ENDMDL\n");
				else sb.append (sbCONECT.toString ());
				return sb.toString ();
			    }, "org.jmol.util.BitSet,org.jmol.io.OutputStringBuilder");
	Clazz.defineMethod (c$, "getPdbData", 
			    function (modelIndex, type, bsSelected, parameters, sb) {
				if (this.isJmolDataFrameForModel (modelIndex)) modelIndex = this.getJmolDataSourceFrame (modelIndex);
				if (modelIndex < 0) return "";
				var isPDB = this.models[modelIndex].isBioModel;
				if (parameters == null && !isPDB) return null;
				var model = this.models[modelIndex];
				if (sb == null) sb =  new org.jmol.io.OutputStringBuilder (null);
				var pdbCONECT =  new org.jmol.util.StringXBuilder ();
				var isDraw = (type.indexOf ("draw") >= 0);
				var bsAtoms = null;
				var bsWritten =  new org.jmol.util.BitSet ();
				var ctype = '\u0000';
				var tokens = org.jmol.modelset.LabelToken.compile (this.viewer, "ATOM  %-6i%4a%1A%3n %1c%4R%1E   ", '\0', null);
				if (parameters == null) {
				    ctype = (type.length > 11 && type.indexOf ("quaternion ") >= 0 ? type.charAt (11) : 'R');
				    model.getPdbData (this.viewer, type, ctype, isDraw, bsSelected, sb, tokens, pdbCONECT, bsWritten);
				    bsAtoms = this.viewer.getModelUndeletedAtomsBitSet (modelIndex);
				} else {
				    bsAtoms = parameters[0];
				    var dataX = parameters[1];
				    var dataY = parameters[2];
				    var dataZ = parameters[3];
				    var haveZ = (dataZ != null);
				    var minXYZ = parameters[4];
				    var maxXYZ = parameters[5];
				    var factors = parameters[6];
				    var center = parameters[7];
				    sb.append ("REMARK   6 Jmol PDB-encoded data: ").append (type).append (";\n");
				    sb.append ("REMARK   6 Jmol data").append (" min = ").append (org.jmol.util.Escape.escapePt (minXYZ)).append (" max = ").append (org.jmol.util.Escape.escapePt (maxXYZ)).append (" unScaledXyz = xyz * ").append (org.jmol.util.Escape.escapePt (factors)).append (" + ").append (org.jmol.util.Escape.escapePt (center)).append (";\n");
				    var strExtra = "";
				    var atomLast = null;
				    for (var i = bsAtoms.nextSetBit (0), n = 0; i >= 0; i = bsAtoms.nextSetBit (i + 1), n++) {
					var x = dataX[n];
					var y = dataY[n];
					var z = (haveZ ? dataZ[n] : 0);
					if (Float.isNaN (x) || Float.isNaN (y) || Float.isNaN (z)) continue;
					var a = this.atoms[i];
					sb.append (org.jmol.modelset.LabelToken.formatLabelAtomArray (this.viewer, a, tokens, '\0', null));
					if (isPDB) bsWritten.set (i);
					sb.append (org.jmol.util.TextFormat.sprintf ("%-8.2f%-8.2f%-10.2f    %6.3f          %2s    %s\n", "ssF", [a.getElementSymbolIso (false).toUpperCase (), strExtra, [x, y, z, 0]]));
					if (atomLast != null && atomLast.getPolymerIndexInModel () == a.getPolymerIndexInModel ()) pdbCONECT.append ("CONECT").append (org.jmol.util.TextFormat.formatStringI ("%5i", "i", atomLast.getAtomNumber ())).append (org.jmol.util.TextFormat.formatStringI ("%5i", "i", a.getAtomNumber ())).appendC ('\n');
					atomLast = a;
				    }
				}sb.append (pdbCONECT.toString ());
				if (isDraw) return sb.toString ();
				bsSelected.and (bsAtoms);
				if (isPDB) sb.append ("\n\n" + this.getProteinStructureState (bsWritten, false, ctype == 'R', 1));
				return sb.toString ();
			    }, "~N,~S,org.jmol.util.BitSet,~A,org.jmol.io.OutputStringBuilder");
	Clazz.defineMethod (c$, "isJmolDataFrameForModel", 
			    function (modelIndex) {
				return (modelIndex >= 0 && modelIndex < this.modelCount && this.models[modelIndex].isJmolDataFrame);
			    }, "~N");
	Clazz.defineMethod (c$, "isJmolDataFrameForAtom", 
			    ($fz = function (atom) {
				return (this.models[atom.modelIndex].isJmolDataFrame);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "setJmolDataFrame", 
			    function (type, modelIndex, modelDataIndex) {
				var model = this.models[type == null ? this.models[modelDataIndex].dataSourceFrame : modelIndex];
				if (type == null) {
				    type = this.models[modelDataIndex].jmolFrameType;
				}if (modelIndex >= 0) {
				    if (model.dataFrames == null) {
					model.dataFrames =  new java.util.Hashtable ();
				    }this.models[modelDataIndex].dataSourceFrame = modelIndex;
				    this.models[modelDataIndex].jmolFrameType = type;
				    model.dataFrames.put (type, Integer.$valueOf (modelDataIndex));
				}if (type.startsWith ("quaternion") && type.indexOf ("deriv") < 0) {
				    type = type.substring (0, type.indexOf (" "));
				    model.dataFrames.put (type, Integer.$valueOf (modelDataIndex));
				}}, "~S,~N,~N");
	Clazz.defineMethod (c$, "getJmolDataFrameIndex", 
			    function (modelIndex, type) {
				if (this.models[modelIndex].dataFrames == null) {
				    return -1;
				}var index = this.models[modelIndex].dataFrames.get (type);
				return (index == null ? -1 : index.intValue ());
			    }, "~N,~S");
	Clazz.defineMethod (c$, "clearDataFrameReference", 
			    function (modelIndex) {
				for (var i = 0; i < this.modelCount; i++) {
				    var df = this.models[i].dataFrames;
				    if (df == null) {
					continue;
				    }var e = df.values ().iterator ();
				    while (e.hasNext ()) {
					if ((e.next ()).intValue () == modelIndex) {
					    e.remove ();
					}}
				}
			    }, "~N");
	Clazz.defineMethod (c$, "getJmolFrameType", 
			    function (modelIndex) {
				return (modelIndex >= 0 && modelIndex < this.modelCount ? this.models[modelIndex].jmolFrameType : "modelSet");
			    }, "~N");
	Clazz.defineMethod (c$, "getJmolDataSourceFrame", 
			    function (modelIndex) {
				return (modelIndex >= 0 && modelIndex < this.modelCount ? this.models[modelIndex].dataSourceFrame : -1);
			    }, "~N");
	Clazz.defineMethod (c$, "saveModelOrientation", 
			    function (modelIndex, orientation) {
				this.models[modelIndex].orientation = orientation;
			    }, "~N,org.jmol.viewer.StateManager.Orientation");
	Clazz.defineMethod (c$, "getModelOrientation", 
			    function (modelIndex) {
				return this.models[modelIndex].orientation;
			    }, "~N");
	Clazz.defineMethod (c$, "getPDBHeader", 
			    function (modelIndex) {
				return (this.models[modelIndex].isBioModel ? this.models[modelIndex].getFullPDBHeader () : this.getFileHeader (modelIndex));
			    }, "~N");
	Clazz.defineMethod (c$, "getFileHeader", 
			    function (modelIndex) {
				if (modelIndex < 0) return "";
				if (this.models[modelIndex].isBioModel) return this.models[modelIndex].getFullPDBHeader ();
				var info = this.getModelAuxiliaryInfoValue (modelIndex, "fileHeader");
				if (info == null) info = this.modelSetName;
				if (info != null) return info;
				return "no header information found";
			    }, "~N");
	Clazz.defineMethod (c$, "getLigandInfo", 
			    function (bsAtoms) {
				var info =  new java.util.Hashtable ();
				var ligands =  new java.util.ArrayList ();
				info.put ("ligands", ligands);
				var bsExclude = org.jmol.util.BitSetUtil.copyInvert (bsAtoms, this.atomCount);
				bsExclude.or (this.viewer.getAtomBitSet ("solvent"));
				for (var i = bsAtoms.nextSetBit (0); i >= 0; i = bsAtoms.nextSetBit (i + 1)) if (this.atoms[i].isProtein () || this.atoms[i].isNucleic ()) bsExclude.set (i);

				var bsModelAtoms =  new Array (this.modelCount);
				for (var i = 0; i < this.modelCount; i++) {
				    bsModelAtoms[i] = this.viewer.getModelUndeletedAtomsBitSet (i);
				    bsModelAtoms[i].andNot (bsExclude);
				}
				var molList = org.jmol.util.JmolMolecule.getMolecules (this.atoms, bsModelAtoms, null, bsExclude);
				for (var i = 0; i < molList.length; i++) {
				    var bs = molList[i].atomList;
				    var ligand =  new java.util.Hashtable ();
				    ligands.add (ligand);
				    ligand.put ("atoms", org.jmol.util.Escape.escape (bs));
				    var names = "";
				    var sep = "";
				    var lastGroup = null;
				    var chainlast = '\u0000';
				    var reslist = "";
				    var model = "";
				    var resnolast = 2147483647;
				    var resnofirst = 2147483647;
				    for (var j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1)) {
					var atom = this.atoms[j];
					if (lastGroup === atom.group) continue;
					lastGroup = atom.group;
					var resno = atom.getResno ();
					var chain = atom.getChainID ();
					if (resnolast != resno - 1) {
					    if (reslist.length != 0 && resnolast != resnofirst) reslist += "-" + resnolast;
					    chain = '\1';
					    resnofirst = resno;
					}model = "/" + this.getModelNumberDotted (atom.modelIndex);
					if (chainlast != '\0' && chain != chainlast) reslist += ":" + chainlast + model;
					if (chain == '\1') reslist += " " + resno;
					resnolast = resno;
					chainlast = atom.getChainID ();
					names += sep + atom.getGroup3 (false);
					sep = "-";
				    }
				    reslist += (resnofirst == resnolast ? "" : "-" + resnolast) + (chainlast == '\0' ? "" : ":" + chainlast) + model;
				    ligand.put ("groupNames", names);
				    ligand.put ("residueList", reslist.substring (1));
				}
				return info;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getModelInfo", 
			    function (bsModels) {
				var info =  new java.util.Hashtable ();
				info.put ("modelSetName", this.modelSetName);
				info.put ("modelCount", Integer.$valueOf (this.modelCount));
				info.put ("isTainted", Boolean.$valueOf (this.tainted != null));
				info.put ("canSkipLoad", Boolean.$valueOf (this.canSkipLoad));
				info.put ("modelSetHasVibrationVectors", Boolean.$valueOf (this.modelSetHasVibrationVectors ()));
				if (this.modelSetProperties != null) {
				    info.put ("modelSetProperties", this.modelSetProperties);
				}info.put ("modelCountSelected", Integer.$valueOf (org.jmol.util.BitSetUtil.cardinalityOf (bsModels)));
				info.put ("modelsSelected", bsModels);
				var vModels =  new java.util.ArrayList ();
				this.getMolecules ();
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) {
				    var model =  new java.util.Hashtable ();
				    model.put ("_ipt", Integer.$valueOf (i));
				    model.put ("num", Integer.$valueOf (this.getModelNumber (i)));
				    model.put ("file_model", this.getModelNumberDotted (i));
				    model.put ("name", this.getModelName (i));
				    var s = this.getModelTitle (i);
				    if (s != null) model.put ("title", s);
				    s = this.getModelFileName (i);
				    if (s != null) model.put ("file", s);
				    s = this.getModelAuxiliaryInfoValue (i, "modelID");
				    if (s != null) model.put ("id", s);
				    model.put ("vibrationVectors", Boolean.$valueOf (this.modelHasVibrationVectors (i)));
				    model.put ("atomCount", Integer.$valueOf (this.models[i].atomCount));
				    model.put ("bondCount", Integer.$valueOf (this.models[i].getBondCount ()));
				    model.put ("groupCount", Integer.$valueOf (this.models[i].getGroupCount ()));
				    model.put ("moleculeCount", Integer.$valueOf (this.models[i].moleculeCount));
				    model.put ("polymerCount", Integer.$valueOf (this.models[i].getBioPolymerCount ()));
				    model.put ("chainCount", Integer.$valueOf (this.getChainCountInModel (i, true)));
				    if (this.models[i].properties != null) {
					model.put ("modelProperties", this.models[i].properties);
				    }var energy = this.getModelAuxiliaryInfoValue (i, "Energy");
				    if (energy != null) {
					model.put ("energy", energy);
				    }model.put ("atomCount", Integer.$valueOf (this.models[i].atomCount));
				    vModels.add (model);
				}
				info.put ("models", vModels);
				return info;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAltLocIndexInModel", 
			    function (modelIndex, alternateLocationID) {
				if (alternateLocationID == '\0') {
				    return 0;
				}var altLocList = this.getAltLocListInModel (modelIndex);
				if (altLocList.length == 0) {
				    return 0;
				}return altLocList.indexOf (alternateLocationID) + 1;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getInsertionCodeIndexInModel", 
			    function (modelIndex, insertionCode) {
				if (insertionCode == '\0') return 0;
				var codeList = this.getInsertionListInModel (modelIndex);
				if (codeList.length == 0) return 0;
				return codeList.indexOf (insertionCode) + 1;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "getAltLocListInModel", 
			    function (modelIndex) {
				if (modelIndex < 0) return "";
				var str = this.getModelAuxiliaryInfoValue (modelIndex, "altLocs");
				return (str == null ? "" : str);
			    }, "~N");
	Clazz.defineMethod (c$, "getInsertionListInModel", 
			    ($fz = function (modelIndex) {
				var str = this.getModelAuxiliaryInfoValue (modelIndex, "insertionCodes");
				return (str == null ? "" : str);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getModelSymmetryCount", 
			    function (modelIndex) {
				var operations;
				return (this.models[modelIndex].biosymmetryCount > 0 || this.unitCells == null || this.unitCells[modelIndex] == null || (operations = this.unitCells[modelIndex].getSymmetryOperations ()) == null ? this.models[modelIndex].biosymmetryCount : operations.length);
			    }, "~N");
	Clazz.defineMethod (c$, "getSymmetryOperation", 
			    function (modelIndex, spaceGroup, symOp, pt1, pt2, drawID, labelOnly) {
				var sginfo = this.getSpaceGroupInfo (modelIndex, spaceGroup, symOp, pt1, pt2, drawID);
				if (sginfo == null) return "";
				var infolist = sginfo.get ("operations");
				if (infolist == null) return "";
				var sb =  new org.jmol.util.StringXBuilder ();
				symOp--;
				for (var i = 0; i < infolist.length; i++) {
				    if (infolist[i] == null || symOp >= 0 && symOp != i) continue;
				    if (drawID != null) return infolist[i][3];
				    if (sb.length () > 0) sb.appendC ('\n');
				    if (!labelOnly) {
					if (symOp < 0) sb.appendI (i + 1).append ("\t");
					sb.append (infolist[i][0]).append ("\t");
				    }sb.append (infolist[i][2]);
				}
				if (sb.length () == 0 && drawID != null) sb.append ("draw " + drawID + "* delete");
				return sb.toString ();
			    }, "~N,~S,~N,org.jmol.util.Point3f,org.jmol.util.Point3f,~S,~B");
	Clazz.defineMethod (c$, "getModelCellRange", 
			    function (modelIndex) {
				if (this.unitCells == null) return null;
				return this.unitCells[modelIndex].getCellRange ();
			    }, "~N");
	Clazz.defineMethod (c$, "modelHasVibrationVectors", 
			    function (modelIndex) {
				if (this.vibrationVectors != null) for (var i = this.atomCount; --i >= 0; ) if ((modelIndex < 0 || this.atoms[i].modelIndex == modelIndex) && this.vibrationVectors[i] != null && this.vibrationVectors[i].length () > 0) return true;

				return false;
			    }, "~N");
	Clazz.defineMethod (c$, "getElementsPresentBitSet", 
			    function (modelIndex) {
				if (modelIndex >= 0) return this.elementsPresent[modelIndex];
				var bs =  new org.jmol.util.BitSet ();
				for (var i = 0; i < this.modelCount; i++) bs.or (this.elementsPresent[i]);

				return bs;
			    }, "~N");
	Clazz.defineMethod (c$, "getSymmetryInfoAsStringForModel", 
			    ($fz = function (modelIndex) {
				var unitCell = this.getUnitCell (modelIndex);
				return (unitCell == null ? "no symmetry information" : unitCell.getSymmetryInfoString ());
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getMoleculeInfo", 
			    function (bsAtoms) {
				if (this.moleculeCount == 0) {
				    this.getMolecules ();
				}var V =  new java.util.ArrayList ();
				var bsTemp =  new org.jmol.util.BitSet ();
				for (var i = 0; i < this.moleculeCount; i++) {
				    bsTemp = org.jmol.util.BitSetUtil.copy (bsAtoms);
				    var m = this.molecules[i];
				    bsTemp.and (m.atomList);
				    if (bsTemp.length () > 0) {
					var info =  new java.util.Hashtable ();
					info.put ("mf", m.getMolecularFormula (false));
					info.put ("number", Integer.$valueOf (m.moleculeIndex + 1));
					info.put ("modelNumber", this.getModelNumberDotted (m.modelIndex));
					info.put ("numberInModel", Integer.$valueOf (m.indexInModel + 1));
					info.put ("nAtoms", Integer.$valueOf (m.atomCount));
					info.put ("nElements", Integer.$valueOf (m.nElements));
					V.add (info);
				    }}
				return V;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getMoleculeIndex", 
			    function (atomIndex, inModel) {
				if (this.moleculeCount == 0) this.getMolecules ();
				for (var i = 0; i < this.moleculeCount; i++) {
				    if (this.molecules[i].atomList.get (atomIndex)) return (inModel ? this.molecules[i].indexInModel : i);
				}
				return 0;
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getMoleculeBitSet", 
			    function (bs) {
				if (this.moleculeCount == 0) this.getMolecules ();
				var bsResult = org.jmol.util.BitSetUtil.copy (bs);
				var bsInitial = org.jmol.util.BitSetUtil.copy (bs);
				var i = 0;
				var bsTemp =  new org.jmol.util.BitSet ();
				while ((i = bsInitial.length () - 1) >= 0) {
				    bsTemp = this.getMoleculeBitSetForAtom (i);
				    if (bsTemp == null) {
					bsInitial.clear (i);
					bsResult.clear (i);
					continue;
				    }bsInitial.andNot (bsTemp);
				    bsResult.or (bsTemp);
				}
				return bsResult;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getMoleculeBitSetForAtom", 
			    function (atomIndex) {
				if (this.moleculeCount == 0) this.getMolecules ();
				for (var i = 0; i < this.moleculeCount; i++) if (this.molecules[i].atomList.get (atomIndex)) return this.molecules[i].atomList;

				return null;
			    }, "~N");
	Clazz.defineMethod (c$, "getModelDipole", 
			    function (modelIndex) {
				if (modelIndex < 0) return null;
				var dipole = this.getModelAuxiliaryInfoValue (modelIndex, "dipole");
				if (dipole == null) dipole = this.getModelAuxiliaryInfoValue (modelIndex, "DIPOLE_VEC");
				return dipole;
			    }, "~N");
	Clazz.defineMethod (c$, "calculateMolecularDipole", 
			    function (modelIndex) {
				if (this.partialCharges == null || modelIndex < 0) return null;
				var nPos = 0;
				var nNeg = 0;
				var cPos = 0;
				var cNeg = 0;
				var pos =  new org.jmol.util.Vector3f ();
				var neg =  new org.jmol.util.Vector3f ();
				for (var i = 0; i < this.atomCount; i++) {
				    if (this.atoms[i].modelIndex != modelIndex) continue;
				    var c = this.partialCharges[i];
				    if (c < 0) {
					nNeg++;
					cNeg += c;
					neg.scaleAdd2 (c, this.atoms[i], neg);
				    } else if (c > 0) {
					nPos++;
					cPos += c;
					pos.scaleAdd2 (c, this.atoms[i], pos);
				    }}
				if (nNeg == 0 || nPos == 0) return null;
				pos.scale (1 / cPos);
				neg.scale (1 / cNeg);
				pos.sub (neg);
				org.jmol.util.Logger.warn ("CalculateMolecularDipole: this is an approximate result -- needs checking");
				pos.scale (cPos * 4.8);
				return pos;
			    }, "~N");
	Clazz.defineMethod (c$, "getMoleculeCountInModel", 
			    function (modelIndex) {
				var n = 0;
				if (this.moleculeCount == 0) this.getMolecules ();
				if (modelIndex < 0) return this.moleculeCount;
				for (var i = 0; i < this.modelCount; i++) {
				    if (modelIndex == i) n += this.models[i].moleculeCount;
				}
				return n;
			    }, "~N");
	Clazz.defineMethod (c$, "calcSelectedMoleculesCount", 
			    function (bsSelected) {
				if (this.moleculeCount == 0) this.getMolecules ();
				this.selectedMolecules.xor (this.selectedMolecules);
				this.selectedMoleculeCount = 0;
				var bsTemp =  new org.jmol.util.BitSet ();
				for (var i = 0; i < this.moleculeCount; i++) {
				    org.jmol.util.BitSetUtil.copy2 (bsSelected, bsTemp);
				    bsTemp.and (this.molecules[i].atomList);
				    if (bsTemp.length () > 0) {
					this.selectedMolecules.set (i);
					this.selectedMoleculeCount++;
				    }}
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setCentroid", 
			    function (iAtom0, iAtom1, minmax) {
				try {
				    var uc = this.getUnitCell (this.atoms[iAtom0].modelIndex);
				    if (uc == null) return;
				    var bsDelete =  new org.jmol.util.BitSet ();
				    this.getMolecules ();
				    var isOneMolecule = (this.molecules[this.moleculeCount - 1].firstAtomIndex == this.models[this.atoms[iAtom1].modelIndex].firstAtomIndex);
				    var center =  new org.jmol.util.Point3f ();
				    var centroidPacked = (minmax[6] == 1);
				    nextMol : for (var i = this.moleculeCount; --i >= 0 && this.molecules[i].firstAtomIndex >= iAtom0 && this.molecules[i].firstAtomIndex < iAtom1; ) {
					var bs = this.molecules[i].atomList;
					center.set (0, 0, 0);
					var n = 0;
					for (var j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1)) {
					    if (isOneMolecule || centroidPacked) {
						center.setT (this.atoms[j]);
						if (org.jmol.modelset.ModelCollection.isNotCentroid (center, 1, uc, minmax, centroidPacked)) {
						    if (isOneMolecule) bsDelete.set (j);
						} else if (!isOneMolecule) {
						    continue nextMol;
						}} else {
						    center.add (this.atoms[j]);
						    n++;
						}}
					if (centroidPacked || n > 0 && org.jmol.modelset.ModelCollection.isNotCentroid (center, n, uc, minmax, false)) bsDelete.or (bs);
				    }
				    if (bsDelete.nextSetBit (0) >= 0) this.viewer.deleteAtoms (bsDelete, false);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
			    }, "~N,~N,~A");
	c$.isNotCentroid = Clazz.defineMethod (c$, "isNotCentroid", 
					       ($fz = function (center, n, uc, minmax, centroidPacked) {
						   center.scale (1 / n);
						   uc.toFractional (center, false);
						   if (centroidPacked) return (center.x + 0.000005 <= minmax[0] || center.x - 0.000005 > minmax[3] || center.y + 0.000005 <= minmax[1] || center.y - 0.000005 > minmax[4] || center.z + 0.000005 <= minmax[2] || center.z - 0.000005 > minmax[5]);
						   return (center.x + 0.000005 <= minmax[0] || center.x + 0.00001 > minmax[3] || center.y + 0.000005 <= minmax[1] || center.y + 0.00001 > minmax[4] || center.z + 0.000005 <= minmax[2] || center.z + 0.00001 > minmax[5]);
					       }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,~N,org.jmol.api.SymmetryInterface,~A,~B");
	Clazz.defineMethod (c$, "getMolecules", 
			    function () {
				if (this.moleculeCount > 0) return this.molecules;
				if (this.molecules == null) this.molecules =  new Array (4);
				this.moleculeCount = 0;
				var m = null;
				var bsModelAtoms =  new Array (this.modelCount);
				var biobranches = null;
				for (var i = 0; i < this.modelCount; i++) {
				    bsModelAtoms[i] = this.viewer.getModelUndeletedAtomsBitSet (i);
				    m = this.models[i];
				    m.moleculeCount = 0;
				    biobranches = m.getBioBranches (biobranches);
				}
				this.molecules = org.jmol.util.JmolMolecule.getMolecules (this.atoms, bsModelAtoms, biobranches, null);
				this.moleculeCount = this.molecules.length;
				for (var i = this.moleculeCount; --i >= 0; ) {
				    m = this.models[this.molecules[i].modelIndex];
				    m.firstMoleculeIndex = i;
				    m.moleculeCount++;
				}
				return this.molecules;
			    });
	Clazz.defineMethod (c$, "initializeBspf", 
			    function () {
				if (this.bspf != null && this.bspf.isInitialized ()) return;
				if (this.showRebondTimes) org.jmol.util.Logger.startTimer ("build bspf");
				var bspf =  new org.jmol.bspt.Bspf (3);
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("sequential bspt order");
				var bsNew = org.jmol.util.BitSetUtil.newBitSet (this.modelCount);
				for (var i = this.atomCount; --i >= 0; ) {
				    var atom = this.atoms[i];
				    if (!atom.isDeleted ()) {
					bspf.addTuple (this.models[atom.modelIndex].trajectoryBaseIndex, atom);
					bsNew.set (atom.modelIndex);
				    }}
				if (this.showRebondTimes) {
				    org.jmol.util.Logger.checkTimer ("build bspf", false);
				    bspf.stats ();
				}for (var i = bsNew.nextSetBit (0); i >= 0; i = bsNew.nextSetBit (i + 1)) bspf.validateModel (i, true);

				bspf.validate (true);
				this.bspf = bspf;
			    });
	Clazz.defineMethod (c$, "initializeBspt", 
			    function (modelIndex) {
				this.initializeBspf ();
				if (this.bspf.isInitializedIndex (modelIndex)) return;
				this.bspf.initialize (modelIndex, this.atoms, this.viewer.getModelUndeletedAtomsBitSet (modelIndex));
			    }, "~N");
	Clazz.defineMethod (c$, "setIteratorForPoint", 
			    function (iterator, modelIndex, pt, distance) {
				if (modelIndex < 0) {
				    iterator.setCenter (pt, distance);
				    return;
				}this.initializeBspt (modelIndex);
				iterator.setModel (this, modelIndex, this.models[modelIndex].firstAtomIndex, 2147483647, pt, distance, null);
			    }, "org.jmol.api.AtomIndexIterator,~N,org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "setIteratorForAtom", 
			    function (iterator, modelIndex, atomIndex, distance, rd) {
				if (modelIndex < 0) modelIndex = this.atoms[atomIndex].modelIndex;
				modelIndex = this.models[modelIndex].trajectoryBaseIndex;
				this.initializeBspt (modelIndex);
				iterator.setModel (this, modelIndex, this.models[modelIndex].firstAtomIndex, atomIndex, this.atoms[atomIndex], distance, rd);
			    }, "org.jmol.api.AtomIndexIterator,~N,~N,~N,org.jmol.atomdata.RadiusData");
	Clazz.defineMethod (c$, "getSelectedAtomIterator", 
			    function (bsSelected, isGreaterOnly, modelZeroBased, hemisphereOnly, isMultiModel) {
				this.initializeBspf ();
				var iter;
				if (isMultiModel) {
				    var bsModels = this.getModelBitSet (bsSelected, false);
				    for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) this.initializeBspt (i);

				    iter =  new org.jmol.modelset.AtomIteratorWithinModelSet (bsModels);
				} else {
				    iter =  new org.jmol.modelset.AtomIteratorWithinModel ();
				}iter.initialize (this.bspf, bsSelected, isGreaterOnly, modelZeroBased, hemisphereOnly, this.viewer.isParallel ());
				return iter;
			    }, "org.jmol.util.BitSet,~B,~B,~B,~B");
	Clazz.overrideMethod (c$, "getBondCountInModel", 
			      function (modelIndex) {
				  return (modelIndex < 0 ? this.bondCount : this.models[modelIndex].getBondCount ());
			      }, "~N");
	Clazz.defineMethod (c$, "calculateStruts", 
			    function (bs1, bs2) {
				this.makeConnections (0, 3.4028235E38, 32768, 12291, bs1, bs2, null, false, false, 0);
				var iAtom = bs1.nextSetBit (0);
				if (iAtom < 0) return 0;
				var model = this.models[this.atoms[iAtom].modelIndex];
				return (model.isBioModel ? model.calculateStruts (this, bs1, bs2) : 0);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomCountInModel", 
			    function (modelIndex) {
				return (modelIndex < 0 ? this.atomCount : this.models[modelIndex].atomCount);
			    }, "~N");
	Clazz.defineMethod (c$, "getModelAtomBitSetIncludingDeletedBs", 
			    function (bsModels) {
				var bs =  new org.jmol.util.BitSet ();
				if (bsModels == null && this.bsAll == null) this.bsAll = org.jmol.util.BitSetUtil.setAll (this.atomCount);
				if (bsModels == null) bs.or (this.bsAll);
				else for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) bs.or (this.getModelAtomBitSetIncludingDeleted (i, false));

				return bs;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getModelAtomBitSetIncludingDeleted", 
			    function (modelIndex, asCopy) {
				var bs = (modelIndex < 0 ? this.bsAll : this.models[modelIndex].bsAtoms);
				if (bs == null) bs = this.bsAll = org.jmol.util.BitSetUtil.setAll (this.atomCount);
				return (asCopy ? org.jmol.util.BitSetUtil.copy (bs) : bs);
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getAtomBits", 
			    function (tokType, specInfo) {
				return org.jmol.util.BitSetUtil.andNot (this.getAtomBitsMaybeDeleted (tokType, specInfo), this.viewer.getDeletedAtoms ());
			    }, "~N,~O");
	Clazz.defineMethod (c$, "getAtomBitsMaybeDeleted", 
			    function (tokType, specInfo) {
				var info;
				var bs;
				var pt;
				switch (tokType) {
				default:
				    return Clazz.superCall (this, org.jmol.modelset.ModelCollection, "getAtomBitsMaybeDeleted", [tokType, specInfo]);
				case 1073741864:
				    return this.getBasePairBits (specInfo);
				case 1679429641:
				    var boxInfo = this.getBoxInfo (specInfo, 1);
				    bs = this.getAtomsWithin (boxInfo.getBoundBoxCornerVector ().length () + 0.0001, boxInfo.getBoundBoxCenter (), null, -1);
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) if (!boxInfo.isWithin (this.atoms[i])) bs.clear (i);

				    return bs;
				case 1095761934:
				    return this.getMoleculeBitSet (specInfo);
				case 1087373320:
				    return this.getSequenceBits (specInfo, null);
				case 1048615:
				    info = specInfo;
				    var seqcodeA = info[0];
				    var seqcodeB = info[1];
				    var chainID = String.fromCharCode (info[2]);
				    bs =  new org.jmol.util.BitSet ();
				    var caseSensitive = this.viewer.getChainCaseSensitive ();
				    if (!caseSensitive) chainID = Character.toUpperCase (chainID);
				    for (var i = this.modelCount; --i >= 0; ) if (this.models[i].isBioModel) this.models[i].selectSeqcodeRange (seqcodeA, seqcodeB, chainID, bs, caseSensitive);

				    return bs;
				case 3145772:
				    bs = org.jmol.util.BitSetUtil.newBitSet (this.atomCount);
				    var modelIndex = -1;
				    var nOps = 0;
				    for (var i = this.atomCount; --i >= 0; ) {
					var atom = this.atoms[i];
					var bsSym = atom.getAtomSymmetry ();
					if (bsSym != null) {
					    if (atom.modelIndex != modelIndex) {
						modelIndex = atom.modelIndex;
						if (this.getModelCellRange (modelIndex) == null) continue;
						nOps = this.getModelSymmetryCount (modelIndex);
					    }var n = 0;
					    for (var j = nOps; --j >= 0; ) if (bsSym.get (j)) if (++n > 1) {
						bs.set (i);
						break;
					    }
					}}
				    return bs;
				case 1089470478:
				    return org.jmol.util.BitSetUtil.copy (this.bsSymmetry == null ? this.bsSymmetry = org.jmol.util.BitSetUtil.newBitSet (this.atomCount) : this.bsSymmetry);
				case 1614417948:
				    bs =  new org.jmol.util.BitSet ();
				    var unitcell = this.viewer.getCurrentUnitCell ();
				    if (unitcell == null) return bs;
				    var cell = org.jmol.util.Point3f.new3 (1, 1, 1);
				    pt =  new org.jmol.util.Point3f ();
				    for (var i = this.atomCount; --i >= 0; ) if (this.isInLatticeCell (i, cell, pt, false)) bs.set (i);

				    return bs;
				case 1095761925:
				    bs =  new org.jmol.util.BitSet ();
				    info = specInfo;
				    var ptcell = org.jmol.util.Point3f.new3 (info[0] / 1000, info[1] / 1000, info[2] / 1000);
				    pt =  new org.jmol.util.Point3f ();
				    var isAbsolute = !this.viewer.getFractionalRelative ();
				    for (var i = this.atomCount; --i >= 0; ) if (this.isInLatticeCell (i, ptcell, pt, isAbsolute)) bs.set (i);

				    return bs;
				}
			    }, "~N,~O");
	Clazz.defineMethod (c$, "isInLatticeCell", 
			    ($fz = function (i, cell, pt, isAbsolute) {
				var iModel = this.atoms[i].modelIndex;
				var uc = this.getUnitCell (iModel);
				if (uc == null) return false;
				pt.setT (this.atoms[i]);
				uc.toFractional (pt, isAbsolute);
				var slop = 0.02;
				if (pt.x < cell.x - 1 - slop || pt.x > cell.x + slop) return false;
				if (pt.y < cell.y - 1 - slop || pt.y > cell.y + slop) return false;
				if (pt.z < cell.z - 1 - slop || pt.z > cell.z + slop) return false;
				return true;
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3f,org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "getAtomsWithinBs", 
			    function (distance, bs, withinAllModels, rd) {
				var bsResult =  new org.jmol.util.BitSet ();
				var bsCheck = this.getIterativeModels (false);
				bs = org.jmol.util.BitSetUtil.andNot (bs, this.viewer.getDeletedAtoms ());
				var iter = this.getSelectedAtomIterator (null, false, false, false, false);
				if (withinAllModels) {
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) for (var iModel = this.modelCount; --iModel >= 0; ) {
					if (!bsCheck.get (iModel)) continue;
					if (distance < 0) {
					    this.getAtomsWithin (distance, this.atoms[i].getFractionalUnitCoordPt (true), bsResult, -1);
					    continue;
					}this.setIteratorForAtom (iter, iModel, i, distance, rd);
					iter.addAtoms (bsResult);
				    }

				} else {
				    bsResult.or (bs);
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					if (distance < 0) {
					    this.getAtomsWithin (distance, this.atoms[i], bsResult, this.atoms[i].modelIndex);
					    continue;
					}this.setIteratorForAtom (iter, -1, i, distance, rd);
					iter.addAtoms (bsResult);
				    }
				}iter.release ();
				return bsResult;
			    }, "~N,org.jmol.util.BitSet,~B,org.jmol.atomdata.RadiusData");
	Clazz.defineMethod (c$, "getGroupsWithin", 
			    function (nResidues, bs) {
				var bsCheck = this.getIterativeModels (false);
				var bsResult =  new org.jmol.util.BitSet ();
				for (var iModel = this.modelCount; --iModel >= 0; ) {
				    if (!bsCheck.get (iModel) || !this.models[iModel].isBioModel) continue;
				    this.models[iModel].getGroupsWithin (nResidues, bs, bsResult);
				}
				return bsResult;
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomsWithin", 
			    function (distance, coord, bsResult, modelIndex) {
				if (bsResult == null) bsResult =  new org.jmol.util.BitSet ();
				if (distance < 0) {
				    distance = -distance;
				    var ptTemp1 =  new org.jmol.util.Point3f ();
				    var ptTemp2 =  new org.jmol.util.Point3f ();
				    for (var i = this.atomCount; --i >= 0; ) {
					var atom = this.atoms[i];
					if (modelIndex >= 0 && this.atoms[i].modelIndex != modelIndex) continue;
					if (!bsResult.get (i) && atom.getFractionalUnitDistance (coord, ptTemp1, ptTemp2) <= distance) bsResult.set (atom.index);
				    }
				    return bsResult;
				}var bsCheck = this.getIterativeModels (true);
				var iter = this.getSelectedAtomIterator (null, false, false, false, false);
				for (var iModel = this.modelCount; --iModel >= 0; ) {
				    if (!bsCheck.get (iModel)) continue;
				    this.setIteratorForAtom (iter, -1, this.models[iModel].firstAtomIndex, -1, null);
				    iter.setCenter (coord, distance);
				    iter.addAtoms (bsResult);
				}
				iter.release ();
				return bsResult;
			    }, "~N,org.jmol.util.Point3f,org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getBasePairInfo", 
			    ($fz = function (bs) {
				var info =  new org.jmol.util.StringXBuilder ();
				var vHBonds =  new java.util.ArrayList ();
				this.calcRasmolHydrogenBonds (bs, bs, vHBonds, true, 1, false, null);
				for (var i = vHBonds.size (); --i >= 0; ) {
				    var b = vHBonds.get (i);
				    org.jmol.modelset.ModelCollection.getAtomResidueInfo (info, b.atom1);
				    info.append (" - ");
				    org.jmol.modelset.ModelCollection.getAtomResidueInfo (info, b.atom2);
				    info.append ("\n");
				}
				return info.toString ();
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	c$.getAtomResidueInfo = Clazz.defineMethod (c$, "getAtomResidueInfo", 
						    ($fz = function (info, atom) {
							info.append ("[").append (atom.getGroup3 (false)).append ("]").append (atom.getSeqcodeString ()).append (":");
							var id = atom.getChainID ();
							info.append (id == '\0' ? " " : "" + id);
						    }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,org.jmol.modelset.Atom");
	Clazz.defineMethod (c$, "getBasePairBits", 
			    ($fz = function (specInfo) {
				var bs =  new org.jmol.util.BitSet ();
				if (specInfo.length % 2 != 0) return bs;
				var bsA = null;
				var bsB = null;
				var vHBonds =  new java.util.ArrayList ();
				if (specInfo.length == 0) {
				    bsA = bsB = this.viewer.getModelUndeletedAtomsBitSet (-1);
				    this.calcRasmolHydrogenBonds (bsA, bsB, vHBonds, true, 1, false, null);
				} else {
				    for (var i = 0; i < specInfo.length; ) {
					bsA = this.getSequenceBits (specInfo.substring (i, ++i), null);
					if (bsA.cardinality () == 0) continue;
					bsB = this.getSequenceBits (specInfo.substring (i, ++i), null);
					if (bsB.cardinality () == 0) continue;
					this.calcRasmolHydrogenBonds (bsA, bsB, vHBonds, true, 1, false, null);
				    }
				}var bsAtoms =  new org.jmol.util.BitSet ();
				for (var i = vHBonds.size (); --i >= 0; ) {
				    var b = vHBonds.get (i);
				    bsAtoms.set (b.atom1.index);
				    bsAtoms.set (b.atom2.index);
				}
				return Clazz.superCall (this, org.jmol.modelset.ModelCollection, "getAtomBitsMaybeDeleted", [1087373318, bsAtoms]);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getSequenceBits", 
			    function (specInfo, bs) {
				if (bs == null) bs = this.viewer.getModelUndeletedAtomsBitSet (-1);
				var bsResult =  new org.jmol.util.BitSet ();
				if (specInfo.length > 0) for (var i = 0; i < this.modelCount; ++i) if (this.models[i].isBioModel) this.models[i].getSequenceBits (specInfo, bs, bsResult);

				return bsResult;
			    }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteBonds", 
			    function (bsBonds, isFullModel) {
				if (!isFullModel) {
				    var bsA =  new org.jmol.util.BitSet ();
				    var bsB =  new org.jmol.util.BitSet ();
				    for (var i = bsBonds.nextSetBit (0); i >= 0; i = bsBonds.nextSetBit (i + 1)) {
					var atom1 = this.bonds[i].atom1;
					if (this.models[atom1.modelIndex].isModelKit) continue;
					bsA.clearAll ();
					bsB.clearAll ();
					bsA.set (atom1.index);
					bsB.set (this.bonds[i].getAtomIndex2 ());
					this.addStateScript ("connect ", null, bsA, bsB, "delete", false, true);
				    }
				}Clazz.superCall (this, org.jmol.modelset.ModelCollection, "deleteBonds", [bsBonds, isFullModel]);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "makeConnections", 
			    function (minDistance, maxDistance, order, connectOperation, bsA, bsB, bsBonds, isBonds, addGroup, energy) {
				if (bsBonds == null) bsBonds =  new org.jmol.util.BitSet ();
				var matchAny = (order == 65535);
				var matchNull = (order == 131071);
				if (matchNull) order = 1;
				var matchHbond = org.jmol.modelset.Bond.isHydrogen (order);
				var identifyOnly = false;
				var modifyOnly = false;
				var createOnly = false;
				var autoAromatize = false;
				var minDistanceSquared = minDistance * minDistance;
				var maxDistanceSquared = maxDistance * maxDistance;
				switch (connectOperation) {
				case 12291:
				    return this.deleteConnections (minDistance, maxDistance, order, bsA, bsB, isBonds, matchNull, minDistanceSquared, maxDistanceSquared);
				case 603979874:
				case 1073741852:
				    if (order != 515) return this.autoBond (bsA, bsB, bsBonds, isBonds, matchHbond, connectOperation == 603979874);
				    modifyOnly = true;
				    autoAromatize = true;
				    break;
				case 1087373321:
				    identifyOnly = true;
				    break;
				case 1073742025:
				    modifyOnly = true;
				    break;
				case 1073741904:
				    createOnly = true;
				    break;
				}
				this.defaultCovalentMad = this.viewer.getMadBond ();
				var minDistanceIsFractionRadius = (minDistance < 0);
				var maxDistanceIsFractionRadius = (maxDistance < 0);
				if (minDistanceIsFractionRadius) minDistance = -minDistance;
				if (maxDistanceIsFractionRadius) maxDistance = -maxDistance;
				var mad = this.getDefaultMadFromOrder (order);
				var nNew = 0;
				var nModified = 0;
				var bondAB = null;
				var m = (isBonds ? 1 : this.atomCount);
				var atomA = null;
				var atomB = null;
				var dAB = 0;
				var dABcalc = 0;
				var newOrder = (order | 131072);
				for (var iA = bsA.nextSetBit (0); iA >= 0; iA = bsA.nextSetBit (iA + 1)) {
				    if (isBonds) {
					bondAB = this.bonds[iA];
					atomA = bondAB.atom1;
					atomB = bondAB.atom2;
				    } else {
					atomA = this.atoms[iA];
					if (atomA.isDeleted ()) continue;
				    }for (var iB = (isBonds ? m : bsB.nextSetBit (0)); iB >= 0; iB = (isBonds ? iB - 1 : bsB.nextSetBit (iB + 1))) {
					if (!isBonds) {
					    if (iB == iA) continue;
					    atomB = this.atoms[iB];
					    if (atomA.modelIndex != atomB.modelIndex || atomB.isDeleted ()) continue;
					    if (atomA.alternateLocationID != atomB.alternateLocationID && atomA.alternateLocationID != '\0' && atomB.alternateLocationID != '\0') continue;
					    bondAB = atomA.getBond (atomB);
					}if (bondAB == null && (identifyOnly || modifyOnly) || bondAB != null && createOnly) continue;
					var distanceSquared = atomA.distanceSquared (atomB);
					if (minDistanceIsFractionRadius || maxDistanceIsFractionRadius) {
					    dAB = atomA.distance (atomB);
					    dABcalc = atomA.getBondingRadiusFloat () + atomB.getBondingRadiusFloat ();
					}if ((minDistanceIsFractionRadius ? dAB < dABcalc * minDistance : distanceSquared < minDistanceSquared) || (maxDistanceIsFractionRadius ? dAB > dABcalc * maxDistance : distanceSquared > maxDistanceSquared)) continue;
					if (bondAB != null) {
					    if (!identifyOnly && !matchAny) {
						bondAB.setOrder (order);
						this.bsAromatic.clear (bondAB.index);
					    }if (!identifyOnly || matchAny || order == bondAB.order || newOrder == bondAB.order || matchHbond && bondAB.isHydrogen ()) {
						bsBonds.set (bondAB.index);
						nModified++;
					    }} else {
						bsBonds.set (this.bondAtoms (atomA, atomB, order, mad, bsBonds, energy, addGroup, true).index);
						nNew++;
					    }}
				}
				if (autoAromatize) this.assignAromaticBondsBs (true, bsBonds);
				if (!identifyOnly) this.shapeManager.setShapeSizeBs (1, -2147483648, null, bsBonds);
				return [nNew, nModified];
			    }, "~N,~N,~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,~N");
	Clazz.defineMethod (c$, "autoBondBs4", 
			    function (bsA, bsB, bsExclude, bsBonds, mad, preJmol11_9_24) {
				if (preJmol11_9_24) return this.autoBond_Pre_11_9_24 (bsA, bsB, bsExclude, bsBonds, mad);
				if (this.atomCount == 0) return 0;
				if (mad == 0) mad = 1;
				if (this.maxBondingRadius == 1.4E-45) this.findMaxRadii ();
				var bondTolerance = this.viewer.getBondTolerance ();
				var minBondDistance = this.viewer.getMinBondDistance ();
				var minBondDistance2 = minBondDistance * minBondDistance;
				var nNew = 0;
				if (this.showRebondTimes) org.jmol.util.Logger.startTimer ("autobond");
				var lastModelIndex = -1;
				var isAll = (bsA == null);
				var bsCheck;
				var i0;
				if (isAll) {
				    i0 = 0;
				    bsCheck = null;
				} else {
				    if (bsA.equals (bsB)) {
					bsCheck = bsA;
				    } else {
					bsCheck = org.jmol.util.BitSetUtil.copy (bsA);
					bsCheck.or (bsB);
				    }i0 = bsCheck.nextSetBit (0);
				}var iter = this.getSelectedAtomIterator (null, false, false, true, false);
				for (var i = i0; i >= 0 && i < this.atomCount; i = (isAll ? i + 1 : bsCheck.nextSetBit (i + 1))) {
				    var isAtomInSetA = (isAll || bsA.get (i));
				    var isAtomInSetB = (isAll || bsB.get (i));
				    var atom = this.atoms[i];
				    if (atom.isDeleted ()) continue;
				    var modelIndex = atom.modelIndex;
				    if (modelIndex != lastModelIndex) {
					lastModelIndex = modelIndex;
					if (this.isJmolDataFrameForModel (modelIndex)) {
					    i = this.models[modelIndex].firstAtomIndex + this.models[modelIndex].atomCount - 1;
					    continue;
					}}var myBondingRadius = atom.getBondingRadiusFloat ();
				    if (myBondingRadius == 0) continue;
				    var isFirstExcluded = (bsExclude != null && bsExclude.get (i));
				    var searchRadius = myBondingRadius + this.maxBondingRadius + bondTolerance;
				    this.setIteratorForAtom (iter, -1, i, searchRadius, null);
				    while (iter.hasNext ()) {
					var atomNear = this.atoms[iter.next ()];
					if (atomNear.isDeleted ()) continue;
					var atomIndexNear = atomNear.index;
					var isNearInSetA = (isAll || bsA.get (atomIndexNear));
					var isNearInSetB = (isAll || bsB.get (atomIndexNear));
					if (!isNearInSetA && !isNearInSetB || !(isAtomInSetA && isNearInSetB || isAtomInSetB && isNearInSetA) || isFirstExcluded && bsExclude.get (atomIndexNear)) continue;
					var order = org.jmol.modelset.BondCollection.getBondOrder (myBondingRadius, atomNear.getBondingRadiusFloat (), iter.foundDistance2 (), minBondDistance2, bondTolerance);
					if (order > 0 && this.checkValencesAndBond (atom, atomNear, order, mad, bsBonds)) nNew++;
				    }
				    iter.release ();
				}
				if (this.showRebondTimes) org.jmol.util.Logger.checkTimer ("autoBond", false);
				return nNew;
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~N,~B");
	Clazz.defineMethod (c$, "autoBond_Pre_11_9_24", 
			    ($fz = function (bsA, bsB, bsExclude, bsBonds, mad) {
				if (this.atomCount == 0) return 0;
				if (mad == 0) mad = 1;
				if (this.maxBondingRadius == 1.4E-45) this.findMaxRadii ();
				var bondTolerance = this.viewer.getBondTolerance ();
				var minBondDistance = this.viewer.getMinBondDistance ();
				var minBondDistance2 = minBondDistance * minBondDistance;
				var nNew = 0;
				this.initializeBspf ();
				var lastModelIndex = -1;
				for (var i = this.atomCount; --i >= 0; ) {
				    var isAtomInSetA = (bsA == null || bsA.get (i));
				    var isAtomInSetB = (bsB == null || bsB.get (i));
				    if (!isAtomInSetA && !isAtomInSetB) continue;
				    var atom = this.atoms[i];
				    if (atom.isDeleted ()) continue;
				    var modelIndex = atom.modelIndex;
				    if (modelIndex != lastModelIndex) {
					lastModelIndex = modelIndex;
					if (this.isJmolDataFrameForModel (modelIndex)) {
					    for (; --i >= 0; ) if (this.atoms[i].modelIndex != modelIndex) break;

					    i++;
					    continue;
					}}var myBondingRadius = atom.getBondingRadiusFloat ();
				    if (myBondingRadius == 0) continue;
				    var searchRadius = myBondingRadius + this.maxBondingRadius + bondTolerance;
				    this.initializeBspt (modelIndex);
				    var iter = this.bspf.getCubeIterator (modelIndex);
				    iter.initialize (atom, searchRadius, true);
				    while (iter.hasMoreElements ()) {
					var atomNear = iter.nextElement ();
					if (atomNear === atom || atomNear.isDeleted ()) continue;
					var atomIndexNear = atomNear.index;
					var isNearInSetA = (bsA == null || bsA.get (atomIndexNear));
					var isNearInSetB = (bsB == null || bsB.get (atomIndexNear));
					if (!isNearInSetA && !isNearInSetB || bsExclude != null && bsExclude.get (atomIndexNear) && bsExclude.get (i)) continue;
					if (!(isAtomInSetA && isNearInSetB || isAtomInSetB && isNearInSetA)) continue;
					var order = org.jmol.modelset.BondCollection.getBondOrder (myBondingRadius, atomNear.getBondingRadiusFloat (), iter.foundDistance2 (), minBondDistance2, bondTolerance);
					if (order > 0) {
					    if (this.checkValencesAndBond (atom, atomNear, order, mad, bsBonds)) nNew++;
					}}
				    iter.release ();
				}
				return nNew;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "autoBond", 
			    ($fz = function (bsA, bsB, bsBonds, isBonds, matchHbond, legacyAutoBond) {
				if (isBonds) {
				    var bs = bsA;
				    bsA =  new org.jmol.util.BitSet ();
				    bsB =  new org.jmol.util.BitSet ();
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					bsA.set (this.bonds[i].atom1.index);
					bsB.set (this.bonds[i].atom2.index);
				    }
				}return [matchHbond ? this.autoHbond (bsA, bsB, false) : this.autoBondBs4 (bsA, bsB, null, bsBonds, this.viewer.getMadBond (), legacyAutoBond), 0];
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,~B");
	Clazz.defineMethod (c$, "autoHbond", 
			    function (bsA, bsB, onlyIfHaveCalculated) {
				if (onlyIfHaveCalculated) {
				    var bsModels = this.getModelBitSet (bsA, false);
				    for (var i = bsModels.nextSetBit (0); i >= 0 && onlyIfHaveCalculated; i = bsModels.nextSetBit (i + 1)) onlyIfHaveCalculated = !this.models[i].hasRasmolHBonds;

				    if (onlyIfHaveCalculated) return 0;
				}var haveHAtoms = false;
				for (var i = bsA.nextSetBit (0); i >= 0; i = bsA.nextSetBit (i + 1)) if (this.atoms[i].getElementNumber () == 1) {
				    haveHAtoms = true;
				    break;
				}
				var bsHBonds =  new org.jmol.util.BitSet ();
				var useRasMol = this.viewer.getHbondsRasmol ();
				if (bsB == null || useRasMol && !haveHAtoms) {
				    org.jmol.util.Logger.info ((bsB == null ? "DSSP " : "RasMol") + " pseudo-hbond calculation");
				    this.calcRasmolHydrogenBonds (bsA, bsB, null, false, 2147483647, false, bsHBonds);
				    return -org.jmol.util.BitSetUtil.cardinalityOf (bsHBonds);
				}org.jmol.util.Logger.info (haveHAtoms ? "Standard Hbond calculation" : "Jmol pseudo-hbond calculation");
				var bsCO = null;
				if (!haveHAtoms) {
				    bsCO =  new org.jmol.util.BitSet ();
				    for (var i = bsA.nextSetBit (0); i >= 0; i = bsA.nextSetBit (i + 1)) {
					var atomID = this.atoms[i].atomID;
					switch (atomID) {
					case 64:
					case 4:
					case 14:
					case 15:
					case 16:
					case 17:
					    bsCO.set (i);
					    break;
					}
				    }
				}var maxXYDistance = this.viewer.getHbondsDistanceMax ();
				var minAttachedAngle = (this.viewer.getHbondsAngleMin () * 3.141592653589793 / 180);
				var hbondMax2 = maxXYDistance * maxXYDistance;
				var hbondMin2 = org.jmol.modelset.ModelCollection.hbondMin * org.jmol.modelset.ModelCollection.hbondMin;
				var hxbondMin2 = 1;
				var hxbondMax2 = (maxXYDistance > org.jmol.modelset.ModelCollection.hbondMin ? hbondMin2 : hbondMax2);
				var hxbondMax = (maxXYDistance > org.jmol.modelset.ModelCollection.hbondMin ? org.jmol.modelset.ModelCollection.hbondMin : maxXYDistance);
				var nNew = 0;
				var d2 = 0;
				var v1 =  new org.jmol.util.Vector3f ();
				var v2 =  new org.jmol.util.Vector3f ();
				if (this.showRebondTimes && org.jmol.util.Logger.debugging) org.jmol.util.Logger.startTimer ("hbond");
				var C = null;
				var D = null;
				var iter = this.getSelectedAtomIterator (bsB, false, false, false, false);
				for (var i = bsA.nextSetBit (0); i >= 0; i = bsA.nextSetBit (i + 1)) {
				    var atom = this.atoms[i];
				    var elementNumber = atom.getElementNumber ();
				    var isH = (elementNumber == 1);
				    if (!isH && (haveHAtoms || elementNumber != 7 && elementNumber != 8) || isH && !haveHAtoms) continue;
				    var min2;
				    var max2;
				    var dmax;
				    var firstIsCO;
				    if (isH) {
					var b = atom.bonds;
					if (b == null) continue;
					var isOK = false;
					for (var j = 0; j < b.length && !isOK; j++) {
					    var a2 = b[j].getOtherAtom (atom);
					    var element = a2.getElementNumber ();
					    isOK = (element == 7 || element == 8);
					}
					if (!isOK) continue;
					dmax = hxbondMax;
					min2 = hxbondMin2;
					max2 = hxbondMax2;
					firstIsCO = false;
				    } else {
					dmax = maxXYDistance;
					min2 = hbondMin2;
					max2 = hbondMax2;
					firstIsCO = bsCO.get (i);
				    }this.setIteratorForAtom (iter, -1, atom.index, dmax, null);
				    while (iter.hasNext ()) {
					var atomNear = this.atoms[iter.next ()];
					var elementNumberNear = atomNear.getElementNumber ();
					if (atomNear === atom || !isH && elementNumberNear != 7 && elementNumberNear != 8 || isH && elementNumberNear == 1 || (d2 = iter.foundDistance2 ()) < min2 || d2 > max2 || firstIsCO && bsCO.get (atomNear.index) || atom.isBonded (atomNear)) {
					    continue;
					}if (minAttachedAngle > 0) {
					    v1.sub2 (atom, atomNear);
					    if ((D = org.jmol.modelset.ModelCollection.checkMinAttachedAngle (atom, minAttachedAngle, v1, v2, haveHAtoms)) == null) continue;
					    v1.scale (-1);
					    if ((C = org.jmol.modelset.ModelCollection.checkMinAttachedAngle (atomNear, minAttachedAngle, v1, v2, haveHAtoms)) == null) continue;
					}var energy = 0;
					var bo;
					if (isH && !Float.isNaN (C.x) && !Float.isNaN (D.x)) {
					    bo = 4096;
					    energy = org.jmol.modelset.HBond.getEnergy (Math.sqrt (d2), C.distance (atom), C.distance (D), atomNear.distance (D)) / 1000;
					} else {
					    bo = 2048;
					}bsHBonds.set (this.addHBond (atom, atomNear, bo, energy));
					nNew++;
				    }
				}
				iter.release ();
				this.shapeManager.setShapeSizeBs (1, -2147483648, null, bsHBonds);
				if (this.showRebondTimes) org.jmol.util.Logger.checkTimer ("hbond", false);
				return (haveHAtoms ? nNew : -nNew);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,~B");
	c$.checkMinAttachedAngle = Clazz.defineMethod (c$, "checkMinAttachedAngle", 
						       ($fz = function (atom1, minAngle, v1, v2, haveHAtoms) {
							   var bonds = atom1.bonds;
							   if (bonds == null || bonds.length == 0) return org.jmol.util.Point3f.new3 (NaN, 0, 0);
							   var X = null;
							   var dMin = 3.4028235E38;
							   for (var i = bonds.length; --i >= 0; ) if (bonds[i].isCovalent ()) {
							       var atomA = bonds[i].getOtherAtom (atom1);
							       if (!haveHAtoms && atomA.getElementNumber () == 1) continue;
							       v2.sub2 (atom1, atomA);
							       var d = v2.angle (v1);
							       if (d < minAngle) return null;
							       if (d < dMin) {
								   X = atomA;
								   dMin = d;
							       }}
							   return X;
						       }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,~N,org.jmol.util.Vector3f,org.jmol.util.Vector3f,~B");
	Clazz.defineMethod (c$, "setStructureIndexes", 
			    function () {
				var id;
				var idnew = 0;
				var lastid = -1;
				var imodel = -1;
				var lastmodel = -1;
				for (var i = 0; i < this.atomCount; i++) {
				    if ((imodel = this.atoms[i].modelIndex) != lastmodel) {
					idnew = 0;
					lastmodel = imodel;
					lastid = -1;
				    }if ((id = this.atoms[i].getStrucNo ()) != lastid && id != 0) {
					this.atoms[i].getGroup ().setStrucNo (++idnew);
					lastid = idnew;
				    }}
			    });
	Clazz.defineMethod (c$, "getProteinStructureState", 
			    function (bsAtoms, taintedOnly, needPhiPsi, mode) {
				if (!this.isPDB) return "";
				for (var i = 0; i < this.modelCount; i++) if (this.models[i].isBioModel) return this.models[i].getProteinStructureState (bsAtoms, taintedOnly, needPhiPsi, mode);

				return "";
			    }, "org.jmol.util.BitSet,~B,~B,~N");
	Clazz.defineMethod (c$, "getModelInfoAsString", 
			    function () {
				var sb =  new org.jmol.util.StringXBuilder ().append ("<models count=\"");
				sb.appendI (this.modelCount).append ("\" modelSetHasVibrationVectors=\"").append (this.modelSetHasVibrationVectors () + "\">\n<properties>");
				if (this.modelSetProperties != null) {
				    var e = this.modelSetProperties.propertyNames ();
				    while (e.hasMoreElements ()) {
					var propertyName = e.nextElement ();
					sb.append ("\n <property name=\"").append (propertyName).append ("\" value=").append (org.jmol.util.Escape.escapeStr (this.modelSetProperties.getProperty (propertyName))).append (" />");
				    }
				    sb.append ("\n</properties>");
				}for (var i = 0; i < this.modelCount; ++i) {
				    sb.append ("\n<model index=\"").appendI (i).append ("\" n=\"").append (this.getModelNumberDotted (i)).append ("\" id=").append (org.jmol.util.Escape.escapeStr ("" + this.getModelAuxiliaryInfoValue (i, "modelID")));
				    var ib = this.getBaseModelIndex (i);
				    if (ib != i) sb.append (" baseModelId=").append (org.jmol.util.Escape.escape (this.getModelAuxiliaryInfoValue (ib, "jdxModelID")));
				    sb.append (" name=").append (org.jmol.util.Escape.escapeStr (this.getModelName (i))).append (" title=").append (org.jmol.util.Escape.escapeStr (this.getModelTitle (i))).append (" hasVibrationVectors=\"").appendB (this.modelHasVibrationVectors (i)).append ("\" />");
				}
				sb.append ("\n</models>");
				return sb.toString ();
			    });
	Clazz.defineMethod (c$, "getSymmetryInfoAsString", 
			    function () {
				var sb =  new org.jmol.util.StringXBuilder ().append ("Symmetry Information:");
				for (var i = 0; i < this.modelCount; ++i) sb.append ("\nmodel #").append (this.getModelNumberDotted (i)).append ("; name=").append (this.getModelName (i)).append ("\n").append (this.getSymmetryInfoAsStringForModel (i));

				return sb.toString ();
			    });
	Clazz.defineMethod (c$, "getAtomsConnected", 
			    function (min, max, intType, bs) {
				var bsResult =  new org.jmol.util.BitSet ();
				var nBonded =  Clazz.newIntArray (this.atomCount, 0);
				var i;
				var ishbond = (intType == 30720);
				var isall = (intType == 65535);
				for (var ibond = 0; ibond < this.bondCount; ibond++) {
				    var bond = this.bonds[ibond];
				    if (isall || bond.is (intType) || ishbond && bond.isHydrogen ()) {
					if (bs.get (bond.atom1.index)) {
					    nBonded[i = bond.atom2.index]++;
					    bsResult.set (i);
					}if (bs.get (bond.atom2.index)) {
					    nBonded[i = bond.atom1.index]++;
					    bsResult.set (i);
					}}}
				var nonbonded = (min == 0);
				for (i = this.atomCount; --i >= 0; ) {
				    var n = nBonded[i];
				    if (n < min || n > max) bsResult.clear (i);
				    else if (nonbonded && n == 0) bsResult.set (i);
				}
				return bsResult;
			    }, "~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getModelExtract", 
			    function (bs, doTransform, isModelKit, type) {
				var asV3000 = type.equalsIgnoreCase ("V3000");
				var asSDF = type.equalsIgnoreCase ("SDF");
				var asXYZVIB = type.equalsIgnoreCase ("XYZVIB");
				var asChemDoodle = type.equalsIgnoreCase ("CD");
				var mol =  new org.jmol.util.StringXBuilder ();
				if (!asXYZVIB && !asChemDoodle) {
				    mol.append (isModelKit ? "Jmol Model Kit" : this.viewer.getFullPathName ().$replace ('\\', '/'));
				    var version = org.jmol.viewer.Viewer.getJmolVersion ();
				    var c = java.util.Calendar.getInstance ();
				    mol.append ("\n__Jmol-").append (version.substring (0, 2));
				    org.jmol.util.TextFormat.rFill (mol, "_00", "" + (1 + c.get (2)));
				    org.jmol.util.TextFormat.rFill (mol, "00", "" + c.get (5));
				    mol.append (("" + c.get (1)).substring (2, 4));
				    org.jmol.util.TextFormat.rFill (mol, "00", "" + c.get (11));
				    org.jmol.util.TextFormat.rFill (mol, "00", "" + c.get (12));
				    mol.append ("3D 1   1.00000     0.00000     0");
				    mol.append ("\nJmol version ").append (org.jmol.viewer.Viewer.getJmolVersion ()).append (" EXTRACT: ").append (org.jmol.util.Escape.escape (bs)).append ("\n");
				}var bsAtoms = org.jmol.util.BitSetUtil.copy (bs);
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) if (doTransform && this.atoms[i].isDeleted ()) bsAtoms.clear (i);

				var bsBonds = this.getCovalentBondsForAtoms (bsAtoms);
				if (!asXYZVIB && bsAtoms.cardinality () == 0) return "";
				var isOK = true;
				var q = (doTransform ? this.viewer.getRotationQuaternion () : null);
				if (asSDF) {
				    var header = mol.toString ();
				    mol =  new org.jmol.util.StringXBuilder ();
				    var bsModels = this.getModelBitSet (bsAtoms, true);
				    for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) {
					mol.append (header);
					var bsTemp = org.jmol.util.BitSetUtil.copy (bsAtoms);
					bsTemp.and (this.getModelAtomBitSetIncludingDeleted (i, false));
					bsBonds = this.getCovalentBondsForAtoms (bsTemp);
					if (!(isOK = this.addMolFile (mol, bsTemp, bsBonds, false, false, q))) break;
					mol.append ("$$$$\n");
				    }
				} else if (asXYZVIB) {
				    var tokens1 = org.jmol.modelset.LabelToken.compile (this.viewer, "%-2e %10.5x %10.5y %10.5z %10.5vx %10.5vy %10.5vz\n", '\0', null);
				    var tokens2 = org.jmol.modelset.LabelToken.compile (this.viewer, "%-2e %10.5x %10.5y %10.5z\n", '\0', null);
				    var bsModels = this.getModelBitSet (bsAtoms, true);
				    for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) {
					var bsTemp = org.jmol.util.BitSetUtil.copy (bsAtoms);
					bsTemp.and (this.getModelAtomBitSetIncludingDeleted (i, false));
					if (bsTemp.cardinality () == 0) continue;
					mol.appendI (bsTemp.cardinality ()).appendC ('\n');
					var props = this.models[i].properties;
					mol.append ("Model[" + (i + 1) + "]: ");
					if (this.frameTitles[i] != null && this.frameTitles[i].length > 0) {
					    mol.append (this.frameTitles[i].$replace ('\n', ' '));
					} else if (props == null) {
					    mol.append ("Jmol " + org.jmol.viewer.Viewer.getJmolVersion ());
					} else {
					    var sb =  new org.jmol.util.StringXBuilder ();
					    var e = props.propertyNames ();
					    var path = null;
					    while (e.hasMoreElements ()) {
						var propertyName = e.nextElement ();
						if (propertyName.equals (".PATH")) path = props.getProperty (propertyName);
						else sb.append (";").append (propertyName).append ("=").append (props.getProperty (propertyName));
					    }
					    if (path != null) sb.append (";PATH=").append (path);
					    path = sb.substring (sb.length () > 0 ? 1 : 0);
					    mol.append (path.$replace ('\n', ' '));
					}mol.appendC ('\n');
					for (var j = bsTemp.nextSetBit (0); j >= 0; j = bsTemp.nextSetBit (j + 1)) mol.append (org.jmol.modelset.LabelToken.formatLabelAtomArray (this.viewer, this.atoms[j], (this.getVibrationVector (j, false) == null ? tokens2 : tokens1), '\0', null));

				    }
				} else {
				    isOK = this.addMolFile (mol, bsAtoms, bsBonds, asV3000, asChemDoodle, q);
				}return (isOK ? mol.toString () : "ERROR: Too many atoms or bonds -- use V3000 format.");
			    }, "org.jmol.util.BitSet,~B,~B,~S");
	Clazz.defineMethod (c$, "addMolFile", 
			    ($fz = function (mol, bsAtoms, bsBonds, asV3000, asChemDoodle, q) {
				var nAtoms = bsAtoms.cardinality ();
				var nBonds = bsBonds.cardinality ();
				if (!asV3000 && !asChemDoodle && (nAtoms > 999 || nBonds > 999)) return false;
				var atomMap =  Clazz.newIntArray (this.atomCount, 0);
				var pTemp =  new org.jmol.util.Point3f ();
				if (asV3000) {
				    mol.append ("  0  0  0  0  0  0            999 V3000");
				} else if (asChemDoodle) {
				    mol.append ("{\"mol\":{\"scaling\":[20,-20,20],\"a\":[");
				} else {
				    org.jmol.util.TextFormat.rFill (mol, "   ", "" + nAtoms);
				    org.jmol.util.TextFormat.rFill (mol, "   ", "" + nBonds);
				    mol.append ("  0  0  0  0              1 V2000");
				}if (!asChemDoodle) mol.append ("\n");
				if (asV3000) {
				    mol.append ("M  V30 BEGIN CTAB\nM  V30 COUNTS ").appendI (nAtoms).append (" ").appendI (nBonds).append (" 0 0 0\n").append ("M  V30 BEGIN ATOM\n");
				}for (var i = bsAtoms.nextSetBit (0), n = 0; i >= 0; i = bsAtoms.nextSetBit (i + 1)) this.getAtomRecordMOL (mol, atomMap[i] = ++n, this.atoms[i], q, pTemp, asV3000, asChemDoodle);

				if (asV3000) {
				    mol.append ("M  V30 END ATOM\nM  V30 BEGIN BOND\n");
				} else if (asChemDoodle) {
				    mol.append ("],\"b\":[");
				}for (var i = bsBonds.nextSetBit (0), n = 0; i >= 0; i = bsBonds.nextSetBit (i + 1)) this.getBondRecordMOL (mol, ++n, this.bonds[i], atomMap, asV3000, asChemDoodle);

				if (asV3000) {
				    mol.append ("M  V30 END BOND\nM  V30 END CTAB\n");
				}if (asChemDoodle) mol.append ("]}}");
				else {
				    mol.append ("M  END\n");
				}if (!asChemDoodle && !asV3000) {
				    var pc = this.getPartialCharges ();
				    if (pc != null) {
					mol.append ("> <JMOL_PARTIAL_CHARGES>\n").appendI (nAtoms).appendC ('\n');
					for (var i = bsAtoms.nextSetBit (0), n = 0; i >= 0; i = bsAtoms.nextSetBit (i + 1)) mol.appendI (++n).append (" ").appendF (pc[i]).appendC ('\n');

				    }}return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,org.jmol.util.Quaternion");
	Clazz.defineMethod (c$, "getCovalentBondsForAtoms", 
			    ($fz = function (bsAtoms) {
				var bsBonds =  new org.jmol.util.BitSet ();
				for (var i = 0; i < this.bondCount; i++) {
				    var bond = this.bonds[i];
				    if (bsAtoms.get (bond.atom1.index) && bsAtoms.get (bond.atom2.index) && bond.isCovalent ()) bsBonds.set (i);
				}
				return bsBonds;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomRecordMOL", 
			    ($fz = function (mol, n, a, q, pTemp, asV3000, asChemDoodle) {
				if (this.models[a.modelIndex].isTrajectory) a.setFractionalCoordPt (this.ptTemp, this.trajectorySteps.get (a.modelIndex)[a.index - this.models[a.modelIndex].firstAtomIndex], true);
				else pTemp.setT (a);
				if (q != null) q.transformP2 (pTemp, pTemp);
				var elemNo = a.getElementNumber ();
				var sym = (a.isDeleted () ? "Xx" : org.jmol.util.Elements.elementSymbolFromNumber (elemNo));
				var iso = a.getIsotopeNumber ();
				var charge = a.getFormalCharge ();
				if (asV3000) {
				    mol.append ("M  V30 ").appendI (n).append (" ").append (sym).append (" ").appendF (pTemp.x).append (" ").appendF (pTemp.y).append (" ").appendF (pTemp.z).append (" 0");
				    if (charge != 0) mol.append (" CHG=").appendI (charge);
				    if (iso != 0) mol.append (" MASS=").appendI (iso);
				    mol.append ("\n");
				} else if (asChemDoodle) {
				    if (n != 1) mol.append (",");
				    mol.append ("{");
				    if (a.getElementNumber () != 6) mol.append ("\"l\":\"").append (a.getElementSymbol ()).append ("\",");
				    if (charge != 0) mol.append ("\"c\":").appendI (charge).append (",");
				    if (iso != 0 && iso != org.jmol.util.Elements.getNaturalIsotope (elemNo)) mol.append ("\"m\":").appendI (iso).append (",");
				    mol.append ("\"x\":").appendF (a.x * 20).append (",\"y\":").appendF (-a.y * 20).append (",\"z\":").appendF (a.z * 20).append ("}");
				} else {
				    mol.append (org.jmol.util.TextFormat.sprintf ("%10.5p%10.5p%10.5p", "p", [pTemp]));
				    mol.append (" ").append (sym);
				    if (sym.length == 1) mol.append (" ");
				    if (iso > 0) iso -= org.jmol.util.Elements.getNaturalIsotope (a.getElementNumber ());
				    mol.append (" ");
				    org.jmol.util.TextFormat.rFill (mol, "  ", "" + iso);
				    org.jmol.util.TextFormat.rFill (mol, "   ", "" + (charge == 0 ? 0 : 4 - charge));
				    mol.append ("  0  0  0  0\n");
				}}, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~N,org.jmol.modelset.Atom,org.jmol.util.Quaternion,org.jmol.util.Point3f,~B,~B");
	Clazz.defineMethod (c$, "getBondRecordMOL", 
			    ($fz = function (mol, n, b, atomMap, asV3000, asChemDoodle) {
				var a1 = atomMap[b.atom1.index];
				var a2 = atomMap[b.atom2.index];
				var order = b.getValence ();
				if (order > 3) order = 1;
				switch (b.order & -131073) {
				case 515:
				    order = (asChemDoodle ? 2 : 4);
				    break;
				case 66:
				    order = (asChemDoodle ? 1 : 5);
				    break;
				case 513:
				    order = (asChemDoodle ? 1 : 6);
				    break;
				case 514:
				    order = (asChemDoodle ? 2 : 7);
				    break;
				case 33:
				    order = (asChemDoodle ? 1 : 8);
				    break;
				}
				if (asV3000) {
				    mol.append ("M  V30 ").appendI (n).append (" ").appendI (order).append (" ").appendI (a1).append (" ").appendI (a2).appendC ('\n');
				} else if (asChemDoodle) {
				    if (n != 1) mol.append (",");
				    mol.append ("{\"b\":").appendI (a1 - 1).append (",\"e\":").appendI (a2 - 1);
				    if (order != 1) mol.append (",\"o\":").appendI (order);
				    mol.append ("}");
				} else {
				    org.jmol.util.TextFormat.rFill (mol, "   ", "" + a1);
				    org.jmol.util.TextFormat.rFill (mol, "   ", "" + a2);
				    mol.append ("  ").appendI (order).append ("  0  0  0\n");
				}}, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~N,org.jmol.modelset.Bond,~A,~B,~B");
	Clazz.defineMethod (c$, "getChimeInfo", 
			    function (tok, bs) {
				switch (tok) {
				case 1073741982:
				    break;
				case 1073741864:
				    return this.getBasePairInfo (bs);
				default:
				    return Clazz.superCall (this, org.jmol.modelset.ModelCollection, "getChimeInfo", [tok, bs]);
				}
				var sb =  new org.jmol.util.StringXBuilder ();
				this.models[0].getChimeInfo (sb, 0);
				return sb.appendC ('\n').toString ().substring (1);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getModelFileInfo", 
			    function (frames) {
				var sb =  new org.jmol.util.StringXBuilder ();
				for (var i = 0; i < this.modelCount; ++i) {
				    if (frames != null && !frames.get (i)) continue;
				    var s = "[\"" + this.getModelNumberDotted (i) + "\"] = ";
				    sb.append ("\n\nfile").append (s).append (org.jmol.util.Escape.escapeStr (this.getModelFileName (i)));
				    var id = this.getModelAuxiliaryInfoValue (i, "modelID");
				    if (id != null) sb.append ("\nid").append (s).append (org.jmol.util.Escape.escapeStr (id));
				    sb.append ("\ntitle").append (s).append (org.jmol.util.Escape.escapeStr (this.getModelTitle (i)));
				    sb.append ("\nname").append (s).append (org.jmol.util.Escape.escapeStr (this.getModelName (i)));
				}
				return sb.toString ();
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAuxiliaryInfo", 
			    function (bsModels) {
				var info = this.modelSetAuxiliaryInfo;
				if (info == null) return null;
				var models =  new java.util.ArrayList ();
				for (var i = 0; i < this.modelCount; ++i) {
				    if (bsModels != null && !bsModels.get (i)) {
					continue;
				    }var modelinfo = this.getModelAuxiliaryInfo (i);
				    models.add (modelinfo);
				}
				info.put ("models", models);
				return info;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAllAtomInfo", 
			    function (bs) {
				var V =  new java.util.ArrayList ();
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    V.add (this.getAtomInfoLong (i));
				}
				return V;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomIdentityInfo", 
			    function (i, info) {
				info.put ("_ipt", Integer.$valueOf (i));
				info.put ("atomIndex", Integer.$valueOf (i));
				info.put ("atomno", Integer.$valueOf (this.getAtomNumber (i)));
				info.put ("info", this.getAtomInfo (i, null));
				info.put ("sym", this.getElementSymbol (i));
			    }, "~N,java.util.Map");
	Clazz.defineMethod (c$, "getAtomInfoLong", 
			    ($fz = function (i) {
				var atom = this.atoms[i];
				var info =  new java.util.Hashtable ();
				this.getAtomIdentityInfo (i, info);
				info.put ("element", this.getElementName (i));
				info.put ("elemno", Integer.$valueOf (this.getElementNumber (i)));
				info.put ("x", Float.$valueOf (atom.x));
				info.put ("y", Float.$valueOf (atom.y));
				info.put ("z", Float.$valueOf (atom.z));
				info.put ("coord", org.jmol.util.Point3f.newP (atom));
				if (this.vibrationVectors != null && this.vibrationVectors[i] != null) {
				    info.put ("vibVector", org.jmol.util.Vector3f.newV (this.vibrationVectors[i]));
				}info.put ("bondCount", Integer.$valueOf (atom.getCovalentBondCount ()));
				info.put ("radius", Float.$valueOf ((atom.getRasMolRadius () / 120.0)));
				info.put ("model", atom.getModelNumberForLabel ());
				info.put ("shape", org.jmol.modelset.Atom.atomPropertyString (this.viewer, atom, 1087373323));
				info.put ("visible", Boolean.$valueOf (atom.isVisible (0)));
				info.put ("clickabilityFlags", Integer.$valueOf (atom.clickabilityFlags));
				info.put ("visibilityFlags", Integer.$valueOf (atom.shapeVisibilityFlags));
				info.put ("spacefill", Float.$valueOf (atom.getRadius ()));
				var strColor = org.jmol.util.Escape.escapeColor (this.viewer.getColorArgbOrGray (atom.colixAtom));
				if (strColor != null) info.put ("color", strColor);
				info.put ("colix", Integer.$valueOf (atom.colixAtom));
				var isTranslucent = atom.isTranslucent ();
				if (isTranslucent) info.put ("translucent", Boolean.$valueOf (isTranslucent));
				info.put ("formalCharge", Integer.$valueOf (atom.getFormalCharge ()));
				info.put ("partialCharge", Float.$valueOf (atom.getPartialCharge ()));
				var d = atom.getSurfaceDistance100 () / 100;
				if (d >= 0) info.put ("surfaceDistance", Float.$valueOf (d));
				if (this.models[atom.modelIndex].isBioModel) {
				    info.put ("resname", atom.getGroup3 (false));
				    var seqNum = atom.getSeqNumber ();
				    var insCode = atom.getInsertionCode ();
				    if (seqNum > 0) info.put ("resno", Integer.$valueOf (seqNum));
				    if (insCode.charCodeAt (0) != 0) info.put ("insertionCode", "" + insCode);
				    var chainID = atom.getChainID ();
				    info.put ("name", this.getAtomName (i));
				    info.put ("chain", (chainID == '\0' ? "" : "" + chainID));
				    info.put ("atomID", Integer.$valueOf (atom.atomID));
				    info.put ("groupID", Integer.$valueOf (atom.getGroupID ()));
				    if (atom.alternateLocationID != '\0') info.put ("altLocation", "" + atom.alternateLocationID);
				    info.put ("structure", Integer.$valueOf (atom.getProteinStructureType ().getId ()));
				    info.put ("polymerLength", Integer.$valueOf (atom.getPolymerLength ()));
				    info.put ("occupancy", Integer.$valueOf (atom.getOccupancy100 ()));
				    var temp = atom.getBfactor100 ();
				    info.put ("temp", Integer.$valueOf (Clazz.doubleToInt (temp / 100)));
				}return info;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getAllBondInfo", 
			    function (bs) {
				var v =  new java.util.ArrayList ();
				if (Clazz.instanceOf (bs, org.jmol.modelset.Bond.BondSet)) {
				    for (var i = bs.nextSetBit (0); i >= 0 && i < this.bondCount; i = bs.nextSetBit (i + 1)) v.add (this.getBondInfo (i));

				    return v;
				}var thisAtom = (bs.cardinality () == 1 ? bs.nextSetBit (0) : -1);
				for (var i = 0; i < this.bondCount; i++) {
				    if (thisAtom >= 0 ? (this.bonds[i].atom1.index == thisAtom || this.bonds[i].atom2.index == thisAtom) : bs.get (this.bonds[i].atom1.index) && bs.get (this.bonds[i].atom2.index)) {
					v.add (this.getBondInfo (i));
				    }}
				return v;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getBondInfo", 
			    ($fz = function (i) {
				var bond = this.bonds[i];
				var atom1 = bond.atom1;
				var atom2 = bond.atom2;
				var info =  new java.util.Hashtable ();
				info.put ("_bpt", Integer.$valueOf (i));
				var infoA =  new java.util.Hashtable ();
				this.getAtomIdentityInfo (atom1.index, infoA);
				var infoB =  new java.util.Hashtable ();
				this.getAtomIdentityInfo (atom2.index, infoB);
				info.put ("atom1", infoA);
				info.put ("atom2", infoB);
				info.put ("order", Float.$valueOf (org.jmol.util.JmolEdge.getBondOrderNumberFromOrder (this.bonds[i].order)));
				info.put ("radius", Float.$valueOf ((bond.mad / 2000.)));
				info.put ("length_Ang", Float.$valueOf (atom1.distance (atom2)));
				info.put ("visible", Boolean.$valueOf (bond.shapeVisibilityFlags != 0));
				var strColor = org.jmol.util.Escape.escapeColor (this.viewer.getColorArgbOrGray (bond.colix));
				if (strColor != null) info.put ("color", strColor);
				info.put ("colix", Integer.$valueOf (bond.colix));
				var isTranslucent = bond.isTranslucent ();
				if (isTranslucent) info.put ("translucent", Boolean.$valueOf (isTranslucent));
				return info;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getAllChainInfo", 
			    function (bs) {
				var finalInfo =  new java.util.Hashtable ();
				var modelVector =  new java.util.ArrayList ();
				for (var i = 0; i < this.modelCount; ++i) {
				    var modelInfo =  new java.util.Hashtable ();
				    var info = this.getChainInfo (i, bs);
				    if (info.size () > 0) {
					modelInfo.put ("modelIndex", Integer.$valueOf (i));
					modelInfo.put ("chains", info);
					modelVector.add (modelInfo);
				    }}
				finalInfo.put ("models", modelVector);
				return finalInfo;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getChainInfo", 
			    ($fz = function (modelIndex, bs) {
				var model = this.models[modelIndex];
				var nChains = model.getChainCount (true);
				var infoChains =  new java.util.ArrayList ();
				for (var i = 0; i < nChains; i++) {
				    var chain = model.getChainAt (i);
				    var infoChain =  new java.util.ArrayList ();
				    var nGroups = chain.getGroupCount ();
				    var arrayName =  new java.util.Hashtable ();
				    for (var igroup = 0; igroup < nGroups; igroup++) {
					var group = chain.getGroup (igroup);
					if (bs.get (group.firstAtomIndex)) infoChain.add (group.getGroupInfo (igroup));
				    }
				    if (!infoChain.isEmpty ()) {
					arrayName.put ("residues", infoChain);
					infoChains.add (arrayName);
				    }}
				return infoChains;
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAllPolymerInfo", 
			    function (bs) {
				var finalInfo =  new java.util.Hashtable ();
				var modelVector =  new java.util.ArrayList ();
				for (var i = 0; i < this.modelCount; ++i) if (this.models[i].isBioModel) this.models[i].getAllPolymerInfo (bs, finalInfo, modelVector);

				finalInfo.put ("models", modelVector);
				return finalInfo;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getUnitCellInfoText", 
			    function () {
				var modelIndex = this.viewer.getCurrentModelIndex ();
				if (modelIndex < 0) return "no single current model";
				var c = this.getUnitCell (modelIndex);
				return (c == null ? "not applicable" : c.getUnitCellInfo ());
			    });
	Clazz.defineMethod (c$, "getSpaceGroupInfo", 
			    function (modelIndex, spaceGroup, symOp, pt1, pt2, drawID) {
				var strOperations = null;
				var info = null;
				var cellInfo = null;
				var infolist = null;
				if (spaceGroup == null) {
				    if (modelIndex <= 0) modelIndex = (Clazz.instanceOf (pt1, org.jmol.modelset.Atom) ? (pt1).modelIndex : this.viewer.getCurrentModelIndex ());
				    if (modelIndex < 0) strOperations = "no single current model";
				    else if ((cellInfo = this.getUnitCell (modelIndex)) == null) strOperations = "not applicable";
				    if (strOperations != null) {
					info =  new java.util.Hashtable ();
					info.put ("spaceGroupInfo", strOperations);
					info.put ("symmetryInfo", "");
				    } else if (pt1 == null && drawID == null && symOp != 0) {
					info = this.getModelAuxiliaryInfoValue (modelIndex, "spaceGroupInfo");
				    }if (info != null) return info;
				    info =  new java.util.Hashtable ();
				    if (pt1 == null && drawID == null && symOp == 0) this.setModelAuxiliaryInfo (modelIndex, "spaceGroupInfo", info);
				    spaceGroup = cellInfo.getSpaceGroupName ();
				    var list = cellInfo.getSymmetryOperations ();
				    if (list == null) {
					strOperations = "\n no symmetry operations employed";
				    } else {
					this.getSymTemp (true);
					this.symTemp.setSpaceGroup (false);
					strOperations = "\n" + list.length + " symmetry operations employed:";
					infolist =  new Array (list.length);
					for (var i = 0; i < list.length; i++) {
					    var iSym = this.symTemp.addSpaceGroupOperation ("=" + list[i], i + 1);
					    if (iSym < 0) continue;
					    infolist[i] = (symOp > 0 && symOp - 1 != iSym ? null : this.symTemp.getSymmetryOperationDescription (iSym, cellInfo, pt1, pt2, drawID));
					    if (infolist[i] != null) strOperations += "\n" + (i + 1) + "\t" + infolist[i][0] + "\t" + infolist[i][2];
					}
				    }} else {
					info =  new java.util.Hashtable ();
				    }info.put ("spaceGroupName", spaceGroup);
				this.getSymTemp (true);
				var data = this.symTemp.getSpaceGroupInfo (spaceGroup, cellInfo);
				if (infolist != null) {
				    info.put ("operations", infolist);
				    info.put ("symmetryInfo", strOperations);
				}if (data == null) data = "could not identify space group from name: " + spaceGroup + "\nformat: show spacegroup \"2\" or \"P 2c\" " + "or \"C m m m\" or \"x, y, z;-x ,-y, -z\"";
				info.put ("spaceGroupInfo", data);
				return info;
			    }, "~N,~S,~N,org.jmol.util.Point3f,org.jmol.util.Point3f,~S");
	Clazz.defineMethod (c$, "getSymmetryInfo", 
			    function (bsAtoms, xyz, op, pt, pt2, id, type) {
				var iModel = -1;
				if (bsAtoms == null) {
				    iModel = this.viewer.getCurrentModelIndex ();
				    if (iModel < 0) return "";
				    bsAtoms = this.viewer.getModelUndeletedAtomsBitSet (iModel);
				}var iAtom = bsAtoms.nextSetBit (0);
				if (iAtom < 0) return "";
				iModel = this.atoms[iAtom].modelIndex;
				var uc = this.getUnitCell (iModel);
				if (uc == null) return "";
				if (pt2 != null) return this.getSymmetryOperation (iModel, null, op, pt, pt2, (id == null ? "sym" : id), type == 1826248715);
				if (xyz == null) {
				    var ops = uc.getSymmetryOperations ();
				    if (ops == null || op == 0 || Math.abs (op) > ops.length) return "";
				    if (op > 0) {
					xyz = ops[op - 1];
				    } else {
					xyz = ops[-1 - op];
				    }} else {
					op = 0;
				    }this.getSymTemp (false);
				this.symTemp.setSpaceGroup (false);
				var iSym = this.symTemp.addSpaceGroupOperation ((op < 0 ? "!" : "=") + xyz, Math.abs (op));
				if (iSym < 0) return "";
				this.symTemp.setUnitCell (uc.getNotionalUnitCell ());
				var info;
				pt = org.jmol.util.Point3f.newP (pt == null ? this.atoms[iAtom] : pt);
				if (type == 135266320) {
				    uc.toFractional (pt, false);
				    if (Float.isNaN (pt.x)) return "";
				    var sympt =  new org.jmol.util.Point3f ();
				    this.symTemp.newSpaceGroupPoint (iSym, pt, sympt, 0, 0, 0);
				    this.symTemp.toCartesian (sympt, false);
				    return sympt;
				}info = this.symTemp.getSymmetryOperationDescription (iSym, uc, pt, pt2, (id == null ? "sym" : id));
				var ang = (info[9]).intValue ();
				switch (type) {
				case 135266306:
				    return info;
				case 1073742001:
				    var sinfo = [info[0], info[1], info[2], org.jmol.util.Escape.escapePt (info[4]), org.jmol.util.Escape.escapePt (info[5]), org.jmol.util.Escape.escapePt (info[6]), org.jmol.util.Escape.escapePt (info[7]), org.jmol.util.Escape.escapePt (info[8]), "" + info[9], "" + org.jmol.util.Escape.escape (info[10])];
				    return sinfo;
				case 1073741982:
				    return info[0];
				default:
				case 1826248715:
				    return info[2];
				case 135176:
				    return info[3];
				case 1073742178:
				    return info[5];
				case 12289:
				    return info[6];
				case 135266320:
				    return info[7];
				case 1073741854:
				case 135266319:
				    return ((ang == 0) == (type == 135266319) ? info[8] : null);
				case 135266305:
				    return info[9];
				case 12:
				    return info[10];
				}
			    }, "org.jmol.util.BitSet,~S,~N,org.jmol.util.Point3f,org.jmol.util.Point3f,~S,~N");
	Clazz.defineMethod (c$, "getSymTemp", 
			    ($fz = function (forceNew) {
				if (this.symTemp == null || forceNew) this.symTemp = org.jmol.api.Interface.getOptionInterface ("symmetry.Symmetry");
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "deleteModel", 
			    function (modelIndex, firstAtomIndex, nAtoms, bsAtoms, bsBonds) {
				if (modelIndex < 0) {
				    this.validateBspf (false);
				    this.bsAll = null;
				    this.resetMolecules ();
				    this.isBbcageDefault = false;
				    this.calcBoundBoxDimensions (null, 1);
				    return;
				}this.modelNumbers = org.jmol.util.ArrayUtil.deleteElements (this.modelNumbers, modelIndex, 1);
				this.modelFileNumbers = org.jmol.util.ArrayUtil.deleteElements (this.modelFileNumbers, modelIndex, 1);
				this.modelNumbersForAtomLabel = org.jmol.util.ArrayUtil.deleteElements (this.modelNumbersForAtomLabel, modelIndex, 1);
				this.modelNames = org.jmol.util.ArrayUtil.deleteElements (this.modelNames, modelIndex, 1);
				this.frameTitles = org.jmol.util.ArrayUtil.deleteElements (this.frameTitles, modelIndex, 1);
				this.thisStateModel = -1;
				var group3Lists = this.getModelSetAuxiliaryInfoValue ("group3Lists");
				var group3Counts = this.getModelSetAuxiliaryInfoValue ("group3Counts");
				var ptm = modelIndex + 1;
				if (group3Lists != null && group3Lists[ptm] != null) {
				    for (var i = Clazz.doubleToInt (group3Lists[ptm].length / 6); --i >= 0; ) if (group3Counts[ptm][i] > 0) {
					group3Counts[0][i] -= group3Counts[ptm][i];
					if (group3Counts[0][i] == 0) group3Lists[0] = group3Lists[0].substring (0, i * 6) + ",[" + group3Lists[0].substring (i * 6 + 2);
				    }
				}if (group3Lists != null) {
				    this.modelSetAuxiliaryInfo.put ("group3Lists", org.jmol.util.ArrayUtil.deleteElements (group3Lists, modelIndex, 1));
				    this.modelSetAuxiliaryInfo.put ("group3Counts", org.jmol.util.ArrayUtil.deleteElements (group3Counts, modelIndex, 1));
				}if (this.unitCells != null) {
				    this.unitCells = org.jmol.util.ArrayUtil.deleteElements (this.unitCells, modelIndex, 1);
				}for (var i = this.stateScripts.size (); --i >= 0; ) {
				    if (!this.stateScripts.get (i).deleteAtoms (modelIndex, bsBonds, bsAtoms)) {
					this.stateScripts.remove (i);
				    }}
				this.deleteModelAtoms (firstAtomIndex, nAtoms, bsAtoms);
				this.viewer.deleteModelAtoms (firstAtomIndex, nAtoms, bsAtoms);
			    }, "~N,~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getMoInfo", 
			    function (modelIndex) {
				var sb =  new org.jmol.util.StringXBuilder ();
				for (var m = 0; m < this.modelCount; m++) {
				    if (modelIndex >= 0 && m != modelIndex) {
					continue;
				    }var moData = this.viewer.getModelAuxiliaryInfoValue (m, "moData");
				    if (moData == null) {
					continue;
				    }var mos = (moData.get ("mos"));
				    var nOrb = (mos == null ? 0 : mos.size ());
				    if (nOrb == 0) {
					continue;
				    }for (var i = nOrb; --i >= 0; ) {
					var mo = mos.get (i);
					var type = mo.get ("type");
					if (type == null) {
					    type = "";
					}var units = mo.get ("energyUnits");
					if (units == null) {
					    units = "";
					}var occ = mo.get ("occupancy");
					if (occ != null) {
					    type = "occupancy " + occ.floatValue () + " " + type;
					}var sym = mo.get ("symmetry");
					if (sym != null) {
					    type += sym;
					}var energy = "" + mo.get ("energy");
					if (Float.isNaN (org.jmol.util.Parser.parseFloatStr (energy))) sb.append (org.jmol.util.TextFormat.sprintf ("model %-2s;  mo %-2i # %s\n", "sis", [this.getModelNumberDotted (m), Integer.$valueOf (i + 1), type]));
					else sb.append (org.jmol.util.TextFormat.sprintf ("model %-2s;  mo %-2i # energy %-8.3f %s %s\n", "sifss", [this.getModelNumberDotted (m), Integer.$valueOf (i + 1), mo.get ("energy"), units, type]));
				    }
				}
				return sb.toString ();
			    }, "~N");
	Clazz.defineMethod (c$, "assignAtom", 
			    function (atomIndex, type, autoBond) {
				if (type == null) type = "C";
				var atom = this.atoms[atomIndex];
				var bs =  new org.jmol.util.BitSet ();
				var wasH = (atom.getElementNumber () == 1);
				var atomicNumber = org.jmol.util.Elements.elementNumberFromSymbol (type, true);
				var isDelete = false;
				if (atomicNumber > 0) {
				    this.setElement (atom, atomicNumber);
				    this.viewer.setShapeSize (0, this.viewer.getDefaultRadiusData (), org.jmol.util.BitSetUtil.newAndSetBit (atomIndex));
				    this.setAtomName (atomIndex, type + atom.getAtomNumber ());
				    if (!this.models[atom.modelIndex].isModelKit) this.taintAtom (atomIndex, 0);
				} else if (type.equals ("Pl")) {
				    atom.setFormalCharge (atom.getFormalCharge () + 1);
				} else if (type.equals ("Mi")) {
				    atom.setFormalCharge (atom.getFormalCharge () - 1);
				} else if (type.equals ("X")) {
				    isDelete = true;
				} else if (!type.equals (".")) {
				    return;
				}this.removeUnnecessaryBonds (atom, isDelete);
				var dx = 0;
				if (atom.getCovalentBondCount () == 1) if (wasH) {
				    dx = 1.50;
				} else if (!wasH && atomicNumber == 1) {
				    dx = 1.0;
				}if (dx != 0) {
				    var v = org.jmol.util.Vector3f.newV (atom);
				    v.sub (this.atoms[atom.getBondedAtomIndex (0)]);
				    var d = v.length ();
				    v.normalize ();
				    v.scale (dx - d);
				    this.setAtomCoordRelative (atomIndex, v.x, v.y, v.z);
				}var bsA = org.jmol.util.BitSetUtil.newAndSetBit (atomIndex);
				if (atomicNumber != 1 && autoBond) {
				    this.validateBspf (false);
				    bs = this.getAtomsWithinBs (1.0, bsA, false, null);
				    bs.andNot (bsA);
				    if (bs.nextSetBit (0) >= 0) this.viewer.deleteAtoms (bs, false);
				    bs = this.viewer.getModelUndeletedAtomsBitSet (atom.modelIndex);
				    bs.andNot (this.getAtomBitsMaybeDeleted (1613758476, null));
				    this.makeConnections (0.1, 1.8, 1, 1073741904, bsA, bs, null, false, false, 0);
				}this.viewer.addHydrogens (bsA, false, true);
			    }, "~N,~S,~B");
	Clazz.defineMethod (c$, "deleteAtoms", 
			    function (bs) {
				if (bs == null) return;
				var bsBonds =  new org.jmol.util.BitSet ();
				for (var i = bs.nextSetBit (0); i >= 0 && i < this.atomCount; i = bs.nextSetBit (i + 1)) this.atoms[i].$delete (bsBonds);

				for (var i = 0; i < this.modelCount; i++) {
				    this.models[i].bsAtomsDeleted.or (bs);
				    this.models[i].bsAtomsDeleted.and (this.models[i].bsAtoms);
				}
				this.deleteBonds (bsBonds, false);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "appendLoadStates", 
			    function (cmds) {
				var commands =  new org.jmol.util.StringXBuilder ();
				for (var i = 0; i < this.modelCount; i++) {
				    if (this.isJmolDataFrameForModel (i) || this.isTrajectorySubFrame (i)) continue;
				    var pt = commands.indexOf (this.models[i].loadState);
				    if (pt < 0 || pt != commands.lastIndexOf (this.models[i].loadState)) commands.append (this.models[i].loadState);
				    if (this.models[i].isModelKit) {
					var bs = this.getModelAtomBitSetIncludingDeleted (i, false);
					if (this.tainted != null) {
					    if (this.tainted[2] != null) this.tainted[2].andNot (bs);
					    if (this.tainted[3] != null) this.tainted[3].andNot (bs);
					}this.models[i].loadScript =  new org.jmol.util.StringXBuilder ();
					org.jmol.viewer.Viewer.getInlineData (commands, this.getModelExtract (bs, false, true, "MOL"), i > 0);
				    } else {
					commands.appendSB (this.models[i].loadScript);
				    }}
				var s = commands.toString ();
				var i = s.indexOf ("load /*data*/");
				var j = s.indexOf ("load /*file*/");
				if (j >= 0 && j < i) i = j;
				if ((j = s.indexOf ("load \"@")) >= 0 && j < i) i = j;
				if (i >= 0) s = s.substring (0, i) + "zap;" + s.substring (i);
				cmds.append (s);
			    }, "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "getModelCml", 
			    function (bs, atomsMax, addBonds) {
				var sb =  new org.jmol.util.StringXBuilder ();
				var nAtoms = org.jmol.util.BitSetUtil.cardinalityOf (bs);
				if (nAtoms == 0) return "";
				org.jmol.io.XmlUtil.openTag (sb, "molecule");
				org.jmol.io.XmlUtil.openTag (sb, "atomArray");
				var bsAtoms =  new org.jmol.util.BitSet ();
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (--atomsMax < 0) break;
				    var atom = this.atoms[i];
				    var name = atom.getAtomName ();
				    org.jmol.util.TextFormat.simpleReplace (name, "\"", "''");
				    bsAtoms.set (atom.index);
				    org.jmol.io.XmlUtil.appendTag (sb, "atom/", ["id", "a" + (atom.index + 1), "title", atom.getAtomName (), "elementType", atom.getElementSymbol (), "x3", "" + atom.x, "y3", "" + atom.y, "z3", "" + atom.z]);
				}
				org.jmol.io.XmlUtil.closeTag (sb, "atomArray");
				if (addBonds) {
				    org.jmol.io.XmlUtil.openTag (sb, "bondArray");
				    for (var i = 0; i < this.bondCount; i++) {
					var bond = this.bonds[i];
					var a1 = bond.atom1;
					var a2 = bond.atom2;
					if (!bsAtoms.get (a1.index) || !bsAtoms.get (a2.index)) continue;
					var order = org.jmol.util.JmolEdge.getCmlBondOrder (bond.order);
					if (order == null) continue;
					org.jmol.io.XmlUtil.appendTag (sb, "bond/", ["atomRefs2", "a" + (bond.atom1.index + 1) + " a" + (bond.atom2.index + 1), "order", order]);
				    }
				    org.jmol.io.XmlUtil.closeTag (sb, "bondArray");
				}org.jmol.io.XmlUtil.closeTag (sb, "molecule");
				return sb.toString ();
			    }, "org.jmol.util.BitSet,~N,~B");
	Clazz.defineMethod (c$, "adjustAtomArrays", 
			    function (map, i0, atomCount) {
				this.atomCount = atomCount;
				for (var i = i0; i < atomCount; i++) {
				    this.atoms[i] = this.atoms[map[i]];
				    this.atoms[i].index = i;
				    var m = this.models[this.atoms[i].modelIndex];
				    if (m.firstAtomIndex == map[i]) m.firstAtomIndex = i;
				    m.bsAtoms.set (i);
				}
				if (this.vibrationVectors != null) for (var i = i0; i < atomCount; i++) this.vibrationVectors[i] = this.vibrationVectors[map[i]];

				if (this.occupancies != null) for (var i = i0; i < atomCount; i++) this.occupancies[i] = this.occupancies[map[i]];

				if (this.bfactor100s != null) for (var i = i0; i < atomCount; i++) this.bfactor100s[i] = this.bfactor100s[map[i]];

				if (this.partialCharges != null) for (var i = i0; i < atomCount; i++) this.partialCharges[i] = this.partialCharges[map[i]];

				if (this.ellipsoids != null) for (var i = i0; i < atomCount; i++) this.ellipsoids[i] = this.ellipsoids[map[i]];

				if (this.atomNames != null) for (var i = i0; i < atomCount; i++) this.atomNames[i] = this.atomNames[map[i]];

				if (this.atomTypes != null) for (var i = i0; i < atomCount; i++) this.atomTypes[i] = this.atomTypes[map[i]];

				if (this.atomSerials != null) for (var i = i0; i < atomCount; i++) this.atomSerials[i] = this.atomSerials[map[i]];

			    }, "~A,~N,~N");
	Clazz.defineMethod (c$, "growAtomArrays", 
			    function (newLength) {
				this.atoms = org.jmol.util.ArrayUtil.arrayCopyObject (this.atoms, newLength);
				if (this.vibrationVectors != null) this.vibrationVectors = org.jmol.util.ArrayUtil.arrayCopyObject (this.vibrationVectors, newLength);
				if (this.occupancies != null) this.occupancies = org.jmol.util.ArrayUtil.arrayCopyByte (this.occupancies, newLength);
				if (this.bfactor100s != null) this.bfactor100s = org.jmol.util.ArrayUtil.arrayCopyShort (this.bfactor100s, newLength);
				if (this.partialCharges != null) this.partialCharges = org.jmol.util.ArrayUtil.arrayCopyF (this.partialCharges, newLength);
				if (this.ellipsoids != null) this.ellipsoids = org.jmol.util.ArrayUtil.arrayCopyObject (this.ellipsoids, newLength);
				if (this.atomNames != null) this.atomNames = org.jmol.util.ArrayUtil.arrayCopyS (this.atomNames, newLength);
				if (this.atomTypes != null) this.atomTypes = org.jmol.util.ArrayUtil.arrayCopyS (this.atomTypes, newLength);
				if (this.atomSerials != null) this.atomSerials = org.jmol.util.ArrayUtil.arrayCopyI (this.atomSerials, newLength);
			    }, "~N");
	Clazz.defineMethod (c$, "addAtom", 
			    function (modelIndex, group, atomicAndIsotopeNumber, atomName, atomSerial, atomSite, x, y, z, radius, vectorX, vectorY, vectorZ, formalCharge, partialCharge, occupancy, bfactor, ellipsoid, isHetero, specialAtomID, atomSymmetry) {
				var atom =  new org.jmol.modelset.Atom (modelIndex, this.atomCount, x, y, z, radius, atomSymmetry, atomSite, atomicAndIsotopeNumber, formalCharge, isHetero);
				this.models[modelIndex].atomCount++;
				this.models[modelIndex].bsAtoms.set (this.atomCount);
				if (atomicAndIsotopeNumber % 128 == 1) this.models[modelIndex].hydrogenCount++;
				if (this.atomCount >= this.atoms.length) this.growAtomArrays (this.atomCount + 100);
				this.atoms[this.atomCount] = atom;
				this.setBFactor (this.atomCount, bfactor);
				this.setOccupancy (this.atomCount, occupancy);
				this.setPartialCharge (this.atomCount, partialCharge);
				if (ellipsoid != null) this.setEllipsoid (this.atomCount, ellipsoid);
				atom.group = group;
				atom.colixAtom = this.viewer.getColixAtomPalette (atom, org.jmol.constant.EnumPalette.CPK.id);
				if (atomName != null) {
				    var i;
				    if ((i = atomName.indexOf ('\0')) >= 0) {
					if (this.atomTypes == null) this.atomTypes =  new Array (this.atoms.length);
					this.atomTypes[this.atomCount] = atomName.substring (i + 1);
					atomName = atomName.substring (0, i);
				    }atom.atomID = specialAtomID;
				    if (specialAtomID == 0) {
					if (this.atomNames == null) this.atomNames =  new Array (this.atoms.length);
					this.atomNames[this.atomCount] = atomName.intern ();
				    }}if (atomSerial != -2147483648) {
					if (this.atomSerials == null) this.atomSerials =  Clazz.newIntArray (this.atoms.length, 0);
					this.atomSerials[this.atomCount] = atomSerial;
				    }if (!Float.isNaN (vectorX)) this.setVibrationVector (this.atomCount, vectorX, vectorY, vectorZ);
				this.atomCount++;
				return atom;
			    }, "~N,org.jmol.modelset.Group,~N,~S,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~N,~A,~B,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getInlineData", 
			    function (modelIndex) {
				var data = null;
				if (modelIndex >= 0) data = this.models[modelIndex].loadScript;
				else for (modelIndex = this.modelCount; --modelIndex >= 0; ) if ((data = this.models[modelIndex].loadScript).length () > 0) break;

				var pt = data.lastIndexOf ("data \"");
				if (pt < 0) return null;
				pt = data.indexOf2 ("\"", pt + 7);
				var pt2 = data.lastIndexOf ("end \"");
				if (pt2 < pt || pt < 0) return null;
				return data.substring2 (pt + 2, pt2);
			    }, "~N");
	Clazz.defineMethod (c$, "isAtomPDB", 
			    function (i) {
				return i >= 0 && this.models[this.atoms[i].modelIndex].isBioModel;
			    }, "~N");
	Clazz.defineMethod (c$, "isAtomAssignable", 
			    function (i) {
				return i >= 0 && this.atoms[i].modelIndex == this.modelCount - 1;
			    }, "~N");
	Clazz.defineMethod (c$, "getGroupAtom", 
			    function (atom, offset, name) {
				var g = atom.group;
				var monomerIndex = g.getMonomerIndex ();
				if (monomerIndex < 0) return -1;
				var groups = g.getGroups ();
				var ipt = monomerIndex + offset;
				if (ipt >= 0 && ipt < groups.length) {
				    var m = groups[ipt];
				    if (offset == 1 && !m.isConnectedPrevious ()) return -1;
				    if ("0".equals (name)) return m.leadAtomIndex;
				    for (var i = m.firstAtomIndex; i <= m.lastAtomIndex; i++) if (name == null || name.equalsIgnoreCase (this.atoms[i].getAtomName ())) return i;

				}return -1;
			    }, "org.jmol.modelset.Atom,~N,~S");
	Clazz.defineMethod (c$, "haveModelKit", 
			    function () {
				for (var i = 0; i < this.modelCount; i++) if (this.models[i].isModelKit) return true;

				return false;
			    });
	Clazz.defineMethod (c$, "getModelKitStateBitset", 
			    function (bs, bsDeleted) {
				var bs1 = org.jmol.util.BitSetUtil.copy (bsDeleted);
				for (var i = 0; i < this.modelCount; i++) if (!this.models[i].isModelKit) bs1.andNot (this.models[i].bsAtoms);

				return org.jmol.util.BitSetUtil.deleteBits (bs, bs1);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setAtomNamesAndNumbers", 
			    function (iFirst, baseAtomIndex, mergeSet) {
				if (baseAtomIndex < 0) iFirst = this.models[this.atoms[iFirst].modelIndex].firstAtomIndex;
				if (this.atomSerials == null) this.atomSerials =  Clazz.newIntArray (this.atomCount, 0);
				if (this.atomNames == null) this.atomNames =  new Array (this.atomCount);
				var isZeroBased = this.isXYZ && this.viewer.getZeroBasedXyzRasmol ();
				var lastModelIndex = 2147483647;
				var atomNo = 1;
				for (var i = iFirst; i < this.atomCount; ++i) {
				    var atom = this.atoms[i];
				    if (atom.modelIndex != lastModelIndex) {
					lastModelIndex = atom.modelIndex;
					atomNo = (isZeroBased ? 0 : 1);
				    }if (this.atomSerials[i] == 0 || baseAtomIndex < 0) this.atomSerials[i] = (i < baseAtomIndex ? mergeSet.atomSerials[i] : atomNo);
				    if (this.atomNames[i] == null || baseAtomIndex < 0) this.atomNames[i] = (atom.getElementSymbol () + this.atomSerials[i]).intern ();
				    if (!this.models[lastModelIndex].isModelKit || atom.getElementNumber () > 0 && !atom.isDeleted ()) atomNo++;
				}
			    }, "~N,~N,org.jmol.modelset.AtomCollection");
	Clazz.defineMethod (c$, "setUnitCellOffset", 
			    function (modelIndex, pt, ijk) {
				for (var i = modelIndex; i < this.modelCount; i++) {
				    if (i < 0 || modelIndex >= 0 && i != modelIndex && this.models[i].trajectoryBaseIndex != modelIndex) continue;
				    var unitCell = this.getUnitCell (i);
				    if (unitCell == null) continue;
				    if (pt == null) unitCell.setOffset (ijk);
				    else unitCell.setOffsetPt (pt);
				}
			    }, "~N,org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "connect", 
			    function (connections) {
				this.resetMolecules ();
				var bsDelete =  new org.jmol.util.BitSet ();
				for (var i = 0; i < connections.length; i++) {
				    var f = connections[i];
				    if (f == null || f.length < 2) continue;
				    var index1 = Clazz.floatToInt (f[0]);
				    var addGroup = (index1 < 0);
				    if (addGroup) index1 = -1 - index1;
				    var index2 = Clazz.floatToInt (f[1]);
				    if (index2 < 0 || index1 >= this.atomCount || index2 >= this.atomCount) continue;
				    var order = (f.length > 2 ? Clazz.floatToInt (f[2]) : 1);
				    if (order < 0) order &= 0xFFFF;
				    var mad = (f.length > 3 ? Clazz.floatToShort (1000 * connections[i][3]) : this.getDefaultMadFromOrder (order));
				    if (order == 0 || mad == 0 && order != 32768 && !org.jmol.modelset.Bond.isHydrogen (order)) {
					var b = this.atoms[index1].getBond (this.atoms[index2]);
					if (b != null) bsDelete.set (b.index);
					continue;
				    }var energy = (f.length > 4 ? f[4] : 0);
				    this.bondAtoms (this.atoms[index1], this.atoms[index2], order, mad, null, energy, addGroup, true);
				}
				if (bsDelete.nextSetBit (0) >= 0) this.deleteBonds (bsDelete, false);
			    }, "~A");
	Clazz.defineMethod (c$, "allowSpecAtom", 
			    function () {
				return this.modelCount != 1 || this.models[0].isBioModel;
			    });
	Clazz.defineMethod (c$, "setFrameDelayMs", 
			    function (millis, bsModels) {
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) this.models[this.models[i].trajectoryBaseIndex].frameDelay = millis;

			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getFrameDelayMs", 
			    function (i) {
				return (i < this.models.length && i >= 0 ? this.models[this.models[i].trajectoryBaseIndex].frameDelay : 0);
			    }, "~N");
	Clazz.defineMethod (c$, "getModelIndexFromId", 
			    function (id) {
				var haveFile = (id.indexOf ("#") >= 0);
				var isBaseModel = id.toLowerCase ().endsWith (".basemodel");
				if (isBaseModel) id = id.substring (0, id.length - 10);
				var errCode = -1;
				var fname = null;
				for (var i = 0; i < this.modelCount; i++) {
				    var mid = this.getModelAuxiliaryInfoValue (i, "modelID");
				    if (mid == null && (mid = this.getModelTitle (i)) == null) continue;
				    if (haveFile) {
					fname = this.getModelFileName (i) + "#";
					mid = fname + mid;
				    }if (id.equalsIgnoreCase (mid)) return (isBaseModel ? this.getBaseModelIndex (i) : i);
				    if (fname != null && id.startsWith (fname)) errCode = -2;
				}
				return (fname == null && !haveFile ? -2 : errCode);
			    }, "~S");
	Clazz.defineMethod (c$, "getPeakAtomRecord", 
			    function (atomIndex) {
				var iModel = this.atoms[atomIndex].modelIndex;
				var type = null;
				switch (this.atoms[atomIndex].getElementNumber ()) {
				case 1:
				    type = "1HNMR";
				    break;
				case 6:
				    type = "13CNMR";
				    break;
				default:
				    return null;
				}
				var peaks = this.getModelAuxiliaryInfoValue (iModel, "jdxAtomSelect_" + type);
				if (peaks == null) return null;
				this.htPeaks = null;
				if (this.htPeaks == null) this.htPeaks =  new java.util.Hashtable ();
				for (var i = 0; i < peaks.size (); i++) {
				    var peak = peaks.get (i);
				    var bsPeak = this.htPeaks.get (peak);
				    if (bsPeak == null) {
					this.htPeaks.put (peak, bsPeak =  new org.jmol.util.BitSet ());
					var atoms = org.jmol.util.Parser.getQuotedAttribute (peak, "atoms");
					var select = org.jmol.util.Parser.getQuotedAttribute (peak, "select");
					var script = "";
					if (atoms != null) script += "visible & (atomno=" + org.jmol.util.TextFormat.simpleReplace (atoms, ",", " or atomno=") + ")";
					else if (select != null) script += "visible & (" + select + ")";
					bsPeak.or (this.viewer.getAtomBitSet (script));
				    }if (bsPeak.get (atomIndex)) return peak;
				}
				return null;
			    }, "~N");
	Clazz.defineMethod (c$, "getBaseModelBitSet", 
			    function (modelIndex) {
				return this.getModelAtomBitSetIncludingDeleted (this.getBaseModelIndex (modelIndex), true);
			    }, "~N");
	Clazz.defineMethod (c$, "getBaseModelIndex", 
			    ($fz = function (modelIndex) {
				var baseModel = this.getModelAuxiliaryInfoValue (modelIndex, "jdxBaseModel");
				if (baseModel != null) for (var i = this.models.length; --i >= 0; ) if (baseModel.equals (this.getModelAuxiliaryInfoValue (i, "jdxModelID"))) return i;

				return modelIndex;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.pu$h ();
	c$ = Clazz.decorateAsClass (function () {
	    this.modelIndex = 0;
	    this.bsBonds = null;
	    this.bsAtoms1 = null;
	    this.bsAtoms2 = null;
	    this.script1 = null;
	    this.script2 = null;
	    this.inDefinedStateBlock = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset.ModelCollection, "StateScript");
	Clazz.makeConstructor (c$, 
			       function (a, b, c, d, e, f, g) {
				   this.modelIndex = a;
				   this.script1 = b;
				   this.bsBonds = org.jmol.util.BitSetUtil.copy (c);
				   this.bsAtoms1 = org.jmol.util.BitSetUtil.copy (d);
				   this.bsAtoms2 = org.jmol.util.BitSetUtil.copy (e);
				   this.script2 = f;
				   this.inDefinedStateBlock = g;
			       }, "~N,~S,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~S,~B");
	Clazz.defineMethod (c$, "isValid", 
			    function () {
				return this.script1 != null && this.script1.length > 0 && (this.bsBonds == null || this.bsBonds.nextSetBit (0) >= 0) && (this.bsAtoms1 == null || this.bsAtoms1.nextSetBit (0) >= 0) && (this.bsAtoms2 == null || this.bsAtoms2.nextSetBit (0) >= 0);
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  if (!this.isValid ()) return "";
				  var a = org.jmol.util.StringXBuilder.newS (this.script1);
				  if (this.bsBonds != null) a.append (" ").append (org.jmol.util.Escape.escapeBs (this.bsBonds, false));
				  if (this.bsAtoms1 != null) a.append (" ").append (org.jmol.util.Escape.escape (this.bsAtoms1));
				  if (this.bsAtoms2 != null) a.append (" ").append (org.jmol.util.Escape.escape (this.bsAtoms2));
				  if (this.script2 != null) a.append (" ").append (this.script2);
				  var b = a.toString ();
				  if (!b.endsWith (";")) b += ";";
				  return b;
			      });
	Clazz.defineMethod (c$, "isConnect", 
			    function () {
				return (this.script1.indexOf ("connect") >= 0);
			    });
	Clazz.defineMethod (c$, "deleteAtoms", 
			    function (a, b, c) {
				if (a == this.modelIndex) return false;
				if (a > this.modelIndex) {
				    return true;
				}org.jmol.util.BitSetUtil.deleteBits (this.bsBonds, b);
				org.jmol.util.BitSetUtil.deleteBits (this.bsAtoms1, c);
				org.jmol.util.BitSetUtil.deleteBits (this.bsAtoms2, c);
				return this.isValid ();
			    }, "~N,org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setModelIndex", 
			    function (a) {
				this.modelIndex = a;
			    }, "~N");
	c$ = Clazz.p0p ();
	Clazz.defineStatics (c$,
			     "hbondMin", 2.5);
    });
    // 
    //// org\jmol\atomdata\AtomData.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.atomdata");
    c$ = Clazz.decorateAsClass (function () {
	this.programInfo = null;
	this.fileName = null;
	this.modelName = null;
	this.modelIndex = 0;
	this.bsSelected = null;
	this.bsIgnored = null;
	this.bsMolecules = null;
	this.radiusData = null;
	this.firstAtomIndex = 0;
	this.firstModelIndex = 0;
	this.lastModelIndex = 0;
	this.hAtomRadius = 0;
	this.atomIndex = null;
	this.atomXyz = null;
	this.atomRadius = null;
	this.atomicNumber = null;
	this.atomMolecule = null;
	this.hAtoms = null;
	this.atomCount = 0;
	this.hydrogenAtomCount = 0;
	this.adpMode = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.atomdata, "AtomData");
    Clazz.makeConstructor (c$, 
			   function () {
			   });
    Clazz.defineStatics (c$,
			 "MODE_FILL_COORDS", 1,
			 "MODE_FILL_RADII", 2,
			 "MODE_FILL_MOLECULES", 4,
			 "MODE_GET_ATTACHED_HYDROGENS", 8,
			 "MODE_FILL_MULTIMODEL", 16);
    // 
    //// org\jmol\geodesic\EnvelopeCalculation.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.geodesic");
    Clazz.load (["org.jmol.atomdata.AtomData", "org.jmol.util.Point3f"], "org.jmol.geodesic.EnvelopeCalculation", ["org.jmol.atomdata.RadiusData", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Geodesic", "$.Normix", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.geodesicMap = null;
	    this.mapT = null;
	    this.mads = null;
	    this.atomData = null;
	    this.viewer = null;
	    this.atomCount = 0;
	    this.maxRadius = 0;
	    this.modelZeroBased = false;
	    this.disregardNeighbors = false;
	    this.bsMySelected = null;
	    this.dotsConvexMaps = null;
	    this.dotsConvexMax = 0;
	    this.geodesicCount = 0;
	    this.bsSurface = null;
	    this.radiusP = 0;
	    this.diameterP = 0;
	    this.bsTemp = null;
	    this.bsIgnore = null;
	    this.onlySelectedDots = false;
	    this.isSurface = false;
	    this.multiModel = false;
	    this.currentPoints = null;
	    this.indexI = 0;
	    this.centerI = null;
	    this.radiusI = 0;
	    this.radiiIP2 = 0;
	    this.pointT = null;
	    this.centerT = null;
	    this.vertexTest = null;
	    this.neighborCount = 0;
	    this.neighborIndices = null;
	    this.neighborCenters = null;
	    this.neighborPlusProbeRadii2 = null;
	    this.neighborRadii2 = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.geodesic, "EnvelopeCalculation");
	Clazz.prepareFields (c$, function () {
	    this.atomData =  new org.jmol.atomdata.AtomData ();
	    this.pointT =  new org.jmol.util.Point3f ();
	    this.vertexTest =  new Array (12);
	    {
		for (var i = 0; i < 12; i++) this.vertexTest[i] =  new org.jmol.util.Point3f ();

	    }this.neighborIndices =  Clazz.newIntArray (16, 0);
	    this.neighborCenters =  new Array (16);
	    this.neighborPlusProbeRadii2 =  Clazz.newFloatArray (16, 0);
	    this.neighborRadii2 =  Clazz.newFloatArray (16, 0);
	});
	Clazz.makeConstructor (c$, 
			       function (viewer, atomCount, mads) {
				   this.viewer = viewer;
				   this.atomCount = atomCount;
				   this.mads = mads;
				   this.geodesicCount = org.jmol.util.Geodesic.getVertexCount (3);
				   this.geodesicMap = org.jmol.util.BitSetUtil.newBitSet (this.geodesicCount);
				   this.mapT = org.jmol.util.BitSetUtil.newBitSet (this.geodesicCount);
				   ($t$ = org.jmol.geodesic.EnvelopeCalculation.EMPTY_SET = org.jmol.util.BitSetUtil.emptySet, org.jmol.geodesic.EnvelopeCalculation.prototype.EMPTY_SET = org.jmol.geodesic.EnvelopeCalculation.EMPTY_SET, $t$);
			       }, "org.jmol.atomdata.AtomDataServer,~N,~A");
	Clazz.defineMethod (c$, "getDotsConvexMaps", 
			    function () {
				return this.dotsConvexMaps;
			    });
	Clazz.defineMethod (c$, "getDotsConvexMax", 
			    function () {
				return this.dotsConvexMax;
			    });
	Clazz.defineMethod (c$, "allocDotsConvexMaps", 
			    function (max) {
				if (this.dotsConvexMax >= max) return;
				this.dotsConvexMax = max;
				this.dotsConvexMaps =  new Array (max);
			    }, "~N");
	Clazz.defineMethod (c$, "getBsSurfaceClone", 
			    function () {
				return org.jmol.util.BitSetUtil.copy (this.bsSurface);
			    });
	Clazz.defineMethod (c$, "setMads", 
			    function (mads) {
				this.mads = mads;
			    }, "~A");
	Clazz.defineMethod (c$, "setFromBits", 
			    function (index, bs) {
				this.geodesicMap.setBits (0, this.geodesicCount);
				for (var iDot = this.geodesicCount; --iDot >= 0; ) if (!bs.get (iDot)) this.geodesicMap.clear (iDot);

				if (this.dotsConvexMaps == null) this.dotsConvexMaps =  new Array (this.atomCount);
				var map;
				if (this.geodesicMap.isEmpty ()) map = org.jmol.geodesic.EnvelopeCalculation.EMPTY_SET;
				else map = org.jmol.util.BitSetUtil.copy (this.geodesicMap);
				if (index >= this.dotsConvexMaps.length) return;
				this.dotsConvexMaps[index] = map;
				this.dotsConvexMax = Math.max (this.dotsConvexMax, index);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "newSet", 
			    function () {
				this.dotsConvexMax = 0;
				this.dotsConvexMaps = null;
				this.radiusP = this.diameterP = 0;
				this.mads = null;
			    });
	Clazz.defineMethod (c$, "reCalculate", 
			    function (bs, m) {
				if (this.atomData.radiusData != null) {
				    this.calculate (null, this.maxRadius, bs, this.bsIgnore, this.disregardNeighbors, this.onlySelectedDots, this.isSurface, this.multiModel);
				    return;
				}if (this.dotsConvexMaps == null || this.dotsConvexMax == 0) return;
				var pt =  new org.jmol.util.Vector3f ();
				if (this.bsTemp == null) this.bsTemp = org.jmol.util.Normix.newVertexBitSet ();
				for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (i >= this.dotsConvexMax) return;
				    var map = this.dotsConvexMaps[i];
				    if (map == null || map.isEmpty ()) continue;
				    var bsNew =  new org.jmol.util.BitSet ();
				    for (var j = map.nextSetBit (0); j >= 0; j = map.nextSetBit (j + 1)) {
					pt.setT (org.jmol.util.Geodesic.getVertexVector (j));
					m.transform (pt);
					bsNew.set (org.jmol.util.Normix.getNormixV (pt, this.bsTemp));
				    }
				    this.dotsConvexMaps[i] = bsNew;
				}
			    }, "org.jmol.util.BitSet,org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "calculate", 
			    function (rd, maxRadius, bsSelected, bsIgnore, disregardNeighbors, onlySelectedDots, isSurface, multiModel) {
				if (rd == null) {
				    rd = this.atomData.radiusData;
				    if (rd == null) return;
				} else {
				    this.atomData.radiusData = rd;
				    this.bsIgnore = bsIgnore;
				    this.onlySelectedDots = onlySelectedDots;
				    this.multiModel = multiModel;
				    this.isSurface = isSurface;
				}if (rd.value == 3.4028235E38) rd.value = 3.0;
				this.atomData.modelIndex = (multiModel ? -1 : 0);
				this.modelZeroBased = !multiModel;
				this.viewer.fillAtomData (this.atomData, 1 | (this.mads == null ? 2 : 0));
				this.atomCount = this.atomData.atomCount;
				if (this.mads != null) for (var i = 0; i < this.atomCount; i++) this.atomData.atomRadius[i] = this.mads[i] / 1000;

				this.bsMySelected = (onlySelectedDots && bsSelected != null ? org.jmol.util.BitSetUtil.copy (bsSelected) : bsIgnore != null ? org.jmol.util.BitSetUtil.setAll (this.atomCount) : null);
				org.jmol.util.BitSetUtil.andNot (this.bsMySelected, bsIgnore);
				this.disregardNeighbors = disregardNeighbors;
				this.maxRadius = maxRadius;
				this.bsSurface =  new org.jmol.util.BitSet ();
				var isAll = (bsSelected == null);
				var iter = this.viewer.getSelectedAtomIterator (this.bsMySelected, false, this.modelZeroBased, false);
				var i0 = (isAll ? this.atomCount - 1 : bsSelected.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsSelected.nextSetBit (i + 1))) if (bsIgnore == null || !bsIgnore.get (i)) {
				    this.setAtomI (i);
				    this.getNeighbors (iter);
				    this.calcConvexMap (isSurface);
				}
				iter.release ();
				this.currentPoints = null;
				this.setDotsConvexMax ();
			    }, "org.jmol.atomdata.RadiusData,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "getRadius", 
			    function (atomIndex) {
				return this.atomData.atomRadius[atomIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getPoints", 
			    function () {
				if (this.dotsConvexMaps == null) {
				    this.calculate ( new org.jmol.atomdata.RadiusData (null, 3.0, org.jmol.atomdata.RadiusData.EnumType.ABSOLUTE, null), 3.4028235E38, this.bsMySelected, null, false, false, false, false);
				}if (this.currentPoints != null) return this.currentPoints;
				var nPoints = 0;
				var dotCount = 42;
				for (var i = this.dotsConvexMax; --i >= 0; ) if (this.dotsConvexMaps[i] != null) nPoints += this.dotsConvexMaps[i].cardinalityN (dotCount);

				var points =  new Array (nPoints);
				if (nPoints == 0) return points;
				nPoints = 0;
				for (var i = this.dotsConvexMax; --i >= 0; ) if (this.dotsConvexMaps[i] != null) {
				    var iDot = this.dotsConvexMaps[i].size ();
				    if (iDot > dotCount) iDot = dotCount;
				    while (--iDot >= 0) if (this.dotsConvexMaps[i].get (iDot)) {
					var pt =  new org.jmol.util.Point3f ();
					pt.scaleAdd2 (this.atomData.atomRadius[i], org.jmol.util.Geodesic.getVertexVector (iDot), this.atomData.atomXyz[i]);
					points[nPoints++] = pt;
				    }
				}
				this.currentPoints = points;
				return points;
			    });
	Clazz.defineMethod (c$, "setDotsConvexMax", 
			    ($fz = function () {
				if (this.dotsConvexMaps == null) this.dotsConvexMax = 0;
				else {
				    var i;
				    for (i = this.atomCount; --i >= 0 && this.dotsConvexMaps[i] == null; ) {
				    }
				    this.dotsConvexMax = i + 1;
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getAppropriateRadius", 
			    function (atomIndex) {
				return (this.mads != null ? (atomIndex >= this.mads.length ? 0 : this.mads[atomIndex] / 1000) : this.atomData.atomRadius[atomIndex]);
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomI", 
			    ($fz = function (indexI) {
				this.indexI = indexI;
				this.centerI = this.atomData.atomXyz[indexI];
				this.radiusI = this.atomData.atomRadius[indexI];
				this.radiiIP2 = this.radiusI + this.radiusP;
				this.radiiIP2 *= this.radiiIP2;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "calcConvexMap", 
			    ($fz = function (isSurface) {
				if (this.dotsConvexMaps == null) this.dotsConvexMaps =  new Array (this.atomCount);
				this.calcConvexBits ();
				var map;
				if (this.geodesicMap.isEmpty ()) map = org.jmol.geodesic.EnvelopeCalculation.EMPTY_SET;
				else {
				    this.bsSurface.set (this.indexI);
				    if (isSurface) {
					this.addIncompleteFaces (this.geodesicMap);
					this.addIncompleteFaces (this.geodesicMap);
				    }map = org.jmol.util.BitSetUtil.copy (this.geodesicMap);
				}this.dotsConvexMaps[this.indexI] = map;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "addIncompleteFaces", 
			    ($fz = function (points) {
				this.mapT.clearAll ();
				var faces = org.jmol.util.Geodesic.getFaceVertexes (3);
				var len = faces.length;
				var maxPt = -1;
				for (var f = 0; f < len; ) {
				    var p1 = faces[f++];
				    var p2 = faces[f++];
				    var p3 = faces[f++];
				    var ok1 = points.get (p1);
				    var ok2 = points.get (p2);
				    var ok3 = points.get (p3);
				    if (!(ok1 || ok2 || ok3) || ok1 && ok2 && ok3) continue;
				    if (!ok1) {
					this.mapT.set (p1);
					if (maxPt < p1) maxPt = p1;
				    }if (!ok2) {
					this.mapT.set (p2);
					if (maxPt < p2) maxPt = p2;
				    }if (!ok3) {
					this.mapT.set (p3);
					if (maxPt < p3) maxPt = p3;
				    }}
				for (var i = 0; i <= maxPt; i++) {
				    if (this.mapT.get (i)) points.set (i);
				}
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calcConvexBits", 
			    ($fz = function () {
				this.geodesicMap.setBits (0, this.geodesicCount);
				var combinedRadii = this.radiusI + this.radiusP;
				if (this.neighborCount == 0) return;
				var faceTest;
				var p1;
				var p2;
				var p3;
				var faces = org.jmol.util.Geodesic.getFaceVertexes (3);
				var p4 = org.jmol.geodesic.EnvelopeCalculation.power4[2];
				var ok1;
				var ok2;
				var ok3;
				this.mapT.clearAll ();
				for (var i = 0; i < 12; i++) {
				    this.vertexTest[i].setT (org.jmol.util.Geodesic.getVertexVector (i));
				    this.vertexTest[i].scaleAdd (combinedRadii, this.centerI);
				}
				for (var f = 0; f < 20; f++) {
				    faceTest = 0;
				    p1 = faces[3 * p4 * (4 * f + 0)];
				    p2 = faces[3 * p4 * (4 * f + 1)];
				    p3 = faces[3 * p4 * (4 * f + 2)];
				    for (var j = 0; j < this.neighborCount; j++) {
					var maxDist = this.neighborPlusProbeRadii2[j];
					this.centerT = this.neighborCenters[j];
					ok1 = this.vertexTest[p1].distanceSquared (this.centerT) >= maxDist;
					ok2 = this.vertexTest[p2].distanceSquared (this.centerT) >= maxDist;
					ok3 = this.vertexTest[p3].distanceSquared (this.centerT) >= maxDist;
					if (!ok1) this.geodesicMap.clear (p1);
					if (!ok2) this.geodesicMap.clear (p2);
					if (!ok3) this.geodesicMap.clear (p3);
					if (!ok1 && !ok2 && !ok3) {
					    faceTest = -1;
					    break;
					}}
				    var kFirst = f * 12 * p4;
				    var kLast = kFirst + 12 * p4;
				    for (var k = kFirst; k < kLast; k++) {
					var vect = faces[k];
					if (this.mapT.get (vect) || !this.geodesicMap.get (vect)) continue;
					switch (faceTest) {
					case -1:
					    this.geodesicMap.clear (vect);
					    break;
					case 0:
					    for (var j = 0; j < this.neighborCount; j++) {
						var maxDist = this.neighborPlusProbeRadii2[j];
						this.centerT = this.neighborCenters[j];
						this.pointT.setT (org.jmol.util.Geodesic.getVertexVector (vect));
						this.pointT.scaleAdd (combinedRadii, this.centerI);
						if (this.pointT.distanceSquared (this.centerT) < maxDist) this.geodesicMap.clear (vect);
					    }
					    break;
					case 1:
					}
					this.mapT.set (vect);
				    }
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getNeighbors", 
			    ($fz = function (iter) {
				this.neighborCount = 0;
				if (this.disregardNeighbors) return null;
				this.viewer.setIteratorForAtom (iter, this.indexI, this.radiusI + this.diameterP + this.maxRadius);
				while (iter.hasNext ()) {
				    var indexN = iter.next ();
				    var neighborRadius = this.atomData.atomRadius[indexN];
				    if (this.centerI.distance (this.atomData.atomXyz[indexN]) > this.radiusI + this.radiusP + this.radiusP + neighborRadius) continue;
				    if (this.neighborCount == this.neighborIndices.length) {
					this.neighborIndices = org.jmol.util.ArrayUtil.doubleLengthI (this.neighborIndices);
					this.neighborCenters = org.jmol.util.ArrayUtil.doubleLength (this.neighborCenters);
					this.neighborPlusProbeRadii2 = org.jmol.util.ArrayUtil.doubleLengthF (this.neighborPlusProbeRadii2);
					this.neighborRadii2 = org.jmol.util.ArrayUtil.doubleLengthF (this.neighborRadii2);
				    }this.neighborCenters[this.neighborCount] = this.atomData.atomXyz[indexN];
				    this.neighborIndices[this.neighborCount] = indexN;
				    var r = neighborRadius + this.radiusP;
				    this.neighborPlusProbeRadii2[this.neighborCount] = r * r;
				    this.neighborRadii2[this.neighborCount] = neighborRadius * neighborRadius;
				    ++this.neighborCount;
				}
				return iter;
			    }, $fz.isPrivate = true, $fz), "org.jmol.api.AtomIndexIterator");
	Clazz.defineMethod (c$, "deleteAtoms", 
			    function (firstAtomDeleted, nAtomsDeleted) {
				this.dotsConvexMaps = org.jmol.util.ArrayUtil.deleteElements (this.dotsConvexMaps, firstAtomDeleted, nAtomsDeleted);
				this.dotsConvexMax = this.dotsConvexMaps.length;
				if (this.mads != null) this.mads = org.jmol.util.ArrayUtil.deleteElements (this.mads, firstAtomDeleted, nAtomsDeleted);
				this.atomData.atomRadius = org.jmol.util.ArrayUtil.deleteElements (this.atomData.atomRadius, firstAtomDeleted, nAtomsDeleted);
				this.atomData.atomXyz = org.jmol.util.ArrayUtil.deleteElements (this.atomData.atomXyz, firstAtomDeleted, nAtomsDeleted);
				this.atomData.atomCount -= nAtomsDeleted;
				this.atomCount = this.atomData.atomCount;
			    }, "~N,~N");
	Clazz.defineStatics (c$,
			     "EMPTY_SET", null,
			     "SURFACE_DISTANCE_FOR_CALCULATION", 3,
			     "MAX_LEVEL", 3);
	Clazz.defineStatics (c$,
			     "power4", [1, 4, 16, 64, 256]);
    });
    // 
    //// org\jmol\modelset\Measurement.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (null, "org.jmol.modelset.Measurement", ["java.lang.Float", "java.util.ArrayList", "org.jmol.atomdata.RadiusData", "org.jmol.constant.EnumVdw", "org.jmol.modelset.LabelToken", "org.jmol.util.AxisAngle4f", "$.Escape", "$.Measure", "$.Point3f", "$.StringXBuilder", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.modelSet = null;
	    this.traceX = -2147483648;
	    this.traceY = 0;
	    this.count = 0;
	    this.countPlusIndices = null;
	    this.pts = null;
	    this.strMeasurement = null;
	    this.strFormat = null;
	    this.value = 0;
	    this.$isVisible = true;
	    this.$isHidden = false;
	    this.$isDynamic = false;
	    this.$isTrajectory = false;
	    this.colix = 0;
	    this.index = 0;
	    this.aa = null;
	    this.pointArc = null;
	    this.tickInfo = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "Measurement");
	Clazz.prepareFields (c$, function () {
	    this.countPlusIndices =  Clazz.newIntArray (5, 0);
	});
	Clazz.defineMethod (c$, "getCount", 
			    function () {
				return this.count;
			    });
	Clazz.defineMethod (c$, "setCount", 
			    function (count) {
				this.count = this.countPlusIndices[0] = count;
			    }, "~N");
	Clazz.defineMethod (c$, "getCountPlusIndices", 
			    function () {
				return this.countPlusIndices;
			    });
	Clazz.defineMethod (c$, "getPoints", 
			    function () {
				return this.pts;
			    });
	Clazz.defineMethod (c$, "getAtomIndex", 
			    function (n) {
				return (n > 0 && n <= this.count ? this.countPlusIndices[n] : -1);
			    }, "~N");
	Clazz.defineMethod (c$, "getAtom", 
			    function (i) {
				var pt = this.countPlusIndices[i];
				return (pt < -1 ? this.pts[-2 - pt] : this.modelSet.atoms[pt]);
			    }, "~N");
	Clazz.defineMethod (c$, "getLastIndex", 
			    function () {
				return (this.count > 0 ? this.countPlusIndices[this.count] : -1);
			    });
	Clazz.defineMethod (c$, "getString", 
			    function () {
				return this.strMeasurement;
			    });
	Clazz.defineMethod (c$, "getStringUsing", 
			    function (viewer, strFormat, units) {
				this.viewer = viewer;
				this.value = this.getMeasurement ();
				this.formatMeasurementAs (strFormat, units, true);
				if (strFormat == null) return this.getInfoAsString (units);
				return this.strMeasurement;
			    }, "org.jmol.viewer.Viewer,~S,~S");
	Clazz.defineMethod (c$, "getStringDetail", 
			    function () {
				return (this.count == 2 ? "Distance" : this.count == 3 ? "Angle" : "Torsion") + this.getMeasurementScript (" - ", false) + " : " + this.value;
			    });
	Clazz.defineMethod (c$, "getStrFormat", 
			    function () {
				return this.strFormat;
			    });
	Clazz.defineMethod (c$, "getValue", 
			    function () {
				return this.value;
			    });
	Clazz.defineMethod (c$, "isVisible", 
			    function () {
				return this.$isVisible;
			    });
	Clazz.defineMethod (c$, "isHidden", 
			    function () {
				return this.$isHidden;
			    });
	Clazz.defineMethod (c$, "isDynamic", 
			    function () {
				return this.$isDynamic;
			    });
	Clazz.defineMethod (c$, "isTrajectory", 
			    function () {
				return this.$isTrajectory;
			    });
	Clazz.defineMethod (c$, "setVisible", 
			    function (TF) {
				this.$isVisible = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "setHidden", 
			    function (TF) {
				this.$isHidden = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "setDynamic", 
			    function (TF) {
				this.$isDynamic = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "getColix", 
			    function () {
				return this.colix;
			    });
	Clazz.defineMethod (c$, "setColix", 
			    function (colix) {
				this.colix = colix;
			    }, "~N");
	Clazz.defineMethod (c$, "setIndex", 
			    function (index) {
				this.index = index;
			    }, "~N");
	Clazz.defineMethod (c$, "getIndex", 
			    function () {
				return this.index;
			    });
	Clazz.defineMethod (c$, "getAxisAngle", 
			    function () {
				return this.aa;
			    });
	Clazz.defineMethod (c$, "getPointArc", 
			    function () {
				return this.pointArc;
			    });
	Clazz.defineMethod (c$, "getTickInfo", 
			    function () {
				return this.tickInfo;
			    });
	Clazz.makeConstructor (c$, 
			       function (modelSet, m, value, colix, strFormat, index) {
				   this.index = index;
				   this.modelSet = modelSet;
				   this.viewer = modelSet.viewer;
				   this.colix = colix;
				   this.strFormat = strFormat;
				   if (m != null) {
				       this.tickInfo = m.tickInfo;
				       this.pts = m.pts;
				   }if (this.pts == null) this.pts =  new Array (4);
				   var indices = (m == null ? null : m.countPlusIndices);
				   this.count = (indices == null ? 0 : indices[0]);
				   if (this.count > 0) {
				       System.arraycopy (indices, 0, this.countPlusIndices, 0, this.count + 1);
				       this.$isTrajectory = modelSet.isTrajectoryMeasurement (this.countPlusIndices);
				   }this.value = (Float.isNaN (value) || this.$isTrajectory ? this.getMeasurement () : value);
				   this.formatMeasurement (null);
			       }, "org.jmol.modelset.ModelSet,org.jmol.modelset.Measurement,~N,~N,~S,~N");
	Clazz.makeConstructor (c$, 
			       function (modelSet, indices, points, tickInfo) {
				   this.countPlusIndices = indices;
				   this.count = indices[0];
				   this.pts = (points == null ?  new Array (4) : points);
				   this.modelSet = modelSet;
				   this.viewer = modelSet.viewer;
				   this.tickInfo = tickInfo;
			       }, "org.jmol.modelset.ModelSet,~A,~A,org.jmol.modelset.TickInfo");
	Clazz.defineMethod (c$, "refresh", 
			    function () {
				this.value = this.getMeasurement ();
				this.$isTrajectory = this.modelSet.isTrajectoryMeasurement (this.countPlusIndices);
				this.formatMeasurement (null);
			    });
	Clazz.defineMethod (c$, "getMeasurementScript", 
			    function (sep, withModelIndex) {
				var str = "";
				var asScript = (sep.equals (" "));
				for (var i = 1; i <= this.count; i++) str += (i > 1 ? sep : " ") + this.getLabel (i, asScript, withModelIndex);

				return str;
			    }, "~S,~B");
	Clazz.defineMethod (c$, "formatMeasurementAs", 
			    function (strFormat, units, useDefault) {
				if (strFormat != null && strFormat.length == 0) strFormat = null;
				if (!useDefault && strFormat != null && strFormat.indexOf (this.countPlusIndices[0] + ":") != 0) return;
				this.strFormat = strFormat;
				this.formatMeasurement (units);
			    }, "~S,~S,~B");
	Clazz.defineMethod (c$, "formatMeasurement", 
			    function (units) {
				this.strMeasurement = null;
				if (Float.isNaN (this.value) || this.count == 0) return;
				switch (this.count) {
				case 2:
				    this.strMeasurement = this.formatDistance (units);
				    return;
				case 3:
				    if (this.value == 180) {
					this.aa = null;
					this.pointArc = null;
				    } else {
					var vectorBA =  new org.jmol.util.Vector3f ();
					var vectorBC =  new org.jmol.util.Vector3f ();
					var radians = org.jmol.util.Measure.computeAngle (this.getAtom (1), this.getAtom (2), this.getAtom (3), vectorBA, vectorBC, false);
					var vectorAxis =  new org.jmol.util.Vector3f ();
					vectorAxis.cross (vectorBA, vectorBC);
					this.aa = org.jmol.util.AxisAngle4f.new4 (vectorAxis.x, vectorAxis.y, vectorAxis.z, radians);
					vectorBA.normalize ();
					vectorBA.scale (0.5);
					this.pointArc = org.jmol.util.Point3f.newP (vectorBA);
				    }case 4:
				    this.strMeasurement = this.formatAngle (this.value);
				    return;
				}
			    }, "~S");
	Clazz.defineMethod (c$, "reformatDistanceIfSelected", 
			    function () {
				if (this.count != 2) return;
				if (this.viewer.isSelected (this.countPlusIndices[1]) && this.viewer.isSelected (this.countPlusIndices[2])) this.formatMeasurement (null);
			    });
	Clazz.defineMethod (c$, "formatDistance", 
			    ($fz = function (units) {
				var label = this.getLabelString ();
				if (units == null) {
				    var pt = this.strFormat.indexOf ("//");
				    if (pt >= 0) {
					units = this.strFormat.substring (pt + 2);
				    } else {
					units = this.viewer.getMeasureDistanceUnits ();
					this.strFormat += "//" + units;
				    }}units = org.jmol.modelset.Measurement.fixUnits (units);
				var pt = label.indexOf ("//");
				if (pt >= 0) label = label.substring (0, pt);
				var f = this.fixValue (units, (label.indexOf ("%V") >= 0));
				return this.formatString (f, units, label);
			    }, $fz.isPrivate = true, $fz), "~S");
	c$.fixUnits = Clazz.defineMethod (c$, "fixUnits", 
					  ($fz = function (units) {
					      if (units.equals ("nanometers")) return "nm";
					      else if (units.equals ("picometers")) return "pm";
					      else if (units.equals ("angstroms")) return "\u00C5";
					      else if (units.equals ("vanderwaals") || units.equals ("vdw")) return "%";
					      return units;
					  }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "fixValue", 
			    function (units, andRound) {
				if (this.count != 2) return this.value;
				var dist = this.value;
				if (units != null) {
				    if (units.equals ("%")) {
					var i1 = this.getAtomIndex (1);
					var i2 = this.getAtomIndex (2);
					if (i1 >= 0 && i2 >= 0) {
					    var vdw = (this.getAtom (1)).getVanderwaalsRadiusFloat (this.viewer, org.jmol.constant.EnumVdw.AUTO) + (this.getAtom (2)).getVanderwaalsRadiusFloat (this.viewer, org.jmol.constant.EnumVdw.AUTO);
					    dist /= vdw;
					    return (andRound ? Math.round (dist * 1000) / 10 : dist * 100);
					}units = "ang";
				    }if (units.equals ("nm")) return (andRound ? Math.round (dist * 100) / 1000 : dist / 10);
				    if (units.equals ("pm")) return (andRound ? Math.round (dist * 1000) / 10 : dist * 100);
				    if (units.equals ("au")) return (andRound ? Math.round (dist / 0.5291772 * 1000) / 1000 : dist / 0.5291772);
				}return (andRound ? Math.round (dist * 100) / 100 : dist);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "formatAngle", 
			    ($fz = function (angle) {
				var label = this.getLabelString ();
				if (label.indexOf ("%V") >= 0) angle = Math.round (angle * 10) / 10;
				return this.formatString (angle, "\u00B0", label);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getLabelString", 
			    ($fz = function () {
				var s = this.countPlusIndices[0] + ":";
				var label = (this.strFormat != null && this.strFormat.length > 2 && this.strFormat.indexOf (s) == 0 ? this.strFormat : null);
				if (label == null) {
				    this.strFormat = null;
				    label = this.viewer.getDefaultMeasurementLabel (this.countPlusIndices[0]);
				}if (label.indexOf (s) == 0) label = label.substring (2);
				if (this.strFormat == null) this.strFormat = s + label;
				return label;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "formatString", 
			    ($fz = function (value, units, label) {
				return org.jmol.modelset.LabelToken.formatLabelMeasure (this.viewer, this, label, value, units);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~S");
	Clazz.defineMethod (c$, "sameAsPoints", 
			    function (indices, points) {
				if (this.count != indices[0]) return false;
				var isSame = true;
				for (var i = 1; i <= this.count && isSame; i++) isSame = (this.countPlusIndices[i] == indices[i]);

				if (isSame) for (var i = 0; i < this.count && isSame; i++) {
				    if (points[i] != null) isSame = (this.pts[i].distance (points[i]) < 0.01);
				}
				if (isSame) return true;
				switch (this.count) {
				default:
				    return true;
				case 2:
				    return this.sameAsIJ (indices, points, 1, 2) && this.sameAsIJ (indices, points, 2, 1);
				case 3:
				    return this.sameAsIJ (indices, points, 1, 3) && this.sameAsIJ (indices, points, 2, 2) && this.sameAsIJ (indices, points, 3, 1);
				case 4:
				    return this.sameAsIJ (indices, points, 1, 4) && this.sameAsIJ (indices, points, 2, 3) && this.sameAsIJ (indices, points, 3, 2) && this.sameAsIJ (indices, points, 4, 1);
				}
			    }, "~A,~A");
	Clazz.defineMethod (c$, "sameAsIJ", 
			    ($fz = function (atoms, points, i, j) {
				var ipt = this.countPlusIndices[i];
				var jpt = atoms[j];
				return (ipt >= 0 || jpt >= 0 ? ipt == jpt : this.pts[-2 - ipt].distance (points[-2 - jpt]) < 0.01);
			    }, $fz.isPrivate = true, $fz), "~A,~A,~N,~N");
	Clazz.defineMethod (c$, "sameAs", 
			    function (i, j) {
				return this.sameAsIJ (this.countPlusIndices, this.pts, i, j);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "toVector", 
			    function (asBitSet) {
				var V =  new java.util.ArrayList ();
				for (var i = 1; i <= this.count; i++) V.add (this.getLabel (i, asBitSet, false));

				V.add (this.strMeasurement);
				return V;
			    }, "~B");
	Clazz.defineMethod (c$, "getMeasurement", 
			    function () {
				if (this.countPlusIndices == null) return NaN;
				if (this.count < 2) return NaN;
				for (var i = this.count; --i >= 0; ) if (this.countPlusIndices[i + 1] == -1) {
				    return NaN;
				}
				var ptA = this.getAtom (1);
				var ptB = this.getAtom (2);
				var ptC;
				var ptD;
				switch (this.count) {
				case 2:
				    return ptA.distance (ptB);
				case 3:
				    ptC = this.getAtom (3);
				    return org.jmol.util.Measure.computeAngleABC (ptA, ptB, ptC, true);
				case 4:
				    ptC = this.getAtom (3);
				    ptD = this.getAtom (4);
				    return org.jmol.util.Measure.computeTorsion (ptA, ptB, ptC, ptD, true);
				default:
				    return NaN;
				}
			    });
	Clazz.defineMethod (c$, "getLabel", 
			    function (i, asBitSet, withModelIndex) {
				var atomIndex = this.countPlusIndices[i];
				return (atomIndex < 0 ? (withModelIndex ? "modelIndex " + this.getAtom (i).modelIndex + " " : "") + org.jmol.util.Escape.escapePt (this.getAtom (i)) : asBitSet ? "(({" + atomIndex + "}))" : this.viewer.getAtomInfo (atomIndex));
			    }, "~N,~B,~B");
	Clazz.defineMethod (c$, "setModelIndex", 
			    function (modelIndex) {
				if (this.pts == null) return;
				for (var i = 0; i < this.count; i++) {
				    if (this.pts[i] != null) this.pts[i].modelIndex = modelIndex;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "isValid", 
			    function () {
				return !(this.sameAs (1, 2) || this.count > 2 && this.sameAs (1, 3) || this.count == 4 && this.sameAs (2, 4));
			    });
	c$.find = Clazz.defineMethod (c$, "find", 
				      function (measurements, m) {
					  var indices = m.getCountPlusIndices ();
					  var points = m.getPoints ();
					  for (var i = measurements.size (); --i >= 0; ) if (measurements.get (i).sameAsPoints (indices, points)) return i;

					  return -1;
				      }, "java.util.List,org.jmol.modelset.Measurement");
	Clazz.defineMethod (c$, "isConnected", 
			    function (atoms, count) {
				var atomIndexLast = -1;
				for (var i = 1; i <= count; i++) {
				    var atomIndex = this.getAtomIndex (i);
				    if (atomIndex < 0) continue;
				    if (atomIndexLast >= 0 && !atoms[atomIndex].isBonded (atoms[atomIndexLast])) return false;
				    atomIndexLast = atomIndex;
				}
				return true;
			    }, "~A,~N");
	Clazz.defineMethod (c$, "getInfoAsString", 
			    function (units) {
				var f = this.fixValue (units, true);
				var sb =  new org.jmol.util.StringXBuilder ();
				sb.append (this.count == 2 ? "distance" : this.count == 3 ? "angle" : "dihedral");
				sb.append (" \t").appendF (f);
				sb.append (" \t").append (this.getString ());
				for (var i = 1; i <= this.count; i++) sb.append (" \t").append (this.getLabel (i, false, false));

				return sb.toString ();
			    }, "~S");
	Clazz.defineMethod (c$, "isInRange", 
			    function (radiusData, value) {
				if (radiusData.factorType === org.jmol.atomdata.RadiusData.EnumType.FACTOR) {
				    var atom1 = this.getAtom (1);
				    var atom2 = this.getAtom (2);
				    var d = (atom1.getVanderwaalsRadiusFloat (this.viewer, radiusData.vdwType) + atom2.getVanderwaalsRadiusFloat (this.viewer, radiusData.vdwType)) * radiusData.value;
				    return (value <= d);
				}return (radiusData.values[0] == 3.4028235E38 || value >= radiusData.values[0] && value <= radiusData.values[1]);
			    }, "org.jmol.atomdata.RadiusData,~N");
	Clazz.defineMethod (c$, "isIntramolecular", 
			    function (atoms, count) {
				var molecule = -1;
				for (var i = 1; i <= count; i++) {
				    var atomIndex = this.getAtomIndex (i);
				    if (atomIndex < 0) continue;
				    var m = atoms[atomIndex].getMoleculeNumber (false);
				    if (molecule < 0) molecule = m;
				    else if (m != molecule) return false;
				}
				return true;
			    }, "~A,~N");
    });
    // 
    //// org\jmol\util\Geodesic.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Geodesic", ["java.lang.NullPointerException", "$.Short", "java.util.Hashtable", "org.jmol.util.ArrayUtil", "$.Vector3f"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Geodesic");
	c$.getNeighborVertexesArrays = Clazz.defineMethod (c$, "getNeighborVertexesArrays", 
							   function () {
							       if (org.jmol.util.Geodesic.vertexCounts == null) org.jmol.util.Geodesic.createGeodesic ();
							       return org.jmol.util.Geodesic.neighborVertexesArrays;
							   });
	c$.getVertexCount = Clazz.defineMethod (c$, "getVertexCount", 
						function (level) {
						    if (org.jmol.util.Geodesic.vertexCounts == null) org.jmol.util.Geodesic.createGeodesic ();
						    return org.jmol.util.Geodesic.vertexCounts[level];
						}, "~N");
	c$.getVertexVectors = Clazz.defineMethod (c$, "getVertexVectors", 
						  function () {
						      if (org.jmol.util.Geodesic.vertexCounts == null) org.jmol.util.Geodesic.createGeodesic ();
						      return org.jmol.util.Geodesic.vertexVectors;
						  });
	c$.getVertexVector = Clazz.defineMethod (c$, "getVertexVector", 
						 function (i) {
						     return org.jmol.util.Geodesic.vertexVectors[i];
						 }, "~N");
	c$.getFaceVertexes = Clazz.defineMethod (c$, "getFaceVertexes", 
						 function (level) {
						     return org.jmol.util.Geodesic.faceVertexesArrays[level];
						 }, "~N");
	c$.createGeodesic = Clazz.defineMethod (c$, "createGeodesic", 
						($fz = function () {
						    if (org.jmol.util.Geodesic.vertexCounts != null) return;
						    var v =  Clazz.newShortArray (4, 0);
						    ($t$ = org.jmol.util.Geodesic.neighborVertexesArrays = org.jmol.util.ArrayUtil.newShort2 (4), org.jmol.util.Geodesic.prototype.neighborVertexesArrays = org.jmol.util.Geodesic.neighborVertexesArrays, $t$);
						    ($t$ = org.jmol.util.Geodesic.faceVertexesArrays = org.jmol.util.ArrayUtil.newShort2 (4), org.jmol.util.Geodesic.prototype.faceVertexesArrays = org.jmol.util.Geodesic.faceVertexesArrays, $t$);
						    ($t$ = org.jmol.util.Geodesic.vertexVectors =  new Array (12), org.jmol.util.Geodesic.prototype.vertexVectors = org.jmol.util.Geodesic.vertexVectors, $t$);
						    org.jmol.util.Geodesic.vertexVectors[0] = org.jmol.util.Vector3f.new3 (0, 0, org.jmol.util.Geodesic.halfRoot5);
						    for (var i = 0; i < 5; ++i) {
							org.jmol.util.Geodesic.vertexVectors[i + 1] = org.jmol.util.Vector3f.new3 (Math.cos (i * 1.2566371), Math.sin (i * 1.2566371), 0.5);
							org.jmol.util.Geodesic.vertexVectors[i + 6] = org.jmol.util.Vector3f.new3 (Math.cos (i * 1.2566371 + 0.62831855), Math.sin (i * 1.2566371 + 0.62831855), -0.5);
						    }
						    org.jmol.util.Geodesic.vertexVectors[11] = org.jmol.util.Vector3f.new3 (0, 0, ($t$ = - org.jmol.util.Geodesic.halfRoot5, org.jmol.util.Geodesic.prototype.halfRoot5 = org.jmol.util.Geodesic.halfRoot5, $t$));
						    for (var i = 12; --i >= 0; ) org.jmol.util.Geodesic.vertexVectors[i].normalize ();

						    org.jmol.util.Geodesic.faceVertexesArrays[0] = org.jmol.util.Geodesic.faceVertexesIcosahedron;
						    org.jmol.util.Geodesic.neighborVertexesArrays[0] = org.jmol.util.Geodesic.neighborVertexesIcosahedron;
						    v[0] = 12;
						    for (var i = 0; i < 3; ++i) org.jmol.util.Geodesic.quadruple (i, v);

						    ($t$ = org.jmol.util.Geodesic.vertexCounts = v, org.jmol.util.Geodesic.prototype.vertexCounts = org.jmol.util.Geodesic.vertexCounts, $t$);
						}, $fz.isPrivate = true, $fz));
	c$.quadruple = Clazz.defineMethod (c$, "quadruple", 
					   ($fz = function (level, counts) {
					       ($t$ = org.jmol.util.Geodesic.htVertex =  new java.util.Hashtable (), org.jmol.util.Geodesic.prototype.htVertex = org.jmol.util.Geodesic.htVertex, $t$);
					       var oldVertexCount = org.jmol.util.Geodesic.vertexVectors.length;
					       var oldFaceVertexes = org.jmol.util.Geodesic.faceVertexesArrays[level];
					       var oldFaceVertexesLength = oldFaceVertexes.length;
					       var oldFaceCount = Clazz.doubleToInt (oldFaceVertexesLength / 3);
					       var oldEdgesCount = oldVertexCount + oldFaceCount - 2;
					       var newVertexCount = oldVertexCount + oldEdgesCount;
					       var newFaceCount = 4 * oldFaceCount;
					       ($t$ = org.jmol.util.Geodesic.vertexVectors = org.jmol.util.ArrayUtil.arrayCopyObject (org.jmol.util.Geodesic.vertexVectors, newVertexCount), org.jmol.util.Geodesic.prototype.vertexVectors = org.jmol.util.Geodesic.vertexVectors, $t$);
					       var newFacesVertexes =  Clazz.newShortArray (3 * newFaceCount, 0);
					       org.jmol.util.Geodesic.faceVertexesArrays[level + 1] = newFacesVertexes;
					       var neighborVertexes =  Clazz.newShortArray (6 * newVertexCount, 0);
					       org.jmol.util.Geodesic.neighborVertexesArrays[level + 1] = neighborVertexes;
					       for (var i = neighborVertexes.length; --i >= 0; ) neighborVertexes[i] = -1;

					       counts[level + 1] = newVertexCount;
					       ($t$ = org.jmol.util.Geodesic.vertexNext = oldVertexCount, org.jmol.util.Geodesic.prototype.vertexNext = org.jmol.util.Geodesic.vertexNext, $t$);
					       var iFaceNew = 0;
					       for (var i = 0; i < oldFaceVertexesLength; ) {
						   var iA = oldFaceVertexes[i++];
						   var iB = oldFaceVertexes[i++];
						   var iC = oldFaceVertexes[i++];
						   var iAB = org.jmol.util.Geodesic.getVertex (iA, iB);
						   var iBC = org.jmol.util.Geodesic.getVertex (iB, iC);
						   var iCA = org.jmol.util.Geodesic.getVertex (iC, iA);
						   newFacesVertexes[iFaceNew++] = iA;
						   newFacesVertexes[iFaceNew++] = iAB;
						   newFacesVertexes[iFaceNew++] = iCA;
						   newFacesVertexes[iFaceNew++] = iB;
						   newFacesVertexes[iFaceNew++] = iBC;
						   newFacesVertexes[iFaceNew++] = iAB;
						   newFacesVertexes[iFaceNew++] = iC;
						   newFacesVertexes[iFaceNew++] = iCA;
						   newFacesVertexes[iFaceNew++] = iBC;
						   newFacesVertexes[iFaceNew++] = iCA;
						   newFacesVertexes[iFaceNew++] = iAB;
						   newFacesVertexes[iFaceNew++] = iBC;
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iAB, iA);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iAB, iCA);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iAB, iBC);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iAB, iB);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iBC, iB);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iBC, iCA);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iBC, iC);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iCA, iC);
						   org.jmol.util.Geodesic.addNeighboringVertexes (neighborVertexes, iCA, iA);
					       }
					       if (true) {
						   var vertexCount = org.jmol.util.Geodesic.vertexVectors.length;
						   if (iFaceNew != newFacesVertexes.length) throw  new NullPointerException ();
						   if (org.jmol.util.Geodesic.vertexNext != newVertexCount) throw  new NullPointerException ();
						   for (var i = 0; i < 12; ++i) {
						       for (var j = 0; j < 5; ++j) {
							   var neighbor = neighborVertexes[i * 6 + j];
							   if (neighbor < 0) throw  new NullPointerException ();
							   if (neighbor >= vertexCount) throw  new NullPointerException ();
							   if (neighborVertexes[i * 6 + 5] != -1) throw  new NullPointerException ();
						       }
						   }
						   for (var i = 72; i < neighborVertexes.length; ++i) {
						       var neighbor = neighborVertexes[i];
						       if (neighbor < 0) throw  new NullPointerException ();
						       if (neighbor >= vertexCount) throw  new NullPointerException ();
						   }
						   for (var i = 0; i < newVertexCount; ++i) {
						       var neighborCount = 0;
						       for (var j = neighborVertexes.length; --j >= 0; ) if (neighborVertexes[j] == i) ++neighborCount;

						       if ((i < 12 && neighborCount != 5) || (i >= 12 && neighborCount != 6)) throw  new NullPointerException ();
						       var faceCount = 0;
						       for (var j = newFacesVertexes.length; --j >= 0; ) if (newFacesVertexes[j] == i) ++faceCount;

						       if ((i < 12 && faceCount != 5) || (i >= 12 && faceCount != 6)) throw  new NullPointerException ();
						   }
					       }($t$ = org.jmol.util.Geodesic.htVertex = null, org.jmol.util.Geodesic.prototype.htVertex = org.jmol.util.Geodesic.htVertex, $t$);
					   }, $fz.isPrivate = true, $fz), "~N,~A");
	c$.addNeighboringVertexes = Clazz.defineMethod (c$, "addNeighboringVertexes", 
							($fz = function (neighborVertexes, v1, v2) {
							    for (var i = v1 * 6, iMax = i + 6; i < iMax; ++i) {
								if (neighborVertexes[i] == v2) return;
								if (neighborVertexes[i] < 0) {
								    neighborVertexes[i] = v2;
								    for (var j = v2 * 6, jMax = j + 6; j < jMax; ++j) {
									if (neighborVertexes[j] == v1) return;
									if (neighborVertexes[j] < 0) {
									    neighborVertexes[j] = v1;
									    return;
									}}
								}}
							    throw  new NullPointerException ();
							}, $fz.isPrivate = true, $fz), "~A,~N,~N");
	c$.getVertex = Clazz.defineMethod (c$, "getVertex", 
					   ($fz = function (v1, v2) {
					       if (v1 > v2) {
						   var t = v1;
						   v1 = v2;
						   v2 = t;
					       }var hashKey = Integer.$valueOf ((v1 << 16) + v2);
					       var iv = org.jmol.util.Geodesic.htVertex.get (hashKey);
					       if (iv != null) {
						   return iv.shortValue ();
					       }var newVertexVector = org.jmol.util.Vector3f.newV (org.jmol.util.Geodesic.vertexVectors[v1]);
					       org.jmol.util.Geodesic.vertexVectors[org.jmol.util.Geodesic.vertexNext] = newVertexVector;
					       newVertexVector.add (org.jmol.util.Geodesic.vertexVectors[v2]);
					       newVertexVector.scale (0.5);
					       newVertexVector.normalize ();
					       org.jmol.util.Geodesic.htVertex.put (hashKey, Short.$valueOf (org.jmol.util.Geodesic.vertexNext));
					       return ($t$ = org.jmol.util.Geodesic.vertexNext ++, org.jmol.util.Geodesic.prototype.vertexNext = org.jmol.util.Geodesic.vertexNext, $t$);
					   }, $fz.isPrivate = true, $fz), "~N,~N");
	c$.halfRoot5 = c$.prototype.halfRoot5 = (0.5 * Math.sqrt (5));
	Clazz.defineStatics (c$,
			     "oneFifth", 1.2566371,
			     "oneTenth", 0.62831855,
			     "faceVertexesIcosahedron", [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 1, 1, 6, 2, 2, 7, 3, 3, 8, 4, 4, 9, 5, 5, 10, 1, 6, 1, 10, 7, 2, 6, 8, 3, 7, 9, 4, 8, 10, 5, 9, 11, 6, 10, 11, 7, 6, 11, 8, 7, 11, 9, 8, 11, 10, 9],
			     "neighborVertexesIcosahedron", [1, 2, 3, 4, 5, -1, 0, 5, 10, 6, 2, -1, 0, 1, 6, 7, 3, -1, 0, 2, 7, 8, 4, -1, 0, 3, 8, 9, 5, -1, 0, 4, 9, 10, 1, -1, 1, 10, 11, 7, 2, -1, 2, 6, 11, 8, 3, -1, 3, 7, 11, 9, 4, -1, 4, 8, 11, 10, 5, -1, 5, 9, 11, 6, 1, -1, 6, 7, 8, 9, 10, -1],
			     "standardLevel", 3,
			     "maxLevel", 3,
			     "vertexCounts", null,
			     "vertexVectors", null,
			     "faceVertexesArrays", null,
			     "neighborVertexesArrays", null,
			     "vertexNext", 0,
			     "htVertex", null,
			     "VALIDATE", true);
    });
    // 
    //// org\jmol\util\Normix.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Geodesic"], "org.jmol.util.Normix", ["org.jmol.util.BitSet"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Normix");
	c$.getNormixCount = Clazz.defineMethod (c$, "getNormixCount", 
						function () {
						    if (org.jmol.util.Normix.normixCount == 0) ($t$ = org.jmol.util.Normix.normixCount = org.jmol.util.Geodesic.getVertexCount (3), org.jmol.util.Normix.prototype.normixCount = org.jmol.util.Normix.normixCount, $t$);
						    return org.jmol.util.Normix.normixCount;
						});
	c$.newVertexBitSet = Clazz.defineMethod (c$, "newVertexBitSet", 
						 function () {
						     return org.jmol.util.BitSet.newN (org.jmol.util.Normix.getNormixCount ());
						 });
	c$.getVertexVectors = Clazz.defineMethod (c$, "getVertexVectors", 
						  function () {
						      if (org.jmol.util.Normix.vertexVectors == null) ($t$ = org.jmol.util.Normix.vertexVectors = org.jmol.util.Geodesic.getVertexVectors (), org.jmol.util.Normix.prototype.vertexVectors = org.jmol.util.Normix.vertexVectors, $t$);
						      return org.jmol.util.Normix.vertexVectors;
						  });
	c$.setInverseNormixes = Clazz.defineMethod (c$, "setInverseNormixes", 
						    function () {
							if (org.jmol.util.Normix.inverseNormixes != null) return;
							org.jmol.util.Normix.getNormixCount ();
							org.jmol.util.Normix.getVertexVectors ();
							($t$ = org.jmol.util.Normix.inverseNormixes =  Clazz.newShortArray (org.jmol.util.Normix.normixCount, 0), org.jmol.util.Normix.prototype.inverseNormixes = org.jmol.util.Normix.inverseNormixes, $t$);
							var bsTemp =  new org.jmol.util.BitSet ();
							for (var n = org.jmol.util.Normix.normixCount; --n >= 0; ) {
							    var v = org.jmol.util.Normix.vertexVectors[n];
							    org.jmol.util.Normix.inverseNormixes[n] = org.jmol.util.Normix.getNormix (-v.x, -v.y, -v.z, 3, bsTemp);
							}
						    });
	c$.getInverseNormix = Clazz.defineMethod (c$, "getInverseNormix", 
						  function (normix) {
						      return org.jmol.util.Normix.inverseNormixes[normix];
						  }, "~N");
	c$.getNeighborVertexArrays = Clazz.defineMethod (c$, "getNeighborVertexArrays", 
							 ($fz = function () {
							     if (org.jmol.util.Normix.neighborVertexesArrays == null) {
								 ($t$ = org.jmol.util.Normix.neighborVertexesArrays = org.jmol.util.Geodesic.getNeighborVertexesArrays (), org.jmol.util.Normix.prototype.neighborVertexesArrays = org.jmol.util.Normix.neighborVertexesArrays, $t$);
							     }return org.jmol.util.Normix.neighborVertexesArrays;
							 }, $fz.isPrivate = true, $fz));
	c$.getNormixV = Clazz.defineMethod (c$, "getNormixV", 
					    function (v, bsTemp) {
						return org.jmol.util.Normix.getNormix (v.x, v.y, v.z, 3, bsTemp);
					    }, "org.jmol.util.Vector3f,org.jmol.util.BitSet");
	c$.get2SidedNormix = Clazz.defineMethod (c$, "get2SidedNormix", 
						 function (v, bsTemp) {
						     return ~org.jmol.util.Normix.getNormix (v.x, v.y, v.z, 3, bsTemp);
						 }, "org.jmol.util.Vector3f,org.jmol.util.BitSet");
	c$.getNormix = Clazz.defineMethod (c$, "getNormix", 
					   ($fz = function (x, y, z, geodesicLevel, bsConsidered) {
					       var champion;
					       var t;
					       if (z >= 0) {
						   champion = 0;
						   t = z - 1;
					       } else {
						   champion = 11;
						   t = z - (-1);
					       }bsConsidered.clearAll ();
					       bsConsidered.set (champion);
					       org.jmol.util.Normix.getVertexVectors ();
					       org.jmol.util.Normix.getNeighborVertexArrays ();
					       var championDist2 = x * x + y * y + t * t;
					       for (var lvl = 0; lvl <= geodesicLevel; ++lvl) {
						   var neighborVertexes = org.jmol.util.Normix.neighborVertexesArrays[lvl];
						   for (var offsetNeighbors = 6 * champion, i = offsetNeighbors + (champion < 12 ? 5 : 6); --i >= offsetNeighbors; ) {
						       var challenger = neighborVertexes[i];
						       if (bsConsidered.get (challenger)) continue;
						       bsConsidered.set (challenger);
						       var v = org.jmol.util.Normix.vertexVectors[challenger];
						       var d;
						       d = v.x - x;
						       var d2 = d * d;
						       if (d2 >= championDist2) continue;
						       d = v.y - y;
						       d2 += d * d;
						       if (d2 >= championDist2) continue;
						       d = v.z - z;
						       d2 += d * d;
						       if (d2 >= championDist2) continue;
						       champion = challenger;
						       championDist2 = d2;
						   }
					       }
					       return champion;
					   }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineStatics (c$,
			     "NORMIX_GEODESIC_LEVEL", 3,
			     "normixCount", 0,
			     "vertexVectors", null,
			     "inverseNormixes", null,
			     "neighborVertexesArrays", null,
			     "NORMIX_NULL", 9999);
    });
    // 
    //// org\jmol\modelset\BondIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.declareInterface (org.jmol.modelset, "BondIterator");
    // 
    //// org\jmol\modelset\BondIteratorSelected.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.BondIterator"], "org.jmol.modelset.BondIteratorSelected", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bonds = null;
	    this.bondCount = 0;
	    this.bondType = 0;
	    this.iBond = 0;
	    this.bsSelected = null;
	    this.bondSelectionModeOr = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "BondIteratorSelected", null, org.jmol.modelset.BondIterator);
	Clazz.makeConstructor (c$, 
			       function (bonds, bondCount, bondType, bsSelected, bondSelectionModeOr) {
				   this.bonds = bonds;
				   this.bondCount = bondCount;
				   this.bondType = bondType;
				   this.bsSelected = bsSelected;
				   this.bondSelectionModeOr = bondSelectionModeOr;
			       }, "~A,~N,~N,org.jmol.util.BitSet,~B");
	Clazz.overrideMethod (c$, "hasNext", 
			      function () {
				  if (this.bondType == 131071) {
				      this.iBond = this.bsSelected.nextSetBit (this.iBond);
				      return (this.iBond >= 0 && this.iBond < this.bondCount);
				  }for (; this.iBond < this.bondCount; ++this.iBond) {
				      var bond = this.bonds[this.iBond];
				      if (this.bondType != 65535 && (bond.order & this.bondType) == 0) {
					  continue;
				      } else if (this.bondType == 65535 && (bond.order & 32768) != 0) continue;
				      var isSelected1 = this.bsSelected.get (bond.atom1.index);
				      var isSelected2 = this.bsSelected.get (bond.atom2.index);
				      if ((!this.bondSelectionModeOr && isSelected1 && isSelected2) || (this.bondSelectionModeOr && (isSelected1 || isSelected2))) return true;
				  }
				  return false;
			      });
	Clazz.overrideMethod (c$, "nextIndex", 
			      function () {
				  return this.iBond;
			      });
	Clazz.overrideMethod (c$, "next", 
			      function () {
				  return this.bonds[this.iBond++];
			      });
    });
    // 
    //// org\jmol\modelset\HBond.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.Bond"], "org.jmol.modelset.HBond", ["org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.energy = 0;
	    this.paletteID = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "HBond", org.jmol.modelset.Bond);
	Clazz.makeConstructor (c$, 
			       function (atom1, atom2, order, mad, colix, energy) {
				   Clazz.superConstructor (this, org.jmol.modelset.HBond, [atom1, atom2, order, mad, colix]);
				   this.energy = energy;
				   if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.info ("HBond energy = " + energy + " #" + this.getIdentity ());
			       }, "org.jmol.modelset.Atom,org.jmol.modelset.Atom,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "getEnergy", 
			    function () {
				return this.energy;
			    });
	Clazz.defineMethod (c$, "getPaletteId", 
			    function () {
				return this.paletteID;
			    });
	Clazz.overrideMethod (c$, "setPaletteID", 
			      function (paletteID) {
				  this.paletteID = paletteID;
			      }, "~N");
	c$.getEnergy = Clazz.defineMethod (c$, "getEnergy", 
					   function (distAH, distCH, distCD, distAD) {
					       var energy = Math.round (-27888.0 / distAH - -27888.0 / distAD + -27888.0 / distCD - -27888.0 / distCH);
					       return energy;
					   }, "~N,~N,~N,~N");
	Clazz.defineStatics (c$,
			     "QConst", -27888.0);
    });
    // 
    //// org\jmol\util\TriangleData.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Point3i"], "org.jmol.util.TriangleData", ["org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Point3f"], function () {
	c$ = Clazz.declareType (org.jmol.util, "TriangleData");
	c$.intersectPlane = Clazz.defineMethod (c$, "intersectPlane", 
						function (plane, v, flags) {
						    if (plane == null) {
							v.add (org.jmol.util.TriangleData.fullCubePolygon);
							return v;
						    }var vertices = v.get (0);
						    if (flags != 0) v.clear ();
						    var values =  Clazz.newFloatArray (8, 0);
						    var edgePoints =  new Array (12);
						    var insideMask = 0;
						    for (var i = 0; i < 8; i++) {
							values[i] = plane.x * vertices[i].x + plane.y * vertices[i].y + plane.z * vertices[i].z + plane.w;
							if (values[i] < 0) insideMask |= org.jmol.util.TriangleData.Pwr2[i];
						    }
						    var triangles = org.jmol.util.TriangleData.triangleTable2[insideMask];
						    if (triangles == null) return null;
						    for (var i = 0; i < 24; i += 2) {
							var v1 = org.jmol.util.TriangleData.edgeVertexes[i];
							var v2 = org.jmol.util.TriangleData.edgeVertexes[i + 1];
							var result = org.jmol.util.Point3f.newP (vertices[v2]);
							result.sub (vertices[v1]);
							result.scale (values[v1] / (values[v1] - values[v2]));
							result.add (vertices[v1]);
							edgePoints[i >> 1] = result;
						    }
						    if (flags == 0) {
							var bsPoints =  new org.jmol.util.BitSet ();
							v.clear ();
							for (var i = 0; i < triangles.length; i++) {
							    bsPoints.set (triangles[i]);
							    if (i % 4 == 2) i++;
							}
							var nPoints = org.jmol.util.BitSetUtil.cardinalityOf (bsPoints);
							var pts =  new Array (nPoints);
							v.add (pts);
							var list =  Clazz.newIntArray (12, 0);
							var ptList = 0;
							for (var i = 0; i < triangles.length; i++) {
							    var pt = triangles[i];
							    if (bsPoints.get (pt)) {
								bsPoints.clear (pt);
								pts[ptList] = edgePoints[pt];
								list[pt] = ptList++;
							    }if (i % 4 == 2) i++;
							}
							var polygons = org.jmol.util.ArrayUtil.newInt2 (triangles.length >> 2);
							v.add (polygons);
							for (var i = 0; i < triangles.length; i++) polygons[i >> 2] = [list[triangles[i++]], list[triangles[i++]], list[triangles[i++]], triangles[i]];

							return v;
						    }for (var i = 0; i < triangles.length; i++) {
							var pt1 = edgePoints[triangles[i++]];
							var pt2 = edgePoints[triangles[i++]];
							var pt3 = edgePoints[triangles[i++]];
							if ((flags & 1) == 1) v.add ([pt1, pt2, pt3]);
							if ((flags & 2) == 2) {
							    var b = triangles[i];
							    if ((b & 1) == 1) v.add ([pt1, pt2]);
							    if ((b & 2) == 2) v.add ([pt2, pt3]);
							    if ((b & 4) == 4) v.add ([pt1, pt3]);
							}}
						    return v;
						}, "org.jmol.util.Point4f,java.util.List,~N");
	Clazz.defineStatics (c$,
			     "Pwr2", [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048],
			     "fullCubePolygon", [[0, 4, 5, 3], [5, 1, 0, 3], [1, 5, 6, 2], [6, 2, 1, 3], [2, 6, 7, 2], [7, 3, 2, 3], [3, 7, 4, 2], [4, 0, 3, 2], [6, 5, 4, 0], [4, 7, 6, 0], [0, 1, 2, 0], [2, 3, 0, 0]]);
	c$.cubeVertexOffsets = c$.prototype.cubeVertexOffsets = [org.jmol.util.Point3i.new3 (0, 0, 0), org.jmol.util.Point3i.new3 (1, 0, 0), org.jmol.util.Point3i.new3 (1, 0, 1), org.jmol.util.Point3i.new3 (0, 0, 1), org.jmol.util.Point3i.new3 (0, 1, 0), org.jmol.util.Point3i.new3 (1, 1, 0), org.jmol.util.Point3i.new3 (1, 1, 1), org.jmol.util.Point3i.new3 (0, 1, 1)];
	Clazz.defineStatics (c$,
			     "edgeVertexes", [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7],
			     "triangleTable2", [null, [0, 8, 3, 7], [0, 1, 9, 7], [1, 8, 3, 6, 9, 8, 1, 5], [1, 2, 10, 7], [0, 8, 3, 7, 1, 2, 10, 7], [9, 2, 10, 6, 0, 2, 9, 5], [2, 8, 3, 6, 2, 10, 8, 1, 10, 9, 8, 3], [3, 11, 2, 7], [0, 11, 2, 6, 8, 11, 0, 5], [1, 9, 0, 7, 2, 3, 11, 7], [1, 11, 2, 6, 1, 9, 11, 1, 9, 8, 11, 3], [3, 10, 1, 6, 11, 10, 3, 5], [0, 10, 1, 6, 0, 8, 10, 1, 8, 11, 10, 3], [3, 9, 0, 6, 3, 11, 9, 1, 11, 10, 9, 3], [9, 8, 10, 5, 10, 8, 11, 6], [4, 7, 8, 7], [4, 3, 0, 6, 7, 3, 4, 5], [0, 1, 9, 7, 8, 4, 7, 7], [4, 1, 9, 6, 4, 7, 1, 1, 7, 3, 1, 3], [1, 2, 10, 7, 8, 4, 7, 7], [3, 4, 7, 6, 3, 0, 4, 3, 1, 2, 10, 7], [9, 2, 10, 6, 9, 0, 2, 3, 8, 4, 7, 7], [2, 10, 9, 3, 2, 9, 7, 0, 2, 7, 3, 6, 7, 9, 4, 6], [8, 4, 7, 7, 3, 11, 2, 7], [11, 4, 7, 6, 11, 2, 4, 1, 2, 0, 4, 3], [9, 0, 1, 7, 8, 4, 7, 7, 2, 3, 11, 7], [4, 7, 11, 3, 9, 4, 11, 1, 9, 11, 2, 2, 9, 2, 1, 6], [3, 10, 1, 6, 3, 11, 10, 3, 7, 8, 4, 7], [1, 11, 10, 6, 1, 4, 11, 0, 1, 0, 4, 3, 7, 11, 4, 5], [4, 7, 8, 7, 9, 0, 11, 1, 9, 11, 10, 6, 11, 0, 3, 6], [4, 7, 11, 3, 4, 11, 9, 4, 9, 11, 10, 6], [9, 5, 4, 7], [9, 5, 4, 7, 0, 8, 3, 7], [0, 5, 4, 6, 1, 5, 0, 5], [8, 5, 4, 6, 8, 3, 5, 1, 3, 1, 5, 3], [1, 2, 10, 7, 9, 5, 4, 7], [3, 0, 8, 7, 1, 2, 10, 7, 4, 9, 5, 7], [5, 2, 10, 6, 5, 4, 2, 1, 4, 0, 2, 3], [2, 10, 5, 3, 3, 2, 5, 1, 3, 5, 4, 2, 3, 4, 8, 6], [9, 5, 4, 7, 2, 3, 11, 7], [0, 11, 2, 6, 0, 8, 11, 3, 4, 9, 5, 7], [0, 5, 4, 6, 0, 1, 5, 3, 2, 3, 11, 7], [2, 1, 5, 3, 2, 5, 8, 0, 2, 8, 11, 6, 4, 8, 5, 5], [10, 3, 11, 6, 10, 1, 3, 3, 9, 5, 4, 7], [4, 9, 5, 7, 0, 8, 1, 5, 8, 10, 1, 2, 8, 11, 10, 3], [5, 4, 0, 3, 5, 0, 11, 0, 5, 11, 10, 6, 11, 0, 3, 6], [5, 4, 8, 3, 5, 8, 10, 4, 10, 8, 11, 6], [9, 7, 8, 6, 5, 7, 9, 5], [9, 3, 0, 6, 9, 5, 3, 1, 5, 7, 3, 3], [0, 7, 8, 6, 0, 1, 7, 1, 1, 5, 7, 3], [1, 5, 3, 5, 3, 5, 7, 6], [9, 7, 8, 6, 9, 5, 7, 3, 10, 1, 2, 7], [10, 1, 2, 7, 9, 5, 0, 5, 5, 3, 0, 2, 5, 7, 3, 3], [8, 0, 2, 3, 8, 2, 5, 0, 8, 5, 7, 6, 10, 5, 2, 5], [2, 10, 5, 3, 2, 5, 3, 4, 3, 5, 7, 6], [7, 9, 5, 6, 7, 8, 9, 3, 3, 11, 2, 7], [9, 5, 7, 3, 9, 7, 2, 0, 9, 2, 0, 6, 2, 7, 11, 6], [2, 3, 11, 7, 0, 1, 8, 5, 1, 7, 8, 2, 1, 5, 7, 3], [11, 2, 1, 3, 11, 1, 7, 4, 7, 1, 5, 6], [9, 5, 8, 5, 8, 5, 7, 6, 10, 1, 3, 3, 10, 3, 11, 6], [5, 7, 0, 1, 5, 0, 9, 6, 7, 11, 0, 1, 1, 0, 10, 5, 11, 10, 0, 1], [11, 10, 0, 1, 11, 0, 3, 6, 10, 5, 0, 1, 8, 0, 7, 5, 5, 7, 0, 1], [11, 10, 5, 3, 7, 11, 5, 5], [10, 6, 5, 7], [0, 8, 3, 7, 5, 10, 6, 7], [9, 0, 1, 7, 5, 10, 6, 7], [1, 8, 3, 6, 1, 9, 8, 3, 5, 10, 6, 7], [1, 6, 5, 6, 2, 6, 1, 5], [1, 6, 5, 6, 1, 2, 6, 3, 3, 0, 8, 7], [9, 6, 5, 6, 9, 0, 6, 1, 0, 2, 6, 3], [5, 9, 8, 3, 5, 8, 2, 0, 5, 2, 6, 6, 3, 2, 8, 5], [2, 3, 11, 7, 10, 6, 5, 7], [11, 0, 8, 6, 11, 2, 0, 3, 10, 6, 5, 7], [0, 1, 9, 7, 2, 3, 11, 7, 5, 10, 6, 7], [5, 10, 6, 7, 1, 9, 2, 5, 9, 11, 2, 2, 9, 8, 11, 3], [6, 3, 11, 6, 6, 5, 3, 1, 5, 1, 3, 3], [0, 8, 11, 3, 0, 11, 5, 0, 0, 5, 1, 6, 5, 11, 6, 6], [3, 11, 6, 3, 0, 3, 6, 1, 0, 6, 5, 2, 0, 5, 9, 6], [6, 5, 9, 3, 6, 9, 11, 4, 11, 9, 8, 6], [5, 10, 6, 7, 4, 7, 8, 7], [4, 3, 0, 6, 4, 7, 3, 3, 6, 5, 10, 7], [1, 9, 0, 7, 5, 10, 6, 7, 8, 4, 7, 7], [10, 6, 5, 7, 1, 9, 7, 1, 1, 7, 3, 6, 7, 9, 4, 6], [6, 1, 2, 6, 6, 5, 1, 3, 4, 7, 8, 7], [1, 2, 5, 5, 5, 2, 6, 6, 3, 0, 4, 3, 3, 4, 7, 6], [8, 4, 7, 7, 9, 0, 5, 5, 0, 6, 5, 2, 0, 2, 6, 3], [7, 3, 9, 1, 7, 9, 4, 6, 3, 2, 9, 1, 5, 9, 6, 5, 2, 6, 9, 1], [3, 11, 2, 7, 7, 8, 4, 7, 10, 6, 5, 7], [5, 10, 6, 7, 4, 7, 2, 1, 4, 2, 0, 6, 2, 7, 11, 6], [0, 1, 9, 7, 4, 7, 8, 7, 2, 3, 11, 7, 5, 10, 6, 7], [9, 2, 1, 6, 9, 11, 2, 2, 9, 4, 11, 1, 7, 11, 4, 5, 5, 10, 6, 7], [8, 4, 7, 7, 3, 11, 5, 1, 3, 5, 1, 6, 5, 11, 6, 6], [5, 1, 11, 1, 5, 11, 6, 6, 1, 0, 11, 1, 7, 11, 4, 5, 0, 4, 11, 1], [0, 5, 9, 6, 0, 6, 5, 2, 0, 3, 6, 1, 11, 6, 3, 5, 8, 4, 7, 7], [6, 5, 9, 3, 6, 9, 11, 4, 4, 7, 9, 5, 7, 11, 9, 1], [10, 4, 9, 6, 6, 4, 10, 5], [4, 10, 6, 6, 4, 9, 10, 3, 0, 8, 3, 7], [10, 0, 1, 6, 10, 6, 0, 1, 6, 4, 0, 3], [8, 3, 1, 3, 8, 1, 6, 0, 8, 6, 4, 6, 6, 1, 10, 6], [1, 4, 9, 6, 1, 2, 4, 1, 2, 6, 4, 3], [3, 0, 8, 7, 1, 2, 9, 5, 2, 4, 9, 2, 2, 6, 4, 3], [0, 2, 4, 5, 4, 2, 6, 6], [8, 3, 2, 3, 8, 2, 4, 4, 4, 2, 6, 6], [10, 4, 9, 6, 10, 6, 4, 3, 11, 2, 3, 7], [0, 8, 2, 5, 2, 8, 11, 6, 4, 9, 10, 3, 4, 10, 6, 6], [3, 11, 2, 7, 0, 1, 6, 1, 0, 6, 4, 6, 6, 1, 10, 6], [6, 4, 1, 1, 6, 1, 10, 6, 4, 8, 1, 1, 2, 1, 11, 5, 8, 11, 1, 1], [9, 6, 4, 6, 9, 3, 6, 0, 9, 1, 3, 3, 11, 6, 3, 5], [8, 11, 1, 1, 8, 1, 0, 6, 11, 6, 1, 1, 9, 1, 4, 5, 6, 4, 1, 1], [3, 11, 6, 3, 3, 6, 0, 4, 0, 6, 4, 6], [6, 4, 8, 3, 11, 6, 8, 5], [7, 10, 6, 6, 7, 8, 10, 1, 8, 9, 10, 3], [0, 7, 3, 6, 0, 10, 7, 0, 0, 9, 10, 3, 6, 7, 10, 5], [10, 6, 7, 3, 1, 10, 7, 1, 1, 7, 8, 2, 1, 8, 0, 6], [10, 6, 7, 3, 10, 7, 1, 4, 1, 7, 3, 6], [1, 2, 6, 3, 1, 6, 8, 0, 1, 8, 9, 6, 8, 6, 7, 6], [2, 6, 9, 1, 2, 9, 1, 6, 6, 7, 9, 1, 0, 9, 3, 5, 7, 3, 9, 1], [7, 8, 0, 3, 7, 0, 6, 4, 6, 0, 2, 6], [7, 3, 2, 3, 6, 7, 2, 5], [2, 3, 11, 7, 10, 6, 8, 1, 10, 8, 9, 6, 8, 6, 7, 6], [2, 0, 7, 1, 2, 7, 11, 6, 0, 9, 7, 1, 6, 7, 10, 5, 9, 10, 7, 1], [1, 8, 0, 6, 1, 7, 8, 2, 1, 10, 7, 1, 6, 7, 10, 5, 2, 3, 11, 7], [11, 2, 1, 3, 11, 1, 7, 4, 10, 6, 1, 5, 6, 7, 1, 1], [8, 9, 6, 1, 8, 6, 7, 6, 9, 1, 6, 1, 11, 6, 3, 5, 1, 3, 6, 1], [0, 9, 1, 7, 11, 6, 7, 7], [7, 8, 0, 3, 7, 0, 6, 4, 3, 11, 0, 5, 11, 6, 0, 1], [7, 11, 6, 7], [7, 6, 11, 7], [3, 0, 8, 7, 11, 7, 6, 7], [0, 1, 9, 7, 11, 7, 6, 7], [8, 1, 9, 6, 8, 3, 1, 3, 11, 7, 6, 7], [10, 1, 2, 7, 6, 11, 7, 7], [1, 2, 10, 7, 3, 0, 8, 7, 6, 11, 7, 7], [2, 9, 0, 6, 2, 10, 9, 3, 6, 11, 7, 7], [6, 11, 7, 7, 2, 10, 3, 5, 10, 8, 3, 2, 10, 9, 8, 3], [7, 2, 3, 6, 6, 2, 7, 5], [7, 0, 8, 6, 7, 6, 0, 1, 6, 2, 0, 3], [2, 7, 6, 6, 2, 3, 7, 3, 0, 1, 9, 7], [1, 6, 2, 6, 1, 8, 6, 0, 1, 9, 8, 3, 8, 7, 6, 3], [10, 7, 6, 6, 10, 1, 7, 1, 1, 3, 7, 3], [10, 7, 6, 6, 1, 7, 10, 4, 1, 8, 7, 2, 1, 0, 8, 3], [0, 3, 7, 3, 0, 7, 10, 0, 0, 10, 9, 6, 6, 10, 7, 5], [7, 6, 10, 3, 7, 10, 8, 4, 8, 10, 9, 6], [6, 8, 4, 6, 11, 8, 6, 5], [3, 6, 11, 6, 3, 0, 6, 1, 0, 4, 6, 3], [8, 6, 11, 6, 8, 4, 6, 3, 9, 0, 1, 7], [9, 4, 6, 3, 9, 6, 3, 0, 9, 3, 1, 6, 11, 3, 6, 5], [6, 8, 4, 6, 6, 11, 8, 3, 2, 10, 1, 7], [1, 2, 10, 7, 3, 0, 11, 5, 0, 6, 11, 2, 0, 4, 6, 3], [4, 11, 8, 6, 4, 6, 11, 3, 0, 2, 9, 5, 2, 10, 9, 3], [10, 9, 3, 1, 10, 3, 2, 6, 9, 4, 3, 1, 11, 3, 6, 5, 4, 6, 3, 1], [8, 2, 3, 6, 8, 4, 2, 1, 4, 6, 2, 3], [0, 4, 2, 5, 4, 6, 2, 3], [1, 9, 0, 7, 2, 3, 4, 1, 2, 4, 6, 6, 4, 3, 8, 6], [1, 9, 4, 3, 1, 4, 2, 4, 2, 4, 6, 6], [8, 1, 3, 6, 8, 6, 1, 0, 8, 4, 6, 3, 6, 10, 1, 3], [10, 1, 0, 3, 10, 0, 6, 4, 6, 0, 4, 6], [4, 6, 3, 1, 4, 3, 8, 6, 6, 10, 3, 1, 0, 3, 9, 5, 10, 9, 3, 1], [10, 9, 4, 3, 6, 10, 4, 5], [4, 9, 5, 7, 7, 6, 11, 7], [0, 8, 3, 7, 4, 9, 5, 7, 11, 7, 6, 7], [5, 0, 1, 6, 5, 4, 0, 3, 7, 6, 11, 7], [11, 7, 6, 7, 8, 3, 4, 5, 3, 5, 4, 2, 3, 1, 5, 3], [9, 5, 4, 7, 10, 1, 2, 7, 7, 6, 11, 7], [6, 11, 7, 7, 1, 2, 10, 7, 0, 8, 3, 7, 4, 9, 5, 7], [7, 6, 11, 7, 5, 4, 10, 5, 4, 2, 10, 2, 4, 0, 2, 3], [3, 4, 8, 6, 3, 5, 4, 2, 3, 2, 5, 1, 10, 5, 2, 5, 11, 7, 6, 7], [7, 2, 3, 6, 7, 6, 2, 3, 5, 4, 9, 7], [9, 5, 4, 7, 0, 8, 6, 1, 0, 6, 2, 6, 6, 8, 7, 6], [3, 6, 2, 6, 3, 7, 6, 3, 1, 5, 0, 5, 5, 4, 0, 3], [6, 2, 8, 1, 6, 8, 7, 6, 2, 1, 8, 1, 4, 8, 5, 5, 1, 5, 8, 1], [9, 5, 4, 7, 10, 1, 6, 5, 1, 7, 6, 2, 1, 3, 7, 3], [1, 6, 10, 6, 1, 7, 6, 2, 1, 0, 7, 1, 8, 7, 0, 5, 9, 5, 4, 7], [4, 0, 10, 1, 4, 10, 5, 6, 0, 3, 10, 1, 6, 10, 7, 5, 3, 7, 10, 1], [7, 6, 10, 3, 7, 10, 8, 4, 5, 4, 10, 5, 4, 8, 10, 1], [6, 9, 5, 6, 6, 11, 9, 1, 11, 8, 9, 3], [3, 6, 11, 6, 0, 6, 3, 4, 0, 5, 6, 2, 0, 9, 5, 3], [0, 11, 8, 6, 0, 5, 11, 0, 0, 1, 5, 3, 5, 6, 11, 3], [6, 11, 3, 3, 6, 3, 5, 4, 5, 3, 1, 6], [1, 2, 10, 7, 9, 5, 11, 1, 9, 11, 8, 6, 11, 5, 6, 6], [0, 11, 3, 6, 0, 6, 11, 2, 0, 9, 6, 1, 5, 6, 9, 5, 1, 2, 10, 7], [11, 8, 5, 1, 11, 5, 6, 6, 8, 0, 5, 1, 10, 5, 2, 5, 0, 2, 5, 1], [6, 11, 3, 3, 6, 3, 5, 4, 2, 10, 3, 5, 10, 5, 3, 1], [5, 8, 9, 6, 5, 2, 8, 0, 5, 6, 2, 3, 3, 8, 2, 5], [9, 5, 6, 3, 9, 6, 0, 4, 0, 6, 2, 6], [1, 5, 8, 1, 1, 8, 0, 6, 5, 6, 8, 1, 3, 8, 2, 5, 6, 2, 8, 1], [1, 5, 6, 3, 2, 1, 6, 5], [1, 3, 6, 1, 1, 6, 10, 6, 3, 8, 6, 1, 5, 6, 9, 5, 8, 9, 6, 1], [10, 1, 0, 3, 10, 0, 6, 4, 9, 5, 0, 5, 5, 6, 0, 1], [0, 3, 8, 7, 5, 6, 10, 7], [10, 5, 6, 7], [11, 5, 10, 6, 7, 5, 11, 5], [11, 5, 10, 6, 11, 7, 5, 3, 8, 3, 0, 7], [5, 11, 7, 6, 5, 10, 11, 3, 1, 9, 0, 7], [10, 7, 5, 6, 10, 11, 7, 3, 9, 8, 1, 5, 8, 3, 1, 3], [11, 1, 2, 6, 11, 7, 1, 1, 7, 5, 1, 3], [0, 8, 3, 7, 1, 2, 7, 1, 1, 7, 5, 6, 7, 2, 11, 6], [9, 7, 5, 6, 9, 2, 7, 0, 9, 0, 2, 3, 2, 11, 7, 3], [7, 5, 2, 1, 7, 2, 11, 6, 5, 9, 2, 1, 3, 2, 8, 5, 9, 8, 2, 1], [2, 5, 10, 6, 2, 3, 5, 1, 3, 7, 5, 3], [8, 2, 0, 6, 8, 5, 2, 0, 8, 7, 5, 3, 10, 2, 5, 5], [9, 0, 1, 7, 5, 10, 3, 1, 5, 3, 7, 6, 3, 10, 2, 6], [9, 8, 2, 1, 9, 2, 1, 6, 8, 7, 2, 1, 10, 2, 5, 5, 7, 5, 2, 1], [1, 3, 5, 5, 3, 7, 5, 3], [0, 8, 7, 3, 0, 7, 1, 4, 1, 7, 5, 6], [9, 0, 3, 3, 9, 3, 5, 4, 5, 3, 7, 6], [9, 8, 7, 3, 5, 9, 7, 5], [5, 8, 4, 6, 5, 10, 8, 1, 10, 11, 8, 3], [5, 0, 4, 6, 5, 11, 0, 0, 5, 10, 11, 3, 11, 3, 0, 3], [0, 1, 9, 7, 8, 4, 10, 1, 8, 10, 11, 6, 10, 4, 5, 6], [10, 11, 4, 1, 10, 4, 5, 6, 11, 3, 4, 1, 9, 4, 1, 5, 3, 1, 4, 1], [2, 5, 1, 6, 2, 8, 5, 0, 2, 11, 8, 3, 4, 5, 8, 5], [0, 4, 11, 1, 0, 11, 3, 6, 4, 5, 11, 1, 2, 11, 1, 5, 5, 1, 11, 1], [0, 2, 5, 1, 0, 5, 9, 6, 2, 11, 5, 1, 4, 5, 8, 5, 11, 8, 5, 1], [9, 4, 5, 7, 2, 11, 3, 7], [2, 5, 10, 6, 3, 5, 2, 4, 3, 4, 5, 2, 3, 8, 4, 3], [5, 10, 2, 3, 5, 2, 4, 4, 4, 2, 0, 6], [3, 10, 2, 6, 3, 5, 10, 2, 3, 8, 5, 1, 4, 5, 8, 5, 0, 1, 9, 7], [5, 10, 2, 3, 5, 2, 4, 4, 1, 9, 2, 5, 9, 4, 2, 1], [8, 4, 5, 3, 8, 5, 3, 4, 3, 5, 1, 6], [0, 4, 5, 3, 1, 0, 5, 5], [8, 4, 5, 3, 8, 5, 3, 4, 9, 0, 5, 5, 0, 3, 5, 1], [9, 4, 5, 7], [4, 11, 7, 6, 4, 9, 11, 1, 9, 10, 11, 3], [0, 8, 3, 7, 4, 9, 7, 5, 9, 11, 7, 2, 9, 10, 11, 3], [1, 10, 11, 3, 1, 11, 4, 0, 1, 4, 0, 6, 7, 4, 11, 5], [3, 1, 4, 1, 3, 4, 8, 6, 1, 10, 4, 1, 7, 4, 11, 5, 10, 11, 4, 1], [4, 11, 7, 6, 9, 11, 4, 4, 9, 2, 11, 2, 9, 1, 2, 3], [9, 7, 4, 6, 9, 11, 7, 2, 9, 1, 11, 1, 2, 11, 1, 5, 0, 8, 3, 7], [11, 7, 4, 3, 11, 4, 2, 4, 2, 4, 0, 6], [11, 7, 4, 3, 11, 4, 2, 4, 8, 3, 4, 5, 3, 2, 4, 1], [2, 9, 10, 6, 2, 7, 9, 0, 2, 3, 7, 3, 7, 4, 9, 3], [9, 10, 7, 1, 9, 7, 4, 6, 10, 2, 7, 1, 8, 7, 0, 5, 2, 0, 7, 1], [3, 7, 10, 1, 3, 10, 2, 6, 7, 4, 10, 1, 1, 10, 0, 5, 4, 0, 10, 1], [1, 10, 2, 7, 8, 7, 4, 7], [4, 9, 1, 3, 4, 1, 7, 4, 7, 1, 3, 6], [4, 9, 1, 3, 4, 1, 7, 4, 0, 8, 1, 5, 8, 7, 1, 1], [4, 0, 3, 3, 7, 4, 3, 5], [4, 8, 7, 7], [9, 10, 8, 5, 10, 11, 8, 3], [3, 0, 9, 3, 3, 9, 11, 4, 11, 9, 10, 6], [0, 1, 10, 3, 0, 10, 8, 4, 8, 10, 11, 6], [3, 1, 10, 3, 11, 3, 10, 5], [1, 2, 11, 3, 1, 11, 9, 4, 9, 11, 8, 6], [3, 0, 9, 3, 3, 9, 11, 4, 1, 2, 9, 5, 2, 11, 9, 1], [0, 2, 11, 3, 8, 0, 11, 5], [3, 2, 11, 7], [2, 3, 8, 3, 2, 8, 10, 4, 10, 8, 9, 6], [9, 10, 2, 3, 0, 9, 2, 5], [2, 3, 8, 3, 2, 8, 10, 4, 0, 1, 8, 5, 1, 10, 8, 1], [1, 10, 2, 7], [1, 3, 8, 3, 9, 1, 8, 5], [0, 9, 1, 7], [0, 3, 8, 7], null]);
    });
    // 
    //// org\jmol\bspt\Bspf.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.bspt");
    Clazz.load (null, "org.jmol.bspt.Bspf", ["org.jmol.bspt.Bspt", "org.jmol.util.ArrayUtil", "$.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.dimMax = 0;
	    this.bspts = null;
	    this.isValid = false;
	    this.bsptsValid = null;
	    this.cubeIterators = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.bspt, "Bspf");
	Clazz.defineMethod (c$, "validate", 
			    function (isValid) {
				this.isValid = isValid;
			    }, "~B");
	Clazz.defineMethod (c$, "validateModel", 
			    function (i, isValid) {
				this.bsptsValid[i] = isValid;
			    }, "~N,~B");
	Clazz.defineMethod (c$, "isInitialized", 
			    function () {
				return this.isValid;
			    });
	Clazz.defineMethod (c$, "isInitializedIndex", 
			    function (bsptIndex) {
				return this.bspts.length > bsptIndex && this.bspts[bsptIndex] != null && this.bsptsValid[bsptIndex];
			    }, "~N");
	Clazz.makeConstructor (c$, 
			       function (dimMax) {
				   this.dimMax = dimMax;
				   this.bspts =  new Array (0);
				   this.bsptsValid =  Clazz.newBooleanArray (0, false);
				   this.cubeIterators =  new Array (0);
			       }, "~N");
	Clazz.defineMethod (c$, "getBsptCount", 
			    function () {
				return this.bspts.length;
			    });
	Clazz.defineMethod (c$, "addTuple", 
			    function (bsptIndex, tuple) {
				if (bsptIndex >= this.bspts.length) {
				    this.bspts = org.jmol.util.ArrayUtil.arrayCopyObject (this.bspts, bsptIndex + 1);
				    this.bsptsValid = org.jmol.util.ArrayUtil.arrayCopyBool (this.bsptsValid, bsptIndex + 1);
				}var bspt = this.bspts[bsptIndex];
				if (bspt == null) {
				    bspt = this.bspts[bsptIndex] =  new org.jmol.bspt.Bspt (this.dimMax, bsptIndex);
				}bspt.addTuple (tuple);
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "stats", 
			    function () {
				for (var i = 0; i < this.bspts.length; ++i) if (this.bspts[i] != null) this.bspts[i].stats ();

			    });
	Clazz.defineMethod (c$, "dump", 
			    function () {
				for (var i = 0; i < this.bspts.length; ++i) {
				    org.jmol.util.Logger.info (">>>>\nDumping bspt #" + i + "\n>>>>");
				    this.bspts[i].dump ();
				}
				org.jmol.util.Logger.info ("<<<<");
			    });
	Clazz.defineMethod (c$, "getCubeIterator", 
			    function (bsptIndex) {
				if (bsptIndex < 0) return this.getNewCubeIterator (-1 - bsptIndex);
				if (bsptIndex >= this.cubeIterators.length) this.cubeIterators = org.jmol.util.ArrayUtil.arrayCopyObject (this.cubeIterators, bsptIndex + 1);
				if (this.cubeIterators[bsptIndex] == null && this.bspts[bsptIndex] != null) this.cubeIterators[bsptIndex] = this.getNewCubeIterator (bsptIndex);
				this.cubeIterators[bsptIndex].set (this.bspts[bsptIndex]);
				return this.cubeIterators[bsptIndex];
			    }, "~N");
	Clazz.defineMethod (c$, "getNewCubeIterator", 
			    function (bsptIndex) {
				return this.bspts[bsptIndex].allocateCubeIterator ();
			    }, "~N");
	Clazz.defineMethod (c$, "initialize", 
			    function (modelIndex, atoms, modelAtomBitSet) {
				if (this.bspts[modelIndex] != null) this.bspts[modelIndex].reset ();
				for (var i = modelAtomBitSet.nextSetBit (0); i >= 0; i = modelAtomBitSet.nextSetBit (i + 1)) this.addTuple (modelIndex, atoms[i]);

				this.bsptsValid[modelIndex] = true;
			    }, "~N,~A,org.jmol.util.BitSet");
    });
    // 
    //// org\jmol\io\XmlUtil.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.io");
    Clazz.load (null, "org.jmol.io.XmlUtil", ["org.jmol.util.TextFormat"], function () {
	c$ = Clazz.declareType (org.jmol.io, "XmlUtil");
	c$.openDocument = Clazz.defineMethod (c$, "openDocument", 
					      function (data) {
						  data.append ("<?xml version=\"1.0\"?>\n");
					      }, "org.jmol.util.StringXBuilder");
	c$.openTag = Clazz.defineMethod (c$, "openTag", 
					 function (sb, name) {
					     sb.append ("<").append (name).append (">\n");
					 }, "org.jmol.util.StringXBuilder,~S");
	c$.openTagAttr = Clazz.defineMethod (c$, "openTagAttr", 
					     function (sb, name, attributes) {
						 org.jmol.io.XmlUtil.appendTagAll (sb, name, attributes, null, false, false);
						 sb.append ("\n");
					     }, "org.jmol.util.StringXBuilder,~S,~A");
	c$.closeTag = Clazz.defineMethod (c$, "closeTag", 
					  function (sb, name) {
					      sb.append ("</").append (name).append (">\n");
					  }, "org.jmol.util.StringXBuilder,~S");
	c$.appendTagAll = Clazz.defineMethod (c$, "appendTagAll", 
					      function (sb, name, attributes, data, isCdata, doClose) {
						  var closer = ">";
						  if (name.endsWith ("/")) {
						      name = name.substring (0, name.length - 1);
						      if (data == null) {
							  closer = "/>\n";
							  doClose = false;
						      }}sb.append ("<").append (name);
						  if (attributes != null) for (var i = 0; i < attributes.length; i++) {
						      var o = attributes[i];
						      if (o == null) continue;
						      if (Clazz.instanceOf (o, Array)) for (var j = 0; j < (o).length; j += 2) org.jmol.io.XmlUtil.appendAttrib (sb, (o)[j], (o)[j + 1]);

						      else org.jmol.io.XmlUtil.appendAttrib (sb, o, attributes[++i]);
						  }
						  sb.append (closer);
						  if (data != null) {
						      if (isCdata) data = org.jmol.io.XmlUtil.wrapCdata (data);
						      sb.appendO (data);
						  }if (doClose) org.jmol.io.XmlUtil.closeTag (sb, name);
					      }, "org.jmol.util.StringXBuilder,~S,~A,~O,~B,~B");
	c$.wrapCdata = Clazz.defineMethod (c$, "wrapCdata", 
					   function (data) {
					       var s = "" + data;
					       return (s.indexOf ("&") < 0 && s.indexOf ("<") < 0 ? (s.startsWith ("\n") ? "" : "\n") + s : "<![CDATA[" + org.jmol.util.TextFormat.simpleReplace (s, "]]>", "]]]]><![CDATA[>") + "]]>");
					   }, "~O");
	c$.unwrapCdata = Clazz.defineMethod (c$, "unwrapCdata", 
					     function (s) {
						 return (s.startsWith ("<![CDATA[") && s.endsWith ("]]>") ? s.substring (9, s.length - 3).$replace ("]]]]><![CDATA[>", "]]>") : s);
					     }, "~S");
	c$.appendTagObj = Clazz.defineMethod (c$, "appendTagObj", 
					      function (sb, name, attributes, data) {
						  org.jmol.io.XmlUtil.appendTagAll (sb, name, attributes, data, false, true);
					      }, "org.jmol.util.StringXBuilder,~S,~A,~O");
	c$.appendTag = Clazz.defineMethod (c$, "appendTag", 
					   function (sb, name, data) {
					       if (Clazz.instanceOf (data, Array)) org.jmol.io.XmlUtil.appendTagAll (sb, name, data, null, false, true);
					       else org.jmol.io.XmlUtil.appendTagAll (sb, name, null, data, false, true);
					   }, "org.jmol.util.StringXBuilder,~S,~O");
	c$.appendCdata = Clazz.defineMethod (c$, "appendCdata", 
					     function (sb, name, attributes, data) {
						 org.jmol.io.XmlUtil.appendTagAll (sb, name, attributes, data, true, true);
					     }, "org.jmol.util.StringXBuilder,~S,~A,~S");
	c$.appendAttrib = Clazz.defineMethod (c$, "appendAttrib", 
					      function (sb, name, value) {
						  if (value == null) return;
						  sb.append (" ").appendO (name).append ("=\"").appendO (value).append ("\"");
					      }, "org.jmol.util.StringXBuilder,~O,~O");
    });
    // 
    //// org\jmol\api\AtomIndexIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "AtomIndexIterator");
    // 
    //// org\jmol\modelset\AtomIteratorWithinModel.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.api.AtomIndexIterator"], "org.jmol.modelset.AtomIteratorWithinModel", ["org.jmol.atomdata.RadiusData"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.cubeIterator = null;
	    this.bspf = null;
	    this.threadSafe = false;
	    this.hemisphereOnly = false;
	    this.isZeroBased = false;
	    this.modelIndex = 2147483647;
	    this.atomIndex = -1;
	    this.zeroBase = 0;
	    this.distanceSquared = 0;
	    this.bsSelected = null;
	    this.isGreaterOnly = false;
	    this.checkGreater = false;
	    this.radiusData = null;
	    this.vdw1 = 0;
	    this.isVdw = false;
	    this.atoms = null;
	    this.viewer = null;
	    this.iNext = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "AtomIteratorWithinModel", null, org.jmol.api.AtomIndexIterator);
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.defineMethod (c$, "initialize", 
			    function (bspf, bsSelected, isGreaterOnly, isZeroBased, hemisphereOnly, threadSafe) {
				this.bspf = bspf;
				this.bsSelected = bsSelected;
				this.isGreaterOnly = isGreaterOnly;
				this.isZeroBased = isZeroBased;
				this.hemisphereOnly = hemisphereOnly;
				this.threadSafe = threadSafe;
				this.cubeIterator = null;
			    }, "org.jmol.bspt.Bspf,org.jmol.util.BitSet,~B,~B,~B,~B");
	Clazz.overrideMethod (c$, "setModel", 
			      function (modelSet, modelIndex, firstModelAtom, atomIndex, center, distance, rd) {
				  if (this.threadSafe) modelIndex = -1 - modelIndex;
				  if (modelIndex != this.modelIndex || this.cubeIterator == null) {
				      this.cubeIterator = this.bspf.getCubeIterator (modelIndex);
				      this.modelIndex = modelIndex;
				  }this.zeroBase = (this.isZeroBased ? firstModelAtom : 0);
				  if (distance == -2147483648) return;
				  this.atomIndex = (distance < 0 ? -1 : atomIndex);
				  this.isVdw = (rd != null);
				  if (this.isVdw) {
				      this.radiusData = rd;
				      this.atoms = modelSet.atoms;
				      this.viewer = modelSet.viewer;
				      distance = (rd.factorType === org.jmol.atomdata.RadiusData.EnumType.OFFSET ? 5 + rd.value : 5 * rd.value);
				      this.vdw1 = this.atoms[atomIndex].getVanderwaalsRadiusFloat (this.viewer, rd.vdwType);
				  }this.checkGreater = (this.isGreaterOnly && atomIndex != 2147483647);
				  this.setCenter (center, distance);
			      }, "org.jmol.modelset.ModelCollection,~N,~N,~N,org.jmol.util.Point3f,~N,org.jmol.atomdata.RadiusData");
	Clazz.overrideMethod (c$, "setCenter", 
			      function (center, distance) {
				  if (this.cubeIterator == null) return;
				  this.cubeIterator.initialize (center, distance, this.hemisphereOnly);
				  this.distanceSquared = distance * distance;
			      }, "org.jmol.util.Point3f,~N");
	Clazz.overrideMethod (c$, "hasNext", 
			      function () {
				  if (this.atomIndex >= 0) while (this.cubeIterator.hasMoreElements ()) {
				      var a = this.cubeIterator.nextElement ();
				      if ((this.iNext = a.index) != this.atomIndex && (!this.checkGreater || this.iNext > this.atomIndex) && (this.bsSelected == null || this.bsSelected.get (this.iNext))) {
					  return true;
				      }}
				  else if (this.cubeIterator.hasMoreElements ()) {
				      var a = this.cubeIterator.nextElement ();
				      this.iNext = a.index;
				      return true;
				  }this.iNext = -1;
				  return false;
			      });
	Clazz.overrideMethod (c$, "next", 
			      function () {
				  return this.iNext - this.zeroBase;
			      });
	Clazz.overrideMethod (c$, "foundDistance2", 
			      function () {
				  return (this.cubeIterator == null ? -1 : this.cubeIterator.foundDistance2 ());
			      });
	Clazz.overrideMethod (c$, "addAtoms", 
			      function (bsResult) {
				  var iAtom;
				  while (this.hasNext ()) if ((iAtom = this.next ()) >= 0) {
				      var d;
				      if (this.isVdw) {
					  d = this.atoms[iAtom].getVanderwaalsRadiusFloat (this.viewer, this.radiusData.vdwType) + this.vdw1;
					  switch (this.radiusData.factorType) {
					  case org.jmol.atomdata.RadiusData.EnumType.OFFSET:
					      d += this.radiusData.value * 2;
					      break;
					  case org.jmol.atomdata.RadiusData.EnumType.FACTOR:
					      d *= this.radiusData.value;
					      break;
					  }
					  d *= d;
				      } else {
					  d = this.distanceSquared;
				      }if (this.foundDistance2 () <= d) bsResult.set (iAtom);
				  }
			      }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "release", 
			      function () {
				  if (this.cubeIterator != null) {
				      this.cubeIterator.release ();
				      this.cubeIterator = null;
				  }});
    });
    // 
    //// org\jmol\modelset\AtomIteratorWithinModelSet.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.AtomIteratorWithinModel"], "org.jmol.modelset.AtomIteratorWithinModelSet", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bsModels = null;
	    this.center = null;
	    this.distance = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "AtomIteratorWithinModelSet", org.jmol.modelset.AtomIteratorWithinModel);
	Clazz.makeConstructor (c$, 
			       function (bsModels) {
				   Clazz.superConstructor (this, org.jmol.modelset.AtomIteratorWithinModelSet, []);
				   this.bsModels = bsModels;
			       }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setCenter", 
			    function (center, distance) {
				this.center = center;
				this.distance = distance;
				this.set (0);
			    }, "org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "set", 
			    ($fz = function (iModel) {
				if ((this.modelIndex = this.bsModels.nextSetBit (iModel)) < 0 || (this.cubeIterator = this.bspf.getCubeIterator (this.modelIndex)) == null) return false;
				Clazz.superCall (this, org.jmol.modelset.AtomIteratorWithinModelSet, "setCenter", [this.center, this.distance]);
				return true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "hasNext", 
			    function () {
				if (Clazz.superCall (this, org.jmol.modelset.AtomIteratorWithinModelSet, "hasNext", [])) return true;
				if (!this.set (this.modelIndex + 1)) return false;
				return this.hasNext ();
			    });
    });
    // 
    //// org\jmol\bspt\Bspt.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.bspt");
    Clazz.load (null, "org.jmol.bspt.Bspt", ["org.jmol.bspt.CubeIterator", "$.Leaf", "org.jmol.util.Logger", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.treeDepth = 0;
	    this.dimMax = 0;
	    this.index = 0;
	    this.eleRoot = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.bspt, "Bspt");
	Clazz.makeConstructor (c$, 
			       function (dimMax, index) {
				   this.dimMax = dimMax;
				   this.index = index;
				   this.reset ();
			       }, "~N,~N");
	Clazz.defineMethod (c$, "reset", 
			    function () {
				this.eleRoot =  new org.jmol.bspt.Leaf (this, null, 0);
				this.treeDepth = 1;
			    });
	Clazz.defineMethod (c$, "addTuple", 
			    function (tuple) {
				this.eleRoot = this.eleRoot.addTuple (0, tuple);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "stats", 
			    function () {
			    });
	Clazz.defineMethod (c$, "dump", 
			    function () {
				var sb =  new org.jmol.util.StringXBuilder ();
				this.eleRoot.dump (0, sb);
				org.jmol.util.Logger.info (sb.toString ());
			    });
	Clazz.defineMethod (c$, "allocateCubeIterator", 
			    function () {
				return  new org.jmol.bspt.CubeIterator (this);
			    });
	Clazz.defineStatics (c$,
			     "leafCountMax", 2,
			     "MAX_TREE_DEPTH", 100);
    });
    // 
    //// org\jmol\util\JmolMolecule.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.util.Elements"], "org.jmol.util.JmolMolecule", ["org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.nodes = null;
	    this.moleculeIndex = 0;
	    this.modelIndex = 0;
	    this.indexInModel = 0;
	    this.firstAtomIndex = 0;
	    this.atomCount = 0;
	    this.nElements = 0;
	    this.elementCounts = null;
	    this.altElementCounts = null;
	    this.elementNumberMax = 0;
	    this.altElementMax = 0;
	    this.mf = null;
	    this.atomList = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "JmolMolecule");
	Clazz.prepareFields (c$, function () {
	    this.elementCounts =  Clazz.newIntArray (org.jmol.util.Elements.elementNumberMax, 0);
	    this.altElementCounts =  Clazz.newIntArray (org.jmol.util.Elements.altElementMax, 0);
	});
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	c$.getMolecules = Clazz.defineMethod (c$, "getMolecules", 
					      function (atoms, bsModelAtoms, biobranches, bsExclude) {
						  var bsToTest = null;
						  var bsBranch =  new org.jmol.util.BitSet ();
						  var thisModelIndex = -1;
						  var indexInModel = 0;
						  var moleculeCount = 0;
						  var molecules =  new Array (4);
						  if (bsExclude == null) bsExclude =  new org.jmol.util.BitSet ();
						  for (var i = 0; i < atoms.length; i++) if (!bsExclude.get (i) && !bsBranch.get (i)) {
						      if (atoms[i].isDeleted ()) {
							  bsExclude.set (i);
							  continue;
						      }var modelIndex = atoms[i].getModelIndex ();
						      if (modelIndex != thisModelIndex) {
							  thisModelIndex = modelIndex;
							  indexInModel = 0;
							  bsToTest = bsModelAtoms[modelIndex];
						      }bsBranch = org.jmol.util.JmolMolecule.getBranchBitSet (atoms, i, bsToTest, biobranches, -1, true, true);
						      if (bsBranch.nextSetBit (0) >= 0) {
							  molecules = org.jmol.util.JmolMolecule.addMolecule (molecules, moleculeCount++, atoms, i, bsBranch, modelIndex, indexInModel++, bsExclude);
						      }}
						  return org.jmol.util.JmolMolecule.allocateArray (molecules, moleculeCount);
					      }, "~A,~A,java.util.List,org.jmol.util.BitSet");
	c$.getBranchBitSet = Clazz.defineMethod (c$, "getBranchBitSet", 
						 function (atoms, atomIndex, bsToTest, biobranches, atomIndexNot, allowCyclic, allowBioResidue) {
						     var bs = org.jmol.util.BitSetUtil.newBitSet (atoms.length);
						     if (atomIndex < 0) return bs;
						     if (atomIndexNot >= 0) bsToTest.clear (atomIndexNot);
						     return (org.jmol.util.JmolMolecule.getCovalentlyConnectedBitSet (atoms, atoms[atomIndex], bsToTest, allowCyclic, allowBioResidue, biobranches, bs) ? bs :  new org.jmol.util.BitSet ());
						 }, "~A,~N,org.jmol.util.BitSet,java.util.List,~N,~B,~B");
	c$.addMolecule = Clazz.defineMethod (c$, "addMolecule", 
					     function (molecules, iMolecule, atoms, iAtom, bsBranch, modelIndex, indexInModel, bsExclude) {
						 bsExclude.or (bsBranch);
						 if (iMolecule == molecules.length) molecules = org.jmol.util.JmolMolecule.allocateArray (molecules, iMolecule * 2 + 1);
						 molecules[iMolecule] = org.jmol.util.JmolMolecule.initialize (atoms, iMolecule, iAtom, bsBranch, modelIndex, indexInModel);
						 return molecules;
					     }, "~A,~N,~A,~N,org.jmol.util.BitSet,~N,~N,org.jmol.util.BitSet");
	c$.getMolecularFormula = Clazz.defineMethod (c$, "getMolecularFormula", 
						     function (atoms, bsSelected, includeMissingHydrogens) {
							 var m =  new org.jmol.util.JmolMolecule ();
							 m.nodes = atoms;
							 m.atomList = bsSelected;
							 return m.getMolecularFormula (includeMissingHydrogens);
						     }, "~A,org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "getMolecularFormula", 
			    function (includeMissingHydrogens) {
				if (this.mf != null) return this.mf;
				this.getElementAndAtomCount (includeMissingHydrogens);
				var mf = "";
				var sep = "";
				var nX;
				for (var i = 1; i <= this.elementNumberMax; i++) {
				    nX = this.elementCounts[i];
				    if (nX != 0) {
					mf += sep + org.jmol.util.Elements.elementSymbolFromNumber (i) + " " + nX;
					sep = " ";
				    }}
				for (var i = 1; i <= this.altElementMax; i++) {
				    nX = this.altElementCounts[i];
				    if (nX != 0) {
					mf += sep + org.jmol.util.Elements.elementSymbolFromNumber (org.jmol.util.Elements.altElementNumberFromIndex (i)) + " " + nX;
					sep = " ";
				    }}
				return mf;
			    }, "~B");
	c$.initialize = Clazz.defineMethod (c$, "initialize", 
					    ($fz = function (nodes, moleculeIndex, firstAtomIndex, atomList, modelIndex, indexInModel) {
						var jm =  new org.jmol.util.JmolMolecule ();
						jm.nodes = nodes;
						jm.firstAtomIndex = firstAtomIndex;
						jm.atomList = atomList;
						jm.moleculeIndex = moleculeIndex;
						jm.modelIndex = modelIndex;
						jm.indexInModel = indexInModel;
						return jm;
					    }, $fz.isPrivate = true, $fz), "~A,~N,~N,org.jmol.util.BitSet,~N,~N");
	Clazz.defineMethod (c$, "getElementAndAtomCount", 
			    ($fz = function (includeMissingHydrogens) {
				if (this.atomList == null) {
				    this.atomList =  new org.jmol.util.BitSet ();
				    this.atomList.setBits (0, this.nodes.length);
				}this.elementCounts =  Clazz.newIntArray (org.jmol.util.Elements.elementNumberMax, 0);
				this.altElementCounts =  Clazz.newIntArray (org.jmol.util.Elements.altElementMax, 0);
				var count = 0;
				for (var i = this.atomList.nextSetBit (0); i >= 0; i = this.atomList.nextSetBit (i + 1)) {
				    count++;
				    var n = this.nodes[i].getAtomicAndIsotopeNumber ();
				    if (n < org.jmol.util.Elements.elementNumberMax) {
					this.elementCounts[n]++;
					if (this.elementCounts[n] == 1) this.nElements++;
					this.elementNumberMax = Math.max (this.elementNumberMax, n);
					if (includeMissingHydrogens) {
					    var nH = this.nodes[i].getImplicitHydrogenCount ();
					    if (nH > 0) {
						if (this.elementCounts[1] == 0) this.nElements++;
						this.elementCounts[1] += nH;
					    }}} else {
						n = org.jmol.util.Elements.altElementIndexFromNumber (n);
						this.altElementCounts[n]++;
						if (this.altElementCounts[n] == 1) this.nElements++;
						this.altElementMax = Math.max (this.altElementMax, n);
					    }}
				this.atomCount = count;
			    }, $fz.isPrivate = true, $fz), "~B");
	c$.getCovalentlyConnectedBitSet = Clazz.defineMethod (c$, "getCovalentlyConnectedBitSet", 
							      ($fz = function (atoms, atom, bsToTest, allowCyclic, allowBioResidue, biobranches, bsResult) {
								  var atomIndex = atom.getIndex ();
								  if (!bsToTest.get (atomIndex)) return allowCyclic;
								  if (!allowBioResidue && atom.getBioStructureTypeName ().length > 0) return allowCyclic;
								  bsToTest.clear (atomIndex);
								  if (biobranches != null && !bsResult.get (atomIndex)) {
								      for (var i = biobranches.size (); --i >= 0; ) {
									  var b = biobranches.get (i);
									  if (b.get (atomIndex)) {
									      bsResult.or (b);
									      bsToTest.andNot (b);
									      for (var j = b.nextSetBit (0); j >= 0; j = b.nextSetBit (j + 1)) {
										  var atom1 = atoms[j];
										  bsToTest.set (j);
										  org.jmol.util.JmolMolecule.getCovalentlyConnectedBitSet (atoms, atom1, bsToTest, allowCyclic, allowBioResidue, biobranches, bsResult);
										  bsToTest.clear (j);
									      }
									      break;
									  }}
								  }bsResult.set (atomIndex);
								  var bonds = atom.getEdges ();
								  if (bonds == null) return true;
								  for (var i = bonds.length; --i >= 0; ) {
								      var bond = bonds[i];
								      if (bond.isCovalent () && !org.jmol.util.JmolMolecule.getCovalentlyConnectedBitSet (atoms, bond.getOtherAtomNode (atom), bsToTest, allowCyclic, allowBioResidue, biobranches, bsResult)) return false;
								  }
								  return true;
							      }, $fz.isPrivate = true, $fz), "~A,org.jmol.util.JmolNode,org.jmol.util.BitSet,~B,~B,java.util.List,org.jmol.util.BitSet");
	c$.allocateArray = Clazz.defineMethod (c$, "allocateArray", 
					       ($fz = function (molecules, len) {
						   return (len == molecules.length ? molecules : org.jmol.util.ArrayUtil.arrayCopyObject (molecules, len));
					       }, $fz.isPrivate = true, $fz), "~A,~N");
    });
    // 
    //// org\jmol\modelset\TickInfo.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    c$ = Clazz.decorateAsClass (function () {
	this.id = "";
	this.type = " ";
	this.ticks = null;
	this.tickLabelFormats = null;
	this.scale = null;
	this.first = 0;
	this.signFactor = 1;
	this.reference = null;
	Clazz.instantialize (this, arguments);
    }, org.jmol.modelset, "TickInfo");
    Clazz.makeConstructor (c$, 
			   function (ticks) {
			       this.ticks = ticks;
			   }, "org.jmol.util.Point3f");
    // 
    //// org\jmol\script\ScriptException.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["java.lang.Exception"], "org.jmol.script.ScriptException", ["org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.eval = null;
	    this.message = null;
	    this.untranslated = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptException", Exception);
	Clazz.makeConstructor (c$, 
			       function (scriptEvaluator, msg, untranslated, isError) {
				   Clazz.superConstructor (this, org.jmol.script.ScriptException, []);
				   this.eval = scriptEvaluator;
				   if (!isError) return;
				   this.eval.errorType = this.message = msg;
				   this.eval.iCommandError = this.eval.pc;
				   this.untranslated = (untranslated == null ? msg : untranslated);
				   if (this.message == null) {
				       this.message = "";
				       return;
				   }var s = this.eval.getScriptContext ().getContextTrace (null, true).toString ();
				   while (this.eval.thisContext != null && !this.eval.thisContext.isTryCatch) this.eval.popContext (false, false);

				   this.message += s;
				   this.untranslated += s;
				   if (this.eval.thisContext != null || this.eval.isSyntaxCheck || msg.indexOf ("file recognized as a script file:") >= 0) return;
				   org.jmol.util.Logger.error ("eval ERROR: " + this.toString ());
				   if (this.eval.viewer.autoExit) this.eval.viewer.exitJmol ();
			       }, "org.jmol.script.ScriptEvaluator,~S,~S,~B");
	Clazz.defineMethod (c$, "getErrorMessageUntranslated", 
			    function () {
				return this.untranslated;
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return this.message;
			      });
    });
    // 
    //// org\jmol\bspt\CubeIterator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.bspt");
    c$ = Clazz.decorateAsClass (function () {
	this.bspt = null;
	this.stack = null;
	this.sp = 0;
	this.leafIndex = 0;
	this.leaf = null;
	this.radius = 0;
	this.centerValues = null;
	this.cx = 0;
	this.cy = 0;
	this.cz = 0;
	this.dx = 0;
	this.dy = 0;
	this.dz = 0;
	this.tHemisphere = false;
	Clazz.instantialize (this, arguments);
    }, org.jmol.bspt, "CubeIterator");
    Clazz.makeConstructor (c$, 
			   function (bspt) {
			       this.centerValues =  Clazz.newFloatArray (bspt.dimMax, 0);
			       this.set (bspt);
			   }, "org.jmol.bspt.Bspt");
    Clazz.defineMethod (c$, "set", 
			function (bspt) {
			    this.bspt = bspt;
			    this.stack =  new Array (bspt.treeDepth);
			}, "org.jmol.bspt.Bspt");
    Clazz.defineMethod (c$, "initialize", 
			function (center, radius, hemisphereOnly) {
			    this.radius = radius;
			    this.tHemisphere = false;
			    this.cx = this.centerValues[0] = center.x;
			    this.cy = this.centerValues[1] = center.y;
			    this.cz = this.centerValues[2] = center.z;
			    this.leaf = null;
			    this.stack[0] = this.bspt.eleRoot;
			    this.sp = 1;
			    this.findLeftLeaf ();
			    this.tHemisphere = hemisphereOnly;
			}, "org.jmol.util.Point3f,~N,~B");
    Clazz.defineMethod (c$, "release", 
			function () {
			    this.set (this.bspt);
			});
    Clazz.defineMethod (c$, "hasMoreElements", 
			function () {
			    while (this.leaf != null) {
				for (; this.leafIndex < this.leaf.count; ++this.leafIndex) if (this.isWithinRadius (this.leaf.tuples[this.leafIndex])) return true;

				this.findLeftLeaf ();
			    }
			    return false;
			});
    Clazz.defineMethod (c$, "nextElement", 
			function () {
			    return this.leaf.tuples[this.leafIndex++];
			});
    Clazz.defineMethod (c$, "foundDistance2", 
			function () {
			    return this.dx * this.dx + this.dy * this.dy + this.dz * this.dz;
			});
    Clazz.defineMethod (c$, "findLeftLeaf", 
			($fz = function () {
			    this.leaf = null;
			    if (this.sp == 0) return;
			    var ele = this.stack[--this.sp];
			    while (Clazz.instanceOf (ele, org.jmol.bspt.Node)) {
				var node = ele;
				var centerValue = this.centerValues[node.dim];
				var maxValue = centerValue + this.radius;
				var minValue = centerValue;
				if (!this.tHemisphere || node.dim != 0) minValue -= this.radius;
				if (minValue <= node.maxLeft && maxValue >= node.minLeft) {
				    if (maxValue >= node.minRight && minValue <= node.maxRight) this.stack[this.sp++] = node.eleRight;
				    ele = node.eleLeft;
				} else if (maxValue >= node.minRight && minValue <= node.maxRight) {
				    ele = node.eleRight;
				} else {
				    if (this.sp == 0) return;
				    ele = this.stack[--this.sp];
				}}
			    this.leaf = ele;
			    this.leafIndex = 0;
			}, $fz.isPrivate = true, $fz));
    Clazz.defineMethod (c$, "isWithinRadius", 
			($fz = function (t) {
			    this.dx = t.x - this.cx;
			    return (!this.tHemisphere || this.dx >= 0) && (this.dx = Math.abs (this.dx)) <= this.radius && (this.dy = Math.abs (t.y - this.cy)) <= this.radius && (this.dz = Math.abs (t.z - this.cz)) <= this.radius;
			}, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f");
    // 
    //// org\jmol\bspt\Element.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.bspt");
    c$ = Clazz.decorateAsClass (function () {
	this.bspt = null;
	this.count = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.bspt, "Element");
    // 
    //// org\jmol\bspt\Leaf.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.bspt");
    Clazz.load (["org.jmol.bspt.Element"], "org.jmol.bspt.Leaf", ["org.jmol.bspt.Node", "org.jmol.util.Escape"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.tuples = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.bspt, "Leaf", org.jmol.bspt.Element);
	Clazz.makeConstructor (c$, 
			       function (bspt, leaf, countToKeep) {
				   Clazz.superConstructor (this, org.jmol.bspt.Leaf, []);
				   this.bspt = bspt;
				   this.count = 0;
				   this.tuples =  new Array (2);
				   if (leaf == null) return;
				   for (var i = countToKeep; i < 2; ++i) {
				       this.tuples[this.count++] = leaf.tuples[i];
				       leaf.tuples[i] = null;
				   }
				   leaf.count = countToKeep;
			       }, "org.jmol.bspt.Bspt,org.jmol.bspt.Leaf,~N");
	Clazz.defineMethod (c$, "sort", 
			    function (dim) {
				for (var i = this.count; --i > 0; ) {
				    var champion = this.tuples[i];
				    var championValue = org.jmol.bspt.Node.getDimensionValue (champion, dim);
				    for (var j = i; --j >= 0; ) {
					var challenger = this.tuples[j];
					var challengerValue = org.jmol.bspt.Node.getDimensionValue (challenger, dim);
					if (challengerValue > championValue) {
					    this.tuples[i] = challenger;
					    this.tuples[j] = champion;
					    champion = challenger;
					    championValue = challengerValue;
					}}
				}
			    }, "~N");
	Clazz.overrideMethod (c$, "addTuple", 
			      function (level, tuple) {
				  if (this.count < 2) {
				      this.tuples[this.count++] = tuple;
				      return this;
				  }var node =  new org.jmol.bspt.Node (this.bspt, level, this);
				  return node.addTuple (level, tuple);
			      }, "~N,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "dump", 
			      function (level, sb) {
				  for (var i = 0; i < this.count; ++i) {
				      var t = this.tuples[i];
				      for (var j = 0; j < level; ++j) sb.append (".");

				      sb.append (org.jmol.util.Escape.escape (t)).append ("Leaf ").appendI (i).append (": ").append ((t).getInfo ());
				  }
			      }, "~N,org.jmol.util.StringXBuilder");
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "leaf:" + this.count + "\n";
			      });
    });
    // 
    //// org\jmol\script\ScriptMathProcessor.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (null, "org.jmol.script.ScriptMathProcessor", ["java.lang.Float", "java.util.ArrayList", "$.Arrays", "$.Date", "$.Hashtable", "java.util.regex.Pattern", "org.jmol.atomdata.RadiusData", "org.jmol.constant.EnumVdw", "org.jmol.modelset.Bond", "$.MeasurementData", "org.jmol.script.ScriptEvaluator", "$.ScriptVariable", "$.ScriptVariableInt", "$.Token", "org.jmol.util.ArrayUtil", "$.AxisAngle4f", "$.BitSet", "$.BitSetUtil", "$.ColorEncoder", "$.ColorUtil", "$.Escape", "$.JmolMolecule", "$.Logger", "$.Matrix3f", "$.Matrix4f", "$.Measure", "$.Parser", "$.Point3f", "$.Point3fi", "$.Point4f", "$.Quaternion", "$.StringXBuilder", "$.TextFormat", "$.Vector3f", "org.jmol.viewer.PropertyManager"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.isSyntaxCheck = false;
	    this.wasSyntaxCheck = false;
	    this.logMessages = false;
	    this.eval = null;
	    this.viewer = null;
	    this.oStack = null;
	    this.xStack = null;
	    this.ifStack = null;
	    this.ifPt = -1;
	    this.oPt = -1;
	    this.xPt = -1;
	    this.parenCount = 0;
	    this.squareCount = 0;
	    this.braceCount = 0;
	    this.wasX = false;
	    this.incrementX = 0;
	    this.isArrayItem = false;
	    this.asVector = false;
	    this.asBitSet = false;
	    this.ptid = 0;
	    this.ptx = 2147483647;
	    this.skipping = false;
	    this.haveSpaceBeforeSquare = false;
	    this.equalCount = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptMathProcessor");
	Clazz.prepareFields (c$, function () {
	    this.oStack =  new Array (8);
	    this.xStack =  new Array (8);
	    this.ifStack =  Clazz.newCharArray (8, '\0');
	});
	Clazz.makeConstructor (c$, 
			       function (eval, isArrayItem, asVector, asBitSet) {
				   this.eval = eval;
				   this.viewer = eval.viewer;
				   this.logMessages = eval.logMessages;
				   this.isSyntaxCheck = this.wasSyntaxCheck = eval.isSyntaxCheck;
				   this.isArrayItem = isArrayItem;
				   this.asVector = asVector || isArrayItem;
				   this.asBitSet = asBitSet;
				   this.wasX = isArrayItem;
				   if (this.logMessages) org.jmol.util.Logger.info ("initialize RPN");
			       }, "org.jmol.script.ScriptEvaluator,~B,~B,~B");
	Clazz.defineMethod (c$, "getResult", 
			    function (allowUnderflow) {
				var isOK = true;
				while (isOK && this.oPt >= 0) isOK = this.operate ();

				if (isOK) {
				    if (this.asVector) {
					var result =  new java.util.ArrayList ();
					for (var i = 0; i <= this.xPt; i++) result.add (org.jmol.script.ScriptVariable.selectItemVar (this.xStack[i]));

					return org.jmol.script.ScriptVariable.newVariable (135198, result);
				    }if (this.xPt == 0) {
					var x = this.xStack[0];
					if (x.tok == 10 || x.tok == 7 || x.tok == 4 || x.tok == 11 || x.tok == 12) x = org.jmol.script.ScriptVariable.selectItemVar (x);
					if (this.asBitSet && x.tok == 7) x = org.jmol.script.ScriptVariable.newVariable (10, org.jmol.script.ScriptVariable.unEscapeBitSetArray (x.value, false));
					return x;
				    }}if (!allowUnderflow && (this.xPt >= 0 || this.oPt >= 0)) {
					this.eval.error (22);
				    }return null;
			    }, "~B");
	Clazz.defineMethod (c$, "putX", 
			    ($fz = function (x) {
				if (this.skipping) return;
				if (++this.xPt == this.xStack.length) this.xStack = org.jmol.util.ArrayUtil.doubleLength (this.xStack);
				if (this.logMessages) {
				    org.jmol.util.Logger.info ("\nputX: " + x);
				}this.xStack[this.xPt] = x;
				this.ptx = ++this.ptid;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "putOp", 
			    ($fz = function (op) {
				if (++this.oPt >= this.oStack.length) this.oStack = org.jmol.util.ArrayUtil.doubleLength (this.oStack);
				this.oStack[this.oPt] = op;
				this.ptid++;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "putIf", 
			    ($fz = function (c) {
				if (++this.ifPt >= this.ifStack.length) this.ifStack = org.jmol.util.ArrayUtil.doubleLength (this.ifStack);
				this.ifStack[this.ifPt] = c;
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "addXVar", 
			    function (x) {
				this.putX (x);
				return this.wasX = true;
			    }, "org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "addXObj", 
			    function (x) {
				var v = org.jmol.script.ScriptVariable.getVariable (x);
				if (v == null) return false;
				this.putX (v);
				return this.wasX = true;
			    }, "~O");
	Clazz.defineMethod (c$, "addXStr", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.newVariable (4, x));
				return this.wasX = true;
			    }, "~S");
	Clazz.defineMethod (c$, "addXBool", 
			    ($fz = function (x) {
				this.putX (org.jmol.script.ScriptVariable.getBoolean (x));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "addXInt", 
			    ($fz = function (x) {
				this.putX ( new org.jmol.script.ScriptVariableInt (x));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "addXList", 
			    ($fz = function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableList (x));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "java.util.List");
	Clazz.defineMethod (c$, "addXMap", 
			    ($fz = function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableMap (x));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "~O");
	Clazz.defineMethod (c$, "addXM3", 
			    ($fz = function (x) {
				this.putX (org.jmol.script.ScriptVariable.newVariable (11, x));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "addXM4", 
			    ($fz = function (x) {
				this.putX (org.jmol.script.ScriptVariable.newVariable (12, x));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Matrix4f");
	Clazz.defineMethod (c$, "addXFloat", 
			    ($fz = function (x) {
				if (Float.isNaN (x)) return this.addXStr ("NaN");
				this.putX (org.jmol.script.ScriptVariable.newVariable (3, Float.$valueOf (x)));
				return this.wasX = true;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "addXBs", 
			    function (bs) {
				this.putX (org.jmol.script.ScriptVariable.newVariable (10, bs));
				return this.wasX = true;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "addXPt", 
			    function (pt) {
				this.putX (org.jmol.script.ScriptVariable.newVariable (8, pt));
				return this.wasX = true;
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "addXPt4", 
			    function (pt) {
				this.putX (org.jmol.script.ScriptVariable.newVariable (9, pt));
				return this.wasX = true;
			    }, "org.jmol.util.Point4f");
	Clazz.defineMethod (c$, "addXNum", 
			    function (x) {
				if (this.wasX) switch (x.tok) {
				case 2:
				    if (x.intValue < 0) {
					this.addOp (org.jmol.script.Token.tokenMinus);
					x =  new org.jmol.script.ScriptVariableInt (-x.intValue);
				    }break;
				case 3:
				    var f = (x.value).floatValue ();
				    if (f < 0 || f == 0 && 1 / f == -Infinity) {
					this.addOp (org.jmol.script.Token.tokenMinus);
					x = org.jmol.script.ScriptVariable.newVariable (3,  new Float (-f));
				    }break;
				}
				this.putX (x);
				return this.wasX = true;
			    }, "org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "addXAV", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAV (x));
				return this.wasX = true;
			    }, "~A");
	Clazz.defineMethod (c$, "addXAD", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAD (x));
				return this.wasX = true;
			    }, "~A");
	Clazz.defineMethod (c$, "addXAS", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAS (x));
				return this.wasX = true;
			    }, "~A");
	Clazz.defineMethod (c$, "addXAI", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAI (x));
				return this.wasX = true;
			    }, "~A");
	Clazz.defineMethod (c$, "addXAII", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAII (x));
				return this.wasX = true;
			    }, "~A");
	Clazz.defineMethod (c$, "addXAF", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAF (x));
				return this.wasX = true;
			    }, "~A");
	Clazz.defineMethod (c$, "addXAFF", 
			    function (x) {
				this.putX (org.jmol.script.ScriptVariable.getVariableAFF (x));
				return this.wasX = true;
			    }, "~A");
	c$.isOpFunc = Clazz.defineMethod (c$, "isOpFunc", 
					  ($fz = function (op) {
					      return (org.jmol.script.Token.tokAttr (op.tok, 135266304) && op !== org.jmol.script.Token.tokenArraySquare || op.tok == 269484241 && org.jmol.script.Token.tokAttr (op.intValue, 135266304));
					  }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "addOp", 
			    function (op) {
				return this.addOpAllowMath (op, true);
			    }, "org.jmol.script.Token");
	Clazz.defineMethod (c$, "addOpAllowMath", 
			    function (op, allowMathFunc) {
				if (this.logMessages) {
				    org.jmol.util.Logger.info ("addOp entry\naddOp: " + op);
				}var tok0 = (this.oPt >= 0 ? this.oStack[this.oPt].tok : 0);
				this.skipping = (this.ifPt >= 0 && (this.ifStack[this.ifPt] == 'F' || this.ifStack[this.ifPt] == 'X'));
				if (this.skipping) {
				    switch (op.tok) {
				    case 269484048:
					this.putOp (op);
					return true;
				    case 269484066:
					if (tok0 != 269484066 || this.ifStack[this.ifPt] == 'X') return true;
					this.ifStack[this.ifPt] = 'T';
					this.wasX = false;
					this.skipping = false;
					return true;
				    case 269484049:
					if (tok0 == 269484048) {
					    this.oPt--;
					    return true;
					}if (tok0 != 269484066) {
					    this.putOp (op);
					    return true;
					}this.wasX = true;
					this.ifPt--;
					this.oPt -= 2;
					this.skipping = false;
					return true;
				    default:
					return true;
				    }
				}var newOp = null;
				var tok;
				var isLeftOp = false;
				var isDotSelector = (op.tok == 269484241);
				if (isDotSelector && !this.wasX) return false;
				var isMathFunc = (allowMathFunc && org.jmol.script.ScriptMathProcessor.isOpFunc (op));
				if (this.oPt >= 1 && op.tok != 269484048 && tok0 == 135266319) tok0 = this.oStack[--this.oPt].tok;
				var isArgument = (this.oPt >= 1 && tok0 == 269484048);
				switch (op.tok) {
				case 1073742195:
				    this.haveSpaceBeforeSquare = true;
				    return true;
				case 269484080:
				    if (!this.wasX) return false;
				    break;
				case 32:
				case 64:
				case 96:
				case 128:
				case 160:
				case 192:
				case 480:
				    tok = (this.oPt < 0 ? 0 : tok0);
				    if (!this.wasX || !(tok == 269484241 || tok == 1678770178 || tok == 1141899265)) return false;
				    this.oStack[this.oPt].intValue |= op.tok;
				    return true;
				case 269484096:
				    isLeftOp = true;
				    if (!this.wasX || this.haveSpaceBeforeSquare) {
					this.squareCount++;
					op = newOp = org.jmol.script.Token.tokenArraySquare;
					this.haveSpaceBeforeSquare = false;
				    }break;
				case 269484097:
				    break;
				case 269484225:
				case 269484226:
				    this.incrementX = (op.tok == 269484226 ? 1 : -1);
				    if (this.ptid == this.ptx) {
					if (this.isSyntaxCheck) return true;
					var x = this.xStack[this.xPt];
					this.xStack[this.xPt] = org.jmol.script.ScriptVariable.newVariable (4, "").set (x, false);
					return x.increment (this.incrementX);
				    }break;
				case 269484192:
				    if (this.wasX) break;
				    this.addXInt (0);
				    op = org.jmol.script.ScriptVariable.newVariable (269484224, "-");
				    break;
				case 269484049:
				    if (!this.wasX && this.oPt >= 1 && tok0 == 269484048 && !org.jmol.script.ScriptMathProcessor.isOpFunc (this.oStack[this.oPt - 1])) return false;
				    break;
				case 269484144:
				case 269484048:
				    isLeftOp = true;
				default:
				    if (isMathFunc) {
					if (!isDotSelector && this.wasX && !isArgument) return false;
					newOp = op;
					isLeftOp = true;
					break;
				    }if (this.wasX == isLeftOp && tok0 != 269484241) return false;
				    break;
				}
				while (this.oPt >= 0 && tok0 != 269484066 && (!isLeftOp || tok0 == 269484241 && (op.tok == 269484241 || op.tok == 269484096)) && org.jmol.script.Token.getPrecedence (tok0) >= org.jmol.script.Token.getPrecedence (op.tok)) {
				    if (this.logMessages) {
					org.jmol.util.Logger.info ("\noperating, oPt=" + this.oPt + " isLeftOp=" + isLeftOp + " oStack[oPt]=" + org.jmol.script.Token.nameOf (tok0) + "        prec=" + org.jmol.script.Token.getPrecedence (tok0) + " pending op=\"" + org.jmol.script.Token.nameOf (op.tok) + "\" prec=" + org.jmol.script.Token.getPrecedence (op.tok));
					this.dumpStacks ("operating");
				    }if (op.tok == 269484049 && tok0 == 269484048) {
					if (this.xPt >= 0) this.xStack[this.xPt] = org.jmol.script.ScriptVariable.selectItemVar (this.xStack[this.xPt]);
					break;
				    }if (op.tok == 269484097 && tok0 == 135266306) {
					break;
				    }if (op.tok == 269484097 && tok0 == 269484096) {
					if (this.isArrayItem && this.squareCount == 1 && this.equalCount == 0) {
					    this.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (org.jmol.script.Token.tokenArraySelector));
					    break;
					}if (!this.doBitsetSelect ()) return false;
					break;
				    }if (!this.operate ()) return false;
				    tok0 = (this.oPt >= 0 ? this.oStack[this.oPt].tok : 0);
				}
				if (newOp != null) this.addXVar (org.jmol.script.ScriptVariable.newVariable (269484436, newOp));
				switch (op.tok) {
				case 269484048:
				    this.parenCount++;
				    this.wasX = false;
				    break;
				case 806354977:
				    var isFirst = this.getX ().asBoolean ();
				    if (tok0 == 269484066) this.ifPt--;
				    else this.putOp (org.jmol.script.Token.tokenColon);
				    this.putIf (isFirst ? 'T' : 'F');
				    this.skipping = !isFirst;
				    this.wasX = false;
				    return true;
				case 269484066:
				    if (tok0 != 269484066) return false;
				    if (this.ifPt < 0) return false;
				    this.ifStack[this.ifPt] = 'X';
				    this.wasX = false;
				    this.skipping = true;
				    return true;
				case 269484049:
				    this.wasX = true;
				    if (this.parenCount-- <= 0) return false;
				    if (tok0 == 269484066) {
					this.ifPt--;
					this.oPt--;
				    }this.oPt--;
				    if (this.oPt < 0) return true;
				    if (org.jmol.script.ScriptMathProcessor.isOpFunc (this.oStack[this.oPt]) && !this.evaluateFunction (0)) return false;
				    this.skipping = (this.ifPt >= 0 && this.ifStack[this.ifPt] == 'X');
				    return true;
				case 269484080:
				    this.wasX = false;
				    return true;
				case 269484096:
				    this.squareCount++;
				    this.wasX = false;
				    break;
				case 269484097:
				    this.wasX = true;
				    if (this.squareCount-- <= 0 || this.oPt < 0) return false;
				    if (this.oStack[this.oPt].tok == 135266306) return this.evaluateFunction (269484096);
				    this.oPt--;
				    return true;
				case 269484241:
				    this.wasX = (!allowMathFunc || !org.jmol.script.Token.tokAttr (op.intValue, 135266304));
				    break;
				case 1048586:
				    this.braceCount++;
				    this.wasX = false;
				    break;
				case 1048590:
				    if (this.braceCount-- <= 0) return false;
				    this.wasX = false;
				    break;
				case 269484128:
				case 269484112:
				    if (!this.wasSyntaxCheck && this.xPt < 0) return false;
				    if (!this.wasSyntaxCheck && this.xStack[this.xPt].tok != 10 && this.xStack[this.xPt].tok != 7) {
					var tf = this.getX ().asBoolean ();
					this.addXVar (org.jmol.script.ScriptVariable.getBoolean (tf));
					if (tf == (op.tok == 269484112)) {
					    this.isSyntaxCheck = true;
					    op = (op.tok == 269484112 ? org.jmol.script.Token.tokenOrTRUE : org.jmol.script.Token.tokenAndFALSE);
					}}this.wasX = false;
				    break;
				case 269484436:
				    if (this.squareCount == 0) this.equalCount++;
				    this.wasX = false;
				    break;
				default:
				    this.wasX = false;
				}
				this.putOp (op);
				if (op.tok == 269484241 && (op.intValue & -481) == 135368713 && op.intValue != 135368713) {
				    return this.evaluateFunction (0);
				}return true;
			    }, "org.jmol.script.Token,~B");
	Clazz.defineMethod (c$, "doBitsetSelect", 
			    ($fz = function () {
				if (this.xPt < 0 || this.xPt == 0 && !this.isArrayItem) {
				    return false;
				}var var1 = this.xStack[this.xPt--];
				var $var = this.xStack[this.xPt];
				if ($var.tok == 7 && var1.tok == 4 && $var.intValue != 2147483647) {
				    $var = org.jmol.script.ScriptVariable.selectItemVar2 ($var, -2147483648);
				}if ($var.tok == 6) {
				    var v = $var.mapValue (org.jmol.script.ScriptVariable.sValue (var1));
				    this.xStack[this.xPt] = (v == null ? org.jmol.script.ScriptVariable.newVariable (4, "") : v);
				    return true;
				}var i = var1.asInt ();
				switch ($var.tok) {
				default:
				    $var = org.jmol.script.ScriptVariable.newVariable (4, org.jmol.script.ScriptVariable.sValue ($var));
				case 10:
				case 7:
				case 4:
				case 11:
				case 12:
				    this.xStack[this.xPt] = org.jmol.script.ScriptVariable.selectItemVar2 ($var, i);
				    break;
				}
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "dumpStacks", 
			    function (message) {
				org.jmol.util.Logger.info ("\n\n------------------\nRPN stacks: " + message + "\n");
				for (var i = 0; i <= this.xPt; i++) org.jmol.util.Logger.info ("x[" + i + "]: " + this.xStack[i]);

				org.jmol.util.Logger.info ("\n");
				for (var i = 0; i <= this.oPt; i++) org.jmol.util.Logger.info ("o[" + i + "]: " + this.oStack[i] + " prec=" + org.jmol.script.Token.getPrecedence (this.oStack[i].tok));

				org.jmol.util.Logger.info (" ifStack = " + ( String.instantialize (this.ifStack)).substring (0, this.ifPt + 1));
			    }, "~S");
	Clazz.defineMethod (c$, "getX", 
			    ($fz = function () {
				if (this.xPt < 0) this.eval.error (13);
				var v = org.jmol.script.ScriptVariable.selectItemVar (this.xStack[this.xPt]);
				this.xStack[this.xPt--] = null;
				return v;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "evaluateFunction", 
			    ($fz = function (tok) {
				var op = this.oStack[this.oPt--];
				if (tok == 0) tok = (op.tok == 269484241 ? op.intValue & -481 : op.tok);
				var nParamMax = org.jmol.script.Token.getMaxMathParams (tok);
				var nParam = 0;
				var pt = this.xPt;
				while (pt >= 0 && this.xStack[pt--].value !== op) nParam++;

				if (nParamMax > 0 && nParam > nParamMax) return false;
				var args =  new Array (nParam);
				for (var i = nParam; --i >= 0; ) args[i] = this.getX ();

				this.xPt--;
				if (this.isSyntaxCheck) return (op.tok == 269484241 ? true : this.addXBool (true));
				switch (tok) {
				case 135266826:
				case 135266819:
				case 135266821:
				case 135266318:
				case 135266820:
				case 135266822:
				    return this.evaluateMath (args, tok);
				case 1276118017:
				case 1276117504:
				case 1276117507:
				case 1276117509:
				    return this.evaluateList (op.intValue, args);
				case 135266306:
				case 269484096:
				    return this.evaluateArray (args, tok == 269484096);
				case 135266307:
				case 135270417:
				    return this.evaluateQuaternion (args, tok);
				case 1276118529:
				    return this.evaluateBin (args);
				case 1276117512:
				case 1276117513:
				    return this.evaluateRowCol (args, tok);
				case 1766856708:
				    return this.evaluateColor (args);
				case 135270405:
				    return this.evaluateCompare (args);
				case 135266310:
				    return this.evaluateConnected (args);
				case 135267329:
				    return this.evaluateCross (args);
				case 135270407:
				    return this.evaluateData (args);
				case 135266305:
				case 1276118018:
				case 1276117505:
				case 1746538509:
				    if ((tok == 1276118018 || tok == 1276117505) && op.tok == 269484241) return this.evaluateDot (args, tok);
				    return this.evaluateMeasure (args, op.tok);
				case 1229984263:
				case 135271426:
				    return this.evaluateLoad (args, tok);
				case 1276118532:
				    return this.evaluateFind (args);
				case 135368713:
				    return this.evaluateUserFunction (op.value, args, op.intValue, op.tok == 269484241);
				case 1288701960:
				case 1826248715:
				    return this.evaluateLabel (op.intValue, args);
				case 135270410:
				    return this.evaluateGetProperty (args);
				case 137363468:
				    return this.evaluateHelix (args);
				case 135267841:
				case 135266319:
				case 135267842:
				    return this.evaluatePlane (args, tok);
				case 135287308:
				case 135271429:
				    return this.evaluateScript (args, tok);
				case 1276117506:
				case 1276117508:
				case 1276117510:
				    return this.evaluateString (op.intValue, args);
				case 135266320:
				    return this.evaluatePoint (args);
				case 135304707:
				    return this.evaluatePrompt (args);
				case 135267332:
				    return this.evaluateRandom (args);
				case 1276118019:
				    return this.evaluateReplace (args);
				case 135267335:
				case 135267336:
				case 1238369286:
				    return this.evaluateSubstructure (args, tok);
				case 135270422:
				    return this.evaluateCache (args);
				case 1276117010:
				case 1276117011:
				    return this.evaluateSort (args, tok);
				case 1297090050:
				    return this.evaluateSymop (args, op.tok == 269484241);
				case 135266324:
				    return this.evaluateWithin (args);
				case 135402505:
				    return this.evaluateContact (args);
				case 135270421:
				    return this.evaluateWrite (args);
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "evaluateCache", 
			    ($fz = function (args) {
				if (args.length > 0) return false;
				return this.addXMap (this.viewer.cacheList ());
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateCompare", 
			    ($fz = function (args) {
				if (args.length < 2 || args.length > 5) return false;
				var stddev;
				var sOpt = org.jmol.script.ScriptVariable.sValue (args[args.length - 1]);
				var isStdDev = sOpt.equalsIgnoreCase ("stddev");
				var isIsomer = sOpt.equalsIgnoreCase ("ISOMER");
				var isSmiles = (!isIsomer && args.length > (isStdDev ? 3 : 2));
				var bs1 = (args[0].tok == 10 ? args[0].value : null);
				var bs2 = (args[1].tok == 10 ? args[1].value : null);
				var smiles1 = (bs1 == null ? org.jmol.script.ScriptVariable.sValue (args[0]) : "");
				var smiles2 = (bs2 == null ? org.jmol.script.ScriptVariable.sValue (args[1]) : "");
				var m =  new org.jmol.util.Matrix4f ();
				stddev = NaN;
				var ptsA;
				var ptsB;
				if (isSmiles) {
				    if (bs1 == null || bs2 == null) return false;
				}if (isIsomer) {
				    if (args.length != 3) return false;
				    if (bs1 == null && bs2 == null) return this.addXStr (this.viewer.getSmilesMatcher ().getRelationship (smiles1, smiles2).toUpperCase ());
				    var mf1 = (bs1 == null ? this.viewer.getSmilesMatcher ().getMolecularFormula (smiles1, false) : org.jmol.util.JmolMolecule.getMolecularFormula (this.viewer.getModelSet ().atoms, bs1, false));
				    var mf2 = (bs2 == null ? this.viewer.getSmilesMatcher ().getMolecularFormula (smiles2, false) : org.jmol.util.JmolMolecule.getMolecularFormula (this.viewer.getModelSet ().atoms, bs2, false));
				    if (!mf1.equals (mf2)) return this.addXStr ("NONE");
				    if (bs1 != null) smiles1 = this.eval.getSmilesMatches ("", null, bs1, null, false, true);
				    var check;
				    if (bs2 == null) {
					check = (this.viewer.getSmilesMatcher ().areEqual (smiles2, smiles1) > 0);
				    } else {
					check = ((this.eval.getSmilesMatches (smiles1, null, bs2, null, false, true)).nextSetBit (0) >= 0);
				    }if (!check) {
					var s = smiles1 + smiles2;
					if (s.indexOf ("/") >= 0 || s.indexOf ("\\") >= 0 || s.indexOf ("@") >= 0) {
					    if (smiles1.indexOf ("@") >= 0 && (bs2 != null || smiles2.indexOf ("@") >= 0)) {
						smiles1 = this.viewer.getSmilesMatcher ().reverseChirality (smiles1);
						if (bs2 == null) {
						    check = (this.viewer.getSmilesMatcher ().areEqual (smiles1, smiles2) > 0);
						} else {
						    check = ((this.eval.getSmilesMatches (smiles1, null, bs2, null, false, true)).nextSetBit (0) >= 0);
						}if (check) return this.addXStr ("ENANTIOMERS");
					    }if (bs2 == null) {
						check = (this.viewer.getSmilesMatcher ().areEqual ("/nostereo/" + smiles2, smiles1) > 0);
					    } else {
						var ret = this.eval.getSmilesMatches ("/nostereo/" + smiles1, null, bs2, null, false, true);
						check = ((ret).nextSetBit (0) >= 0);
					    }if (check) return this.addXStr ("DIASTERIOMERS");
					}return this.addXStr ("CONSTITUTIONAL ISOMERS");
				    }if (bs1 == null || bs2 == null) return this.addXStr ("IDENTICAL");
				    stddev = this.eval.getSmilesCorrelation (bs1, bs2, smiles1, null, null, null, null, false, false);
				    return this.addXStr (stddev < 0.2 ? "IDENTICAL" : "IDENTICAL or CONFORMATIONAL ISOMERS (RMSD=" + stddev + ")");
				} else if (isSmiles) {
				    ptsA =  new java.util.ArrayList ();
				    ptsB =  new java.util.ArrayList ();
				    sOpt = org.jmol.script.ScriptVariable.sValue (args[2]);
				    var isMap = sOpt.equalsIgnoreCase ("MAP");
				    isSmiles = (sOpt.equalsIgnoreCase ("SMILES"));
				    var isSearch = (isMap || sOpt.equalsIgnoreCase ("SMARTS"));
				    if (isSmiles || isSearch) sOpt = (args.length > 3 ? org.jmol.script.ScriptVariable.sValue (args[3]) : null);
				    if (sOpt == null) return false;
				    stddev = this.eval.getSmilesCorrelation (bs1, bs2, sOpt, ptsA, ptsB, m, null, !isSmiles, isMap);
				    if (isMap) {
					var nAtoms = ptsA.size ();
					if (nAtoms == 0) return this.addXStr ("");
					var nMatch = Clazz.doubleToInt (ptsB.size () / nAtoms);
					var ret =  new java.util.ArrayList ();
					for (var i = 0, pt = 0; i < nMatch; i++) {
					    var a = org.jmol.util.ArrayUtil.newInt2 (nAtoms);
					    ret.add (a);
					    for (var j = 0; j < nAtoms; j++, pt++) a[j] = [(ptsA.get (j)).index, (ptsB.get (pt)).index];

					}
					return this.addXList (ret);
				    }} else {
					ptsA = this.eval.getPointVector (args[0], 0);
					ptsB = this.eval.getPointVector (args[1], 0);
					if (ptsA != null && ptsB != null) stddev = org.jmol.util.Measure.getTransformMatrix4 (ptsA, ptsB, m, null);
				    }return (isStdDev || Float.isNaN (stddev) ? this.addXFloat (stddev) : this.addXM4 (m));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateSort", 
			    ($fz = function (args, tok) {
				if (args.length > 1) return false;
				if (tok == 1276117010) {
				    var n = (args.length == 0 ? 0 : args[0].asInt ());
				    return this.addXVar (this.getX ().sortOrReverse (n));
				}var x = this.getX ();
				var match = (args.length == 0 ? null : args[0]);
				if (x.tok == 4) {
				    var n = 0;
				    var s = org.jmol.script.ScriptVariable.sValue (x);
				    if (match == null) return this.addXInt (0);
				    var m = org.jmol.script.ScriptVariable.sValue (match);
				    for (var i = 0; i < s.length; i++) {
					var pt = s.indexOf (m, i);
					if (pt < 0) break;
					n++;
					i = pt;
				    }
				    return this.addXInt (n);
				}var counts =  new java.util.ArrayList ();
				var last = null;
				var count = null;
				var xList = org.jmol.script.ScriptVariable.getVariable (x.value).sortOrReverse (0).getList ();
				if (xList == null) return (match == null ? this.addXStr ("") : this.addXInt (0));
				for (var i = 0, nLast = xList.size (); i <= nLast; i++) {
				    var a = (i == nLast ? null : xList.get (i));
				    if (match != null && a != null && !org.jmol.script.ScriptVariable.areEqual (a, match)) continue;
				    if (org.jmol.script.ScriptVariable.areEqual (a, last)) {
					count.intValue++;
					continue;
				    } else if (last != null) {
					var y =  new java.util.ArrayList ();
					y.add (last);
					y.add (count);
					counts.add (org.jmol.script.ScriptVariable.getVariableList (y));
				    }count =  new org.jmol.script.ScriptVariableInt (1);
				    last = a;
				}
				if (match == null) return this.addXVar (org.jmol.script.ScriptVariable.getVariableList (counts));
				if (counts.isEmpty ()) return this.addXInt (0);
				return this.addXVar (counts.get (0).getList ().get (1));
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateSymop", 
			    ($fz = function (args, haveBitSet) {
				if (args.length == 0) return false;
				var x1 = (haveBitSet ? this.getX () : null);
				if (x1 != null && x1.tok != 10) return false;
				var bs = (x1 != null ? x1.value : args.length > 2 && args[1].tok == 10 ? args[1].value : this.viewer.getModelUndeletedAtomsBitSet (-1));
				var xyz;
				switch (args[0].tok) {
				case 4:
				    xyz = org.jmol.script.ScriptVariable.sValue (args[0]);
				    break;
				case 12:
				    xyz = args[0].escape ();
				    break;
				default:
				    xyz = null;
				}
				var iOp = (xyz == null ? args[0].asInt () : 0);
				var pt = (args.length > 1 ? this.ptValue (args[1], true) : null);
				if (args.length == 2 && !Float.isNaN (pt.x)) return this.addXObj (this.viewer.getSymmetryInfo (bs, xyz, iOp, pt, null, null, 135266320));
				var desc = (args.length == 1 ? "" : org.jmol.script.ScriptVariable.sValue (args[args.length - 1])).toLowerCase ();
				var tok = 135176;
				if (args.length == 1 || desc.equalsIgnoreCase ("matrix")) {
				    tok = 12;
				} else if (desc.equalsIgnoreCase ("array") || desc.equalsIgnoreCase ("list")) {
				    tok = 1073742001;
				} else if (desc.equalsIgnoreCase ("description")) {
				    tok = 1826248715;
				} else if (desc.equalsIgnoreCase ("xyz")) {
				    tok = 1073741982;
				} else if (desc.equalsIgnoreCase ("translation")) {
				    tok = 1073742178;
				} else if (desc.equalsIgnoreCase ("axis")) {
				    tok = 1073741854;
				} else if (desc.equalsIgnoreCase ("plane")) {
				    tok = 135266319;
				} else if (desc.equalsIgnoreCase ("angle")) {
				    tok = 135266305;
				} else if (desc.equalsIgnoreCase ("axispoint")) {
				    tok = 135266320;
				} else if (desc.equalsIgnoreCase ("center")) {
				    tok = 12289;
				}return this.addXObj (this.viewer.getSymmetryInfo (bs, xyz, iOp, pt, null, desc, tok));
			    }, $fz.isPrivate = true, $fz), "~A,~B");
	Clazz.defineMethod (c$, "evaluateBin", 
			    ($fz = function (args) {
				if (args.length != 3) return false;
				var x1 = this.getX ();
				var isListf = (x1.tok == 13);
				if (!isListf && x1.tok != 7) return this.addXVar (x1);
				var f0 = org.jmol.script.ScriptVariable.fValue (args[0]);
				var f1 = org.jmol.script.ScriptVariable.fValue (args[1]);
				var df = org.jmol.script.ScriptVariable.fValue (args[2]);
				var data;
				if (isListf) {
				    data = x1.value;
				} else {
				    var list = x1.getList ();
				    data =  Clazz.newFloatArray (list.size (), 0);
				    for (var i = list.size (); --i >= 0; ) data[i] = org.jmol.script.ScriptVariable.fValue (list.get (i));

				}var nbins = Clazz.doubleToInt (Math.floor ((f1 - f0) / df + 0.01));
				var array =  Clazz.newIntArray (nbins, 0);
				var nPoints = data.length;
				for (var i = 0; i < nPoints; i++) {
				    var v = data[i];
				    var bin = Clazz.doubleToInt (Math.floor ((v - f0) / df));
				    if (bin < 0) bin = 0;
				    else if (bin >= nbins) bin = nbins - 1;
				    array[bin]++;
				}
				return this.addXAI (array);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateHelix", 
			    ($fz = function (args) {
				if (args.length < 1 || args.length > 5) return false;
				var pt = (args.length > 2 ? 3 : 1);
				var type = (pt >= args.length ? "array" : org.jmol.script.ScriptVariable.sValue (args[pt]));
				var tok = org.jmol.script.Token.getTokFromName (type);
				if (args.length > 2) {
				    var pta = this.ptValue (args[0], true);
				    var ptb = this.ptValue (args[1], true);
				    if (args[2].tok != 9) return false;
				    var dq = org.jmol.util.Quaternion.newP4 (args[2].value);
				    switch (tok) {
				    case 0:
					break;
				    case 135266320:
				    case 1073741854:
				    case 1666189314:
				    case 135266305:
				    case 1746538509:
					return this.addXObj (org.jmol.util.Measure.computeHelicalAxis (null, tok, pta, ptb, dq));
				    case 135266306:
					var data = org.jmol.util.Measure.computeHelicalAxis (null, 1073742001, pta, ptb, dq);
					if (data == null) return false;
					return this.addXAS (data);
				    default:
					return this.addXObj (org.jmol.util.Measure.computeHelicalAxis (type, 135176, pta, ptb, dq));
				    }
				} else {
				    var bs = (Clazz.instanceOf (args[0].value, org.jmol.util.BitSet) ? args[0].value : this.eval.compareInt (1095761937, 269484436, args[0].asInt ()));
				    switch (tok) {
				    case 135266320:
					return this.addXObj (this.viewer.getHelixData (bs, 135266320));
				    case 1073741854:
					return this.addXObj (this.viewer.getHelixData (bs, 1073741854));
				    case 1666189314:
					return this.addXObj (this.viewer.getHelixData (bs, 1666189314));
				    case 135266305:
					return this.addXFloat ((this.viewer.getHelixData (bs, 135266305)).floatValue ());
				    case 135176:
				    case 1746538509:
					return this.addXObj (this.viewer.getHelixData (bs, tok));
				    case 135266306:
					var data = this.viewer.getHelixData (bs, 1073742001);
					if (data == null) return false;
					return this.addXAS (data);
				    }
				}return false;
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateDot", 
			    ($fz = function (args, tok) {
				if (args.length != 1) return false;
				var x1 = this.getX ();
				var x2 = args[0];
				var pt2 = this.ptValue (x2, true);
				var plane2 = this.planeValue (x2);
				if (x1.tok == 10 && tok != 1276117505) return this.addXObj (this.eval.getBitsetProperty (org.jmol.script.ScriptVariable.bsSelectVar (x1), 1276118018, pt2, plane2, x1.value, null, false, x1.index, false));
				var pt1 = this.ptValue (x1, true);
				var plane1 = this.planeValue (x1);
				if (tok == 1276117505) {
				    if (plane1 != null && plane2 != null) return this.addXFloat (plane1.x * plane2.x + plane1.y * plane2.y + plane1.z * plane2.z + plane1.w * plane2.w);
				    if (plane1 != null) pt1 = org.jmol.util.Point3f.new3 (plane1.x, plane1.y, plane1.z);
				    if (plane2 != null) pt2 = org.jmol.util.Point3f.new3 (plane2.x, plane2.y, plane2.z);
				    return this.addXFloat (pt1.x * pt2.x + pt1.y * pt2.y + pt1.z * pt2.z);
				}if (plane1 == null) return this.addXFloat (plane2 == null ? pt2.distance (pt1) : org.jmol.util.Measure.distanceToPlane (plane2, pt1));
				return this.addXFloat (org.jmol.util.Measure.distanceToPlane (plane1, pt2));
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "ptValue", 
			    function (x, allowFloat) {
				var pt;
				if (this.isSyntaxCheck) return  new org.jmol.util.Point3f ();
				switch (x.tok) {
				case 8:
				    return x.value;
				case 10:
				    return this.eval.getBitsetProperty (org.jmol.script.ScriptVariable.bsSelectVar (x), 1146095626, null, null, x.value, null, false, 2147483647, false);
				case 4:
				    pt = org.jmol.util.Escape.unescapePoint (org.jmol.script.ScriptVariable.sValue (x));
				    if (Clazz.instanceOf (pt, org.jmol.util.Point3f)) return pt;
				    break;
				case 7:
				    pt = org.jmol.util.Escape.unescapePoint ("{" + org.jmol.script.ScriptVariable.sValue (x) + "}");
				    if (Clazz.instanceOf (pt, org.jmol.util.Point3f)) return pt;
				    break;
				}
				if (!allowFloat) return null;
				var f = org.jmol.script.ScriptVariable.fValue (x);
				return org.jmol.util.Point3f.new3 (f, f, f);
			    }, "org.jmol.script.ScriptVariable,~B");
	Clazz.defineMethod (c$, "planeValue", 
			    ($fz = function (x) {
				if (this.isSyntaxCheck) return  new org.jmol.util.Point4f ();
				switch (x.tok) {
				case 9:
				    return x.value;
				case 7:
				case 4:
				    var pt = org.jmol.util.Escape.unescapePoint (org.jmol.script.ScriptVariable.sValue (x));
				    return (Clazz.instanceOf (pt, org.jmol.util.Point4f) ? pt : null);
				case 10:
				    break;
				}
				return null;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token");
	Clazz.defineMethod (c$, "evaluateMeasure", 
			    ($fz = function (args, tok) {
				var nPoints = 0;
				switch (tok) {
				case 1746538509:
				    var points =  new java.util.ArrayList ();
				    var rangeMinMax = [3.4028235E38, 3.4028235E38];
				    var strFormat = null;
				    var units = null;
				    var isAllConnected = false;
				    var isNotConnected = false;
				    var rPt = 0;
				    var isNull = false;
				    var rd = null;
				    var nBitSets = 0;
				    var vdw = 3.4028235E38;
				    var asArray = false;
				    for (var i = 0; i < args.length; i++) {
					switch (args[i].tok) {
					case 10:
					    var bs = args[i].value;
					    if (bs.length () == 0) isNull = true;
					    points.add (bs);
					    nPoints++;
					    nBitSets++;
					    break;
					case 8:
					    var v =  new org.jmol.util.Point3fi ();
					    v.setT (args[i].value);
					    points.add (v);
					    nPoints++;
					    break;
					case 2:
					case 3:
					    rangeMinMax[rPt++ % 2] = org.jmol.script.ScriptVariable.fValue (args[i]);
					    break;
					case 4:
					    var s = org.jmol.script.ScriptVariable.sValue (args[i]);
					    if (s.equalsIgnoreCase ("vdw") || s.equalsIgnoreCase ("vanderwaals")) vdw = (i + 1 < args.length && args[i + 1].tok == 2 ? args[++i].asInt () : 100) / 100;
					    else if (s.equalsIgnoreCase ("notConnected")) isNotConnected = true;
					    else if (s.equalsIgnoreCase ("connected")) isAllConnected = true;
					    else if (s.equalsIgnoreCase ("minArray")) asArray = (nBitSets >= 1);
					    else if (org.jmol.util.Parser.isOneOf (s.toLowerCase (), "nm;nanometers;pm;picometers;angstroms;ang;au")) units = s.toLowerCase ();
					    else strFormat = nPoints + ":" + s;
					    break;
					default:
					    return false;
					}
				    }
				    if (nPoints < 2 || nPoints > 4 || rPt > 2 || isNotConnected && isAllConnected) return false;
				    if (isNull) return this.addXStr ("");
				    if (vdw != 3.4028235E38 && (nBitSets != 2 || nPoints != 2)) return this.addXStr ("");
				    rd = (vdw == 3.4028235E38 ?  new org.jmol.atomdata.RadiusData (rangeMinMax, 0, null, null) :  new org.jmol.atomdata.RadiusData (null, vdw, org.jmol.atomdata.RadiusData.EnumType.FACTOR, org.jmol.constant.EnumVdw.AUTO));
				    var md =  new org.jmol.modelset.MeasurementData (this.viewer, points, 0, rd, strFormat, units, null, isAllConnected, isNotConnected, null, true);
				    return this.addXObj (md.getMeasurements (asArray));
				case 135266305:
				    if ((nPoints = args.length) != 3 && nPoints != 4) return false;
				    break;
				default:
				    if ((nPoints = args.length) != 2) return false;
				}
				var pts =  new Array (nPoints);
				for (var i = 0; i < nPoints; i++) pts[i] = this.ptValue (args[i], true);

				switch (nPoints) {
				case 2:
				    return this.addXFloat (pts[0].distance (pts[1]));
				case 3:
				    return this.addXFloat (org.jmol.util.Measure.computeAngleABC (pts[0], pts[1], pts[2], true));
				case 4:
				    return this.addXFloat (org.jmol.util.Measure.computeTorsion (pts[0], pts[1], pts[2], pts[3], true));
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateUserFunction", 
			    ($fz = function (name, args, tok, isSelector) {
				var x1 = null;
				if (isSelector) {
				    x1 = this.getX ();
				    if (x1.tok != 10) return false;
				}this.wasX = false;
				var params =  new java.util.ArrayList ();
				for (var i = 0; i < args.length; i++) {
				    params.add (args[i]);
				}
				if (isSelector) {
				    return this.addXObj (this.eval.getBitsetProperty (org.jmol.script.ScriptVariable.bsSelectVar (x1), tok, null, null, x1.value, [name, params], false, x1.index, false));
				}var $var = this.eval.runFunctionRet (null, name, params, null, true, true);
				return ($var == null ? false : this.addXVar ($var));
			    }, $fz.isPrivate = true, $fz), "~S,~A,~N,~B");
	Clazz.defineMethod (c$, "evaluateFind", 
			    ($fz = function (args) {
				if (args.length == 0) return false;
				var x1 = this.getX ();
				var sFind = org.jmol.script.ScriptVariable.sValue (args[0]);
				var flags = (args.length > 1 && args[1].tok != 1048589 && args[1].tok != 1048588 ? org.jmol.script.ScriptVariable.sValue (args[1]) : "");
				var isSequence = sFind.equalsIgnoreCase ("SEQUENCE");
				var isSmiles = sFind.equalsIgnoreCase ("SMILES");
				var isSearch = sFind.equalsIgnoreCase ("SMARTS");
				var isMF = sFind.equalsIgnoreCase ("MF");
				if (isSmiles || isSearch || x1.tok == 10) {
				    var iPt = (isSmiles || isSearch ? 2 : 1);
				    var bs2 = (iPt < args.length && args[iPt].tok == 10 ? args[iPt++].value : null);
				    var isAll = (args[args.length - 1].tok == 1048589);
				    var ret = null;
				    switch (x1.tok) {
				    case 4:
					var smiles = org.jmol.script.ScriptVariable.sValue (x1);
					if (bs2 != null) return false;
					if (flags.equalsIgnoreCase ("mf")) {
					    ret = this.viewer.getSmilesMatcher ().getMolecularFormula (smiles, isSearch);
					    if (ret == null) this.eval.evalError (this.viewer.getSmilesMatcher ().getLastException (), null);
					} else {
					    ret = this.eval.getSmilesMatches (flags, smiles, null, null, isSearch, !isAll);
					}break;
				    case 10:
					if (isMF) return this.addXStr (org.jmol.util.JmolMolecule.getMolecularFormula (this.viewer.getModelSet ().atoms, x1.value, false));
					if (isSequence) return this.addXStr (this.viewer.getSmiles (-1, -1, x1.value, true, isAll, isAll, false));
					if (isSmiles || isSearch) sFind = flags;
					var bsMatch3D = bs2;
					ret = this.eval.getSmilesMatches (sFind, null, x1.value, bsMatch3D, !isSmiles, !isAll);
					break;
				    }
				    if (ret == null) this.eval.error (22);
				    return this.addXObj (ret);
				}var isReverse = (flags.indexOf ("v") >= 0);
				var isCaseInsensitive = (flags.indexOf ("i") >= 0);
				var asMatch = (flags.indexOf ("m") >= 0);
				var isList = (x1.tok == 7);
				var isPattern = (args.length == 2);
				if (isList || isPattern) {
				    var pattern = null;
				    try {
					pattern = java.util.regex.Pattern.compile (sFind, isCaseInsensitive ? 2 : 0);
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    this.eval.evalError (e.getMessage (), null);
					} else {
					    throw e;
					}
				    }
				    var list = org.jmol.script.ScriptVariable.listValue (x1);
				    if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("finding " + sFind);
				    var bs =  new org.jmol.util.BitSet ();
				    var ipt = 0;
				    var n = 0;
				    var matcher = null;
				    var v = (asMatch ?  new java.util.ArrayList () : null);
				    for (var i = 0; i < list.length; i++) {
					var what = list[i];
					matcher = pattern.matcher (what);
					var isMatch = matcher.find ();
					if (asMatch && isMatch || !asMatch && isMatch == !isReverse) {
					    n++;
					    ipt = i;
					    bs.set (i);
					    if (asMatch) v.add (isReverse ? what.substring (0, matcher.start ()) + what.substring (matcher.end ()) : matcher.group ());
					}}
				    if (!isList) {
					return (asMatch ? this.addXStr (v.size () == 1 ? v.get (0) : "") : isReverse ? this.addXBool (n == 1) : asMatch ? this.addXStr (n == 0 ? "" : matcher.group ()) : this.addXInt (n == 0 ? 0 : matcher.start () + 1));
				    }if (n == 1) return this.addXStr (asMatch ? v.get (0) : list[ipt]);
				    var listNew =  new Array (n);
				    if (n > 0) for (var i = list.length; --i >= 0; ) if (bs.get (i)) {
					--n;
					listNew[n] = (asMatch ? v.get (n) : list[i]);
				    }
				    return this.addXAS (listNew);
				}return this.addXInt (org.jmol.script.ScriptVariable.sValue (x1).indexOf (sFind) + 1);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateGetProperty", 
			    ($fz = function (args) {
				var pt = 0;
				var propertyName = (args.length > pt ? org.jmol.script.ScriptVariable.sValue (args[pt++]).toLowerCase () : "");
				if (propertyName.startsWith ("$")) {
				}var propertyValue;
				if (propertyName.equalsIgnoreCase ("fileContents") && args.length > 2) {
				    var s = org.jmol.script.ScriptVariable.sValue (args[1]);
				    for (var i = 2; i < args.length; i++) s += "|" + org.jmol.script.ScriptVariable.sValue (args[i]);

				    propertyValue = s;
				    pt = args.length;
				} else {
				    propertyValue = (args.length > pt && args[pt].tok == 10 ? org.jmol.script.ScriptVariable.bsSelectVar (args[pt++]) : args.length > pt && args[pt].tok == 4 && org.jmol.viewer.PropertyManager.acceptsStringParameter (propertyName) ? args[pt++].value : "");
				}var property = this.viewer.getProperty (null, propertyName, propertyValue);
				if (pt < args.length) property = org.jmol.viewer.PropertyManager.extractProperty (property, args, pt);
				return this.addXObj (org.jmol.script.ScriptVariable.isVariableType (property) ? property : org.jmol.util.Escape.toReadable (propertyName, property));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluatePlane", 
			    ($fz = function (args, tok) {
				if (tok == 135267841 && args.length != 3 || tok == 135267842 && args.length != 2 && args.length != 3 || args.length == 0 || args.length > 4) return false;
				var pt1;
				var pt2;
				var pt3;
				var plane;
				var norm;
				var vTemp;
				switch (args.length) {
				case 1:
				    if (args[0].tok == 10) {
					var bs = org.jmol.script.ScriptVariable.getBitSet (args[0], false);
					if (bs.cardinality () == 3) {
					    var pts = this.viewer.getAtomPointVector (bs);
					    var vNorm =  new org.jmol.util.Vector3f ();
					    var vAB =  new org.jmol.util.Vector3f ();
					    var vAC =  new org.jmol.util.Vector3f ();
					    plane =  new org.jmol.util.Point4f ();
					    org.jmol.util.Measure.getPlaneThroughPoints (pts.get (0), pts.get (1), pts.get (2), vNorm, vAB, vAC, plane);
					    return this.addXPt4 (plane);
					}}var pt = org.jmol.util.Escape.unescapePoint (org.jmol.script.ScriptVariable.sValue (args[0]));
				    if (Clazz.instanceOf (pt, org.jmol.util.Point4f)) return this.addXPt4 (pt);
				    return this.addXStr ("" + pt);
				case 2:
				    if (tok == 135267842) {
					if (args[1].tok != 9) return false;
					pt3 =  new org.jmol.util.Point3f ();
					norm =  new org.jmol.util.Vector3f ();
					vTemp =  new org.jmol.util.Vector3f ();
					plane = args[1].value;
					if (args[0].tok == 9) {
					    var list = org.jmol.util.Measure.getIntersectionPP (args[0].value, plane);
					    if (list == null) return this.addXStr ("");
					    return this.addXList (list);
					}pt2 = this.ptValue (args[0], false);
					if (pt2 == null) return this.addXStr ("");
					return this.addXPt (org.jmol.util.Measure.getIntersection (pt2, null, plane, pt3, norm, vTemp));
				    }case 3:
				case 4:
				    switch (tok) {
				    case 135267841:
					return this.addXPt4 (this.eval.getHklPlane (org.jmol.util.Point3f.new3 (org.jmol.script.ScriptVariable.fValue (args[0]), org.jmol.script.ScriptVariable.fValue (args[1]), org.jmol.script.ScriptVariable.fValue (args[2]))));
				    case 135267842:
					pt1 = this.ptValue (args[0], false);
					pt2 = this.ptValue (args[1], false);
					if (pt1 == null || pt2 == null) return this.addXStr ("");
					var vLine = org.jmol.util.Vector3f.newV (pt2);
					vLine.normalize ();
					if (args[2].tok == 9) {
					    pt3 =  new org.jmol.util.Point3f ();
					    norm =  new org.jmol.util.Vector3f ();
					    vTemp =  new org.jmol.util.Vector3f ();
					    pt1 = org.jmol.util.Measure.getIntersection (pt1, vLine, args[2].value, pt3, norm, vTemp);
					    if (pt1 == null) return this.addXStr ("");
					    return this.addXPt (pt1);
					}pt3 = this.ptValue (args[2], false);
					if (pt3 == null) return this.addXStr ("");
					var v =  new org.jmol.util.Vector3f ();
					org.jmol.util.Measure.projectOntoAxis (pt3, pt1, vLine, v);
					return this.addXPt (pt3);
				    }
				    switch (args[0].tok) {
				    case 2:
				    case 3:
					if (args.length == 3) {
					    var r = org.jmol.script.ScriptVariable.fValue (args[0]);
					    var theta = org.jmol.script.ScriptVariable.fValue (args[1]);
					    var phi = org.jmol.script.ScriptVariable.fValue (args[2]);
					    norm = org.jmol.util.Vector3f.new3 (0, 0, 1);
					    pt2 = org.jmol.util.Point3f.new3 (0, 1, 0);
					    var q = org.jmol.util.Quaternion.newVA (pt2, phi);
					    q.getMatrix ().transform (norm);
					    pt2.set (0, 0, 1);
					    q = org.jmol.util.Quaternion.newVA (pt2, theta);
					    q.getMatrix ().transform (norm);
					    pt2.setT (norm);
					    pt2.scale (r);
					    plane =  new org.jmol.util.Point4f ();
					    org.jmol.util.Measure.getPlaneThroughPoint (pt2, norm, plane);
					    return this.addXPt4 (plane);
					}break;
				    case 10:
				    case 8:
					pt1 = this.ptValue (args[0], false);
					pt2 = this.ptValue (args[1], false);
					if (pt2 == null) return false;
					pt3 = (args.length > 2 && (args[2].tok == 10 || args[2].tok == 8) ? this.ptValue (args[2], false) : null);
					norm = org.jmol.util.Vector3f.newV (pt2);
					if (pt3 == null) {
					    plane =  new org.jmol.util.Point4f ();
					    if (args.length == 2 || !args[2].asBoolean ()) {
						pt3 = org.jmol.util.Point3f.newP (pt1);
						pt3.add (pt2);
						pt3.scale (0.5);
						norm.sub (pt1);
						norm.normalize ();
					    } else {
						pt3 = pt1;
					    }org.jmol.util.Measure.getPlaneThroughPoint (pt3, norm, plane);
					    return this.addXPt4 (plane);
					}var vAB =  new org.jmol.util.Vector3f ();
					var vAC =  new org.jmol.util.Vector3f ();
					var nd = org.jmol.util.Measure.getDirectedNormalThroughPoints (pt1, pt2, pt3, (args.length == 4 ? this.ptValue (args[3], true) : null), norm, vAB, vAC);
					return this.addXPt4 (org.jmol.util.Point4f.new4 (norm.x, norm.y, norm.z, nd));
				    }
				}
				if (args.length != 4) return false;
				var x = org.jmol.script.ScriptVariable.fValue (args[0]);
				var y = org.jmol.script.ScriptVariable.fValue (args[1]);
				var z = org.jmol.script.ScriptVariable.fValue (args[2]);
				var w = org.jmol.script.ScriptVariable.fValue (args[3]);
				return this.addXPt4 (org.jmol.util.Point4f.new4 (x, y, z, w));
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluatePoint", 
			    ($fz = function (args) {
				if (args.length != 1 && args.length != 3 && args.length != 4) return false;
				switch (args.length) {
				case 1:
				    if (args[0].tok == 3 || args[0].tok == 2) return this.addXInt (args[0].asInt ());
				    var s = org.jmol.script.ScriptVariable.sValue (args[0]);
				    if (args[0].tok == 7) s = "{" + s + "}";
				    var pt = org.jmol.util.Escape.unescapePoint (s);
				    if (Clazz.instanceOf (pt, org.jmol.util.Point3f)) return this.addXPt (pt);
				    return this.addXStr ("" + pt);
				case 3:
				    return this.addXPt (org.jmol.util.Point3f.new3 (args[0].asFloat (), args[1].asFloat (), args[2].asFloat ()));
				case 4:
				    return this.addXPt4 (org.jmol.util.Point4f.new4 (args[0].asFloat (), args[1].asFloat (), args[2].asFloat (), args[3].asFloat ()));
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluatePrompt", 
			    ($fz = function (args) {
				if (args.length != 1 && args.length != 2 && args.length != 3) return false;
				var label = org.jmol.script.ScriptVariable.sValue (args[0]);
				var buttonArray = (args.length > 1 && args[1].tok == 7 ? org.jmol.script.ScriptVariable.listValue (args[1]) : null);
				var asButtons = (buttonArray != null || args.length == 1 || args.length == 3 && args[2].asBoolean ());
				var input = (buttonArray != null ? null : args.length >= 2 ? org.jmol.script.ScriptVariable.sValue (args[1]) : "OK");
				var s = this.viewer.prompt (label, input, buttonArray, asButtons);
				return (asButtons && buttonArray != null ? this.addXInt (Integer.parseInt (s) + 1) : this.addXStr (s));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateReplace", 
			    ($fz = function (args) {
				if (args.length != 2) return false;
				var x = this.getX ();
				var sFind = org.jmol.script.ScriptVariable.sValue (args[0]);
				var sReplace = org.jmol.script.ScriptVariable.sValue (args[1]);
				var s = (x.tok == 7 ? null : org.jmol.script.ScriptVariable.sValue (x));
				if (s != null) return this.addXStr (org.jmol.util.TextFormat.simpleReplace (s, sFind, sReplace));
				var list = org.jmol.script.ScriptVariable.listValue (x);
				for (var i = list.length; --i >= 0; ) list[i] = org.jmol.util.TextFormat.simpleReplace (list[i], sFind, sReplace);

				return this.addXAS (list);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateString", 
			    ($fz = function (tok, args) {
				if (args.length > 1) return false;
				var x = this.getX ();
				var s = (tok == 1276117508 && x.tok == 10 || tok == 1276117510 && x.tok == 7 ? null : org.jmol.script.ScriptVariable.sValue (x));
				var sArg = (args.length == 1 ? org.jmol.script.ScriptVariable.sValue (args[0]) : tok == 1276117510 ? "" : "\n");
				switch (tok) {
				case 1276117508:
				    if (x.tok == 10) {
					var bsSelected = org.jmol.script.ScriptVariable.bsSelectVar (x);
					sArg = "\n";
					var modelCount = this.viewer.getModelCount ();
					s = "";
					for (var i = 0; i < modelCount; i++) {
					    s += (i == 0 ? "" : "\n");
					    var bs = this.viewer.getModelUndeletedAtomsBitSet (i);
					    bs.and (bsSelected);
					    s += org.jmol.util.Escape.escape (bs);
					}
				    }return this.addXAS (org.jmol.util.TextFormat.splitChars (s, sArg));
				case 1276117506:
				    if (s.length > 0 && s.charAt (s.length - 1) == '\n') s = s.substring (0, s.length - 1);
				    return this.addXStr (org.jmol.util.TextFormat.simpleReplace (s, "\n", sArg));
				case 1276117510:
				    if (s != null) return this.addXStr (org.jmol.util.TextFormat.trim (s, sArg));
				    var list = org.jmol.script.ScriptVariable.listValue (x);
				    for (var i = list.length; --i >= 0; ) list[i] = org.jmol.util.TextFormat.trim (list[i], sArg);

				    return this.addXAS (list);
				}
				return this.addXStr ("");
			    }, $fz.isPrivate = true, $fz), "~N,~A");
	Clazz.defineMethod (c$, "evaluateList", 
			    ($fz = function (tok, args) {
				if (args.length != 1 && !(tok == 1276118017 && (args.length == 0 || args.length == 2))) return false;
				var x1 = this.getX ();
				var x2;
				var len;
				var sList1 = null;
				var sList2 = null;
				var sList3 = null;
				if (args.length == 2) {
				    var itab = (args[0].tok == 4 ? 0 : 1);
				    var tab = org.jmol.script.ScriptVariable.sValue (args[itab]);
				    sList1 = (x1.tok == 7 ? org.jmol.script.ScriptVariable.listValue (x1) : org.jmol.util.TextFormat.split (org.jmol.script.ScriptVariable.sValue (x1), '\n'));
				    x2 = args[1 - itab];
				    sList2 = (x2.tok == 7 ? org.jmol.script.ScriptVariable.listValue (x2) : org.jmol.util.TextFormat.split (org.jmol.script.ScriptVariable.sValue (x2), '\n'));
				    sList3 =  new Array (len = Math.max (sList1.length, sList2.length));
				    for (var i = 0; i < len; i++) sList3[i] = (i >= sList1.length ? "" : sList1[i]) + tab + (i >= sList2.length ? "" : sList2[i]);

				    return this.addXAS (sList3);
				}x2 = (args.length == 0 ? org.jmol.script.ScriptVariable.vAll : args[0]);
				var isAll = (x2.tok == 1048579);
				if (x1.tok != 7 && x1.tok != 4) {
				    this.wasX = false;
				    this.addOp (org.jmol.script.Token.tokenLeftParen);
				    this.addXVar (x1);
				    switch (tok) {
				    case 1276118017:
					this.addOp (org.jmol.script.Token.tokenPlus);
					break;
				    case 1276117509:
					this.addOp (org.jmol.script.Token.tokenMinus);
					break;
				    case 1276117507:
					this.addOp (org.jmol.script.Token.tokenTimes);
					break;
				    case 1276117504:
					this.addOp (org.jmol.script.Token.tokenDivide);
					break;
				    }
				    this.addXVar (x2);
				    return this.addOp (org.jmol.script.Token.tokenRightParen);
				}var isScalar = (x2.tok != 7 && org.jmol.script.ScriptVariable.sValue (x2).indexOf ("\n") < 0);
				var list1 = null;
				var list2 = null;
				var alist1 = x1.getList ();
				var alist2 = x2.getList ();
				if (x1.tok == 7) {
				    len = alist1.size ();
				} else {
				    sList1 = (org.jmol.util.TextFormat.splitChars (x1.value, "\n"));
				    list1 =  Clazz.newFloatArray (len = sList1.length, 0);
				    org.jmol.util.Parser.parseFloatArrayData (sList1, list1);
				}if (isAll) {
				    var sum = 0;
				    if (x1.tok == 7) {
					for (var i = len; --i >= 0; ) sum += org.jmol.script.ScriptVariable.fValue (alist1.get (i));

				    } else {
					for (var i = len; --i >= 0; ) sum += list1[i];

				    }return this.addXFloat (sum);
				}var scalar = null;
				if (isScalar) {
				    scalar = x2;
				} else if (x2.tok == 7) {
				    len = Math.min (len, alist2.size ());
				} else {
				    sList2 = org.jmol.util.TextFormat.splitChars (x2.value, "\n");
				    list2 =  Clazz.newFloatArray (sList2.length, 0);
				    org.jmol.util.Parser.parseFloatArrayData (sList2, list2);
				    len = Math.min (list1.length, list2.length);
				}var token = null;
				switch (tok) {
				case 1276118017:
				    token = org.jmol.script.Token.tokenPlus;
				    break;
				case 1276117509:
				    token = org.jmol.script.Token.tokenMinus;
				    break;
				case 1276117507:
				    token = org.jmol.script.Token.tokenTimes;
				    break;
				case 1276117504:
				    token = org.jmol.script.Token.tokenDivide;
				    break;
				}
				var olist =  new Array (len);
				for (var i = 0; i < len; i++) {
				    if (x1.tok == 7) this.addXVar (alist1.get (i));
				    else if (Float.isNaN (list1[i])) this.addXObj (org.jmol.script.ScriptVariable.unescapePointOrBitsetAsVariable (sList1[i]));
				    else this.addXFloat (list1[i]);
				    if (isScalar) this.addXVar (scalar);
				    else if (x2.tok == 7) this.addXVar (alist2.get (i));
				    else if (Float.isNaN (list2[i])) this.addXObj (org.jmol.script.ScriptVariable.unescapePointOrBitsetAsVariable (sList2[i]));
				    else this.addXFloat (list2[i]);
				    if (!this.addOp (token) || !this.operate ()) return false;
				    olist[i] = this.xStack[this.xPt--];
				}
				return this.addXAV (olist);
			    }, $fz.isPrivate = true, $fz), "~N,~A");
	Clazz.defineMethod (c$, "evaluateRowCol", 
			    ($fz = function (args, tok) {
				if (args.length != 1) return false;
				var n = args[0].asInt () - 1;
				var x1 = this.getX ();
				var f;
				switch (x1.tok) {
				case 11:
				    if (n < 0 || n > 2) return false;
				    var m = x1.value;
				    switch (tok) {
				    case 1276117513:
					f =  Clazz.newFloatArray (3, 0);
					m.getRow (n, f);
					return this.addXAF (f);
				    case 1276117512:
				    default:
					f =  Clazz.newFloatArray (3, 0);
					m.getColumn (n, f);
					return this.addXAF (f);
				    }
				case 12:
				    if (n < 0 || n > 2) return false;
				    var m4 = x1.value;
				    switch (tok) {
				    case 1276117513:
					f =  Clazz.newFloatArray (4, 0);
					m4.getRow (n, f);
					return this.addXAF (f);
				    case 1276117512:
				    default:
					f =  Clazz.newFloatArray (4, 0);
					m4.getColumn (n, f);
					return this.addXAF (f);
				    }
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateArray", 
			    ($fz = function (args, allowMatrix) {
				var len = args.length;
				if (allowMatrix && (len == 4 || len == 3)) {
				    var isMatrix = true;
				    for (var i = 0; i < len && isMatrix; i++) isMatrix = (args[i].tok == 7 && args[i].getList ().size () == len);

				    if (isMatrix) {
					var m =  Clazz.newFloatArray (len * len, 0);
					var pt = 0;
					for (var i = 0; i < len && isMatrix; i++) {
					    var list = args[i].getList ();
					    for (var j = 0; j < len; j++) {
						var x = org.jmol.script.ScriptVariable.fValue (list.get (j));
						if (Float.isNaN (x)) {
						    isMatrix = false;
						    break;
						}m[pt++] = x;
					    }
					}
					if (isMatrix) {
					    if (len == 3) return this.addXM3 (org.jmol.util.Matrix3f.newA (m));
					    return this.addXM4 (org.jmol.util.Matrix4f.newA (m));
					}}}var a =  new Array (args.length);
				for (var i = a.length; --i >= 0; ) a[i] = org.jmol.script.ScriptVariable.newScriptVariableToken (args[i]);

				return this.addXAV (a);
			    }, $fz.isPrivate = true, $fz), "~A,~B");
	Clazz.defineMethod (c$, "evaluateMath", 
			    ($fz = function (args, tok) {
				if (tok == 135266318) {
				    if (args.length == 1 && args[0].tok == 4) return this.addXStr (( new java.util.Date ()) + "\t" + org.jmol.script.ScriptVariable.sValue (args[0]));
				    return this.addXInt ((System.currentTimeMillis () & 0x7FFFFFFF) - (args.length == 0 ? 0 : args[0].asInt ()));
				}if (args.length != 1) return false;
				if (tok == 135266826) {
				    if (args[0].tok == 2) return this.addXInt (Math.abs (args[0].asInt ()));
				    return this.addXFloat (Math.abs (args[0].asFloat ()));
				}var x = org.jmol.script.ScriptVariable.fValue (args[0]);
				switch (tok) {
				case 135266819:
				    return this.addXFloat ((Math.acos (x) * 180 / 3.141592653589793));
				case 135266821:
				    return this.addXFloat (Math.cos (x * 3.141592653589793 / 180));
				case 135266820:
				    return this.addXFloat (Math.sin (x * 3.141592653589793 / 180));
				case 135266822:
				    return this.addXFloat (Math.sqrt (x));
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateQuaternion", 
			    ($fz = function (args, tok) {
				var pt0 = null;
				var nArgs = args.length;
				var nMax = 2147483647;
				var isRelative = false;
				if (tok == 135270417) {
				    if (nArgs > 1 && args[nArgs - 1].tok == 4 && (args[nArgs - 1].value).equalsIgnoreCase ("relative")) {
					nArgs--;
					isRelative = true;
				    }if (nArgs > 1 && args[nArgs - 1].tok == 2 && args[0].tok == 10) {
					nMax = args[nArgs - 1].asInt ();
					if (nMax <= 0) nMax = 2147483646;
					nArgs--;
				    }}switch (nArgs) {
				    case 0:
				    case 1:
				    case 4:
					break;
				    case 2:
					if (tok == 135270417) {
					    if (args[0].tok == 7 && args[1].tok == 7) break;
					    if (args[0].tok == 10 && (args[1].tok == 2 || args[1].tok == 10)) break;
					}if ((pt0 = this.ptValue (args[0], false)) == null || tok != 135270417 && args[1].tok == 8) return false;
					break;
				    case 3:
					if (tok != 135270417) return false;
					if (args[0].tok == 9) {
					    if (args[2].tok != 8 && args[2].tok != 10) return false;
					    break;
					}for (var i = 0; i < 3; i++) if (args[i].tok != 8 && args[i].tok != 10) return false;

					break;
				    default:
					return false;
				    }
				var q = null;
				var qs = null;
				var p4 = null;
				switch (nArgs) {
				case 0:
				    return this.addXPt4 (org.jmol.util.Quaternion.newQ (this.viewer.getRotationQuaternion ()).toPoint4f ());
				case 1:
				default:
				    if (tok == 135270417 && args[0].tok == 7) {
					var data1 = org.jmol.script.ScriptMathProcessor.getQuaternionArray (args[0].getList (), 1073742001);
					var mean = org.jmol.util.Quaternion.sphereMean (data1, null, 0.0001);
					q = (Clazz.instanceOf (mean, org.jmol.util.Quaternion) ? mean : null);
					break;
				    } else if (tok == 135270417 && args[0].tok == 10) {
					qs = this.viewer.getAtomGroupQuaternions (args[0].value, nMax);
				    } else if (args[0].tok == 11) {
					q = org.jmol.util.Quaternion.newM (args[0].value);
				    } else if (args[0].tok == 9) {
					p4 = args[0].value;
				    } else {
					var v = org.jmol.util.Escape.unescapePoint (org.jmol.script.ScriptVariable.sValue (args[0]));
					if (!(Clazz.instanceOf (v, org.jmol.util.Point4f))) return false;
					p4 = v;
				    }if (tok == 135266307) q = org.jmol.util.Quaternion.newVA (org.jmol.util.Point3f.new3 (p4.x, p4.y, p4.z), p4.w);
				    break;
				case 2:
				    if (tok == 135270417) {
					if (args[0].tok == 7 && args[1].tok == 7) {
					    var data1 = org.jmol.script.ScriptMathProcessor.getQuaternionArray (args[0].getList (), 1073742001);
					    var data2 = org.jmol.script.ScriptMathProcessor.getQuaternionArray (args[1].getList (), 1073742001);
					    qs = org.jmol.util.Quaternion.div (data2, data1, nMax, isRelative);
					    break;
					}if (args[0].tok == 10 && args[1].tok == 10) {
					    var data1 = this.viewer.getAtomGroupQuaternions (args[0].value, 2147483647);
					    var data2 = this.viewer.getAtomGroupQuaternions (args[1].value, 2147483647);
					    qs = org.jmol.util.Quaternion.div (data2, data1, nMax, isRelative);
					    break;
					}}var pt1 = this.ptValue (args[1], false);
				    p4 = this.planeValue (args[0]);
				    if (pt1 != null) q = org.jmol.util.Quaternion.getQuaternionFrame (org.jmol.util.Point3f.new3 (0, 0, 0), pt0, pt1);
				    else q = org.jmol.util.Quaternion.newVA (pt0, org.jmol.script.ScriptVariable.fValue (args[1]));
				    break;
				case 3:
				    if (args[0].tok == 9) {
					var pt = (args[2].tok == 8 ? args[2].value : this.viewer.getAtomSetCenter (args[2].value));
					return this.addXStr ((org.jmol.util.Quaternion.newP4 (args[0].value)).draw ("q", org.jmol.script.ScriptVariable.sValue (args[1]), pt, 1));
				    }var pts =  new Array (3);
				    for (var i = 0; i < 3; i++) pts[i] = (args[i].tok == 8 ? args[i].value : this.viewer.getAtomSetCenter (args[i].value));

				    q = org.jmol.util.Quaternion.getQuaternionFrame (pts[0], pts[1], pts[2]);
				    break;
				case 4:
				    if (tok == 135270417) p4 = org.jmol.util.Point4f.new4 (org.jmol.script.ScriptVariable.fValue (args[1]), org.jmol.script.ScriptVariable.fValue (args[2]), org.jmol.script.ScriptVariable.fValue (args[3]), org.jmol.script.ScriptVariable.fValue (args[0]));
				    else q = org.jmol.util.Quaternion.newVA (org.jmol.util.Point3f.new3 (org.jmol.script.ScriptVariable.fValue (args[0]), org.jmol.script.ScriptVariable.fValue (args[1]), org.jmol.script.ScriptVariable.fValue (args[2])), org.jmol.script.ScriptVariable.fValue (args[3]));
				    break;
				}
				if (qs != null) {
				    if (nMax != 2147483647) {
					var list =  new java.util.ArrayList ();
					for (var i = 0; i < qs.length; i++) list.add (qs[i].toPoint4f ());

					return this.addXList (list);
				    }q = (qs.length > 0 ? qs[0] : null);
				}return this.addXPt4 ((q == null ? org.jmol.util.Quaternion.newP4 (p4) : q).toPoint4f ());
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateRandom", 
			    ($fz = function (args) {
				if (args.length > 2) return false;
				var lower = (args.length < 2 ? 0 : org.jmol.script.ScriptVariable.fValue (args[0]));
				var range = (args.length == 0 ? 1 : org.jmol.script.ScriptVariable.fValue (args[args.length - 1]));
				range -= lower;
				return this.addXFloat ((Math.random () * range) + lower);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateCross", 
			    ($fz = function (args) {
				if (args.length != 2) return false;
				var x1 = args[0];
				var x2 = args[1];
				if (x1.tok != 8 || x2.tok != 8) return false;
				var a = org.jmol.util.Vector3f.newV (x1.value);
				var b = org.jmol.util.Vector3f.newV (x2.value);
				a.cross (a, b);
				return this.addXPt (org.jmol.util.Point3f.newP (a));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateLoad", 
			    ($fz = function (args, tok) {
				if (args.length > 2 || args.length < 1) return false;
				var file = org.jmol.script.ScriptVariable.sValue (args[0]);
				var nBytesMax = (args.length == 2 ? args[1].asInt () : 2147483647);
				return this.addXStr (tok == 135271426 ? this.viewer.getFileAsStringBin (file, nBytesMax, false, false) : this.viewer.getFilePath (file, false));
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateWrite", 
			    ($fz = function (args) {
				if (args.length == 0) return false;
				return this.addXStr (this.eval.write (args));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateScript", 
			    ($fz = function (args, tok) {
				if (tok == 135287308 && args.length != 1 || args.length == 0 || args.length > 2) return false;
				var s = org.jmol.script.ScriptVariable.sValue (args[0]);
				var sb =  new org.jmol.util.StringXBuilder ();
				switch (tok) {
				case 135271429:
				    var appID = (args.length == 2 ? org.jmol.script.ScriptVariable.sValue (args[1]) : ".");
				    if (!appID.equals (".")) sb.append (this.viewer.jsEval (appID + "\1" + s));
				    if (appID.equals (".") || appID.equals ("*")) this.eval.runScriptBuffer (s, sb);
				    break;
				case 135287308:
				    sb.append (this.viewer.jsEval (s));
				    break;
				}
				s = sb.toString ();
				var f;
				return (Float.isNaN (f = org.jmol.util.Parser.parseFloatStrict (s)) ? this.addXStr (s) : s.indexOf (".") >= 0 ? this.addXFloat (f) : this.addXInt (org.jmol.util.Parser.parseInt (s)));
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "evaluateData", 
			    ($fz = function (args) {
				if (args.length != 1 && args.length != 2 && args.length != 4) return false;
				var selected = org.jmol.script.ScriptVariable.sValue (args[0]);
				var type = (args.length == 2 ? org.jmol.script.ScriptVariable.sValue (args[1]) : "");
				if (args.length == 4) {
				    var iField = args[1].asInt ();
				    var nBytes = args[2].asInt ();
				    var firstLine = args[3].asInt ();
				    var f = org.jmol.util.Parser.extractData (selected, iField, nBytes, firstLine);
				    return this.addXStr (org.jmol.util.Escape.escapeFloatA (f, false));
				}if (selected.indexOf ("data2d_") == 0) {
				    var f1 = this.viewer.getDataFloat2D (selected);
				    if (f1 == null) return this.addXStr ("");
				    if (args.length == 2 && args[1].tok == 2) {
					var pt = args[1].intValue;
					if (pt < 0) pt += f1.length;
					if (pt >= 0 && pt < f1.length) return this.addXStr (org.jmol.util.Escape.escapeFloatA (f1[pt], false));
					return this.addXStr ("");
				    }return this.addXStr (org.jmol.util.Escape.escapeFloatAA (f1, false));
				}if (selected.indexOf ("property_") == 0) {
				    var f1 = this.viewer.getDataFloat (selected);
				    if (f1 == null) return this.addXStr ("");
				    var f2 = (type.indexOf ("property_") == 0 ? this.viewer.getDataFloat (type) : null);
				    if (f2 != null) {
					f1 = org.jmol.util.ArrayUtil.arrayCopyF (f1, -1);
					for (var i = Math.min (f1.length, f2.length); --i >= 0; ) f1[i] += f2[i];

				    }return this.addXStr (org.jmol.util.Escape.escapeFloatA (f1, false));
				}if (args.length == 1) {
				    var data = this.viewer.getData (selected);
				    return this.addXStr (data == null ? "" : "" + data[1]);
				}return this.addXStr (this.viewer.getData (selected, type));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateLabel", 
			    ($fz = function (intValue, args) {
				var x1 = (args.length < 2 ? this.getX () : null);
				var format = (args.length == 0 ? "%U" : org.jmol.script.ScriptVariable.sValue (args[0]));
				var asArray = org.jmol.script.Token.tokAttr (intValue, 480);
				if (x1 == null) return this.addXStr (org.jmol.script.ScriptVariable.sprintfArray (args));
				var bs = org.jmol.script.ScriptVariable.getBitSet (x1, true);
				if (bs == null) return this.addXObj (org.jmol.script.ScriptVariable.sprintf (org.jmol.util.TextFormat.formatCheck (format), x1));
				return this.addXObj (this.eval.getBitsetIdent (bs, format, x1.value, true, x1.index, asArray));
			    }, $fz.isPrivate = true, $fz), "~N,~A");
	Clazz.defineMethod (c$, "evaluateWithin", 
			    ($fz = function (args) {
				if (args.length < 1 || args.length > 5) return false;
				var i = args.length;
				var distance = 0;
				var withinSpec = args[0].value;
				var withinStr = "" + withinSpec;
				var tok = args[0].tok;
				if (tok == 4) tok = org.jmol.script.Token.getTokFromName (withinStr);
				var isVdw = (tok == 1649412112);
				if (isVdw) {
				    distance = 100;
				    withinSpec = null;
				}var bs;
				var isWithinModelSet = false;
				var isWithinGroup = false;
				var isDistance = (isVdw || tok == 3 || tok == 2);
				var rd = null;
				switch (tok) {
				case 1048580:
				    if (i != 3 || !(Clazz.instanceOf (args[1].value, org.jmol.util.BitSet)) || !(Clazz.instanceOf (args[2].value, org.jmol.util.BitSet))) return false;
				    return this.addXBs (this.viewer.getBranchBitSet ((args[2].value).nextSetBit (0), (args[1].value).nextSetBit (0)));
				case 135267336:
				case 1238369286:
				case 135267335:
				    var bsSelected = null;
				    var isOK = true;
				    switch (i) {
				    case 2:
					break;
				    case 3:
					isOK = (args[2].tok == 10);
					if (isOK) bsSelected = args[2].value;
					break;
				    default:
					isOK = false;
				    }
				    if (!isOK) this.eval.error (22);
				    return this.addXObj (this.eval.getSmilesMatches (org.jmol.script.ScriptVariable.sValue (args[1]), null, bsSelected, null, tok == 135267335, this.asBitSet));
				}
				if (Clazz.instanceOf (withinSpec, String)) {
				    if (tok == 0) {
					tok = 1048614;
					if (i > 2) return false;
					i = 2;
				    }} else if (isDistance) {
					if (!isVdw) distance = org.jmol.script.ScriptVariable.fValue (args[0]);
					if (i < 2) return false;
					switch (tok = args[1].tok) {
					case 1048589:
					case 1048588:
					    isWithinModelSet = args[1].asBoolean ();
					    i = 0;
					    break;
					case 4:
					    var s = org.jmol.script.ScriptVariable.sValue (args[1]);
					    if (s.startsWith ("$")) return this.addXBs (this.eval.getAtomsNearSurface (distance, s.substring (1)));
					    isWithinGroup = (s.equalsIgnoreCase ("group"));
					    isVdw = (s.equalsIgnoreCase ("vanderwaals"));
					    if (isVdw) {
						withinSpec = null;
						tok = 1649412112;
					    } else {
						tok = 1087373318;
					    }break;
					}
				    } else {
					return false;
				    }var pt = null;
				var plane = null;
				switch (i) {
				case 1:
				    switch (tok) {
				    case 137363468:
				    case 3145760:
				    case 1679429641:
					return this.addXBs (this.viewer.getAtomBits (tok, null));
				    case 1073741864:
					return this.addXBs (this.viewer.getAtomBits (tok, ""));
				    case 1048614:
					return this.addXBs (this.viewer.getAtomBits (1087373320, withinStr));
				    }
				    return false;
				case 2:
				    switch (tok) {
				    case 1048614:
					tok = 1087373320;
					break;
				    case 1087375362:
				    case 1087375361:
				    case 1073741864:
				    case 1087373320:
					return this.addXBs (this.viewer.getAtomBits (tok, org.jmol.script.ScriptVariable.sValue (args[args.length - 1])));
				    }
				    break;
				case 3:
				    switch (tok) {
				    case 1048589:
				    case 1048588:
				    case 1087373318:
				    case 1649412112:
				    case 135266319:
				    case 135267841:
				    case 1048582:
					break;
				    case 1087373320:
					withinStr = org.jmol.script.ScriptVariable.sValue (args[2]);
					break;
				    default:
					return false;
				    }
				    break;
				}
				i = args.length - 1;
				if (Clazz.instanceOf (args[i].value, org.jmol.util.Point4f)) {
				    plane = args[i].value;
				} else if (Clazz.instanceOf (args[i].value, org.jmol.util.Point3f)) {
				    pt = args[i].value;
				    if (org.jmol.script.ScriptVariable.sValue (args[1]).equalsIgnoreCase ("hkl")) plane = this.eval.getHklPlane (pt);
				}if (i > 0 && plane == null && pt == null && !(Clazz.instanceOf (args[i].value, org.jmol.util.BitSet))) return false;
				if (plane != null) return this.addXBs (this.viewer.getAtomsNearPlane (distance, plane));
				if (pt != null) return this.addXBs (this.viewer.getAtomsNearPt (distance, pt));
				bs = (args[i].tok == 10 ? org.jmol.script.ScriptVariable.bsSelectVar (args[i]) : null);
				if (tok == 1087373320) return this.addXBs (this.viewer.getSequenceBits (withinStr, bs));
				if (bs == null) bs =  new org.jmol.util.BitSet ();
				if (!isDistance) return this.addXBs (this.viewer.getAtomBits (tok, bs));
				if (isWithinGroup) return this.addXBs (this.viewer.getGroupsWithin (Clazz.floatToInt (distance), bs));
				if (isVdw) rd =  new org.jmol.atomdata.RadiusData (null, (distance > 10 ? distance / 100 : distance), (distance > 10 ? org.jmol.atomdata.RadiusData.EnumType.FACTOR : org.jmol.atomdata.RadiusData.EnumType.OFFSET), org.jmol.constant.EnumVdw.AUTO);
				return this.addXBs (this.viewer.getAtomsWithinRadius (distance, bs, isWithinModelSet, rd));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateContact", 
			    ($fz = function (args) {
				if (args.length < 1 || args.length > 3) return false;
				var i = 0;
				var distance = 100;
				var tok = args[0].tok;
				switch (tok) {
				case 3:
				case 2:
				    distance = org.jmol.script.ScriptVariable.fValue (args[i++]);
				    break;
				case 10:
				    break;
				default:
				    return false;
				}
				if (i == args.length || !(Clazz.instanceOf (args[i].value, org.jmol.util.BitSet))) return false;
				var bsA = org.jmol.util.BitSetUtil.copy (org.jmol.script.ScriptVariable.bsSelectVar (args[i++]));
				if (this.isSyntaxCheck) return this.addXBs ( new org.jmol.util.BitSet ());
				var bsB = (i < args.length ? org.jmol.util.BitSetUtil.copy (org.jmol.script.ScriptVariable.bsSelectVar (args[i])) : null);
				var rd =  new org.jmol.atomdata.RadiusData (null, (distance > 10 ? distance / 100 : distance), (distance > 10 ? org.jmol.atomdata.RadiusData.EnumType.FACTOR : org.jmol.atomdata.RadiusData.EnumType.OFFSET), org.jmol.constant.EnumVdw.AUTO);
				bsB = this.eval.setContactBitSets (bsA, bsB, true, NaN, rd, false);
				bsB.or (bsA);
				return this.addXBs (bsB);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateColor", 
			    ($fz = function (args) {
				var colorScheme = (args.length > 0 ? org.jmol.script.ScriptVariable.sValue (args[0]) : "");
				if (colorScheme.equalsIgnoreCase ("hsl") && args.length == 2) {
				    var pt = org.jmol.util.Point3f.newP (org.jmol.script.ScriptVariable.ptValue (args[1]));
				    var hsl =  Clazz.newFloatArray (3, 0);
				    org.jmol.util.ColorEncoder.RGBtoHSL (pt.x, pt.y, pt.z, hsl);
				    pt.set (hsl[0] * 360, hsl[1] * 100, hsl[2] * 100);
				    return this.addXPt (pt);
				}var isIsosurface = colorScheme.startsWith ("$");
				var ce = (isIsosurface ? null : this.viewer.getColorEncoder (colorScheme));
				if (!isIsosurface && ce == null) return this.addXStr ("");
				var lo = (args.length > 1 ? org.jmol.script.ScriptVariable.fValue (args[1]) : 3.4028235E38);
				var hi = (args.length > 2 ? org.jmol.script.ScriptVariable.fValue (args[2]) : 3.4028235E38);
				var value = (args.length > 3 ? org.jmol.script.ScriptVariable.fValue (args[3]) : 3.4028235E38);
				var getValue = (value != 3.4028235E38 || lo != 3.4028235E38 && hi == 3.4028235E38);
				var haveRange = (hi != 3.4028235E38);
				if (!haveRange && colorScheme.length == 0) {
				    value = lo;
				    var range = this.viewer.getCurrentColorRange ();
				    lo = range[0];
				    hi = range[1];
				}if (isIsosurface) {
				    var id = colorScheme.substring (1);
				    var data = [id, null];
				    if (!this.viewer.getShapePropertyData (23, "colorEncoder", data)) return this.addXStr ("");
				    ce = data[1];
				} else {
				    ce.setRange (lo, hi, lo > hi);
				}var key = ce.getColorKey ();
				if (getValue) return this.addXPt (org.jmol.util.ColorUtil.colorPointFromInt2 (ce.getArgb (hi == 3.4028235E38 ? lo : value)));
				return this.addXVar (org.jmol.script.ScriptVariable.getVariableMap (key));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateConnected", 
			    ($fz = function (args) {
				if (args.length > 5) return false;
				var min = -2147483648;
				var max = 2147483647;
				var fmin = 0;
				var fmax = 3.4028235E38;
				var order = 65535;
				var atoms1 = null;
				var atoms2 = null;
				var haveDecimal = false;
				var isBonds = false;
				for (var i = 0; i < args.length; i++) {
				    var $var = args[i];
				    switch ($var.tok) {
				    case 10:
					isBonds = (Clazz.instanceOf ($var.value, org.jmol.modelset.Bond.BondSet));
					if (isBonds && atoms1 != null) return false;
					if (atoms1 == null) atoms1 = org.jmol.script.ScriptVariable.bsSelectVar ($var);
					else if (atoms2 == null) atoms2 = org.jmol.script.ScriptVariable.bsSelectVar ($var);
					else return false;
					break;
				    case 4:
					var type = org.jmol.script.ScriptVariable.sValue ($var);
					if (type.equalsIgnoreCase ("hbond")) order = 30720;
					else order = org.jmol.script.ScriptEvaluator.getBondOrderFromString (type);
					if (order == 131071) return false;
					break;
				    case 3:
					haveDecimal = true;
				    default:
					var n = $var.asInt ();
					var f = $var.asFloat ();
					if (max != 2147483647) return false;
					if (min == -2147483648) {
					    min = Math.max (n, 0);
					    fmin = f;
					} else {
					    max = n;
					    fmax = f;
					}}
				}
				if (min == -2147483648) {
				    min = 1;
				    max = 100;
				    fmin = 0.1;
				    fmax = 1.0E8;
				} else if (max == 2147483647) {
				    max = min;
				    fmax = fmin;
				    fmin = 0.1;
				}if (atoms1 == null) atoms1 = this.viewer.getModelUndeletedAtomsBitSet (-1);
				if (haveDecimal && atoms2 == null) atoms2 = atoms1;
				if (atoms2 != null) {
				    var bsBonds =  new org.jmol.util.BitSet ();
				    this.viewer.makeConnections (fmin, fmax, order, 1087373321, atoms1, atoms2, bsBonds, isBonds, false, 0);
				    return this.addXVar (org.jmol.script.ScriptVariable.newVariable (10,  new org.jmol.modelset.Bond.BondSet (bsBonds, this.viewer.getAtomIndices (this.viewer.getAtomBits (1678770178, bsBonds)))));
				}return this.addXBs (this.viewer.getAtomsConnected (min, max, order, atoms1));
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "evaluateSubstructure", 
			    ($fz = function (args, tok) {
				if (args.length == 0) return false;
				var bs =  new org.jmol.util.BitSet ();
				var pattern = org.jmol.script.ScriptVariable.sValue (args[0]);
				if (pattern.length > 0) try {
				    var bsSelected = (args.length == 2 && args[1].tok == 10 ? org.jmol.script.ScriptVariable.bsSelectVar (args[1]) : null);
				    bs = this.viewer.getSmilesMatcher ().getSubstructureSet (pattern, this.viewer.getModelSet ().atoms, this.viewer.getAtomCount (), bsSelected, tok != 135267336 && tok != 1238369286, false);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					this.eval.evalError (e.getMessage (), null);
				    } else {
					throw e;
				    }
				}
				return this.addXBs (bs);
			    }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "operate", 
			    ($fz = function () {
				var op = this.oStack[this.oPt--];
				var pt;
				var pt4;
				var m;
				var s;
				var f;
				if (this.logMessages) {
				    this.dumpStacks ("operate: " + op);
				}if (this.isArrayItem && this.squareCount == 0 && this.equalCount == 1 && this.oPt < 0 && (op.tok == 269484436)) {
				    return true;
				}var x2 = this.getX ();
				if (x2 === org.jmol.script.Token.tokenArraySelector) return false;
				if (x2.tok == 7 || x2.tok == 11 || x2.tok == 12) x2 = org.jmol.script.ScriptVariable.selectItemVar (x2);
				if (op.tok == 269484225 || op.tok == 269484226) {
				    if (!this.isSyntaxCheck && !x2.increment (this.incrementX)) return false;
				    this.wasX = true;
				    this.putX (x2);
				    return true;
				}if (op.tok == 269484144) {
				    if (this.isSyntaxCheck) return this.addXBool (true);
				    switch (x2.tok) {
				    case 9:
					return this.addXPt4 ((org.jmol.util.Quaternion.newP4 (x2.value)).inv ().toPoint4f ());
				    case 11:
					m = org.jmol.util.Matrix3f.newM (x2.value);
					m.invert ();
					return this.addXM3 (m);
				    case 12:
					var m4 = org.jmol.util.Matrix4f.newM (x2.value);
					m4.invert ();
					return this.addXM4 (m4);
				    case 10:
					return this.addXBs (org.jmol.util.BitSetUtil.copyInvert (org.jmol.script.ScriptVariable.bsSelectVar (x2), (Clazz.instanceOf (x2.value, org.jmol.modelset.Bond.BondSet) ? this.viewer.getBondCount () : this.viewer.getAtomCount ())));
				    default:
					return this.addXBool (!x2.asBoolean ());
				    }
				}var iv = op.intValue & -481;
				if (op.tok == 269484241) {
				    switch (iv) {
				    case 1073741824:
					return this.getAllProperties (x2, op.value);
				    case 1141899267:
				    case 1276117011:
				    case 1141899270:
					if (iv == 1141899267 && Clazz.instanceOf (x2.value, org.jmol.modelset.Bond.BondSet)) break;
					return this.addXInt (org.jmol.script.ScriptVariable.sizeOf (x2));
				    case 1141899272:
					return this.addXStr (org.jmol.script.ScriptVariable.typeOf (x2));
				    case 1141899281:
					if (x2.tok != 6) return this.addXStr ("");
					var keys = (x2.value).keySet ().toArray ();
					java.util.Arrays.sort (keys);
					var ret =  new Array (keys.length);
					for (var i = 0; i < keys.length; i++) ret[i] = keys[i];

					return this.addXAS (ret);
				    case 1141899268:
					switch (x2.tok) {
					case 11:
					case 12:
					    s = org.jmol.script.ScriptVariable.sValue (x2);
					    s = org.jmol.util.TextFormat.simpleReplace (s.substring (1, s.length - 1), "],[", "]\n[");
					    break;
					case 4:
					    s = x2.value;
					    break;
					default:
					    s = org.jmol.script.ScriptVariable.sValue (x2);
					}
					s = org.jmol.util.TextFormat.simpleReplace (s, "\n\r", "\n").$replace ('\r', '\n');
					return this.addXAS (org.jmol.util.TextFormat.split (s, '\n'));
				    case 1766856708:
					switch (x2.tok) {
					case 4:
					case 7:
					    s = org.jmol.script.ScriptVariable.sValue (x2);
					    pt =  new org.jmol.util.Point3f ();
					    return this.addXPt (org.jmol.util.ColorUtil.colorPointFromString (s, pt));
					case 2:
					case 3:
					    return this.addXPt (this.viewer.getColorPointForPropertyValue (org.jmol.script.ScriptVariable.fValue (x2)));
					case 8:
					    return this.addXStr (org.jmol.util.Escape.escapeColor (org.jmol.util.ColorUtil.colorPtToInt (x2.value)));
					default:
					}
					break;
				    case 1679429641:
					return (this.isSyntaxCheck ? this.addXStr ("x") : this.getBoundBox (x2));
				    }
				    if (this.isSyntaxCheck) return this.addXStr (org.jmol.script.ScriptVariable.sValue (x2));
				    if (x2.tok == 4) {
					var v = org.jmol.script.ScriptVariable.unescapePointOrBitsetAsVariable (org.jmol.script.ScriptVariable.sValue (x2));
					if (!(Clazz.instanceOf (v, org.jmol.script.ScriptVariable))) return false;
					x2 = v;
				    }if (op.tok == x2.tok) x2 = this.getX ();
				    return this.getPointOrBitsetOperation (op, x2);
				}var x1 = this.getX ();
				if (this.isSyntaxCheck) {
				    if (op === org.jmol.script.Token.tokenAndFALSE || op === org.jmol.script.Token.tokenOrTRUE) this.isSyntaxCheck = false;
				    return this.addXVar (org.jmol.script.ScriptVariable.newScriptVariableToken (x1));
				}switch (op.tok) {
				case 269484160:
				case 269484128:
				    switch (x1.tok) {
				    case 10:
					var bs = org.jmol.script.ScriptVariable.bsSelectVar (x1);
					switch (x2.tok) {
					case 10:
					    bs = org.jmol.util.BitSetUtil.copy (bs);
					    bs.and (org.jmol.script.ScriptVariable.bsSelectVar (x2));
					    return this.addXBs (bs);
					case 2:
					    var x = x2.asInt ();
					    return (this.addXBool (x < 0 ? false : bs.get (x)));
					}
					break;
				    }
				    return this.addXBool (x1.asBoolean () && x2.asBoolean ());
				case 269484112:
				    switch (x1.tok) {
				    case 10:
					var bs = org.jmol.util.BitSetUtil.copy (org.jmol.script.ScriptVariable.bsSelectVar (x1));
					switch (x2.tok) {
					case 10:
					    bs.or (org.jmol.script.ScriptVariable.bsSelectVar (x2));
					    return this.addXBs (bs);
					case 2:
					    var x = x2.asInt ();
					    if (x < 0) break;
					    bs.set (x);
					    return this.addXBs (bs);
					case 7:
					    var sv = x2.value;
					    for (var i = sv.size (); --i >= 0; ) {
						var b = sv.get (i).asInt ();
						if (b >= 0) bs.set (b);
					    }
					    return this.addXBs (bs);
					}
					break;
				    case 7:
					return this.addXVar (org.jmol.script.ScriptVariable.concatList (x1, x2, false));
				    }
				    return this.addXBool (x1.asBoolean () || x2.asBoolean ());
				case 269484113:
				    if (x1.tok == 10 && x2.tok == 10) {
					var bs = org.jmol.util.BitSetUtil.copy (org.jmol.script.ScriptVariable.bsSelectVar (x1));
					bs.xor (org.jmol.script.ScriptVariable.bsSelectVar (x2));
					return this.addXBs (bs);
				    }var a = x1.asBoolean ();
				    var b = x2.asBoolean ();
				    return this.addXBool (a && !b || b && !a);
				case 269484114:
				    if (x1.tok != 10 || x2.tok != 10) return false;
				    return this.addXBs (org.jmol.util.BitSetUtil.toggleInPlace (org.jmol.util.BitSetUtil.copy (org.jmol.script.ScriptVariable.bsSelectVar (x1)), org.jmol.script.ScriptVariable.bsSelectVar (x2)));
				case 269484434:
				    return this.addXBool (x1.asFloat () <= x2.asFloat ());
				case 269484433:
				    return this.addXBool (x1.asFloat () >= x2.asFloat ());
				case 269484432:
				    return this.addXBool (x1.asFloat () > x2.asFloat ());
				case 269484435:
				    return this.addXBool (x1.asFloat () < x2.asFloat ());
				case 269484436:
				    return this.addXBool (org.jmol.script.ScriptVariable.areEqual (x1, x2));
				case 269484438:
				    return this.addXBool (!org.jmol.script.ScriptVariable.areEqual (x1, x2));
				case 269484193:
				    switch (x1.tok) {
				    default:
					return this.addXFloat (x1.asFloat () + x2.asFloat ());
				    case 7:
					return this.addXVar (org.jmol.script.ScriptVariable.concatList (x1, x2, true));
				    case 2:
					switch (x2.tok) {
					case 4:
					    if ((s = (org.jmol.script.ScriptVariable.sValue (x2)).trim ()).indexOf (".") < 0 && s.indexOf ("+") <= 0 && s.lastIndexOf ("-") <= 0) return this.addXInt (x1.intValue + x2.asInt ());
					    break;
					case 3:
					    return this.addXFloat (x1.intValue + x2.asFloat ());
					}
					return this.addXInt (x1.intValue + x2.asInt ());
				    case 4:
					return this.addXVar (org.jmol.script.ScriptVariable.newVariable (4, org.jmol.script.ScriptVariable.sValue (x1) + org.jmol.script.ScriptVariable.sValue (x2)));
				    case 9:
					var q1 = org.jmol.util.Quaternion.newP4 (x1.value);
					switch (x2.tok) {
					default:
					    return this.addXPt4 (q1.add (x2.asFloat ()).toPoint4f ());
					case 9:
					    return this.addXPt4 (q1.mulQ (org.jmol.util.Quaternion.newP4 (x2.value)).toPoint4f ());
					}
				    case 8:
					pt = org.jmol.util.Point3f.newP (x1.value);
					switch (x2.tok) {
					case 8:
					    pt.add (x2.value);
					    return this.addXPt (pt);
					case 9:
					    pt4 = x2.value;
					    pt.add (org.jmol.util.Point3f.new3 (pt4.x, pt4.y, pt4.z));
					    return this.addXPt (pt);
					default:
					    f = x2.asFloat ();
					    return this.addXPt (org.jmol.util.Point3f.new3 (pt.x + f, pt.y + f, pt.z + f));
					}
				    case 11:
					switch (x2.tok) {
					default:
					    return this.addXFloat (x1.asFloat () + x2.asFloat ());
					case 11:
					    m = org.jmol.util.Matrix3f.newM (x1.value);
					    m.add (x2.value);
					    return this.addXM3 (m);
					case 8:
					    return this.addXM4 (org.jmol.script.ScriptMathProcessor.getMatrix4f (x1.value, x2.value));
					}
				    }
				case 269484192:
				    if (x1.tok == 2) {
					if (x2.tok == 4) {
					    if ((s = (org.jmol.script.ScriptVariable.sValue (x2)).trim ()).indexOf (".") < 0 && s.indexOf ("+") <= 0 && s.lastIndexOf ("-") <= 0) return this.addXInt (x1.intValue - x2.asInt ());
					} else if (x2.tok != 3) return this.addXInt (x1.intValue - x2.asInt ());
				    }if (x1.tok == 4 && x2.tok == 2) {
					if ((s = (org.jmol.script.ScriptVariable.sValue (x1)).trim ()).indexOf (".") < 0 && s.indexOf ("+") <= 0 && s.lastIndexOf ("-") <= 0) return this.addXInt (x1.asInt () - x2.intValue);
				    }switch (x1.tok) {
				    default:
					return this.addXFloat (x1.asFloat () - x2.asFloat ());
				    case 6:
					var ht =  new java.util.Hashtable (x1.value);
					ht.remove (org.jmol.script.ScriptVariable.sValue (x2));
					return this.addXVar (org.jmol.script.ScriptVariable.getVariableMap (ht));
				    case 11:
					switch (x2.tok) {
					default:
					    return this.addXFloat (x1.asFloat () - x2.asFloat ());
					case 11:
					    m = org.jmol.util.Matrix3f.newM (x1.value);
					    m.sub (x2.value);
					    return this.addXM3 (m);
					}
				    case 12:
					switch (x2.tok) {
					default:
					    return this.addXFloat (x1.asFloat () - x2.asFloat ());
					case 12:
					    var m4 = org.jmol.util.Matrix4f.newM (x1.value);
					    m4.sub (x2.value);
					    return this.addXM4 (m4);
					}
				    case 8:
					pt = org.jmol.util.Point3f.newP (x1.value);
					switch (x2.tok) {
					default:
					    f = x2.asFloat ();
					    return this.addXPt (org.jmol.util.Point3f.new3 (pt.x - f, pt.y - f, pt.z - f));
					case 8:
					    pt.sub (x2.value);
					    return this.addXPt (pt);
					case 9:
					    pt4 = x2.value;
					    pt.sub (org.jmol.util.Point3f.new3 (pt4.x, pt4.y, pt4.z));
					    return this.addXPt (pt);
					}
				    case 9:
					var q1 = org.jmol.util.Quaternion.newP4 (x1.value);
					switch (x2.tok) {
					default:
					    return this.addXPt4 (q1.add (-x2.asFloat ()).toPoint4f ());
					case 9:
					    var q2 = org.jmol.util.Quaternion.newP4 (x2.value);
					    return this.addXPt4 (q2.mulQ (q1.inv ()).toPoint4f ());
					}
				    }
				case 269484224:
				    switch (x2.tok) {
				    default:
					return this.addXFloat (-x2.asFloat ());
				    case 2:
					return this.addXInt (-x2.asInt ());
				    case 8:
					pt = org.jmol.util.Point3f.newP (x2.value);
					pt.scale (-1.0);
					return this.addXPt (pt);
				    case 9:
					pt4 = org.jmol.util.Point4f.newPt (x2.value);
					pt4.scale (-1.0);
					return this.addXPt4 (pt4);
				    case 11:
					m = org.jmol.util.Matrix3f.newM (x2.value);
					m.transpose ();
					return this.addXM3 (m);
				    case 12:
					var m4 = org.jmol.util.Matrix4f.newM (x2.value);
					m4.transpose ();
					return this.addXM4 (m4);
				    case 10:
					return this.addXBs (org.jmol.util.BitSetUtil.copyInvert (org.jmol.script.ScriptVariable.bsSelectVar (x2), (Clazz.instanceOf (x2.value, org.jmol.modelset.Bond.BondSet) ? this.viewer.getBondCount () : this.viewer.getAtomCount ())));
				    }
				case 269484209:
				    if (x1.tok == 2 && x2.tok != 3) return this.addXInt (x1.intValue * x2.asInt ());
				    pt = (x1.tok == 11 ? this.ptValue (x2, false) : x2.tok == 11 ? this.ptValue (x1, false) : null);
				    pt4 = (x1.tok == 12 ? this.planeValue (x2) : x2.tok == 12 ? this.planeValue (x1) : null);
				    switch (x2.tok) {
				    case 11:
					if (pt != null) {
					    var m3b = org.jmol.util.Matrix3f.newM (x2.value);
					    m3b.transpose ();
					    m3b.transform (pt);
					    if (x1.tok == 7) return this.addXVar (org.jmol.script.ScriptVariable.getVariableAF ([pt.x, pt.y, pt.z]));
					    return this.addXPt (pt);
					}if (pt4 != null) {
					    return this.addXPt4 ((org.jmol.util.Quaternion.newP4 (pt4).mulQ (org.jmol.util.Quaternion.newM (x2.value))).toPoint4f ());
					}break;
				    case 12:
					if (pt4 != null) {
					    var m4b = org.jmol.util.Matrix4f.newM (x2.value);
					    m4b.transpose ();
					    m4b.transform4 (pt4);
					    if (x1.tok == 7) return this.addXVar (org.jmol.script.ScriptVariable.getVariableAF ([pt4.x, pt4.y, pt4.z, pt4.w]));
					    return this.addXPt4 (pt4);
					}break;
				    }
				    switch (x1.tok) {
				    default:
					return this.addXFloat (x1.asFloat () * x2.asFloat ());
				    case 11:
					var m3 = x1.value;
					if (pt != null) {
					    m3.transform (pt);
					    if (x2.tok == 7) return this.addXVar (org.jmol.script.ScriptVariable.getVariableAF ([pt.x, pt.y, pt.z]));
					    return this.addXPt (pt);
					}switch (x2.tok) {
					case 11:
					    m = org.jmol.util.Matrix3f.newM (x2.value);
					    m.mul2 (m3, m);
					    return this.addXM3 (m);
					case 9:
					    return this.addXM3 (org.jmol.util.Quaternion.newM (m3).mulQ (org.jmol.util.Quaternion.newP4 (x2.value)).getMatrix ());
					default:
					    f = x2.asFloat ();
					    var aa =  new org.jmol.util.AxisAngle4f ();
					    aa.setM (m3);
					    aa.angle *= f;
					    var m2 =  new org.jmol.util.Matrix3f ();
					    m2.setAA (aa);
					    return this.addXM3 (m2);
					}
				    case 12:
					var m4 = x1.value;
					if (pt != null) {
					    m4.transform (pt);
					    if (x2.tok == 7) return this.addXVar (org.jmol.script.ScriptVariable.getVariableAF ([pt.x, pt.y, pt.z]));
					    return this.addXPt (pt);
					}if (pt4 != null) {
					    m4.transform4 (pt4);
					    if (x2.tok == 7) return this.addXVar (org.jmol.script.ScriptVariable.getVariableAF ([pt4.x, pt4.y, pt4.z, pt4.w]));
					    return this.addXPt4 (pt4);
					}switch (x2.tok) {
					case 12:
					    var m4b = org.jmol.util.Matrix4f.newM (x2.value);
					    m4b.mul2 (m4, m4b);
					    return this.addXM4 (m4b);
					default:
					    return this.addXStr ("NaN");
					}
				    case 8:
					pt = org.jmol.util.Point3f.newP (x1.value);
					switch (x2.tok) {
					case 8:
					    var pt2 = (x2.value);
					    return this.addXFloat (pt.x * pt2.x + pt.y * pt2.y + pt.z * pt2.z);
					default:
					    f = x2.asFloat ();
					    return this.addXPt (org.jmol.util.Point3f.new3 (pt.x * f, pt.y * f, pt.z * f));
					}
				    case 9:
					switch (x2.tok) {
					case 9:
					    return this.addXPt4 (org.jmol.util.Quaternion.newP4 (x1.value).mulQ (org.jmol.util.Quaternion.newP4 (x2.value)).toPoint4f ());
					}
					return this.addXPt4 (org.jmol.util.Quaternion.newP4 (x1.value).mul (x2.asFloat ()).toPoint4f ());
				    }
				case 269484210:
				    s = null;
				    var n = x2.asInt ();
				    switch (x1.tok) {
				    case 1048589:
				    case 1048588:
				    case 2:
				    default:
					if (n == 0) return this.addXInt (0);
					return this.addXInt (x1.asInt () % n);
				    case 3:
					f = x1.asFloat ();
					if (n == 0) return this.addXInt (Math.round (f));
					s = org.jmol.util.TextFormat.formatDecimal (f, n);
					return this.addXStr (s);
				    case 4:
					s = x1.value;
					if (n == 0) return this.addXStr (org.jmol.util.TextFormat.trim (s, "\n\t "));
					if (n == 9999) return this.addXStr (s.toUpperCase ());
					if (n == -9999) return this.addXStr (s.toLowerCase ());
					if (n > 0) return this.addXStr (org.jmol.util.TextFormat.formatS (s, n, n, false, false));
					return this.addXStr (org.jmol.util.TextFormat.formatS (s, n, n - 1, true, false));
				    case 7:
					var list = org.jmol.script.ScriptVariable.listValue (x1);
					for (var i = 0; i < list.length; i++) {
					    if (n == 0) list[i] = list[i].trim ();
					    else if (n > 0) list[i] = org.jmol.util.TextFormat.formatS (list[i], n, n, true, false);
					    else list[i] = org.jmol.util.TextFormat.formatS (s, -n, n, false, false);
					}
					return this.addXAS (list);
				    case 8:
					pt = org.jmol.util.Point3f.newP (x1.value);
					this.viewer.toUnitCell (pt, org.jmol.util.Point3f.new3 (n, n, n));
					return this.addXPt (pt);
				    case 9:
					pt4 = x1.value;
					if (x2.tok == 8) return this.addXPt ((org.jmol.util.Quaternion.newP4 (pt4)).transformPt (x2.value));
					if (x2.tok == 9) {
					    var v4 = org.jmol.util.Point4f.newPt (x2.value);
					    (org.jmol.util.Quaternion.newP4 (pt4)).getThetaDirected (v4);
					    return this.addXPt4 (v4);
					}switch (n) {
					case 0:
					    return this.addXFloat (pt4.w);
					case 1:
					    return this.addXFloat (pt4.x);
					case 2:
					    return this.addXFloat (pt4.y);
					case 3:
					    return this.addXFloat (pt4.z);
					case 4:
					    return this.addXPt (org.jmol.util.Point3f.newP ((org.jmol.util.Quaternion.newP4 (pt4)).getNormal ()));
					case -1:
					    return this.addXPt (org.jmol.util.Point3f.newP (org.jmol.util.Quaternion.newP4 (pt4).getVector (-1)));
					case -2:
					    return this.addXFloat ((org.jmol.util.Quaternion.newP4 (pt4)).getTheta ());
					case -3:
					    return this.addXPt (org.jmol.util.Point3f.newP ((org.jmol.util.Quaternion.newP4 (pt4)).getVector (0)));
					case -4:
					    return this.addXPt (org.jmol.util.Point3f.newP ((org.jmol.util.Quaternion.newP4 (pt4)).getVector (1)));
					case -5:
					    return this.addXPt (org.jmol.util.Point3f.newP ((org.jmol.util.Quaternion.newP4 (pt4)).getVector (2)));
					case -6:
					    var ax = (org.jmol.util.Quaternion.newP4 (pt4)).toAxisAngle4f ();
					    return this.addXPt4 (org.jmol.util.Point4f.new4 (ax.x, ax.y, ax.z, (ax.angle * 180 / 3.141592653589793)));
					case -9:
					    return this.addXM3 ((org.jmol.util.Quaternion.newP4 (pt4)).getMatrix ());
					default:
					    return this.addXPt4 (pt4);
					}
				    case 12:
					var m4 = x1.value;
					switch (n) {
					case 1:
					    var m3 =  new org.jmol.util.Matrix3f ();
					    m4.getRotationScale (m3);
					    return this.addXM3 (m3);
					case 2:
					    var v3 =  new org.jmol.util.Vector3f ();
					    m4.get (v3);
					    return this.addXPt (org.jmol.util.Point3f.newP (v3));
					default:
					    return false;
					}
				    case 10:
					return this.addXBs (org.jmol.script.ScriptVariable.bsSelectRange (x1, n));
				    }
				case 269484208:
				    if (x1.tok == 2 && x2.tok == 2 && x2.intValue != 0) return this.addXInt (Clazz.doubleToInt (x1.intValue / x2.intValue));
				    var f2 = x2.asFloat ();
				    switch (x1.tok) {
				    default:
					var f1 = x1.asFloat ();
					return this.addXFloat (f1 / f2);
				    case 8:
					pt = org.jmol.util.Point3f.newP (x1.value);
					if (f2 == 0) return this.addXPt (org.jmol.util.Point3f.new3 (NaN, NaN, NaN));
					return this.addXPt (org.jmol.util.Point3f.new3 (pt.x / f2, pt.y / f2, pt.z / f2));
				    case 9:
					if (x2.tok == 9) return this.addXPt4 (org.jmol.util.Quaternion.newP4 (x1.value).div (org.jmol.util.Quaternion.newP4 (x2.value)).toPoint4f ());
					if (f2 == 0) return this.addXPt4 (org.jmol.util.Point4f.new4 (NaN, NaN, NaN, NaN));
					return this.addXPt4 (org.jmol.util.Quaternion.newP4 (x1.value).mul (1 / f2).toPoint4f ());
				    }
				case 269484211:
				    f = x2.asFloat ();
				    switch (x1.tok) {
				    default:
					return this.addXInt (f == 0 ? 0 : Clazz.doubleToInt (Math.floor (x1.asFloat () / x2.asFloat ())));
				    case 9:
					if (f == 0) return this.addXPt4 (org.jmol.util.Point4f.new4 (NaN, NaN, NaN, NaN));
					if (x2.tok == 9) return this.addXPt4 (org.jmol.util.Quaternion.newP4 (x1.value).divLeft (org.jmol.util.Quaternion.newP4 (x2.value)).toPoint4f ());
					return this.addXPt4 (org.jmol.util.Quaternion.newP4 (x1.value).mul (1 / f).toPoint4f ());
				    }
				case 269484227:
				    f = Math.pow (x1.asFloat (), x2.asFloat ());
				    return (x1.tok == 2 && x2.tok == 2 ? this.addXInt (Clazz.floatToInt (f)) : this.addXFloat (f));
				}
				return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getAllProperties", 
			    ($fz = function (x2, abbr) {
				if (x2.tok != 10) return false;
				if (this.isSyntaxCheck) return this.addXStr ("");
				var bs = org.jmol.script.ScriptVariable.bsSelectVar (x2);
				var tokens;
				var n = bs.cardinality ();
				if (n == 0 || (tokens = org.jmol.script.Token.getAtomPropertiesLike (abbr.substring (0, abbr.length - 1))) == null) return this.addXStr ("");
				var ht =  new java.util.Hashtable ();
				var index = (n == 1 ? bs.nextSetBit (0) : 2147483647);
				for (var i = tokens.size (); --i >= 0; ) {
				    var t = tokens.get (i);
				    var tok = t.tok;
				    switch (tok) {
				    case 1095766022:
				    case 1095761925:
					continue;
				    default:
					if (index == 2147483647) tok |= 480;
					ht.put (t.value, org.jmol.script.ScriptVariable.getVariable (this.eval.getBitsetProperty (bs, tok, null, null, null, null, false, index, true)));
				    }
				}
				return this.addXMap (ht);
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptVariable,~S");
	c$.getMatrix4f = Clazz.defineMethod (c$, "getMatrix4f", 
					     function (matRotate, vTranslate) {
						 return org.jmol.util.Matrix4f.newMV (matRotate, vTranslate == null ?  new org.jmol.util.Vector3f () : org.jmol.util.Vector3f.newV (vTranslate));
					     }, "org.jmol.util.Matrix3f,org.jmol.util.Tuple3f");
	Clazz.defineMethod (c$, "getBoundBox", 
			    ($fz = function (x2) {
				if (x2.tok != 10) return false;
				if (this.isSyntaxCheck) return this.addXStr ("");
				var b = this.viewer.getBoxInfo (org.jmol.script.ScriptVariable.bsSelectVar (x2), 1);
				var pts = b.getBoundBoxPoints (true);
				var list =  new java.util.ArrayList ();
				for (var i = 0; i < 4; i++) list.add (pts[i]);

				return this.addXList (list);
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptVariable");
	Clazz.defineMethod (c$, "getPointOrBitsetOperation", 
			    ($fz = function (op, x2) {
				switch (x2.tok) {
				case 7:
				    switch (op.intValue) {
				    case 32:
				    case 64:
				    case 96:
				    case 192:
				    case 128:
				    case 160:
					return this.addXObj (org.jmol.script.ScriptMathProcessor.getMinMax (x2.getList (), op.intValue));
				    case 1276117010:
				    case 1141899269:
					return this.addXVar (x2.sortOrReverse (op.intValue == 1141899269 ? -2147483648 : 1));
				    }
				    var list2 =  new Array (x2.getList ().size ());
				    for (var i = 0; i < list2.length; i++) {
					var v = org.jmol.script.ScriptVariable.unescapePointOrBitsetAsVariable (x2.getList ().get (i));
					if (!(Clazz.instanceOf (v, org.jmol.script.ScriptVariable)) || !this.getPointOrBitsetOperation (op, v)) return false;
					list2[i] = this.xStack[this.xPt--];
				    }
				    return this.addXAV (list2);
				case 8:
				    switch (op.intValue) {
				    case 1112541185:
				    case 1112541205:
					return this.addXFloat ((x2.value).x);
				    case 1112541186:
				    case 1112541206:
					return this.addXFloat ((x2.value).y);
				    case 1112541187:
				    case 1112541207:
					return this.addXFloat ((x2.value).z);
				    case 1146095626:
					var pt = org.jmol.util.Point3f.newP (x2.value);
					this.viewer.toCartesian (pt, true);
					return this.addXPt (pt);
				    case 1112541188:
				    case 1112541189:
				    case 1112541190:
				    case 1146095627:
					var ptf = org.jmol.util.Point3f.newP (x2.value);
					this.viewer.toFractional (ptf, true);
					return (op.intValue == 1146095627 ? this.addXPt (ptf) : this.addXFloat (op.intValue == 1112541188 ? ptf.x : op.intValue == 1112541189 ? ptf.y : ptf.z));
				    case 1112541191:
				    case 1112541192:
				    case 1112541193:
				    case 1146095629:
					var ptfu = org.jmol.util.Point3f.newP (x2.value);
					this.viewer.toFractional (ptfu, false);
					return (op.intValue == 1146095627 ? this.addXPt (ptfu) : this.addXFloat (op.intValue == 1112541191 ? ptfu.x : op.intValue == 1112541192 ? ptfu.y : ptfu.z));
				    case 1112539151:
				    case 1112539152:
				    case 1112539153:
				    case 1146093582:
					var ptu = org.jmol.util.Point3f.newP (x2.value);
					this.viewer.toUnitCell (ptu, null);
					this.viewer.toFractional (ptu, false);
					return (op.intValue == 1146093582 ? this.addXPt (ptu) : this.addXFloat (op.intValue == 1112539151 ? ptu.x : op.intValue == 1112539152 ? ptu.y : ptu.z));
				    }
				    break;
				case 9:
				    switch (op.intValue) {
				    case 1112541185:
				    case 1112541205:
					return this.addXFloat ((x2.value).x);
				    case 1112541186:
				    case 1112541206:
					return this.addXFloat ((x2.value).y);
				    case 1112541187:
				    case 1112541207:
					return this.addXFloat ((x2.value).z);
				    case 1141899280:
					return this.addXFloat ((x2.value).w);
				    }
				    break;
				case 10:
				    if (op.intValue == 1678770178 && Clazz.instanceOf (x2.value, org.jmol.modelset.Bond.BondSet)) return this.addXVar (x2);
				    var bs = org.jmol.script.ScriptVariable.bsSelectVar (x2);
				    if (bs.cardinality () == 1 && (op.intValue & 480) == 0) op.intValue |= 32;
				    var val = this.eval.getBitsetProperty (bs, op.intValue, null, null, x2.value, op.value, false, x2.index, true);
				    if (op.intValue != 1678770178) return this.addXObj (val);
				    return this.addXVar (org.jmol.script.ScriptVariable.newVariable (10,  new org.jmol.modelset.Bond.BondSet (val, this.viewer.getAtomIndices (bs))));
				}
				return false;
			    }, $fz.isPrivate = true, $fz), "org.jmol.script.Token,org.jmol.script.ScriptVariable");
	c$.getMinMax = Clazz.defineMethod (c$, "getMinMax", 
					   ($fz = function (floatOrSVArray, tok) {
					       var data = null;
					       var sv = null;
					       var ndata = 0;
					       while (true) {
						   if (org.jmol.util.Escape.isAF (floatOrSVArray)) {
						       data = floatOrSVArray;
						       ndata = data.length;
						       if (ndata == 0) break;
						   } else if (Clazz.instanceOf (floatOrSVArray, java.util.List)) {
						       sv = floatOrSVArray;
						       ndata = sv.size ();
						       if (ndata == 0) break;
						       var sv0 = sv.get (0);
						       if (sv0.tok == 4 && (sv0.value).startsWith ("{")) {
							   var pt = org.jmol.script.ScriptVariable.ptValue (sv0);
							   if (Clazz.instanceOf (pt, org.jmol.util.Point3f)) return org.jmol.script.ScriptMathProcessor.getMinMaxPoint (sv, tok);
							   if (Clazz.instanceOf (pt, org.jmol.util.Point4f)) return org.jmol.script.ScriptMathProcessor.getMinMaxQuaternion (sv, tok);
							   break;
						       }} else {
							   break;
						       }var sum;
						   switch (tok) {
						   case 32:
						       sum = 3.4028235E38;
						       break;
						   case 64:
						       sum = -3.4028235E38;
						       break;
						   default:
						       sum = 0;
						   }
						   var sum2 = 0;
						   var n = 0;
						   for (var i = ndata; --i >= 0; ) {
						       var v = (data == null ? org.jmol.script.ScriptVariable.fValue (sv.get (i)) : data[i]);
						       if (Float.isNaN (v)) continue;
						       n++;
						       switch (tok) {
						       case 160:
						       case 192:
							   sum2 += (v) * v;
						       case 128:
						       case 96:
							   sum += v;
							   break;
						       case 32:
							   if (v < sum) sum = v;
							   break;
						       case 64:
							   if (v > sum) sum = v;
							   break;
						       }
						   }
						   if (n == 0) break;
						   switch (tok) {
						   case 96:
						       sum /= n;
						       break;
						   case 192:
						       if (n == 1) break;
						       sum = Math.sqrt ((sum2 - sum * sum / n) / (n - 1));
						       break;
						   case 32:
						   case 64:
						   case 128:
						       break;
						   case 160:
						       sum = sum2;
						       break;
						   }
						   return Float.$valueOf (sum);
					       }
					       return "NaN";
					   }, $fz.isPrivate = true, $fz), "~O,~N");
	c$.getMinMaxPoint = Clazz.defineMethod (c$, "getMinMaxPoint", 
						($fz = function (pointOrSVArray, tok) {
						    var data = null;
						    var sv = null;
						    var ndata = 0;
						    if (Clazz.instanceOf (pointOrSVArray, Array)) {
							data = pointOrSVArray;
							ndata = data.length;
						    } else if (Clazz.instanceOf (pointOrSVArray, java.util.List)) {
							sv = pointOrSVArray;
							ndata = sv.size ();
						    }if (sv != null || data != null) {
							var result =  new org.jmol.util.Point3f ();
							var fdata =  Clazz.newFloatArray (ndata, 0);
							var ok = true;
							for (var xyz = 0; xyz < 3 && ok; xyz++) {
							    for (var i = 0; i < ndata; i++) {
								var pt = (data == null ? org.jmol.script.ScriptVariable.ptValue (sv.get (i)) : data[i]);
								if (pt == null) {
								    ok = false;
								    break;
								}switch (xyz) {
								case 0:
								    fdata[i] = pt.x;
								    break;
								case 1:
								    fdata[i] = pt.y;
								    break;
								case 2:
								    fdata[i] = pt.z;
								    break;
								}
							    }
							    if (!ok) break;
							    var f = org.jmol.script.ScriptMathProcessor.getMinMax (fdata, tok);
							    if (Clazz.instanceOf (f, Float)) {
								var value = (f).floatValue ();
								switch (xyz) {
								case 0:
								    result.x = value;
								    break;
								case 1:
								    result.y = value;
								    break;
								case 2:
								    result.z = value;
								    break;
								}
							    } else {
								break;
							    }}
							return result;
						    }return "NaN";
						}, $fz.isPrivate = true, $fz), "~O,~N");
	c$.getMinMaxQuaternion = Clazz.defineMethod (c$, "getMinMaxQuaternion", 
						     ($fz = function (svData, tok) {
							 var data;
							 switch (tok) {
							 case 32:
							 case 64:
							 case 128:
							 case 160:
							     return "NaN";
							 }
							 while (true) {
							     data = org.jmol.script.ScriptMathProcessor.getQuaternionArray (svData, 1073742001);
							     if (data == null) break;
							     var retStddev =  Clazz.newFloatArray (1, 0);
							     var result = org.jmol.util.Quaternion.sphereMean (data, retStddev, 0.0001);
							     switch (tok) {
							     case 96:
								 return result;
							     case 192:
								 return  new Float (retStddev[0]);
							     }
							     break;
							 }
							 return "NaN";
						     }, $fz.isPrivate = true, $fz), "java.util.List,~N");
	c$.getQuaternionArray = Clazz.defineMethod (c$, "getQuaternionArray", 
						    function (quaternionOrSVData, itype) {
							var data;
							switch (itype) {
							case 135270417:
							    data = quaternionOrSVData;
							    break;
							case 9:
							    var pts = quaternionOrSVData;
							    data =  new Array (pts.length);
							    for (var i = 0; i < pts.length; i++) data[i] = org.jmol.util.Quaternion.newP4 (pts[i]);

							    break;
							case 1073742001:
							    var sv = quaternionOrSVData;
							    data =  new Array (sv.size ());
							    for (var i = 0; i < sv.size (); i++) {
								var pt = org.jmol.script.ScriptVariable.pt4Value (sv.get (i));
								if (pt == null) return null;
								data[i] = org.jmol.util.Quaternion.newP4 (pt);
							    }
							    break;
							default:
							    return null;
							}
							return data;
						    }, "~O,~N");
    });
    // 
    //// org\jmol\shape\Object2d.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (null, "org.jmol.shape.Object2d", ["java.lang.Float", "org.jmol.util.Colix"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.isLabelOrHover = false;
	    this.viewer = null;
	    this.gdata = null;
	    this.xyz = null;
	    this.target = null;
	    this.script = null;
	    this.colix = 0;
	    this.bgcolix = 0;
	    this.pointer = 0;
	    this.align = 0;
	    this.valign = 0;
	    this.movableX = 0;
	    this.movableY = 0;
	    this.movableZ = 0;
	    this.movableXPercent = 2147483647;
	    this.movableYPercent = 2147483647;
	    this.movableZPercent = 2147483647;
	    this.offsetX = 0;
	    this.offsetY = 0;
	    this.z = 0;
	    this.zSlab = 0;
	    this.windowWidth = 0;
	    this.windowHeight = 0;
	    this.adjustForWindow = false;
	    this.boxWidth = 0;
	    this.boxHeight = 0;
	    this.boxX = 0;
	    this.boxY = 0;
	    this.modelIndex = -1;
	    this.visible = true;
	    this.hidden = false;
	    this.boxXY = null;
	    this.scalePixelsPerMicron = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "Object2d");
	Clazz.prepareFields (c$, function () {
	    this.boxXY =  Clazz.newFloatArray (5, 0);
	});
	Clazz.defineMethod (c$, "getScalePixelsPerMicron", 
			    function () {
				return this.scalePixelsPerMicron;
			    });
	Clazz.defineMethod (c$, "setScalePixelsPerMicron", 
			    function (scalePixelsPerMicron) {
				this.scalePixelsPerMicron = scalePixelsPerMicron;
			    }, "~N");
	Clazz.defineMethod (c$, "setModel", 
			    function (modelIndex) {
				this.modelIndex = modelIndex;
			    }, "~N");
	Clazz.defineMethod (c$, "setVisibility", 
			    function (TF) {
				this.visible = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "setXYZ", 
			    function (xyz) {
				this.valign = (xyz == null ? 0 : 4);
				this.xyz = xyz;
				this.setAdjustForWindow (xyz == null);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setAdjustForWindow", 
			    function (TF) {
				this.adjustForWindow = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "setColix", 
			    function (colix) {
				this.colix = colix;
			    }, "~N");
	Clazz.defineMethod (c$, "setColix", 
			    function (value) {
				this.colix = org.jmol.util.Colix.getColixO (value);
			    }, "~O");
	Clazz.defineMethod (c$, "setTranslucent", 
			    function (level, isBackground) {
				if (isBackground) {
				    if (this.bgcolix != 0) this.bgcolix = org.jmol.util.Colix.getColixTranslucent3 (this.bgcolix, !Float.isNaN (level), level);
				} else {
				    this.colix = org.jmol.util.Colix.getColixTranslucent3 (this.colix, !Float.isNaN (level), level);
				}}, "~N,~B");
	Clazz.defineMethod (c$, "setBgColix", 
			    function (colix) {
				this.bgcolix = colix;
			    }, "~N");
	Clazz.defineMethod (c$, "setBgColix", 
			    function (value) {
				this.bgcolix = (value == null ? 0 : org.jmol.util.Colix.getColixO (value));
			    }, "~O");
	Clazz.defineMethod (c$, "setMovableX", 
			    function (x) {
				this.valign = (this.valign == 4 ? 4 : 0);
				this.movableX = x;
				this.movableXPercent = 2147483647;
			    }, "~N");
	Clazz.defineMethod (c$, "setMovableY", 
			    function (y) {
				this.valign = (this.valign == 4 ? 4 : 0);
				this.movableY = y;
				this.movableYPercent = 2147483647;
			    }, "~N");
	Clazz.defineMethod (c$, "setMovableZ", 
			    function (z) {
				if (this.valign != 4) this.valign = 0;
				this.movableZ = z;
				this.movableZPercent = 2147483647;
			    }, "~N");
	Clazz.defineMethod (c$, "setMovableXPercent", 
			    function (x) {
				this.valign = (this.valign == 4 ? 4 : 0);
				this.movableX = 2147483647;
				this.movableXPercent = x;
			    }, "~N");
	Clazz.defineMethod (c$, "setMovableYPercent", 
			    function (y) {
				this.valign = (this.valign == 4 ? 4 : 0);
				this.movableY = 2147483647;
				this.movableYPercent = y;
			    }, "~N");
	Clazz.defineMethod (c$, "setMovableZPercent", 
			    function (z) {
				if (this.valign != 4) this.valign = 0;
				this.movableZ = 2147483647;
				this.movableZPercent = z;
			    }, "~N");
	Clazz.defineMethod (c$, "setZs", 
			    function (z, zSlab) {
				this.z = z;
				this.zSlab = zSlab;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setXYZs", 
			    function (x, y, z, zSlab) {
				this.setMovableX (x);
				this.setMovableY (y);
				this.setZs (z, zSlab);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setScript", 
			    function (script) {
				this.script = (script == null || script.length == 0 ? null : script);
			    }, "~S");
	Clazz.defineMethod (c$, "getScript", 
			    function () {
				return this.script;
			    });
	Clazz.defineMethod (c$, "setOffset", 
			    function (offset) {
				this.offsetX = org.jmol.shape.Object2d.getXOffset (offset);
				this.offsetY = org.jmol.shape.Object2d.getYOffset (offset);
				this.valign = 0;
			    }, "~N");
	c$.getXOffset = Clazz.defineMethod (c$, "getXOffset", 
					    function (offset) {
						switch (offset) {
						case 0:
						    return 4;
						case 32767:
						    return 0;
						default:
						    return ((offset << 48) >> 56);
						}
					    }, "~N");
	c$.getYOffset = Clazz.defineMethod (c$, "getYOffset", 
					    function (offset) {
						switch (offset) {
						case 0:
						    return -4;
						case 32767:
						    return 0;
						default:
						    return -((offset << 56) >> 56);
						}
					    }, "~N");
	Clazz.defineMethod (c$, "setAlignment", 
			    function (align) {
				if ("left".equals (align)) return this.setAlignment (1);
				if ("center".equals (align)) return this.setAlignment (2);
				if ("right".equals (align)) return this.setAlignment (3);
				return false;
			    }, "~S");
	c$.getAlignment = Clazz.defineMethod (c$, "getAlignment", 
					      function (align) {
						  return org.jmol.shape.Object2d.hAlignNames[align & 3];
					      }, "~N");
	Clazz.defineMethod (c$, "setAlignment", 
			    function (align) {
				if (this.align != align) {
				    this.align = align;
				    this.recalc ();
				}return true;
			    }, "~N");
	Clazz.defineMethod (c$, "setPointer", 
			    function (pointer) {
				this.pointer = pointer;
			    }, "~N");
	c$.getPointer = Clazz.defineMethod (c$, "getPointer", 
					    function (pointer) {
						return ((pointer & 1) == 0 ? "" : (pointer & 2) > 0 ? "background" : "on");
					    }, "~N");
	Clazz.defineMethod (c$, "setBoxOffsetsInWindow", 
			    function (margin, vMargin, vTop) {
				var bw = this.boxWidth + margin;
				var x = this.boxX;
				if (x + bw > this.windowWidth) x = this.windowWidth - bw;
				if (x < margin) x = margin;
				this.boxX = x;
				var bh = this.boxHeight;
				var y = vTop;
				if (y + bh > this.windowHeight) y = this.windowHeight - bh;
				if (y < vMargin) y = vMargin;
				this.boxY = y;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "setWindow", 
			    function (width, height, scalePixelsPerMicron) {
				this.windowWidth = width;
				this.windowHeight = height;
				if (this.scalePixelsPerMicron < 0 && scalePixelsPerMicron != 0) this.scalePixelsPerMicron = scalePixelsPerMicron;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "checkObjectClicked", 
			    function (x, y, bsVisible) {
				if (this.modelIndex >= 0 && !bsVisible.get (this.modelIndex) || this.hidden) return false;
				if (this.gdata.isAntialiased ()) {
				    x <<= 1;
				    y <<= 1;
				}return (this.script != null && x >= this.boxX && x <= this.boxX + this.boxWidth && y >= this.boxY && y <= this.boxY + this.boxHeight);
			    }, "~N,~N,org.jmol.util.BitSet");
	c$.setProperty = Clazz.defineMethod (c$, "setProperty", 
					     function (propertyName, value, currentObject) {
						 if ("script" === propertyName) {
						     if (currentObject != null) currentObject.setScript (value);
						     return true;
						 }if ("xpos" === propertyName) {
						     if (currentObject != null) currentObject.setMovableX ((value).intValue ());
						     return true;
						 }if ("ypos" === propertyName) {
						     if (currentObject != null) currentObject.setMovableY ((value).intValue ());
						     return true;
						 }if ("%xpos" === propertyName) {
						     if (currentObject != null) currentObject.setMovableXPercent ((value).intValue ());
						     return true;
						 }if ("%ypos" === propertyName) {
						     if (currentObject != null) currentObject.setMovableYPercent ((value).intValue ());
						     return true;
						 }if ("%zpos" === propertyName) {
						     if (currentObject != null) currentObject.setMovableZPercent ((value).intValue ());
						     return true;
						 }if ("xypos" === propertyName) {
						     if (currentObject == null) return true;
						     var pt = value;
						     currentObject.setXYZ (null);
						     if (pt.z == 3.4028235E38) {
							 currentObject.setMovableX (Clazz.floatToInt (pt.x));
							 currentObject.setMovableY (Clazz.floatToInt (pt.y));
						     } else {
							 currentObject.setMovableXPercent (Clazz.floatToInt (pt.x));
							 currentObject.setMovableYPercent (Clazz.floatToInt (pt.y));
						     }return true;
						 }if ("xyz" === propertyName) {
						     if (currentObject != null) {
							 currentObject.setXYZ (value);
						     }return true;
						 }return false;
					     }, "~S,~O,org.jmol.shape.Object2d");
	c$.getOffset = Clazz.defineMethod (c$, "getOffset", 
					   function (xOffset, yOffset) {
					       xOffset = Math.min (Math.max (xOffset, -127), 127);
					       yOffset = Math.min (Math.max (yOffset, -127), 127);
					       return ((xOffset & 0xFF) << 8) | (yOffset & 0xFF);
					   }, "~N,~N");
	Clazz.defineStatics (c$,
			     "POINTER_NONE", 0,
			     "POINTER_ON", 1,
			     "POINTER_BACKGROUND", 2,
			     "hAlignNames", ["", "left", "center", "right", ""],
			     "ALIGN_NONE", 0,
			     "ALIGN_LEFT", 1,
			     "ALIGN_CENTER", 2,
			     "ALIGN_RIGHT", 3,
			     "vAlignNames", ["xy", "top", "bottom", "middle"],
			     "VALIGN_XY", 0,
			     "VALIGN_TOP", 1,
			     "VALIGN_BOTTOM", 2,
			     "VALIGN_MIDDLE", 3,
			     "VALIGN_XYZ", 4);
    });
    // 
    //// org\jmol\util\ColorEncoder.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.ColorEncoder", ["java.lang.Boolean", "$.Float", "java.util.ArrayList", "$.Hashtable", "org.jmol.constant.EnumPalette", "org.jmol.util.ArrayUtil", "$.Colix", "$.ColorUtil", "$.Escape", "$.Logger", "$.TextFormat", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.paletteBW = null;
	    this.paletteWB = null;
	    this.argbsCpk = null;
	    this.argbsRoygb = null;
	    this.argbsRwb = null;
	    this.argbsShapely = null;
	    this.argbsAmino = null;
	    this.ihalf = 0;
	    this.schemes = null;
	    this.currentPalette = 0;
	    this.currentSegmentCount = 1;
	    this.isTranslucent = false;
	    this.lo = 0;
	    this.hi = 0;
	    this.isReversed = false;
	    this.userScale = null;
	    this.thisScale = null;
	    this.thisName = "scheme";
	    this.isColorIndex = false;
	    this.propertyColorEncoder = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "ColorEncoder");
	Clazz.prepareFields (c$, function () {
	    this.userScale = [-8355712];
	    this.thisScale = [-8355712];
	});
	Clazz.makeConstructor (c$, 
			       function (propertyColorEncoder) {
				   if (propertyColorEncoder == null) {
				       this.schemes =  new java.util.Hashtable ();
				       this.argbsCpk = org.jmol.constant.EnumPalette.argbsCpk;
				       this.argbsRoygb = org.jmol.viewer.JmolConstants.argbsRoygbScale;
				       this.argbsRwb = org.jmol.viewer.JmolConstants.argbsRwbScale;
				       this.argbsShapely = org.jmol.viewer.JmolConstants.argbsShapely;
				       this.argbsAmino = org.jmol.viewer.JmolConstants.argbsAmino;
				       this.ihalf = Clazz.doubleToInt (org.jmol.viewer.JmolConstants.argbsRoygbScale.length / 3);
				       this.propertyColorEncoder = this;
				   } else {
				       this.propertyColorEncoder = propertyColorEncoder;
				       this.schemes = propertyColorEncoder.schemes;
				   }}, "org.jmol.util.ColorEncoder");
	c$.getSchemeIndex = Clazz.defineMethod (c$, "getSchemeIndex", 
						($fz = function (colorScheme) {
						    for (var i = 0; i < org.jmol.util.ColorEncoder.colorSchemes.length; i++) if (org.jmol.util.ColorEncoder.colorSchemes[i].equalsIgnoreCase (colorScheme)) return (i >= 14 ? i - 14 : i < 12 ? i : -i);

						    return -1;
						}, $fz.isPrivate = true, $fz), "~S");
	c$.fixName = Clazz.defineMethod (c$, "fixName", 
					 ($fz = function (name) {
					     if (name.equalsIgnoreCase ("byelement")) return "byelement_jmol";
					     var ipt = org.jmol.util.ColorEncoder.getSchemeIndex (name);
					     return (ipt >= 0 ? org.jmol.util.ColorEncoder.colorSchemes[ipt] : name.toLowerCase ());
					 }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "makeColorScheme", 
			    ($fz = function (name, scale, isOverloaded) {
				name = org.jmol.util.ColorEncoder.fixName (name);
				if (scale == null) {
				    this.schemes.remove (name);
				    var iScheme = this.createColorScheme (name, false, isOverloaded);
				    if (isOverloaded) switch (iScheme) {
				    case 10:
					this.paletteBW = this.getPaletteBW ();
					break;
				    case 11:
					this.paletteWB = this.getPaletteWB ();
					break;
				    case 0:
				    case 1:
					this.argbsRoygb = org.jmol.viewer.JmolConstants.argbsRoygbScale;
					break;
				    case 6:
				    case 7:
					this.argbsRwb = org.jmol.viewer.JmolConstants.argbsRwbScale;
					break;
				    case 2:
					this.argbsCpk = org.jmol.constant.EnumPalette.argbsCpk;
					break;
				    case 3:
					org.jmol.util.ColorEncoder.getRasmolScale ();
					break;
				    case 5:
					this.argbsAmino = org.jmol.viewer.JmolConstants.argbsAmino;
					break;
				    case 4:
					this.argbsShapely = org.jmol.viewer.JmolConstants.argbsShapely;
					break;
				    }
				    return (iScheme == 2147483647 ? 0 : iScheme);
				}this.schemes.put (name, scale);
				this.setThisScheme (name, scale);
				var iScheme = this.createColorScheme (name, false, isOverloaded);
				if (isOverloaded) switch (iScheme) {
				case 10:
				    this.paletteBW = this.thisScale;
				    break;
				case 11:
				    this.paletteWB = this.thisScale;
				    break;
				case 0:
				case 1:
				    this.argbsRoygb = this.thisScale;
				    this.ihalf = Clazz.doubleToInt (this.argbsRoygb.length / 3);
				    break;
				case 6:
				case 7:
				    this.argbsRwb = this.thisScale;
				    break;
				case 2:
				    this.argbsCpk = this.thisScale;
				    break;
				case 3:
				    break;
				case 5:
				    this.argbsAmino = this.thisScale;
				    break;
				case 4:
				    this.argbsShapely = this.thisScale;
				    break;
				}
				return -1;
			    }, $fz.isPrivate = true, $fz), "~S,~A,~B");
	Clazz.defineMethod (c$, "createColorScheme", 
			    function (colorScheme, defaultToRoygb, isOverloaded) {
				colorScheme = colorScheme.toLowerCase ();
				var pt = Math.max (colorScheme.indexOf ("="), colorScheme.indexOf ("["));
				if (pt >= 0) {
				    var name = org.jmol.util.TextFormat.replaceAllCharacters (colorScheme.substring (0, pt), " =", "");
				    if (name.length > 0) isOverloaded = true;
				    var n = 0;
				    if (colorScheme.length > pt + 1 && !colorScheme.contains ("[")) {
					colorScheme = "[" + colorScheme.substring (pt + 1).trim () + "]";
					colorScheme = org.jmol.util.TextFormat.simpleReplace (colorScheme.$replace ('\n', ' '), "  ", " ");
					colorScheme = org.jmol.util.TextFormat.simpleReplace (colorScheme, ", ", ",").$replace (' ', ',');
					colorScheme = org.jmol.util.TextFormat.simpleReplace (colorScheme, ",", "][");
				    }pt = -1;
				    while ((pt = colorScheme.indexOf ("[", pt + 1)) >= 0) n++;

				    if (n == 0) return this.makeColorScheme (name, null, isOverloaded);
				    var scale =  Clazz.newIntArray (n, 0);
				    n = 0;
				    while ((pt = colorScheme.indexOf ("[", pt + 1)) >= 0) {
					var pt2 = colorScheme.indexOf ("]", pt);
					if (pt2 < 0) pt2 = colorScheme.length - 1;
					var c = org.jmol.util.ColorUtil.getArgbFromString (colorScheme.substring (pt, pt2 + 1));
					if (c == 0) c = org.jmol.util.ColorUtil.getArgbFromString (colorScheme.substring (pt + 1, pt2).trim ());
					if (c == 0) {
					    org.jmol.util.Logger.error ("error in color value: " + colorScheme.substring (pt, pt2 + 1));
					    return 0;
					}scale[n++] = c;
				    }
				    if (name.equals ("user")) {
					this.setUserScale (scale);
					return -12;
				    }return this.makeColorScheme (name, scale, isOverloaded);
				}colorScheme = org.jmol.util.ColorEncoder.fixName (colorScheme);
				var ipt = org.jmol.util.ColorEncoder.getSchemeIndex (colorScheme);
				if (this.schemes.containsKey (colorScheme)) {
				    this.setThisScheme (colorScheme, this.schemes.get (colorScheme));
				    return ipt;
				}return (ipt != -1 ? ipt : defaultToRoygb ? 0 : 2147483647);
			    }, "~S,~B,~B");
	Clazz.defineMethod (c$, "setUserScale", 
			    function (scale) {
				this.propertyColorEncoder.userScale = scale;
				this.makeColorScheme ("user", scale, false);
			    }, "~A");
	Clazz.defineMethod (c$, "getColorSchemeArray", 
			    function (palette) {
				var b;
				switch (palette) {
				case -1:
				    return this.thisScale;
				case 0:
				    return this.propertyColorEncoder.argbsRoygb;
				case 1:
				    return org.jmol.util.ArrayUtil.arrayCopyRangeRevI (this.propertyColorEncoder.argbsRoygb, 0, -1);
				case 8:
				    return org.jmol.util.ArrayUtil.arrayCopyRangeI (this.propertyColorEncoder.argbsRoygb, 0, this.propertyColorEncoder.ihalf);
				case 9:
				    var a = org.jmol.util.ArrayUtil.arrayCopyRangeI (this.propertyColorEncoder.argbsRoygb, this.propertyColorEncoder.argbsRoygb.length - 2 * this.propertyColorEncoder.ihalf, -1);
				    b =  Clazz.newIntArray (this.propertyColorEncoder.ihalf, 0);
				    for (var i = b.length, j = a.length; --i >= 0 && --j >= 0; ) b[i] = a[j--];

				    return b;
				case 10:
				    return this.getPaletteBW ();
				case 11:
				    return this.getPaletteWB ();
				case 6:
				    return this.propertyColorEncoder.argbsRwb;
				case 7:
				    return org.jmol.util.ArrayUtil.arrayCopyRangeRevI (this.propertyColorEncoder.argbsRwb, 0, -1);
				case 2:
				    return this.propertyColorEncoder.argbsCpk;
				case 3:
				    return org.jmol.util.ColorEncoder.getRasmolScale ();
				case 4:
				    return this.propertyColorEncoder.argbsShapely;
				case 5:
				    return this.propertyColorEncoder.argbsAmino;
				case -12:
				    return this.propertyColorEncoder.userScale;
				case -13:
				    return org.jmol.util.ArrayUtil.arrayCopyRangeRevI (this.propertyColorEncoder.userScale, 0, -1);
				default:
				    return null;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "getColorIndexFromPalette", 
			    function (val, lo, hi, palette, isTranslucent) {
				var colix = org.jmol.util.Colix.getColix (this.getArgbFromPalette (val, lo, hi, palette));
				if (isTranslucent) {
				    var f = (hi - val) / (hi - lo);
				    if (f > 1) f = 1;
				    else if (f < 0.125) f = 0.125;
				    colix = org.jmol.util.Colix.getColixTranslucent3 (colix, true, f);
				}return colix;
			    }, "~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "getPaletteColorCount", 
			    function (palette) {
				switch (palette) {
				case -1:
				    return this.thisScale.length;
				case 10:
				case 11:
				    this.getPaletteBW ();
				    return this.propertyColorEncoder.paletteBW.length;
				case 0:
				case 1:
				    return this.propertyColorEncoder.argbsRoygb.length;
				case 8:
				case 9:
				    return this.propertyColorEncoder.ihalf;
				case 6:
				case 7:
				    return this.propertyColorEncoder.argbsRwb.length;
				case -12:
				case -13:
				    return this.propertyColorEncoder.userScale.length;
				case 2:
				    return this.argbsCpk.length;
				case 3:
				    return org.jmol.util.ColorEncoder.getRasmolScale ().length;
				case 4:
				    return this.propertyColorEncoder.argbsShapely.length;
				case 5:
				    return this.propertyColorEncoder.argbsAmino.length;
				default:
				    return 0;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "getArgbFromPalette", 
			    function (val, lo, hi, palette) {
				if (Float.isNaN (val)) return -8355712;
				var n = this.getPaletteColorCount (palette);
				switch (palette) {
				case -1:
				    if (this.isColorIndex) {
					lo = 0;
					hi = this.thisScale.length;
				    }return this.thisScale[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)];
				case 10:
				    return this.getPaletteBW ()[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)];
				case 11:
				    return this.getPaletteWB ()[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)];
				case 0:
				    return this.propertyColorEncoder.argbsRoygb[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)];
				case 1:
				    return this.propertyColorEncoder.argbsRoygb[org.jmol.util.ColorEncoder.quantize (-val, -hi, -lo, n)];
				case 8:
				    return this.propertyColorEncoder.argbsRoygb[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)];
				case 9:
				    return this.propertyColorEncoder.argbsRoygb[this.propertyColorEncoder.ihalf + org.jmol.util.ColorEncoder.quantize (val, lo, hi, n) * 2];
				case 6:
				    return this.propertyColorEncoder.argbsRwb[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)];
				case 7:
				    return this.propertyColorEncoder.argbsRwb[org.jmol.util.ColorEncoder.quantize (-val, -hi, -lo, n)];
				case -12:
				    return (this.propertyColorEncoder.userScale.length == 0 ? -8355712 : this.propertyColorEncoder.userScale[org.jmol.util.ColorEncoder.quantize (val, lo, hi, n)]);
				case -13:
				    return (this.propertyColorEncoder.userScale.length == 0 ? -8355712 : this.propertyColorEncoder.userScale[org.jmol.util.ColorEncoder.quantize (-val, -hi, -lo, n)]);
				case 2:
				    return this.propertyColorEncoder.argbsCpk[org.jmol.util.ColorEncoder.colorIndex (val, n)];
				case 3:
				    return org.jmol.util.ColorEncoder.getRasmolScale ()[org.jmol.util.ColorEncoder.colorIndex (val, n)];
				case 4:
				    return this.propertyColorEncoder.argbsShapely[org.jmol.util.ColorEncoder.colorIndex (val, n)];
				case 5:
				    return this.propertyColorEncoder.argbsAmino[org.jmol.util.ColorEncoder.colorIndex (val, n)];
				default:
				    return -8355712;
				}
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setThisScheme", 
			    ($fz = function (name, scale) {
				this.thisName = name;
				this.thisScale = scale;
				if (name.equals ("user")) this.userScale = scale;
				this.isColorIndex = (name.indexOf ("byelement") == 0 || name.indexOf ("byresidue") == 0);
			    }, $fz.isPrivate = true, $fz), "~S,~A");
	Clazz.defineMethod (c$, "getArgb", 
			    function (val) {
				return (this.isReversed ? this.getArgbFromPalette (-val, -this.hi, -this.lo, this.currentPalette) : this.getArgbFromPalette (val, this.lo, this.hi, this.currentPalette));
			    }, "~N");
	Clazz.defineMethod (c$, "getColorIndex", 
			    function (val) {
				return (this.isReversed ? this.getColorIndexFromPalette (-val, -this.hi, -this.lo, this.currentPalette, this.isTranslucent) : this.getColorIndexFromPalette (val, this.lo, this.hi, this.currentPalette, this.isTranslucent));
			    }, "~N");
	Clazz.defineMethod (c$, "getColorKey", 
			    function () {
				var info =  new java.util.Hashtable ();
				var segmentCount = this.getPaletteColorCount (this.currentPalette);
				var colors =  new java.util.ArrayList (segmentCount);
				var values =  Clazz.newFloatArray (segmentCount + 1, 0);
				var quantum = (this.hi - this.lo) / segmentCount;
				var f = quantum * (this.isReversed ? -0.5 : 0.5);
				for (var i = 0; i < segmentCount; i++) {
				    values[i] = (this.isReversed ? this.hi - i * quantum : this.lo + i * quantum);
				    colors.add (org.jmol.util.ColorUtil.colorPointFromInt2 (this.getArgb (values[i] + f)));
				}
				values[segmentCount] = (this.isReversed ? this.lo : this.hi);
				info.put ("values", values);
				info.put ("colors", colors);
				info.put ("min", Float.$valueOf (this.lo));
				info.put ("max", Float.$valueOf (this.hi));
				info.put ("reversed", Boolean.$valueOf (this.isReversed));
				info.put ("name", this.getCurrentColorSchemeName ());
				return info;
			    });
	Clazz.defineMethod (c$, "setColorScheme", 
			    function (colorScheme, isTranslucent) {
				this.isTranslucent = isTranslucent;
				if (colorScheme != null) this.currentPalette = this.createColorScheme (colorScheme, true, false);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "setRange", 
			    function (lo, hi, isReversed) {
				if (hi == 3.4028235E38) {
				    lo = 1;
				    hi = this.getPaletteColorCount (this.currentPalette) + 1;
				}this.lo = Math.min (lo, hi);
				this.hi = Math.max (lo, hi);
				this.isReversed = isReversed;
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "getCurrentColorSchemeName", 
			    function () {
				return this.getColorSchemeName (this.currentPalette);
			    });
	Clazz.defineMethod (c$, "getColorSchemeName", 
			    function (i) {
				var absi = Math.abs (i);
				return (i == -1 ? this.thisName : absi < org.jmol.util.ColorEncoder.colorSchemes.length && absi >= 0 ? org.jmol.util.ColorEncoder.colorSchemes[absi] : null);
			    }, "~N");
	c$.getColorSchemeList = Clazz.defineMethod (c$, "getColorSchemeList", 
						    function (scheme) {
							if (scheme == null) return "";
							var colors = "";
							for (var i = 0; i < scheme.length; i++) colors += (i == 0 ? "" : " ") + org.jmol.util.Escape.escapeColor (scheme[i]);

							return colors;
						    }, "~A");
	c$.getRasmolScale = Clazz.defineMethod (c$, "getRasmolScale", 
						function () {
						    if (org.jmol.util.ColorEncoder.rasmolScale != null) return org.jmol.util.ColorEncoder.rasmolScale;
						    ($t$ = org.jmol.util.ColorEncoder.rasmolScale =  Clazz.newIntArray (org.jmol.constant.EnumPalette.argbsCpk.length, 0), org.jmol.util.ColorEncoder.prototype.rasmolScale = org.jmol.util.ColorEncoder.rasmolScale, $t$);
						    var argb = org.jmol.constant.EnumPalette.argbsCpkRasmol[0] | 0xFF000000;
						    for (var i = org.jmol.util.ColorEncoder.rasmolScale.length; --i >= 0; ) org.jmol.util.ColorEncoder.rasmolScale[i] = argb;

						    for (var i = org.jmol.constant.EnumPalette.argbsCpkRasmol.length; --i >= 0; ) {
							argb = org.jmol.constant.EnumPalette.argbsCpkRasmol[i];
							org.jmol.util.ColorEncoder.rasmolScale[argb >> 24] = argb | 0xFF000000;
						    }
						    return org.jmol.util.ColorEncoder.rasmolScale;
						});
	Clazz.defineMethod (c$, "getPaletteWB", 
			    ($fz = function () {
				if (this.propertyColorEncoder.paletteWB != null) return this.propertyColorEncoder.paletteWB;
				var b =  Clazz.newIntArray (org.jmol.viewer.JmolConstants.argbsRoygbScale.length, 0);
				for (var i = 0; i < b.length; i++) {
				    var xff = (1 / b.length * (b.length - i));
				    b[i] = org.jmol.util.ColorUtil.colorTriadToInt (xff, xff, xff);
				}
				return this.propertyColorEncoder.paletteWB = b;
			    }, $fz.isPrivate = true, $fz));
	c$.getPaletteAtoB = Clazz.defineMethod (c$, "getPaletteAtoB", 
						function (color1, color2, n) {
						    if (n < 2) n = org.jmol.viewer.JmolConstants.argbsRoygbScale.length;
						    var b =  Clazz.newIntArray (n, 0);
						    var red1 = (((color1 & 0xFF0000) >> 16) & 0xFF) / 255;
						    var green1 = (((color1 & 0xFF00) >> 8) & 0xFF) / 255;
						    var blue1 = (color1 & 0xFF) / 255;
						    var red2 = (((color2 & 0xFF0000) >> 16) & 0xFF) / 255;
						    var green2 = (((color2 & 0xFF00) >> 8) & 0xFF) / 255;
						    var blue2 = (color2 & 0xFF) / 255;
						    var dr = (red2 - red1) / (n - 1);
						    var dg = (green2 - green1) / (n - 1);
						    var db = (blue2 - blue1) / (n - 1);
						    for (var i = 0; i < n; i++) b[i] = org.jmol.util.ColorUtil.colorTriadToInt (red1 + dr * i, green1 + dg * i, blue1 + db * i);

						    return b;
						}, "~N,~N,~N");
	Clazz.defineMethod (c$, "getPaletteBW", 
			    ($fz = function () {
				if (this.propertyColorEncoder.paletteBW != null) return this.propertyColorEncoder.paletteBW;
				var b =  Clazz.newIntArray (org.jmol.viewer.JmolConstants.argbsRoygbScale.length, 0);
				for (var i = 0; i < b.length; i++) {
				    var xff = (1 / b.length * i);
				    b[i] = org.jmol.util.ColorUtil.colorTriadToInt (xff, xff, xff);
				}
				return this.propertyColorEncoder.paletteBW = b;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "quantize", 
			    function (x, isLowEnd) {
				var n = this.getPaletteColorCount (this.currentPalette);
				x = ((Clazz.floatToInt (x * n)) + (isLowEnd ? 0 : 1)) / n;
				return (x <= 0 ? this.lo : x >= 1 ? this.hi : this.lo + (this.hi - this.lo) * x);
			    }, "~N,~B");
	c$.quantize = Clazz.defineMethod (c$, "quantize", 
					  function (val, lo, hi, segmentCount) {
					      var range = hi - lo;
					      if (range <= 0 || Float.isNaN (val)) return Clazz.doubleToInt (segmentCount / 2);
					      var t = val - lo;
					      if (t <= 0) return 0;
					      var quanta = range / segmentCount;
					      var q = Clazz.floatToInt (t / quanta + 0.0001);
					      if (q >= segmentCount) q = segmentCount - 1;
					      return q;
					  }, "~N,~N,~N,~N");
	c$.colorIndex = Clazz.defineMethod (c$, "colorIndex", 
					    ($fz = function (q, segmentCount) {
						return Clazz.doubleToInt (Math.floor ( new Boolean (q <= 0 | q >= segmentCount).valueOf () ? 0 : q));
					    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "getState", 
			    function (s) {
				var n = 0;
				for (var entry, $entry = this.schemes.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
				    var name = entry.getKey ();
				    if ( new Boolean (name.length > 0 & n++ >= 0).valueOf ()) s.append ("color \"" + name + "=" + org.jmol.util.ColorEncoder.getColorSchemeList (entry.getValue ()) + "\";\n");
				}
				return n;
			    }, "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "getColorScheme", 
			    function () {
				return (this.isTranslucent ? "translucent " : "") + (this.currentPalette < 0 ? org.jmol.util.ColorEncoder.getColorSchemeList (this.getColorSchemeArray (this.currentPalette)) : this.getColorSchemeName (this.currentPalette));
			    });
	c$.RGBtoHSL = Clazz.defineMethod (c$, "RGBtoHSL", 
					  function (r, g, b, ret) {
					      r /= 255;
					      g /= 255;
					      b /= 255;
					      if (r > 1) r = 1;
					      if (g > 1) g = 1;
					      if (b > 1) b = 1;
					      var min = Math.min (r, Math.min (g, b));
					      var max = Math.max (r, Math.max (g, b));
					      var h = 0;
					      if (max == min) h = 0;
					      else if (max == r) h = ((60 * (g - b) / (max - min)) + 360) % 360;
					      else if (max == g) h = (60 * (b - r) / (max - min)) + 120;
					      else if (max == b) h = (60 * (r - g) / (max - min)) + 240;
					      var l = (max + min) / 2;
					      var s = 0;
					      if (max == min) s = 0;
					      else if (l <= .5) s = (max - min) / (max + min);
					      else s = (max - min) / (2 - max - min);
					      ret[0] = h / 360;
					      ret[1] = s;
					      ret[2] = l;
					  }, "~N,~N,~N,~A");
	Clazz.defineStatics (c$,
			     "GRAY", 0xFF808080,
			     "BYELEMENT_PREFIX", "byelement",
			     "BYRESIDUE_PREFIX", "byresidue");
	c$.BYELEMENT_JMOL = c$.prototype.BYELEMENT_JMOL = "byelement_jmol";
	c$.BYELEMENT_RASMOL = c$.prototype.BYELEMENT_RASMOL = "byelement_rasmol";
	c$.BYRESIDUE_SHAPELY = c$.prototype.BYRESIDUE_SHAPELY = "byresidue_shapely";
	c$.BYRESIDUE_AMINO = c$.prototype.BYRESIDUE_AMINO = "byresidue_amino";
	Clazz.defineStatics (c$,
			     "CUSTOM", -1,
			     "ROYGB", 0,
			     "BGYOR", 1,
			     "JMOL", 2,
			     "RASMOL", 3,
			     "SHAPELY", 4,
			     "AMINO", 5,
			     "RWB", 6,
			     "BWR", 7,
			     "LOW", 8,
			     "HIGH", 9,
			     "BW", 10,
			     "WB", 11,
			     "USER", -12,
			     "RESU", -13,
			     "ALT", 14);
	c$.colorSchemes = c$.prototype.colorSchemes = ["roygb", "bgyor", "byelement_jmol", "byelement_rasmol", "byresidue_shapely", "byresidue_amino", "rwb", "bwr", "low", "high", "bw", "wb", "user", "resu", "rgb", "bgr", "jmol", "rasmol", "byresidue"];
	Clazz.defineStatics (c$,
			     "rasmolScale", null);
    });
    // 
    //// org\jmol\api\JmolGraphicsInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolGraphicsInterface");
    // 
    //// org\jmol\util\GData.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (["org.jmol.api.JmolGraphicsInterface"], "org.jmol.util.GData", ["org.jmol.util.ArrayUtil", "$.Colix", "$.JmolFont", "$.Point3f", "$.Shader"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.apiPlatform = null;
	    this.windowWidth = 0;
	    this.windowHeight = 0;
	    this.displayMinX = 0;
	    this.displayMaxX = 0;
	    this.displayMinY = 0;
	    this.displayMaxY = 0;
	    this.antialiasThisFrame = false;
	    this.antialiasEnabled = false;
	    this.inGreyscaleMode = false;
	    this.changeableColixMap = null;
	    this.backgroundImage = null;
	    this.newWindowWidth = 0;
	    this.newWindowHeight = 0;
	    this.newAntialiasing = false;
	    this.bgcolor = 0;
	    this.xLast = 0;
	    this.yLast = 0;
	    this.slab = 0;
	    this.depth = 0;
	    this.width = 0;
	    this.height = 0;
	    this.zSlab = 0;
	    this.zDepth = 0;
	    this.zShadePower = 3;
	    this.colixCurrent = 0;
	    this.argbCurrent = 0;
	    this.bufferSize = 0;
	    this.zShadeR = 0;
	    this.zShadeG = 0;
	    this.zShadeB = 0;
	    this.graphicsForMetrics = null;
	    this.$isPass2 = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "GData", null, org.jmol.api.JmolGraphicsInterface);
	Clazz.prepareFields (c$, function () {
	    this.changeableColixMap =  Clazz.newShortArray (16, 0);
	});
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.defineMethod (c$, "initialize", 
			    function (apiPlatform) {
				this.apiPlatform = apiPlatform;
			    }, "org.jmol.api.ApiPlatform");
	Clazz.overrideMethod (c$, "setDepth", 
			      function (depthValue) {
				  this.depth = depthValue < 0 ? 0 : depthValue;
			      }, "~N");
	Clazz.overrideMethod (c$, "setSlab", 
			      function (slabValue) {
				  this.slab = slabValue < 0 ? 0 : slabValue;
			      }, "~N");
	Clazz.defineMethod (c$, "setZShade", 
			    function (zShade, zSlab, zDepth, zPower) {
				if (zShade) {
				    this.zShadeR = this.bgcolor & 0xFF;
				    this.zShadeG = (this.bgcolor & 0xFF00) >> 8;
				    this.zShadeB = (this.bgcolor & 0xFF0000) >> 16;
				    this.zSlab = zSlab < 0 ? 0 : zSlab;
				    this.zDepth = zDepth < 0 ? 0 : zDepth;
				    this.zShadePower = zPower;
				}}, "~B,~N,~N,~N");
	Clazz.overrideMethod (c$, "getRenderWidth", 
			      function () {
				  return this.width;
			      });
	Clazz.overrideMethod (c$, "getRenderHeight", 
			      function () {
				  return this.height;
			      });
	Clazz.overrideMethod (c$, "getSlab", 
			      function () {
				  return this.slab;
			      });
	Clazz.overrideMethod (c$, "getDepth", 
			      function () {
				  return this.depth;
			      });
	Clazz.defineMethod (c$, "isDisplayAntialiased", 
			    function () {
				return this.antialiasEnabled;
			    });
	Clazz.overrideMethod (c$, "isAntialiased", 
			      function () {
				  return this.antialiasThisFrame;
			      });
	Clazz.defineMethod (c$, "getChangeableColix", 
			    function (id, argb) {
				if (id >= this.changeableColixMap.length) this.changeableColixMap = org.jmol.util.ArrayUtil.arrayCopyShort (this.changeableColixMap, id + 16);
				if (this.changeableColixMap[id] == 0) this.changeableColixMap[id] = org.jmol.util.Colix.getColix (argb);
				return (id | -32768);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "changeColixArgb", 
			    function (id, argb) {
				if (id < this.changeableColixMap.length && this.changeableColixMap[id] != 0) this.changeableColixMap[id] = org.jmol.util.Colix.getColix (argb);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getBgColixes", 
			    function (bgcolixes) {
				return bgcolixes;
			    }, "~A");
	Clazz.overrideMethod (c$, "getColorArgbOrGray", 
			      function (colix) {
				  if (colix < 0) colix = this.changeableColixMap[colix & 2047];
				  return (this.inGreyscaleMode ? org.jmol.util.Colix.getArgbGreyscale (colix) : org.jmol.util.Colix.getArgb (colix));
			      }, "~N");
	Clazz.defineMethod (c$, "getShades", 
			    function (colix) {
				if (colix < 0) colix = this.changeableColixMap[colix & 2047];
				return (this.inGreyscaleMode ? org.jmol.util.Colix.getShadesGreyscale (colix) : org.jmol.util.Colix.getShades (colix));
			    }, "~N");
	Clazz.defineMethod (c$, "setGreyscaleMode", 
			    function (greyscaleMode) {
				this.inGreyscaleMode = greyscaleMode;
			    }, "~B");
	c$.getSpecularPower = Clazz.defineMethod (c$, "getSpecularPower", 
						  function () {
						      return org.jmol.util.Shader.specularPower;
						  });
	c$.setSpecularPower = Clazz.defineMethod (c$, "setSpecularPower", 
						  function (val) {
						      if (val < 0) {
							  org.jmol.util.GData.setSpecularExponent (-val);
							  return;
						      }if (org.jmol.util.Shader.specularPower == val) return;
						      ($t$ = org.jmol.util.Shader.specularPower = val, org.jmol.util.Shader.prototype.specularPower = org.jmol.util.Shader.specularPower, $t$);
						      ($t$ = org.jmol.util.Shader.intenseFraction = val / 100, org.jmol.util.Shader.prototype.intenseFraction = org.jmol.util.Shader.intenseFraction, $t$);
						      org.jmol.util.GData.flushCaches ();
						  }, "~N");
	c$.getSpecularPercent = Clazz.defineMethod (c$, "getSpecularPercent", 
						    function () {
							return org.jmol.util.Shader.specularPercent;
						    });
	c$.setSpecularPercent = Clazz.defineMethod (c$, "setSpecularPercent", 
						    function (val) {
							if (org.jmol.util.Shader.specularPercent == val) return;
							($t$ = org.jmol.util.Shader.specularPercent = val, org.jmol.util.Shader.prototype.specularPercent = org.jmol.util.Shader.specularPercent, $t$);
							($t$ = org.jmol.util.Shader.specularFactor = val / 100, org.jmol.util.Shader.prototype.specularFactor = org.jmol.util.Shader.specularFactor, $t$);
							org.jmol.util.GData.flushCaches ();
						    }, "~N");
	c$.getSpecularExponent = Clazz.defineMethod (c$, "getSpecularExponent", 
						     function () {
							 return org.jmol.util.Shader.specularExponent;
						     });
	c$.setSpecularExponent = Clazz.defineMethod (c$, "setSpecularExponent", 
						     function (val) {
							 if (org.jmol.util.Shader.specularExponent == val) return;
							 ($t$ = org.jmol.util.Shader.specularExponent = val, org.jmol.util.Shader.prototype.specularExponent = org.jmol.util.Shader.specularExponent, $t$);
							 ($t$ = org.jmol.util.Shader.phongExponent = Clazz.doubleToInt (Math.pow (2, val)), org.jmol.util.Shader.prototype.phongExponent = org.jmol.util.Shader.phongExponent, $t$);
							 ($t$ = org.jmol.util.Shader.usePhongExponent = false, org.jmol.util.Shader.prototype.usePhongExponent = org.jmol.util.Shader.usePhongExponent, $t$);
							 org.jmol.util.GData.flushCaches ();
						     }, "~N");
	c$.getPhongExponent = Clazz.defineMethod (c$, "getPhongExponent", 
						  function () {
						      return org.jmol.util.Shader.phongExponent;
						  });
	c$.setPhongExponent = Clazz.defineMethod (c$, "setPhongExponent", 
						  function (val) {
						      if (org.jmol.util.Shader.phongExponent == val && org.jmol.util.Shader.usePhongExponent) return;
						      ($t$ = org.jmol.util.Shader.phongExponent = val, org.jmol.util.Shader.prototype.phongExponent = org.jmol.util.Shader.phongExponent, $t$);
						      var x = (Math.log (val) / Math.log (2));
						      ($t$ = org.jmol.util.Shader.usePhongExponent = (x != Clazz.floatToInt (x)), org.jmol.util.Shader.prototype.usePhongExponent = org.jmol.util.Shader.usePhongExponent, $t$);
						      if (!org.jmol.util.Shader.usePhongExponent) ($t$ = org.jmol.util.Shader.specularExponent = Clazz.floatToInt (x), org.jmol.util.Shader.prototype.specularExponent = org.jmol.util.Shader.specularExponent, $t$);
						      org.jmol.util.GData.flushCaches ();
						  }, "~N");
	c$.getDiffusePercent = Clazz.defineMethod (c$, "getDiffusePercent", 
						   function () {
						       return org.jmol.util.Shader.diffusePercent;
						   });
	c$.setDiffusePercent = Clazz.defineMethod (c$, "setDiffusePercent", 
						   function (val) {
						       if (org.jmol.util.Shader.diffusePercent == val) return;
						       ($t$ = org.jmol.util.Shader.diffusePercent = val, org.jmol.util.Shader.prototype.diffusePercent = org.jmol.util.Shader.diffusePercent, $t$);
						       ($t$ = org.jmol.util.Shader.diffuseFactor = val / 100, org.jmol.util.Shader.prototype.diffuseFactor = org.jmol.util.Shader.diffuseFactor, $t$);
						       org.jmol.util.GData.flushCaches ();
						   }, "~N");
	c$.getAmbientPercent = Clazz.defineMethod (c$, "getAmbientPercent", 
						   function () {
						       return org.jmol.util.Shader.ambientPercent;
						   });
	c$.setAmbientPercent = Clazz.defineMethod (c$, "setAmbientPercent", 
						   function (val) {
						       if (org.jmol.util.Shader.ambientPercent == val) return;
						       ($t$ = org.jmol.util.Shader.ambientPercent = val, org.jmol.util.Shader.prototype.ambientPercent = org.jmol.util.Shader.ambientPercent, $t$);
						       ($t$ = org.jmol.util.Shader.ambientFraction = val / 100, org.jmol.util.Shader.prototype.ambientFraction = org.jmol.util.Shader.ambientFraction, $t$);
						       org.jmol.util.GData.flushCaches ();
						   }, "~N");
	c$.getSpecular = Clazz.defineMethod (c$, "getSpecular", 
					     function () {
						 return org.jmol.util.Shader.specularOn;
					     });
	c$.setSpecular = Clazz.defineMethod (c$, "setSpecular", 
					     function (val) {
						 if (org.jmol.util.Shader.specularOn == val) return;
						 ($t$ = org.jmol.util.Shader.specularOn = val, org.jmol.util.Shader.prototype.specularOn = org.jmol.util.Shader.specularOn, $t$);
						 org.jmol.util.GData.flushCaches ();
					     }, "~B");
	c$.flushCaches = Clazz.defineMethod (c$, "flushCaches", 
					     ($fz = function () {
						 org.jmol.util.Colix.flushShades ();
						 org.jmol.util.Shader.flushSphereCache ();
					     }, $fz.isPrivate = true, $fz));
	c$.getLightSource = Clazz.defineMethod (c$, "getLightSource", 
						function () {
						    return org.jmol.util.Point3f.new3 (org.jmol.util.Shader.xLight, org.jmol.util.Shader.yLight, org.jmol.util.Shader.zLight);
						});
	Clazz.defineMethod (c$, "isClipped3", 
			    function (x, y, z) {
				return (x < 0 || x >= this.width || y < 0 || y >= this.height || z < this.slab || z > this.depth);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "isClipped", 
			    function (x, y) {
				return (x < 0 || x >= this.width || y < 0 || y >= this.height);
			    }, "~N,~N");
	Clazz.overrideMethod (c$, "isInDisplayRange", 
			      function (x, y) {
				  return (x >= this.displayMinX && x < this.displayMaxX && y >= this.displayMinY && y < this.displayMaxY);
			      }, "~N,~N");
	Clazz.overrideMethod (c$, "isClippedXY", 
			      function (diameter, x, y) {
				  var r = (diameter + 1) >> 1;
				  return (x < -r || x >= this.width + r || y < -r || y >= this.height + r);
			      }, "~N,~N,~N");
	Clazz.overrideMethod (c$, "isClippedZ", 
			      function (z) {
				  return (z != -2147483648 && (z < this.slab || z > this.depth));
			      }, "~N");
	Clazz.defineMethod (c$, "clipCode3", 
			    function (x, y, z) {
				var code = 0;
				if (x < 0) code |= 8;
				else if (x >= this.width) code |= 4;
				if (y < 0) code |= 2;
				else if (y >= this.height) code |= 1;
				if (z < this.slab) code |= 32;
				else if (z > this.depth) code |= 16;
				return code;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "clipCode", 
			    function (z) {
				var code = 0;
				if (z < this.slab) code |= 32;
				else if (z > this.depth) code |= 16;
				return code;
			    }, "~N");
	Clazz.defineMethod (c$, "getFont3D", 
			    function (fontSize) {
				return org.jmol.util.JmolFont.createFont3D (0, 0, fontSize, fontSize, this.apiPlatform, this.graphicsForMetrics);
			    }, "~N");
	Clazz.defineMethod (c$, "getFont3DFS", 
			    function (fontFace, fontSize) {
				return org.jmol.util.JmolFont.createFont3D (org.jmol.util.JmolFont.getFontFaceID (fontFace), 0, fontSize, fontSize, this.apiPlatform, this.graphicsForMetrics);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getFontFidFS", 
			    function (fontFace, fontSize) {
				return this.getFont3DFSS (fontFace, "Bold", fontSize).fid;
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getFont3DFSS", 
			    function (fontFace, fontStyle, fontSize) {
				var iStyle = org.jmol.util.JmolFont.getFontStyleID (fontStyle);
				if (iStyle < 0) iStyle = 0;
				return org.jmol.util.JmolFont.createFont3D (org.jmol.util.JmolFont.getFontFaceID (fontFace), iStyle, fontSize, fontSize, this.apiPlatform, this.graphicsForMetrics);
			    }, "~S,~S,~N");
	Clazz.overrideMethod (c$, "getFont3DScaled", 
			      function (font, scale) {
				  var newScale = font.fontSizeNominal * scale;
				  return (newScale == font.fontSize ? font : org.jmol.util.JmolFont.createFont3D (font.idFontFace, font.idFontStyle, newScale, font.fontSizeNominal, this.apiPlatform, this.graphicsForMetrics));
			      }, "org.jmol.util.JmolFont,~N");
	Clazz.overrideMethod (c$, "getFontFid", 
			      function (fontSize) {
				  return this.getFont3D (fontSize).fid;
			      }, "~N");
	c$.getFontStyleID = Clazz.defineMethod (c$, "getFontStyleID", 
						function (fontStyle) {
						    return org.jmol.util.JmolFont.getFontStyleID (fontStyle);
						}, "~S");
	Clazz.defineMethod (c$, "setBackgroundTransparent", 
			    function (TF) {
			    }, "~B");
	Clazz.defineMethod (c$, "setBackgroundArgb", 
			    function (argb) {
				this.bgcolor = argb;
			    }, "~N");
	Clazz.defineMethod (c$, "setBackgroundImage", 
			    function (image) {
				this.backgroundImage = image;
			    }, "~O");
	Clazz.defineMethod (c$, "setWindowParameters", 
			    function (width, height, antialias) {
				this.newWindowWidth = width;
				this.newWindowHeight = height;
				this.newAntialiasing = antialias;
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "setNewWindowParametersForExport", 
			    function () {
				this.windowWidth = this.newWindowWidth;
				this.windowHeight = this.newWindowHeight;
				this.setWidthHeight (false);
			    });
	Clazz.defineMethod (c$, "setWidthHeight", 
			    function (isAntialiased) {
				this.width = this.windowWidth;
				this.height = this.windowHeight;
				if (isAntialiased) {
				    this.width <<= 1;
				    this.height <<= 1;
				}this.xLast = this.width - 1;
				this.yLast = this.height - 1;
				this.displayMinX = -(this.width >> 1);
				this.displayMaxX = this.width - this.displayMinX;
				this.displayMinY = -(this.height >> 1);
				this.displayMaxY = this.height - this.displayMinY;
				this.bufferSize = this.width * this.height;
			    }, "~B");
	Clazz.defineMethod (c$, "beginRendering", 
			    function (stereoRotationMatrix) {
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "endRendering", 
			    function () {
			    });
	Clazz.defineMethod (c$, "snapshotAnaglyphChannelBytes", 
			    function () {
			    });
	Clazz.defineMethod (c$, "getScreenImage", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "releaseScreenImage", 
			    function () {
			    });
	Clazz.defineMethod (c$, "applyAnaglygh", 
			    function (stereoMode, stereoColors) {
			    }, "org.jmol.constant.EnumStereoMode,~A");
	Clazz.defineMethod (c$, "setPass2", 
			    function (antialias) {
				return false;
			    }, "~B");
	Clazz.defineMethod (c$, "destroy", 
			    function () {
			    });
	Clazz.defineMethod (c$, "clearFontCache", 
			    function () {
			    });
	Clazz.defineMethod (c$, "plotImage", 
			    function (x, y, z, image, jmolRenderer, bgcolix, width, height) {
			    }, "~N,~N,~N,java.awt.Image,org.jmol.api.JmolRendererInterface,~N,~N,~N");
	Clazz.defineMethod (c$, "plotText", 
			    function (x, y, z, colorArgbOrGray, text, font3d, jmolRenderer) {
			    }, "~N,~N,~N,~N,~S,org.jmol.util.JmolFont,org.jmol.api.JmolRendererInterface");
	Clazz.defineMethod (c$, "renderBackground", 
			    function (jmolRenderer) {
			    }, "org.jmol.api.JmolRendererInterface");
	Clazz.defineMethod (c$, "getFont3DCurrent", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "setFont", 
			    function (font3d) {
			    }, "org.jmol.util.JmolFont");
	Clazz.defineMethod (c$, "setFontFid", 
			    function (fid) {
			    }, "~N");
	Clazz.defineMethod (c$, "setColor", 
			    function (color) {
				this.argbCurrent = color;
			    }, "~N");
	Clazz.defineMethod (c$, "isPass2", 
			    function () {
				return this.$isPass2;
			    });
	Clazz.defineMethod (c$, "setColix", 
			    function (colix) {
				return true;
			    }, "~N");
	Clazz.defineMethod (c$, "isDirectedTowardsCamera", 
			    function (normix) {
				return true;
			    }, "~N");
	Clazz.defineMethod (c$, "getTransformedVertexVectors", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "setNoisySurfaceShade", 
			    function (pointA, pointB, pointC) {
			    }, "org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	c$.roundInt = Clazz.defineMethod (c$, "roundInt", 
					  function (a) {
					      {
						  return a;
					      }}, "~N");
	Clazz.defineMethod (c$, "clear", 
			    function () {
			    });
	Clazz.overrideMethod (c$, "renderAllStrings", 
			      function (jmolRenderer) {
			      }, "~O");
	Clazz.defineStatics (c$,
			     "ENDCAPS_NONE", 0,
			     "ENDCAPS_OPEN", 1,
			     "ENDCAPS_FLAT", 2,
			     "ENDCAPS_SPHERICAL", 3,
			     "ENDCAPS_OPENEND", 4,
			     "EXPORT_RAYTRACER", 2,
			     "EXPORT_CARTESIAN", 1,
			     "EXPORT_NOT", 0,
			     "yGT", 1,
			     "yLT", 2,
			     "xGT", 4,
			     "xLT", 8,
			     "zGT", 16,
			     "zLT", 32);
    });
    // 
    //// org\jmol\bspt\Node.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.bspt");
    Clazz.load (["org.jmol.bspt.Element"], "org.jmol.bspt.Node", ["java.lang.NullPointerException", "org.jmol.bspt.Leaf", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.dim = 0;
	    this.minLeft = 0;
	    this.maxLeft = 0;
	    this.eleLeft = null;
	    this.minRight = 0;
	    this.maxRight = 0;
	    this.eleRight = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.bspt, "Node", org.jmol.bspt.Element);
	Clazz.makeConstructor (c$, 
			       function (bspt, level, leafLeft) {
				   Clazz.superConstructor (this, org.jmol.bspt.Node, []);
				   this.bspt = bspt;
				   if (level == bspt.treeDepth) {
				       bspt.treeDepth = level + 1;
				       if (bspt.treeDepth >= 100) org.jmol.util.Logger.error ("BSPT tree depth too great:" + bspt.treeDepth);
				   }if (leafLeft.count != 2) throw  new NullPointerException ();
				   this.dim = level % bspt.dimMax;
				   leafLeft.sort (this.dim);
				   var leafRight =  new org.jmol.bspt.Leaf (bspt, leafLeft, 1);
				   this.minLeft = org.jmol.bspt.Node.getDimensionValue (leafLeft.tuples[0], this.dim);
				   this.maxLeft = org.jmol.bspt.Node.getDimensionValue (leafLeft.tuples[leafLeft.count - 1], this.dim);
				   this.minRight = org.jmol.bspt.Node.getDimensionValue (leafRight.tuples[0], this.dim);
				   this.maxRight = org.jmol.bspt.Node.getDimensionValue (leafRight.tuples[leafRight.count - 1], this.dim);
				   this.eleLeft = leafLeft;
				   this.eleRight = leafRight;
				   this.count = 2;
			       }, "org.jmol.bspt.Bspt,~N,org.jmol.bspt.Leaf");
	Clazz.defineMethod (c$, "addTuple", 
			    function (level, tuple) {
				var dimValue = org.jmol.bspt.Node.getDimensionValue (tuple, this.dim);
				++this.count;
				var addLeft;
				if (dimValue < this.maxLeft) {
				    addLeft = true;
				} else if (dimValue > this.minRight) {
				    addLeft = false;
				} else if (dimValue == this.maxLeft) {
				    if (dimValue == this.minRight) {
					if (this.eleLeft.count < this.eleRight.count) addLeft = true;
					else addLeft = false;
				    } else {
					addLeft = true;
				    }} else if (dimValue == this.minRight) {
					addLeft = false;
				    } else {
					if (this.eleLeft.count < this.eleRight.count) addLeft = true;
					else addLeft = false;
				    }if (addLeft) {
					if (dimValue < this.minLeft) this.minLeft = dimValue;
					else if (dimValue > this.maxLeft) this.maxLeft = dimValue;
					this.eleLeft = this.eleLeft.addTuple (level + 1, tuple);
				    } else {
					if (dimValue < this.minRight) this.minRight = dimValue;
					else if (dimValue > this.maxRight) this.maxRight = dimValue;
					this.eleRight = this.eleRight.addTuple (level + 1, tuple);
				    }return this;
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "dump", 
			    function (level, sb) {
				sb.append ("\nnode LEFT" + level);
				this.eleLeft.dump (level + 1, sb);
				for (var i = 0; i < level; ++i) sb.append ("->");

				sb.append (" RIGHT" + level);
				this.eleRight.dump (level + 1, sb);
			    }, "~N,org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "toString", 
			    function () {
				return this.eleLeft.toString () + this.dim + ":" + "\n" + this.eleRight.toString ();
			    });
	c$.getDimensionValue = Clazz.defineMethod (c$, "getDimensionValue", 
						   function (pt, dim) {
						       return (dim == 0 ? pt.x : dim == 1 ? pt.y : pt.z);
						   }, "org.jmol.util.Point3f,~N");
    });
    // 
    //// java\util\regex\Pattern.js 
    // 
    ﻿$_J("java.util.regex");
    $_L(null,"java.util.regex.Pattern",["java.lang.IllegalArgumentException","$.StringBuffer","java.util.regex.Matcher"],function(){
	c$=$_C(function(){
	    this.$flags=0;
	    this.regexp=null;
	    $_Z(this,arguments);
	},java.util.regex,"Pattern",null,java.io.Serializable);
	$_M(c$,"matcher",
	    function(cs){
		return new java.util.regex.Matcher(this,cs);
	    },"CharSequence");
	$_M(c$,"split",
	    function(input,limit){
		var res=new Array(0);
		var mat=this.matcher(input);
		var index=0;
		var curPos=0;
		if(input.length()==0){
		    return[""];
		}else{
		    while(mat.find()&&(index+1<limit||limit<=0)){
			res[res.length]=input.subSequence(curPos,mat.start()).toString();
			curPos=mat.end();
			index++;
		    }
		    res[res.length]=input.subSequence(curPos,input.length()).toString();
		    index++;
		    if(limit==0){
			while(--index>=0&&res[index].toString().length==0){
			    res.length--;
			}
		    }}return res;
	    },"CharSequence,~N");
	$_M(c$,"split",
	    function(input){
		return this.split(input,0);
	    },"CharSequence");
	$_M(c$,"pattern",
	    function(){
		{
		    return this.regexp.source;
		}return null;
	    });
	$_M(c$,"toString",
	    function(){
		return this.pattern();
	    });
	$_M(c$,"flags",
	    function(){
		return this.$flags;
	    });
	c$.compile=$_M(c$,"compile",
		       function(regex,flags){
			   if((flags!=0)&&((flags|239)!=239)){
			       throw new IllegalArgumentException("Illegal flags");
			   }var flagStr="g";
			   if((flags&8)!=0){
			       flagStr+="m";
			   }if((flags&2)!=0){
			       flagStr+="i";
			   }var pattern=new java.util.regex.Pattern();
			   {
			       pattern.regexp=new RegExp(regex,flagStr);
			   }return pattern;
		       },"~S,~N");
	c$.compile=$_M(c$,"compile",
		       function(pattern){
			   return java.util.regex.Pattern.compile(pattern,0);
		       },"~S");
	c$.matches=$_M(c$,"matches",
		       function(regex,input){
			   return java.util.regex.Pattern.compile(regex).matcher(input).matches();
		       },"~S,CharSequence");
	c$.quote=$_M(c$,"quote",
		     function(s){
			 var sb=new StringBuffer().append("\\Q");
			 var apos=0;
			 var k;
			 while((k=s.indexOf("\\E",apos))>=0){
			     sb.append(s.substring(apos,k+2)).append("\\\\E\\Q");
			     apos=k+2;
			 }
			 return sb.append(s.substring(apos)).append("\\E").toString();
		     },"~S");
	$_K(c$,
	    ($fz=function(){
	    },$fz.isPrivate=true,$fz));
	$_S(c$,
	    "UNIX_LINES",1,
	    "CASE_INSENSITIVE",2,
	    "COMMENTS",4,
	    "MULTILINE",8,
	    "LITERAL",16,
	    "DOTALL",32,
	    "UNICODE_CASE",64,
	    "CANON_EQ",128,
	    "flagsBitMask",239);
    });
    // 
    //// org\jmol\viewer\PropertyManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (null, "org.jmol.viewer.PropertyManager", ["java.lang.Float", "java.util.ArrayList", "$.Arrays", "$.Hashtable", "org.jmol.script.ScriptEvaluator", "$.ScriptVariable", "$.ScriptVariableInt", "$.Token", "org.jmol.util.Escape", "$.Logger", "$.Parser", "$.StringXBuilder", "$.TextFormat"], function () {
	c$ = Clazz.declareType (org.jmol.viewer, "PropertyManager");
	c$.getPropertyNumber = Clazz.defineMethod (c$, "getPropertyNumber", 
						   function (infoType) {
						       if (infoType == null) return -1;
						       for (var i = 0; i < 39; i++) if (infoType.equalsIgnoreCase (org.jmol.viewer.PropertyManager.getPropertyName (i))) return i;

						       return -1;
						   }, "~S");
	c$.getDefaultParam = Clazz.defineMethod (c$, "getDefaultParam", 
						 function (propID) {
						     if (propID < 0) return "";
						     return org.jmol.viewer.PropertyManager.propertyTypes[propID * 3 + 2];
						 }, "~N");
	c$.acceptsStringParameter = Clazz.defineMethod (c$, "acceptsStringParameter", 
							function (name) {
							    var propID = org.jmol.viewer.PropertyManager.getPropertyNumber (name);
							    var type = org.jmol.viewer.PropertyManager.getParamType (propID);
							    return (type.length > 0 && type !== "<atom selection>");
							}, "~S");
	c$.getProperty = Clazz.defineMethod (c$, "getProperty", 
					     function (viewer, returnType, infoType, paramInfo) {
						 if (org.jmol.viewer.PropertyManager.propertyTypes.length != 117) org.jmol.util.Logger.warn ("propertyTypes is not the right length: " + org.jmol.viewer.PropertyManager.propertyTypes.length + " != " + 117);
						 var info;
						 if (infoType.indexOf (".") >= 0 || infoType.indexOf ("[") >= 0) {
						     info = org.jmol.viewer.PropertyManager.getModelProperty (viewer, infoType, paramInfo);
						 } else {
						     info = org.jmol.viewer.PropertyManager.getPropertyAsObject (viewer, infoType, paramInfo, returnType);
						 }if (returnType == null) return info;
						 var requestedReadable = returnType.equalsIgnoreCase ("readable");
						 if (requestedReadable) returnType = (org.jmol.viewer.PropertyManager.isReadableAsString (infoType) ? "String" : "JSON");
						 if (returnType.equalsIgnoreCase ("String")) return (info == null ? "" : info.toString ());
						 if (requestedReadable) return org.jmol.util.Escape.toReadable (infoType, info);
						 else if (returnType.equalsIgnoreCase ("JSON")) return "{" + org.jmol.util.Escape.toJSON (infoType, info) + "}";
						 return info;
					     }, "org.jmol.viewer.Viewer,~S,~S,~O");
	c$.getModelProperty = Clazz.defineMethod (c$, "getModelProperty", 
						  function (viewer, propertyName, propertyValue) {
						      propertyName = propertyName.$replace (']', ' ').$replace ('[', ' ').$replace ('.', ' ');
						      propertyName = org.jmol.util.TextFormat.simpleReplace (propertyName, "  ", " ");
						      var names = org.jmol.util.TextFormat.splitChars (org.jmol.util.TextFormat.trim (propertyName, " "), " ");
						      var args =  new Array (names.length);
						      propertyName = names[0];
						      var n;
						      for (var i = 1; i < names.length; i++) {
							  if ((n = org.jmol.util.Parser.parseInt (names[i])) != -2147483648) args[i] =  new org.jmol.script.ScriptVariableInt (n);
							  else args[i] = org.jmol.script.ScriptVariable.newVariable (4, names[i]);
						      }
						      return org.jmol.viewer.PropertyManager.extractProperty (org.jmol.viewer.PropertyManager.getProperty (viewer, null, propertyName, propertyValue), args, 1);
						  }, "org.jmol.viewer.Viewer,~S,~O");
	c$.extractProperty = Clazz.defineMethod (c$, "extractProperty", 
						 function (property, args, ptr) {
						     if (ptr >= args.length) return property;
						     var pt;
						     var arg = args[ptr++];
						     switch (arg.tok) {
						     case 2:
							 pt = arg.asInt () - 1;
							 if (Clazz.instanceOf (property, java.util.List)) {
							     var v = property;
							     if (pt < 0) pt += v.size ();
							     if (pt >= 0 && pt < v.size ()) return org.jmol.viewer.PropertyManager.extractProperty (v.get (pt), args, ptr);
							     return "";
							 }if (Clazz.instanceOf (property, org.jmol.util.Matrix3f)) {
							     var m = property;
							     var f = [[m.m00, m.m01, m.m02], [m.m10, m.m11, m.m12], [m.m20, m.m21, m.m22]];
							     if (pt < 0) pt += 3;
							     if (pt >= 0 && pt < 3) return org.jmol.viewer.PropertyManager.extractProperty (f, args, --ptr);
							     return "";
							 }if (org.jmol.util.Escape.isAI (property)) {
							     var ilist = property;
							     if (pt < 0) pt += ilist.length;
							     if (pt >= 0 && pt < ilist.length) return Integer.$valueOf (ilist[pt]);
							     return "";
							 }if (org.jmol.util.Escape.isAF (property)) {
							     var flist = property;
							     if (pt < 0) pt += flist.length;
							     if (pt >= 0 && pt < flist.length) return  new Float (flist[pt]);
							     return "";
							 }if (org.jmol.util.Escape.isAII (property)) {
							     var iilist = property;
							     if (pt < 0) pt += iilist.length;
							     if (pt >= 0 && pt < iilist.length) return org.jmol.viewer.PropertyManager.extractProperty (iilist[pt], args, ptr);
							     return "";
							 }if (org.jmol.util.Escape.isAFF (property)) {
							     var fflist = property;
							     if (pt < 0) pt += fflist.length;
							     if (pt >= 0 && pt < fflist.length) return org.jmol.viewer.PropertyManager.extractProperty (fflist[pt], args, ptr);
							     return "";
							 }if (org.jmol.util.Escape.isAS (property)) {
							     var slist = property;
							     if (pt < 0) pt += slist.length;
							     if (pt >= 0 && pt < slist.length) return slist[pt];
							     return "";
							 }if (Clazz.instanceOf (property, Array)) {
							     var olist = property;
							     if (pt < 0) pt += olist.length;
							     if (pt >= 0 && pt < olist.length) return olist[pt];
							     return "";
							 }break;
						     case 4:
							 var key = arg.asString ();
							 if (Clazz.instanceOf (property, java.util.Map)) {
							     var h = property;
							     if (key.equalsIgnoreCase ("keys")) {
								 var keys =  new java.util.ArrayList ();
								 var e = h.keySet ().iterator ();
								 while (e.hasNext ()) keys.add (e.next ());

								 return org.jmol.viewer.PropertyManager.extractProperty (keys, args, ptr);
							     }if (!h.containsKey (key)) {
								 var e = h.keySet ().iterator ();
								 var newKey = "";
								 while (e.hasNext ()) if ((newKey = e.next ()).equalsIgnoreCase (key)) {
								     key = newKey;
								     break;
								 }
							     }if (h.containsKey (key)) return org.jmol.viewer.PropertyManager.extractProperty (h.get (key), args, ptr);
							     return "";
							 }if (Clazz.instanceOf (property, java.util.List)) {
							     var v = property;
							     var v2 =  new java.util.ArrayList ();
							     ptr--;
							     for (pt = 0; pt < v.size (); pt++) {
								 var o = v.get (pt);
								 if (Clazz.instanceOf (o, java.util.Map)) v2.add (org.jmol.viewer.PropertyManager.extractProperty (o, args, ptr));
							     }
							     return v2;
							 }break;
						     }
						     return property;
						 }, "~O,~A,~N");
	c$.getPropertyName = Clazz.defineMethod (c$, "getPropertyName", 
						 ($fz = function (propID) {
						     if (propID < 0) return "";
						     return org.jmol.viewer.PropertyManager.propertyTypes[propID * 3];
						 }, $fz.isPrivate = true, $fz), "~N");
	c$.getParamType = Clazz.defineMethod (c$, "getParamType", 
					      ($fz = function (propID) {
						  if (propID < 0) return "";
						  return org.jmol.viewer.PropertyManager.propertyTypes[propID * 3 + 1];
					      }, $fz.isPrivate = true, $fz), "~N");
	c$.isReadableAsString = Clazz.defineMethod (c$, "isReadableAsString", 
						    ($fz = function (infoType) {
							for (var i = org.jmol.viewer.PropertyManager.readableTypes.length; --i >= 0; ) if (infoType.equalsIgnoreCase (org.jmol.viewer.PropertyManager.readableTypes[i])) return true;

							return false;
						    }, $fz.isPrivate = true, $fz), "~S");
	c$.getPropertyAsObject = Clazz.defineMethod (c$, "getPropertyAsObject", 
						     ($fz = function (viewer, infoType, paramInfo, returnType) {
							 if (infoType.equals ("tokenList")) {
							     return org.jmol.script.Token.getTokensLike (paramInfo);
							 }var id = org.jmol.viewer.PropertyManager.getPropertyNumber (infoType);
							 var iHaveParameter = (paramInfo != null && paramInfo.toString ().length > 0);
							 var myParam = (iHaveParameter ? paramInfo : org.jmol.viewer.PropertyManager.getDefaultParam (id));
							 switch (id) {
							 case 0:
							     return viewer.getAppletInfo ();
							 case 5:
							     return viewer.getAnimationInfo ();
							 case 13:
							     return viewer.getAtomBitSetVector (myParam);
							 case 14:
							     return viewer.getAllAtomInfo (myParam);
							 case 24:
							     return viewer.getAuxiliaryInfo (myParam);
							 case 15:
							     return viewer.getAllBondInfo (myParam);
							 case 25:
							     return viewer.getBoundBoxInfo ();
							 case 10:
							     return viewer.getRotationCenter ();
							 case 16:
							     return viewer.getAllChainInfo (myParam);
							 case 37:
							     return viewer.getProperty ("DATA_API", "consoleText", null);
							 case 38:
							     return viewer.getJspecViewProperties (myParam);
							 case 26:
							     return viewer.getData (myParam.toString ());
							 case 33:
							     return viewer.getErrorMessageUn ();
							 case 28:
							     return org.jmol.script.ScriptEvaluator.evaluateExpression (viewer, myParam.toString (), false);
							 case 20:
							     return viewer.getModelExtract (myParam, true, "MOL");
							 case 32:
							     return org.jmol.viewer.PropertyManager.getFileInfo (viewer.getFileData (), myParam.toString ());
							 case 1:
							     return viewer.getFullPathName ();
							 case 2:
							     return viewer.getFileHeader ();
							 case 4:
							 case 3:
							     if (iHaveParameter) return viewer.getFileAsString (myParam.toString ());
							     return viewer.getCurrentFileAsString ();
							 case 27:
							     var params = myParam.toString ();
							     var height = -1;
							     var width = -1;
							     var pt;
							     if ((pt = params.indexOf ("height=")) >= 0) height = org.jmol.util.Parser.parseInt (params.substring (pt + 7));
							     if ((pt = params.indexOf ("width=")) >= 0) width = org.jmol.util.Parser.parseInt (params.substring (pt + 6));
							     if (width < 0 && height < 0) height = width = -1;
							     else if (width < 0) width = height;
							     else height = width;
							     return viewer.getImageAs (returnType == null ? "JPEG" : "JPG64", -1, width, height, null, null);
							 case 35:
							     return viewer.getShapeProperty (23, "getInfo");
							 case 36:
							     return viewer.getShapeProperty (23, "getData");
							 case 21:
							     return viewer.getStatusChanged (myParam.toString ());
							 case 22:
							     return viewer;
							 case 7:
							     return viewer.getLigandInfo (myParam);
							 case 9:
							     return viewer.getMeasurementInfo ();
							 case 29:
							     return viewer.getMenu (myParam.toString ());
							 case 23:
							     return viewer.getMessageQueue ();
							 case 30:
							     return viewer.getMinimizationInfo ();
							 case 6:
							     return viewer.getModelInfo (myParam);
							 case 18:
							     return viewer.getMoleculeInfo (myParam);
							 case 34:
							     return viewer.getMouseInfo ();
							 case 11:
							     return viewer.getOrientationInfo ();
							 case 31:
							     return viewer.getPointGroupInfo (myParam);
							 case 17:
							     return viewer.getAllPolymerInfo (myParam);
							 case 8:
							     return viewer.getShapeInfo ();
							 case 19:
							     return viewer.getStateInfo (myParam.toString (), 0, 0);
							 case 12:
							     return viewer.getMatrixRotate ();
							 }
							 var data =  new Array (39);
							 for (var i = 0; i < 39; i++) {
							     var paramType = org.jmol.viewer.PropertyManager.getParamType (i);
							     var paramDefault = org.jmol.viewer.PropertyManager.getDefaultParam (i);
							     var name = org.jmol.viewer.PropertyManager.getPropertyName (i);
							     data[i] = (name.charAt (0) == 'X' ? "" : name + (paramType !== "" ? " " + org.jmol.viewer.PropertyManager.getParamType (i) + (paramDefault !== "" ? " #default: " + org.jmol.viewer.PropertyManager.getDefaultParam (i) : "") : ""));
							 }
							 java.util.Arrays.sort (data);
							 var info =  new org.jmol.util.StringXBuilder ();
							 info.append ("getProperty ERROR\n").append (infoType).append ("?\nOptions include:\n");
							 for (var i = 0; i < 39; i++) if (data[i].length > 0) info.append ("\n getProperty ").append (data[i]);

							 return info.toString ();
						     }, $fz.isPrivate = true, $fz), "org.jmol.viewer.Viewer,~S,~O,~S");
	c$.getFileInfo = Clazz.defineMethod (c$, "getFileInfo", 
					     function (objHeader, type) {
						 var ht =  new java.util.Hashtable ();
						 if (objHeader == null) return ht;
						 var haveType = (type != null && type.length > 0);
						 if (Clazz.instanceOf (objHeader, java.util.Map)) {
						     return (haveType ? (objHeader).get (type) : objHeader);
						 }var lines = org.jmol.util.TextFormat.split (objHeader, '\n');
						 var keyLast = "";
						 var sb =  new org.jmol.util.StringXBuilder ();
						 if (haveType) type = type.toUpperCase ();
						 var key = "";
						 for (var i = 0; i < lines.length; i++) {
						     var line = lines[i];
						     if (line.length < 12) continue;
						     key = line.substring (0, 6).trim ();
						     var cont = line.substring (7, 10).trim ();
						     if (key.equals ("REMARK")) {
							 key += cont;
						     }if (!key.equals (keyLast)) {
							 if (haveType && keyLast.equals (type)) return sb.toString ();
							 if (!haveType) {
							     ht.put (keyLast, sb.toString ());
							     sb =  new org.jmol.util.StringXBuilder ();
							 }keyLast = key;
						     }if (!haveType || key.equals (type)) sb.append (line.substring (10).trim ()).appendC ('\n');
						 }
						 if (!haveType) {
						     ht.put (keyLast, sb.toString ());
						 }if (haveType) return (key.equals (type) ? sb.toString () : "");
						 return ht;
					     }, "~O,~S");
	Clazz.defineStatics (c$,
			     "atomExpression", "<atom selection>");
	c$.propertyTypes = c$.prototype.propertyTypes = ["appletInfo", "", "", "fileName", "", "", "fileHeader", "", "", "fileContents", "<pathname>", "", "fileContents", "", "", "animationInfo", "", "", "modelInfo", "<atom selection>", "{*}", "ligandInfo", "<atom selection>", "{*}", "shapeInfo", "", "", "measurementInfo", "", "", "centerInfo", "", "", "orientationInfo", "", "", "transformInfo", "", "", "atomList", "<atom selection>", "(visible)", "atomInfo", "<atom selection>", "(visible)", "bondInfo", "<atom selection>", "(visible)", "chainInfo", "<atom selection>", "(visible)", "polymerInfo", "<atom selection>", "(visible)", "moleculeInfo", "<atom selection>", "(visible)", "stateInfo", "<state type>", "all", "extractModel", "<atom selection>", "(visible)", "jmolStatus", "statusNameList", "", "jmolViewer", "", "", "messageQueue", "", "", "auxiliaryInfo", "<atom selection>", "{*}", "boundBoxInfo", "", "", "dataInfo", "<data type>", "types", "image", "", "", "evaluate", "<expression>", "", "menu", "<type>", "current", "minimizationInfo", "", "", "pointGroupInfo", "<atom selection>", "(visible)", "fileInfo", "<type>", "", "errorMessage", "", "", "mouseInfo", "", "", "isosurfaceInfo", "", "", "isosurfaceData", "", "", "consoleText", "", "", "jspecView", "<key>", ""];
	Clazz.defineStatics (c$,
			     "PROP_APPLET_INFO", 0,
			     "PROP_FILENAME", 1,
			     "PROP_FILEHEADER", 2,
			     "PROP_FILECONTENTS_PATH", 3,
			     "PROP_FILECONTENTS", 4,
			     "PROP_ANIMATION_INFO", 5,
			     "PROP_MODEL_INFO", 6,
			     "PROP_LIGAND_INFO", 7,
			     "PROP_SHAPE_INFO", 8,
			     "PROP_MEASUREMENT_INFO", 9,
			     "PROP_CENTER_INFO", 10,
			     "PROP_ORIENTATION_INFO", 11,
			     "PROP_TRANSFORM_INFO", 12,
			     "PROP_ATOM_LIST", 13,
			     "PROP_ATOM_INFO", 14,
			     "PROP_BOND_INFO", 15,
			     "PROP_CHAIN_INFO", 16,
			     "PROP_POLYMER_INFO", 17,
			     "PROP_MOLECULE_INFO", 18,
			     "PROP_STATE_INFO", 19,
			     "PROP_EXTRACT_MODEL", 20,
			     "PROP_JMOL_STATUS", 21,
			     "PROP_JMOL_VIEWER", 22,
			     "PROP_MESSAGE_QUEUE", 23,
			     "PROP_AUXILIARY_INFO", 24,
			     "PROP_BOUNDBOX_INFO", 25,
			     "PROP_DATA_INFO", 26,
			     "PROP_IMAGE", 27,
			     "PROP_EVALUATE", 28,
			     "PROP_MENU", 29,
			     "PROP_MINIMIZATION_INFO", 30,
			     "PROP_POINTGROUP_INFO", 31,
			     "PROP_FILE_INFO", 32,
			     "PROP_ERROR_MESSAGE", 33,
			     "PROP_MOUSE_INFO", 34,
			     "PROP_ISOSURFACE_INFO", 35,
			     "PROP_ISOSURFACE_DATA", 36,
			     "PROP_CONSOLE_TEXT", 37,
			     "PROP_JSPECVIEW", 38,
			     "PROP_COUNT", 39,
			     "readableTypes", ["", "stateinfo", "extractmodel", "filecontents", "fileheader", "image", "menu", "minimizationInfo"]);
    });
    // 
    //// org\jmol\util\JmolFont.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.JmolFont", ["org.jmol.util.ArrayUtil"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.fid = 0;
	    this.fontFace = null;
	    this.fontStyle = null;
	    this.fontSizeNominal = 0;
	    this.idFontFace = 0;
	    this.idFontStyle = 0;
	    this.fontSize = 0;
	    this.font = null;
	    this.fontMetrics = null;
	    this.apiPlatform = null;
	    this.ascent = 0;
	    this.descent = 0;
	    this.isBold = false;
	    this.isItalic = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "JmolFont");
	Clazz.makeConstructor (c$, 
			       ($fz = function (apiPlatform, fid, idFontFace, idFontStyle, fontSize, fontSizeNominal, graphics) {
				   this.apiPlatform = apiPlatform;
				   this.fid = fid;
				   this.fontFace = org.jmol.util.JmolFont.fontFaces[idFontFace];
				   this.fontStyle = org.jmol.util.JmolFont.fontStyles[idFontStyle];
				   this.idFontFace = idFontFace;
				   this.idFontStyle = idFontStyle;
				   this.fontSize = fontSize;
				   this.isBold = (idFontStyle & 1) == 1;
				   this.isItalic = (idFontStyle & 2) == 2;
				   this.fontSizeNominal = fontSizeNominal;
				   this.font = apiPlatform.newFont (org.jmol.util.JmolFont.fontFaces[idFontFace], this.isBold, this.isItalic, fontSize);
				   this.fontMetrics = apiPlatform.getFontMetrics (this, graphics);
				   this.descent = apiPlatform.getFontDescent (this.fontMetrics);
				   this.ascent = apiPlatform.getFontAscent (this.fontMetrics);
			       }, $fz.isPrivate = true, $fz), "org.jmol.api.ApiPlatform,~N,~N,~N,~N,~N,~O");
	c$.getFont3D = Clazz.defineMethod (c$, "getFont3D", 
					   function (fontID) {
					       return org.jmol.util.JmolFont.font3ds[fontID & 0xFF];
					   }, "~N");
	c$.createFont3D = Clazz.defineMethod (c$, "createFont3D", 
					      function (fontface, fontstyle, fontsize, fontsizeNominal, apiPlatform, graphicsForMetrics) {
						  if (fontsize > 0xFF) fontsize = 0xFF;
						  var fontsizeX16 = (Clazz.floatToInt (fontsize)) << 4;
						  var fontkey = ((fontface & 3) | ((fontstyle & 3) << 2) | (fontsizeX16 << 4));
						  for (var i = org.jmol.util.JmolFont.fontkeyCount; --i > 0; ) if (fontkey == org.jmol.util.JmolFont.fontkeys[i] && org.jmol.util.JmolFont.font3ds[i].fontSizeNominal == fontsizeNominal) return org.jmol.util.JmolFont.font3ds[i];

						  var fontIndexNext = ($t$ = org.jmol.util.JmolFont.fontkeyCount ++, org.jmol.util.JmolFont.prototype.fontkeyCount = org.jmol.util.JmolFont.fontkeyCount, $t$);
						  if (fontIndexNext == org.jmol.util.JmolFont.fontkeys.length) ($t$ = org.jmol.util.JmolFont.fontkeys = org.jmol.util.ArrayUtil.arrayCopyI (org.jmol.util.JmolFont.fontkeys, fontIndexNext + 8), org.jmol.util.JmolFont.prototype.fontkeys = org.jmol.util.JmolFont.fontkeys, $t$);
						  ($t$ = org.jmol.util.JmolFont.font3ds = org.jmol.util.ArrayUtil.arrayCopyObject (org.jmol.util.JmolFont.font3ds, fontIndexNext + 8), org.jmol.util.JmolFont.prototype.font3ds = org.jmol.util.JmolFont.font3ds, $t$);
						  var font3d =  new org.jmol.util.JmolFont (apiPlatform, fontIndexNext, fontface, fontstyle, fontsize, fontsizeNominal, graphicsForMetrics);
						  org.jmol.util.JmolFont.font3ds[fontIndexNext] = font3d;
						  org.jmol.util.JmolFont.fontkeys[fontIndexNext] = fontkey;
						  return font3d;
					      }, "~N,~N,~N,~N,org.jmol.api.ApiPlatform,~O");
	c$.getFontFaceID = Clazz.defineMethod (c$, "getFontFaceID", 
					       function (fontface) {
						   if ("Monospaced".equalsIgnoreCase (fontface)) return 2;
						   if ("Serif".equalsIgnoreCase (fontface)) return 1;
						   return 0;
					       }, "~S");
	c$.getFontStyleID = Clazz.defineMethod (c$, "getFontStyleID", 
						function (fontstyle) {
						    for (var i = 4; --i >= 0; ) if (org.jmol.util.JmolFont.fontStyles[i].equalsIgnoreCase (fontstyle)) return i;

						    return -1;
						}, "~S");
	Clazz.defineMethod (c$, "getAscent", 
			    function () {
				return this.ascent;
			    });
	Clazz.defineMethod (c$, "getDescent", 
			    function () {
				return this.descent;
			    });
	Clazz.defineMethod (c$, "getHeight", 
			    function () {
				return this.getAscent () + this.getDescent ();
			    });
	Clazz.defineMethod (c$, "stringWidth", 
			    function (text) {
				return this.apiPlatform.fontStringWidth (this, this.fontMetrics, text);
			    }, "~S");
	Clazz.defineStatics (c$,
			     "FONT_ALLOCATION_UNIT", 8,
			     "fontkeyCount", 1,
			     "fontkeys",  Clazz.newIntArray (8, 0));
	c$.font3ds = c$.prototype.font3ds =  new Array (8);
	Clazz.defineStatics (c$,
			     "FONT_FACE_SANS", 0,
			     "FONT_FACE_SERIF", 1,
			     "FONT_FACE_MONO", 2,
			     "fontFaces", ["SansSerif", "Serif", "Monospaced", ""],
			     "FONT_STYLE_PLAIN", 0,
			     "FONT_STYLE_BOLD", 1,
			     "FONT_STYLE_ITALIC", 2,
			     "FONT_STYLE_BOLDITALIC", 3,
			     "fontStyles", ["Plain", "Bold", "Italic", "BoldItalic"]);
    });
    // 
    //// org\jmol\util\MeshSurface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.MeshSurface", ["java.lang.Boolean", "$.Float", "java.util.ArrayList", "$.Hashtable", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.BoxInfo", "$.Colix", "$.Escape", "$.Measure", "$.Point3f", "$.StringXBuilder", "$.TextFormat"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.spanningVectors = null;
	    this.meshType = null;
	    this.vertexCount = 0;
	    this.vertices = null;
	    this.vertexValues = null;
	    this.vertexSource = null;
	    this.polygonCount = 0;
	    this.polygonIndexes = null;
	    this.isTriangleSet = false;
	    this.haveQuads = false;
	    this.colix = 0;
	    this.isColorSolid = true;
	    this.offset = null;
	    this.altVertices = null;
	    this.polygonColixes = null;
	    this.vertexColixes = null;
	    this.normals = null;
	    this.normalsTemp = null;
	    this.normalCount = 0;
	    this.normixCount = 0;
	    this.bsPolygons = null;
	    this.mat4 = null;
	    this.surfaceSet = null;
	    this.vertexSets = null;
	    this.nSets = 0;
	    this.checkCount = 2;
	    this.lastColor = 0;
	    this.lastColix = 0;
	    this.iA = 0;
	    this.iB = 0;
	    this.iC = 0;
	    this.polygonCount0 = 0;
	    this.vertexCount0 = 0;
	    this.bsSlabDisplay = null;
	    this.bsSlabGhost = null;
	    this.slabMeshType = 0;
	    this.slabColix = 0;
	    this.bsDisplay = null;
	    this.slabOptions = null;
	    this.doClear = false;
	    this.doGhost = false;
	    this.doCap = false;
	    this.iD = 0;
	    this.iE = 0;
	    this.mergeVertexCount0 = 0;
	    this.mergePolygonCount0 = 0;
	    this.isMerged = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "MeshSurface");
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	c$.newMesh = Clazz.defineMethod (c$, "newMesh", 
					 function (isAlt, vertices, vertexCount, polygonIndexes, normals, nNormals) {
					     var ms =  new org.jmol.util.MeshSurface ();
					     ms.polygonIndexes = polygonIndexes;
					     if (isAlt) ms.altVertices = vertices;
					     else ms.vertices = vertices;
					     ms.vertexCount = (vertexCount == 0 ? vertices.length : vertexCount);
					     ms.normals = normals;
					     ms.normalCount = (nNormals == 0 && normals != null ? normals.length : nNormals);
					     return ms;
					 }, "~B,~A,~N,~A,~A,~N");
	c$.newSlab = Clazz.defineMethod (c$, "newSlab", 
					 function (vertices, vertexCount, vertexValues, polygonIndexes, polygonCount, checkCount) {
					     var ms =  new org.jmol.util.MeshSurface ();
					     ms.vertices = vertices;
					     ms.vertexValues = vertexValues;
					     ms.vertexCount = vertexCount;
					     ms.polygonIndexes = polygonIndexes;
					     ms.polygonCount = polygonCount;
					     ms.checkCount = checkCount;
					     return ms;
					 }, "~A,~N,~A,~A,~N,~N");
	Clazz.defineMethod (c$, "getVertices", 
			    function () {
				return (this.altVertices == null ? this.vertices : this.altVertices);
			    });
	Clazz.defineMethod (c$, "getFaces", 
			    function () {
				return this.polygonIndexes;
			    });
	Clazz.defineMethod (c$, "setColix", 
			    function (colix) {
				this.colix = colix;
			    }, "~N");
	Clazz.defineMethod (c$, "addVertexCopy", 
			    function (vertex) {
				if (this.vertexCount == 0) this.vertices =  new Array (25);
				else if (this.vertexCount == this.vertices.length) this.vertices = org.jmol.util.ArrayUtil.doubleLength (this.vertices);
				this.vertices[this.vertexCount] = org.jmol.util.Point3f.newP (vertex);
				return this.vertexCount++;
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "addTriangle", 
			    function (vertexA, vertexB, vertexC) {
				this.addPolygon ([vertexA, vertexB, vertexC], null);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "addQuad", 
			    function (vertexA, vertexB, vertexC, vertexD) {
				this.haveQuads = true;
				this.addPolygon ([vertexA, vertexB, vertexC, vertexD], null);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setPolygonCount", 
			    function (polygonCount) {
				this.polygonCount = polygonCount;
				if (polygonCount < 0) return;
				if (this.polygonIndexes == null || polygonCount > this.polygonIndexes.length) this.polygonIndexes = org.jmol.util.ArrayUtil.newInt2 (polygonCount);
			    }, "~N");
	Clazz.defineMethod (c$, "addVertexCopyVal", 
			    function (vertex, value) {
				if (this.vertexCount == 0) this.vertexValues =  Clazz.newFloatArray (25, 0);
				else if (this.vertexCount >= this.vertexValues.length) this.vertexValues = org.jmol.util.ArrayUtil.doubleLengthF (this.vertexValues);
				this.vertexValues[this.vertexCount] = value;
				return this.addVertexCopy (vertex);
			    }, "org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "addTriangleCheck", 
			    function (vertexA, vertexB, vertexC, check, check2, color) {
				return (this.vertices == null || this.vertexValues != null && (Float.isNaN (this.vertexValues[vertexA]) || Float.isNaN (this.vertexValues[vertexB]) || Float.isNaN (this.vertexValues[vertexC])) || Float.isNaN (this.vertices[vertexA].x) || Float.isNaN (this.vertices[vertexB].x) || Float.isNaN (this.vertices[vertexC].x) ? -1 : this.addPolygonV3 (vertexA, vertexB, vertexC, check, check2, color, null));
			    }, "~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "addPolygonV3", 
			    ($fz = function (vertexA, vertexB, vertexC, check, check2, color, bs) {
				return (this.checkCount == 2 ? this.addPolygonC ([vertexA, vertexB, vertexC, check, check2], color, bs) : this.addPolygon ([vertexA, vertexB, vertexC, check], bs));
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "addPolygonC", 
			    function (polygon, color, bs) {
				if (color != 0) {
				    if (this.polygonColixes == null || this.polygonCount == 0) this.lastColor = 0;
				    var colix = (color == this.lastColor ? this.lastColix : (this.lastColix = org.jmol.util.Colix.getColix (this.lastColor = color)));
				    this.setPolygonColix (this.polygonCount, colix);
				}return this.addPolygon (polygon, bs);
			    }, "~A,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "addPolygon", 
			    ($fz = function (polygon, bs) {
				var n = this.polygonCount;
				if (this.polygonCount == 0) this.polygonIndexes = org.jmol.util.ArrayUtil.newInt2 (25);
				else if (this.polygonCount == this.polygonIndexes.length) this.polygonIndexes = org.jmol.util.ArrayUtil.doubleLength (this.polygonIndexes);
				if (bs != null) bs.set (this.polygonCount);
				this.polygonIndexes[this.polygonCount++] = polygon;
				return n;
			    }, $fz.isPrivate = true, $fz), "~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setPolygonColix", 
			    ($fz = function (index, colix) {
				if (this.polygonColixes == null) {
				    this.polygonColixes =  Clazz.newShortArray (25, 0);
				} else if (index >= this.polygonColixes.length) {
				    this.polygonColixes = org.jmol.util.ArrayUtil.doubleLengthShort (this.polygonColixes);
				}this.polygonColixes[index] = colix;
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "invalidatePolygons", 
			    function () {
				for (var i = this.polygonCount; --i >= this.mergePolygonCount0; ) if ((this.bsSlabDisplay == null || this.bsSlabDisplay.get (i)) && !this.setABC (i)) this.polygonIndexes[i] = null;

			    });
	Clazz.defineMethod (c$, "setABC", 
			    function (i) {
				if (this.bsSlabDisplay != null && !this.bsSlabDisplay.get (i) && (this.bsSlabGhost == null || !this.bsSlabGhost.get (i))) return false;
				var vertexIndexes = this.polygonIndexes[i];
				if (vertexIndexes == null) return false;
				this.iA = vertexIndexes[0];
				this.iB = vertexIndexes[1];
				this.iC = vertexIndexes[2];
				return this.vertexValues == null || !(Float.isNaN (this.vertexValues[this.iA]) || Float.isNaN (this.vertexValues[this.iB]) || Float.isNaN (this.vertexValues[this.iC]));
			    }, "~N");
	Clazz.defineMethod (c$, "setSlab", 
			    function (bsDisplay, bsGhost, type, color, translucency) {
				this.bsSlabDisplay = bsDisplay;
				this.bsSlabGhost = bsGhost;
				this.slabMeshType = (type.equalsIgnoreCase ("mesh") ? 1073742018 : 1073741938);
				this.slabColix = org.jmol.util.Colix.getColixTranslucent3 (org.jmol.util.Colix.getColixS (color), true, translucency);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,~S,~S,~N");
	Clazz.defineMethod (c$, "getSlabColor", 
			    function () {
				return (this.bsSlabGhost == null ? null : org.jmol.util.Colix.getHexCode (this.slabColix));
			    });
	Clazz.defineMethod (c$, "getSlabTranslucency", 
			    function () {
				return (this.bsSlabGhost == null ? null : "" + org.jmol.util.Colix.getColixTranslucencyFractional (this.slabColix));
			    });
	Clazz.defineMethod (c$, "getSlabType", 
			    function () {
				return (this.bsSlabGhost != null && this.slabMeshType == 1073742018 ? "mesh" : null);
			    });
	c$.getSlabWithinRange = Clazz.defineMethod (c$, "getSlabWithinRange", 
						    function (min, max) {
							return [Integer.$valueOf (1073742114), [Float.$valueOf (min), Float.$valueOf (max)], Boolean.FALSE, null];
						    }, "~N,~N");
	Clazz.defineMethod (c$, "resetSlab", 
			    function () {
				this.slabPolygons (org.jmol.util.MeshSurface.getSlabObject (1048587, null, false, null), false);
			    });
	c$.getSlabObject = Clazz.defineMethod (c$, "getSlabObject", 
					       function (tok, data, isCap, colorData) {
						   return [Integer.$valueOf (tok), data, Boolean.$valueOf (isCap), colorData];
					       }, "~N,~O,~B,~O");
	c$.getCapSlabObject = Clazz.defineMethod (c$, "getCapSlabObject", 
						  function (s, isCap) {
						      try {
							  if (s.indexOf ("array") == 0) {
							      var pts = org.jmol.util.TextFormat.splitChars (s.substring (6, s.length - 1), ",");
							      return org.jmol.util.MeshSurface.getSlabObject (1679429641, [org.jmol.util.Escape.unescapePoint (pts[0]), org.jmol.util.Escape.unescapePoint (pts[1]), org.jmol.util.Escape.unescapePoint (pts[2]), org.jmol.util.Escape.unescapePoint (pts[3])], isCap, null);
							  }var plane = org.jmol.util.Escape.unescapePoint (s);
							  if (Clazz.instanceOf (plane, org.jmol.util.Point4f)) return org.jmol.util.MeshSurface.getSlabObject (135266319, plane, isCap, null);
						      } catch (e) {
							  if (Clazz.exceptionOf (e, Exception)) {
							  } else {
							      throw e;
							  }
						      }
						      return null;
						  }, "~S,~B");
	Clazz.defineMethod (c$, "slabPolygonsList", 
			    function (slabInfo, allowCap) {
				for (var i = 0; i < slabInfo.size (); i++) if (!this.slabPolygons (slabInfo.get (i), allowCap)) break;

			    }, "java.util.List,~B");
	Clazz.defineMethod (c$, "slabPolygons", 
			    function (slabObject, allowCap) {
				if (this.polygonCount0 < 0) return false;
				var slabType = (slabObject[0]).intValue ();
				if (slabType == 1048587 || slabType == 1073741872) {
				    if (this.bsSlabDisplay != null && (this.polygonCount0 != 0 || this.vertexCount0 != 0)) {
					this.polygonCount = this.polygonCount0;
					this.vertexCount = this.vertexCount0;
					this.polygonCount0 = this.vertexCount0 = 0;
					this.normixCount = (this.isTriangleSet ? this.polygonCount : this.vertexCount);
					this.bsSlabDisplay.setBits (0, (this.polygonCount == 0 ? this.vertexCount : this.polygonCount));
					this.slabOptions =  new org.jmol.util.StringXBuilder ().append (this.meshType + " slab none");
					this.bsSlabGhost = null;
					this.slabMeshType = 1048587;
				    }if (slabType == 1048587) return false;
				}var slabbingObject = slabObject[1];
				var andCap = (slabObject[2]).booleanValue () && !(slabType == 1073741872);
				if (andCap && !allowCap) return false;
				var colorData = slabObject[3];
				var isGhost = (colorData != null);
				if (this.bsSlabDisplay == null || this.polygonCount0 == 0 && this.vertexCount0 == 0) {
				    this.polygonCount0 = this.polygonCount;
				    this.vertexCount0 = this.vertexCount;
				    this.bsSlabDisplay = org.jmol.util.BitSetUtil.setAll (this.polygonCount == 0 ? this.vertexCount : this.polygonCount);
				    this.bsSlabGhost = null;
				    if (this.polygonCount == 0 && this.vertexCount == 0) return false;
				} else if (this.isMerged) {
				    if (this.polygonCount == 0) this.bsSlabDisplay.setBits (this.mergeVertexCount0, this.vertexCount);
				    else this.bsSlabDisplay.setBits (this.mergePolygonCount0, this.polygonCount);
				}if (isGhost) {
				    if (this.bsSlabGhost == null) this.bsSlabGhost =  new org.jmol.util.BitSet ();
				    this.slabMeshType = (colorData[0]).intValue ();
				    this.slabColix = (colorData[1]).shortValue ();
				    if (org.jmol.util.Colix.isColixColorInherited (this.slabColix)) this.slabColix = org.jmol.util.Colix.copyColixTranslucency (this.slabColix, this.colix);
				    andCap = false;
				    this.colix = org.jmol.util.Colix.getColixTranslucent3 (this.colix, false, 0);
				}var sb =  new org.jmol.util.StringXBuilder ();
				sb.append (andCap ? " cap " : " slab ");
				if (isGhost) sb.append ("translucent ").appendF (org.jmol.util.Colix.getColixTranslucencyFractional (this.slabColix)).append (" ").append (org.jmol.util.Colix.getHexCode (this.slabColix)).append (" ");
				switch (slabType) {
				case 1073741872:
				    sb.append ("brillouin");
				    this.slabBrillouin (slabbingObject);
				    break;
				case 3:
				    this.getIntersection (0, null, null, null, null, slabbingObject, null, andCap, false, 3, isGhost);
				    break;
				case 135266319:
				    var plane = slabbingObject;
				    sb.append (org.jmol.util.Escape.escape (plane));
				    this.getIntersection (0, plane, null, null, null, null, null, andCap, false, 135266319, isGhost);
				    break;
				case 1614417948:
				case 1679429641:
				    var box = slabbingObject;
				    sb.append ("within ").append (org.jmol.util.Escape.escape (box));
				    var faces = org.jmol.util.BoxInfo.getFacesFromCriticalPoints (box);
				    for (var i = 0; i < faces.length; i++) {
					this.getIntersection (0, faces[i], null, null, null, null, null, andCap, false, 135266319, isGhost);
				    }
				    break;
				case 135270407:
				    this.getIntersection (0, null, null, null, slabbingObject, null, null, false, false, 32, isGhost);
				    break;
				case 135266324:
				case 1073742114:
				case 1073742018:
				    var o = slabbingObject;
				    var distance = (o[0]).floatValue ();
				    switch (slabType) {
				    case 135266324:
					var points = o[1];
					var bs = o[2];
					sb.append ("within ").appendF (distance).append (bs == null ? org.jmol.util.Escape.escape (points) : org.jmol.util.Escape.escape (bs));
					this.getIntersection (distance, null, points, null, null, null, null, andCap, false, (distance > 0 ? 1276118018 : 1073742154), isGhost);
					break;
				    case 1073742114:
					if (this.vertexValues == null) return false;
					var distanceMax = (o[1]).floatValue ();
					sb.append ("within range ").appendF (distance).append (" ").appendF (distanceMax);
					bs = (distanceMax < distance ? org.jmol.util.BitSetUtil.copy (this.bsSlabDisplay) : null);
					this.getIntersection (distance, null, null, null, null, null, null, andCap, false, 32, isGhost);
					var bsA = (bs == null ? null : org.jmol.util.BitSetUtil.copy (this.bsSlabDisplay));
					org.jmol.util.BitSetUtil.copy2 (bs, this.bsSlabDisplay);
					this.getIntersection (distanceMax, null, null, null, null, null, null, andCap, false, 64, isGhost);
					if (bsA != null) this.bsSlabDisplay.or (bsA);
					break;
				    case 1073742018:
					var mesh = o[1];
					this.getIntersection (0, null, null, null, null, null, mesh, andCap, false, distance < 0 ? 32 : 64, isGhost);
					break;
				    }
				    break;
				}
				var newOptions = sb.toString ();
				if (this.slabOptions == null) this.slabOptions =  new org.jmol.util.StringXBuilder ();
				if (this.slabOptions.indexOf (newOptions) < 0) this.slabOptions.append (this.slabOptions.length () > 0 ? "; " : "").append (this.meshType).append (newOptions);
				return true;
			    }, "~A,~B");
	Clazz.defineMethod (c$, "slabBrillouin", 
			    function (unitCellVectors) {
				return;
			    }, "~A");
	Clazz.defineMethod (c$, "addIntersectionVertex", 
			    function (vertex, value, source, set, mapEdge, i1, i2) {
				var key = (i1 > i2 ? i2 + "_" + i1 : i1 + "_" + i2);
				if (i1 >= 0) {
				    var v = mapEdge.get (key);
				    if (v != null) {
					return v.intValue ();
				    }}if (this.vertexSource != null) {
					if (this.vertexCount >= this.vertexSource.length) this.vertexSource = org.jmol.util.ArrayUtil.doubleLengthI (this.vertexSource);
					this.vertexSource[this.vertexCount] = source;
				    }if (this.vertexSets != null) {
					if (this.vertexCount >= this.vertexSets.length) this.vertexSets = org.jmol.util.ArrayUtil.doubleLengthI (this.vertexSets);
					this.vertexSets[this.vertexCount] = set;
				    }var i = this.addVertexCopy (vertex, value, true, -4);
				mapEdge.put (key, Integer.$valueOf (i));
				return i;
			    }, "org.jmol.util.Point3f,~N,~N,~N,java.util.Map,~N,~N");
	Clazz.defineMethod (c$, "addVertexCopy", 
			    function (vertex, value, assocNormals, iNormal) {
				return this.addVertexCopyVal (vertex, value);
			    }, "org.jmol.util.Point3f,~N,~B,~N");
	Clazz.defineMethod (c$, "getIntersection", 
			    function (distance, plane, ptCenters, vData, fData, bsSource, meshSurface, andCap, doClean, tokType, isGhost) {
				var isSlab = (vData == null);
				var pts = null;
				if (fData == null) fData = this.vertexValues;
				var mapEdge =  new java.util.Hashtable ();
				if (ptCenters != null || isGhost) andCap = false;
				var values =  Clazz.newFloatArray (2, 0);
				var fracs =  Clazz.newFloatArray (2, 0);
				var absD = Math.abs (distance);
				var d1;
				var d2;
				var d3;
				var valA;
				var valB;
				var valC;
				var sourceA = 0;
				var sourceB = 0;
				var sourceC = 0;
				var setA = 0;
				var iPts = (andCap ?  new java.util.ArrayList () : null);
				if (this.polygonCount == 0) {
				    for (var i = this.mergeVertexCount0; i < this.vertexCount; i++) {
					if (Float.isNaN (fData[i]) || org.jmol.util.MeshSurface.checkSlab (tokType, this.vertices[i], fData[i], distance, plane, ptCenters, bsSource) > 0) this.bsSlabDisplay.clear (i);
				    }
				    return;
				}var iLast = this.polygonCount;
				for (var i = this.mergePolygonCount0; i < iLast; i++) {
				    if (!this.setABC (i)) continue;
				    var bsSlab = (this.bsSlabGhost != null && this.bsSlabGhost.get (i) ? this.bsSlabGhost : this.bsSlabDisplay);
				    var check1 = this.polygonIndexes[i][3];
				    var check2 = (this.checkCount == 2 ? this.polygonIndexes[i][4] : 0);
				    var vA = this.vertices[this.iA];
				    var vB = this.vertices[this.iB];
				    var vC = this.vertices[this.iC];
				    valA = fData[this.iA];
				    valB = fData[this.iB];
				    valC = fData[this.iC];
				    if (this.vertexSource != null) {
					sourceA = this.vertexSource[this.iA];
					sourceB = this.vertexSource[this.iB];
					sourceC = this.vertexSource[this.iC];
				    }if (this.vertexSets != null) setA = this.vertexSets[this.iA];
				    d1 = org.jmol.util.MeshSurface.checkSlab (tokType, vA, valA, (bsSource == null ? distance : sourceA), plane, ptCenters, bsSource);
				    d2 = org.jmol.util.MeshSurface.checkSlab (tokType, vB, valB, (bsSource == null ? distance : sourceB), plane, ptCenters, bsSource);
				    d3 = org.jmol.util.MeshSurface.checkSlab (tokType, vC, valC, (bsSource == null ? distance : sourceC), plane, ptCenters, bsSource);
				    var test1 = (d1 != 0 && d1 < 0 ? 1 : 0) + (d2 != 0 && d2 < 0 ? 2 : 0) + (d3 != 0 && d3 < 0 ? 4 : 0);
				    switch (test1) {
				    default:
				    case 7:
				    case 0:
					break;
				    case 1:
				    case 6:
					if (ptCenters == null) pts = [org.jmol.util.MeshSurface.interpolatePoint (vA, vB, -d1, d2, valA, valB, values, fracs, 0), org.jmol.util.MeshSurface.interpolatePoint (vA, vC, -d1, d3, valA, valC, values, fracs, 1)];
					else pts = [this.interpolateSphere (vA, vB, -d1, -d2, absD, valA, valB, values, fracs, 0), this.interpolateSphere (vA, vC, -d1, -d3, absD, valA, valC, values, fracs, 1)];
					break;
				    case 2:
				    case 5:
					if (ptCenters == null) pts = [org.jmol.util.MeshSurface.interpolatePoint (vB, vA, -d2, d1, valB, valA, values, fracs, 1), org.jmol.util.MeshSurface.interpolatePoint (vB, vC, -d2, d3, valB, valC, values, fracs, 0)];
					else pts = [this.interpolateSphere (vB, vA, -d2, -d1, absD, valB, valA, values, fracs, 1), this.interpolateSphere (vB, vC, -d2, -d3, absD, valB, valC, values, fracs, 0)];
					break;
				    case 3:
				    case 4:
					if (ptCenters == null) pts = [org.jmol.util.MeshSurface.interpolatePoint (vC, vA, -d3, d1, valC, valA, values, fracs, 0), org.jmol.util.MeshSurface.interpolatePoint (vC, vB, -d3, d2, valC, valB, values, fracs, 1)];
					else pts = [this.interpolateSphere (vC, vA, -d3, -d1, absD, valC, valA, values, fracs, 0), this.interpolateSphere (vC, vB, -d3, -d2, absD, valC, valB, values, fracs, 1)];
					break;
				    }
				    this.doClear = true;
				    this.doGhost = isGhost;
				    this.doCap = andCap;
				    var bs;
				    if (isSlab) {
					switch (test1) {
					case 0:
					    this.doCap = false;
					    break;
					case 7:
					    continue;
					case 1:
					case 6:
					    var tossBC = (test1 == 1);
					    if (tossBC || isGhost) {
						if (!this.getDE (fracs, 0, this.iA, this.iB, this.iC, tossBC)) break;
						if (this.iD < 0) this.iD = this.addIntersectionVertex (pts[0], values[0], sourceA, setA, mapEdge, this.iA, this.iB);
						if (this.iE < 0) this.iE = this.addIntersectionVertex (pts[1], values[1], sourceA, setA, mapEdge, this.iA, this.iC);
						bs = (tossBC ? bsSlab : this.bsSlabGhost);
						this.addPolygonV3 (this.iA, this.iD, this.iE, check1 & 5 | 2, check2, 0, bs);
						if (!isGhost) break;
					    }if (!this.getDE (fracs, 1, this.iA, this.iC, this.iB, tossBC)) break;
					    bs = (tossBC ? this.bsSlabGhost : bsSlab);
					    if (this.iE < 0) {
						this.iE = this.addIntersectionVertex (pts[0], values[0], sourceB, setA, mapEdge, this.iA, this.iB);
						this.addPolygonV3 (this.iE, this.iB, this.iC, check1 & 3, check2, 0, bs);
					    }if (this.iD < 0) {
						this.iD = this.addIntersectionVertex (pts[1], values[1], sourceC, setA, mapEdge, this.iA, this.iC);
						this.addPolygonV3 (this.iD, this.iE, this.iC, check1 & 4 | 1, check2, 0, bs);
					    }break;
					case 5:
					case 2:
					    var tossAC = (test1 == 2);
					    if (tossAC || isGhost) {
						if (!this.getDE (fracs, 0, this.iB, this.iC, this.iA, tossAC)) break;
						bs = (tossAC ? bsSlab : this.bsSlabGhost);
						if (this.iE < 0) this.iE = this.addIntersectionVertex (pts[0], values[0], sourceB, setA, mapEdge, this.iB, this.iA);
						if (this.iD < 0) this.iD = this.addIntersectionVertex (pts[1], values[1], sourceB, setA, mapEdge, this.iB, this.iC);
						this.addPolygonV3 (this.iE, this.iB, this.iD, check1 & 3 | 4, check2, 0, bs);
						if (!isGhost) break;
					    }if (!this.getDE (fracs, 1, this.iB, this.iA, this.iC, tossAC)) break;
					    bs = (tossAC ? this.bsSlabGhost : bsSlab);
					    if (this.iD < 0) {
						this.iD = this.addIntersectionVertex (pts[0], values[0], sourceA, setA, mapEdge, this.iB, this.iA);
						this.addPolygonV3 (this.iA, this.iD, this.iC, check1 & 5, check2, 0, bs);
					    }if (this.iE < 0) {
						this.iE = this.addIntersectionVertex (pts[1], values[1], sourceC, setA, mapEdge, this.iB, this.iC);
						this.addPolygonV3 (this.iD, this.iE, this.iC, check1 & 2 | 1, check2, 0, bs);
					    }break;
					case 4:
					case 3:
					    var tossAB = (test1 == 4);
					    if (tossAB || isGhost) {
						if (!this.getDE (fracs, 0, this.iC, this.iA, this.iB, tossAB)) break;
						if (this.iD < 0) this.iD = this.addIntersectionVertex (pts[0], values[0], sourceC, setA, mapEdge, this.iA, this.iC);
						if (this.iE < 0) this.iE = this.addIntersectionVertex (pts[1], values[1], sourceC, setA, mapEdge, this.iB, this.iC);
						bs = (tossAB ? bsSlab : this.bsSlabGhost);
						this.addPolygonV3 (this.iD, this.iE, this.iC, check1 & 6 | 1, check2, 0, bs);
						if (!isGhost) break;
					    }if (!this.getDE (fracs, 1, this.iC, this.iB, this.iA, tossAB)) break;
					    bs = (tossAB ? this.bsSlabGhost : bsSlab);
					    if (this.iE < 0) {
						this.iE = this.addIntersectionVertex (pts[0], values[0], sourceA, setA, mapEdge, this.iA, this.iC);
						this.addPolygonV3 (this.iA, this.iB, this.iE, check1 & 5, check2, 0, bs);
					    }if (this.iD < 0) {
						this.iD = this.addIntersectionVertex (pts[1], values[1], sourceB, setA, mapEdge, this.iB, this.iC);
						this.addPolygonV3 (this.iE, this.iB, this.iD, check1 & 2 | 4, check2, 0, bs);
					    }break;
					}
					if (this.doClear) {
					    bsSlab.clear (i);
					    if (this.doGhost) this.bsSlabGhost.set (i);
					}if (this.doCap) {
					    iPts.add ([this.iD, this.iE]);
					}} else if (pts != null) {
					    vData.add (pts);
					}}
				if (andCap && iPts.size () > 0) {
				    var center =  new org.jmol.util.Point3f ();
				    for (var i = iPts.size (); --i >= 0; ) {
					var ipts = iPts.get (i);
					center.add (this.vertices[ipts[0]]);
					center.add (this.vertices[ipts[1]]);
				    }
				    center.scale (0.5 / iPts.size ());
				    var v0 = this.addIntersectionVertex (center, 0, -1, setA, mapEdge, -1, -1);
				    for (var i = iPts.size (); --i >= 0; ) {
					var ipts = iPts.get (i);
					this.addPolygonV3 (ipts[0], v0, ipts[1], 0, 0, 0, this.bsSlabDisplay);
				    }
				}if (!doClean) return;
				var bsv =  new org.jmol.util.BitSet ();
				var bsp =  new org.jmol.util.BitSet ();
				for (var i = 0; i < this.polygonCount; i++) {
				    if (this.polygonIndexes[i] == null) continue;
				    bsp.set (i);
				    for (var j = 0; j < 3; j++) bsv.set (this.polygonIndexes[i][j]);

				}
				var n = 0;
				var nPoly = bsp.cardinality ();
				if (nPoly != this.polygonCount) {
				    var map =  Clazz.newIntArray (this.vertexCount, 0);
				    for (var i = 0; i < this.vertexCount; i++) if (bsv.get (i)) map[i] = n++;

				    var vTemp =  new Array (n);
				    n = 0;
				    for (var i = 0; i < this.vertexCount; i++) if (bsv.get (i)) vTemp[n++] = this.vertices[i];

				    var pTemp = org.jmol.util.ArrayUtil.newInt2 (nPoly);
				    nPoly = 0;
				    for (var i = 0; i < this.polygonCount; i++) if (this.polygonIndexes[i] != null) {
					for (var j = 0; j < 3; j++) this.polygonIndexes[i][j] = map[this.polygonIndexes[i][j]];

					pTemp[nPoly++] = this.polygonIndexes[i];
				    }
				    this.vertices = vTemp;
				    this.vertexCount = n;
				    this.polygonIndexes = pTemp;
				    this.polygonCount = nPoly;
				}}, "~N,org.jmol.util.Point4f,~A,java.util.List,~A,org.jmol.util.BitSet,org.jmol.util.MeshSurface,~B,~B,~N,~B");
	c$.setPoint = Clazz.defineMethod (c$, "setPoint", 
					  ($fz = function (fracs, i, i0, i1) {
					      return (fracs[i] == 0 ? i0 : fracs[i] == 1 ? i1 : -1);
					  }, $fz.isPrivate = true, $fz), "~A,~N,~N,~N");
	Clazz.defineMethod (c$, "getDE", 
			    ($fz = function (fracs, fD, i1, i2, i3, toss23) {
				this.iD = org.jmol.util.MeshSurface.setPoint (fracs, fD, i1, i2);
				this.iE = org.jmol.util.MeshSurface.setPoint (fracs, 1 - fD, i1, i3);
				if (this.iD == i1 && this.iE == i1) {
				    this.doClear = toss23;
				    this.doCap = false;
				    return false;
				}if (this.iD == i2 && this.iE == i3) {
				    this.doClear = !toss23;
				    return false;
				}if (this.iD == i1 || this.iE == i1) {
				    this.doClear = toss23;
				    if (this.iD < 0) {
					this.iD = (toss23 ? i2 : i3);
				    } else if (this.iE < 0) {
					this.iE = (toss23 ? i3 : i2);
				    }return this.doCap;
				}this.doGhost = false;
				return true;
			    }, $fz.isPrivate = true, $fz), "~A,~N,~N,~N,~N,~B");
	c$.checkSlab = Clazz.defineMethod (c$, "checkSlab", 
					   ($fz = function (tokType, v, val, distance, plane, ptCenters, bs) {
					       var d;
					       switch (tokType) {
					       case 3:
						   return (bs.get (Clazz.floatToInt (val)) ? 1 : -1);
					       case 32:
						   d = distance - val;
						   break;
					       case 64:
						   d = val - distance;
						   break;
					       case 135266319:
						   d = org.jmol.util.Measure.distanceToPlane (plane, v);
						   break;
					       case 1276118018:
						   d = org.jmol.util.MeshSurface.minDist (v, ptCenters) - distance;
						   break;
					       default:
						   d = -org.jmol.util.MeshSurface.minDist (v, ptCenters) - distance;
						   break;
					       }
					       return (Math.abs (d) < 0.0001 ? 0 : d);
					   }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3f,~N,~N,org.jmol.util.Point4f,~A,org.jmol.util.BitSet");
	c$.minDist = Clazz.defineMethod (c$, "minDist", 
					 ($fz = function (pt, ptCenters) {
					     var dmin = 2147483647;
					     for (var i = ptCenters.length; --i >= 0; ) {
						 var d = ptCenters[i].distance (pt);
						 if (d < dmin) dmin = d;
					     }
					     return dmin;
					 }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,~A");
	Clazz.defineMethod (c$, "interpolateSphere", 
			    ($fz = function (v1, v2, d1, d2, absD, val1, val2, values, fracs, i) {
				return org.jmol.util.MeshSurface.interpolateFraction (v1, v2, org.jmol.util.MeshSurface.getSphericalInterpolationFraction (absD, d1, d2, v1.distance (v2)), val1, val2, values, fracs, i);
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,org.jmol.util.Point3f,~N,~N,~N,~N,~N,~A,~A,~N");
	c$.interpolatePoint = Clazz.defineMethod (c$, "interpolatePoint", 
						  ($fz = function (v1, v2, d1, d2, val1, val2, values, fracs, i) {
						      return org.jmol.util.MeshSurface.interpolateFraction (v1, v2, d1 / (d1 + d2), val1, val2, values, fracs, i);
						  }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,org.jmol.util.Point3f,~N,~N,~N,~N,~A,~A,~N");
	c$.interpolateFraction = Clazz.defineMethod (c$, "interpolateFraction", 
						     ($fz = function (v1, v2, f, val1, val2, values, fracs, i) {
							 if (f < 0.0001) f = 0;
							 else if (f > 0.9999) f = 1;
							 fracs[i] = f;
							 values[i] = (val2 - val1) * f + val1;
							 return org.jmol.util.Point3f.new3 (v1.x + (v2.x - v1.x) * f, v1.y + (v2.y - v1.y) * f, v1.z + (v2.z - v1.z) * f);
						     }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,org.jmol.util.Point3f,~N,~N,~N,~A,~A,~N");
	c$.getSphericalInterpolationFraction = Clazz.defineMethod (c$, "getSphericalInterpolationFraction", 
								   function (r, valueA, valueB, d) {
								       var ra = Math.abs (r + valueA) / d;
								       var rb = Math.abs (r + valueB) / d;
								       r /= d;
								       var ra2 = ra * ra;
								       var q = ra2 - rb * rb + 1;
								       var p = 4 * (r * r - ra2);
								       var factor = (ra < rb ? 1 : -1);
								       return (((q) + factor * Math.sqrt (q * q + p)) / 2);
								   }, "~N,~N,~N,~N");
	Clazz.defineStatics (c$,
			     "SEED_COUNT", 25);
    });
    // 
    //// java\util\regex\MatchResult.js 
    // 
    ﻿$_J("java.util.regex");
    $_I(java.util.regex,"MatchResult");
    // 
    //// java\util\regex\Matcher.js 
    // 
    ﻿$_J("java.util.regex");
    $_L(["java.util.regex.MatchResult"],"java.util.regex.Matcher",["java.lang.IllegalArgumentException","$.IndexOutOfBoundsException","$.NullPointerException","$.StringBuffer"],function(){
	c$=$_C(function(){
	    this.pat=null;
	    this.string=null;
	    this.leftBound=-1;
	    this.rightBound=-1;
	    this.appendPos=0;
	    this.replacement=null;
	    this.processedRepl=null;
	    this.replacementParts=null;
	    this.results=null;
	    $_Z(this,arguments);
	},java.util.regex,"Matcher",null,java.util.regex.MatchResult);
	$_M(c$,"appendReplacement",
	    function(sb,replacement){
		this.processedRepl=this.processReplacement(replacement);
		sb.append(this.string.subSequence(this.appendPos,this.start()));
		sb.append(this.processedRepl);
		this.appendPos=this.end();
		return this;
	    },"StringBuffer,~S");
	$_M(c$,"processReplacement",
	    ($fz=function(replacement){
		if(this.replacement!=null&&this.replacement.equals(replacement)){
		    if(this.replacementParts==null){
			return this.processedRepl;
		    }else{
			var sb=new StringBuffer();
			for(var i=0;i<this.replacementParts.length;i++){
			    sb.append(this.replacementParts[i]);
			}
			return sb.toString();
		    }}else{
			this.replacement=replacement;
			var repl=replacement.toCharArray();
			var res=new StringBuffer();
			this.replacementParts=null;
			var index=0;
			var replacementPos=0;
			var nextBackSlashed=false;
			while(index<repl.length){
			    if((repl[index]).charCodeAt(0)==('\\').charCodeAt(0)&&!nextBackSlashed){
				nextBackSlashed=true;
				index++;
			    }if(nextBackSlashed){
				res.append(repl[index]);
				nextBackSlashed=false;
			    }else{
				if((repl[index]).charCodeAt(0)==('$').charCodeAt(0)){
				    if(this.replacementParts==null){
					this.replacementParts=new Array(0);
				    }try{
					var gr=Integer.parseInt(String.instantialize(repl,++index,1));
					if(replacementPos!=res.length()){
					    this.replacementParts[this.replacementParts.length]=res.subSequence(replacementPos,res.length());
					    replacementPos=res.length();
					}this.replacementParts[this.replacementParts.length]=(($_D("java.util.regex.Matcher$1")?0:java.util.regex.Matcher.$Matcher$1$()),$_N(java.util.regex.Matcher$1,this,null));
					var group=this.group(gr);
					replacementPos+=group.length;
					res.append(group);
				    }catch(e$$){
					if($_O(e$$,IndexOutOfBoundsException)){
					    var iob=e$$;
					    {
						throw iob;
					    }
					}else if($_O(e$$,Exception)){
					    var e=e$$;
					    {
						throw new IllegalArgumentException("Illegal regular expression format");
					    }
					}else{
					    throw e$$;
					}
				    }
				}else{
				    res.append(repl[index]);
				}}index++;
			}
			if(this.replacementParts!=null&&replacementPos!=res.length()){
			    this.replacementParts[this.replacementParts.length]=res.subSequence(replacementPos,res.length());
			}return res.toString();
		    }},$fz.isPrivate=true,$fz),"~S");
	$_M(c$,"reset",
	    function(newSequence){
		if(newSequence==null){
		    throw new NullPointerException("Empty new sequence!");
		}this.string=newSequence;
		return this.reset();
	    },"CharSequence");
	$_M(c$,"reset",
	    function(){
		this.leftBound=0;
		this.rightBound=this.string.length();
		this.appendPos=0;
		this.replacement=null;
		{
		    var flags=""+(this.pat.regexp.ignoreCase?"i":"")
			+(this.pat.regexp.global?"g":"")
			+(this.pat.regexp.multiline?"m":"");
		    this.pat.regexp=new RegExp(this.pat.regexp.source,flags);
		}return this;
	    });
	$_M(c$,"region",
	    function(leftBound,rightBound){
		if(leftBound>rightBound||leftBound<0||rightBound<0||leftBound>this.string.length()||rightBound>this.string.length()){
		    throw new IndexOutOfBoundsException(leftBound+" is out of bound of "+rightBound);
		}this.leftBound=leftBound;
		this.rightBound=rightBound;
		this.results=null;
		this.appendPos=0;
		this.replacement=null;
		return this;
	    },"~N,~N");
	$_M(c$,"appendTail",
	    function(sb){
		return sb.append(this.string.subSequence(this.appendPos,this.string.length()));
	    },"StringBuffer");
	$_M(c$,"replaceFirst",
	    function(replacement){
		this.reset();
		if(this.find()){
		    var sb=new StringBuffer();
		    this.appendReplacement(sb,replacement);
		    return this.appendTail(sb).toString();
		}return this.string.toString();
	    },"~S");
	$_M(c$,"replaceAll",
	    function(replacement){
		var sb=new StringBuffer();
		this.reset();
		while(this.find()){
		    this.appendReplacement(sb,replacement);
		}
		return this.appendTail(sb).toString();
	    },"~S");
	$_M(c$,"pattern",
	    function(){
		return this.pat;
	    });
	$_M(c$,"group",
	    function(groupIndex){
		if(this.results==null||groupIndex<0||groupIndex>this.results.length){
		    return null;
		}return this.results[groupIndex];
	    },"~N");
	$_M(c$,"group",
	    function(){
		return this.group(0);
	    });
	$_M(c$,"find",
	    function(startIndex){
		var stringLength=this.string.length();
		if(startIndex<0||startIndex>stringLength)throw new IndexOutOfBoundsException("Out of bound "+startIndex);
		startIndex=this.findAt(startIndex);
		return false;
	    },"~N");
	$_M(c$,"findAt",
	    ($fz=function(startIndex){
		return-1;
	    },$fz.isPrivate=true,$fz),"~N");
	$_M(c$,"find",
	    function(){
		{
		    this.results=this.pat.regexp.exec(this.string.subSequence(this.leftBound,this.rightBound));
		}return(this.results!=null);
	    });
	$_M(c$,"start",
	    function(groupIndex){
		var beginningIndex=0;
		{
		    beginningIndex=this.pat.regexp.lastIndex;
		}beginningIndex-=this.results[0].length;
		return beginningIndex;
	    },"~N");
	$_M(c$,"end",
	    function(groupIndex){
		{
		    return this.pat.regexp.lastIndex;
		}return-1;
	    },"~N");
	$_M(c$,"matches",
	    function(){
		return this.find();
	    });
	c$.quoteReplacement=$_M(c$,"quoteReplacement",
				function(string){
				    if(string.indexOf('\\') < 0 && string.indexOf ('$')<0)return string;
				    var res=new StringBuffer(string.length*2);
				    var ch;
				    var len=string.length;
				    for(var i=0;i<len;i++){
					switch(ch=string.charAt(i)){
					case'$':
					    res.append('\\');
					    res.append('$');
					    break;
					case'\\':
					    res.append('\\');
					    res.append('\\');
					    break;
					default:
					    res.append(ch);
					}
				    }
				    return res.toString();
				},"~S");
	$_M(c$,"lookingAt",
	    function(){
		return false;
	    });
	$_M(c$,"start",
	    function(){
		return this.start(0);
	    });
	$_V(c$,"groupCount",
	    function(){
		return this.results==null?0:this.results.length;
	    });
	$_M(c$,"end",
	    function(){
		return this.end(0);
	    });
	$_M(c$,"toMatchResult",
	    function(){
		return this;
	    });
	$_M(c$,"useAnchoringBounds",
	    function(value){
		return this;
	    },"~B");
	$_M(c$,"hasAnchoringBounds",
	    function(){
		return false;
	    });
	$_M(c$,"useTransparentBounds",
	    function(value){
		return this;
	    },"~B");
	$_M(c$,"hasTransparentBounds",
	    function(){
		return false;
	    });
	$_M(c$,"regionStart",
	    function(){
		return this.leftBound;
	    });
	$_M(c$,"regionEnd",
	    function(){
		return this.rightBound;
	    });
	$_M(c$,"requireEnd",
	    function(){
		return false;
	    });
	$_M(c$,"hitEnd",
	    function(){
		return false;
	    });
	$_M(c$,"usePattern",
	    function(pat){
		if(pat==null){
		    throw new IllegalArgumentException("Empty pattern!");
		}this.pat=pat;
		this.results=null;
		return this;
	    },"java.util.regex.Pattern");
	$_K(c$,
	    function(pat,cs){
		this.pat=pat;
		this.string=cs;
		this.leftBound=0;
		this.rightBound=this.string.toString().length;
	    },"java.util.regex.Pattern,CharSequence");
	c$.$Matcher$1$=function(){
	    $_H();
	    c$=$_C(function(){
		$_B(this,arguments);
		this.grN=0;
		$_Z(this,arguments);
	    },java.util.regex,"Matcher$1");
	    $_Y(c$,function(){
		this.grN=gr;
	    });
	    $_V(c$,"toString",
		function(){
		    return this.b$["java.util.regex.Matcher"].group(this.grN);
		});
	    c$=$_P();
	};
	$_S(c$,
	    "MODE_FIND",1,
	    "MODE_MATCH",2);
    });
    // 
    //// org\jmol\util\Rectangle.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    c$ = Clazz.decorateAsClass (function () {
	this.x = 0;
	this.y = 0;
	this.width = 0;
	this.height = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.util, "Rectangle");
    Clazz.defineMethod (c$, "contains", 
			function (X, Y) {
			    return (X >= this.x && Y >= this.y && X - this.x < this.width && Y - this.y < this.height);
			}, "~N,~N");
    // 
    //// org\jmol\viewer\MouseState.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    c$ = Clazz.decorateAsClass (function () {
	this.x = -1000;
	this.y = -1000;
	this.modifiers = 0;
	this.time = -1;
	Clazz.instantialize (this, arguments);
    }, org.jmol.viewer, "MouseState");
    Clazz.makeConstructor (c$, 
			   function () {
			   });
    Clazz.defineMethod (c$, "set", 
			function (time, x, y, modifiers) {
			    this.time = time;
			    this.x = x;
			    this.y = y;
			    this.modifiers = modifiers;
			}, "~N,~N,~N,~N");
    Clazz.defineMethod (c$, "setCurrent", 
			function (current, why) {
			    this.time = current.time;
			    this.x = current.x;
			    this.y = current.y;
			    this.modifiers = current.modifiers;
			}, "org.jmol.viewer.MouseState,~N");
    Clazz.defineMethod (c$, "inRange", 
			function (xyRange, x, y) {
			    return (Math.abs (this.x - x) <= xyRange && Math.abs (this.y - y) <= xyRange);
			}, "~N,~N,~N");
    Clazz.defineMethod (c$, "check", 
			function (xyRange, x, y, modifiers, time, delayMax) {
			    return (this.inRange (xyRange, x, y) && this.modifiers == modifiers && (time - this.time) < delayMax);
			}, "~N,~N,~N,~N,~N,~N");
    Clazz.defineMethod (c$, "is", 
			function (current) {
			    return (current.x == this.x && current.y == this.y && current.time == this.time);
			}, "org.jmol.viewer.MouseState");
    // 
    //// org\jmol\viewer\ActionManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.util.Rectangle", "org.jmol.viewer.MouseState"], "org.jmol.viewer.ActionManager", ["java.lang.Character", "$.Float", "java.util.ArrayList", "$.Hashtable", "org.jmol.i18n.GT", "org.jmol.modelset.MeasurementPending", "org.jmol.script.ScriptEvaluator", "org.jmol.thread.HoverWatcherThread", "org.jmol.util.BitSetUtil", "$.Escape", "$.Logger", "$.Point3f", "$.Point3fi", "$.TextFormat", "org.jmol.viewer.binding.Binding", "$.DragBinding", "$.JmolBinding", "$.PfaatBinding", "$.RasmolBinding"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.binding = null;
	    this.jmolBinding = null;
	    this.pfaatBinding = null;
	    this.dragBinding = null;
	    this.rasmolBinding = null;
	    this.predragBinding = null;
	    this.hoverWatcherThread = null;
	    this.haveMultiTouchInput = false;
	    this.xyRange = 0;
	    this.gestureSwipeFactor = 1.0;
	    this.mouseDragFactor = 1.0;
	    this.mouseWheelFactor = 1.15;
	    this.current = null;
	    this.moved = null;
	    this.clicked = null;
	    this.pressed = null;
	    this.dragged = null;
	    this.pressedCount = 0;
	    this.pressedAtomIndex = 0;
	    this.clickedCount = 0;
	    this.drawMode = false;
	    this.labelMode = false;
	    this.dragSelectedMode = false;
	    this.measuresEnabled = true;
	    this.hoverActive = false;
	    this.measurementPending = null;
	    this.dragAtomIndex = -1;
	    this.rubberbandSelectionMode = false;
	    this.rectRubber = null;
	    this.isAltKeyReleased = true;
	    this.keyProcessing = false;
	    this.isMultiTouchClient = false;
	    this.isMultiTouchServer = false;
	    this.haveSelection = false;
	    this.measurementQueued = null;
	    this.pickingStyle = 0;
	    this.atomPickingMode = 1;
	    this.pickingStyleSelect = 0;
	    this.pickingStyleMeasure = 5;
	    this.rootPickingStyle = 0;
	    this.pickAtomAssignType = "C";
	    this.pickBondAssignType = 'p';
	    this.bondPickingMode = 0;
	    this.isPickAtomAssignCharge = false;
	    this.selectionWorking = false;
	    this.eval = null;
	    if (!Clazz.isClassDefined ("org.jmol.viewer.ActionManager.MotionPoint")) {
		org.jmol.viewer.ActionManager.$ActionManager$MotionPoint$ ();
	    }
	    this.dragGesture = null;
	    if (!Clazz.isClassDefined ("org.jmol.viewer.ActionManager.Gesture")) {
		org.jmol.viewer.ActionManager.$ActionManager$Gesture$ ();
	    }
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "ActionManager");
	Clazz.prepareFields (c$, function () {
	    this.current =  new org.jmol.viewer.MouseState ();
	    this.moved =  new org.jmol.viewer.MouseState ();
	    this.clicked =  new org.jmol.viewer.MouseState ();
	    this.pressed =  new org.jmol.viewer.MouseState ();
	    this.dragged =  new org.jmol.viewer.MouseState ();
	    this.rectRubber =  new org.jmol.util.Rectangle ();
	    this.dragGesture = Clazz.innerTypeInstance (org.jmol.viewer.ActionManager.Gesture, this, null, 20);
	});
	c$.newAction = Clazz.defineMethod (c$, "newAction", 
					   function (i, name, info) {
					       org.jmol.viewer.ActionManager.actionInfo[i] = info;
					       org.jmol.viewer.ActionManager.actionNames[i] = name;
					   }, "~N,~S,~S");
	c$.getActionName = Clazz.defineMethod (c$, "getActionName", 
					       function (i) {
						   return (i < org.jmol.viewer.ActionManager.actionNames.length ? org.jmol.viewer.ActionManager.actionNames[i] : null);
					       }, "~N");
	c$.getActionFromName = Clazz.defineMethod (c$, "getActionFromName", 
						   function (name) {
						       for (var i = 0; i < org.jmol.viewer.ActionManager.actionNames.length; i++) if (org.jmol.viewer.ActionManager.actionNames[i].equalsIgnoreCase (name)) return i;

						       return -1;
						   }, "~S");
	Clazz.defineMethod (c$, "getBindingInfo", 
			    function (qualifiers) {
				return this.binding.getBindingInfo (org.jmol.viewer.ActionManager.actionInfo, qualifiers);
			    }, "~S");
	c$.getPickingModeName = Clazz.defineMethod (c$, "getPickingModeName", 
						    function (pickingMode) {
							return (pickingMode < 0 || pickingMode >= org.jmol.viewer.ActionManager.pickingModeNames.length ? "off" : org.jmol.viewer.ActionManager.pickingModeNames[pickingMode]);
						    }, "~N");
	c$.getPickingMode = Clazz.defineMethod (c$, "getPickingMode", 
						function (str) {
						    for (var i = org.jmol.viewer.ActionManager.pickingModeNames.length; --i >= 0; ) if (str.equalsIgnoreCase (org.jmol.viewer.ActionManager.pickingModeNames[i])) return i;

						    return -1;
						}, "~S");
	c$.getPickingStyleName = Clazz.defineMethod (c$, "getPickingStyleName", 
						     function (pickingStyle) {
							 return (pickingStyle < 0 || pickingStyle >= org.jmol.viewer.ActionManager.pickingStyleNames.length ? "toggle" : org.jmol.viewer.ActionManager.pickingStyleNames[pickingStyle]);
						     }, "~N");
	c$.getPickingStyle = Clazz.defineMethod (c$, "getPickingStyle", 
						 function (str) {
						     for (var i = org.jmol.viewer.ActionManager.pickingStyleNames.length; --i >= 0; ) if (str.equalsIgnoreCase (org.jmol.viewer.ActionManager.pickingStyleNames[i])) return i;

						     return -1;
						 }, "~S");
	Clazz.defineMethod (c$, "getMouseInfo", 
			    function () {
				var info =  new java.util.Hashtable ();
				var vb =  new java.util.ArrayList ();
				var e = this.binding.getBindings ().values ().iterator ();
				while (e.hasNext ()) {
				    var obj = e.next ();
				    if (Clazz.instanceOf (obj, Boolean)) continue;
				    if (org.jmol.util.Escape.isAI (obj)) {
					var binding = obj;
					obj = [org.jmol.viewer.binding.Binding.getMouseActionName (binding[0], false), org.jmol.viewer.ActionManager.getActionName (binding[1])];
				    }vb.add (obj);
				}
				info.put ("bindings", vb);
				info.put ("bindingName", this.binding.getName ());
				info.put ("actionNames", org.jmol.viewer.ActionManager.actionNames);
				info.put ("actionInfo", org.jmol.viewer.ActionManager.actionInfo);
				info.put ("bindingInfo", org.jmol.util.TextFormat.split (this.getBindingInfo (null), '\n'));
				return info;
			    });
	Clazz.defineMethod (c$, "setViewer", 
			    function (viewer, commandOptions) {
				this.viewer = viewer;
				this.setBinding (this.jmolBinding =  new org.jmol.viewer.binding.JmolBinding ());
			    }, "org.jmol.viewer.Viewer,~S");
	Clazz.defineMethod (c$, "processEvent", 
			    function (groupID, eventType, touchID, iData, pt, time) {
			    }, "~N,~N,~N,~N,org.jmol.util.Point3f,~N");
	Clazz.defineMethod (c$, "isBound", 
			    function (gesture, action) {
				return this.binding.isBound (gesture, action);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "bindAction", 
			    function (desc, name, range1, range2) {
				var jmolAction = org.jmol.viewer.ActionManager.getActionFromName (name);
				var mouseAction = org.jmol.viewer.binding.Binding.getMouseAction (desc);
				if (mouseAction == 0) return;
				if (jmolAction >= 0) {
				    this.binding.bind (mouseAction, jmolAction);
				} else {
				    this.binding.bind (mouseAction, name);
				}}, "~S,~S,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "clearBindings", 
			    function () {
				this.setBinding (this.jmolBinding =  new org.jmol.viewer.binding.JmolBinding ());
				this.pfaatBinding = null;
				this.dragBinding = null;
				this.rasmolBinding = null;
			    });
	Clazz.defineMethod (c$, "unbindAction", 
			    function (desc, name) {
				if (desc == null && name == null) {
				    this.clearBindings ();
				    return;
				}var jmolAction = org.jmol.viewer.ActionManager.getActionFromName (name);
				var mouseAction = org.jmol.viewer.binding.Binding.getMouseAction (desc);
				if (jmolAction >= 0) this.binding.unbind (mouseAction, jmolAction);
				else if (mouseAction != 0) this.binding.unbind (mouseAction, name);
				if (name == null) this.binding.unbindUserAction (desc);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "setGestureSwipeFactor", 
			    function (factor) {
				this.gestureSwipeFactor = factor;
			    }, "~N");
	Clazz.defineMethod (c$, "setMouseDragFactor", 
			    function (factor) {
				this.mouseDragFactor = factor;
			    }, "~N");
	Clazz.defineMethod (c$, "setMouseWheelFactor", 
			    function (factor) {
				this.mouseWheelFactor = factor;
			    }, "~N");
	Clazz.defineMethod (c$, "setCurrent", 
			    function (time, x, y, mods) {
				this.hoverOff ();
				this.current.set (time, x, y, mods);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "getCurrentX", 
			    function () {
				return this.current.x;
			    });
	Clazz.defineMethod (c$, "getCurrentY", 
			    function () {
				return this.current.y;
			    });
	Clazz.defineMethod (c$, "setMouseMode", 
			    function () {
				this.drawMode = this.labelMode = false;
				this.dragSelectedMode = this.viewer.getDragSelected ();
				this.measuresEnabled = !this.dragSelectedMode;
				if (!this.dragSelectedMode) switch (this.atomPickingMode) {
				default:
				    return;
				case 32:
				    this.measuresEnabled = !this.isPickAtomAssignCharge;
				    return;
				case 4:
				    this.drawMode = true;
				    this.measuresEnabled = false;
				    break;
				case 2:
				    this.labelMode = true;
				    this.measuresEnabled = false;
				    break;
				case 9:
				    this.measuresEnabled = false;
				    break;
				case 19:
				case 22:
				case 20:
				case 21:
				    this.measuresEnabled = false;
				    return;
				}
				this.exitMeasurementMode ();
			    });
	Clazz.defineMethod (c$, "clearMouseInfo", 
			    function () {
				this.pressedCount = this.clickedCount = 0;
				this.dragGesture.setAction (0, 0);
				this.exitMeasurementMode ();
			    });
	Clazz.defineMethod (c$, "isMTClient", 
			    function () {
				return this.isMultiTouchClient;
			    });
	Clazz.defineMethod (c$, "isMTServer", 
			    function () {
				return this.isMultiTouchServer;
			    });
	Clazz.defineMethod (c$, "dispose", 
			    function () {
				this.clear ();
			    });
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.startHoverWatcher (false);
				if (this.predragBinding != null) this.binding = this.predragBinding;
				this.viewer.setPickingMode (null, 1);
				this.viewer.setPickingStyle (null, this.rootPickingStyle);
				this.eval = null;
				this.isAltKeyReleased = true;
			    });
	Clazz.defineMethod (c$, "startHoverWatcher", 
			    function (isStart) {
				if (this.viewer.isPreviewOnly ()) return;
				try {
				    if (isStart) {
					if (this.hoverWatcherThread != null) return;
					this.current.time = -1;
					this.hoverWatcherThread =  new org.jmol.thread.HoverWatcherThread (this, this.current, this.moved, this.viewer);
				    } else {
					if (this.hoverWatcherThread == null) return;
					this.current.time = -1;
					this.hoverWatcherThread.interrupt ();
					this.hoverWatcherThread = null;
				    }} catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					} else {
					    throw e;
					}
				    }
			    }, "~B");
	Clazz.defineMethod (c$, "setModeMouse", 
			    function (modeMouse) {
				if (modeMouse == -1) {
				    this.startHoverWatcher (false);
				}}, "~N");
	Clazz.defineMethod (c$, "keyPressed", 
			    function (key, modifiers) {
				if (this.keyProcessing) return;
				this.hoverOff ();
				this.keyProcessing = true;
				switch (key) {
				case 18:
				    if (this.dragSelectedMode && this.isAltKeyReleased) this.viewer.moveSelected (-2147483648, 0, -2147483648, -2147483648, -2147483648, null, false, false);
				    this.isAltKeyReleased = false;
				    this.moved.modifiers |= 8;
				    break;
				case 16:
				    this.dragged.modifiers |= 1;
				    this.moved.modifiers |= 1;
				    break;
				case 17:
				    this.moved.modifiers |= 2;
				}
				var action = 16 + 256 + this.moved.modifiers;
				if (!this.labelMode && !this.binding.isUserAction (action) && !this.isSelectAction (action)) this.checkMotionRotateZoom (action, this.current.x, 0, 0, false);
				if (this.viewer.getNavigationMode ()) {
				    switch (key) {
				    case 38:
				    case 40:
				    case 37:
				    case 39:
				    case 32:
				    case 46:
					this.viewer.navigate (key, modifiers);
					break;
				    }
				}this.keyProcessing = false;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "keyReleased", 
			    function (key) {
				switch (key) {
				case 18:
				    if (this.dragSelectedMode) this.viewer.moveSelected (2147483647, 0, -2147483648, -2147483648, -2147483648, null, false, false);
				    this.isAltKeyReleased = true;
				    this.moved.modifiers &= -9;
				    break;
				case 16:
				    this.moved.modifiers &= -2;
				    break;
				case 17:
				    this.moved.modifiers &= -3;
				}
				if (this.moved.modifiers == 0) this.viewer.setCursor (0);
				if (!this.viewer.getNavigationMode ()) return;
				switch (key) {
				case 38:
				case 40:
				case 37:
				case 39:
				    this.viewer.navigate (0, 0);
				    break;
				}
			    }, "~N");
	Clazz.defineMethod (c$, "mouseEntered", 
			    function (time, x, y) {
				this.setCurrent (time, x, y, 0);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "mouseExited", 
			    function (time, x, y) {
				this.setCurrent (time, x, y, 0);
				this.exitMeasurementMode ();
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "mouseAction", 
			    function (action, time, x, y, count, modifiers) {
				if (!this.viewer.getMouseEnabled ()) return;
				switch (action) {
				case 0:
				    this.setCurrent (time, x, y, modifiers);
				    this.moved.setCurrent (this.current, 0);
				    if (this.measurementPending != null || this.hoverActive) this.checkPointOrAtomClicked (x, y, 0, 0, time, false, 0);
				    else if (this.isZoomArea (x)) this.checkMotionRotateZoom (org.jmol.viewer.binding.Binding.getMouseAction (1, 16), 0, 0, 0, false);
				    else if (this.viewer.getCursor () == 5) this.viewer.setCursor (0);
				    return;
				case 3:
				    if (this.viewer.isApplet () && !this.viewer.hasFocus ()) return;
				    this.setCurrent (time, this.current.x, this.current.y, modifiers);
				    this.checkAction (org.jmol.viewer.binding.Binding.getMouseAction (0, modifiers), this.current.x, this.current.y, 0, y, time, 3);
				    return;
				case 2:
				    this.setMouseMode ();
				    this.setCurrent (time, x, y, modifiers);
				    this.clickedCount = (count > 1 ? count : this.clicked.check (this.xyRange, x, y, modifiers, time, 700) ? this.clickedCount + 1 : 1);
				    this.clicked.setCurrent (this.current, 2);
				    this.viewer.setFocus ();
				    if (this.atomPickingMode != 9 && this.isBound (org.jmol.viewer.binding.Binding.getMouseAction (-2147483648, modifiers), 23)) return;
				    this.checkPointOrAtomClicked (x, y, modifiers, this.clickedCount, time, false, 2);
				    return;
				case 1:
				    this.setMouseMode ();
				    var deltaX = x - this.dragged.x;
				    var deltaY = y - this.dragged.y;
				    this.setCurrent (time, x, y, modifiers);
				    this.dragged.setCurrent (this.current, 1);
				    if (this.atomPickingMode != 32) this.exitMeasurementMode ();
				    action = org.jmol.viewer.binding.Binding.getMouseAction (this.pressedCount, modifiers);
				    this.dragGesture.add (action, x, y, time);
				    this.checkAction (action, x, y, deltaX, deltaY, time, 1);
				    return;
				case 4:
				    this.setMouseMode ();
				    this.setCurrent (time, x, y, modifiers);
				    this.pressedCount = (this.pressed.check (this.xyRange, x, y, modifiers, time, 700) ? this.pressedCount + 1 : 1);
				    this.pressed.setCurrent (this.current, 4);
				    this.dragged.setCurrent (this.current, 4);
				    this.viewer.setFocus ();
				    var isSelectAndDrag = this.isBound (org.jmol.viewer.binding.Binding.getMouseAction (-2147483648, modifiers), 23);
				    action = org.jmol.viewer.binding.Binding.getMouseAction (this.pressedCount, modifiers);
				    this.dragGesture.setAction (action, time);
				    if (org.jmol.viewer.binding.Binding.getModifiers (action) != 0) {
					action = this.viewer.notifyMouseClicked (x, y, action, 4);
					if (action == 0) return;
				    }this.pressedAtomIndex = 2147483647;
				    if (this.drawMode && (this.isBound (action, 32) || this.isBound (action, 31)) || this.labelMode && this.isBound (action, 30)) {
					this.viewer.checkObjectDragged (-2147483648, 0, x, y, action);
					return;
				    }this.checkUserAction (action, x, y, 0, 0, time, 4);
				    var isBound = false;
				    switch (this.atomPickingMode) {
				    case 32:
					isBound = this.isBound (action, 43);
					break;
				    case 28:
					isBound = this.isBound (action, 27) || this.isBound (action, 24);
					break;
				    case 26:
				    case 27:
					isBound = this.isBound (action, 27) || this.isBound (action, 25) || this.isBound (action, 24);
					break;
				    case 29:
					isBound = this.isBound (action, 28) || this.isBound (action, 24);
					break;
				    case 30:
					isBound = this.isBound (action, 29) || this.isBound (action, 25) || this.isBound (action, 24);
					break;
				    }
				    if (isBound) {
					this.dragAtomIndex = this.viewer.findNearestAtomIndexMovable (x, y, true);
					if (this.dragAtomIndex >= 0 && (this.atomPickingMode == 32 || this.atomPickingMode == 31) && this.viewer.isAtomAssignable (this.dragAtomIndex)) {
					    this.enterMeasurementMode (this.dragAtomIndex);
					    this.measurementPending.addPoint (this.dragAtomIndex, null, false);
					}return;
				    }if (this.isBound (action, 14)) {
					var type = 'j';
					if (this.viewer.getModelkitMode ()) {
					    var t = this.viewer.checkObjectClicked (x, y, org.jmol.viewer.binding.Binding.getMouseAction (1, 16));
					    type = (t != null && "bond".equals (t.get ("type")) ? 'b' : this.viewer.findNearestAtomIndex (x, y) >= 0 ? 'a' : 'm');
					}this.viewer.popupMenu (x, y, type);
					return;
				    }if (this.dragSelectedMode) {
					this.haveSelection = true;
					if (isSelectAndDrag) {
					    this.haveSelection = (this.viewer.findNearestAtomIndexMovable (x, y, true) >= 0);
					}if (!this.haveSelection) return;
					if (this.isBound (action, 22) || this.isBound (action, 24)) this.viewer.moveSelected (-2147483648, 0, -2147483648, -2147483648, -2147483648, null, false, false);
					return;
				    }if (this.viewer.useArcBall ()) this.viewer.rotateArcBall (x, y, 0);
				    this.checkMotionRotateZoom (action, x, 0, 0, true);
				    return;
				case 5:
				    this.setCurrent (time, x, y, modifiers);
				    this.viewer.spinXYBy (0, 0, 0);
				    var dragRelease = !this.pressed.check (this.xyRange, x, y, modifiers, time, 9223372036854775807);
				    this.viewer.setInMotion (false);
				    this.viewer.setCursor (0);
				    action = org.jmol.viewer.binding.Binding.getMouseAction (this.pressedCount, modifiers);
				    this.dragGesture.add (action, x, y, time);
				    if (dragRelease) this.viewer.setRotateBondIndex (-2147483648);
				    if (this.dragAtomIndex >= 0) {
					if (this.atomPickingMode == 29 || this.atomPickingMode == 30) this.minimize (true);
				    }if (this.atomPickingMode == 32 && this.isBound (action, 43)) {
					if (this.measurementPending == null || this.dragAtomIndex < 0) return;
					if (this.measurementPending.getCount () == 2) {
					    this.viewer.undoMoveActionClear (-1, 4146, true);
					    this.viewer.script ("assign connect " + this.measurementPending.getMeasurementScript (" ", false));
					} else if (this.pickAtomAssignType.equals ("Xx")) {
					    this.exitMeasurementMode ();
					    this.viewer.refresh (3, "bond dropped");
					} else {
					    if (this.pressed.inRange (this.xyRange, this.dragged.x, this.dragged.y)) {
						var s = "assign atom ({" + this.dragAtomIndex + "}) \"" + this.pickAtomAssignType + "\"";
						if (this.isPickAtomAssignCharge) {
						    s += ";{atomindex=" + this.dragAtomIndex + "}.label='%C'; ";
						    this.viewer.undoMoveActionClear (this.dragAtomIndex, 4, true);
						} else {
						    this.viewer.undoMoveActionClear (-1, 4146, true);
						}this.viewer.script (s);
					    } else if (!this.isPickAtomAssignCharge) {
						this.viewer.undoMoveActionClear (-1, 4146, true);
						var a = this.viewer.getModelSet ().atoms[this.dragAtomIndex];
						if (a.getElementNumber () == 1) {
						    this.viewer.script ("assign atom ({" + this.dragAtomIndex + "}) \"X\"");
						} else {
						    var ptNew = org.jmol.util.Point3f.new3 (x, y, a.screenZ);
						    this.viewer.unTransformPoint (ptNew, ptNew);
						    this.viewer.script ("assign atom ({" + this.dragAtomIndex + "}) \"" + this.pickAtomAssignType + "\" " + org.jmol.util.Escape.escapePt (ptNew));
						}}}this.exitMeasurementMode ();
					return;
				    }this.dragAtomIndex = -1;
				    var isRbAction = this.isRubberBandSelect (action);
				    if (isRbAction) {
					var bs = this.viewer.findAtomsInRectangle (this.rectRubber);
					if (bs.length () > 0) {
					    var s = org.jmol.util.Escape.escape (bs);
					    if (this.isBound (action, 20)) this.viewer.script ("selectionHalos on;select selected or " + s);
					    else if (this.isBound (action, 19)) this.viewer.script ("selectionHalos on;select selected and not " + s);
					    else this.viewer.script ("selectionHalos on;select selected tog " + s);
					}this.viewer.refresh (3, "mouseReleased");
				    }this.rubberbandSelectionMode = (this.binding.getName () === "drag");
				    this.rectRubber.x = 2147483647;
				    if (dragRelease) {
					this.viewer.notifyMouseClicked (x, y, org.jmol.viewer.binding.Binding.getMouseAction (this.pressedCount, 0), 5);
				    }if (this.drawMode && (this.isBound (action, 32) || this.isBound (action, 31)) || this.labelMode && this.isBound (action, 30)) {
					this.viewer.checkObjectDragged (2147483647, 0, x, y, action);
					return;
				    }if (this.dragSelectedMode && this.isBound (action, 22) && this.haveSelection) this.viewer.moveSelected (2147483647, 0, -2147483648, -2147483648, -2147483648, null, false, false);
				    if (dragRelease && this.checkUserAction (action, x, y, 0, 0, time, 5)) return;
				    if (this.viewer.getAllowGestures ()) {
					if (this.isBound (action, 8)) {
					    var speed = this.getExitRate ();
					    if (speed > 0) this.viewer.spinXYBy (this.dragGesture.getDX (4, 2), this.dragGesture.getDY (4, 2), speed * 30 * this.gestureSwipeFactor);
					    if (this.viewer.getLogGestures ()) this.viewer.log ("$NOW$ swipe " + this.dragGesture + " " + speed);
					    return;
					}}return;
				}
			    }, "~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "minimize", 
			    ($fz = function (dragDone) {
				this.viewer.stopMinimization ();
				var iAtom = this.dragAtomIndex;
				if (dragDone) this.dragAtomIndex = -1;
				var bs = (this.viewer.getMotionFixedAtoms ().cardinality () == 0 ? this.viewer.getAtomBits ((this.viewer.isAtomPDB (iAtom) ? 1087373318 : 1095761934), org.jmol.util.BitSetUtil.newAndSetBit (iAtom)) : org.jmol.util.BitSetUtil.setAll (this.viewer.getAtomCount ()));
				this.viewer.minimize (2147483647, 0, bs, null, 0, false, false, false);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getExitRate", 
			    function () {
				var dt = this.dragGesture.getTimeDifference (2);
				return (dt > 5 ? 0 : this.dragGesture.getSpeedPixelsPerMillisecond (4, 2));
			    });
	Clazz.defineMethod (c$, "isRubberBandSelect", 
			    ($fz = function (action) {
				return this.rubberbandSelectionMode && (this.isBound (action, 18) || this.isBound (action, 20) || this.isBound (action, 19));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getRubberBand", 
			    function () {
				if (!this.rubberbandSelectionMode || this.rectRubber.x == 2147483647) return null;
				return this.rectRubber;
			    });
	Clazz.defineMethod (c$, "calcRectRubberBand", 
			    ($fz = function () {
				var factor = (this.viewer.isAntialiased () ? 2 : 1);
				if (this.current.x < this.pressed.x) {
				    this.rectRubber.x = this.current.x * factor;
				    this.rectRubber.width = (this.pressed.x - this.current.x) * factor;
				} else {
				    this.rectRubber.x = this.pressed.x * factor;
				    this.rectRubber.width = (this.current.x - this.pressed.x) * factor;
				}if (this.current.y < this.pressed.y) {
				    this.rectRubber.y = this.current.y * factor;
				    this.rectRubber.height = (this.pressed.y - this.current.y) * factor;
				} else {
				    this.rectRubber.y = this.pressed.y * factor;
				    this.rectRubber.height = (this.current.y - this.pressed.y) * factor;
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkAction", 
			    ($fz = function (action, x, y, deltaX, deltaY, time, mode) {
				var mods = org.jmol.viewer.binding.Binding.getModifiers (action);
				if (org.jmol.viewer.binding.Binding.getModifiers (action) != 0) {
				    var newAction = this.viewer.notifyMouseClicked (x, y, org.jmol.viewer.binding.Binding.getMouseAction (-this.pressedCount, mods), mode);
				    if (newAction == 0) return;
				    if (newAction > 0) action = newAction;
				}if (this.isRubberBandSelect (action)) {
				    this.calcRectRubberBand ();
				    this.viewer.refresh (3, "rubberBand selection");
				    return;
				}if (this.checkUserAction (action, x, y, deltaX, deltaY, time, mode)) return;
				if (this.viewer.getRotateBondIndex () >= 0) {
				    if (this.isBound (action, 26)) {
					this.viewer.moveSelected (deltaX, deltaY, -2147483648, x, y, null, false, false);
					return;
				    }if (!this.isBound (action, 2)) this.viewer.setRotateBondIndex (-1);
				}var bs;
				if (this.dragAtomIndex >= 0) {
				    switch (this.atomPickingMode) {
				    case 26:
					this.checkMotion (3);
					if (this.isBound (action, 25) && this.viewer.allowRotateSelected ()) {
					    this.viewer.rotateSelected (this.getDegrees (deltaX, 0), this.getDegrees (deltaY, 1), null);
					} else {
					    this.viewer.moveSelected (deltaX, deltaY, (this.isBound (action, 24) ? -deltaY : -2147483648), -2147483648, -2147483648, null, true, false);
					}return;
				    case 27:
				    case 28:
				    case 29:
				    case 30:
					if (this.dragGesture.getPointCount () == 1) this.viewer.undoMoveActionClear (this.dragAtomIndex, 2, true);
					this.checkMotion (3);
					if (this.isBound (action, 25)) {
					    bs = this.viewer.getAtomBits (1095761934, org.jmol.util.BitSetUtil.newAndSetBit (this.dragAtomIndex));
					    this.viewer.rotateSelected (this.getDegrees (deltaX, 0), this.getDegrees (deltaY, 1), bs);
					} else {
					    bs = null;
					    switch (this.atomPickingMode) {
					    case 27:
					    case 30:
						bs = this.viewer.getAtomBits (1095761934, org.jmol.util.BitSetUtil.newAndSetBit (this.dragAtomIndex));
						this.viewer.select (bs, false, null, true);
						break;
					    }
					    this.viewer.moveAtomWithHydrogens (this.dragAtomIndex, deltaX, deltaY, (this.isBound (action, 24) ? -deltaY : -2147483648), bs);
					}return;
				    }
				}if (this.dragAtomIndex >= 0 && this.isBound (action, 43) && this.atomPickingMode == 32) {
				    var nearestAtomIndex = this.viewer.findNearestAtomIndexMovable (x, y, false);
				    if (nearestAtomIndex >= 0) {
					if (this.measurementPending != null) {
					    this.measurementPending.setCount (1);
					} else if (this.measuresEnabled) {
					    this.enterMeasurementMode (nearestAtomIndex);
					}this.addToMeasurement (nearestAtomIndex, null, true);
					this.measurementPending.setColix (20);
				    } else if (this.measurementPending != null) {
					this.measurementPending.setCount (1);
					this.measurementPending.setColix (23);
				    }if (this.measurementPending == null) return;
				    this.measurementPending.traceX = x;
				    this.measurementPending.traceY = y;
				    this.viewer.refresh (3, "assignNew");
				    return;
				}if (!this.drawMode && !this.labelMode) {
				    if (this.isBound (action, 1)) {
					this.viewer.translateXYBy (deltaX, deltaY);
					return;
				    }if (this.isBound (action, 0)) {
					if (this.pressedAtomIndex == 2147483647) this.pressedAtomIndex = this.viewer.findNearestAtomIndex (this.pressed.x, this.pressed.y);
					var pt = (this.pressedAtomIndex < 0 ? null : this.viewer.getAtomPoint3f (this.pressedAtomIndex));
					if (pt == null) this.viewer.translateXYBy (deltaX, deltaY);
					else this.viewer.centerAt (x, y, pt);
					return;
				    }}if (this.dragSelectedMode && this.haveSelection && (this.isBound (action, 22) || this.isBound (action, 25))) {
					var iatom = this.viewer.getSelectionSet (false).nextSetBit (0);
					if (iatom < 0) return;
					if (this.dragGesture.getPointCount () == 1) this.viewer.undoMoveActionClear (iatom, 2, true);
					else this.viewer.moveSelected (2147483647, 0, -2147483648, -2147483648, -2147483648, null, false, false);
					this.checkMotion (3);
					if (this.isBound (action, 25) && this.viewer.allowRotateSelected ()) this.viewer.rotateSelected (this.getDegrees (deltaX, 0), this.getDegrees (deltaY, 1), null);
					else this.viewer.moveSelected (deltaX, deltaY, -2147483648, -2147483648, -2147483648, null, true, false);
					return;
				    }if (this.drawMode && (this.isBound (action, 32) || this.isBound (action, 31)) || this.labelMode && this.isBound (action, 30)) {
					this.checkMotion (3);
					this.viewer.checkObjectDragged (this.dragged.x, this.dragged.y, x, y, action);
					return;
				    }if (this.checkMotionRotateZoom (action, x, deltaX, deltaY, true)) {
					if (this.viewer.getSlabEnabled () && this.checkSlideZoom (action)) this.viewer.slabDepthByPixels (deltaY);
					else this.viewer.zoomBy (deltaY);
					return;
				    }if (this.isBound (action, 2)) {
					var degX = this.getDegrees (deltaX, 0);
					var degY = this.getDegrees (deltaY, 1);
					if (this.viewer.useArcBall ()) this.viewer.rotateArcBall (x, y, this.mouseDragFactor);
					else this.viewer.rotateXYBy (degX, degY);
					return;
				    }if (this.isBound (action, 4)) {
					if (Math.abs (deltaY) > 5 * Math.abs (deltaX)) {
					    this.checkMotion (5);
					    this.viewer.zoomBy (deltaY);
					} else if (Math.abs (deltaX) > 5 * Math.abs (deltaY)) {
					    this.checkMotion (3);
					    this.viewer.rotateZBy (-deltaX, 2147483647, 2147483647);
					}return;
				    } else if (this.isBound (action, 5)) {
					this.zoomByFactor (deltaY, 2147483647, 2147483647);
					return;
				    } else if (this.isBound (action, 3)) {
					this.checkMotion (3);
					this.viewer.rotateZBy (-deltaX, 2147483647, 2147483647);
					return;
				    }if (this.viewer.getSlabEnabled ()) {
					if (this.isBound (action, 12)) {
					    this.viewer.depthByPixels (deltaY);
					    return;
					}if (this.isBound (action, 11)) {
					    this.viewer.slabByPixels (deltaY);
					    return;
					}if (this.isBound (action, 13)) {
					    this.viewer.slabDepthByPixels (deltaY);
					    return;
					}}}, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "getDegrees", 
			    function (delta, i) {
				var dim = (i == 0 ? this.viewer.getScreenWidth () : this.viewer.getScreenHeight ());
				if (dim > 500) dim = 500;
				return (delta) / dim * 180 * this.mouseDragFactor;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "zoomByFactor", 
			    function (dz, x, y) {
				if (dz == 0) return;
				this.checkMotion (5);
				this.viewer.zoomByFactor (Math.pow (this.mouseWheelFactor, dz), x, y);
				this.viewer.setInMotion (false);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "checkUserAction", 
			    ($fz = function (action, x, y, deltaX, deltaY, time, mode) {
				if (!this.binding.isUserAction (action)) return false;
				var ht = this.binding.getBindings ();
				var e = ht.keySet ().iterator ();
				var ret = false;
				var obj;
				while (e.hasNext ()) {
				    var key = e.next ();
				    if (key.indexOf (action + "\t") != 0 || !org.jmol.util.Escape.isAS (obj = ht.get (key))) continue;
				    var script = (obj)[1];
				    var nearestPoint = null;
				    if (script.indexOf ("_ATOM") >= 0) {
					var iatom = this.findNearestAtom (x, y, null, true);
					script = org.jmol.util.TextFormat.simpleReplace (script, "_ATOM", "({" + (iatom >= 0 ? "" + iatom : "") + "})");
					if (iatom >= 0) script = org.jmol.util.TextFormat.simpleReplace (script, "_POINT", org.jmol.util.Escape.escapePt (this.viewer.getModelSet ().atoms[iatom]));
				    }if (!this.drawMode && (script.indexOf ("_POINT") >= 0 || script.indexOf ("_OBJECT") >= 0 || script.indexOf ("_BOND") >= 0)) {
					var t = this.viewer.checkObjectClicked (x, y, action);
					if (t != null && (nearestPoint = t.get ("pt")) != null) {
					    var isBond = t.get ("type").equals ("bond");
					    if (isBond) script = org.jmol.util.TextFormat.simpleReplace (script, "_BOND", "[{" + t.get ("index") + "}]");
					    script = org.jmol.util.TextFormat.simpleReplace (script, "_POINT", org.jmol.util.Escape.escapePt (nearestPoint));
					    script = org.jmol.util.TextFormat.simpleReplace (script, "_OBJECT", org.jmol.util.Escape.escapeMap (t));
					}script = org.jmol.util.TextFormat.simpleReplace (script, "_BOND", "[{}]");
					script = org.jmol.util.TextFormat.simpleReplace (script, "_OBJECT", "{}");
				    }script = org.jmol.util.TextFormat.simpleReplace (script, "_POINT", "{}");
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_ACTION", "" + action);
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_X", "" + x);
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_Y", "" + (this.viewer.getScreenHeight () - y));
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_DELTAX", "" + deltaX);
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_DELTAY", "" + deltaY);
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_TIME", "" + time);
				    script = org.jmol.util.TextFormat.simpleReplace (script, "_MODE", "" + mode);
				    this.viewer.evalStringQuiet (script);
				    ret = true;
				}
				return ret;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "checkMotionRotateZoom", 
			    ($fz = function (action, x, deltaX, deltaY, inMotion) {
				var isSlideZoom = this.checkSlideZoom (action);
				var isRotateXY = this.isBound (action, 2);
				var isRotateZorZoom = this.isBound (action, 4);
				if (!isSlideZoom && !isRotateXY && !isRotateZorZoom) return false;
				var isZoom = (isRotateZorZoom && (deltaX == 0 || Math.abs (deltaY) > 5 * Math.abs (deltaX)));
				var cursor = (isZoom || this.isZoomArea (this.moved.x) || this.isBound (action, 5) ? 5 : isRotateXY || isRotateZorZoom ? 3 : 0);
				if (this.viewer.getCursor () != 4) this.viewer.setCursor (cursor);
				if (inMotion) this.viewer.setInMotion (true);
				return (isZoom || isSlideZoom);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "checkSlideZoom", 
			    ($fz = function (action) {
				return this.isBound (action, 6) && this.isZoomArea (this.pressed.x);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "isZoomArea", 
			    ($fz = function (x) {
				return x > this.viewer.getScreenWidth () * (this.viewer.isStereoDouble () ? 2 : 1) * 98 / 100;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkPointOrAtomClicked", 
			    ($fz = function (x, y, mods, clickedCount, time, atomOnly, mode) {
				if (!this.viewer.haveModelSet ()) return false;
				var action = org.jmol.viewer.binding.Binding.getMouseAction (clickedCount, mods);
				if (action != 0) {
				    this.checkUserAction (action, x, y, 0, 0, time, mode);
				    action = this.viewer.notifyMouseClicked (x, y, action, mode);
				    if (action == 0) return false;
				}if (this.isBound (action, 15) && this.viewer.frankClicked (x, y)) {
				    this.viewer.popupMenu (-x, y, 'j');
				    return false;
				}if (this.isBound (action, 15) && this.viewer.frankClickedModelKit (x, y)) {
				    this.viewer.popupMenu (0, 0, 'm');
				    return false;
				}var nearestPoint = null;
				var isBond = false;
				var isIsosurface = false;
				var t = null;
				if (!this.drawMode && !atomOnly) {
				    t = this.viewer.checkObjectClicked (x, y, action);
				    if (t != null) {
					isBond = "bond".equals (t.get ("type"));
					isIsosurface = "isosurface".equals (t.get ("type"));
					nearestPoint = this.getPoint (t);
				    }}if (isBond) clickedCount = 1;
				if (nearestPoint != null && Float.isNaN (nearestPoint.x)) return false;
				var nearestAtomIndex = this.findNearestAtom (x, y, nearestPoint, clickedCount > 0);
				if (clickedCount == 0 && this.atomPickingMode != 32) {
				    if (this.measurementPending == null) return (nearestAtomIndex >= 0);
				    if (nearestPoint != null || this.measurementPending.getIndexOf (nearestAtomIndex) == 0) this.measurementPending.addPoint (nearestAtomIndex, nearestPoint, false);
				    if (this.measurementPending.haveModified ()) this.viewer.setPendingMeasurement (this.measurementPending);
				    this.viewer.refresh (3, "measurementPending");
				    return (nearestAtomIndex >= 0);
				}this.setMouseMode ();
				if (this.isBound (action, 45)) {
				    this.viewer.stopMotion ();
				}if (this.viewer.getNavigationMode () && this.atomPickingMode == 23 && this.isBound (action, 39)) {
				    this.viewer.navTranslatePercent (0, x * 100 / this.viewer.getScreenWidth () - 50, y * 100 / this.viewer.getScreenHeight () - 50);
				    return false;
				}if (isBond) {
				    if (this.isBound (action, this.bondPickingMode == 34 || this.bondPickingMode == 33 ? 43 : 41)) {
					if (this.bondPickingMode == 33) this.viewer.undoMoveActionClear (-1, 4146, true);
					var index = (t.get ("index")).intValue ();
					switch (this.bondPickingMode) {
					case 33:
					    this.viewer.script ("assign bond [{" + index + "}] \"" + this.pickBondAssignType + "\"");
					    break;
					case 34:
					    this.viewer.setRotateBondIndex (index);
					    break;
					case 8:
					    this.viewer.deleteBonds (org.jmol.util.BitSetUtil.newAndSetBit (index));
					}
					return false;
				    }} else if (isIsosurface) {
					return false;
				    } else {
					if (this.atomPickingMode != 32 && this.measurementPending != null && this.isBound (action, 36)) {
					    this.atomOrPointPicked (nearestAtomIndex, nearestPoint, action);
					    if (this.addToMeasurement (nearestAtomIndex, nearestPoint, false) == 4) this.toggleMeasurement ();
					    return false;
					}if (this.isBound (action, 37)) {
					    if (this.measurementPending != null) {
						this.addToMeasurement (nearestAtomIndex, nearestPoint, true);
						this.toggleMeasurement ();
					    } else if (!this.drawMode && !this.labelMode && !this.dragSelectedMode && this.measuresEnabled) {
						this.enterMeasurementMode (nearestAtomIndex);
						this.addToMeasurement (nearestAtomIndex, nearestPoint, true);
					    }this.atomOrPointPicked (nearestAtomIndex, nearestPoint, action);
					    return false;
					}}var isDragSelected = (this.dragSelectedMode && (this.isBound (action, 25) || this.isBound (action, 22)));
				if (isDragSelected || this.isSelectAction (action)) {
				    if (!isIsosurface) this.atomOrPointPicked (nearestAtomIndex, nearestPoint, isDragSelected ? 0 : action);
				    return (nearestAtomIndex >= 0);
				}if (this.isBound (action, 44)) {
				    if (nearestAtomIndex < 0) this.viewer.script ("!reset");
				    return false;
				}return (nearestAtomIndex >= 0);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N,~B,~N");
	Clazz.defineMethod (c$, "getPoint", 
			    ($fz = function (t) {
				var pt =  new org.jmol.util.Point3fi ();
				pt.setT (t.get ("pt"));
				pt.modelIndex = (t.get ("modelIndex")).intValue ();
				return pt;
			    }, $fz.isPrivate = true, $fz), "java.util.Map");
	Clazz.defineMethod (c$, "findNearestAtom", 
			    ($fz = function (x, y, nearestPoint, isClicked) {
				var index = (this.drawMode || nearestPoint != null ? -1 : this.viewer.findNearestAtomIndexMovable (x, y, false));
				return (index >= 0 && (isClicked || this.measurementPending == null) && !this.viewer.isInSelectionSubset (index) ? -1 : index);
			    }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.util.Point3fi,~B");
	Clazz.defineMethod (c$, "isSelectAction", 
			    ($fz = function (action) {
				return (this.isBound (action, 33) || this.isBound (action, 34) || this.isBound (action, 18) || this.isBound (action, 19) || this.isBound (action, 20) || this.isBound (action, 21) || this.isBound (action, 16));
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "checkMotion", 
			    function (cursor) {
				if (this.viewer.getCursor () != 4) this.viewer.setCursor (cursor);
				this.viewer.setInMotion (true);
			    }, "~N");
	Clazz.defineMethod (c$, "addToMeasurement", 
			    ($fz = function (atomIndex, nearestPoint, dblClick) {
				if (atomIndex == -1 && nearestPoint == null || this.measurementPending == null) {
				    this.exitMeasurementMode ();
				    return 0;
				}var measurementCount = this.measurementPending.getCount ();
				if (this.measurementPending.traceX != -2147483648 && measurementCount == 2) this.measurementPending.setCount (measurementCount = 1);
				return (measurementCount == 4 && !dblClick ? measurementCount : this.measurementPending.addPoint (atomIndex, nearestPoint, true));
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3fi,~B");
	Clazz.defineMethod (c$, "enterMeasurementMode", 
			    ($fz = function (iAtom) {
				this.viewer.setPicked (-1);
				this.viewer.setPicked (iAtom);
				this.viewer.setCursor (2);
				this.viewer.setPendingMeasurement (this.measurementPending =  new org.jmol.modelset.MeasurementPending (this.viewer.getModelSet ()));
				this.measurementQueued = this.measurementPending;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "exitMeasurementMode", 
			    ($fz = function () {
				if (this.measurementPending == null) return;
				this.viewer.setPendingMeasurement (this.measurementPending = null);
				this.viewer.setCursor (0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "toggleMeasurement", 
			    ($fz = function () {
				if (this.measurementPending == null) return;
				var measurementCount = this.measurementPending.getCount ();
				if (measurementCount >= 2 && measurementCount <= 4) this.viewer.script ("!measure " + this.measurementPending.getMeasurementScript (" ", true));
				this.exitMeasurementMode ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkHover", 
			    function () {
				if (!this.viewer.getInMotion () && !this.viewer.getSpinOn () && !this.viewer.getNavOn () && !this.viewer.checkObjectHovered (this.current.x, this.current.y)) {
				    var atomIndex = this.viewer.findNearestAtomIndex (this.current.x, this.current.y);
				    if (atomIndex >= 0) this.viewer.hoverOn (atomIndex, org.jmol.viewer.binding.Binding.getMouseAction (this.clickedCount, this.moved.modifiers));
				}});
	Clazz.defineMethod (c$, "hoverOff", 
			    function () {
				try {
				    this.viewer.hoverOff ();
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
			    });
	Clazz.defineMethod (c$, "resetMeasurement", 
			    ($fz = function () {
				this.exitMeasurementMode ();
				this.measurementQueued =  new org.jmol.modelset.MeasurementPending (this.viewer.getModelSet ());
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getPickingState", 
			    function () {
				var script = ";set modelkitMode " + this.viewer.getModelkitMode () + ";set picking " + org.jmol.viewer.ActionManager.getPickingModeName (this.atomPickingMode);
				if (this.atomPickingMode == 32) script += "_" + this.pickAtomAssignType;
				script += ";";
				if (this.bondPickingMode != 0) script += "set picking " + org.jmol.viewer.ActionManager.getPickingModeName (this.bondPickingMode);
				if (this.bondPickingMode == 33) script += "_" + this.pickBondAssignType;
				script += ";";
				return script;
			    });
	Clazz.defineMethod (c$, "getAtomPickingMode", 
			    function () {
				return this.atomPickingMode;
			    });
	Clazz.defineMethod (c$, "setPickingMode", 
			    function (pickingMode) {
				switch (pickingMode) {
				case -1:
				    this.bondPickingMode = 35;
				    pickingMode = 1;
				    break;
				case 35:
				case 34:
				case 33:
				    this.viewer.setBooleanProperty ("bondPicking", true);
				    this.bondPickingMode = pickingMode;
				    return;
				case 8:
				    this.bondPickingMode = pickingMode;
				    if (this.viewer.getBondPicking ()) return;
				    break;
				}
				this.atomPickingMode = pickingMode;
				this.resetMeasurement ();
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomPickingOption", 
			    function (option) {
				switch (this.atomPickingMode) {
				case 32:
				    this.pickAtomAssignType = option;
				    this.isPickAtomAssignCharge = (this.pickAtomAssignType.equals ("Pl") || this.pickAtomAssignType.equals ("Mi"));
				    break;
				}
			    }, "~S");
	Clazz.defineMethod (c$, "setBondPickingOption", 
			    function (option) {
				switch (this.bondPickingMode) {
				case 33:
				    this.pickBondAssignType = Character.toLowerCase (option.charAt (0));
				    break;
				}
			    }, "~S");
	Clazz.defineMethod (c$, "getPickingStyle", 
			    function () {
				return this.pickingStyle;
			    });
	Clazz.defineMethod (c$, "setPickingStyle", 
			    function (pickingStyle) {
				this.pickingStyle = pickingStyle;
				if (pickingStyle >= 4) {
				    this.pickingStyleMeasure = pickingStyle;
				    this.resetMeasurement ();
				} else {
				    if (pickingStyle < 3) this.rootPickingStyle = pickingStyle;
				    this.pickingStyleSelect = pickingStyle;
				}this.rubberbandSelectionMode = false;
				switch (this.pickingStyleSelect) {
				case 2:
				    if (this.binding.getName () !== "extendedSelect") this.setBinding (this.pfaatBinding = (this.pfaatBinding == null ?  new org.jmol.viewer.binding.PfaatBinding () : this.pfaatBinding));
				    break;
				case 3:
				    if (this.binding.getName () !== "drag") this.setBinding (this.dragBinding = (this.dragBinding == null ?  new org.jmol.viewer.binding.DragBinding () : this.dragBinding));
				    this.rubberbandSelectionMode = true;
				    break;
				case 1:
				    if (this.binding.getName () !== "selectOrToggle") this.setBinding (this.rasmolBinding = (this.rasmolBinding == null ?  new org.jmol.viewer.binding.RasmolBinding () : this.rasmolBinding));
				    break;
				default:
				    if (this.binding !== this.jmolBinding) this.setBinding (this.jmolBinding);
				}
				if (this.binding.getName () !== "drag") this.predragBinding = this.binding;
			    }, "~N");
	Clazz.defineMethod (c$, "setBinding", 
			    function (newBinding) {
				this.binding = newBinding;
			    }, "org.jmol.viewer.binding.Binding");
	Clazz.defineMethod (c$, "atomOrPointPicked", 
			    ($fz = function (atomIndex, ptClicked, action) {
				if (atomIndex < 0) {
				    this.resetMeasurement ();
				    if (this.isBound (action, 17)) {
					this.viewer.script ("select none");
					return;
				    }if (this.atomPickingMode != 5 && this.atomPickingMode != 6) return;
				}var n = 2;
				switch (this.atomPickingMode) {
				case 28:
				case 29:
				    return;
				case 0:
				    return;
				case 25:
				case 24:
				case 8:
				    var isDelete = (this.atomPickingMode == 8);
				    var isStruts = (this.atomPickingMode == 25);
				    if (!this.isBound (action, (isDelete ? 41 : 42))) return;
				    if (this.measurementQueued == null || this.measurementQueued.getCount () == 0 || this.measurementQueued.getCount () > 2) {
					this.resetMeasurement ();
					this.enterMeasurementMode (atomIndex);
				    }this.addToMeasurement (atomIndex, ptClicked, true);
				    if (this.queueAtom (atomIndex, ptClicked) != 2) return;
				    var cAction = (isDelete || this.measurementQueued.isConnected (this.viewer.getModelSet ().atoms, 2) ? " DELETE" : isStruts ? "STRUTS" : "");
				    this.viewer.script ("connect " + this.measurementQueued.getMeasurementScript (" ", true) + cAction);
				    this.resetMeasurement ();
				    return;
				case 21:
				    n++;
				case 20:
				    n++;
				case 18:
				case 19:
				case 22:
				    if (!this.isBound (action, 36)) return;
				    if (this.measurementQueued == null || this.measurementQueued.getCount () == 0 || this.measurementQueued.getCount () > n) {
					this.resetMeasurement ();
					this.enterMeasurementMode (atomIndex);
				    }this.addToMeasurement (atomIndex, ptClicked, true);
				    this.queueAtom (atomIndex, ptClicked);
				    var i = this.measurementQueued.getCount ();
				    if (i == 1) {
					this.viewer.setPicked (-1);
					this.viewer.setPicked (atomIndex);
				    }if (i < n) return;
				    if (this.atomPickingMode == 22) {
					this.getSequence ();
				    } else {
					this.viewer.setStatusMeasuring ("measurePicked", n, this.measurementQueued.getStringDetail (), this.measurementQueued.getValue ());
					if (this.atomPickingMode == 18 || this.pickingStyleMeasure == 4) {
					    this.viewer.script ("measure " + this.measurementQueued.getMeasurementScript (" ", true));
					}}this.resetMeasurement ();
				    return;
				}
				var mode = (this.measurementPending != null && this.atomPickingMode != 1 ? 1 : this.atomPickingMode);
				switch (mode) {
				case 3:
				    if (!this.isBound (action, 33)) return;
				    if (ptClicked == null) {
					this.viewer.script ("zoomTo (atomindex=" + atomIndex + ")");
					this.viewer.setStatusAtomPicked (atomIndex, null);
				    } else {
					this.viewer.script ("zoomTo " + org.jmol.util.Escape.escapePt (ptClicked));
				    }return;
				case 5:
				case 6:
				    this.checkTwoAtomAction (action, ptClicked, atomIndex);
				}
				if (ptClicked != null) return;
				var bs;
				var spec = "atomindex=" + atomIndex;
				switch (mode) {
				case 1:
				    if (this.isBound (action, 33)) this.viewer.setStatusAtomPicked (atomIndex, null);
				    return;
				case 2:
				    if (this.isBound (action, 35)) {
					this.viewer.script ("set labeltoggle {atomindex=" + atomIndex + "}");
					this.viewer.setStatusAtomPicked (atomIndex, null);
				    }return;
				case 31:
				    if (this.isBound (action, 43)) {
					bs = this.viewer.getAtomBitSet ("connected(atomIndex=" + atomIndex + ") and !within(SMARTS,'[r50,R]')");
					var nb = bs.cardinality ();
					switch (nb) {
					case 0:
					case 1:
					    return;
					case 2:
					    break;
					case 3:
					case 4:
					    var lengths =  Clazz.newIntArray (nb, 0);
					    var points =  Clazz.newIntArray (nb, 0);
					    var ni = 0;
					    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1), ni++) {
						lengths[ni] = this.viewer.getBranchBitSet (i, atomIndex).cardinality ();
						points[ni] = i;
					    }
					    for (var j = 0; j < nb - 2; j++) {
						var max = -2147483648;
						var imax = 0;
						for (var i = 0; i < nb; i++) if (lengths[i] >= max && bs.get (points[i])) {
						    imax = points[i];
						    max = lengths[i];
						}
						bs.clear (imax);
					    }
					}
					this.viewer.undoMoveActionClear (atomIndex, 2, true);
					this.viewer.invertSelected (null, null, atomIndex, bs);
					this.viewer.setStatusAtomPicked (atomIndex, "inverted: " + org.jmol.util.Escape.escape (bs));
				    }return;
				case 7:
				    if (this.isBound (action, 40)) {
					bs = this.getSelectionSet ("(" + spec + ")");
					this.viewer.deleteAtoms (bs, false);
					this.viewer.setStatusAtomPicked (atomIndex, "deleted: " + org.jmol.util.Escape.escape (bs));
				    }return;
				}
				switch (this.atomPickingMode) {
				default:
				    return;
				case 9:
				    this.applySelectStyle (spec, action);
				    break;
				case 10:
				    this.applySelectStyle ("within(group, " + spec + ")", action);
				    break;
				case 11:
				    this.applySelectStyle ("within(chain, " + spec + ")", action);
				    break;
				case 13:
				    this.applySelectStyle ("within(polymer, " + spec + ")", action);
				    break;
				case 14:
				    this.applySelectStyle ("within(structure, " + spec + ")", action);
				    break;
				case 12:
				    this.applySelectStyle ("within(molecule, " + spec + ")", action);
				    break;
				case 16:
				    this.applySelectStyle ("within(model, " + spec + ")", action);
				    break;
				case 17:
				    this.applySelectStyle ("visible and within(element, " + spec + ")", action);
				    break;
				case 15:
				    this.applySelectStyle ("visible and within(site, " + spec + ")", action);
				    break;
				}
				this.viewer.clearClickCount ();
				this.viewer.setStatusAtomPicked (atomIndex, null);
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3fi,~N");
	Clazz.defineMethod (c$, "getSequence", 
			    ($fz = function () {
				var a1 = this.measurementQueued.getAtomIndex (1);
				var a2 = this.measurementQueued.getAtomIndex (2);
				if (a1 < 0 || a2 < 0) return;
				var sequence = this.viewer.getSmiles (a1, a2, null, true, false, false, false);
				this.viewer.setStatusMeasuring ("measureSequence", -2, sequence, 0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "checkTwoAtomAction", 
			    ($fz = function (action, ptClicked, atomIndex) {
				if (!this.isBound (action, 33)) return;
				var isSpin = (this.atomPickingMode == 5);
				if (this.viewer.getSpinOn () || this.viewer.getNavOn () || this.viewer.getPendingMeasurement () != null) {
				    this.resetMeasurement ();
				    if (this.viewer.getSpinOn ()) this.viewer.script ("spin off");
				    return;
				}if (this.measurementQueued.getCount () >= 2) this.resetMeasurement ();
				var queuedAtomCount = this.measurementQueued.getCount ();
				if (queuedAtomCount == 1) {
				    if (ptClicked == null) {
					if (this.measurementQueued.getAtomIndex (1) == atomIndex) return;
				    } else {
					if (this.measurementQueued.getAtom (1).distance (ptClicked) == 0) return;
				    }}if (atomIndex >= 0 || ptClicked != null) queuedAtomCount = this.queueAtom (atomIndex, ptClicked);
				if (queuedAtomCount < 2) {
				    if (isSpin) this.viewer.scriptStatus (queuedAtomCount == 1 ? org.jmol.i18n.GT._ ("pick one more atom in order to spin the model around an axis") : org.jmol.i18n.GT._ ("pick two atoms in order to spin the model around an axis"));
				    else this.viewer.scriptStatus (queuedAtomCount == 1 ? org.jmol.i18n.GT._ ("pick one more atom in order to display the symmetry relationship") : org.jmol.i18n.GT._ ("pick two atoms in order to display the symmetry relationship between them"));
				    return;
				}var s = this.measurementQueued.getMeasurementScript (" ", false);
				if (isSpin) this.viewer.script ("spin" + s + " " + this.viewer.getPickingSpinRate ());
				else this.viewer.script ("draw symop" + s + ";show symop" + s);
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3fi,~N");
	Clazz.defineMethod (c$, "queueAtom", 
			    ($fz = function (atomIndex, ptClicked) {
				var n = this.measurementQueued.addPoint (atomIndex, ptClicked, true);
				if (atomIndex >= 0) this.viewer.setStatusAtomPicked (atomIndex, "Atom #" + n + ":" + this.viewer.getAtomInfo (atomIndex));
				return n;
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Point3fi");
	Clazz.defineMethod (c$, "applySelectStyle", 
			    ($fz = function (item, action) {
				if (this.measurementPending != null || this.selectionWorking) return;
				this.selectionWorking = true;
				var s = (this.rubberbandSelectionMode || this.isBound (action, 18) ? "selected and not (" + item + ") or (not selected) and " : this.isBound (action, 19) ? "selected and not " : this.isBound (action, 20) ? "selected or " : action == 0 || this.isBound (action, 21) ? "selected tog " : this.isBound (action, 16) ? "" : null);
				if (s != null) {
				    s += "(" + item + ")";
				    if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug (s);
				    var bs = this.getSelectionSet (s);
				    if (bs != null) {
					this.viewer.select (bs, false, null, false);
					this.viewer.refresh (3, "selections set");
				    }}this.selectionWorking = false;
			    }, $fz.isPrivate = true, $fz), "~S,~N");
	Clazz.defineMethod (c$, "getSelectionSet", 
			    ($fz = function (script) {
				try {
				    if (this.eval == null) this.eval =  new org.jmol.script.ScriptEvaluator (this.viewer);
				    return this.viewer.getAtomBitSetEval (this.eval, script);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				return null;
			    }, $fz.isPrivate = true, $fz), "~S");
	c$.$ActionManager$MotionPoint$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.index = 0;
		this.x = 0;
		this.y = 0;
		this.time = 0;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.viewer.ActionManager, "MotionPoint");
	    Clazz.defineMethod (c$, "set", 
				function (a, b, c, d) {
				    this.index = a;
				    this.x = b;
				    this.y = c;
				    this.time = d;
				}, "~N,~N,~N,~N");
	    Clazz.overrideMethod (c$, "toString", 
				  function () {
				      return "[x = " + this.x + " y = " + this.y + " time = " + this.time + " ]";
				  });
	    c$ = Clazz.p0p ();
	};
	c$.$ActionManager$Gesture$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.action = 0;
		this.nodes = null;
		this.ptNext = 0;
		this.time0 = 0;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.viewer.ActionManager, "Gesture");
	    Clazz.makeConstructor (c$, 
				   function (a) {
				       this.nodes =  new Array (a);
				       for (var b = 0; b < a; b++) this.nodes[b] = Clazz.innerTypeInstance (org.jmol.viewer.ActionManager.MotionPoint, this, null);

				   }, "~N");
	    Clazz.defineMethod (c$, "setAction", 
				function (a, b) {
				    this.action = a;
				    this.ptNext = 0;
				    this.time0 = b;
				    for (var c = 0; c < this.nodes.length; c++) this.nodes[c].index = -1;

				}, "~N,~N");
	    Clazz.defineMethod (c$, "getAction", 
				function () {
				    return this.action;
				});
	    Clazz.defineMethod (c$, "add", 
				function (a, b, c, d) {
				    this.action = a;
				    this.getNode (this.ptNext).set (this.ptNext, b, c, d - this.time0);
				    this.ptNext++;
				    return this.ptNext;
				}, "~N,~N,~N,~N");
	    Clazz.defineMethod (c$, "getTimeDifference", 
				function (a) {
				    a = this.getPointCount (a, 0);
				    if (a < 2) return 0;
				    var b = this.getNode (this.ptNext - 1);
				    var c = this.getNode (this.ptNext - a);
				    return b.time - c.time;
				}, "~N");
	    Clazz.defineMethod (c$, "getSpeedPixelsPerMillisecond", 
				function (a, b) {
				    a = this.getPointCount (a, b);
				    if (a < 2) return 0;
				    var c = this.getNode (this.ptNext - 1 - b);
				    var d = this.getNode (this.ptNext - a - b);
				    var e = ((c.x - d.x)) / this.b$["org.jmol.viewer.ActionManager"].viewer.getScreenWidth () * 360;
				    var f = ((c.y - d.y)) / this.b$["org.jmol.viewer.ActionManager"].viewer.getScreenHeight () * 360;
				    return Math.sqrt (e * e + f * f) / (c.time - d.time);
				}, "~N,~N");
	    Clazz.defineMethod (c$, "getDX", 
				function (a, b) {
				    a = this.getPointCount (a, b);
				    if (a < 2) return 0;
				    var c = this.getNode (this.ptNext - 1 - b);
				    var d = this.getNode (this.ptNext - a - b);
				    return c.x - d.x;
				}, "~N,~N");
	    Clazz.defineMethod (c$, "getDY", 
				function (a, b) {
				    a = this.getPointCount (a, b);
				    if (a < 2) return 0;
				    var c = this.getNode (this.ptNext - 1 - b);
				    var d = this.getNode (this.ptNext - a - b);
				    return c.y - d.y;
				}, "~N,~N");
	    Clazz.defineMethod (c$, "getPointCount", 
				function () {
				    return this.ptNext;
				});
	    Clazz.defineMethod (c$, "getPointCount", 
				function (a, b) {
				    if (a > this.nodes.length - b) a = this.nodes.length - b;
				    var c = a + 1;
				    for (; --c >= 0; ) if (this.getNode (this.ptNext - c - b).index >= 0) break;

				    return c;
				}, "~N,~N");
	    Clazz.defineMethod (c$, "getNode", 
				function (a) {
				    return this.nodes[(a + this.nodes.length + this.nodes.length) % this.nodes.length];
				}, "~N");
	    Clazz.overrideMethod (c$, "toString", 
				  function () {
				      if (this.nodes.length == 0) return "" + this;
				      return org.jmol.viewer.binding.Binding.getMouseActionName (this.action, false) + " nPoints = " + this.ptNext + " " + this.nodes[0];
				  });
	    c$ = Clazz.p0p ();
	};
	Clazz.defineStatics (c$,
			     "ACTION_center", 0,
			     "ACTION_translate", 1,
			     "ACTION_rotate", 2,
			     "ACTION_rotateZ", 3,
			     "ACTION_rotateZorZoom", 4,
			     "ACTION_wheelZoom", 5,
			     "ACTION_slideZoom", 6,
			     "ACTION_navTranslate", 7,
			     "ACTION_swipe", 8,
			     "ACTION_spinDrawObjectCW", 9,
			     "ACTION_spinDrawObjectCCW", 10,
			     "ACTION_slab", 11,
			     "ACTION_depth", 12,
			     "ACTION_slabAndDepth", 13,
			     "ACTION_popupMenu", 14,
			     "ACTION_clickFrank", 15,
			     "ACTION_select", 16,
			     "ACTION_selectNone", 17,
			     "ACTION_selectToggle", 18,
			     "ACTION_selectAndNot", 19,
			     "ACTION_selectOr", 20,
			     "ACTION_selectToggleExtended", 21,
			     "ACTION_dragSelected", 22,
			     "ACTION_selectAndDrag", 23,
			     "ACTION_dragZ", 24,
			     "ACTION_rotateSelected", 25,
			     "ACTION_rotateBranch", 26,
			     "ACTION_dragAtom", 27,
			     "ACTION_dragMinimize", 28,
			     "ACTION_dragMinimizeMolecule", 29,
			     "ACTION_dragLabel", 30,
			     "ACTION_dragDrawPoint", 31,
			     "ACTION_dragDrawObject", 32,
			     "ACTION_pickAtom", 33,
			     "ACTION_pickPoint", 34,
			     "ACTION_pickLabel", 35,
			     "ACTION_pickMeasure", 36,
			     "ACTION_setMeasure", 37,
			     "ACTION_pickIsosurface", 38,
			     "ACTION_pickNavigate", 39,
			     "ACTION_deleteAtom", 40,
			     "ACTION_deleteBond", 41,
			     "ACTION_connectAtoms", 42,
			     "ACTION_assignNew", 43,
			     "ACTION_reset", 44,
			     "ACTION_stopMotion", 45,
			     "ACTION_multiTouchSimulation", 46,
			     "ACTION_count", 47);
	c$.actionInfo = c$.prototype.actionInfo =  new Array (47);
	c$.actionNames = c$.prototype.actionNames =  new Array (47);
	{
	    org.jmol.viewer.ActionManager.newAction (0, "_center", org.jmol.i18n.GT._ ("center"));
	    org.jmol.viewer.ActionManager.newAction (1, "_translate", org.jmol.i18n.GT._ ("translate"));
	    org.jmol.viewer.ActionManager.newAction (2, "_rotate", org.jmol.i18n.GT._ ("rotate"));
	    org.jmol.viewer.ActionManager.newAction (3, "_rotateZ", org.jmol.i18n.GT._ ("rotate Z"));
	    org.jmol.viewer.ActionManager.newAction (4, "_rotateZorZoom", org.jmol.i18n.GT._ ("rotate Z (horizontal motion of mouse) or zoom (vertical motion of mouse)"));
	    org.jmol.viewer.ActionManager.newAction (5, "_wheelZoom", org.jmol.i18n.GT._ ("zoom"));
	    org.jmol.viewer.ActionManager.newAction (6, "_slideZoom", org.jmol.i18n.GT._ ("zoom (along right edge of window)"));
	    org.jmol.viewer.ActionManager.newAction (7, "_navTranslate", org.jmol.i18n.GT._ ("translate navigation point (requires {0} and {1})", ["set NAVIGATIONMODE", "set picking NAVIGATE"]));
	    org.jmol.viewer.ActionManager.newAction (8, "_swipe", org.jmol.i18n.GT._ ("spin model (swipe and release button and stop motion simultaneously)"));
	    org.jmol.viewer.ActionManager.newAction (9, "_spinDrawObjectCW", org.jmol.i18n.GT._ ("click on two points to spin around axis clockwise (requires {0})", "set picking SPIN"));
	    org.jmol.viewer.ActionManager.newAction (10, "_spinDrawObjectCCW", org.jmol.i18n.GT._ ("click on two points to spin around axis counterclockwise (requires {0})", "set picking SPIN"));
	    org.jmol.viewer.ActionManager.newAction (11, "_slab", org.jmol.i18n.GT._ ("adjust slab (front plane; requires {0})", "SLAB ON"));
	    org.jmol.viewer.ActionManager.newAction (12, "_depth", org.jmol.i18n.GT._ ("adjust depth (back plane; requires {0})", "SLAB ON"));
	    org.jmol.viewer.ActionManager.newAction (13, "_slabAndDepth", org.jmol.i18n.GT._ ("move slab/depth window (both planes; requires {0})", "SLAB ON"));
	    org.jmol.viewer.ActionManager.newAction (14, "_popupMenu", org.jmol.i18n.GT._ ("pop up the full context menu"));
	    org.jmol.viewer.ActionManager.newAction (15, "_clickFrank", org.jmol.i18n.GT._ ("pop up recent context menu (click on Jmol frank)"));
	    org.jmol.viewer.ActionManager.newAction (16, "_select", org.jmol.i18n.GT._ ("select an atom (requires {0})", "set pickingStyle EXTENDEDSELECT"));
	    org.jmol.viewer.ActionManager.newAction (17, "_selectNone", org.jmol.i18n.GT._ ("select NONE (requires {0})", "set pickingStyle EXTENDEDSELECT"));
	    org.jmol.viewer.ActionManager.newAction (18, "_selectToggle", org.jmol.i18n.GT._ ("toggle selection (requires {0})", "set pickingStyle DRAG/EXTENDEDSELECT/RASMOL"));
	    org.jmol.viewer.ActionManager.newAction (19, "_selectAndNot", org.jmol.i18n.GT._ ("unselect this group of atoms (requires {0})", "set pickingStyle DRAG/EXTENDEDSELECT"));
	    org.jmol.viewer.ActionManager.newAction (20, "_selectOr", org.jmol.i18n.GT._ ("add this group of atoms to the set of selected atoms (requires {0})", "set pickingStyle DRAG/EXTENDEDSELECT"));
	    org.jmol.viewer.ActionManager.newAction (21, "_selectToggleOr", org.jmol.i18n.GT._ ("if all are selected, unselect all, otherwise add this group of atoms to the set of selected atoms (requires {0})", "set pickingStyle DRAG"));
	    org.jmol.viewer.ActionManager.newAction (22, "_dragSelected", org.jmol.i18n.GT._ ("move selected atoms (requires {0})", "set DRAGSELECTED"));
	    org.jmol.viewer.ActionManager.newAction (23, "_selectAndDrag", org.jmol.i18n.GT._ ("select and drag atoms (requires {0})", "set DRAGSELECTED"));
	    org.jmol.viewer.ActionManager.newAction (24, "_dragZ", org.jmol.i18n.GT._ ("drag atoms in Z direction (requires {0})", "set DRAGSELECTED"));
	    org.jmol.viewer.ActionManager.newAction (25, "_rotateSelected", org.jmol.i18n.GT._ ("rotate selected atoms (requires {0})", "set DRAGSELECTED"));
	    org.jmol.viewer.ActionManager.newAction (26, "_rotateBranch", org.jmol.i18n.GT._ ("rotate branch around bond (requires {0})", "set picking ROTATEBOND"));
	    org.jmol.viewer.ActionManager.newAction (27, "_dragAtom", org.jmol.i18n.GT._ ("move atom (requires {0})", "set picking DRAGATOM"));
	    org.jmol.viewer.ActionManager.newAction (28, "_dragMinimize", org.jmol.i18n.GT._ ("move atom and minimize molecule (requires {0})", "set picking DRAGMINIMIZE"));
	    org.jmol.viewer.ActionManager.newAction (29, "_dragMinimizeMolecule", org.jmol.i18n.GT._ ("move and minimize molecule (requires {0})", "set picking DRAGMINIMIZEMOLECULE"));
	    org.jmol.viewer.ActionManager.newAction (30, "_dragLabel", org.jmol.i18n.GT._ ("move label (requires {0})", "set picking LABEL"));
	    org.jmol.viewer.ActionManager.newAction (31, "_dragDrawPoint", org.jmol.i18n.GT._ ("move specific DRAW point (requires {0})", "set picking DRAW"));
	    org.jmol.viewer.ActionManager.newAction (32, "_dragDrawObject", org.jmol.i18n.GT._ ("move whole DRAW object (requires {0})", "set picking DRAW"));
	    org.jmol.viewer.ActionManager.newAction (33, "_pickAtom", org.jmol.i18n.GT._ ("pick an atom"));
	    org.jmol.viewer.ActionManager.newAction (34, "_pickPoint", org.jmol.i18n.GT._ ("pick a DRAW point (for measurements) (requires {0}", "set DRAWPICKING"));
	    org.jmol.viewer.ActionManager.newAction (35, "_pickLabel", org.jmol.i18n.GT._ ("pick a label to toggle it hidden/displayed (requires {0})", "set picking LABEL"));
	    org.jmol.viewer.ActionManager.newAction (36, "_pickMeasure", org.jmol.i18n.GT._ ("pick an atom to include it in a measurement (after starting a measurement or after {0})", "set picking DISTANCE/ANGLE/TORSION"));
	    org.jmol.viewer.ActionManager.newAction (37, "_setMeasure", org.jmol.i18n.GT._ ("pick an atom to initiate or conclude a measurement"));
	    org.jmol.viewer.ActionManager.newAction (38, "_pickIsosurface", org.jmol.i18n.GT._ ("pick an ISOSURFACE point (requires {0}", "set DRAWPICKING"));
	    org.jmol.viewer.ActionManager.newAction (39, "_pickNavigate", org.jmol.i18n.GT._ ("pick a point or atom to navigate to (requires {0})", "set NAVIGATIONMODE"));
	    org.jmol.viewer.ActionManager.newAction (40, "_deleteAtom", org.jmol.i18n.GT._ ("delete atom (requires {0})", "set picking DELETE ATOM"));
	    org.jmol.viewer.ActionManager.newAction (41, "_deleteBond", org.jmol.i18n.GT._ ("delete bond (requires {0})", "set picking DELETE BOND"));
	    org.jmol.viewer.ActionManager.newAction (42, "_pickConnect", org.jmol.i18n.GT._ ("connect atoms (requires {0})", "set picking CONNECT"));
	    org.jmol.viewer.ActionManager.newAction (43, "_assignNew", org.jmol.i18n.GT._ ("assign/new atom or bond (requires {0})", "set picking assignAtom_??/assignBond_?"));
	    org.jmol.viewer.ActionManager.newAction (44, "_reset", org.jmol.i18n.GT._ ("reset (when clicked off the model)"));
	    org.jmol.viewer.ActionManager.newAction (45, "_stopMotion", org.jmol.i18n.GT._ ("stop motion (requires {0})", "set waitForMoveTo FALSE"));
	    org.jmol.viewer.ActionManager.newAction (46, "_multiTouchSimulation", org.jmol.i18n.GT._ ("simulate multi-touch using the mouse)"));
	}Clazz.defineStatics (c$,
			      "PICKING_OFF", 0,
			      "PICKING_IDENTIFY", 1,
			      "PICKING_LABEL", 2,
			      "PICKING_CENTER", 3,
			      "PICKING_DRAW", 4,
			      "PICKING_SPIN", 5,
			      "PICKING_SYMMETRY", 6,
			      "PICKING_DELETE_ATOM", 7,
			      "PICKING_DELETE_BOND", 8,
			      "PICKING_SELECT_ATOM", 9,
			      "PICKING_SELECT_GROUP", 10,
			      "PICKING_SELECT_CHAIN", 11,
			      "PICKING_SELECT_MOLECULE", 12,
			      "PICKING_SELECT_POLYMER", 13,
			      "PICKING_SELECT_STRUCTURE", 14,
			      "PICKING_SELECT_SITE", 15,
			      "PICKING_SELECT_MODEL", 16,
			      "PICKING_SELECT_ELEMENT", 17,
			      "PICKING_MEASURE", 18,
			      "PICKING_MEASURE_DISTANCE", 19,
			      "PICKING_MEASURE_ANGLE", 20,
			      "PICKING_MEASURE_TORSION", 21,
			      "PICKING_MEASURE_SEQUENCE", 22,
			      "PICKING_NAVIGATE", 23,
			      "PICKING_CONNECT", 24,
			      "PICKING_STRUTS", 25,
			      "PICKING_DRAG_SELECTED", 26,
			      "PICKING_DRAG_MOLECULE", 27,
			      "PICKING_DRAG_ATOM", 28,
			      "PICKING_DRAG_MINIMIZE", 29,
			      "PICKING_DRAG_MINIMIZE_MOLECULE", 30,
			      "PICKING_INVERT_STEREO", 31,
			      "PICKING_ASSIGN_ATOM", 32,
			      "PICKING_ASSIGN_BOND", 33,
			      "PICKING_ROTATE_BOND", 34,
			      "PICKING_IDENTIFY_BOND", 35,
			      "pickingModeNames", ["off", "identify", "label", "center", "draw", "spin", "symmetry", "deleteatom", "deletebond", "atom", "group", "chain", "molecule", "polymer", "structure", "site", "model", "element", "measure", "distance", "angle", "torsion", "sequence", "navigate", "connect", "struts", "dragselected", "dragmolecule", "dragatom", "dragminimize", "dragminimizemolecule", "invertstereo", "assignatom", "assignbond", "rotatebond", "identifybond"],
			      "PICKINGSTYLE_SELECT_JMOL", 0,
			      "PICKINGSTYLE_SELECT_CHIME", 0,
			      "PICKINGSTYLE_SELECT_RASMOL", 1,
			      "PICKINGSTYLE_SELECT_PFAAT", 2,
			      "PICKINGSTYLE_SELECT_DRAG", 3,
			      "PICKINGSTYLE_MEASURE_ON", 4,
			      "PICKINGSTYLE_MEASURE_OFF", 5,
			      "pickingStyleNames", ["toggle", "selectOrToggle", "extendedSelect", "drag", "measure", "measureoff"],
			      "MAX_DOUBLE_CLICK_MILLIS", 700,
			      "MININUM_GESTURE_DELAY_MILLISECONDS", 5,
			      "SLIDE_ZOOM_X_PERCENT", 98,
			      "DEFAULT_MOUSE_DRAG_FACTOR", 1,
			      "DEFAULT_MOUSE_WHEEL_FACTOR", 1.15,
			      "DEFAULT_GESTURE_SWIPE_FACTOR", 1);
    });
    // 
    //// org\jmol\viewer\StateManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.util.Hashtable", "org.jmol.constant.EnumAxesMode", "$.EnumCallback", "org.jmol.util.Matrix3f", "$.Point3f"], "org.jmol.viewer.StateManager", ["java.lang.Boolean", "$.Float", "$.Runtime", "java.util.Arrays", "org.jmol.constant.EnumStructure", "org.jmol.script.ScriptVariable", "org.jmol.util.BitSet", "$.BitSetUtil", "$.Escape", "$.GData", "$.Logger", "$.StringXBuilder", "$.TextFormat", "org.jmol.viewer.JmolConstants", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.saved = null;
	    this.lastOrientation = "";
	    this.lastConnections = "";
	    this.lastSelected = "";
	    this.lastState = "";
	    this.lastShape = "";
	    this.lastCoordinates = "";
	    if (!Clazz.isClassDefined ("org.jmol.viewer.StateManager.Orientation")) {
		org.jmol.viewer.StateManager.$StateManager$Orientation$ ();
	    }
	    if (!Clazz.isClassDefined ("org.jmol.viewer.StateManager.Connections")) {
		org.jmol.viewer.StateManager.$StateManager$Connections$ ();
	    }
	    this.localFunctions = null;
	    if (!Clazz.isClassDefined ("org.jmol.viewer.StateManager.GlobalSettings")) {
		org.jmol.viewer.StateManager.$StateManager$GlobalSettings$ ();
	    }
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "StateManager");
	Clazz.prepareFields (c$, function () {
	    this.saved =  new java.util.Hashtable ();
	    this.localFunctions =  new java.util.Hashtable ();
	});
	c$.getVariableList = Clazz.defineMethod (c$, "getVariableList", 
						 function (htVariables, nMax, withSites, definedOnly) {
						     var sb =  new org.jmol.util.StringXBuilder ();
						     var n = 0;
						     var list =  new Array (htVariables.size ());
						     for (var entry, $entry = htVariables.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
							 var key = entry.getKey ();
							 var $var = entry.getValue ();
							 if ((withSites || !key.startsWith ("site_")) && (!definedOnly || key.charAt (0) == '@')) list[n++] = key + (key.charAt (0) == '@' ? " " + $var.asString () : " = " + org.jmol.viewer.StateManager.varClip (key, $var.escape (), nMax));
						     }
						     java.util.Arrays.sort (list, 0, n);
						     for (var i = 0; i < n; i++) if (list[i] != null) org.jmol.viewer.StateManager.appendCmd (sb, list[i]);

						     if (n == 0 && !definedOnly) sb.append ("# --no global user variables defined--;\n");
						     return sb.toString ();
						 }, "java.util.Map,~N,~B,~B");
	c$.getObjectIdFromName = Clazz.defineMethod (c$, "getObjectIdFromName", 
						     function (name) {
							 if (name == null) return -1;
							 var objID = "background axis1      axis2      axis3      boundbox   unitcell   frank      ".indexOf (name.toLowerCase ());
							 return (objID < 0 ? objID : Clazz.doubleToInt (objID / 11));
						     }, "~S");
	c$.getObjectNameFromId = Clazz.defineMethod (c$, "getObjectNameFromId", 
						     function (objId) {
							 if (objId < 0 || objId >= 8) return null;
							 return "background axis1      axis2      axis3      boundbox   unitcell   frank      ".substring (objId * 11, objId * 11 + 11).trim ();
						     }, "~N");
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "getGlobalSettings", 
			    function (gsOld, clearUserVariables) {
				return Clazz.innerTypeInstance (org.jmol.viewer.StateManager.GlobalSettings, this, null, gsOld, clearUserVariables);
			    }, "org.jmol.viewer.StateManager.GlobalSettings,~B");
	Clazz.defineMethod (c$, "clear", 
			    function (global) {
				this.viewer.setShowAxes (false);
				this.viewer.setShowBbcage (false);
				this.viewer.setShowUnitCell (false);
				global.clear ();
			    }, "org.jmol.viewer.StateManager.GlobalSettings");
	Clazz.defineMethod (c$, "setCrystallographicDefaults", 
			    function () {
				this.viewer.setAxesModeUnitCell (true);
				this.viewer.setShowAxes (true);
				this.viewer.setShowUnitCell (true);
				this.viewer.setBooleanProperty ("perspectiveDepth", false);
			    });
	Clazz.defineMethod (c$, "setCommonDefaults", 
			    ($fz = function () {
				this.viewer.setBooleanProperty ("perspectiveDepth", true);
				this.viewer.setFloatProperty ("bondTolerance", 0.45);
				this.viewer.setFloatProperty ("minBondDistance", 0.4);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setJmolDefaults", 
			    function () {
				this.setCommonDefaults ();
				this.viewer.setStringProperty ("defaultColorScheme", "Jmol");
				this.viewer.setBooleanProperty ("axesOrientationRasmol", false);
				this.viewer.setBooleanProperty ("zeroBasedXyzRasmol", false);
				this.viewer.setIntProperty ("percentVdwAtom", 23);
				this.viewer.setIntProperty ("bondRadiusMilliAngstroms", 150);
				this.viewer.setDefaultVdw ("auto");
			    });
	Clazz.defineMethod (c$, "setRasMolDefaults", 
			    function () {
				this.setCommonDefaults ();
				this.viewer.setStringProperty ("defaultColorScheme", "RasMol");
				this.viewer.setBooleanProperty ("axesOrientationRasmol", true);
				this.viewer.setBooleanProperty ("zeroBasedXyzRasmol", true);
				this.viewer.setIntProperty ("percentVdwAtom", 0);
				this.viewer.setIntProperty ("bondRadiusMilliAngstroms", 1);
				this.viewer.setDefaultVdw ("Rasmol");
			    });
	Clazz.defineMethod (c$, "listSavedStates", 
			    function () {
				var names = "";
				var e = this.saved.keySet ().iterator ();
				while (e.hasNext ()) names += "\n" + e.next ();

				return names;
			    });
	Clazz.defineMethod (c$, "deleteSavedType", 
			    ($fz = function (type) {
				var e = this.saved.keySet ().iterator ();
				while (e.hasNext ()) {
				    var name = e.next ();
				    if (name.startsWith (type)) {
					e.remove ();
					org.jmol.util.Logger.debug ("deleted " + name);
				    }}
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "deleteSaved", 
			    function (name) {
				this.saved.remove (name);
			    }, "~S");
	Clazz.defineMethod (c$, "saveSelection", 
			    function (saveName, bsSelected) {
				if (saveName.equalsIgnoreCase ("DELETE")) {
				    this.deleteSavedType ("Selected_");
				    return;
				}saveName = this.lastSelected = "Selected_" + saveName;
				this.saved.put (saveName, org.jmol.util.BitSetUtil.copy (bsSelected));
			    }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "restoreSelection", 
			    function (saveName) {
				var name = (saveName.length > 0 ? "Selected_" + saveName : this.lastSelected);
				var bsSelected = this.saved.get (name);
				if (bsSelected == null) {
				    this.viewer.select ( new org.jmol.util.BitSet (), false, null, false);
				    return false;
				}this.viewer.select (bsSelected, false, null, false);
				return true;
			    }, "~S");
	Clazz.defineMethod (c$, "saveState", 
			    function (saveName) {
				if (saveName.equalsIgnoreCase ("DELETE")) {
				    this.deleteSavedType ("State_");
				    return;
				}saveName = this.lastState = "State_" + saveName;
				this.saved.put (saveName, this.viewer.getStateInfo ());
			    }, "~S");
	Clazz.defineMethod (c$, "getSavedState", 
			    function (saveName) {
				var name = (saveName.length > 0 ? "State_" + saveName : this.lastState);
				var script = this.saved.get (name);
				return (script == null ? "" : script);
			    }, "~S");
	Clazz.defineMethod (c$, "saveStructure", 
			    function (saveName) {
				if (saveName.equalsIgnoreCase ("DELETE")) {
				    this.deleteSavedType ("Shape_");
				    return;
				}saveName = this.lastShape = "Shape_" + saveName;
				this.saved.put (saveName, this.viewer.getStructureState ());
			    }, "~S");
	Clazz.defineMethod (c$, "getSavedStructure", 
			    function (saveName) {
				var name = (saveName.length > 0 ? "Shape_" + saveName : this.lastShape);
				var script = this.saved.get (name);
				return (script == null ? "" : script);
			    }, "~S");
	Clazz.defineMethod (c$, "saveCoordinates", 
			    function (saveName, bsSelected) {
				if (saveName.equalsIgnoreCase ("DELETE")) {
				    this.deleteSavedType ("Coordinates_");
				    return;
				}saveName = this.lastCoordinates = "Coordinates_" + saveName;
				this.saved.put (saveName, this.viewer.getCoordinateState (bsSelected));
			    }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getSavedCoordinates", 
			    function (saveName) {
				var name = (saveName.length > 0 ? "Coordinates_" + saveName : this.lastCoordinates);
				var script = this.saved.get (name);
				return (script == null ? "" : script);
			    }, "~S");
	Clazz.defineMethod (c$, "getOrientation", 
			    function () {
				return Clazz.innerTypeInstance (org.jmol.viewer.StateManager.Orientation, this, null, false);
			    });
	Clazz.defineMethod (c$, "getSavedOrientationText", 
			    function (saveName) {
				var o;
				if (saveName != null) {
				    o = this.getOrientation (saveName);
				    return (o == null ? "" : o.getMoveToText (true));
				}var sb =  new org.jmol.util.StringXBuilder ();
				var e = this.saved.keySet ().iterator ();
				while (e.hasNext ()) {
				    var name = e.next ();
				    if (!name.startsWith ("Orientation_")) {
					continue;
				    }sb.append ((this.saved.get (name)).getMoveToText (true));
				}
				return sb.toString ();
			    }, "~S");
	Clazz.defineMethod (c$, "saveOrientation", 
			    function (saveName) {
				if (saveName.equalsIgnoreCase ("DELETE")) {
				    this.deleteSavedType ("Orientation_");
				    return;
				}var o = Clazz.innerTypeInstance (org.jmol.viewer.StateManager.Orientation, this, null, saveName.equals ("default"));
				o.saveName = this.lastOrientation = "Orientation_" + saveName;
				this.saved.put (o.saveName, o);
			    }, "~S");
	Clazz.defineMethod (c$, "restoreOrientation", 
			    function (saveName, timeSeconds, isAll) {
				var o = this.getOrientation (saveName);
				if (o == null) return false;
				o.restore (timeSeconds, isAll);
				return true;
			    }, "~S,~N,~B");
	Clazz.defineMethod (c$, "getOrientation", 
			    ($fz = function (saveName) {
				var name = (saveName.length > 0 ? "Orientation_" + saveName : this.lastOrientation);
				return this.saved.get (name);
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "saveBonds", 
			    function (saveName) {
				if (saveName.equalsIgnoreCase ("DELETE")) {
				    this.deleteSavedType ("Bonds_");
				    return;
				}var b = Clazz.innerTypeInstance (org.jmol.viewer.StateManager.Connections, this, null);
				b.saveName = this.lastConnections = "Bonds_" + saveName;
				this.saved.put (b.saveName, b);
			    }, "~S");
	Clazz.defineMethod (c$, "restoreBonds", 
			    function (saveName) {
				var name = (saveName.length > 0 ? "Bonds_" + saveName : this.lastConnections);
				var c = this.saved.get (name);
				if (c == null) return false;
				c.restore ();
				return true;
			    }, "~S");
	Clazz.defineMethod (c$, "getFunctions", 
			    function (isStatic) {
				return (isStatic ? org.jmol.viewer.StateManager.staticFunctions : this.localFunctions);
			    }, "~B");
	Clazz.defineMethod (c$, "getFunctionCalls", 
			    function (selectedFunction) {
				if (selectedFunction == null) selectedFunction = "";
				var s =  new org.jmol.util.StringXBuilder ();
				var pt = selectedFunction.indexOf ("*");
				var isGeneric = (pt >= 0);
				var isStatic = (selectedFunction.indexOf ("static_") == 0);
				var namesOnly = (selectedFunction.equalsIgnoreCase ("names") || selectedFunction.equalsIgnoreCase ("static_names"));
				if (namesOnly) selectedFunction = "";
				if (isGeneric) selectedFunction = selectedFunction.substring (0, pt);
				selectedFunction = selectedFunction.toLowerCase ();
				var ht = this.getFunctions (isStatic);
				var names =  new Array (ht.size ());
				var e = ht.keySet ().iterator ();
				var n = 0;
				while (e.hasNext ()) {
				    var name = e.next ();
				    if (selectedFunction.length == 0 && !name.startsWith ("_") || name.equalsIgnoreCase (selectedFunction) || isGeneric && name.toLowerCase ().indexOf (selectedFunction) == 0) names[n++] = name;
				}
				java.util.Arrays.sort (names, 0, n);
				for (var i = 0; i < n; i++) {
				    var f = ht.get (names[i]);
				    s.append (namesOnly ? f.getSignature () : f.toString ());
				    s.appendC ('\n');
				}
				return s.toString ();
			    }, "~S");
	Clazz.defineMethod (c$, "clearFunctions", 
			    function () {
				org.jmol.viewer.StateManager.staticFunctions.clear ();
				this.localFunctions.clear ();
			    });
	c$.isStaticFunction = Clazz.defineMethod (c$, "isStaticFunction", 
						  ($fz = function (name) {
						      return name.startsWith ("static_");
						  }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "isFunction", 
			    function (name) {
				return (org.jmol.viewer.StateManager.isStaticFunction (name) ? org.jmol.viewer.StateManager.staticFunctions : this.localFunctions).containsKey (name);
			    }, "~S");
	Clazz.defineMethod (c$, "addFunction", 
			    function ($function) {
				(org.jmol.viewer.StateManager.isStaticFunction ($function.name) ? org.jmol.viewer.StateManager.staticFunctions : this.localFunctions).put ($function.name, $function);
			    }, "org.jmol.script.ScriptFunction");
	Clazz.defineMethod (c$, "removeFunction", 
			    function (name) {
				var $function = this.getFunction (name);
				if ($function == null) return;
				org.jmol.viewer.StateManager.staticFunctions.remove (name);
				this.localFunctions.remove (name);
			    }, "~S");
	Clazz.defineMethod (c$, "getFunction", 
			    function (name) {
				if (name == null) return null;
				var $function = (org.jmol.viewer.StateManager.isStaticFunction (name) ? org.jmol.viewer.StateManager.staticFunctions : this.localFunctions).get (name);
				return ($function == null || $function.aatoken == null ? null : $function);
			    }, "~S");
	c$.getJmolVersionInt = Clazz.defineMethod (c$, "getJmolVersionInt", 
						   function () {
						       var s = org.jmol.viewer.JmolConstants.version;
						       var version = -1;
						       try {
							   var i = s.indexOf (".");
							   if (i < 0) {
							       version = 100000 * Integer.parseInt (s);
							       return version;
							   }version = 100000 * Integer.parseInt (s.substring (0, i));
							   s = s.substring (i + 1);
							   i = s.indexOf (".");
							   if (i < 0) {
							       version += 1000 * Integer.parseInt (s);
							       return version;
							   }version += 1000 * Integer.parseInt (s.substring (0, i));
							   s = s.substring (i + 1);
							   i = s.indexOf ("_");
							   if (i >= 0) s = s.substring (0, i);
							   i = s.indexOf (" ");
							   if (i >= 0) s = s.substring (0, i);
							   version += Integer.parseInt (s);
						       } catch (e) {
							   if (Clazz.exceptionOf (e, NumberFormatException)) {
							   } else {
							       throw e;
							   }
						       }
						       return version;
						   });
	c$.setStateInfo = Clazz.defineMethod (c$, "setStateInfo", 
					      function (ht, i1, i2, key) {
						  var bs;
						  if (ht.containsKey (key)) {
						      bs = ht.get (key);
						  } else {
						      bs =  new org.jmol.util.BitSet ();
						      ht.put (key, bs);
						  }bs.setBits (i1, i2 + 1);
					      }, "java.util.Map,~N,~N,~S");
	c$.varClip = Clazz.defineMethod (c$, "varClip", 
					 function (name, sv, nMax) {
					     if (nMax > 0 && sv.length > nMax) sv = sv.substring (0, nMax) + " #...more (" + sv.length + " bytes -- use SHOW " + name + " or MESSAGE @" + name + " to view)";
					     return sv;
					 }, "~S,~S,~N");
	c$.getCommands = Clazz.defineMethod (c$, "getCommands", 
					     function (htDefine, htMore, selectCmd) {
						 var s =  new org.jmol.util.StringXBuilder ();
						 var setPrev = org.jmol.viewer.StateManager.getCommands2 (htDefine, s, null, selectCmd);
						 if (htMore != null) org.jmol.viewer.StateManager.getCommands2 (htMore, s, setPrev, "select");
						 return s.toString ();
					     }, "java.util.Map,java.util.Map,~S");
	c$.getCommands2 = Clazz.defineMethod (c$, "getCommands2", 
					      ($fz = function (ht, s, setPrev, selectCmd) {
						  if (ht == null) return "";
						  for (var entry, $entry = ht.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
						      var key = entry.getKey ();
						      var set = org.jmol.util.Escape.escape (entry.getValue ());
						      if (set.length < 5) continue;
						      set = selectCmd + " " + set;
						      if (!set.equals (setPrev)) org.jmol.viewer.StateManager.appendCmd (s, set);
						      setPrev = set;
						      if (key.indexOf ("-") != 0) org.jmol.viewer.StateManager.appendCmd (s, key);
						  }
						  return setPrev;
					      }, $fz.isPrivate = true, $fz), "java.util.Map,org.jmol.util.StringXBuilder,~S,~S");
	c$.appendCmd = Clazz.defineMethod (c$, "appendCmd", 
					   function (s, cmd) {
					       if (cmd.length == 0) return;
					       s.append ("  ").append (cmd).append (";\n");
					   }, "org.jmol.util.StringXBuilder,~S");
	c$.$StateManager$Orientation$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.saveName = null;
		this.rotationMatrix = null;
		this.xTrans = 0;
		this.yTrans = 0;
		this.zoom = 0;
		this.rotationRadius = 0;
		this.center = null;
		this.navCenter = null;
		this.xNav = NaN;
		this.yNav = NaN;
		this.navDepth = NaN;
		this.windowCenteredFlag = false;
		this.navigationMode = false;
		this.navigateSurface = false;
		this.moveToText = null;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.viewer.StateManager, "Orientation");
	    Clazz.prepareFields (c$, function () {
		this.rotationMatrix =  new org.jmol.util.Matrix3f ();
		this.center =  new org.jmol.util.Point3f ();
		this.navCenter =  new org.jmol.util.Point3f ();
	    });
	    Clazz.makeConstructor (c$, 
				   function (a) {
				       if (a) {
					   var b = this.b$["org.jmol.viewer.StateManager"].viewer.getModelSetAuxiliaryInfoValue ("defaultOrientationMatrix");
					   if (b == null) this.rotationMatrix.setIdentity ();
					   else this.rotationMatrix.set (b);
				       } else {
					   this.b$["org.jmol.viewer.StateManager"].viewer.getRotation (this.rotationMatrix);
				       }this.xTrans = this.b$["org.jmol.viewer.StateManager"].viewer.getTranslationXPercent ();
				       this.yTrans = this.b$["org.jmol.viewer.StateManager"].viewer.getTranslationYPercent ();
				       this.zoom = this.b$["org.jmol.viewer.StateManager"].viewer.getZoomSetting ();
				       this.center.setT (this.b$["org.jmol.viewer.StateManager"].viewer.getRotationCenter ());
				       this.windowCenteredFlag = this.b$["org.jmol.viewer.StateManager"].viewer.isWindowCentered ();
				       this.rotationRadius = this.b$["org.jmol.viewer.StateManager"].viewer.getRotationRadius ();
				       this.navigationMode = this.b$["org.jmol.viewer.StateManager"].viewer.getNavigationMode ();
				       this.navigateSurface = this.b$["org.jmol.viewer.StateManager"].viewer.getNavigateSurface ();
				       this.moveToText = this.b$["org.jmol.viewer.StateManager"].viewer.getMoveToText (-1);
				       if (this.navigationMode) {
					   this.xNav = this.b$["org.jmol.viewer.StateManager"].viewer.getNavigationOffsetPercent ('X');
					   this.yNav = this.b$["org.jmol.viewer.StateManager"].viewer.getNavigationOffsetPercent ('Y');
					   this.navDepth = this.b$["org.jmol.viewer.StateManager"].viewer.getNavigationDepthPercent ();
					   this.navCenter = org.jmol.util.Point3f.newP (this.b$["org.jmol.viewer.StateManager"].viewer.getNavigationCenter ());
				       }}, "~B");
	    Clazz.defineMethod (c$, "getMoveToText", 
				function (a) {
				    return (a ? "  " + this.moveToText + "\n  save orientation \"" + this.saveName.substring (12) + "\";\n" : this.moveToText);
				}, "~B");
	    Clazz.defineMethod (c$, "restore", 
				function (a, b) {
				    if (!b) {
					this.b$["org.jmol.viewer.StateManager"].viewer.setRotationMatrix (this.rotationMatrix);
					return;
				    }this.b$["org.jmol.viewer.StateManager"].viewer.setBooleanProperty ("windowCentered", this.windowCenteredFlag);
				    this.b$["org.jmol.viewer.StateManager"].viewer.setBooleanProperty ("navigationMode", this.navigationMode);
				    this.b$["org.jmol.viewer.StateManager"].viewer.setBooleanProperty ("navigateSurface", this.navigateSurface);
				    this.b$["org.jmol.viewer.StateManager"].viewer.moveTo (a, this.center, null, NaN, this.rotationMatrix, this.zoom, this.xTrans, this.yTrans, this.rotationRadius, this.navCenter, this.xNav, this.yNav, this.navDepth);
				}, "~N,~B");
	    c$ = Clazz.p0p ();
	};
	c$.$StateManager$Connections$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.saveName = null;
		this.bondCount = 0;
		this.connections = null;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.viewer.StateManager, "Connections");
	    Clazz.makeConstructor (c$, 
				   function () {
				       var a = this.b$["org.jmol.viewer.StateManager"].viewer.getModelSet ();
				       if (a == null) return;
				       this.bondCount = a.getBondCount ();
				       this.connections =  new Array (this.bondCount + 1);
				       var b = a.getBonds ();
				       for (var c = this.bondCount; --c >= 0; ) {
					   var d = b[c];
					   this.connections[c] =  new org.jmol.viewer.StateManager.Connection (d.getAtomIndex1 (), d.getAtomIndex2 (), d.getMad (), d.getColix (), d.order, d.getEnergy (), d.getShapeVisibilityFlags ());
				       }
				   });
	    Clazz.defineMethod (c$, "restore", 
				function () {
				    var a = this.b$["org.jmol.viewer.StateManager"].viewer.getModelSet ();
				    if (a == null) return;
				    a.deleteAllBonds ();
				    for (var b = this.bondCount; --b >= 0; ) {
					var c = this.connections[b];
					var d = a.getAtomCount ();
					if (c.atomIndex1 >= d || c.atomIndex2 >= d) continue;
					var e = a.bondAtoms (a.atoms[c.atomIndex1], a.atoms[c.atomIndex2], c.order, c.mad, null, c.energy, false, true);
					e.setColix (c.colix);
					e.setShapeVisibilityFlags (c.shapeVisibilityFlags);
				    }
				    for (var c = this.bondCount; --c >= 0; ) a.getBondAt (c).setIndex (c);

				    this.b$["org.jmol.viewer.StateManager"].viewer.setShapeProperty (1, "reportAll", null);
				});
	    c$ = Clazz.p0p ();
	};
	c$.$StateManager$GlobalSettings$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.htNonbooleanParameterValues = null;
		this.htBooleanParameterFlags = null;
		this.htPropertyFlagsRemoved = null;
		this.htUserVariables = null;
		this.ambientPercent = 45;
		this.diffusePercent = 84;
		this.specular = true;
		this.specularExponent = 6;
		this.phongExponent = 64;
		this.specularPercent = 22;
		this.specularPower = 40;
		this.zDepth = 0;
		this.zShadePower = 3;
		this.zSlab = 50;
		this.slabByMolecule = false;
		this.slabByAtom = false;
		this.allowEmbeddedScripts = true;
		this.appendNew = true;
		this.appletProxy = "";
		this.applySymmetryToBonds = false;
		this.atomTypes = "";
		this.autoBond = true;
		this.axesOrientationRasmol = false;
		this.bondRadiusMilliAngstroms = 150;
		this.bondTolerance = 0.45;
		this.defaultDirectory = "";
		this.defaultStructureDSSP = true;
		this.ptDefaultLattice = null;
		this.defaultLoadScript = "";
		this.defaultLoadFilter = "";
		this.defaultDropScript = "zap; load %FILE;if (%ALLOWCARTOONS && _loadScript == '' && defaultLoadScript == '' && _filetype == 'Pdb') {if ({(protein or nucleic)&*/1.1} && {*/1.1}[1].groupindex != {*/1.1}[0].groupindex){select protein or nucleic;cartoons only;}if ({visible}){color structure}else{wireframe -0.1};if (!{visible}){spacefill 23%};select *}";
		this.forceAutoBond = false;
		this.fractionalRelative = false;
		this.inlineNewlineChar = '|';
		this.loadFormat = "http://www.rcsb.org/pdb/files/%FILE.pdb.gz";
		this.loadLigandFormat = "http://www.rcsb.org/pdb/files/ligand/%FILE.cif";
		this.nmrUrlFormat = "http://www.nmrdb.org/predictor?smiles=";
		this.smilesUrlFormat = "http://cactus.nci.nih.gov/chemical/structure/%FILE/file?format=sdf&get3d=True";
		this.nihResolverFormat = "http://cactus.nci.nih.gov/chemical/structure/%FILE";
		this.pubChemFormat = "http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/%FILE/SDF?record_type=3d";
		this.edsUrlFormat = "http://eds.bmc.uu.se/eds/dfs/%LC13/%LCFILE/%LCFILE.omap";
		this.edsUrlCutoff = "load('http://eds.bmc.uu.se/eds/dfs/%LC13/%LCFILE/%LCFILE.sfdat').lines.find('MAP_SIGMA').split(' ')[2]";
		this.edsUrlOptions = "within 2.0 {*}";
		this.minBondDistance = 0.4;
		this.minPixelSelRadius = 6;
		this.pdbAddHydrogens = false;
		this.pdbGetHeader = false;
		this.pdbSequential = false;
		this.percentVdwAtom = 23;
		this.smallMoleculeMaxAtoms = 40000;
		this.smartAromatic = true;
		this.zeroBasedXyzRasmol = false;
		this.legacyAutoBonding = false;
		this.allowRotateSelected = false;
		this.allowMoveAtoms = false;
		this.perspectiveDepth = true;
		this.visualRange = 5;
		this.solventOn = false;
		this.defaultAngleLabel = "%VALUE %UNITS";
		this.defaultDistanceLabel = "%VALUE %UNITS";
		this.defaultTorsionLabel = "%VALUE %UNITS";
		this.justifyMeasurements = false;
		this.measureAllModels = false;
		this.minimizationSteps = 100;
		this.minimizationRefresh = true;
		this.minimizationSilent = false;
		this.minimizationCriterion = 0.001;
		this.antialiasDisplay = false;
		this.antialiasImages = true;
		this.imageState = true;
		this.antialiasTranslucent = true;
		this.displayCellParameters = true;
		this.dotsSelectedOnly = false;
		this.dotSurface = true;
		this.dotDensity = 3;
		this.dotScale = 1;
		this.meshScale = 1;
		this.dynamicMeasurements = false;
		this.greyscaleRendering = false;
		this.isosurfaceKey = false;
		this.isosurfacePropertySmoothing = true;
		this.isosurfacePropertySmoothingPower = 7;
		this.repaintWaitMs = 1000;
		this.showHiddenSelectionHalos = false;
		this.showKeyStrokes = true;
		this.showMeasurements = true;
		this.showTiming = false;
		this.zoomLarge = true;
		this.backgroundImageFileName = null;
		this.partialDots = false;
		this.bondModeOr = false;
		this.hbondsBackbone = false;
		this.hbondsAngleMinimum = 90;
		this.hbondsDistanceMaximum = 3.25;
		this.hbondsRasmol = true;
		this.hbondsSolid = false;
		this.modeMultipleBond = 2;
		this.showHydrogens = true;
		this.showMultipleBonds = true;
		this.ssbondsBackbone = false;
		this.multipleBondSpacing = -1;
		this.multipleBondRadiusFactor = 0;
		this.cartoonBaseEdges = false;
		this.cartoonRockets = false;
		this.cartoonFancy = false;
		this.chainCaseSensitive = false;
		this.hermiteLevel = 0;
		this.highResolutionFlag = false;
		this.rangeSelected = false;
		this.rasmolHydrogenSetting = true;
		this.rasmolHeteroSetting = true;
		this.ribbonAspectRatio = 16;
		this.ribbonBorder = false;
		this.rocketBarrels = false;
		this.sheetSmoothing = 1;
		this.traceAlpha = true;
		this.allowGestures = false;
		this.allowModelkit = true;
		this.allowMultiTouch = true;
		this.allowKeyStrokes = false;
		this.animationFps = 10;
		this.atomPicking = true;
		this.autoFps = false;
		this.axesMode = null;
		this.axesScale = 2;
		this.bondPicking = false;
		this.cameraDepth = 3.0;
		this.dataSeparator = "~~~";
		this.debugScript = false;
		this.defaultDrawArrowScale = 0.5;
		this.defaultLabelXYZ = "%a";
		this.defaultLabelPDB = "%m%r";
		this.defaultTranslucent = 0.5;
		this.delayMaximumMs = 0;
		this.dipoleScale = 1.0;
		this.disablePopupMenu = false;
		this.dragSelected = false;
		this.drawHover = false;
		this.drawPicking = false;
		this.dsspCalcHydrogen = true;
		this.energyUnits = "kJ";
		this.helpPath = "http://chemapps.stolaf.edu/jmol/docs/index.htm";
		this.fontScaling = false;
		this.fontCaching = true;
		this.forceField = "MMFF";
		this.helixStep = 1;
		this.hideNameInPopup = false;
		this.hoverDelayMs = 500;
		this.loadAtomDataTolerance = 0.01;
		this.logCommands = false;
		this.logGestures = false;
		this.measureDistanceUnits = "nanometers";
		this.measurementLabels = true;
		this.messageStyleChime = false;
		this.monitorEnergy = false;
		this.multiProcessor = true;
		this.pickingSpinRate = 10;
		this.pickLabel = "";
		this.pointGroupDistanceTolerance = 0.2;
		this.pointGroupLinearTolerance = 8.0;
		this.preserveState = true;
		this.propertyColorScheme = "roygb";
		this.quaternionFrame = "p";
		this.saveProteinStructureState = true;
		this.solventProbeRadius = 1.2;
		this.scriptDelay = 0;
		this.selectAllModels = true;
		this.statusReporting = true;
		this.strandCountForStrands = 5;
		this.strandCountForMeshRibbon = 7;
		this.strutSpacing = 6;
		this.strutLengthMaximum = 7.0;
		this.strutDefaultRadius = 0.3;
		this.strutsMultiple = false;
		this.useArcBall = false;
		this.useMinimizationThread = true;
		this.useNumberLocalization = true;
		this.useScriptQueue = true;
		this.waitForMoveTo = true;
		this.vectorScale = 1;
		this.vectorSymmetry = false;
		this.vibrationPeriod = 1;
		this.vibrationScale = 1;
		this.wireframeRotation = false;
		this.hideNavigationPoint = false;
		this.navigationMode = false;
		this.navigateSurface = false;
		this.navigationPeriodic = false;
		this.navigationSpeed = 5;
		this.showNavigationPointAlways = false;
		this.stereoState = null;
		this.modelKitMode = false;
		this.objColors = null;
		this.objStateOn = null;
		this.objMad = null;
		this.ellipsoidAxes = false;
		this.ellipsoidDots = false;
		this.ellipsoidArcs = false;
		this.ellipsoidFill = false;
		this.ellipsoidBall = true;
		this.ellipsoidDotCount = 200;
		this.ellipsoidAxisDiameter = 0.02;
		this.testFlag1 = false;
		this.testFlag2 = false;
		this.testFlag3 = false;
		this.testFlag4 = false;
		this.structureList = null;
		this.haveSetStructureList = false;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.viewer.StateManager, "GlobalSettings");
	    Clazz.prepareFields (c$, function () {
		this.htUserVariables =  new java.util.Hashtable ();
		this.ptDefaultLattice =  new org.jmol.util.Point3f ();
		this.axesMode = org.jmol.constant.EnumAxesMode.BOUNDBOX;
		this.objColors =  Clazz.newIntArray (8, 0);
		this.objStateOn =  Clazz.newBooleanArray (8, false);
		this.objMad =  Clazz.newIntArray (8, 0);
		this.structureList =  new java.util.Hashtable ();
		{
		    this.structureList.put (org.jmol.constant.EnumStructure.TURN, [30, 90, -15, 95]);
		    this.structureList.put (org.jmol.constant.EnumStructure.SHEET, [-180, -10, 70, 180, -180, -45, -180, -130, 140, 180, 90, 180]);
		    this.structureList.put (org.jmol.constant.EnumStructure.HELIX, [-160, 0, -100, 45]);
		}});
	    Clazz.makeConstructor (c$, 
				   function (a, b) {
				       this.registerAllValues (a, b);
				   }, "org.jmol.viewer.StateManager.GlobalSettings,~B");
	    Clazz.defineMethod (c$, "clear", 
				function () {
				    var a = this.htUserVariables.keySet ().iterator ();
				    while (a.hasNext ()) {
					var b = a.next ();
					if (b.charAt (0) == '@' || b.startsWith ("site_")) a.remove ();
				    }
				    this.setPicked (-1);
				    this.setParamI ("_atomhovered", -1);
				    this.setParamS ("_pickinfo", "");
				    this.setParamB ("selectionhalos", false);
				    this.setParamB ("hidenotselected", false);
				    this.setParamB ("measurementlabels", this.measurementLabels = true);
				    this.setParamB ("drawHover", this.drawHover = false);
				});
	    Clazz.defineMethod (c$, "registerAllValues", 
				function (a, b) {
				    this.htNonbooleanParameterValues =  new java.util.Hashtable ();
				    this.htBooleanParameterFlags =  new java.util.Hashtable ();
				    this.htPropertyFlagsRemoved =  new java.util.Hashtable ();
				    if (a != null) {
					if (!b) this.htUserVariables = a.htUserVariables;
					this.debugScript = a.debugScript;
					this.disablePopupMenu = a.disablePopupMenu;
					this.messageStyleChime = a.messageStyleChime;
					this.defaultDirectory = a.defaultDirectory;
					this.allowGestures = a.allowGestures;
					this.allowModelkit = a.allowModelkit;
					this.allowMultiTouch = a.allowMultiTouch;
					this.allowKeyStrokes = a.allowKeyStrokes;
					this.legacyAutoBonding = a.legacyAutoBonding;
					this.useScriptQueue = a.useScriptQueue;
					this.useArcBall = a.useArcBall;
				    }for (var item, $item = 0, $$item = org.jmol.constant.EnumCallback.values (); $item < $$item.length && ((item = $$item[$item]) || true); $item++) this.resetValue (item.name () + "Callback", a);

				    this.setParamI ("historyLevel", 0);
				    this.setParamI ("depth", 0);
				    this.setParamF ("gestureSwipeFactor", 1.0);
				    this.setParamB ("hideNotSelected", false);
				    this.setParamS ("hoverLabel", "");
				    this.setParamB ("isKiosk", this.b$["org.jmol.viewer.StateManager"].viewer.isKiosk ());
				    this.setParamS ("logFile", this.b$["org.jmol.viewer.StateManager"].viewer.getLogFile ());
				    this.setParamI ("logLevel", org.jmol.util.Logger.getLogLevel ());
				    this.setParamF ("mouseWheelFactor", 1.15);
				    this.setParamF ("mouseDragFactor", 1.0);
				    this.setParamI ("navFps", 10);
				    this.setParamI ("navigationDepth", 0);
				    this.setParamI ("navigationSlab", 0);
				    this.setParamI ("navX", 0);
				    this.setParamI ("navY", 0);
				    this.setParamI ("navZ", 0);
				    this.setParamS ("pathForAllFiles", "");
				    this.setParamI ("perspectiveModel", 11);
				    this.setParamS ("picking", "identify");
				    this.setParamS ("pickingStyle", "toggle");
				    this.setParamB ("refreshing", true);
				    this.setParamI ("rotationRadius", 0);
				    this.setParamI ("scaleAngstromsPerInch", 0);
				    this.setParamI ("scriptReportingLevel", 0);
				    this.setParamB ("selectionHalos", false);
				    this.setParamB ("showaxes", false);
				    this.setParamB ("showboundbox", false);
				    this.setParamB ("showfrank", false);
				    this.setParamB ("showUnitcell", false);
				    this.setParamI ("slab", 100);
				    this.setParamB ("slabEnabled", false);
				    this.setParamF ("slabrange", 0);
				    this.setParamI ("spinX", 0);
				    this.setParamI ("spinY", 30);
				    this.setParamI ("spinZ", 0);
				    this.setParamI ("spinFps", 30);
				    this.setParamI ("stereoDegrees", -5);
				    this.setParamI ("stateversion", 0);
				    this.setParamB ("syncScript", this.b$["org.jmol.viewer.StateManager"].viewer.getStatusManager ().syncingScripts);
				    this.setParamB ("syncMouse", this.b$["org.jmol.viewer.StateManager"].viewer.getStatusManager ().syncingMouse);
				    this.setParamB ("syncStereo", this.b$["org.jmol.viewer.StateManager"].viewer.getStatusManager ().stereoSync);
				    this.setParamB ("windowCentered", true);
				    this.setParamB ("zoomEnabled", true);
				    this.setParamI ("zDepth", 0);
				    this.setParamB ("zShade", false);
				    this.setParamI ("zSlab", 50);
				    this.setParamI ("_version", org.jmol.viewer.StateManager.getJmolVersionInt ());
				    this.setParamB ("axesWindow", true);
				    this.setParamB ("axesMolecular", false);
				    this.setParamB ("axesPosition", false);
				    this.setParamB ("axesUnitcell", false);
				    this.setParamI ("backgroundModel", 0);
				    this.setParamB ("colorRasmol", false);
				    this.setParamS ("currentLocalPath", "");
				    this.setParamS ("defaultLattice", "{0 0 0}");
				    this.setParamS ("defaultColorScheme", "Jmol");
				    this.setParamS ("defaultDirectoryLocal", "");
				    this.setParamS ("defaults", "Jmol");
				    this.setParamS ("defaultVDW", "Jmol");
				    this.setParamS ("exportDrivers", "Idtf;Maya;Povray;Vrml;X3d;Tachyon;Obj");
				    this.setParamI ("propertyAtomNumberColumnCount", 0);
				    this.setParamI ("propertyAtomNumberField", 0);
				    this.setParamI ("propertyDataColumnCount", 0);
				    this.setParamI ("propertyDataField", 0);
				    this.setParamB ("undo", true);
				    this.setParamB ("allowEmbeddedScripts", this.allowEmbeddedScripts);
				    this.setParamB ("allowGestures", this.allowGestures);
				    this.setParamB ("allowKeyStrokes", this.allowKeyStrokes);
				    this.setParamB ("allowModelkit", this.allowModelkit);
				    this.setParamB ("allowMultiTouch", this.allowMultiTouch);
				    this.setParamB ("allowRotateSelected", this.allowRotateSelected);
				    this.setParamB ("allowMoveAtoms", this.allowMoveAtoms);
				    this.setParamI ("ambientPercent", this.ambientPercent);
				    this.setParamI ("animationFps", this.animationFps);
				    this.setParamB ("antialiasImages", this.antialiasImages);
				    this.setParamB ("antialiasDisplay", this.antialiasDisplay);
				    this.setParamB ("antialiasTranslucent", this.antialiasTranslucent);
				    this.setParamB ("appendNew", this.appendNew);
				    this.setParamS ("appletProxy", this.appletProxy);
				    this.setParamB ("applySymmetryToBonds", this.applySymmetryToBonds);
				    this.setParamB ("atomPicking", this.atomPicking);
				    this.setParamS ("atomTypes", this.atomTypes);
				    this.setParamB ("autoBond", this.autoBond);
				    this.setParamB ("autoFps", this.autoFps);
				    this.setParamI ("axesMode", this.axesMode.getCode ());
				    this.setParamF ("axesScale", this.axesScale);
				    this.setParamB ("axesOrientationRasmol", this.axesOrientationRasmol);
				    this.setParamB ("bondModeOr", this.bondModeOr);
				    this.setParamB ("bondPicking", this.bondPicking);
				    this.setParamI ("bondRadiusMilliAngstroms", this.bondRadiusMilliAngstroms);
				    this.setParamF ("bondTolerance", this.bondTolerance);
				    this.setParamF ("cameraDepth", this.cameraDepth);
				    this.setParamB ("cartoonBaseEdges", this.cartoonBaseEdges);
				    this.setParamB ("cartoonFancy", this.cartoonFancy);
				    this.setParamB ("cartoonRockets", this.cartoonRockets);
				    this.setParamB ("chainCaseSensitive", this.chainCaseSensitive);
				    this.setParamS ("dataSeparator", this.dataSeparator);
				    this.setParamB ("debugScript", this.debugScript);
				    this.setParamS ("defaultAngleLabel", this.defaultAngleLabel);
				    this.setParamF ("defaultDrawArrowScale", this.defaultDrawArrowScale);
				    this.setParamS ("defaultDirectory", this.defaultDirectory);
				    this.setParamS ("defaultDistanceLabel", this.defaultDistanceLabel);
				    this.setParamS ("defaultDropScript", this.defaultDropScript);
				    this.setParamS ("defaultLabelPDB", this.defaultLabelPDB);
				    this.setParamS ("defaultLabelXYZ", this.defaultLabelXYZ);
				    this.setParamS ("defaultLoadFilter", this.defaultLoadFilter);
				    this.setParamS ("defaultLoadScript", this.defaultLoadScript);
				    this.setParamB ("defaultStructureDSSP", this.defaultStructureDSSP);
				    this.setParamS ("defaultTorsionLabel", this.defaultTorsionLabel);
				    this.setParamF ("defaultTranslucent", this.defaultTranslucent);
				    this.setParamI ("delayMaximumMs", this.delayMaximumMs);
				    this.setParamI ("diffusePercent", this.diffusePercent);
				    this.setParamF ("dipoleScale", this.dipoleScale);
				    this.setParamB ("disablePopupMenu", this.disablePopupMenu);
				    this.setParamB ("displayCellParameters", this.displayCellParameters);
				    this.setParamI ("dotDensity", this.dotDensity);
				    this.setParamI ("dotScale", this.dotScale);
				    this.setParamB ("dotsSelectedOnly", this.dotsSelectedOnly);
				    this.setParamB ("dotSurface", this.dotSurface);
				    this.setParamB ("dragSelected", this.dragSelected);
				    this.setParamB ("drawHover", this.drawHover);
				    this.setParamB ("drawPicking", this.drawPicking);
				    this.setParamB ("dsspCalculateHydrogenAlways", this.dsspCalcHydrogen);
				    this.setParamB ("dynamicMeasurements", this.dynamicMeasurements);
				    this.setParamS ("edsUrlFormat", this.edsUrlFormat);
				    this.setParamS ("edsUrlCutoff", this.edsUrlCutoff);
				    this.setParamB ("ellipsoidArcs", this.ellipsoidArcs);
				    this.setParamB ("ellipsoidAxes", this.ellipsoidAxes);
				    this.setParamF ("ellipsoidAxisDiameter", this.ellipsoidAxisDiameter);
				    this.setParamB ("ellipsoidBall", this.ellipsoidBall);
				    this.setParamI ("ellipsoidDotCount", this.ellipsoidDotCount);
				    this.setParamB ("ellipsoidDots", this.ellipsoidDots);
				    this.setParamB ("ellipsoidFill", this.ellipsoidFill);
				    this.setParamS ("energyUnits", this.energyUnits);
				    this.setParamB ("fontScaling", this.fontScaling);
				    this.setParamB ("fontCaching", this.fontCaching);
				    this.setParamB ("forceAutoBond", this.forceAutoBond);
				    this.setParamS ("forceField", this.forceField);
				    this.setParamB ("fractionalRelative", this.fractionalRelative);
				    this.setParamB ("greyscaleRendering", this.greyscaleRendering);
				    this.setParamF ("hbondsAngleMinimum", this.hbondsAngleMinimum);
				    this.setParamF ("hbondsDistanceMaximum", this.hbondsDistanceMaximum);
				    this.setParamB ("hbondsBackbone", this.hbondsBackbone);
				    this.setParamB ("hbondsRasmol", this.hbondsRasmol);
				    this.setParamB ("hbondsSolid", this.hbondsSolid);
				    this.setParamI ("helixStep", this.helixStep);
				    this.setParamS ("helpPath", this.helpPath);
				    this.setParamI ("hermiteLevel", this.hermiteLevel);
				    this.setParamB ("hideNameInPopup", this.hideNameInPopup);
				    this.setParamB ("hideNavigationPoint", this.hideNavigationPoint);
				    this.setParamB ("highResolution", this.highResolutionFlag);
				    this.setParamF ("hoverDelay", this.hoverDelayMs / 1000);
				    this.setParamB ("imageState", this.imageState);
				    this.setParamB ("isosurfaceKey", this.isosurfaceKey);
				    this.setParamB ("isosurfacePropertySmoothing", this.isosurfacePropertySmoothing);
				    this.setParamI ("isosurfacePropertySmoothingPower", this.isosurfacePropertySmoothingPower);
				    this.setParamB ("justifyMeasurements", this.justifyMeasurements);
				    this.setParamB ("legacyAutoBonding", this.legacyAutoBonding);
				    this.setParamF ("loadAtomDataTolerance", this.loadAtomDataTolerance);
				    this.setParamS ("loadFormat", this.loadFormat);
				    this.setParamS ("loadLigandFormat", this.loadLigandFormat);
				    this.setParamB ("logCommands", this.logCommands);
				    this.setParamB ("logGestures", this.logGestures);
				    this.setParamB ("measureAllModels", this.measureAllModels);
				    this.setParamB ("measurementLabels", this.measurementLabels);
				    this.setParamS ("measurementUnits", this.measureDistanceUnits);
				    this.setParamI ("meshScale", this.meshScale);
				    this.setParamB ("messageStyleChime", this.messageStyleChime);
				    this.setParamF ("minBondDistance", this.minBondDistance);
				    this.setParamI ("minPixelSelRadius", this.minPixelSelRadius);
				    this.setParamI ("minimizationSteps", this.minimizationSteps);
				    this.setParamB ("minimizationRefresh", this.minimizationRefresh);
				    this.setParamB ("minimizationSilent", this.minimizationSilent);
				    this.setParamF ("minimizationCriterion", this.minimizationCriterion);
				    this.setParamB ("modelKitMode", this.modelKitMode);
				    this.setParamB ("monitorEnergy", this.monitorEnergy);
				    this.setParamF ("multipleBondRadiusFactor", this.multipleBondRadiusFactor);
				    this.setParamF ("multipleBondSpacing", this.multipleBondSpacing);
				    this.setParamB ("multiProcessor", this.multiProcessor && (org.jmol.viewer.Viewer.nProcessors > 1));
				    this.setParamB ("navigationMode", this.navigationMode);
				    this.setParamB ("navigateSurface", this.navigateSurface);
				    this.setParamB ("navigationPeriodic", this.navigationPeriodic);
				    this.setParamF ("navigationSpeed", this.navigationSpeed);
				    this.setParamS ("nmrUrlFormat", this.nmrUrlFormat);
				    this.setParamB ("partialDots", this.partialDots);
				    this.setParamB ("pdbAddHydrogens", this.pdbAddHydrogens);
				    this.setParamB ("pdbGetHeader", this.pdbGetHeader);
				    this.setParamB ("pdbSequential", this.pdbSequential);
				    this.setParamB ("perspectiveDepth", this.perspectiveDepth);
				    this.setParamI ("percentVdwAtom", this.percentVdwAtom);
				    this.setParamI ("phongExponent", this.phongExponent);
				    this.setParamI ("pickingSpinRate", this.pickingSpinRate);
				    this.setParamS ("pickLabel", this.pickLabel);
				    this.setParamF ("pointGroupLinearTolerance", this.pointGroupLinearTolerance);
				    this.setParamF ("pointGroupDistanceTolerance", this.pointGroupDistanceTolerance);
				    this.setParamB ("preserveState", this.preserveState);
				    this.setParamS ("propertyColorScheme", this.propertyColorScheme);
				    this.setParamS ("quaternionFrame", this.quaternionFrame);
				    this.setParamB ("rangeSelected", this.rangeSelected);
				    this.setParamI ("repaintWaitMs", this.repaintWaitMs);
				    this.setParamI ("ribbonAspectRatio", this.ribbonAspectRatio);
				    this.setParamB ("ribbonBorder", this.ribbonBorder);
				    this.setParamB ("rocketBarrels", this.rocketBarrels);
				    this.setParamB ("saveProteinStructureState", this.saveProteinStructureState);
				    this.setParamB ("scriptqueue", this.useScriptQueue);
				    this.setParamB ("selectAllModels", this.selectAllModels);
				    this.setParamB ("selectHetero", this.rasmolHeteroSetting);
				    this.setParamB ("selectHydrogen", this.rasmolHydrogenSetting);
				    this.setParamF ("sheetSmoothing", this.sheetSmoothing);
				    this.setParamB ("showHiddenSelectionHalos", this.showHiddenSelectionHalos);
				    this.setParamB ("showHydrogens", this.showHydrogens);
				    this.setParamB ("showKeyStrokes", this.showKeyStrokes);
				    this.setParamB ("showMeasurements", this.showMeasurements);
				    this.setParamB ("showMultipleBonds", this.showMultipleBonds);
				    this.setParamB ("showNavigationPointAlways", this.showNavigationPointAlways);
				    this.setParamI ("showScript", this.scriptDelay);
				    this.setParamB ("showtiming", this.showTiming);
				    this.setParamB ("slabByMolecule", this.slabByMolecule);
				    this.setParamB ("slabByAtom", this.slabByAtom);
				    this.setParamB ("smartAromatic", this.smartAromatic);
				    this.setParamI ("smallMoleculeMaxAtoms", this.smallMoleculeMaxAtoms);
				    this.setParamS ("smilesUrlFormat", this.smilesUrlFormat);
				    this.setParamS ("nihResolverFormat", this.nihResolverFormat);
				    this.setParamS ("pubChemFormat", this.pubChemFormat);
				    this.setParamB ("solventProbe", this.solventOn);
				    this.setParamF ("solventProbeRadius", this.solventProbeRadius);
				    this.setParamB ("specular", this.specular);
				    this.setParamI ("specularExponent", this.specularExponent);
				    this.setParamI ("specularPercent", this.specularPercent);
				    this.setParamI ("specularPower", this.specularPower);
				    this.setParamB ("ssbondsBackbone", this.ssbondsBackbone);
				    this.setParamB ("statusReporting", this.statusReporting);
				    this.setParamI ("strandCount", this.strandCountForStrands);
				    this.setParamI ("strandCountForStrands", this.strandCountForStrands);
				    this.setParamI ("strandCountForMeshRibbon", this.strandCountForMeshRibbon);
				    this.setParamF ("strutDefaultRadius", this.strutDefaultRadius);
				    this.setParamF ("strutLengthMaximum", this.strutLengthMaximum);
				    this.setParamI ("strutSpacing", this.strutSpacing);
				    this.setParamB ("strutsMultiple", this.strutsMultiple);
				    this.setParamB ("testFlag1", this.testFlag1);
				    this.setParamB ("testFlag2", this.testFlag2);
				    this.setParamB ("testFlag3", this.testFlag3);
				    this.setParamB ("testFlag4", this.testFlag4);
				    this.setParamB ("traceAlpha", this.traceAlpha);
				    this.setParamB ("useArcBall", this.useArcBall);
				    this.setParamB ("useMinimizationThread", this.useMinimizationThread);
				    this.setParamB ("useNumberLocalization", this.useNumberLocalization);
				    this.setParamF ("vectorScale", this.vectorScale);
				    this.setParamB ("vectorSymmetry", this.vectorSymmetry);
				    this.setParamF ("vibrationPeriod", this.vibrationPeriod);
				    this.setParamF ("vibrationScale", this.vibrationScale);
				    this.setParamF ("visualRange", this.visualRange);
				    this.setParamB ("waitForMoveTo", this.waitForMoveTo);
				    this.setParamB ("wireframeRotation", this.wireframeRotation);
				    this.setParamI ("zDepth", this.zDepth);
				    this.setParamB ("zeroBasedXyzRasmol", this.zeroBasedXyzRasmol);
				    this.setParamB ("zoomLarge", this.zoomLarge);
				    this.setParamI ("zShadePower", this.zShadePower);
				    this.setParamI ("zSlab", this.zSlab);
				}, "org.jmol.viewer.StateManager.GlobalSettings,~B");
	    Clazz.defineMethod (c$, "getLoadState", 
				function (a) {
				    var b =  new org.jmol.util.StringXBuilder ();
				    org.jmol.viewer.StateManager.appendCmd (b, "set allowEmbeddedScripts false");
				    if (this.allowEmbeddedScripts) this.setParamB ("allowEmbeddedScripts", true);
				    org.jmol.viewer.StateManager.appendCmd (b, "set appendNew " + this.appendNew);
				    org.jmol.viewer.StateManager.appendCmd (b, "set appletProxy " + org.jmol.util.Escape.escapeStr (this.appletProxy));
				    org.jmol.viewer.StateManager.appendCmd (b, "set applySymmetryToBonds " + this.applySymmetryToBonds);
				    if (this.atomTypes.length > 0) org.jmol.viewer.StateManager.appendCmd (b, "set atomTypes " + org.jmol.util.Escape.escapeStr (this.atomTypes));
				    org.jmol.viewer.StateManager.appendCmd (b, "set autoBond " + this.autoBond);
				    if (this.axesOrientationRasmol) org.jmol.viewer.StateManager.appendCmd (b, "set axesOrientationRasmol true");
				    org.jmol.viewer.StateManager.appendCmd (b, "set bondRadiusMilliAngstroms " + this.bondRadiusMilliAngstroms);
				    org.jmol.viewer.StateManager.appendCmd (b, "set bondTolerance " + this.bondTolerance);
				    org.jmol.viewer.StateManager.appendCmd (b, "set defaultLattice " + org.jmol.util.Escape.escapePt (this.ptDefaultLattice));
				    org.jmol.viewer.StateManager.appendCmd (b, "set defaultLoadFilter " + org.jmol.util.Escape.escapeStr (this.defaultLoadFilter));
				    org.jmol.viewer.StateManager.appendCmd (b, "set defaultLoadScript \"\"");
				    if (this.defaultLoadScript.length > 0) this.setParamS ("defaultLoadScript", this.defaultLoadScript);
				    org.jmol.viewer.StateManager.appendCmd (b, "set defaultStructureDssp " + this.defaultStructureDSSP);
				    var c = this.b$["org.jmol.viewer.StateManager"].viewer.getDefaultVdwTypeNameOrData (-2147483648, null);
				    org.jmol.viewer.StateManager.appendCmd (b, "set defaultVDW " + c);
				    if (c.equals ("User")) org.jmol.viewer.StateManager.appendCmd (b, this.b$["org.jmol.viewer.StateManager"].viewer.getDefaultVdwTypeNameOrData (2147483647, null));
				    org.jmol.viewer.StateManager.appendCmd (b, "set forceAutoBond " + this.forceAutoBond);
				    org.jmol.viewer.StateManager.appendCmd (b, "#set defaultDirectory " + org.jmol.util.Escape.escapeStr (this.defaultDirectory));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set loadFormat " + org.jmol.util.Escape.escapeStr (this.loadFormat));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set loadLigandFormat " + org.jmol.util.Escape.escapeStr (this.loadLigandFormat));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set smilesUrlFormat " + org.jmol.util.Escape.escapeStr (this.smilesUrlFormat));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set nihResolverFormat " + org.jmol.util.Escape.escapeStr (this.nihResolverFormat));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set pubChemFormat " + org.jmol.util.Escape.escapeStr (this.pubChemFormat));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set edsUrlFormat " + org.jmol.util.Escape.escapeStr (this.edsUrlFormat));
				    org.jmol.viewer.StateManager.appendCmd (b, "#set edsUrlCutoff " + org.jmol.util.Escape.escapeStr (this.edsUrlCutoff));
				    org.jmol.viewer.StateManager.appendCmd (b, "set legacyAutoBonding " + this.legacyAutoBonding);
				    org.jmol.viewer.StateManager.appendCmd (b, "set minBondDistance " + this.minBondDistance);
				    org.jmol.viewer.StateManager.appendCmd (b, "set minimizationCriterion  " + this.minimizationCriterion);
				    org.jmol.viewer.StateManager.appendCmd (b, "set minimizationSteps  " + this.minimizationSteps);
				    org.jmol.viewer.StateManager.appendCmd (b, "set pdbAddHydrogens " + (a != null && a.get ("pdbNoHydrogens") == null ? this.pdbAddHydrogens : false));
				    org.jmol.viewer.StateManager.appendCmd (b, "set pdbGetHeader " + this.pdbGetHeader);
				    org.jmol.viewer.StateManager.appendCmd (b, "set pdbSequential " + this.pdbSequential);
				    org.jmol.viewer.StateManager.appendCmd (b, "set percentVdwAtom " + this.percentVdwAtom);
				    org.jmol.viewer.StateManager.appendCmd (b, "set smallMoleculeMaxAtoms " + this.smallMoleculeMaxAtoms);
				    org.jmol.viewer.StateManager.appendCmd (b, "set smartAromatic " + this.smartAromatic);
				    if (this.zeroBasedXyzRasmol) org.jmol.viewer.StateManager.appendCmd (b, "set zeroBasedXyzRasmol true");
				    return b.toString ();
				}, "java.util.Map");
	    Clazz.defineMethod (c$, "setDefaultLattice", 
				function (a) {
				    this.ptDefaultLattice.setT (a);
				}, "org.jmol.util.Point3f");
	    Clazz.defineMethod (c$, "getDefaultLattice", 
				function () {
				    return this.ptDefaultLattice;
				});
	    Clazz.defineMethod (c$, "getWindowState", 
				function (a, b, c) {
				    var d =  new org.jmol.util.StringXBuilder ();
				    if (a != null) {
					a.append ("  initialize;\n  set refreshing false;\n  _setWindowState;\n");
					d.append ("\nfunction _setWindowState() {\n");
				    }if (b != 0) d.append ("# preferredWidthHeight ").appendI (b).append (" ").appendI (c).append (";\n");
				    d.append ("# width ").appendI (b == 0 ? this.b$["org.jmol.viewer.StateManager"].viewer.getScreenWidth () : b).append (";\n# height ").appendI (c == 0 ? this.b$["org.jmol.viewer.StateManager"].viewer.getScreenHeight () : c).append (";\n");
				    org.jmol.viewer.StateManager.appendCmd (d, "stateVersion = " + this.getParameter ("_version"));
				    org.jmol.viewer.StateManager.appendCmd (d, "background " + org.jmol.util.Escape.escapeColor (this.objColors[0]));
				    for (var e = 1; e < 8; e++) if (this.objColors[e] != 0) org.jmol.viewer.StateManager.appendCmd (d, org.jmol.viewer.StateManager.getObjectNameFromId (e) + "Color = \"" + org.jmol.util.Escape.escapeColor (this.objColors[e]) + '"');

				    if (this.backgroundImageFileName != null) org.jmol.viewer.StateManager.appendCmd (d, "background IMAGE /*file*/" + org.jmol.util.Escape.escapeStr (this.backgroundImageFileName));
				    d.append (this.getSpecularState ());
				    org.jmol.viewer.StateManager.appendCmd (d, "statusReporting  = " + this.statusReporting);
				    if (a != null) d.append ("}\n\n");
				    return d.toString ();
				}, "org.jmol.util.StringXBuilder,~N,~N");
	    Clazz.defineMethod (c$, "getSpecularState", 
				function () {
				    var a =  new org.jmol.util.StringXBuilder ();
				    org.jmol.viewer.StateManager.appendCmd (a, "set ambientPercent " + org.jmol.util.GData.getAmbientPercent ());
				    org.jmol.viewer.StateManager.appendCmd (a, "set diffusePercent " + org.jmol.util.GData.getDiffusePercent ());
				    org.jmol.viewer.StateManager.appendCmd (a, "set specular " + org.jmol.util.GData.getSpecular ());
				    org.jmol.viewer.StateManager.appendCmd (a, "set specularPercent " + org.jmol.util.GData.getSpecularPercent ());
				    org.jmol.viewer.StateManager.appendCmd (a, "set specularPower " + org.jmol.util.GData.getSpecularPower ());
				    var b = org.jmol.util.GData.getSpecularExponent ();
				    var c = org.jmol.util.GData.getPhongExponent ();
				    if (Math.pow (2, b) == c) org.jmol.viewer.StateManager.appendCmd (a, "set specularExponent " + b);
				    else org.jmol.viewer.StateManager.appendCmd (a, "set phongExponent " + c);
				    org.jmol.viewer.StateManager.appendCmd (a, "set zShadePower " + this.zShadePower);
				    return a.toString ();
				});
	    Clazz.defineMethod (c$, "setUnits", 
				function (a) {
				    var b = this.measureDistanceUnits;
				    var c = this.energyUnits;
				    if (a.equalsIgnoreCase ("angstroms")) this.measureDistanceUnits = "angstroms";
				    else if (a.equalsIgnoreCase ("nanometers") || a.equalsIgnoreCase ("nm")) this.measureDistanceUnits = "nanometers";
				    else if (a.equalsIgnoreCase ("picometers") || a.equalsIgnoreCase ("pm")) this.measureDistanceUnits = "picometers";
				    else if (a.equalsIgnoreCase ("bohr") || a.equalsIgnoreCase ("au")) this.measureDistanceUnits = "au";
				    else if (a.equalsIgnoreCase ("vanderwaals") || a.equalsIgnoreCase ("vdw")) this.measureDistanceUnits = "vdw";
				    else if (a.equalsIgnoreCase ("kj")) this.energyUnits = "kJ";
				    else if (a.equalsIgnoreCase ("kcal")) this.energyUnits = "kcal";
				    if (!b.equalsIgnoreCase (this.measureDistanceUnits)) this.setParamS ("measurementUnits", this.measureDistanceUnits);
				    else if (!c.equalsIgnoreCase (this.energyUnits)) this.setParamS ("energyUnits", this.energyUnits);
				}, "~S");
	    Clazz.defineMethod (c$, "isJmolVariable", 
				function (a) {
				    return a.charAt (0) == '_' || this.htNonbooleanParameterValues.containsKey (a = a.toLowerCase ()) || this.htBooleanParameterFlags.containsKey (a) || org.jmol.viewer.StateManager.unreportedProperties.indexOf (";" + a + ";") >= 0;
				}, "~S");
	    Clazz.defineMethod (c$, "resetValue", 
				($fz = function (a, b) {
				    this.setParamS (a, b == null ? "" : b.getParameter (a));
				}, $fz.isPrivate = true, $fz), "~S,org.jmol.viewer.StateManager.GlobalSettings");
	    Clazz.defineMethod (c$, "setParamB", 
				function (a, b) {
				    a = a.toLowerCase ();
				    if (this.htNonbooleanParameterValues.containsKey (a)) return;
				    this.htBooleanParameterFlags.put (a, b ? Boolean.TRUE : Boolean.FALSE);
				}, "~S,~B");
	    Clazz.defineMethod (c$, "setParamI", 
				function (a, b) {
				    a = a.toLowerCase ();
				    if (this.htBooleanParameterFlags.containsKey (a)) return;
				    this.htNonbooleanParameterValues.put (a, Integer.$valueOf (b));
				}, "~S,~N");
	    Clazz.defineMethod (c$, "setParamF", 
				function (a, b) {
				    if (Float.isNaN (b)) return;
				    a = a.toLowerCase ();
				    if (this.htBooleanParameterFlags.containsKey (a)) return;
				    this.htNonbooleanParameterValues.put (a,  new Float (b));
				}, "~S,~N");
	    Clazz.defineMethod (c$, "setParamS", 
				function (a, b) {
				    a = a.toLowerCase ();
				    if (b == null || this.htBooleanParameterFlags.containsKey (a)) return;
				    this.htNonbooleanParameterValues.put (a, b);
				}, "~S,~S");
	    Clazz.defineMethod (c$, "removeParam", 
				function (a) {
				    a = a.toLowerCase ();
				    if (this.htBooleanParameterFlags.containsKey (a)) {
					this.htBooleanParameterFlags.remove (a);
					if (!this.htPropertyFlagsRemoved.containsKey (a)) this.htPropertyFlagsRemoved.put (a, Boolean.FALSE);
					return;
				    }if (this.htNonbooleanParameterValues.containsKey (a)) this.htNonbooleanParameterValues.remove (a);
				}, "~S");
	    Clazz.defineMethod (c$, "setUserVariable", 
				function (a, b) {
				    if (b == null) return null;
				    a = a.toLowerCase ();
				    this.htUserVariables.put (a, b.setName (a).setGlobal ());
				    return b;
				}, "~S,org.jmol.script.ScriptVariable");
	    Clazz.defineMethod (c$, "unsetUserVariable", 
				function (a) {
				    if (a.equals ("all") || a.equals ("variables")) {
					this.htUserVariables.clear ();
					org.jmol.util.Logger.info ("all user-defined variables deleted");
				    } else if (this.htUserVariables.containsKey (a)) {
					org.jmol.util.Logger.info ("variable " + a + " deleted");
					this.htUserVariables.remove (a);
				    }}, "~S");
	    Clazz.defineMethod (c$, "removeUserVariable", 
				function (a) {
				    this.htUserVariables.remove (a);
				}, "~S");
	    Clazz.defineMethod (c$, "getUserVariable", 
				function (a) {
				    if (a == null) return null;
				    a = a.toLowerCase ();
				    return this.htUserVariables.get (a);
				}, "~S");
	    Clazz.defineMethod (c$, "getParameterEscaped", 
				function (a, b) {
				    a = a.toLowerCase ();
				    if (this.htNonbooleanParameterValues.containsKey (a)) {
					var c = this.htNonbooleanParameterValues.get (a);
					return org.jmol.viewer.StateManager.varClip (a, org.jmol.util.Escape.escape (c), b);
				    }if (this.htBooleanParameterFlags.containsKey (a)) return this.htBooleanParameterFlags.get (a).toString ();
				    if (this.htUserVariables.containsKey (a)) return this.htUserVariables.get (a).escape ();
				    if (this.htPropertyFlagsRemoved.containsKey (a)) return "false";
				    return "<not defined>";
				}, "~S,~N");
	    Clazz.defineMethod (c$, "getParameter", 
				function (a) {
				    var b = this.getParam (a, false);
				    return (b == null ? "" : b);
				}, "~S");
	    Clazz.defineMethod (c$, "getOrSetNewVariable", 
				function (a, b) {
				    if (a == null || a.length == 0) a = "x";
				    var c = this.getParam (a, true);
				    return (c == null && b && a.charAt (0) != '_' ? this.setUserVariable (a, org.jmol.script.ScriptVariable.newVariable (4, "")) : org.jmol.script.ScriptVariable.getVariable (c));
				}, "~S,~B");
	    Clazz.defineMethod (c$, "getParam", 
				function (a, b) {
				    a = a.toLowerCase ();
				    if (a.equals ("_memory")) {
					var c = 0;
					var d = 0;
					try {
					    var e = Runtime.getRuntime ();
					    c = e.totalMemory () / 1000000;
					    d = e.freeMemory () / 1000000;
					} catch (e) {
					}
					var e = org.jmol.util.TextFormat.formatDecimal (c - d, 1) + "/" + org.jmol.util.TextFormat.formatDecimal (c, 1);
					this.htNonbooleanParameterValues.put ("_memory", e);
				    }if (this.htNonbooleanParameterValues.containsKey (a)) return this.htNonbooleanParameterValues.get (a);
				    if (this.htBooleanParameterFlags.containsKey (a)) return this.htBooleanParameterFlags.get (a);
				    if (this.htPropertyFlagsRemoved.containsKey (a)) return Boolean.FALSE;
				    if (this.htUserVariables.containsKey (a)) {
					var c = this.htUserVariables.get (a);
					return (b ? c : org.jmol.script.ScriptVariable.oValue (c));
				    }return null;
				}, "~S,~B");
	    Clazz.defineMethod (c$, "getAllSettings", 
				function (a) {
				    var b =  new org.jmol.util.StringXBuilder ();
				    var c;
				    var d;
				    var e =  new Array (this.htBooleanParameterFlags.size () + this.htNonbooleanParameterValues.size () + this.htUserVariables.size ());
				    var f = 0;
				    var g = "_" + a;
				    c = this.htBooleanParameterFlags.keySet ().iterator ();
				    while (c.hasNext ()) {
					d = c.next ();
					if (a == null || d.indexOf (a) == 0 || d.indexOf (g) == 0) e[f++] = (d.indexOf ("_") == 0 ? d + " = " : "set " + d + " ") + this.htBooleanParameterFlags.get (d);
				    }
				    c = this.htNonbooleanParameterValues.keySet ().iterator ();
				    while (c.hasNext ()) {
					d = c.next ();
					if (d.charAt (0) != '@' && (a == null || d.indexOf (a) == 0 || d.indexOf (g) == 0)) {
					    var h = this.htNonbooleanParameterValues.get (d);
					    if (Clazz.instanceOf (h, String)) h = this.chop (org.jmol.util.Escape.escapeStr (h));
					    e[f++] = (d.indexOf ("_") == 0 ? d + " = " : "set " + d + " ") + h;
					}}
				    c = this.htUserVariables.keySet ().iterator ();
				    while (c.hasNext ()) {
					d = c.next ();
					if (a == null || d.indexOf (a) == 0) {
					    var h = this.htUserVariables.get (d);
					    var i = h.asString ();
					    e[f++] = d + " " + (d.startsWith ("@") ? "" : "= ") + (h.tok == 4 ? this.chop (org.jmol.util.Escape.escapeStr (i)) : i);
					}}
				    java.util.Arrays.sort (e, 0, f);
				    for (var h = 0; h < f; h++) if (e[h] != null) org.jmol.viewer.StateManager.appendCmd (b, e[h]);

				    b.append ("\n");
				    return b.toString ();
				}, "~S");
	    Clazz.defineMethod (c$, "chop", 
				($fz = function (a) {
				    var b = a.length;
				    if (b < 512) return a;
				    var c =  new org.jmol.util.StringXBuilder ();
				    var d = "\"\\\n    + \"";
				    var e = 0;
				    for (var f = 72; f < b; e = f, f += 72) {
					while (a.charAt (f - 1) == '\\') f++;

					c.append ((e == 0 ? "" : d)).append (a.substring (e, f));
				    }
				    c.append (d).append (a.substring (e, b));
				    return c.toString ();
				}, $fz.isPrivate = true, $fz), "~S");
	    Clazz.defineMethod (c$, "getState", 
				function (a) {
				    var b =  new Array (this.htBooleanParameterFlags.size () + this.htNonbooleanParameterValues.size ());
				    var c =  new org.jmol.util.StringXBuilder ();
				    var d = (a != null);
				    if (d) {
					a.append ("  _setVariableState;\n");
					c.append ("function _setVariableState() {\n\n");
				    }var e = 0;
				    var f;
				    var g;
				    f = this.htBooleanParameterFlags.keySet ().iterator ();
				    while (f.hasNext ()) {
					g = f.next ();
					if (this.doReportProperty (g)) b[e++] = "set " + g + " " + this.htBooleanParameterFlags.get (g);
				    }
				    f = this.htNonbooleanParameterValues.keySet ().iterator ();
				    while (f.hasNext ()) {
					g = f.next ();
					if (this.doReportProperty (g)) {
					    var h = this.htNonbooleanParameterValues.get (g);
					    if (g.charAt (0) == '=') {
						g = g.substring (1);
					    } else {
						if (g.indexOf ("default") == 0) g = " set " + g;
						else g = "set " + g;
						h = org.jmol.util.Escape.escape (h);
					    }b[e++] = g + " " + h;
					}}
				    switch (this.axesMode) {
				    case org.jmol.constant.EnumAxesMode.UNITCELL:
					b[e++] = "set axes unitcell";
					break;
				    case org.jmol.constant.EnumAxesMode.BOUNDBOX:
					b[e++] = "set axes window";
					break;
				    default:
					b[e++] = "set axes molecular";
				    }
				    java.util.Arrays.sort (b, 0, e);
				    for (var h = 0; h < e; h++) if (b[h] != null) org.jmol.viewer.StateManager.appendCmd (c, b[h]);

				    var i = org.jmol.viewer.StateManager.getVariableList (this.htUserVariables, 0, false, true);
				    if (i.length > 0) {
					c.append ("\n#user-defined atom sets; \n");
					c.append (i);
				    }this.b$["org.jmol.viewer.StateManager"].viewer.loadShape (5);
				    c.append (this.b$["org.jmol.viewer.StateManager"].viewer.getShapeProperty (5, "defaultState"));
				    if (this.haveSetStructureList) {
					c.append ("struture HELIX set " + org.jmol.util.Escape.escape (this.structureList.get (org.jmol.constant.EnumStructure.HELIX)));
					c.append ("struture SHEET set " + org.jmol.util.Escape.escape (this.structureList.get (org.jmol.constant.EnumStructure.SHEET)));
					c.append ("struture TURN set " + org.jmol.util.Escape.escape (this.structureList.get (org.jmol.constant.EnumStructure.TURN)));
				    }if (a != null) c.append ("\n}\n\n");
				    return c.toString ();
				}, "org.jmol.util.StringXBuilder");
	    Clazz.defineMethod (c$, "doReportProperty", 
				($fz = function (a) {
				    return (a.charAt (0) != '_' && org.jmol.viewer.StateManager.unreportedProperties.indexOf (";" + a + ";") < 0);
				}, $fz.isPrivate = true, $fz), "~S");
	    Clazz.defineMethod (c$, "getVariableList", 
				function () {
				    return org.jmol.viewer.StateManager.getVariableList (this.htUserVariables, 0, true, false);
				});
	    Clazz.defineMethod (c$, "setStructureList", 
				function (a, b) {
				    this.haveSetStructureList = true;
				    this.structureList.put (b, a);
				}, "~A,org.jmol.constant.EnumStructure");
	    Clazz.defineMethod (c$, "getStructureList", 
				function () {
				    return this.structureList;
				});
	    Clazz.defineMethod (c$, "setPicked", 
				function (a) {
				    var b = null;
				    if (a >= 0) {
					this.setParamI ("_atompicked", a);
					b = this.getParam ("picked", true);
				    }if (b == null || b.tok != 10) {
					b = org.jmol.script.ScriptVariable.newVariable (10,  new org.jmol.util.BitSet ());
					this.setUserVariable ("picked", b);
				    }if (a >= 0) org.jmol.script.ScriptVariable.getBitSet (b, false).set (a);
				}, "~N");
	    c$ = Clazz.p0p ();
	};
	Clazz.pu$h ();
	c$ = Clazz.decorateAsClass (function () {
	    this.atomIndex1 = 0;
	    this.atomIndex2 = 0;
	    this.mad = 0;
	    this.colix = 0;
	    this.order = 0;
	    this.energy = 0;
	    this.shapeVisibilityFlags = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer.StateManager, "Connection");
	Clazz.makeConstructor (c$, 
			       function (a, b, c, d, e, f, g) {
				   this.atomIndex1 = a;
				   this.atomIndex2 = b;
				   this.mad = c;
				   this.colix = d;
				   this.order = e;
				   this.energy = f;
				   this.shapeVisibilityFlags = g;
			       }, "~N,~N,~N,~N,~N,~N,~N");
	c$ = Clazz.p0p ();
	Clazz.defineStatics (c$,
			     "OBJ_BACKGROUND", 0,
			     "OBJ_AXIS1", 1,
			     "OBJ_AXIS2", 2,
			     "OBJ_AXIS3", 3,
			     "OBJ_BOUNDBOX", 4,
			     "OBJ_UNITCELL", 5,
			     "OBJ_FRANK", 6,
			     "OBJ_MAX", 8,
			     "objectNameList", "background axis1      axis2      axis3      boundbox   unitcell   frank      ");
	c$.staticFunctions = c$.prototype.staticFunctions =  new java.util.Hashtable ();
	c$.unreportedProperties = c$.prototype.unreportedProperties = (";ambientpercent;animationfps;antialiasdisplay;antialiasimages;antialiastranslucent;appendnew;axescolor;axesposition;axesmolecular;axesorientationrasmol;axesunitcell;axeswindow;axis1color;axis2color;axis3color;backgroundcolor;backgroundmodel;bondsymmetryatoms;boundboxcolor;cameradepth;debug;debugscript;defaultlatttice;defaults;defaultdropscript;diffusepercent;exportdrivers;_filecaching;_filecache;fontcaching;fontscaling;forcefield;language;legacyautobonding;loglevel;logfile;loggestures;logcommands;measurestylechime;loadformat;loadligandformat;smilesurlformat;pubchemformat;nihresolverformat;edsurlformat;edsurlcutoff;multiprocessor;navigationmode;;pathforallfiles;perspectivedepth;phongexponent;perspectivemodel;preservestate;refreshing;repaintwaitms;rotationradius;showaxes;showaxis1;showaxis2;showaxis3;showboundbox;showfrank;showtiming;showunitcell;slabenabled;slab;slabrange;depth;zshade;zshadepower;specular;specularexponent;specularpercent;specularpower;stateversion;statusreporting;stereo;stereostate;vibrationperiod;unitcellcolor;visualrange;windowcentered;zerobasedxyzrasmol;zoomenabled;mousedragfactor;mousewheelfactor;scriptqueue;scriptreportinglevel;syncscript;syncmouse;syncstereo;;defaultdirectory;currentlocalpath;defaultdirectorylocal;ambient;bonds;colorrasmol;diffuse;frank;hetero;hidenotselected;hoverlabel;hydrogen;languagetranslation;measurementunits;navigationdepth;navigationslab;picking;pickingstyle;propertycolorschemeoverload;radius;rgbblue;rgbgreen;rgbred;scaleangstromsperinch;selectionhalos;showscript;showselections;solvent;strandcount;spinx;spiny;spinz;spinfps;navx;navy;navz;navfps;" + org.jmol.constant.EnumCallback.getNameList () + ";undo;bondpicking;modelkitmode;allowgestures;allowkeystrokes;allowmultitouch;allowmodelkit" + ";").toLowerCase ();
    });
    // 
    //// org\jmol\script\ScriptFlowContext.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (null, "org.jmol.script.ScriptFlowContext", ["org.jmol.script.ScriptCompiler"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.compiler = null;
	    this.token = null;
	    this.pt0 = 0;
	    this.ptDefault = 0;
	    this.$function = null;
	    this.$var = null;
	    this.parent = null;
	    this.lineStart = 0;
	    this.commandStart = 0;
	    this.ptLine = 0;
	    this.ptCommand = 0;
	    this.forceEndIf = true;
	    this.ident = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptFlowContext");
	Clazz.makeConstructor (c$, 
			       function (compiler, token, pt0, parent) {
				   this.compiler = compiler;
				   this.token = token;
				   this.ident = token.value;
				   this.pt0 = pt0;
				   this.parent = parent;
				   this.lineStart = this.ptLine = this.compiler.lineCurrent;
				   this.commandStart = this.ptCommand = this.compiler.iCommand;
			       }, "org.jmol.script.ScriptCompiler,org.jmol.script.ContextToken,~N,org.jmol.script.ScriptFlowContext");
	Clazz.defineMethod (c$, "getBreakableContext", 
			    function (nLevelsUp) {
				var f = this;
				while (f != null && (!org.jmol.script.ScriptCompiler.isBreakableContext (f.token.tok) || nLevelsUp-- > 0)) f = f.getParent ();

				return f;
			    }, "~N");
	Clazz.defineMethod (c$, "checkForceEndIf", 
			    function () {
				var test = this.forceEndIf && this.ptCommand < this.compiler.iCommand && this.ptLine == this.compiler.lineCurrent;
				if (test) this.forceEndIf = false;
				return test;
			    });
	Clazz.defineMethod (c$, "setPt0", 
			    function (pt0, isDefault) {
				this.pt0 = pt0;
				if (isDefault) this.ptDefault = pt0;
				this.setLine ();
				return pt0;
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setLine", 
			    function () {
				this.ptLine = this.compiler.lineCurrent;
				this.ptCommand = this.compiler.iCommand + 1;
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "ident " + this.ident + " line " + this.lineStart + " command " + this.commandStart;
			      });
	Clazz.defineMethod (c$, "getParent", 
			    function () {
				return this.parent;
			    });
	Clazz.defineMethod (c$, "path", 
			    function () {
				var s = "";
				var f = this;
				while (f != null) {
				    s = f.ident + "-" + s;
				    f = f.parent;
				}
				return "[" + s + "]";
			    });
	Clazz.defineMethod (c$, "setFunction", 
			    function ($function) {
				this.$function = $function;
			    }, "org.jmol.script.ScriptFunction");
    });
    // 
    //// org\jmol\script\ScriptFunction.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    Clazz.load (["java.util.ArrayList", "$.Hashtable"], "org.jmol.script.ScriptFunction", ["org.jmol.script.ScriptVariable", "$.ScriptVariableInt", "$.Token", "org.jmol.util.ArrayUtil", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.pt0 = 0;
	    this.chpt0 = 0;
	    this.cmdpt0 = -1;
	    this.typeName = null;
	    this.name = null;
	    this.nParameters = 0;
	    this.names = null;
	    this.tok = 0;
	    this.variables = null;
	    this.returnValue = null;
	    this.aatoken = null;
	    this.lineIndices = null;
	    this.lineNumbers = null;
	    this.script = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.script, "ScriptFunction");
	Clazz.prepareFields (c$, function () {
	    this.names =  new java.util.ArrayList ();
	    this.variables =  new java.util.Hashtable ();
	});
	Clazz.defineMethod (c$, "isVariable", 
			    function (ident) {
				return this.variables.containsKey (ident);
			    }, "~S");
	Clazz.makeConstructor (c$, 
			       function (name, tok) {
				   this.name = name;
				   this.tok = tok;
				   this.typeName = org.jmol.script.Token.nameOf (tok);
			       }, "~S,~N");
	Clazz.defineMethod (c$, "setVariables", 
			    function (contextVariables, params) {
				var nParams = (params == null ? 0 : params.size ());
				for (var i = this.names.size (); --i >= 0; ) {
				    var name = this.names.get (i).toLowerCase ();
				    var $var = (i < this.nParameters && i < nParams ? params.get (i) : null);
				    if ($var != null && $var.tok != 7) $var = org.jmol.script.ScriptVariable.newScriptVariableToken ($var);
				    contextVariables.put (name, ($var == null ? org.jmol.script.ScriptVariable.newVariable (4, "").setName (name) : $var));
				}
				contextVariables.put ("_retval",  new org.jmol.script.ScriptVariableInt (this.tok == 364558 ? 2147483647 : 0));
			    }, "java.util.Map,java.util.List");
	Clazz.defineMethod (c$, "unsetVariables", 
			    function (contextVariables, params) {
				var nParams = (params == null ? 0 : params.size ());
				var nNames = this.names.size ();
				if (nParams == 0 || nNames == 0) return;
				for (var i = 0; i < nNames && i < nParams; i++) {
				    var global = params.get (i);
				    if (global.tok != 7) continue;
				    var local = contextVariables.get (this.names.get (i).toLowerCase ());
				    if (local.tok != 7) continue;
				    global.value = local.value;
				}
			    }, "java.util.Map,java.util.List");
	Clazz.defineMethod (c$, "addVariable", 
			    function (name, isParameter) {
				this.variables.put (name, name);
				this.names.add (name);
				if (isParameter) this.nParameters++;
			    }, "~S,~B");
	c$.setFunction = Clazz.defineMethod (c$, "setFunction", 
					     function ($function, script, ichCurrentCommand, pt, lineNumbers, lineIndices, lltoken) {
						 var cmdpt0 = $function.cmdpt0;
						 var chpt0 = $function.chpt0;
						 var nCommands = pt - cmdpt0;
						 $function.setScript (script.substring (chpt0, ichCurrentCommand));
						 var aatoken = $function.aatoken =  new Array (nCommands);
						 $function.lineIndices = org.jmol.util.ArrayUtil.newInt2 (nCommands);
						 $function.lineNumbers =  Clazz.newShortArray (nCommands, 0);
						 var line0 = (lineNumbers[cmdpt0] - 1);
						 for (var i = 0; i < nCommands; i++) {
						     $function.lineNumbers[i] = (lineNumbers[cmdpt0 + i] - line0);
						     $function.lineIndices[i] = [lineIndices[cmdpt0 + i][0] - chpt0, lineIndices[cmdpt0 + i][1] - chpt0];
						     aatoken[i] = lltoken.get (cmdpt0 + i);
						     if (aatoken[i].length > 0) {
							 var tokenCommand = aatoken[i][0];
							 if (org.jmol.script.Token.tokAttr (tokenCommand.tok, 102400)) tokenCommand.intValue -= (tokenCommand.intValue < 0 ? -cmdpt0 : cmdpt0);
						     }}
						 for (var i = pt; --i >= cmdpt0; ) {
						     lltoken.remove (i);
						     lineIndices[i][0] = lineIndices[i][1] = 0;
						 }
					     }, "org.jmol.script.ScriptFunction,~S,~N,~N,~A,~A,java.util.List");
	Clazz.defineMethod (c$, "setScript", 
			    ($fz = function (s) {
				this.script = s;
				if (this.script != null && this.script !== "" && !this.script.endsWith ("\n")) this.script += "\n";
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "getSignature", 
			    function () {
				var s =  new org.jmol.util.StringXBuilder ().append (this.typeName).append (" ").append (this.name).append (" (");
				for (var i = 0; i < this.nParameters; i++) {
				    if (i > 0) s.append (", ");
				    s.append (this.names.get (i));
				}
				s.append (")");
				return s.toString ();
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  var s =  new org.jmol.util.StringXBuilder ().append ("/*\n * ").append (this.name).append ("\n */\n").append (this.getSignature ()).append ("{\n");
				  if (this.script != null) s.append (this.script);
				  s.append ("}\n");
				  return s.toString ();
			      });
    });
    // 
    //// org\jmol\modelset\MeasurementPending.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.Measurement"], "org.jmol.modelset.MeasurementPending", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$haveTarget = false;
	    this.$haveModified = false;
	    this.numSet = 0;
	    this.lastIndex = -1;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "MeasurementPending", org.jmol.modelset.Measurement);
	Clazz.defineMethod (c$, "haveTarget", 
			    function () {
				return this.$haveTarget;
			    });
	Clazz.defineMethod (c$, "haveModified", 
			    function () {
				return this.$haveModified;
			    });
	Clazz.defineMethod (c$, "getNumSet", 
			    function () {
				return this.numSet;
			    });
	Clazz.makeConstructor (c$, 
			       function (modelSet) {
				   Clazz.superConstructor (this, org.jmol.modelset.MeasurementPending, [modelSet, null, NaN, 0, null, 0]);
			       }, "org.jmol.modelset.ModelSet");
	Clazz.defineMethod (c$, "checkPoint", 
			    ($fz = function (ptClicked) {
				for (var i = 1; i <= this.numSet; i++) if (this.countPlusIndices[i] == -1 - i && this.pts[i - 1].distance (ptClicked) < 0.01) return false;

				return true;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3fi");
	Clazz.defineMethod (c$, "getIndexOf", 
			    function (atomIndex) {
				for (var i = 1; i <= this.numSet; i++) if (this.countPlusIndices[i] == atomIndex) return i;

				return 0;
			    }, "~N");
	Clazz.defineMethod (c$, "setCount", 
			    function (count) {
				Clazz.superCall (this, org.jmol.modelset.MeasurementPending, "setCount", [count]);
				this.numSet = count;
			    }, "~N");
	Clazz.defineMethod (c$, "addPoint", 
			    function (atomIndex, ptClicked, doSet) {
				this.$haveModified = (atomIndex != this.lastIndex);
				this.lastIndex = atomIndex;
				if (ptClicked == null) {
				    if (this.getIndexOf (atomIndex) > 0) {
					if (doSet) this.numSet = this.count;
					return this.count;
				    }this.$haveTarget = (atomIndex >= 0);
				    if (!this.$haveTarget) return this.count = this.numSet;
				    this.count = this.numSet + 1;
				    this.countPlusIndices[this.count] = atomIndex;
				} else {
				    if (!this.checkPoint (ptClicked)) {
					if (doSet) this.numSet = this.count;
					return this.count;
				    }var pt = this.numSet;
				    this.$haveModified = this.$haveTarget = true;
				    this.count = this.numSet + 1;
				    this.pts[pt] = ptClicked;
				    this.countPlusIndices[this.count] = -2 - pt;
				}this.countPlusIndices[0] = this.count;
				if (doSet) this.numSet = this.count;
				this.value = this.getMeasurement ();
				this.formatMeasurement (null);
				return this.count;
			    }, "~N,org.jmol.util.Point3fi,~B");
    });
    // 
    //// org\jmol\thread\JmolThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["java.lang.Thread"], "org.jmol.thread.JmolThread", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.$name = "JmolThread";
	    this.$interrupted = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "JmolThread", Thread);
	Clazz.defineMethod (c$, "setMyName", 
			    function (name) {
				this.$name = name;
				Clazz.superCall (this, org.jmol.thread.JmolThread, "setName", [name]);
			    }, "~S");
	Clazz.defineMethod (c$, "start", 
			    function () {
				{
				}});
	Clazz.defineMethod (c$, "interrupt", 
			    function () {
				this.$interrupted = true;
				{
				}});
    });
    // 
    //// org\jmol\thread\HoverWatcherThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.HoverWatcherThread", ["java.lang.Thread", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.actionManager = null;
	    this.current = null;
	    this.moved = null;
	    this.viewer = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "HoverWatcherThread", org.jmol.thread.JmolThread);
	Clazz.makeConstructor (c$, 
			       function (actionManager, current, moved, viewer) {
				   Clazz.superConstructor (this, org.jmol.thread.HoverWatcherThread, []);
				   this.actionManager = actionManager;
				   this.current = current;
				   this.moved = moved;
				   this.viewer = viewer;
				   this.setMyName ("HoverWatcher");
				   this.start ();
			       }, "org.jmol.viewer.ActionManager,org.jmol.viewer.MouseState,org.jmol.viewer.MouseState,org.jmol.viewer.Viewer");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  Thread.currentThread ().setPriority (1);
				  var hoverDelay;
				  try {
				      while (!this.$interrupted && (hoverDelay = this.viewer.getHoverDelay ()) > 0) {
					  Thread.sleep (hoverDelay);
					  if (this.moved.is (this.current)) {
					      var currentTime = System.currentTimeMillis ();
					      var howLong = (currentTime - this.moved.time);
					      if (howLong > hoverDelay && !this.$interrupted) {
						  this.actionManager.checkHover ();
					      }}}
				  } catch (e$$) {
				      if (Clazz.exceptionOf (e$$, InterruptedException)) {
					  var ie = e$$;
					  {
					      org.jmol.util.Logger.debug ("Hover interrupted");
					  }
				      } else if (Clazz.exceptionOf (e$$, Exception)) {
					  var ie = e$$;
					  {
					      org.jmol.util.Logger.debug ("Hover Exception: " + ie);
					  }
				      } else {
					  throw e$$;
				      }
				  }
			      });
    });
    // 
    //// org\jmol\viewer\binding\Binding.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer.binding");
    Clazz.load (["java.util.Hashtable"], "org.jmol.viewer.binding.Binding", ["java.lang.Boolean", "java.util.ArrayList", "$.Arrays", "org.jmol.util.Escape", "$.Logger", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.name = null;
	    this.bindings = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer.binding, "Binding");
	Clazz.prepareFields (c$, function () {
	    this.bindings =  new java.util.Hashtable ();
	});
	Clazz.defineMethod (c$, "getBindings", 
			    function () {
				return this.bindings;
			    });
	Clazz.makeConstructor (c$, 
			       function (name) {
				   this.name = name;
			       }, "~S");
	Clazz.defineMethod (c$, "getName", 
			    function () {
				return this.name;
			    });
	Clazz.defineMethod (c$, "bind", 
			    function (mouseAction, jmolAction) {
				this.addBinding (mouseAction + "\t" + jmolAction, [mouseAction, jmolAction]);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "bind", 
			    function (mouseAction, name) {
				this.addBinding (mouseAction + "\t", Boolean.TRUE);
				this.addBinding (mouseAction + "\t" + name, [org.jmol.viewer.binding.Binding.getMouseActionName (mouseAction, false), name]);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "unbind", 
			    function (mouseAction, jmolAction) {
				if (mouseAction == 0) this.unbindJmolAction (jmolAction);
				else this.removeBinding (null, mouseAction + "\t" + jmolAction);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "unbind", 
			    function (mouseAction, name) {
				if (name == null) this.unbindMouseAction (mouseAction);
				else this.removeBinding (null, mouseAction + "\t" + name);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "unbindJmolAction", 
			    function (jmolAction) {
				var e = this.bindings.keySet ().iterator ();
				var skey = "\t" + jmolAction;
				while (e.hasNext ()) {
				    var key = e.next ();
				    if (key.endsWith (skey)) this.removeBinding (e, key);
				}
			    }, "~N");
	Clazz.defineMethod (c$, "addBinding", 
			    ($fz = function (key, value) {
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("adding binding " + key + "\t==\t" + org.jmol.util.Escape.escape (value));
				this.bindings.put (key, value);
			    }, $fz.isPrivate = true, $fz), "~S,~O");
	Clazz.defineMethod (c$, "removeBinding", 
			    ($fz = function (e, key) {
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("removing binding " + key);
				if (e == null) this.bindings.remove (key);
				else e.remove ();
			    }, $fz.isPrivate = true, $fz), "java.util.Iterator,~S");
	Clazz.defineMethod (c$, "unbindUserAction", 
			    function (script) {
				var e = this.bindings.keySet ().iterator ();
				var skey = "\t" + script;
				while (e.hasNext ()) {
				    var key = e.next ();
				    if (key.endsWith (skey)) this.removeBinding (e, key);
				}
			    }, "~S");
	Clazz.defineMethod (c$, "unbindMouseAction", 
			    function (mouseAction) {
				var e = this.bindings.keySet ().iterator ();
				var skey = mouseAction + "\t";
				while (e.hasNext ()) {
				    var key = e.next ();
				    if (key.startsWith (skey)) this.removeBinding (e, key);
				}
			    }, "~N");
	Clazz.defineMethod (c$, "isBound", 
			    function (mouseAction, action) {
				return this.bindings.containsKey (mouseAction + "\t" + action);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "isUserAction", 
			    function (mouseAction) {
				return this.bindings.containsKey (mouseAction + "\t");
			    }, "~N");
	c$.getMouseAction = Clazz.defineMethod (c$, "getMouseAction", 
						function (clickCount, modifiers) {
						    if (clickCount > 2) clickCount = 2;
						    return (modifiers & 63) | (clickCount == -2147483648 ? 1024 : (clickCount << 8));
						}, "~N,~N");
	c$.getMouseAction = Clazz.defineMethod (c$, "getMouseAction", 
						function (desc) {
						    if (desc == null) return 0;
						    var action = 0;
						    desc = desc.toUpperCase ();
						    if (desc.indexOf ("MIDDLE") >= 0) action |= 8;
						    else if (desc.indexOf ("RIGHT") >= 0) action |= 4;
						    else if (desc.indexOf ("WHEEL") >= 0) action |= 32;
						    else if (desc.indexOf ("LEFT") >= 0) action |= 16;
						    var isDefaultButton = (action == 0);
						    if (desc.indexOf ("DOUBLE") >= 0) action |= 512;
						    else if (action > 0 && (action & 32) == 0 || desc.indexOf ("SINGLE") >= 0) action |= 256;
						    else if (desc.indexOf ("DOWN") >= 0) action |= 1024;
						    if (desc.indexOf ("CTRL") >= 0) action |= 2;
						    if (desc.indexOf ("ALT") >= 0) action |= 8;
						    if (desc.indexOf ("SHIFT") >= 0) action |= 1;
						    if (isDefaultButton && action != 0) action |= 16;
						    return action;
						}, "~S");
	c$.getModifiers = Clazz.defineMethod (c$, "getModifiers", 
					      function (mouseAction) {
						  return mouseAction & 63;
					      }, "~N");
	c$.getClickCount = Clazz.defineMethod (c$, "getClickCount", 
					       function (mouseAction) {
						   return mouseAction >> 8;
					       }, "~N");
	Clazz.defineMethod (c$, "getBindingInfo", 
			    function (actionNames, qualifiers) {
				var sb =  new org.jmol.util.StringXBuilder ();
				var qlow = (qualifiers == null || qualifiers.equalsIgnoreCase ("all") ? null : qualifiers.toLowerCase ());
				var names =  new Array (actionNames.length);
				for (var i = 0; i < actionNames.length; i++) names[i] = (qlow == null || actionNames[i].toLowerCase ().indexOf (qlow) >= 0 ?  new java.util.ArrayList () : null);

				var e = this.bindings.keySet ().iterator ();
				while (e.hasNext ()) {
				    var obj = this.bindings.get (e.next ());
				    if (!org.jmol.util.Escape.isAI (obj)) continue;
				    var info = obj;
				    var i = info[1];
				    if (names[i] == null) continue;
				    names[i].add (org.jmol.viewer.binding.Binding.getMouseActionName (info[0], true));
				}
				for (var i = 0; i < actionNames.length; i++) {
				    var n;
				    if (names[i] == null || (n = names[i].size ()) == 0) continue;
				    var list = names[i].toArray ();
				    java.util.Arrays.sort (list);
				    sb.append (actionNames[i]).append ("\t");
				    var sep = "";
				    for (var j = 0; j < n; j++) {
					sb.append (sep);
					sb.append ((list[j]).substring (7));
					sep = ", ";
				    }
				    sb.appendC ('\n');
				}
				return sb.toString ();
			    }, "~A,~S");
	c$.includes = Clazz.defineMethod (c$, "includes", 
					  ($fz = function (mouseAction, mod) {
					      return ((mouseAction & mod) == mod);
					  }, $fz.isPrivate = true, $fz), "~N,~N");
	c$.getMouseActionName = Clazz.defineMethod (c$, "getMouseActionName", 
						    function (mouseAction, addSortCode) {
							var sb =  new org.jmol.util.StringXBuilder ();
							if (mouseAction == 0) return "";
							var isMiddle = (org.jmol.viewer.binding.Binding.includes (mouseAction, 8) && !org.jmol.viewer.binding.Binding.includes (mouseAction, 16) && !org.jmol.viewer.binding.Binding.includes (mouseAction, 4));
							var code = "      ".toCharArray ();
							if (org.jmol.viewer.binding.Binding.includes (mouseAction, 2)) {
							    sb.append ("CTRL+");
							    code[4] = 'C';
							}if (!isMiddle && org.jmol.viewer.binding.Binding.includes (mouseAction, 8)) {
							    sb.append ("ALT+");
							    code[3] = 'A';
							}if (org.jmol.viewer.binding.Binding.includes (mouseAction, 1)) {
							    sb.append ("SHIFT+");
							    code[2] = 'S';
							}if (org.jmol.viewer.binding.Binding.includes (mouseAction, 16)) {
							    code[1] = 'L';
							    sb.append ("LEFT");
							} else if (org.jmol.viewer.binding.Binding.includes (mouseAction, 4)) {
							    code[1] = 'R';
							    sb.append ("RIGHT");
							} else if (isMiddle) {
							    code[1] = 'W';
							    sb.append ("MIDDLE");
							} else if (org.jmol.viewer.binding.Binding.includes (mouseAction, 32)) {
							    code[1] = 'W';
							    sb.append ("WHEEL");
							}if (org.jmol.viewer.binding.Binding.includes (mouseAction, 512)) {
							    sb.append ("+double-click");
							    code[0] = '2';
							} else if (org.jmol.viewer.binding.Binding.includes (mouseAction, 1024)) {
							    sb.append ("+down");
							    code[0] = '4';
							}return (addSortCode ?  String.instantialize (code) + ":" + sb.toString () : sb.toString ());
						    }, "~N,~B");
	Clazz.defineStatics (c$,
			     "WHEEL", 32,
			     "LEFT", 16,
			     "MIDDLE", 8,
			     "RIGHT", 4,
			     "ALT", 8,
			     "CTRL", 2,
			     "SHIFT", 1,
			     "CTRL_ALT", 10,
			     "CTRL_SHIFT", 3,
			     "LEFT_MIDDLE_RIGHT", 28,
			     "MAC_COMMAND", 20,
			     "DOUBLE_CLICK", 512,
			     "SINGLE_CLICK", 256,
			     "DOWN", 1024,
			     "MOVED", 0,
			     "DRAGGED", 1,
			     "CLICKED", 2,
			     "WHEELED", 3,
			     "PRESSED", 4,
			     "RELEASED", 5,
			     "BUTTON_MODIFIER_MASK", 63);
    });
    // 
    //// org\jmol\viewer\binding\DragBinding.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer.binding");
    Clazz.load (["org.jmol.viewer.binding.JmolBinding"], "org.jmol.viewer.binding.DragBinding", null, function () {
	c$ = Clazz.declareType (org.jmol.viewer.binding, "DragBinding", org.jmol.viewer.binding.JmolBinding);
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.viewer.binding.DragBinding, ["drag"]);
				   this.setSelectBindings ();
				   this.bind (1040, 23);
				   this.bind (272, 22);
				   this.bind (272, 33);
			       });
	Clazz.defineMethod (c$, "setSelectBindings", 
			    ($fz = function () {
				var $private = Clazz.checkPrivateMethod (arguments);
				if ($private != null) {
				    return $private.apply (this, arguments);
				}
				this.bind (272, 16);
				this.bind (273, 18);
				this.bind (280, 20);
				this.bind (281, 19);
			    }, $fz.isPrivate = true, $fz));
    });
    // 
    //// org\jmol\viewer\binding\JmolBinding.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer.binding");
    Clazz.load (["org.jmol.viewer.binding.Binding"], "org.jmol.viewer.binding.JmolBinding", null, function () {
	c$ = Clazz.declareType (org.jmol.viewer.binding, "JmolBinding", org.jmol.viewer.binding.Binding);
	Clazz.makeConstructor (c$, 
			       function () {
				   this.construct ("toggle");
				   this.setSelectBindings ();
			       });
	Clazz.makeConstructor (c$, 
			       function (name) {
				   Clazz.superConstructor (this, org.jmol.viewer.binding.JmolBinding, [name]);
				   this.setGeneralBindings ();
				   this.setPickBindings ();
			       }, "~S");
	Clazz.defineMethod (c$, "setSelectBindings", 
			    ($fz = function () {
				this.bind (528, 16);
				this.bind (272, 21);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setGeneralBindings", 
			    function () {
				this.bind (528, 0);
				this.bind (282, 1);
				this.bind (262, 1);
				this.bind (529, 1);
				this.bind (520, 1);
				this.bind (272, 2);
				this.bind (280, 3);
				this.bind (261, 3);
				this.bind (273, 4);
				this.bind (264, 4);
				this.bind (32, 5);
				this.bind (272, 6);
				this.bind (272, 7);
				this.bind (274, 14);
				this.bind (260, 14);
				this.bind (272, 15);
				this.bind (275, 11);
				this.bind (531, 12);
				this.bind (283, 13);
				this.bind (272, 8);
				this.bind (272, 10);
				this.bind (273, 9);
				this.bind (281, 22);
				this.bind (273, 24);
				this.bind (280, 25);
				this.bind (273, 26);
				this.bind (273, 30);
				this.bind (280, 31);
				this.bind (273, 32);
				this.bind (529, 44);
				this.bind (520, 44);
				this.bind (528, 45);
			    });
	Clazz.defineMethod (c$, "setPickBindings", 
			    function () {
				this.bind (272, 27);
				this.bind (272, 28);
				this.bind (272, 29);
				this.bind (272, 33);
				this.bind (272, 34);
				this.bind (272, 35);
				this.bind (272, 36);
				this.bind (528, 37);
				this.bind (272, 38);
				this.bind (275, 39);
				this.bind (272, 40);
				this.bind (272, 41);
				this.bind (272, 42);
				this.bind (272, 43);
			    });
    });
    // 
    //// org\jmol\viewer\binding\PfaatBinding.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer.binding");
    Clazz.load (["org.jmol.viewer.binding.JmolBinding"], "org.jmol.viewer.binding.PfaatBinding", null, function () {
	c$ = Clazz.declareType (org.jmol.viewer.binding, "PfaatBinding", org.jmol.viewer.binding.JmolBinding);
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.viewer.binding.PfaatBinding, ["extendedSelect"]);
				   this.setSelectBindings ();
			       });
	Clazz.defineMethod (c$, "setSelectBindings", 
			    ($fz = function () {
				var $private = Clazz.checkPrivateMethod (arguments);
				if ($private != null) {
				    return $private.apply (this, arguments);
				}
				this.bind (272, 16);
				this.bind (272, 17);
				this.bind (273, 18);
				this.bind (281, 19);
				this.bind (280, 20);
			    }, $fz.isPrivate = true, $fz));
    });
    // 
    //// org\jmol\viewer\binding\RasmolBinding.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer.binding");
    Clazz.load (["org.jmol.viewer.binding.JmolBinding"], "org.jmol.viewer.binding.RasmolBinding", null, function () {
	c$ = Clazz.declareType (org.jmol.viewer.binding, "RasmolBinding", org.jmol.viewer.binding.JmolBinding);
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.viewer.binding.RasmolBinding, ["selectOrToggle"]);
				   this.setSelectBindings ();
			       });
	Clazz.defineMethod (c$, "setSelectBindings", 
			    ($fz = function () {
				var $private = Clazz.checkPrivateMethod (arguments);
				if ($private != null) {
				    return $private.apply (this, arguments);
				}
				this.bind (272, 16);
				this.bind (273, 18);
			    }, $fz.isPrivate = true, $fz));
    });
    // 
    //// org\jmol\thread\ScriptParallelProcessor.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.script.ScriptFunction", "java.util.ArrayList"], "org.jmol.thread.ScriptParallelProcessor", ["java.util.concurrent.Executors", "org.jmol.script.ScriptProcess", "org.jmol.thread.ScriptProcessRunnable", "org.jmol.util.Logger", "org.jmol.viewer.ShapeManager", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.counter = 0;
	    this.error = null;
	    this.lock = null;
	    this.processes = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "ScriptParallelProcessor", org.jmol.script.ScriptFunction);
	Clazz.prepareFields (c$, function () {
	    this.lock =  new JavaObject ();
	    this.processes =  new java.util.ArrayList ();
	});
	c$.getExecutor = Clazz.defineMethod (c$, "getExecutor", 
					     function () {
						 return java.util.concurrent.Executors.newCachedThreadPool ();
					     });
	Clazz.defineMethod (c$, "runAllProcesses", 
			    function (viewer, inParallel) {
				if (this.processes.size () == 0) return;
				this.viewer = viewer;
				inParallel = new Boolean (inParallel & (!viewer.isParallel () && viewer.setParallel (true))).valueOf ();
				var vShapeManagers =  new java.util.ArrayList ();
				this.error = null;
				this.counter = 0;
				if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("running " + this.processes.size () + " processes on " + org.jmol.viewer.Viewer.nProcessors + " processesors inParallel=" + inParallel);
				this.counter = this.processes.size ();
				for (var i = this.processes.size (); --i >= 0; ) {
				    var shapeManager = null;
				    if (inParallel) {
					shapeManager =  new org.jmol.viewer.ShapeManager (viewer, viewer.getModelSet ());
					vShapeManagers.add (shapeManager);
				    }this.runProcess (this.processes.remove (0), shapeManager);
				}
				{
				    while (this.counter > 0) {
					try {
					    this.lock.wait ();
					} catch (e) {
					    if (Clazz.exceptionOf (e, InterruptedException)) {
					    } else {
						throw e;
					    }
					}
					if (this.error != null) throw this.error;
				    }
				}this.mergeResults (vShapeManagers);
				viewer.setParallel (false);
			    }, "org.jmol.viewer.Viewer,~B");
	Clazz.defineMethod (c$, "mergeResults", 
			    function (vShapeManagers) {
				try {
				    for (var i = 0; i < vShapeManagers.size (); i++) this.viewer.mergeShapes (vShapeManagers.get (i).getShapes ());

				} catch (e) {
				    if (Clazz.exceptionOf (e, Error)) {
					throw e;
				    } else {
					throw e;
				    }
				} finally {
				    this.counter = -1;
				    vShapeManagers = null;
				}
			    }, "java.util.List");
	Clazz.defineMethod (c$, "clearShapeManager", 
			    function (er) {
				{
				    this.error = er;
				    this.notifyAll ();
				}}, "Error");
	Clazz.defineMethod (c$, "addProcess", 
			    function (name, context) {
				this.processes.add ( new org.jmol.script.ScriptProcess (name, context));
			    }, "~S,org.jmol.script.ScriptContext");
	Clazz.defineMethod (c$, "runProcess", 
			    ($fz = function (process, shapeManager) {
				var r =  new org.jmol.thread.ScriptProcessRunnable (this, process, this.lock, shapeManager);
				var exec = (shapeManager == null ? null : this.viewer.getExecutor ());
				if (exec != null) {
				    exec.execute (r);
				} else {
				    r.run ();
				}}, $fz.isPrivate = true, $fz), "org.jmol.script.ScriptProcess,org.jmol.viewer.ShapeManager");
	Clazz.defineMethod (c$, "eval", 
			    function (context, shapeManager) {
				this.viewer.eval (context, shapeManager);
			    }, "org.jmol.script.ScriptContext,org.jmol.viewer.ShapeManager");
    });
    // 
    //// org\jmol\thread\TimeoutThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.TimeoutThread", ["java.lang.Thread", "org.jmol.util.Logger", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.script = null;
	    this.ms = 0;
	    this.targetTime = 0;
	    this.status = 0;
	    this.triggered = true;
	    this.viewer = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "TimeoutThread", org.jmol.thread.JmolThread);
	Clazz.makeConstructor (c$, 
			       function (viewer, name, ms, script) {
				   Clazz.superConstructor (this, org.jmol.thread.TimeoutThread, []);
				   this.viewer = viewer;
				   this.setMyName (name);
				   this.set (ms, script);
			       }, "org.jmol.viewer.Viewer,~S,~N,~S");
	Clazz.defineMethod (c$, "set", 
			    function (ms, script) {
				this.ms = ms;
				this.targetTime = System.currentTimeMillis () + Math.abs (ms);
				if (script != null) this.script = script;
			    }, "~N,~S");
	Clazz.defineMethod (c$, "trigger", 
			    function () {
				this.triggered = (this.ms < 0);
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return "timeout name=" + this.$name + " executions=" + this.status + " mSec=" + this.ms + " secRemaining=" + (this.targetTime - System.currentTimeMillis ()) / 1000 + " script=" + this.script + " thread=" + Thread.currentThread ().getName ();
			      });
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  if (this.script == null || this.script.length == 0 || this.ms == 0) return;
				  Thread.currentThread ().setPriority (1);
				  try {
				      var timeouts = this.viewer.getTimeouts ();
				      while (true) {
					  Thread.sleep (26);
					  if (this.targetTime > System.currentTimeMillis ()) continue;
					  this.status++;
					  var looping = (this.ms < 0);
					  this.targetTime += Math.abs (this.ms);
					  if (timeouts.get (this.$name) == null) break;
					  if (!looping) timeouts.remove (this.$name);
					  if (this.triggered) {
					      this.triggered = false;
					      this.viewer.evalStringQuiet ((looping ? this.script + ";\ntimeout ID \"" + this.$name + "\";" : this.script));
					  } else {
					  }if (!looping) break;
				      }
				  } catch (e$$) {
				      if (Clazz.exceptionOf (e$$, InterruptedException)) {
					  var ie = e$$;
					  {
					  }
				      } else if (Clazz.exceptionOf (e$$, Exception)) {
					  var ie = e$$;
					  {
					      org.jmol.util.Logger.info ("Timeout " + this.$name + " Exception: " + ie);
					  }
				      } else {
					  throw e$$;
				      }
				  }
				  this.viewer.getTimeouts ().remove (this.$name);
			      });
	c$.clear = Clazz.defineMethod (c$, "clear", 
				       function (timeouts) {
					   var e = timeouts.values ().iterator ();
					   while (e.hasNext ()) {
					       var t = e.next ();
					       if (!t.script.equals ("exitJmol")) t.interrupt ();
					   }
					   timeouts.clear ();
				       }, "java.util.Map");
	c$.setTimeout = Clazz.defineMethod (c$, "setTimeout", 
					    function (viewer, timeouts, name, mSec, script) {
						var t = timeouts.get (name);
						if (mSec == 0) {
						    if (t != null) {
							t.interrupt ();
							timeouts.remove (name);
						    }return;
						}if (t != null) {
						    t.set (mSec, script);
						    return;
						}t =  new org.jmol.thread.TimeoutThread (viewer, name, mSec, script);
						timeouts.put (name, t);
						t.start ();
					    }, "org.jmol.viewer.Viewer,java.util.Map,~S,~N,~S");
	c$.trigger = Clazz.defineMethod (c$, "trigger", 
					 function (timeouts, name) {
					     var t = timeouts.get (name);
					     if (t != null) t.trigger ();
					 }, "java.util.Map,~S");
	c$.showTimeout = Clazz.defineMethod (c$, "showTimeout", 
					     function (timeouts, name) {
						 var sb =  new org.jmol.util.StringXBuilder ();
						 if (timeouts != null) {
						     var e = timeouts.values ().iterator ();
						     while (e.hasNext ()) {
							 var t = e.next ();
							 if (name == null || t.$name.equalsIgnoreCase (name)) sb.append (t.toString ()).append ("\n");
						     }
						 }return (sb.length () > 0 ? sb.toString () : "<no timeouts set>");
					     }, "java.util.Map,~S");
    });
    // 
    //// org\jmol\util\TempArray.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.TempArray", ["org.jmol.util.Point3f", "$.Point3i"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.lengthsFreePoints = null;
	    this.freePoints = null;
	    this.lengthsFreeScreens = null;
	    this.freeScreens = null;
	    this.lengthsFreeEnum = null;
	    this.freeEnum = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "TempArray");
	Clazz.prepareFields (c$, function () {
	    this.lengthsFreePoints =  Clazz.newIntArray (6, 0);
	    this.freePoints =  new Array (6);
	    this.lengthsFreeScreens =  Clazz.newIntArray (6, 0);
	    this.freeScreens =  new Array (6);
	    this.lengthsFreeEnum =  Clazz.newIntArray (2, 0);
	    this.freeEnum =  new Array (2);
	});
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.clearTempPoints ();
				this.clearTempScreens ();
			    });
	c$.findBestFit = Clazz.defineMethod (c$, "findBestFit", 
					     ($fz = function (size, lengths) {
						 var iFit = -1;
						 var fitLength = 2147483647;
						 for (var i = lengths.length; --i >= 0; ) {
						     var freeLength = lengths[i];
						     if (freeLength >= size && freeLength < fitLength) {
							 fitLength = freeLength;
							 iFit = i;
						     }}
						 if (iFit >= 0) lengths[iFit] = 0;
						 return iFit;
					     }, $fz.isPrivate = true, $fz), "~N,~A");
	c$.findShorter = Clazz.defineMethod (c$, "findShorter", 
					     ($fz = function (size, lengths) {
						 for (var i = lengths.length; --i >= 0; ) if (lengths[i] == 0) {
						     lengths[i] = size;
						     return i;
						 }
						 var iShortest = 0;
						 var shortest = lengths[0];
						 for (var i = lengths.length; --i > 0; ) if (lengths[i] < shortest) {
						     shortest = lengths[i];
						     iShortest = i;
						 }
						 if (shortest < size) {
						     lengths[iShortest] = size;
						     return iShortest;
						 }return -1;
					     }, $fz.isPrivate = true, $fz), "~N,~A");
	Clazz.defineMethod (c$, "clearTempPoints", 
			    ($fz = function () {
				for (var i = 0; i < 6; i++) {
				    this.lengthsFreePoints[i] = 0;
				    this.freePoints[i] = null;
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "allocTempPoints", 
			    function (size) {
				var tempPoints;
				var iFit = org.jmol.util.TempArray.findBestFit (size, this.lengthsFreePoints);
				if (iFit > 0) {
				    tempPoints = this.freePoints[iFit];
				} else {
				    tempPoints =  new Array (size);
				    for (var i = size; --i >= 0; ) tempPoints[i] =  new org.jmol.util.Point3f ();

				}return tempPoints;
			    }, "~N");
	Clazz.defineMethod (c$, "freeTempPoints", 
			    function (tempPoints) {
				for (var i = 0; i < this.freePoints.length; i++) if (this.freePoints[i] === tempPoints) {
				    this.lengthsFreePoints[i] = tempPoints.length;
				    return;
				}
				var iFree = org.jmol.util.TempArray.findShorter (tempPoints.length, this.lengthsFreePoints);
				if (iFree >= 0) this.freePoints[iFree] = tempPoints;
			    }, "~A");
	Clazz.defineMethod (c$, "clearTempScreens", 
			    ($fz = function () {
				for (var i = 0; i < 6; i++) {
				    this.lengthsFreeScreens[i] = 0;
				    this.freeScreens[i] = null;
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "allocTempScreens", 
			    function (size) {
				var tempScreens;
				var iFit = org.jmol.util.TempArray.findBestFit (size, this.lengthsFreeScreens);
				if (iFit > 0) {
				    tempScreens = this.freeScreens[iFit];
				} else {
				    tempScreens =  new Array (size);
				    for (var i = size; --i >= 0; ) tempScreens[i] =  new org.jmol.util.Point3i ();

				}return tempScreens;
			    }, "~N");
	Clazz.defineMethod (c$, "freeTempScreens", 
			    function (tempScreens) {
				for (var i = 0; i < this.freeScreens.length; i++) if (this.freeScreens[i] === tempScreens) {
				    this.lengthsFreeScreens[i] = tempScreens.length;
				    return;
				}
				var iFree = org.jmol.util.TempArray.findShorter (tempScreens.length, this.lengthsFreeScreens);
				if (iFree >= 0) this.freeScreens[iFree] = tempScreens;
			    }, "~A");
	Clazz.defineMethod (c$, "allocTempEnum", 
			    function (size) {
				var tempEnum;
				var iFit = org.jmol.util.TempArray.findBestFit (size, this.lengthsFreeEnum);
				if (iFit > 0) {
				    tempEnum = this.freeEnum[iFit];
				} else {
				    tempEnum =  new Array (size);
				}return tempEnum;
			    }, "~N");
	Clazz.defineMethod (c$, "freeTempEnum", 
			    function (tempEnum) {
				for (var i = 0; i < this.freeEnum.length; i++) if (this.freeEnum[i] === tempEnum) {
				    this.lengthsFreeEnum[i] = tempEnum.length;
				    return;
				}
				var iFree = org.jmol.util.TempArray.findShorter (tempEnum.length, this.lengthsFreeEnum);
				if (iFree >= 0) this.freeEnum[iFree] = tempEnum;
			    }, "~A");
	Clazz.defineStatics (c$,
			     "freePointsSize", 6,
			     "freeScreensSize", 6,
			     "freeEnumSize", 2);
    });
    // 
    //// org\jmol\viewer\AnimationManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.constant.EnumAnimationMode", "org.jmol.util.BitSet"], "org.jmol.viewer.AnimationManager", ["java.lang.Boolean", "$.Float", "java.util.Hashtable", "org.jmol.thread.AnimationThread", "org.jmol.util.Escape", "$.StringXBuilder", "org.jmol.viewer.StateManager"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.animationReplayMode = null;
	    this.$animationOn = false;
	    this.animationPaused = false;
	    this.inMotion = false;
	    this.animationFps = 0;
	    this.animationDirection = 1;
	    this.currentDirection = 1;
	    this.currentModelIndex = 0;
	    this.firstModelIndex = 0;
	    this.frameStep = 0;
	    this.lastModelIndex = 0;
	    this.firstFrameDelayMs = 0;
	    this.lastFrameDelayMs = 0;
	    this.lastModelPainted = 0;
	    this.animationThread = null;
	    this.backgroundModelIndex = -1;
	    this.bsVisibleFrames = null;
	    this.firstFrameDelay = 0;
	    this.intAnimThread = 0;
	    this.lastFrameDelay = 1;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "AnimationManager");
	Clazz.prepareFields (c$, function () {
	    this.animationReplayMode = org.jmol.constant.EnumAnimationMode.ONCE;
	    this.bsVisibleFrames =  new org.jmol.util.BitSet ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "getVisibleFramesBitSet", 
			    function () {
				return this.bsVisibleFrames;
			    });
	Clazz.defineMethod (c$, "setCurrentModelIndex", 
			    function (modelIndex, clearBackgroundModel) {
				if (modelIndex < 0) this.setAnimationOff (false);
				var formerModelIndex = this.currentModelIndex;
				var modelSet = this.viewer.getModelSet ();
				var modelCount = (modelSet == null ? 0 : modelSet.getModelCount ());
				if (modelCount == 1) this.currentModelIndex = modelIndex = 0;
				else if (modelIndex < 0 || modelIndex >= modelCount) modelIndex = -1;
				var ids = null;
				var isSameSource = false;
				if (this.currentModelIndex != modelIndex) {
				    if (modelCount > 0) {
					var toDataFrame = this.viewer.isJmolDataFrameForModel (modelIndex);
					var fromDataFrame = this.viewer.isJmolDataFrameForModel (this.currentModelIndex);
					if (fromDataFrame) this.viewer.setJmolDataFrame (null, -1, this.currentModelIndex);
					if (this.currentModelIndex != -1) this.viewer.saveModelOrientation ();
					if (fromDataFrame || toDataFrame) {
					    ids = this.viewer.getJmolFrameType (modelIndex) + " " + modelIndex + " <-- " + " " + this.currentModelIndex + " " + this.viewer.getJmolFrameType (this.currentModelIndex);
					    isSameSource = (this.viewer.getJmolDataSourceFrame (modelIndex) == this.viewer.getJmolDataSourceFrame (this.currentModelIndex));
					}}this.currentModelIndex = modelIndex;
				    if (ids != null) {
					if (modelIndex >= 0) this.viewer.restoreModelOrientation (modelIndex);
					if (isSameSource && ids.indexOf ("quaternion") >= 0 && ids.indexOf ("plot") < 0 && ids.indexOf ("ramachandran") < 0 && ids.indexOf (" property ") < 0) {
					    this.viewer.restoreModelRotation (formerModelIndex);
					}}}this.viewer.setTrajectory (this.currentModelIndex);
				this.viewer.setFrameOffset (this.currentModelIndex);
				if (this.currentModelIndex == -1 && clearBackgroundModel) this.setBackgroundModelIndex (-1);
				this.viewer.setTainted (true);
				this.setFrameRangeVisible ();
				this.setStatusFrameChanged ();
				if (modelSet != null) {
				    if (!this.viewer.getSelectAllModels ()) this.viewer.setSelectionSubset (this.viewer.getModelUndeletedAtomsBitSet (this.currentModelIndex));
				}}, "~N,~B");
	Clazz.defineMethod (c$, "setBackgroundModelIndex", 
			    function (modelIndex) {
				var modelSet = this.viewer.getModelSet ();
				if (modelSet == null || modelIndex < 0 || modelIndex >= modelSet.getModelCount ()) modelIndex = -1;
				this.backgroundModelIndex = modelIndex;
				if (modelIndex >= 0) this.viewer.setTrajectory (modelIndex);
				this.viewer.setTainted (true);
				this.setFrameRangeVisible ();
			    }, "~N");
	Clazz.defineMethod (c$, "setStatusFrameChanged", 
			    ($fz = function () {
				if (this.viewer.getModelSet () != null) this.viewer.setStatusFrameChanged (this.$animationOn ? -2 - this.currentModelIndex : this.currentModelIndex);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setFrameRangeVisible", 
			    ($fz = function () {
				this.bsVisibleFrames.clearAll ();
				if (this.backgroundModelIndex >= 0) this.bsVisibleFrames.set (this.backgroundModelIndex);
				if (this.currentModelIndex >= 0) {
				    this.bsVisibleFrames.set (this.currentModelIndex);
				    return;
				}if (this.frameStep == 0) return;
				var nDisplayed = 0;
				var frameDisplayed = 0;
				for (var i = this.firstModelIndex; i != this.lastModelIndex; i += this.frameStep) if (!this.viewer.isJmolDataFrameForModel (i)) {
				    this.bsVisibleFrames.set (i);
				    nDisplayed++;
				    frameDisplayed = i;
				}
				if (this.firstModelIndex == this.lastModelIndex || !this.viewer.isJmolDataFrameForModel (this.lastModelIndex) || nDisplayed == 0) {
				    this.bsVisibleFrames.set (this.lastModelIndex);
				    if (nDisplayed == 0) this.firstModelIndex = this.lastModelIndex;
				    nDisplayed = 0;
				}if (nDisplayed == 1 && this.currentModelIndex < 0) this.setCurrentModelIndex (frameDisplayed, true);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "initializePointers", 
			    function (frameStep) {
				this.firstModelIndex = 0;
				var modelCount = this.viewer.getModelCount ();
				this.lastModelIndex = (frameStep == 0 ? 0 : modelCount) - 1;
				this.frameStep = frameStep;
				this.viewer.setFrameVariables ();
			    }, "~N");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.setAnimationOn (false);
				this.setCurrentModelIndex (0, true);
				this.currentDirection = 1;
				this.setAnimationDirection (1);
				this.setAnimationFps (10);
				this.setAnimationReplayMode (org.jmol.constant.EnumAnimationMode.ONCE, 0, 0);
				this.initializePointers (0);
			    });
	Clazz.defineMethod (c$, "getAnimationInfo", 
			    function () {
				var info =  new java.util.Hashtable ();
				info.put ("firstModelIndex", Integer.$valueOf (this.firstModelIndex));
				info.put ("lastModelIndex", Integer.$valueOf (this.lastModelIndex));
				info.put ("animationDirection", Integer.$valueOf (this.animationDirection));
				info.put ("currentDirection", Integer.$valueOf (this.currentDirection));
				info.put ("displayModelIndex", Integer.$valueOf (this.currentModelIndex));
				info.put ("displayModelNumber", this.viewer.getModelNumberDotted (this.currentModelIndex));
				info.put ("displayModelName", (this.currentModelIndex >= 0 ? this.viewer.getModelName (this.currentModelIndex) : ""));
				info.put ("animationFps", Integer.$valueOf (this.animationFps));
				info.put ("animationReplayMode", this.animationReplayMode.name ());
				info.put ("firstFrameDelay",  new Float (this.firstFrameDelay));
				info.put ("lastFrameDelay",  new Float (this.lastFrameDelay));
				info.put ("animationOn", Boolean.$valueOf (this.$animationOn));
				info.put ("animationPaused", Boolean.$valueOf (this.animationPaused));
				return info;
			    });
	Clazz.defineMethod (c$, "getState", 
			    function (sfunc) {
				var modelCount = this.viewer.getModelCount ();
				if (modelCount < 2) return "";
				var commands =  new org.jmol.util.StringXBuilder ();
				if (sfunc != null) {
				    sfunc.append ("  _setFrameState;\n");
				    commands.append ("function _setFrameState() {\n");
				}commands.append ("# frame state;\n");
				commands.append ("# modelCount ").appendI (modelCount).append (";\n# first ").append (this.viewer.getModelNumberDotted (0)).append (";\n# last ").append (this.viewer.getModelNumberDotted (modelCount - 1)).append (";\n");
				if (this.backgroundModelIndex >= 0) org.jmol.viewer.StateManager.appendCmd (commands, "set backgroundModel " + this.viewer.getModelNumberDotted (this.backgroundModelIndex));
				var bs = this.viewer.getFrameOffsets ();
				if (bs != null) org.jmol.viewer.StateManager.appendCmd (commands, "frame align " + org.jmol.util.Escape.escape (bs));
				org.jmol.viewer.StateManager.appendCmd (commands, "frame RANGE " + this.viewer.getModelNumberDotted (this.firstModelIndex) + " " + this.viewer.getModelNumberDotted (this.lastModelIndex));
				org.jmol.viewer.StateManager.appendCmd (commands, "animation DIRECTION " + (this.animationDirection == 1 ? "+1" : "-1"));
				org.jmol.viewer.StateManager.appendCmd (commands, "animation FPS " + this.animationFps);
				org.jmol.viewer.StateManager.appendCmd (commands, "animation MODE " + this.animationReplayMode.name () + " " + this.firstFrameDelay + " " + this.lastFrameDelay);
				org.jmol.viewer.StateManager.appendCmd (commands, "frame " + this.viewer.getModelNumberDotted (this.currentModelIndex));
				org.jmol.viewer.StateManager.appendCmd (commands, "animation " + (!this.$animationOn ? "OFF" : this.currentDirection == 1 ? "PLAY" : "PLAYREV"));
				if (this.$animationOn && this.animationPaused) org.jmol.viewer.StateManager.appendCmd (commands, "animation PAUSE");
				if (sfunc != null) commands.append ("}\n\n");
				return commands.toString ();
			    }, "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "setAnimationDirection", 
			    function (animationDirection) {
				this.animationDirection = animationDirection;
			    }, "~N");
	Clazz.defineMethod (c$, "setAnimationFps", 
			    function (animationFps) {
				this.animationFps = animationFps;
			    }, "~N");
	Clazz.defineMethod (c$, "setAnimationReplayMode", 
			    function (animationReplayMode, firstFrameDelay, lastFrameDelay) {
				this.firstFrameDelay = firstFrameDelay > 0 ? firstFrameDelay : 0;
				this.firstFrameDelayMs = Clazz.floatToInt (this.firstFrameDelay * 1000);
				this.lastFrameDelay = lastFrameDelay > 0 ? lastFrameDelay : 0;
				this.lastFrameDelayMs = Clazz.floatToInt (this.lastFrameDelay * 1000);
				this.animationReplayMode = animationReplayMode;
				this.viewer.setFrameVariables ();
			    }, "org.jmol.constant.EnumAnimationMode,~N,~N");
	Clazz.defineMethod (c$, "setAnimationRange", 
			    function (framePointer, framePointer2) {
				var modelCount = this.viewer.getModelCount ();
				if (framePointer < 0) framePointer = 0;
				if (framePointer2 < 0) framePointer2 = modelCount;
				if (framePointer >= modelCount) framePointer = modelCount - 1;
				if (framePointer2 >= modelCount) framePointer2 = modelCount - 1;
				this.firstModelIndex = framePointer;
				this.lastModelIndex = framePointer2;
				this.frameStep = (framePointer2 < framePointer ? -1 : 1);
				this.rewindAnimation ();
			    }, "~N,~N");
	Clazz.defineMethod (c$, "animationOn", 
			    ($fz = function (TF) {
				this.$animationOn = TF;
				this.viewer.setBooleanProperty ("_animating", TF);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "setAnimationOn", 
			    function (animationOn) {
				if (!animationOn || !this.viewer.haveModelSet () || this.viewer.isHeadless ()) {
				    this.setAnimationOff (false);
				    return;
				}if (!this.viewer.getSpinOn ()) this.viewer.refresh (3, "Viewer:setAnimationOn");
				this.setAnimationRange (-1, -1);
				this.resumeAnimation ();
			    }, "~B");
	Clazz.defineMethod (c$, "setAnimationOff", 
			    function (isPaused) {
				if (this.animationThread != null) {
				    this.animationThread.interrupt ();
				    this.animationThread = null;
				}this.animationPaused = isPaused;
				if (!this.viewer.getSpinOn ()) this.viewer.refresh (3, "Viewer:setAnimationOff");
				this.animationOn (false);
				this.setStatusFrameChanged ();
			    }, "~B");
	Clazz.defineMethod (c$, "pauseAnimation", 
			    function () {
				this.setAnimationOff (true);
			    });
	Clazz.defineMethod (c$, "reverseAnimation", 
			    function () {
				this.currentDirection = -this.currentDirection;
				if (!this.$animationOn) this.resumeAnimation ();
			    });
	Clazz.defineMethod (c$, "repaintDone", 
			    function () {
				this.lastModelPainted = this.currentModelIndex;
			    });
	Clazz.defineMethod (c$, "resumeAnimation", 
			    function () {
				if (this.currentModelIndex < 0) this.setAnimationRange (this.firstModelIndex, this.lastModelIndex);
				if (this.viewer.getModelCount () <= 1) {
				    this.animationOn (false);
				    return;
				}this.animationOn (true);
				this.animationPaused = false;
				if (this.animationThread == null) {
				    this.intAnimThread++;
				    this.animationThread =  new org.jmol.thread.AnimationThread (this, this.viewer, this.firstModelIndex, this.lastModelIndex, this.intAnimThread);
				    this.animationThread.start ();
				}});
	Clazz.defineMethod (c$, "setAnimationNext", 
			    function () {
				return this.setAnimationRelative (this.animationDirection);
			    });
	Clazz.defineMethod (c$, "setAnimationLast", 
			    function () {
				this.setCurrentModelIndex (this.animationDirection > 0 ? this.lastModelIndex : this.firstModelIndex, true);
			    });
	Clazz.defineMethod (c$, "rewindAnimation", 
			    function () {
				this.setCurrentModelIndex (this.animationDirection > 0 ? this.firstModelIndex : this.lastModelIndex, true);
				this.currentDirection = 1;
				this.viewer.setFrameVariables ();
			    });
	Clazz.defineMethod (c$, "setAnimationPrevious", 
			    function () {
				return this.setAnimationRelative (-this.animationDirection);
			    });
	Clazz.defineMethod (c$, "setAnimationRelative", 
			    function (direction) {
				var frameStep = this.frameStep * direction * this.currentDirection;
				var modelIndexNext = this.currentModelIndex + frameStep;
				var isDone = (modelIndexNext > this.firstModelIndex && modelIndexNext > this.lastModelIndex || modelIndexNext < this.firstModelIndex && modelIndexNext < this.lastModelIndex);
				if (isDone) {
				    switch (this.animationReplayMode) {
				    case org.jmol.constant.EnumAnimationMode.ONCE:
					return false;
				    case org.jmol.constant.EnumAnimationMode.LOOP:
					modelIndexNext = (this.animationDirection == this.currentDirection ? this.firstModelIndex : this.lastModelIndex);
					break;
				    case org.jmol.constant.EnumAnimationMode.PALINDROME:
					this.currentDirection = -this.currentDirection;
					modelIndexNext -= 2 * frameStep;
				    }
				}var nModels = this.viewer.getModelCount ();
				if (modelIndexNext < 0 || modelIndexNext >= nModels) return false;
				this.setCurrentModelIndex (modelIndexNext, true);
				return true;
			    }, "~N");
	Clazz.defineMethod (c$, "getAnimRunTimeSeconds", 
			    function () {
				if (this.firstModelIndex == this.lastModelIndex || this.lastModelIndex < 0 || this.firstModelIndex < 0 || this.lastModelIndex >= this.viewer.getModelCount () || this.firstModelIndex >= this.viewer.getModelCount ()) return 0;
				var i0 = Math.min (this.firstModelIndex, this.lastModelIndex);
				var i1 = Math.max (this.firstModelIndex, this.lastModelIndex);
				var nsec = 1 * (i1 - i0) / this.animationFps + this.firstFrameDelay + this.lastFrameDelay;
				for (var i = i0; i <= i1; i++) nsec += this.viewer.getFrameDelayMs (i) / 1000;

				return nsec;
			    });
    });
    // 
    //// org\jmol\viewer\ColorManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.util.ColorEncoder"], "org.jmol.viewer.ColorManager", ["java.lang.Float", "org.jmol.constant.EnumPalette", "org.jmol.util.ArrayUtil", "$.Colix", "$.ColorUtil", "$.Elements", "$.Logger", "$.StringXBuilder", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.propertyColorEncoder = null;
	    this.viewer = null;
	    this.g3d = null;
	    this.argbsCpk = null;
	    this.altArgbsCpk = null;
	    this.colorData = null;
	    this.isDefaultColorRasmol = false;
	    this.colixRubberband = 22;
	    this.colixBackgroundContrast = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "ColorManager");
	Clazz.prepareFields (c$, function () {
	    this.propertyColorEncoder =  new org.jmol.util.ColorEncoder (null);
	});
	Clazz.makeConstructor (c$, 
			       function (viewer, gdata) {
				   this.viewer = viewer;
				   this.g3d = gdata;
				   this.argbsCpk = org.jmol.constant.EnumPalette.argbsCpk;
				   this.altArgbsCpk = org.jmol.util.ArrayUtil.arrayCopyRangeI (org.jmol.viewer.JmolConstants.altArgbsCpk, 0, -1);
			       }, "org.jmol.viewer.Viewer,org.jmol.util.GData");
	Clazz.defineMethod (c$, "clear", 
			    function () {
			    });
	Clazz.defineMethod (c$, "getDefaultColorRasmol", 
			    function () {
				return this.isDefaultColorRasmol;
			    });
	Clazz.defineMethod (c$, "resetElementColors", 
			    function () {
				this.setDefaultColors (false);
			    });
	Clazz.defineMethod (c$, "setDefaultColors", 
			    function (isRasmol) {
				if (isRasmol) {
				    this.isDefaultColorRasmol = true;
				    this.argbsCpk = org.jmol.util.ArrayUtil.arrayCopyI (org.jmol.util.ColorEncoder.getRasmolScale (), -1);
				} else {
				    this.isDefaultColorRasmol = false;
				    this.argbsCpk = org.jmol.constant.EnumPalette.argbsCpk;
				}this.altArgbsCpk = org.jmol.util.ArrayUtil.arrayCopyRangeI (org.jmol.viewer.JmolConstants.altArgbsCpk, 0, -1);
				this.propertyColorEncoder.createColorScheme ((isRasmol ? "Rasmol=" : "Jmol="), true, true);
				for (var i = org.jmol.constant.EnumPalette.argbsCpk.length; --i >= 0; ) this.g3d.changeColixArgb (i, this.argbsCpk[i]);

				for (var i = org.jmol.viewer.JmolConstants.altArgbsCpk.length; --i >= 0; ) this.g3d.changeColixArgb ((org.jmol.util.Elements.elementNumberMax + i), this.altArgbsCpk[i]);

			    }, "~B");
	Clazz.defineMethod (c$, "setRubberbandArgb", 
			    function (argb) {
				this.colixRubberband = (argb == 0 ? 0 : org.jmol.util.Colix.getColix (argb));
			    }, "~N");
	Clazz.defineMethod (c$, "setColixBackgroundContrast", 
			    function (argb) {
				this.colixBackgroundContrast = ((org.jmol.util.ColorUtil.calcGreyscaleRgbFromRgb (argb) & 0xFF) < 128 ? 8 : 4);
			    }, "~N");
	Clazz.defineMethod (c$, "getColixBondPalette", 
			    function (bond, pid) {
				var argb = 0;
				switch (pid) {
				case 19:
				    return this.propertyColorEncoder.getColorIndexFromPalette (bond.getEnergy (), -2.5, -0.5, 7, false);
				}
				return (argb == 0 ? 10 : org.jmol.util.Colix.getColix (argb));
			    }, "org.jmol.modelset.Bond,~N");
	Clazz.defineMethod (c$, "getColixAtomPalette", 
			    function (atom, pid) {
				var argb = 0;
				var index;
				var id;
				var modelSet;
				var modelIndex;
				var lo;
				var hi;
				switch (pid) {
				case 84:
				    return (this.colorData == null || atom.index >= this.colorData.length ? 12 : this.getColixForPropertyValue (this.colorData[atom.index]));
				case 0:
				case 1:
				    id = atom.getAtomicAndIsotopeNumber ();
				    if (id < org.jmol.util.Elements.elementNumberMax) return this.g3d.getChangeableColix (id, this.argbsCpk[id]);
				    id = org.jmol.util.Elements.altElementIndexFromNumber (id);
				    return this.g3d.getChangeableColix ((org.jmol.util.Elements.elementNumberMax + id), this.altArgbsCpk[id]);
				case 2:
				    index = org.jmol.util.ColorEncoder.quantize (atom.getPartialCharge (), -1, 1, 31);
				    return this.g3d.getChangeableColix ((org.jmol.viewer.JmolConstants.PARTIAL_CHARGE_COLIX_RED + index), org.jmol.viewer.JmolConstants.argbsRwbScale[index]);
				case 3:
				    index = atom.getFormalCharge () - -4;
				    return this.g3d.getChangeableColix ((org.jmol.viewer.JmolConstants.FORMAL_CHARGE_COLIX_RED + index), org.jmol.viewer.JmolConstants.argbsFormalCharge[index]);
				case 68:
				case 5:
				    if (pid == 68) {
					modelSet = this.viewer.getModelSet ();
					lo = modelSet.getBfactor100Lo ();
					hi = modelSet.getBfactor100Hi ();
				    } else {
					lo = 0;
					hi = 10000;
				    }return this.propertyColorEncoder.getColorIndexFromPalette (atom.getBfactor100 (), lo, hi, 7, false);
				case 86:
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getGroupParameter (1112539148), -1, 1, 7, false);
				case 70:
				    hi = this.viewer.getSurfaceDistanceMax ();
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getSurfaceDistance100 (), 0, hi, 7, false);
				case 8:
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getGroupID (), 0, 0, 5, false);
				case 9:
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getGroupID (), 0, 0, 4, false);
				case 75:
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getSelectedGroupIndexWithinChain (), 0, atom.getSelectedGroupCountWithinChain () - 1, 1, false);
				case 87:
				    var m = this.viewer.getModelSet ().getModels ()[atom.modelIndex];
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getPolymerIndexInModel (), 0, m.getBioPolymerCount () - 1, 1, false);
				case 76:
				    return this.propertyColorEncoder.getColorIndexFromPalette (atom.getSelectedMonomerIndexWithinPolymer (), 0, atom.getSelectedMonomerCountWithinPolymer () - 1, 1, false);
				case 77:
				    modelSet = this.viewer.getModelSet ();
				    return this.propertyColorEncoder.getColorIndexFromPalette (modelSet.getMoleculeIndex (atom.getIndex (), true), 0, modelSet.getMoleculeCountInModel (atom.getModelIndex ()) - 1, 0, false);
				case 14:
				    modelSet = this.viewer.getModelSet ();
				    modelIndex = atom.getModelIndex ();
				    return this.propertyColorEncoder.getColorIndexFromPalette (modelSet.getAltLocIndexInModel (modelIndex, atom.getAlternateLocationID ()), 0, modelSet.getAltLocCountInModel (modelIndex), 0, false);
				case 15:
				    modelSet = this.viewer.getModelSet ();
				    modelIndex = atom.getModelIndex ();
				    return this.propertyColorEncoder.getColorIndexFromPalette (modelSet.getInsertionCodeIndexInModel (modelIndex, atom.getInsertionCode ()), 0, modelSet.getInsertionCountInModel (modelIndex), 0, false);
				case 16:
				    id = atom.getAtomicAndIsotopeNumber ();
				    argb = this.getJmolOrRasmolArgb (id, 1073741992);
				    break;
				case 17:
				    id = atom.getAtomicAndIsotopeNumber ();
				    argb = this.getJmolOrRasmolArgb (id, 1073742116);
				    break;
				case 7:
				    argb = atom.getProteinStructureSubType ().getColor ();
				    break;
				case 10:
				    var chain = (atom.getChainID ()).charCodeAt (0) & 0x1F;
				    if (chain < 0) chain = 0;
				    if (chain >= org.jmol.viewer.JmolConstants.argbsChainAtom.length) chain = chain % org.jmol.viewer.JmolConstants.argbsChainAtom.length;
				    argb = (atom.isHetero () ? org.jmol.viewer.JmolConstants.argbsChainHetero : org.jmol.viewer.JmolConstants.argbsChainAtom)[chain];
				    break;
				}
				return (argb == 0 ? 22 : org.jmol.util.Colix.getColix (argb));
			    }, "org.jmol.modelset.Atom,~N");
	Clazz.defineMethod (c$, "getJmolOrRasmolArgb", 
			    ($fz = function (id, argb) {
				switch (argb) {
				case 1073741992:
				    if (id >= org.jmol.util.Elements.elementNumberMax) break;
				    return this.propertyColorEncoder.getArgbFromPalette (id, 0, 0, 2);
				case 1073742116:
				    if (id >= org.jmol.util.Elements.elementNumberMax) break;
				    return this.propertyColorEncoder.getArgbFromPalette (id, 0, 0, 3);
				default:
				    return argb;
				}
				return org.jmol.viewer.JmolConstants.altArgbsCpk[org.jmol.util.Elements.altElementIndexFromNumber (id)];
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "setElementArgb", 
			    function (id, argb) {
				if (argb == 1073741992 && this.argbsCpk === org.jmol.constant.EnumPalette.argbsCpk) return;
				argb = this.getJmolOrRasmolArgb (id, argb);
				if (this.argbsCpk === org.jmol.constant.EnumPalette.argbsCpk) {
				    this.argbsCpk = org.jmol.util.ArrayUtil.arrayCopyRangeI (org.jmol.constant.EnumPalette.argbsCpk, 0, -1);
				    this.altArgbsCpk = org.jmol.util.ArrayUtil.arrayCopyRangeI (org.jmol.viewer.JmolConstants.altArgbsCpk, 0, -1);
				}if (id < org.jmol.util.Elements.elementNumberMax) {
				    this.argbsCpk[id] = argb;
				    this.g3d.changeColixArgb (id, argb);
				    return;
				}id = org.jmol.util.Elements.altElementIndexFromNumber (id);
				this.altArgbsCpk[id] = argb;
				this.g3d.changeColixArgb ((org.jmol.util.Elements.elementNumberMax + id), argb);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getPropertyColorRange", 
			    function () {
				if (this.propertyColorEncoder.isReversed) return [this.propertyColorEncoder.hi, this.propertyColorEncoder.lo];
				return [this.propertyColorEncoder.lo, this.propertyColorEncoder.hi];
			    });
	Clazz.defineMethod (c$, "setPropertyColorRangeData", 
			    function (data, bs, colorScheme) {
				this.colorData = data;
				this.propertyColorEncoder.currentPalette = this.propertyColorEncoder.createColorScheme (colorScheme, true, false);
				this.propertyColorEncoder.hi = 1.4E-45;
				this.propertyColorEncoder.lo = 3.4028235E38;
				if (data == null) return;
				var isAll = (bs == null);
				var d;
				var i0 = (isAll ? data.length - 1 : bs.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bs.nextSetBit (i + 1))) {
				    if (Float.isNaN (d = data[i])) continue;
				    this.propertyColorEncoder.hi = Math.max (this.propertyColorEncoder.hi, d);
				    this.propertyColorEncoder.lo = Math.min (this.propertyColorEncoder.lo, d);
				}
				this.setPropertyColorRange (this.propertyColorEncoder.lo, this.propertyColorEncoder.hi);
			    }, "~A,org.jmol.util.BitSet,~S");
	Clazz.defineMethod (c$, "setPropertyColorRange", 
			    function (min, max) {
				this.propertyColorEncoder.setRange (min, max, min > max);
				org.jmol.util.Logger.info ("ColorManager: color \"" + this.propertyColorEncoder.getCurrentColorSchemeName () + "\" range " + min + " " + max);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setPropertyColorScheme", 
			    function (colorScheme, isTranslucent, isOverloaded) {
				var isReset = (colorScheme.length == 0);
				if (isReset) colorScheme = "=";
				var range = this.getPropertyColorRange ();
				this.propertyColorEncoder.currentPalette = this.propertyColorEncoder.createColorScheme (colorScheme, true, isOverloaded);
				if (!isReset) this.setPropertyColorRange (range[0], range[1]);
				this.propertyColorEncoder.isTranslucent = isTranslucent;
			    }, "~S,~B,~B");
	Clazz.defineMethod (c$, "getState", 
			    function (sfunc) {
				var s =  new org.jmol.util.StringXBuilder ();
				var n = this.propertyColorEncoder.getState (s);
				if (n > 0 && sfunc != null) sfunc.append ("\n  _setColorState\n");
				return (n > 0 && sfunc != null ? "function _setColorState() {\n" + s.append ("}\n\n").toString () : s.toString ());
			    }, "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "setUserScale", 
			    function (scale) {
				this.propertyColorEncoder.setUserScale (scale);
			    }, "~A");
	Clazz.defineMethod (c$, "getColorSchemeList", 
			    function (colorScheme) {
				var iPt = (colorScheme == null || colorScheme.length == 0) ? this.propertyColorEncoder.currentPalette : this.propertyColorEncoder.createColorScheme (colorScheme, true, false);
				return org.jmol.util.ColorEncoder.getColorSchemeList (this.propertyColorEncoder.getColorSchemeArray (iPt));
			    }, "~S");
	Clazz.defineMethod (c$, "getColixForPropertyValue", 
			    function (val) {
				return this.propertyColorEncoder.getColorIndex (val);
			    }, "~N");
	Clazz.defineMethod (c$, "getColorEncoder", 
			    function (colorScheme) {
				if (colorScheme == null || colorScheme.length == 0) return this.propertyColorEncoder;
				var ce =  new org.jmol.util.ColorEncoder (this.propertyColorEncoder);
				ce.currentPalette = ce.createColorScheme (colorScheme, false, true);
				return (ce.currentPalette == 2147483647 ? null : ce);
			    }, "~S");
    });
    // 
    //// org\jmol\script\ScriptProcess.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.script");
    c$ = Clazz.decorateAsClass (function () {
	this.processName = null;
	this.context = null;
	Clazz.instantialize (this, arguments);
    }, org.jmol.script, "ScriptProcess");
    Clazz.makeConstructor (c$, 
			   function (name, context) {
			       this.processName = name;
			       this.context = context;
			   }, "~S,org.jmol.script.ScriptContext");
    // 
    //// org\jmol\thread\ScriptProcessRunnable.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (null, "org.jmol.thread.ScriptProcessRunnable", ["org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.parallelProcessor = null;
	    this.process = null;
	    this.processLock = null;
	    this.shapeManager = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "ScriptProcessRunnable", null, Runnable);
	Clazz.makeConstructor (c$, 
			       function (parallelProcessor, process, lock, shapeManager) {
				   this.parallelProcessor = parallelProcessor;
				   this.process = process;
				   this.processLock = lock;
				   this.shapeManager = shapeManager;
			       }, "org.jmol.thread.ScriptParallelProcessor,org.jmol.script.ScriptProcess,~O,org.jmol.viewer.ShapeManager");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  try {
				      if (this.parallelProcessor.error == null) {
					  if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("Running process " + this.process.processName + " " + this.process.context.pc + " - " + (this.process.context.pcEnd - 1));
					  this.parallelProcessor.eval (this.process.context, this.shapeManager);
					  if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("Process " + this.process.processName + " complete");
				      }} catch (e$$) {
					  if (Clazz.exceptionOf (e$$, Exception)) {
					      var e = e$$;
					      {
						  if (this.parallelProcessor.tok != 364558) e.printStackTrace ();
					      }
					  } else if (Clazz.exceptionOf (e$$, Error)) {
					      var er = e$$;
					      {
						  this.parallelProcessor.clearShapeManager (er);
					      }
					  } else {
					      throw e$$;
					  }
				      } finally {
					  {
					      --this.parallelProcessor.counter;
					      this.processLock.notifyAll ();
					  }}
			      });
    });
    // 
    //// org\jmol\viewer\ShapeManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.util.BitSet"], "org.jmol.viewer.ShapeManager", ["java.lang.Boolean", "java.util.Hashtable", "org.jmol.constant.EnumPalette", "$.EnumVdw", "org.jmol.util.Logger", "$.Point3f", "$.StringXBuilder", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.gdata = null;
	    this.modelSet = null;
	    this.shapes = null;
	    this.viewer = null;
	    this.bsRenderableAtoms = null;
	    this.navigationCrossHairMinMax = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "ShapeManager");
	Clazz.prepareFields (c$, function () {
	    this.bsRenderableAtoms =  new org.jmol.util.BitSet ();
	    this.navigationCrossHairMinMax =  Clazz.newIntArray (4, 0);
	});
	Clazz.makeConstructor (c$, 
			       function (viewer, modelSet) {
				   this.construct (viewer);
				   this.resetShapes ();
				   this.loadDefaultShapes (modelSet);
			       }, "org.jmol.viewer.Viewer,org.jmol.modelset.ModelSet");
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
				   this.gdata = viewer.getGraphicsData ();
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "findNearestShapeAtomIndex", 
			    function (x, y, closest, bsNot) {
				if (this.shapes != null) for (var i = 0; i < this.shapes.length && closest[0] == null; ++i) if (this.shapes[i] != null) this.shapes[i].findNearestAtomIndex (x, y, closest, bsNot);

			    }, "~N,~N,~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getShapes", 
			    function () {
				return this.shapes;
			    });
	Clazz.defineMethod (c$, "getShapePropertyIndex", 
			    function (shapeID, propertyName, index) {
				if (this.shapes == null || this.shapes[shapeID] == null) return null;
				this.viewer.setShapeErrorState (shapeID, "get " + propertyName);
				var result = this.shapes[shapeID].getProperty (propertyName, index);
				this.viewer.setShapeErrorState (-1, null);
				return result;
			    }, "~N,~S,~N");
	Clazz.defineMethod (c$, "getShapePropertyData", 
			    function (shapeID, propertyName, data) {
				if (this.shapes == null || this.shapes[shapeID] == null) return false;
				this.viewer.setShapeErrorState (shapeID, "get " + propertyName);
				var result = this.shapes[shapeID].getPropertyData (propertyName, data);
				this.viewer.setShapeErrorState (-1, null);
				return result;
			    }, "~N,~S,~A");
	Clazz.defineMethod (c$, "getShapeIdFromObjectName", 
			    function (objectName) {
				if (this.shapes != null) for (var i = 16; i < 29; ++i) if (this.shapes[i] != null && this.shapes[i].getIndexFromName (objectName) >= 0) return i;

				return -1;
			    }, "~S");
	Clazz.defineMethod (c$, "loadDefaultShapes", 
			    function (newModelSet) {
				this.modelSet = newModelSet;
				if (this.shapes != null) for (var i = 0; i < this.shapes.length; ++i) if (this.shapes[i] != null) this.shapes[i].setModelSet (newModelSet);

				this.loadShape (0);
				this.loadShape (1);
				this.loadShape (6);
				this.loadShape (31);
				this.loadShape (32);
			    }, "org.jmol.modelset.ModelSet");
	Clazz.defineMethod (c$, "loadShape", 
			    function (shapeID) {
				if (this.shapes == null) return null;
				if (this.shapes[shapeID] != null) return this.shapes[shapeID];
				if (shapeID == 2 || shapeID == 3 || shapeID == 4) return null;
				var className = org.jmol.viewer.JmolConstants.getShapeClassName (shapeID, false);
				try {
				    var shapeClass = Class.forName (className);
				    var shape = shapeClass.newInstance ();
				    this.viewer.setShapeErrorState (shapeID, "allocate");
				    shape.initializeShape (this.viewer, this.gdata, this.modelSet, shapeID);
				    this.viewer.setShapeErrorState (-1, null);
				    return this.shapes[shapeID] = shape;
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.errorEx ("Could not instantiate shape:" + className, e);
					return null;
				    } else {
					throw e;
				    }
				}
			    }, "~N");
	Clazz.defineMethod (c$, "refreshShapeTrajectories", 
			    function (baseModel, bs, mat) {
				var Imodel = Integer.$valueOf (baseModel);
				var bsModelAtoms = this.viewer.getModelUndeletedAtomsBitSet (baseModel);
				for (var i = 0; i < 35; i++) if (this.shapes[i] != null) this.setShapePropertyBs (i, "refreshTrajectories", [Imodel, bs, mat], bsModelAtoms);

			    }, "~N,org.jmol.util.BitSet,org.jmol.util.Matrix4f");
	Clazz.defineMethod (c$, "releaseShape", 
			    function (shapeID) {
				if (this.shapes != null) this.shapes[shapeID] = null;
			    }, "~N");
	Clazz.defineMethod (c$, "resetShapes", 
			    function () {
				if (!this.viewer.noGraphicsAllowed ()) this.shapes =  new Array (35);
			    });
	Clazz.defineMethod (c$, "setShapeSizeBs", 
			    function (shapeID, size, rd, bsSelected) {
				if (this.shapes == null) return;
				if (bsSelected == null && (shapeID != 1 || size != 2147483647)) bsSelected = this.viewer.getSelectionSet (false);
				if (rd != null && rd.value != 0 && rd.vdwType === org.jmol.constant.EnumVdw.TEMP) this.modelSet.getBfactor100Lo ();
				this.viewer.setShapeErrorState (shapeID, "set size");
				if (rd != null && rd.value != 0 || rd == null && size != 0) this.loadShape (shapeID);
				if (this.shapes[shapeID] != null) {
				    this.shapes[shapeID].setShapeSizeRD (size, rd, bsSelected);
				}this.viewer.setShapeErrorState (-1, null);
			    }, "~N,~N,org.jmol.atomdata.RadiusData,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setLabel", 
			    function (strLabel, bsSelection) {
				if (strLabel != null) {
				    this.loadShape (5);
				    this.setShapeSizeBs (5, 0, null, bsSelection);
				}this.setShapePropertyBs (5, "label", strLabel, bsSelection);
			    }, "~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setShapePropertyBs", 
			    function (shapeID, propertyName, value, bsSelected) {
				if (this.shapes == null || this.shapes[shapeID] == null) return;
				this.viewer.setShapeErrorState (shapeID, "set " + propertyName);
				this.shapes[shapeID].setShapeProperty (propertyName.intern (), value, bsSelected);
				this.viewer.setShapeErrorState (-1, null);
			    }, "~N,~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "checkFrankclicked", 
			    function (x, y) {
				var frankShape = this.shapes[34];
				return (frankShape != null && frankShape.wasClicked (x, y));
			    }, "~N,~N");
	Clazz.defineMethod (c$, "checkObjectClicked", 
			    function (x, y, modifiers, bsVisible) {
				var shape;
				var map = null;
				if (modifiers != 0 && this.viewer.getBondPicking () && (map = this.shapes[1].checkObjectClicked (x, y, modifiers, bsVisible)) != null) return map;
				for (var i = 0; i < org.jmol.viewer.ShapeManager.clickableMax; i++) if ((shape = this.shapes[org.jmol.viewer.ShapeManager.hoverable[i]]) != null && (map = shape.checkObjectClicked (x, y, modifiers, bsVisible)) != null) return map;

				return null;
			    }, "~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "checkObjectDragged", 
			    function (prevX, prevY, x, y, modifiers, bsVisible, iShape) {
				var found = false;
				var n = (iShape > 0 ? iShape + 1 : 35);
				for (var i = iShape; !found && i < n; ++i) if (this.shapes[i] != null) found = this.shapes[i].checkObjectDragged (prevX, prevY, x, y, modifiers, bsVisible);

				return found;
			    }, "~N,~N,~N,~N,~N,org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "checkObjectHovered", 
			    function (x, y, bsVisible, checkBonds) {
				var shape = this.shapes[1];
				if (checkBonds && shape != null && shape.checkObjectHovered (x, y, bsVisible)) return true;
				for (var i = 0; i < org.jmol.viewer.ShapeManager.hoverable.length; i++) {
				    shape = this.shapes[org.jmol.viewer.ShapeManager.hoverable[i]];
				    if (shape != null && shape.checkObjectHovered (x, y, bsVisible)) return true;
				}
				return false;
			    }, "~N,~N,org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "deleteShapeAtoms", 
			    function (value, bs) {
				if (this.shapes != null) for (var j = 0; j < 35; j++) if (this.shapes[j] != null) this.setShapePropertyBs (j, "deleteModelAtoms", value, bs);

			    }, "~A,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteVdwDependentShapes", 
			    function (bs) {
				if (this.shapes[23] != null) this.shapes[23].setShapeProperty ("deleteVdw", null, bs);
				if (this.shapes[24] != null) this.shapes[24].setShapeProperty ("deleteVdw", null, bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomShapeValue", 
			    function (tok, group, atomIndex) {
				var iShape = org.jmol.viewer.JmolConstants.shapeTokenIndex (tok);
				if (iShape < 0 || this.shapes[iShape] == null) return 0;
				var mad = this.shapes[iShape].getSize (atomIndex);
				if (mad == 0) {
				    if ((group.shapeVisibilityFlags & this.shapes[iShape].myVisibilityFlag) == 0) return 0;
				    mad = this.shapes[iShape].getSize (group);
				}return mad / 2000;
			    }, "~N,org.jmol.modelset.Group,~N");
	Clazz.defineMethod (c$, "getObjectMap", 
			    function (map, withDollar) {
				if (this.shapes == null) return;
				var bDollar = Boolean.$valueOf (withDollar);
				for (var i = 16; i < 29; ++i) this.getShapePropertyData (i, "getNames", [map, bDollar]);

			    }, "java.util.Map,~B");
	Clazz.defineMethod (c$, "getProperty", 
			    function (paramInfo) {
				if (paramInfo.equals ("getShapes")) return this.shapes;
				return null;
			    }, "~O");
	Clazz.defineMethod (c$, "getRenderableBitSet", 
			    function () {
				return this.bsRenderableAtoms;
			    });
	Clazz.defineMethod (c$, "getShape", 
			    function (i) {
				return (this.shapes == null ? null : this.shapes[i]);
			    }, "~N");
	Clazz.defineMethod (c$, "getShapeInfo", 
			    function () {
				var info =  new java.util.Hashtable ();
				var commands =  new org.jmol.util.StringXBuilder ();
				if (this.shapes != null) for (var i = 0; i < 35; ++i) {
				    var shape = this.shapes[i];
				    if (shape != null) {
					var shapeType = org.jmol.viewer.JmolConstants.shapeClassBases[i];
					var shapeDetail = shape.getShapeDetail ();
					if (shapeDetail != null) info.put (shapeType, shapeDetail);
				    }}
				if (commands.length () > 0) info.put ("shapeCommands", commands.toString ());
				return info;
			    });
	Clazz.defineMethod (c$, "getShapeState", 
			    function (commands, isAll, iShape) {
				if (this.shapes == null) return;
				var cmd;
				for (var i = 0; i < 35; ++i) {
				    if (iShape != 2147483647 && i != iShape) continue;
				    var shape = this.shapes[i];
				    if (shape != null && (isAll || org.jmol.viewer.JmolConstants.isShapeSecondary (i)) && (cmd = shape.getShapeState ()) != null && cmd.length > 1) commands.append (cmd);
				}
				commands.append ("  select *;\n");
			    }, "org.jmol.util.StringXBuilder,~B,~N");
	Clazz.defineMethod (c$, "mergeShapes", 
			    function (newShapes) {
				if (newShapes == null) return;
				if (this.shapes == null) this.shapes = newShapes;
				else for (var i = 0; i < newShapes.length; ++i) if (newShapes[i] != null) {
				    if (this.shapes[i] == null) this.loadShape (i);
				    this.shapes[i].merge (newShapes[i]);
				}
			    }, "~A");
	Clazz.defineMethod (c$, "resetBioshapes", 
			    function (bsAllAtoms) {
				if (this.shapes == null) return;
				for (var i = 0; i < this.shapes.length; ++i) if (this.shapes[i] != null && this.shapes[i].isBioShape) {
				    this.shapes[i].setModelSet (this.modelSet);
				    this.shapes[i].setShapeSizeRD (0, null, bsAllAtoms);
				    this.shapes[i].setShapeProperty ("color", org.jmol.constant.EnumPalette.NONE, bsAllAtoms);
				}
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setAtomLabel", 
			    function (strLabel, i) {
				if (this.shapes == null) return;
				this.loadShape (5);
				this.shapes[5].setProperty ("label:" + strLabel, Integer.$valueOf (i), null);
			    }, "~S,~N");
	Clazz.defineMethod (c$, "setModelVisibility", 
			    function () {
				if (this.shapes == null || this.shapes[0] == null) return;
				var bs = this.viewer.getVisibleFramesBitSet ();
				for (var i = 1; i < 35; i++) if (this.shapes[i] != null) this.shapes[i].setVisibilityFlags (bs);

				this.shapes[0].setVisibilityFlags (bs);
				for (var i = 0; i < 35; ++i) {
				    var shape = this.shapes[i];
				    if (shape != null) shape.setModelClickability ();
				}
			    });
	Clazz.defineMethod (c$, "finalizeAtoms", 
			    function (bsAtoms, ptOffset) {
				if (bsAtoms != null) {
				    var ptCenter = this.viewer.getAtomSetCenter (bsAtoms);
				    var pt =  new org.jmol.util.Point3f ();
				    this.viewer.transformPt3f (ptCenter, pt);
				    pt.add (ptOffset);
				    this.viewer.unTransformPoint (pt, pt);
				    pt.sub (ptCenter);
				    this.viewer.setAtomCoordRelative (pt, bsAtoms);
				    ptOffset.set (0, 0, 0);
				}this.bsRenderableAtoms.clearAll ();
				var atoms = this.modelSet.atoms;
				for (var i = this.modelSet.getAtomCount (); --i >= 0; ) {
				    var atom = atoms[i];
				    if ((atom.getShapeVisibilityFlags () & 1) == 0) continue;
				    this.bsRenderableAtoms.set (i);
				}
			    }, "org.jmol.util.BitSet,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformAtoms", 
			    function () {
				var vibrationVectors = this.modelSet.vibrationVectors;
				var atoms = this.modelSet.atoms;
				for (var i = this.bsRenderableAtoms.nextSetBit (0); i >= 0; i = this.bsRenderableAtoms.nextSetBit (i + 1)) {
				    var atom = atoms[i];
				    var screen = (vibrationVectors != null && atom.hasVibration () ? this.viewer.transformPtVib (atom, vibrationVectors[i]) : this.viewer.transformPt (atom));
				    atom.screenX = screen.x;
				    atom.screenY = screen.y;
				    atom.screenZ = screen.z;
				    atom.screenDiameter = this.viewer.scaleToScreen (screen.z, Math.abs (atom.madAtom));
				}
				if (this.viewer.getSlabEnabled ()) {
				    var slabByMolecule = this.viewer.getSlabByMolecule ();
				    var slabByAtom = this.viewer.getSlabByAtom ();
				    var minZ = this.gdata.getSlab ();
				    var maxZ = this.gdata.getDepth ();
				    if (slabByMolecule) {
					var molecules = this.modelSet.getMolecules ();
					var moleculeCount = this.modelSet.getMoleculeCountInModel (-1);
					for (var i = 0; i < moleculeCount; i++) {
					    var m = molecules[i];
					    var j = 0;
					    var pt = m.firstAtomIndex;
					    if (!this.bsRenderableAtoms.get (pt)) continue;
					    for (; j < m.atomCount; j++, pt++) if (this.gdata.isClippedZ (atoms[pt].screenZ - (atoms[pt].screenDiameter >> 1))) break;

					    if (j != m.atomCount) {
						pt = m.firstAtomIndex;
						for (var k = 0; k < m.atomCount; k++) {
						    this.bsRenderableAtoms.clear (pt);
						    atoms[pt++].screenZ = 0;
						}
					    }}
				    }for (var i = this.bsRenderableAtoms.nextSetBit (0); i >= 0; i = this.bsRenderableAtoms.nextSetBit (i + 1)) {
					var atom = atoms[i];
					if (this.gdata.isClippedZ (atom.screenZ - (slabByAtom ? atoms[i].screenDiameter >> 1 : 0))) {
					    atom.setClickable (0);
					    var r = Clazz.doubleToInt ((slabByAtom ? -1 : 1) * atom.screenDiameter / 2);
					    if (atom.screenZ + r < minZ || atom.screenZ - r > maxZ || !this.gdata.isInDisplayRange (atom.screenX, atom.screenY)) {
						this.bsRenderableAtoms.clear (i);
					    }}}
				}if (this.modelSet.getAtomCount () == 0 || !this.viewer.getShowNavigationPoint ()) return null;
				var minX = 2147483647;
				var maxX = -2147483648;
				var minY = 2147483647;
				var maxY = -2147483648;
				for (var i = this.bsRenderableAtoms.nextSetBit (0); i >= 0; i = this.bsRenderableAtoms.nextSetBit (i + 1)) {
				    var atom = atoms[i];
				    if (atom.screenX < minX) minX = atom.screenX;
				    if (atom.screenX > maxX) maxX = atom.screenX;
				    if (atom.screenY < minY) minY = atom.screenY;
				    if (atom.screenY > maxY) maxY = atom.screenY;
				}
				this.navigationCrossHairMinMax[0] = minX;
				this.navigationCrossHairMinMax[1] = maxX;
				this.navigationCrossHairMinMax[2] = minY;
				this.navigationCrossHairMinMax[3] = maxY;
				return this.navigationCrossHairMinMax;
			    });
	Clazz.defineStatics (c$,
			     "hoverable", [29, 24, 23, 22, 34]);
	c$.clickableMax = c$.prototype.clickableMax = org.jmol.viewer.ShapeManager.hoverable.length - 1;
    });
    // 
    //// org\jmol\thread\AnimationThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.AnimationThread", ["java.lang.Thread", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.animationManager = null;
	    this.viewer = null;
	    this.framePointer = 0;
	    this.framePointer2 = 0;
	    this.intThread = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "AnimationThread", org.jmol.thread.JmolThread);
	Clazz.makeConstructor (c$, 
			       function (animationManager, viewer, framePointer, framePointer2, intAnimThread) {
				   Clazz.superConstructor (this, org.jmol.thread.AnimationThread, []);
				   this.animationManager = animationManager;
				   this.viewer = viewer;
				   this.framePointer = framePointer;
				   this.framePointer2 = framePointer2;
				   this.setMyName ("AnimationThread");
				   this.intThread = intAnimThread;
			       }, "org.jmol.viewer.AnimationManager,org.jmol.viewer.Viewer,~N,~N,~N");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  var timeBegin = System.currentTimeMillis ();
				  var targetTime = 0;
				  var sleepTime;
				  if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("animation thread " + this.intThread + " running");
				  this.viewer.requestRepaintAndWait ();
				  try {
				      sleepTime = targetTime - (System.currentTimeMillis () - timeBegin);
				      if (sleepTime > 0) Thread.sleep (sleepTime);
				      var isFirst = true;
				      while (!this.isInterrupted () && this.animationManager.$animationOn) {
					  if (this.animationManager.currentModelIndex == this.framePointer) {
					      targetTime += this.animationManager.firstFrameDelayMs;
					      sleepTime = targetTime - (System.currentTimeMillis () - timeBegin);
					      if (sleepTime > 0) Thread.sleep (sleepTime);
					  }if (this.animationManager.currentModelIndex == this.framePointer2) {
					      targetTime += this.animationManager.lastFrameDelayMs;
					      sleepTime = targetTime - (System.currentTimeMillis () - timeBegin);
					      if (sleepTime > 0) Thread.sleep (sleepTime);
					  }if (!isFirst && this.animationManager.lastModelPainted == this.animationManager.currentModelIndex && !this.animationManager.setAnimationNext ()) {
					      org.jmol.util.Logger.debug ("animation thread " + this.intThread + " exiting");
					      this.animationManager.setAnimationOff (false);
					      return;
					  }isFirst = false;
					  targetTime += Clazz.floatToInt ((1000 / this.animationManager.animationFps) + this.viewer.getFrameDelayMs (this.animationManager.currentModelIndex));
					  sleepTime = targetTime - (System.currentTimeMillis () - timeBegin);
					  while (!this.isInterrupted () && this.animationManager.$animationOn && !this.viewer.getRefreshing ()) {
					      Thread.sleep (10);
					  }
					  if (!this.viewer.getSpinOn ()) this.viewer.refresh (1, "animationThread");
					  sleepTime = targetTime - (System.currentTimeMillis () - timeBegin);
					  if (sleepTime > 0) Thread.sleep (sleepTime);
				      }
				  } catch (ie) {
				      if (Clazz.exceptionOf (ie, InterruptedException)) {
					  org.jmol.util.Logger.debug ("animation thread interrupted!");
					  try {
					      this.animationManager.setAnimationOn (false);
					  } catch (e) {
					      if (Clazz.exceptionOf (e, Exception)) {
					      } else {
						  throw e;
					      }
					  }
				      } else {
					  throw ie;
				      }
				  }
			      });
    });
    // 
    //// org\jmol\viewer\ModelManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (null, "org.jmol.viewer.ModelManager", ["org.jmol.modelset.ModelLoader"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.modelSet = null;
	    this.fullPathName = null;
	    this.fileName = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "ModelManager");
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "zap", 
			    function () {
				this.fullPathName = this.fileName = null;
				return (this.modelSet = ( new org.jmol.modelset.ModelLoader (this.viewer, this.viewer.getZapName (), null, null, null, null)).getModelSet ());
			    });
	Clazz.defineMethod (c$, "getModelSetFileName", 
			    function () {
				return (this.fileName != null ? this.fileName : this.viewer.getZapName ());
			    });
	Clazz.defineMethod (c$, "getModelSetPathName", 
			    function () {
				return this.fullPathName;
			    });
	Clazz.defineMethod (c$, "createModelSet", 
			    function (fullPathName, fileName, loadScript, atomSetCollection, bsNew, isAppend) {
				var modelSetName = null;
				if (isAppend) {
				    modelSetName = this.modelSet.getModelSetName ();
				    if (modelSetName.equals ("zapped")) modelSetName = null;
				    else if (modelSetName.indexOf (" (modified)") < 0) modelSetName += " (modified)";
				} else if (atomSetCollection == null) {
				    return this.zap ();
				} else {
				    this.fullPathName = fullPathName;
				    this.fileName = fileName;
				}if (atomSetCollection != null) {
				    if (modelSetName == null) {
					modelSetName = this.viewer.getModelAdapter ().getAtomSetCollectionName (atomSetCollection);
					if (modelSetName != null) {
					    modelSetName = modelSetName.trim ();
					    if (modelSetName.length == 0) modelSetName = null;
					}if (modelSetName == null) modelSetName = org.jmol.viewer.ModelManager.reduceFilename (fileName);
				    }this.modelSet = ( new org.jmol.modelset.ModelLoader (this.viewer, modelSetName, loadScript, atomSetCollection, (isAppend ? this.modelSet : null), bsNew)).getModelSet ();
				}if (this.modelSet.getAtomCount () == 0) this.zap ();
				return this.modelSet;
			    }, "~S,~S,org.jmol.util.StringXBuilder,~O,org.jmol.util.BitSet,~B");
	c$.reduceFilename = Clazz.defineMethod (c$, "reduceFilename", 
						($fz = function (fileName) {
						    if (fileName == null) return null;
						    var ichDot = fileName.indexOf ('.');
						    if (ichDot > 0) fileName = fileName.substring (0, ichDot);
						    if (fileName.length > 24) fileName = fileName.substring (0, 20) + " ...";
						    return fileName;
						}, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "createAtomDataSet", 
			    function (atomSetCollection, tokType) {
				org.jmol.modelset.ModelLoader.createAtomDataSet (this.viewer, this.modelSet, tokType, atomSetCollection, this.viewer.getSelectionSet (false));
			    }, "~O,~N");
    });
    // 
    //// org\jmol\viewer\ScriptManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.util.ArrayList"], "org.jmol.viewer.ScriptManager", ["java.lang.Boolean", "$.Thread", "org.jmol.thread.CommandWatcherThread", "$.ScriptQueueThread", "org.jmol.util.Logger", "$.TextFormat"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.queueThreads = null;
	    this.scriptQueueRunning = null;
	    this.scriptQueue = null;
	    this.commandWatcherThread = null;
	    this.useCommandWatcherThread = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "ScriptManager");
	Clazz.prepareFields (c$, function () {
	    this.queueThreads =  new Array (2);
	    this.scriptQueueRunning =  Clazz.newBooleanArray (2, false);
	    this.scriptQueue =  new java.util.ArrayList ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.startCommandWatcher (false);
				this.interruptQueueThreads ();
			    });
	Clazz.defineMethod (c$, "addScript", 
			    function (strScript, isScriptFile, isQuiet) {
				return this.addScript ("String", strScript, "", isScriptFile, isQuiet);
			    }, "~S,~B,~B");
	Clazz.defineMethod (c$, "addScript", 
			    ($fz = function (returnType, strScript, statusList, isScriptFile, isQuiet) {
				{
				    // from ScriptManager.addScript -- just run immediately
				    return this.viewer.evalStringWaitStatus(returnType, strScript, statusList, isScriptFile, isQuiet, true);
				}if (!this.viewer.usingScriptQueue ()) {
				    this.clearQueue ();
				    this.viewer.haltScriptExecution ();
				}if (this.commandWatcherThread == null && this.useCommandWatcherThread) this.startCommandWatcher (true);
				if (this.commandWatcherThread != null && strScript.indexOf ("/*SPLIT*/") >= 0) {
				    var scripts = org.jmol.util.TextFormat.splitChars (strScript, "/*SPLIT*/");
				    for (var i = 0; i < scripts.length; i++) this.addScript (returnType, scripts[i], statusList, isScriptFile, isQuiet);

				    return "split into " + scripts.length + " sections for processing";
				}var useCommandThread = (this.commandWatcherThread != null && (strScript.indexOf ("javascript") < 0 || strScript.indexOf ("#javascript ") >= 0));
				var scriptItem =  new java.util.ArrayList ();
				scriptItem.add (strScript);
				scriptItem.add (statusList);
				scriptItem.add (returnType);
				scriptItem.add (isScriptFile ? Boolean.TRUE : Boolean.FALSE);
				scriptItem.add (isQuiet ? Boolean.TRUE : Boolean.FALSE);
				scriptItem.add (Integer.$valueOf (useCommandThread ? -1 : 1));
				this.scriptQueue.add (scriptItem);
				this.startScriptQueue (false);
				return "pending";
			    }, $fz.isPrivate = true, $fz), "~S,~S,~S,~B,~B");
	Clazz.defineMethod (c$, "clearQueue", 
			    function () {
				this.scriptQueue.clear ();
			    });
	Clazz.defineMethod (c$, "waitForQueue", 
			    function () {
				var n = 0;
				while (this.queueThreads[0] != null || this.queueThreads[1] != null) {
				    try {
					Thread.sleep (100);
					if (((n++) % 10) == 0) if (org.jmol.util.Logger.debugging) {
					    org.jmol.util.Logger.info ("...scriptManager waiting for queue: " + this.scriptQueue.size () + " thread=" + Thread.currentThread ().getName ());
					}} catch (e) {
					    if (Clazz.exceptionOf (e, InterruptedException)) {
					    } else {
						throw e;
					    }
					}
				}
			    });
	Clazz.defineMethod (c$, "flushQueue", 
			    function (command) {
				for (var i = this.scriptQueue.size (); --i >= 0; ) {
				    var strScript = (this.scriptQueue.get (i).get (0));
				    if (strScript.indexOf (command) == 0) {
					this.scriptQueue.remove (i);
					if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug (this.scriptQueue.size () + " scripts; removed: " + strScript);
				    }}
			    }, "~S");
	Clazz.defineMethod (c$, "startScriptQueue", 
			    ($fz = function (startedByCommandWatcher) {
				var pt = (startedByCommandWatcher ? 1 : 0);
				if (this.scriptQueueRunning[pt]) return;
				this.scriptQueueRunning[pt] = true;
				this.queueThreads[pt] =  new org.jmol.thread.ScriptQueueThread (this, this.viewer, startedByCommandWatcher, pt);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getScriptItem", 
			    function (watching, isByCommandWatcher) {
				var scriptItem = this.scriptQueue.get (0);
				var flag = ((scriptItem.get (5)).intValue ());
				var isOK = (watching ? flag < 0 : isByCommandWatcher ? flag == 0 : flag == 1);
				return (isOK ? scriptItem : null);
			    }, "~B,~B");
	Clazz.defineMethod (c$, "startCommandWatcher", 
			    function (isStart) {
				this.useCommandWatcherThread = isStart;
				if (isStart) {
				    if (this.commandWatcherThread != null) return;
				    this.commandWatcherThread =  new org.jmol.thread.CommandWatcherThread (this);
				} else {
				    if (this.commandWatcherThread == null) return;
				    this.clearCommandWatcherThread ();
				}if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.info ("command watcher " + (isStart ? "started" : "stopped") + this.commandWatcherThread);
				}}, "~B");
	Clazz.defineMethod (c$, "interruptQueueThreads", 
			    function () {
				for (var i = 0; i < this.queueThreads.length; i++) {
				    if (this.queueThreads[i] != null) this.queueThreads[i].interrupt ();
				}
			    });
	Clazz.defineMethod (c$, "clearCommandWatcherThread", 
			    function () {
				if (this.commandWatcherThread == null) return;
				this.commandWatcherThread.interrupt ();
				this.commandWatcherThread = null;
			    });
	Clazz.defineMethod (c$, "queueThreadFinished", 
			    function (pt) {
				this.queueThreads[pt].interrupt ();
				this.scriptQueueRunning[pt] = false;
				this.queueThreads[pt] = null;
				this.viewer.setSyncDriver (4);
			    }, "~N");
	Clazz.defineMethod (c$, "runScriptNow", 
			    function () {
				if (this.scriptQueue.size () > 0) {
				    var scriptItem = this.getScriptItem (true, true);
				    if (scriptItem != null) {
					scriptItem.set (5, Integer.$valueOf (0));
					this.startScriptQueue (true);
				    }}});
    });
    // 
    //// org\jmol\viewer\SelectionManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.util.BitSet"], "org.jmol.viewer.SelectionManager", ["java.util.Hashtable", "org.jmol.i18n.GT", "org.jmol.util.ArrayUtil", "$.BitSetUtil", "$.Escape", "$.StringXBuilder", "org.jmol.viewer.StateManager"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.listeners = null;
	    this.bsHidden = null;
	    this.bsSelection = null;
	    this.bsFixed = null;
	    this.bsSubset = null;
	    this.bsDeleted = null;
	    this.empty = 1;
	    this.hideNotSelected = false;
	    this.bsTemp = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "SelectionManager");
	Clazz.prepareFields (c$, function () {
	    this.listeners =  new Array (0);
	    this.bsHidden =  new org.jmol.util.BitSet ();
	    this.bsSelection =  new org.jmol.util.BitSet ();
	    this.bsFixed =  new org.jmol.util.BitSet ();
	    this.bsTemp =  new org.jmol.util.BitSet ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "deleteModelAtoms", 
			    function (bsDeleted) {
				org.jmol.util.BitSetUtil.deleteBits (this.bsHidden, bsDeleted);
				org.jmol.util.BitSetUtil.deleteBits (this.bsSelection, bsDeleted);
				org.jmol.util.BitSetUtil.deleteBits (this.bsSubset, bsDeleted);
				org.jmol.util.BitSetUtil.deleteBits (this.bsFixed, bsDeleted);
				org.jmol.util.BitSetUtil.deleteBits (this.bsDeleted, bsDeleted);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.clearSelection (true);
				this.hide (null, null, null, true);
				this.setSelectionSubset (null);
				this.bsDeleted = null;
				this.setMotionFixedAtoms (null);
			    });
	Clazz.defineMethod (c$, "hide", 
			    function (modelSet, bs, addRemove, isQuiet) {
				if (bs == null) {
				    this.bsHidden.clearAll ();
				} else if (addRemove == null) {
				    this.bsHidden.clearAll ();
				    this.bsHidden.or (bs);
				} else if (addRemove.booleanValue ()) {
				    this.bsHidden.or (bs);
				} else {
				    this.bsHidden.andNot (bs);
				}if (modelSet != null) modelSet.setBsHidden (this.bsHidden);
				if (!isQuiet) this.viewer.reportSelection (org.jmol.i18n.GT._ ("{0} atoms hidden", "" + this.bsHidden.cardinality ()));
			    }, "org.jmol.modelset.ModelSet,org.jmol.util.BitSet,Boolean,~B");
	Clazz.defineMethod (c$, "display", 
			    function (modelSet, bs, addRemove, isQuiet) {
				var bsAll = modelSet.getModelAtomBitSetIncludingDeleted (-1, false);
				if (bs == null) {
				    this.bsHidden.clearAll ();
				} else if (addRemove == null) {
				    this.bsHidden.or (bsAll);
				    this.bsHidden.andNot (bs);
				} else if (addRemove.booleanValue ()) {
				    this.bsHidden.andNot (bs);
				} else {
				    this.bsHidden.or (bs);
				}org.jmol.util.BitSetUtil.andNot (this.bsHidden, this.bsDeleted);
				modelSet.setBsHidden (this.bsHidden);
				if (!isQuiet) this.viewer.reportSelection (org.jmol.i18n.GT._ ("{0} atoms hidden", "" + this.bsHidden.cardinality ()));
			    }, "org.jmol.modelset.ModelSet,org.jmol.util.BitSet,Boolean,~B");
	Clazz.defineMethod (c$, "getHiddenSet", 
			    function () {
				return this.bsHidden;
			    });
	Clazz.defineMethod (c$, "getHideNotSelected", 
			    function () {
				return this.hideNotSelected;
			    });
	Clazz.defineMethod (c$, "setHideNotSelected", 
			    function (TF) {
				this.hideNotSelected = TF;
				if (TF) this.selectionChanged (false);
			    }, "~B");
	Clazz.defineMethod (c$, "isSelected", 
			    function (atomIndex) {
				return (atomIndex >= 0 && this.bsSelection.get (atomIndex));
			    }, "~N");
	Clazz.defineMethod (c$, "select", 
			    function (bs, addRemove, isQuiet) {
				if (bs == null) {
				    this.selectAll (true);
				    if (!this.viewer.getRasmolSetting (1613758476)) this.excludeSelectionSet (this.viewer.getAtomBits (1613758476, null));
				    if (!this.viewer.getRasmolSetting (1613758470)) this.excludeSelectionSet (this.viewer.getAtomBits (1613758470, null));
				    this.selectionChanged (false);
				} else {
				    this.setSelectionSet (bs, addRemove);
				}var reportChime = this.viewer.getMessageStyleChime ();
				if (!reportChime && isQuiet) return;
				var n = this.getSelectionCount ();
				if (reportChime) this.viewer.reportSelection ((n == 0 ? "No atoms" : n == 1 ? "1 atom" : n + " atoms") + " selected!");
				else if (!isQuiet) this.viewer.reportSelection (org.jmol.i18n.GT._ ("{0} atoms selected", n));
			    }, "org.jmol.util.BitSet,Boolean,~B");
	Clazz.defineMethod (c$, "selectAll", 
			    function (isQuiet) {
				var count = this.viewer.getAtomCount ();
				this.empty = (count == 0) ? 1 : 0;
				for (var i = count; --i >= 0; ) this.bsSelection.set (i);

				org.jmol.util.BitSetUtil.andNot (this.bsSelection, this.bsDeleted);
				this.selectionChanged (isQuiet);
			    }, "~B");
	Clazz.defineMethod (c$, "clearSelection", 
			    function (isQuiet) {
				this.setHideNotSelected (false);
				this.bsSelection.clearAll ();
				this.empty = 1;
				this.selectionChanged (isQuiet);
			    }, "~B");
	Clazz.defineMethod (c$, "isAtomSelected", 
			    function (atomIndex) {
				return ((this.bsSubset == null || this.bsSubset.get (atomIndex)) && this.bsDeleted == null || !this.bsDeleted.get (atomIndex)) && this.bsSelection.get (atomIndex);
			    }, "~N");
	Clazz.defineMethod (c$, "setSelectedAtom", 
			    function (atomIndex, TF) {
				if (atomIndex < 0) {
				    this.selectionChanged (true);
				    return;
				}if (this.bsSubset != null && !this.bsSubset.get (atomIndex) || this.bsDeleted != null && this.bsDeleted.get (atomIndex)) return;
				this.bsSelection.setBitTo (atomIndex, TF);
				if (TF) this.empty = 0;
				else this.empty = -1;
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setSelectionSet", 
			    function (set, addRemove) {
				if (set == null) {
				    this.bsSelection.clearAll ();
				} else if (addRemove == null) {
				    this.bsSelection.clearAll ();
				    this.bsSelection.or (set);
				} else if (addRemove.booleanValue ()) {
				    this.bsSelection.or (set);
				} else {
				    this.bsSelection.andNot (set);
				}this.empty = -1;
				this.selectionChanged (false);
			    }, "org.jmol.util.BitSet,Boolean");
	Clazz.defineMethod (c$, "setSelectionSubset", 
			    function (bs) {
				this.bsSubset = bs;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "isInSelectionSubset", 
			    function (atomIndex) {
				return (atomIndex < 0 || this.bsSubset == null || this.bsSubset.get (atomIndex));
			    }, "~N");
	Clazz.defineMethod (c$, "invertSelection", 
			    function () {
				org.jmol.util.BitSetUtil.invertInPlace (this.bsSelection, this.viewer.getAtomCount ());
				this.empty = (this.bsSelection.length () > 0 ? 0 : 1);
				this.selectionChanged (false);
			    });
	Clazz.defineMethod (c$, "excludeSelectionSet", 
			    ($fz = function (setExclude) {
				if (setExclude == null || this.empty == 1) return;
				this.bsSelection.andNot (setExclude);
				this.empty = -1;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getSelectionCount", 
			    function () {
				if (this.empty == 1) return 0;
				this.empty = 1;
				var bs;
				if (this.bsSubset != null) {
				    this.bsTemp.clearAll ();
				    this.bsTemp.or (this.bsSubset);
				    this.bsTemp.and (this.bsSelection);
				    bs = this.bsTemp;
				} else {
				    bs = this.bsSelection;
				}var count = bs.cardinality ();
				if (count > 0) this.empty = 0;
				return count;
			    });
	Clazz.defineMethod (c$, "addListener", 
			    function (listener) {
				for (var i = this.listeners.length; --i >= 0; ) if (this.listeners[i] === listener) {
				    this.listeners[i] = null;
				    break;
				}
				var len = this.listeners.length;
				for (var i = len; --i >= 0; ) if (this.listeners[i] == null) {
				    this.listeners[i] = listener;
				    return;
				}
				if (this.listeners.length == 0) this.listeners =  new Array (1);
				else this.listeners = org.jmol.util.ArrayUtil.doubleLength (this.listeners);
				this.listeners[len] = listener;
			    }, "org.jmol.api.JmolSelectionListener");
	Clazz.defineMethod (c$, "selectionChanged", 
			    ($fz = function (isQuiet) {
				if (this.hideNotSelected) this.hide (this.viewer.getModelSet (), org.jmol.util.BitSetUtil.copyInvert (this.bsSelection, this.viewer.getAtomCount ()), null, isQuiet);
				if (isQuiet || this.listeners.length == 0) return;
				for (var i = this.listeners.length; --i >= 0; ) if (this.listeners[i] != null) this.listeners[i].selectionChanged (this.bsSelection);

			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "getState", 
			    function (sfunc) {
				var commands =  new org.jmol.util.StringXBuilder ();
				if (sfunc != null) {
				    sfunc.append ("  _setSelectionState;\n");
				    commands.append ("function _setSelectionState() {\n");
				}org.jmol.viewer.StateManager.appendCmd (commands, this.viewer.getTrajectoryInfo ());
				var temp =  new java.util.Hashtable ();
				var cmd = null;
				org.jmol.viewer.SelectionManager.addBs (commands, "hide ", this.bsHidden);
				org.jmol.viewer.SelectionManager.addBs (commands, "subset ", this.bsSubset);
				org.jmol.viewer.SelectionManager.addBs (commands, "delete ", this.bsDeleted);
				org.jmol.viewer.SelectionManager.addBs (commands, "fix ", this.bsFixed);
				temp.put ("-", this.bsSelection);
				cmd = org.jmol.viewer.StateManager.getCommands (temp, null, "select");
				if (cmd == null) org.jmol.viewer.StateManager.appendCmd (commands, "select none");
				else commands.append (cmd);
				org.jmol.viewer.StateManager.appendCmd (commands, "set hideNotSelected " + this.hideNotSelected);
				commands.append (this.viewer.getShapeProperty (1, "selectionState"));
				if (this.viewer.getSelectionHaloEnabled (false)) org.jmol.viewer.StateManager.appendCmd (commands, "SelectionHalos ON");
				if (sfunc != null) commands.append ("}\n\n");
				return commands.toString ();
			    }, "org.jmol.util.StringXBuilder");
	c$.addBs = Clazz.defineMethod (c$, "addBs", 
				       ($fz = function (sb, key, bs) {
					   if (bs == null || bs.length () == 0) return;
					   org.jmol.viewer.StateManager.appendCmd (sb, key + org.jmol.util.Escape.escape (bs));
				       }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~S,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteAtoms", 
			    function (bs) {
				var bsNew = org.jmol.util.BitSetUtil.copy (bs);
				if (this.bsDeleted == null) {
				    this.bsDeleted = bsNew;
				} else {
				    bsNew.andNot (this.bsDeleted);
				    this.bsDeleted.or (bs);
				}this.bsHidden.andNot (this.bsDeleted);
				this.bsSelection.andNot (this.bsDeleted);
				return bsNew.cardinality ();
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getDeletedAtoms", 
			    function () {
				return this.bsDeleted;
			    });
	Clazz.defineMethod (c$, "getSelectionSet", 
			    function (includeDeleted) {
				if (includeDeleted || this.bsDeleted == null && this.bsSubset == null) return this.bsSelection;
				var bs =  new org.jmol.util.BitSet ();
				bs.or (this.bsSelection);
				this.excludeAtoms (bs, false);
				return bs;
			    }, "~B");
	Clazz.defineMethod (c$, "getSelectionSubset", 
			    function () {
				return this.bsSubset;
			    });
	Clazz.defineMethod (c$, "excludeAtoms", 
			    function (bs, ignoreSubset) {
				if (this.bsDeleted != null) bs.andNot (this.bsDeleted);
				if (!ignoreSubset && this.bsSubset != null) bs.and (this.bsSubset);
			    }, "org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "processDeletedModelAtoms", 
			    function (bsAtoms) {
				if (this.bsDeleted != null) org.jmol.util.BitSetUtil.deleteBits (this.bsDeleted, bsAtoms);
				if (this.bsSubset != null) org.jmol.util.BitSetUtil.deleteBits (this.bsSubset, bsAtoms);
				org.jmol.util.BitSetUtil.deleteBits (this.bsFixed, bsAtoms);
				org.jmol.util.BitSetUtil.deleteBits (this.bsHidden, bsAtoms);
				var bs = org.jmol.util.BitSetUtil.copy (this.bsSelection);
				org.jmol.util.BitSetUtil.deleteBits (bs, bsAtoms);
				this.setSelectionSet (bs, null);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setMotionFixedAtoms", 
			    function (bs) {
				this.bsFixed.clearAll ();
				if (bs != null) this.bsFixed.or (bs);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getMotionFixedAtoms", 
			    function () {
				return this.bsFixed;
			    });
	Clazz.defineStatics (c$,
			     "TRUE", 1,
			     "FALSE", 0,
			     "UNKNOWN", -1);
    });
    // 
    //// org\jmol\viewer\StatusManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["java.util.Hashtable"], "org.jmol.viewer.StatusManager", ["java.lang.Boolean", "$.Float", "java.util.ArrayList", "$.Collections", "org.jmol.api.Interface", "org.jmol.constant.EnumCallback", "org.jmol.util.Logger", "$.TextFormat"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.jmolStatusListener = null;
	    this.jmolCallbackListener = null;
	    this.statusList = "";
	    this.allowStatusReporting = false;
	    this.messageQueue = null;
	    this.statusPtr = 0;
	    this.jmolScriptCallbacks = null;
	    this.minSyncRepeatMs = 100;
	    this.syncingScripts = false;
	    this.syncingMouse = false;
	    this.drivingSync = false;
	    this.isSynced = false;
	    this.syncDisabled = false;
	    this.stereoSync = false;
	    this.qualityJPG = -1;
	    this.qualityPNG = -1;
	    this.imageType = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "StatusManager");
	Clazz.prepareFields (c$, function () {
	    this.messageQueue =  new java.util.Hashtable ();
	    this.jmolScriptCallbacks =  new java.util.Hashtable ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "setAllowStatusReporting", 
			    function (TF) {
				this.allowStatusReporting = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "getStatusList", 
			    function () {
				return this.statusList;
			    });
	Clazz.defineMethod (c$, "getMessageQueue", 
			    function () {
				return this.messageQueue;
			    });
	Clazz.defineMethod (c$, "recordStatus", 
			    ($fz = function (statusName) {
				return (this.allowStatusReporting && this.statusList.length > 0 && (this.statusList.equals ("all") || this.statusList.indexOf (statusName) >= 0));
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "setStatusChanged", 
			    ($fz = function (statusName, intInfo, statusInfo, isReplace) {
				if (!this.recordStatus (statusName)) return;
				var msgRecord =  new java.util.ArrayList ();
				msgRecord.add (Integer.$valueOf (++this.statusPtr));
				msgRecord.add (statusName);
				msgRecord.add (Integer.$valueOf (intInfo));
				msgRecord.add (statusInfo);
				var statusRecordSet = (isReplace ? null : this.messageQueue.get (statusName));
				if (statusRecordSet == null) this.messageQueue.put (statusName, statusRecordSet =  new java.util.ArrayList ());
				else if (statusRecordSet.size () == org.jmol.viewer.StatusManager.MAXIMUM_QUEUE_LENGTH) statusRecordSet.remove (0);
				statusRecordSet.add (msgRecord);
			    }, $fz.isPrivate = true, $fz), "~S,~N,~O,~B");
	Clazz.defineMethod (c$, "getStatusChanged", 
			    function (newStatusList) {
				var isRemove = (newStatusList.length > 0 && newStatusList.charAt (0) == '-');
				var isAdd = (newStatusList.length > 0 && newStatusList.charAt (0) == '+');
				var getList = false;
				if (isRemove) {
				    this.statusList = org.jmol.util.TextFormat.simpleReplace (this.statusList, newStatusList.substring (1, newStatusList.length), "");
				} else {
				    newStatusList = org.jmol.util.TextFormat.simpleReplace (newStatusList, "+", "");
				    if (this.statusList.equals (newStatusList) || isAdd && this.statusList.indexOf (newStatusList) >= 0) {
					getList = true;
				    } else {
					if (!isAdd) this.statusList = "";
					this.statusList += newStatusList;
					if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("StatusManager messageQueue = " + this.statusList);
				    }}var msgList = (getList ? java.util.Collections.list (java.util.Collections.enumeration (this.messageQueue.values ())) :  new java.util.ArrayList ());
				this.messageQueue.clear ();
				this.statusPtr = 0;
				return msgList;
			    }, "~S");
	Clazz.defineMethod (c$, "setJmolStatusListener", 
			    function (jmolStatusListener, jmolCallbackListener) {
				this.jmolStatusListener = jmolStatusListener;
				this.jmolCallbackListener = (jmolCallbackListener == null ? jmolStatusListener : jmolCallbackListener);
			    }, "org.jmol.api.JmolStatusListener,org.jmol.api.JmolCallbackListener");
	Clazz.defineMethod (c$, "setJmolCallbackListener", 
			    function (jmolCallbackListener) {
				this.jmolCallbackListener = jmolCallbackListener;
			    }, "org.jmol.api.JmolCallbackListener");
	Clazz.defineMethod (c$, "jmolScriptCallback", 
			    ($fz = function (callback) {
				var s = this.jmolScriptCallbacks.get (callback);
				if (s != null) this.viewer.evalStringQuietSync (s, true, false);
				return s;
			    }, $fz.isPrivate = true, $fz), "org.jmol.constant.EnumCallback");
	Clazz.defineMethod (c$, "setCallbackFunction", 
			    function (callbackType, callbackFunction) {
				var callback = org.jmol.constant.EnumCallback.getCallback (callbackType);
				if (callback != null) {
				    var pt = (callbackFunction == null ? 0 : callbackFunction.length > 7 && callbackFunction.toLowerCase ().indexOf ("script:") == 0 ? 7 : callbackFunction.length > 11 && callbackFunction.toLowerCase ().indexOf ("jmolscript:") == 0 ? 11 : 0);
				    if (pt == 0) this.jmolScriptCallbacks.remove (callback);
				    else this.jmolScriptCallbacks.put (callback, callbackFunction.substring (pt).trim ());
				}if (this.jmolCallbackListener != null) this.jmolCallbackListener.setCallbackFunction (callbackType, callbackFunction);
			    }, "~S,~S");
	Clazz.defineMethod (c$, "notifyEnabled", 
			    ($fz = function (type) {
				return this.jmolCallbackListener != null && this.jmolCallbackListener.notifyEnabled (type);
			    }, $fz.isPrivate = true, $fz), "org.jmol.constant.EnumCallback");
	Clazz.defineMethod (c$, "setStatusAppletReady", 
			    function (htmlName, isReady) {
				var sJmol = (isReady ? this.jmolScriptCallback (org.jmol.constant.EnumCallback.APPLETREADY) : null);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.APPLETREADY)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.APPLETREADY, [sJmol, htmlName, Boolean.$valueOf (isReady), null]);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "setStatusAtomMoved", 
			    function (bsMoved) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.ATOMMOVED);
				this.setStatusChanged ("atomMoved", -1, bsMoved, false);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.ATOMMOVED)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.ATOMMOVED, [sJmol, bsMoved]);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setStatusAtomPicked", 
			    function (atomIndex, strInfo) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.PICK);
				org.jmol.util.Logger.info ("setStatusAtomPicked(" + atomIndex + "," + strInfo + ")");
				this.setStatusChanged ("atomPicked", atomIndex, strInfo, false);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.PICK)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.PICK, [sJmol, strInfo, Integer.$valueOf (atomIndex)]);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setStatusClicked", 
			    function (x, y, action, clickCount, mode) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.CLICK);
				if (!this.notifyEnabled (org.jmol.constant.EnumCallback.CLICK)) return action;
				var m = [action, mode];
				this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.CLICK, [sJmol, Integer.$valueOf (x), Integer.$valueOf (y), Integer.$valueOf (action), Integer.$valueOf (clickCount), m]);
				return m[0];
			    }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setStatusResized", 
			    function (width, height) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.RESIZE);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.RESIZE)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.RESIZE, [sJmol, Integer.$valueOf (width), Integer.$valueOf (height)]);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "setStatusAtomHovered", 
			    function (iatom, strInfo) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.HOVER);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.HOVER)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.HOVER, [sJmol, strInfo, Integer.$valueOf (iatom)]);
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setStatusObjectHovered", 
			    function (id, strInfo, pt) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.HOVER);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.HOVER)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.HOVER, [sJmol, strInfo, Integer.$valueOf (-1), id, Float.$valueOf (pt.x), Float.$valueOf (pt.y), Float.$valueOf (pt.z)]);
			    }, "~S,~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setFileLoadStatus", 
			    function (fullPathName, fileName, modelName, errorMsg, ptLoad, doCallback) {
				if (fullPathName == null && "resetUndo".equals (fileName)) {
				    var appConsole = this.viewer.getProperty ("DATA_API", "getAppConsole", null);
				    if (appConsole != null) appConsole.zap ();
				    fileName = this.viewer.getZapName ();
				}this.setStatusChanged ("fileLoaded", ptLoad, fullPathName, false);
				if (errorMsg != null) this.setStatusChanged ("fileLoadError", ptLoad, errorMsg, false);
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.LOADSTRUCT);
				if (doCallback && this.notifyEnabled (org.jmol.constant.EnumCallback.LOADSTRUCT)) {
				    var name = this.viewer.getParameter ("_smilesString");
				    if (name.length != 0) fileName = name;
				    this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.LOADSTRUCT, [sJmol, fullPathName, fileName, modelName, errorMsg, Integer.$valueOf (ptLoad), this.viewer.getParameter ("_modelNumber"), this.viewer.getModelNumberDotted (this.viewer.getModelCount () - 1)]);
				}}, "~S,~S,~S,~S,~N,~B");
	Clazz.defineMethod (c$, "setStatusFrameChanged", 
			    function (frameNo, fileNo, modelNo, firstNo, lastNo) {
				if (this.viewer.getModelSet () == null) return;
				var isAnimationRunning = (frameNo <= -2);
				var f = frameNo;
				if (isAnimationRunning) f = -2 - f;
				this.setStatusChanged ("frameChanged", frameNo, (f >= 0 ? this.viewer.getModelNumberDotted (f) : ""), false);
				var entryName = this.viewer.getMenuName (f);
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.ANIMFRAME);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.ANIMFRAME)) {
				    this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.ANIMFRAME, [sJmol, [frameNo, fileNo, modelNo, firstNo, lastNo], entryName]);
				}if (this.viewer.jmolpopup != null && !isAnimationRunning) this.viewer.jmolpopup.updateComputedMenus ();
			    }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "setScriptEcho", 
			    function (strEcho, isScriptQueued) {
				if (strEcho == null) return;
				this.setStatusChanged ("scriptEcho", 0, strEcho, false);
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.ECHO);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.ECHO)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.ECHO, [sJmol, strEcho, Integer.$valueOf (isScriptQueued ? 1 : 0)]);
			    }, "~S,~B");
	Clazz.defineMethod (c$, "setStatusMeasuring", 
			    function (status, intInfo, strMeasure, value) {
				this.setStatusChanged (status, intInfo, strMeasure, false);
				var sJmol = null;
				if (status.equals ("measureCompleted")) {
				    org.jmol.util.Logger.info ("measurement[" + intInfo + "] = " + strMeasure);
				    sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.MEASURE);
				} else if (status.equals ("measurePicked")) {
				    this.setStatusChanged ("measurePicked", intInfo, strMeasure, false);
				    org.jmol.util.Logger.info ("measurePicked " + intInfo + " " + strMeasure);
				}if (this.notifyEnabled (org.jmol.constant.EnumCallback.MEASURE)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.MEASURE, [sJmol, strMeasure, Integer.$valueOf (intInfo), status, Float.$valueOf (value)]);
			    }, "~S,~N,~S,~N");
	Clazz.defineMethod (c$, "notifyError", 
			    function (errType, errMsg, errMsgUntranslated) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.ERROR);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.ERROR)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.ERROR, [sJmol, errType, errMsg, this.viewer.getShapeErrorState (), errMsgUntranslated]);
			    }, "~S,~S,~S");
	Clazz.defineMethod (c$, "notifyMinimizationStatus", 
			    function (minStatus, minSteps, minEnergy, minEnergyDiff, ff) {
				var sJmol = this.jmolScriptCallback (org.jmol.constant.EnumCallback.MINIMIZATION);
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.MINIMIZATION)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.MINIMIZATION, [sJmol, minStatus, minSteps, minEnergy, minEnergyDiff, ff]);
			    }, "~S,Integer,Float,Float,~S");
	Clazz.defineMethod (c$, "setScriptStatus", 
			    function (strStatus, statusMessage, msWalltime, strErrorMessageUntranslated) {
				if (msWalltime < -1) {
				    var iscript = -2 - msWalltime;
				    this.setStatusChanged ("scriptStarted", iscript, statusMessage, false);
				    strStatus = "script " + iscript + " started";
				} else if (strStatus == null) {
				    return;
				}var sJmol = (msWalltime == 0 ? this.jmolScriptCallback (org.jmol.constant.EnumCallback.SCRIPT) : null);
				var isScriptCompletion = (strStatus === "Script completed");
				if (this.recordStatus ("script")) {
				    var isError = (strErrorMessageUntranslated != null);
				    this.setStatusChanged ((isError ? "scriptError" : "scriptStatus"), 0, strStatus, false);
				    if (isError || isScriptCompletion) this.setStatusChanged ("scriptTerminated", 1, "Jmol script terminated" + (isError ? " unsuccessfully: " + strStatus : " successfully"), false);
				}var data;
				if (isScriptCompletion && this.viewer.getMessageStyleChime () && this.viewer.getDebugScript ()) {
				    data = [null, "script <exiting>", statusMessage, Integer.$valueOf (-1), strErrorMessageUntranslated];
				    if (this.notifyEnabled (org.jmol.constant.EnumCallback.SCRIPT)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.SCRIPT, data);
				    this.processScript (data);
				    strStatus = "Jmol script completed.";
				}data = [sJmol, strStatus, statusMessage, Integer.$valueOf (isScriptCompletion ? -1 : msWalltime), strErrorMessageUntranslated];
				if (this.notifyEnabled (org.jmol.constant.EnumCallback.SCRIPT)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.SCRIPT, data);
				this.processScript (data);
			    }, "~S,~S,~N,~S");
	Clazz.defineMethod (c$, "processScript", 
			    ($fz = function (data) {
				var msWalltime = (data[3]).intValue ();
				if (this.viewer.scriptEditor != null) {
				    if (msWalltime > 0) {
					this.viewer.scriptEditor.notifyScriptTermination ();
				    } else if (msWalltime < 0) {
					if (msWalltime == -2) this.viewer.scriptEditor.notifyScriptStart ();
				    } else if (this.viewer.scriptEditor.isVisible () && (data[2]).length > 0) {
					this.viewer.scriptEditor.notifyContext (this.viewer.getProperty ("DATA_API", "scriptContext", null), data);
				    }}if (this.viewer.appConsole != null) {
					if (msWalltime == 0) {
					    var strInfo = (data[1] == null ? null : data[1].toString ());
					    this.viewer.appConsole.sendConsoleMessage (strInfo);
					}}}, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "doSync", 
			    function () {
				return (this.isSynced && this.drivingSync && !this.syncDisabled);
			    });
	Clazz.defineMethod (c$, "setSync", 
			    function (mouseCommand) {
				if (this.syncingMouse) {
				    if (mouseCommand != null) this.syncSend (mouseCommand, "*", 0);
				} else if (!this.syncingScripts) this.syncSend ("!" + this.viewer.getMoveToText (this.minSyncRepeatMs / 1000), "*", 0);
			    }, "~S");
	Clazz.defineMethod (c$, "setSyncDriver", 
			    function (syncMode) {
				if (this.stereoSync && syncMode != 4) {
				    this.syncSend ("SET_GRAPHICS_OFF", "*", 0);
				    this.stereoSync = false;
				}switch (syncMode) {
				case 4:
				    if (!this.syncDisabled) return;
				    this.syncDisabled = false;
				    break;
				case 3:
				    this.syncDisabled = true;
				    break;
				case 5:
				    this.drivingSync = true;
				    this.isSynced = true;
				    this.stereoSync = true;
				    break;
				case 1:
				    this.drivingSync = true;
				    this.isSynced = true;
				    break;
				case 2:
				    this.drivingSync = false;
				    this.isSynced = true;
				    break;
				default:
				    this.drivingSync = false;
				    this.isSynced = false;
				}
				if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.debug (this.viewer.getHtmlName () + " sync mode=" + syncMode + "; synced? " + this.isSynced + "; driving? " + this.drivingSync + "; disabled? " + this.syncDisabled);
				}}, "~N");
	Clazz.defineMethod (c$, "syncSend", 
			    function (script, appletName, port) {
				if (port != 0 || this.notifyEnabled (org.jmol.constant.EnumCallback.SYNC)) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.SYNC, [null, script, appletName, Integer.$valueOf (port)]);
			    }, "~S,~S,~N");
	Clazz.defineMethod (c$, "getSyncMode", 
			    function () {
				return (!this.isSynced ? 0 : this.drivingSync ? 1 : 2);
			    });
	Clazz.defineMethod (c$, "showUrl", 
			    function (urlString) {
				if (this.jmolStatusListener != null) this.jmolStatusListener.showUrl (urlString);
			    }, "~S");
	Clazz.defineMethod (c$, "clearConsole", 
			    function () {
				if (this.viewer.appConsole != null) {
				    this.viewer.appConsole.sendConsoleMessage (null);
				}if (this.jmolStatusListener != null) this.jmolCallbackListener.notifyCallback (org.jmol.constant.EnumCallback.MESSAGE, null);
			    });
	Clazz.defineMethod (c$, "functionXY", 
			    function (functionName, nX, nY) {
				return (this.jmolStatusListener == null ?  Clazz.newFloatArray (Math.abs (nX), Math.abs (nY), 0) : this.jmolStatusListener.functionXY (functionName, nX, nY));
			    }, "~S,~N,~N");
	Clazz.defineMethod (c$, "functionXYZ", 
			    function (functionName, nX, nY, nZ) {
				return (this.jmolStatusListener == null ?  Clazz.newFloatArray (Math.abs (nX), Math.abs (nY), Math.abs (nY), 0) : this.jmolStatusListener.functionXYZ (functionName, nX, nY, nZ));
			    }, "~S,~N,~N,~N");
	Clazz.defineMethod (c$, "jsEval", 
			    function (strEval) {
				return (this.jmolStatusListener == null ? "" : this.jmolStatusListener.eval (strEval));
			    }, "~S");
	Clazz.defineMethod (c$, "createImage", 
			    function (fileNameOrError, type, text_or_bytes, quality) {
				return (this.jmolStatusListener == null ? null : this.jmolStatusListener.createImage (fileNameOrError, type, text_or_bytes, quality));
			    }, "~S,~S,~O,~N");
	Clazz.defineMethod (c$, "getRegistryInfo", 
			    function () {
				return (this.jmolStatusListener == null ? null : this.jmolStatusListener.getRegistryInfo ());
			    });
	Clazz.defineMethod (c$, "dialogAsk", 
			    function (type, fileName) {
				var isImage = (type.startsWith ("saveImage"));
				var sd = org.jmol.api.Interface.getOptionInterface ("export.dialog.Dialog");
				if (sd == null) return null;
				sd.setupUI (false);
				if (isImage) sd.setImageInfo (this.qualityJPG, this.qualityPNG, this.imageType);
				var outputFileName = sd.getFileNameFromDialog (this.viewer, type, fileName);
				if (isImage && outputFileName != null) {
				    this.qualityJPG = sd.getQuality ("JPG");
				    this.qualityPNG = sd.getQuality ("PNG");
				    var sType = sd.getType ();
				    if (sType != null) this.imageType = sType;
				}return outputFileName;
			    }, "~S,~S");
	Clazz.defineMethod (c$, "getJspecViewProperties", 
			    function (myParam) {
				return (this.jmolStatusListener == null ? null : this.jmolStatusListener.getProperty ("JSpecView" + (myParam == null || myParam.length == 0 ? "" : ":" + myParam)));
			    }, "~S");
	Clazz.defineStatics (c$,
			     "MAXIMUM_QUEUE_LENGTH", 16,
			     "SYNC_OFF", 0,
			     "SYNC_DRIVER", 1,
			     "SYNC_SLAVE", 2,
			     "SYNC_DISABLE", 3,
			     "SYNC_ENABLE", 4,
			     "SYNC_STEREO", 5);
    });
    // 
    //// org\jmol\viewer\TransformManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.constant.EnumStereoMode", "org.jmol.util.AxisAngle4f", "$.Matrix3f", "$.Matrix4f", "$.Point3f", "$.Point3i", "$.Vector3f"], "org.jmol.viewer.TransformManager", ["java.lang.Float", "$.Thread", "java.util.Hashtable", "org.jmol.thread.MotionThread", "$.SpinThread", "$.VibrationThread", "org.jmol.util.Escape", "$.Point4f", "$.Quaternion", "$.StringXBuilder", "org.jmol.viewer.StateManager"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.perspectiveModel = 11;
	    this.cameraScaleFactor = 0;
	    this.referencePlaneOffset = 0;
	    this.aperatureAngle = 0;
	    this.cameraDistanceFromCenter = 0;
	    this.modelCenterOffset = 0;
	    this.modelRadius = 0;
	    this.modelRadiusPixels = 0;
	    this.navigationCenter = null;
	    this.navigationOffset = null;
	    this.navigationShiftXY = null;
	    this.matrixTemp = null;
	    this.vectorTemp = null;
	    this.haveNotifiedNaN = false;
	    this.spinX = 0;
	    this.spinY = 30;
	    this.spinZ = 0;
	    this.spinFps = 30;
	    this.navX = 0;
	    this.navY = 0;
	    this.navZ = 0;
	    this.navFps = NaN;
	    this.isSpinInternal = false;
	    this.isSpinFixed = false;
	    this.isSpinSelected = false;
	    this.fixedRotationOffset = null;
	    this.fixedRotationCenter = null;
	    this.perspectiveOffset = null;
	    this.perspectiveShiftXY = null;
	    this.rotationCenterDefault = null;
	    this.rotationRadiusDefault = 0;
	    this.fixedRotationAxis = null;
	    this.internalRotationAxis = null;
	    this.internalTranslation = null;
	    this.internalRotationCenter = null;
	    this.internalRotationAngle = 0;
	    this.matrixRotate = null;
	    this.matrixTemp3 = null;
	    this.matrixTemp4 = null;
	    this.axisangleT = null;
	    this.vectorT = null;
	    this.vectorT2 = null;
	    this.pointT2 = null;
	    this.rotationAxis = null;
	    this.rotationRate = 0;
	    this.arcBall0 = null;
	    this.arcBall1 = null;
	    this.arcBallAxis = null;
	    this.arcBall0Rotation = null;
	    this.fixedTranslation = null;
	    this.xTranslationFraction = 0.5;
	    this.yTranslationFraction = 0.5;
	    this.prevZoomSetting = 0;
	    this.previousX = 0;
	    this.previousY = 0;
	    this.zoomEnabled = true;
	    this.zoomPercent = 100;
	    this.zoomPercentSetting = 100;
	    this.zoomRatio = 0;
	    this.slabEnabled = false;
	    this.internalSlab = false;
	    this.zShadeEnabled = false;
	    this.slabPercentSetting = 0;
	    this.depthPercentSetting = 0;
	    this.zSlabPercentSetting = 50;
	    this.zDepthPercentSetting = 0;
	    this.zSlabPoint = null;
	    this.slabValue = 0;
	    this.depthValue = 0;
	    this.zSlabValue = 0;
	    this.zDepthValue = 0;
	    this.slabRange = 0;
	    this.slabPlane = null;
	    this.depthPlane = null;
	    this.perspectiveDepth = true;
	    this.scale3D = false;
	    this.cameraDepth = NaN;
	    this.cameraDepthSetting = 3;
	    this.visualRange = 0;
	    this.cameraDistance = 1000;
	    this.width = 0;
	    this.height = 0;
	    this.screenPixelCount = 0;
	    this.scalePixelsPerAngstrom = 0;
	    this.scaleDefaultPixelsPerAngstrom = 0;
	    this.scale3DAngstromsPerInch = 0;
	    this.antialias = false;
	    this.useZoomLarge = false;
	    this.screenWidth = 0;
	    this.screenHeight = 0;
	    this.matrixTransform = null;
	    this.matrixTransformInv = null;
	    this.point3fScreenTemp = null;
	    this.point3iScreenTemp = null;
	    this.point3fVibrationTemp = null;
	    this.navigating = false;
	    this.mode = 0;
	    this.defaultMode = 0;
	    this.pointTsp = null;
	    this.untransformedPoint = null;
	    this.ptTest1 = null;
	    this.ptTest2 = null;
	    this.ptTest3 = null;
	    this.aaTest1 = null;
	    this.matrixTest = null;
	    this.motion = null;
	    this.spinOn = false;
	    this.navOn = false;
	    this.spinThread = null;
	    this.vibrationOn = false;
	    this.vibrationPeriod = 0;
	    this.vibrationPeriodMs = 0;
	    this.vibrationAmplitude = 0;
	    this.vibrationRadians = 0;
	    this.vibrationScale = 0;
	    this.vibrationThread = null;
	    this.stereoMode = null;
	    this.stereoColors = null;
	    this.stereoDegrees = NaN;
	    this.stereoRadians = 0;
	    this.stereoFrame = false;
	    this.matrixStereo = null;
	    this.windowCentered = false;
	    this.frameOffsets = null;
	    this.frameOffset = null;
	    this.bsSelectedAtoms = null;
	    this.ptOffset = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "TransformManager");
	Clazz.prepareFields (c$, function () {
	    this.navigationCenter =  new org.jmol.util.Point3f ();
	    this.navigationOffset =  new org.jmol.util.Point3f ();
	    this.navigationShiftXY =  new org.jmol.util.Point3f ();
	    this.matrixTemp =  new org.jmol.util.Matrix4f ();
	    this.vectorTemp =  new org.jmol.util.Vector3f ();
	    this.fixedRotationOffset =  new org.jmol.util.Point3f ();
	    this.fixedRotationCenter =  new org.jmol.util.Point3f ();
	    this.perspectiveOffset =  new org.jmol.util.Point3f ();
	    this.perspectiveShiftXY =  new org.jmol.util.Point3f ();
	    this.rotationCenterDefault =  new org.jmol.util.Point3f ();
	    this.fixedRotationAxis =  new org.jmol.util.AxisAngle4f ();
	    this.internalRotationAxis =  new org.jmol.util.AxisAngle4f ();
	    this.internalRotationCenter = org.jmol.util.Point3f.new3 (0, 0, 0);
	    this.matrixRotate =  new org.jmol.util.Matrix3f ();
	    this.matrixTemp3 =  new org.jmol.util.Matrix3f ();
	    this.matrixTemp4 =  new org.jmol.util.Matrix4f ();
	    this.axisangleT =  new org.jmol.util.AxisAngle4f ();
	    this.vectorT =  new org.jmol.util.Vector3f ();
	    this.vectorT2 =  new org.jmol.util.Vector3f ();
	    this.pointT2 =  new org.jmol.util.Point3f ();
	    this.rotationAxis =  new org.jmol.util.Vector3f ();
	    this.arcBall0 =  new org.jmol.util.Vector3f ();
	    this.arcBall1 =  new org.jmol.util.Vector3f ();
	    this.arcBallAxis =  new org.jmol.util.Vector3f ();
	    this.arcBall0Rotation =  new org.jmol.util.Matrix3f ();
	    this.fixedTranslation =  new org.jmol.util.Point3f ();
	    this.matrixTransform =  new org.jmol.util.Matrix4f ();
	    this.matrixTransformInv =  new org.jmol.util.Matrix4f ();
	    this.point3fScreenTemp =  new org.jmol.util.Point3f ();
	    this.point3iScreenTemp =  new org.jmol.util.Point3i ();
	    this.point3fVibrationTemp =  new org.jmol.util.Point3f ();
	    this.pointTsp =  new org.jmol.util.Point3f ();
	    this.untransformedPoint =  new org.jmol.util.Point3f ();
	    this.ptTest1 =  new org.jmol.util.Point3f ();
	    this.ptTest2 =  new org.jmol.util.Point3f ();
	    this.ptTest3 =  new org.jmol.util.Point3f ();
	    this.aaTest1 =  new org.jmol.util.AxisAngle4f ();
	    this.matrixTest =  new org.jmol.util.Matrix3f ();
	    this.stereoMode = org.jmol.constant.EnumStereoMode.NONE;
	    this.matrixStereo =  new org.jmol.util.Matrix3f ();
	    this.frameOffset =  new org.jmol.util.Point3f ();
	    this.ptOffset =  new org.jmol.util.Point3f ();
	});
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   this.viewer = viewer;
			       }, "org.jmol.viewer.Viewer");
	Clazz.makeConstructor (c$, 
			       function (viewer, width, height) {
				   this.setViewer (viewer, width, height);
			       }, "org.jmol.viewer.Viewer,~N,~N");
	Clazz.defineMethod (c$, "setViewer", 
			    function (viewer, width, height) {
				this.viewer = viewer;
				this.setScreenParameters (width, height, true, false, true, true);
			    }, "org.jmol.viewer.Viewer,~N,~N");
	Clazz.defineMethod (c$, "getNavigationManager", 
			    function (viewer, width, height) {
				var t =  new org.jmol.viewer.TransformManager11 ();
				t.setViewer (viewer, width, height);
				return t;
			    }, "org.jmol.viewer.Viewer,~N,~N");
	Clazz.defineMethod (c$, "homePosition", 
			    function (resetSpin) {
				if (resetSpin) this.setSpinOn (false);
				this.setNavOn (false);
				this.navFps = 10;
				this.navX = this.navY = this.navZ = 0;
				this.rotationCenterDefault.setT (this.viewer.getBoundBoxCenter ());
				this.setFixedRotationCenter (this.rotationCenterDefault);
				this.rotationRadiusDefault = this.setRotationRadius (0, true);
				this.windowCentered = true;
				this.setRotationCenterAndRadiusXYZ (null, true);
				this.matrixRotate.setIdentity ();
				var m = this.viewer.getModelSetAuxiliaryInfoValue ("defaultOrientationMatrix");
				if (m != null) this.matrixRotate.set (m);
				this.setZoomEnabled (true);
				this.zoomToPercent (this.viewer.isModelKitMode () ? 50 : 100);
				this.zoomPercent = this.zoomPercentSetting;
				this.slabReset ();
				this.resetFitToScreen (true);
				if (this.viewer.isJmolDataFrame ()) {
				    this.fixedRotationCenter.set (0, 0, 0);
				} else {
				    if (this.viewer.getAxesOrientationRasmol ()) this.rotateX (3.141592653589793);
				}this.viewer.saveOrientation ("default");
				if (this.mode == 1) this.setNavigationMode (true);
			    }, "~B");
	Clazz.defineMethod (c$, "clear", 
			    function () {
				this.clearVibration ();
				this.clearSpin ();
				this.stopMotion ();
				this.fixedRotationCenter.set (0, 0, 0);
				this.navigating = false;
				this.slabPlane = null;
				this.depthPlane = null;
				this.zSlabPoint = null;
				this.resetNavigationPoint (true);
			    });
	Clazz.defineMethod (c$, "getState", 
			    function (sfunc) {
				var commands =  new org.jmol.util.StringXBuilder ();
				if (sfunc != null) {
				    sfunc.append ("  _setPerspectiveState;\n");
				    commands.append ("function _setPerspectiveState() {\n");
				}org.jmol.viewer.StateManager.appendCmd (commands, "set perspectiveModel " + this.perspectiveModel);
				org.jmol.viewer.StateManager.appendCmd (commands, "set scaleAngstromsPerInch " + this.scale3DAngstromsPerInch);
				org.jmol.viewer.StateManager.appendCmd (commands, "set perspectiveDepth " + this.perspectiveDepth);
				org.jmol.viewer.StateManager.appendCmd (commands, "set visualRange " + this.visualRange);
				if (!this.isWindowCentered ()) org.jmol.viewer.StateManager.appendCmd (commands, "set windowCentered false");
				org.jmol.viewer.StateManager.appendCmd (commands, "set cameraDepth " + this.cameraDepth);
				if (this.mode == 1) org.jmol.viewer.StateManager.appendCmd (commands, "set navigationMode true");
				org.jmol.viewer.StateManager.appendCmd (commands, this.viewer.getBoundBoxCommand (false));
				org.jmol.viewer.StateManager.appendCmd (commands, "center " + org.jmol.util.Escape.escapePt (this.fixedRotationCenter));
				commands.append (this.viewer.getSavedOrienationText (null));
				org.jmol.viewer.StateManager.appendCmd (commands, this.getMoveToText (0, false));
				if (this.stereoMode !== org.jmol.constant.EnumStereoMode.NONE) org.jmol.viewer.StateManager.appendCmd (commands, "stereo " + (this.stereoColors == null ? this.stereoMode.getName () : org.jmol.util.Escape.escapeColor (this.stereoColors[0]) + " " + org.jmol.util.Escape.escapeColor (this.stereoColors[1])) + " " + this.stereoDegrees);
				if (this.mode != 1 && !this.zoomEnabled) org.jmol.viewer.StateManager.appendCmd (commands, "zoom off");
				commands.append ("  slab ").appendI (this.slabPercentSetting).append (";depth ").appendI (this.depthPercentSetting).append (this.slabEnabled && this.mode != 1 ? ";slab on" : "").append (";\n");
				commands.append ("  set slabRange ").appendF (this.slabRange).append (";\n");
				if (this.zShadeEnabled) commands.append ("  set zShade;\n");
				try {
				    if (this.zSlabPoint != null) commands.append ("  set zSlab ").append (org.jmol.util.Escape.escapePt (this.zSlabPoint)).append (";\n");
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
				    } else {
					throw e;
				    }
				}
				if (this.slabPlane != null) commands.append ("  slab plane ").append (org.jmol.util.Escape.escape (this.slabPlane)).append (";\n");
				if (this.depthPlane != null) commands.append ("  depth plane ").append (org.jmol.util.Escape.escape (this.depthPlane)).append (";\n");
				commands.append (this.getSpinState (true)).append ("\n");
				if (this.viewer.modelSetHasVibrationVectors () && this.vibrationOn) org.jmol.viewer.StateManager.appendCmd (commands, "set vibrationPeriod " + this.vibrationPeriod + ";vibration on");
				if (this.mode == 1) {
				    commands.append (this.getNavigationState ());
				    if (this.depthPlane != null || this.slabPlane != null) commands.append ("  slab on;\n");
				}if (sfunc != null) commands.append ("}\n\n");
				return commands.toString ();
			    }, "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "getSpinState", 
			    function (isAll) {
				var s = "  set spinX " + Clazz.floatToInt (this.spinX) + "; set spinY " + Clazz.floatToInt (this.spinY) + "; set spinZ " + Clazz.floatToInt (this.spinZ) + "; set spinFps " + Clazz.floatToInt (this.spinFps) + ";";
				if (!Float.isNaN (this.navFps)) s += "  set navX " + Clazz.floatToInt (this.navX) + "; set navY " + Clazz.floatToInt (this.navY) + "; set navZ " + Clazz.floatToInt (this.navZ) + "; set navFps " + Clazz.floatToInt (this.navFps) + ";";
				if (this.navOn) s += " navigation on;";
				if (!this.spinOn) return s;
				var prefix = (this.isSpinSelected ? "\n  select " + org.jmol.util.Escape.escape (this.viewer.getSelectionSet (false)) + ";\n  rotateSelected" : "\n ");
				if (this.isSpinInternal) {
				    var pt = org.jmol.util.Point3f.newP (this.internalRotationCenter);
				    pt.sub (this.rotationAxis);
				    s += prefix + " spin " + this.rotationRate + " " + org.jmol.util.Escape.escapePt (this.internalRotationCenter) + " " + org.jmol.util.Escape.escapePt (pt);
				} else if (this.isSpinFixed) {
				    s += prefix + " spin axisangle " + org.jmol.util.Escape.escapePt (this.rotationAxis) + " " + this.rotationRate;
				} else {
				    s += " spin on";
				}return s + ";";
			    }, "~B");
	Clazz.defineMethod (c$, "setFixedRotationCenter", 
			    ($fz = function (center) {
				if (center == null) return;
				this.fixedRotationCenter.setT (center);
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setRotationPointXY", 
			    function (center) {
				var newCenterScreen = this.transformPoint (center);
				this.fixedTranslation.set (newCenterScreen.x, newCenterScreen.y, 0);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "spinXYBy", 
			    function (xDelta, yDelta, speed) {
				if (xDelta == 0 && yDelta == 0) {
				    if (this.spinThread != null && this.spinThread.isGesture ()) this.clearSpin ();
				    return;
				}this.clearSpin ();
				var pt1 = org.jmol.util.Point3f.newP (this.fixedRotationCenter);
				var ptScreen =  new org.jmol.util.Point3f ();
				this.transformPoint2 (pt1, ptScreen);
				var pt2 = org.jmol.util.Point3f.new3 (-yDelta, xDelta, 0);
				pt2.add (ptScreen);
				this.unTransformPoint (pt2, pt2);
				this.viewer.setInMotion (false);
				this.rotateAboutPointsInternal (pt2, pt1, 10 * speed, NaN, false, true, null, true, null, null);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "rotateArcBall", 
			    function (x, y, factor) {
				var radius2 = (this.screenPixelCount >> 2) * this.screenPixelCount;
				x -= this.fixedTranslation.x;
				y -= this.fixedTranslation.y;
				var z = radius2 - x * x - y * y;
				z = (z < 0 ? -1 : 1) * Math.sqrt (Math.abs (z));
				if (factor == 0) {
				    this.arcBall0Rotation.set (this.matrixRotate);
				    this.arcBall0.set (x, -y, z);
				    if (!Float.isNaN (z)) this.arcBall0.normalize ();
				    return;
				}if (Float.isNaN (this.arcBall0.z) || Float.isNaN (z)) return;
				this.arcBall1.set (x, -y, z);
				this.arcBall1.normalize ();
				this.arcBallAxis.cross (this.arcBall0, this.arcBall1);
				this.axisangleT.setVA (this.arcBallAxis, factor * Math.acos (this.arcBall0.dot (this.arcBall1)));
				this.matrixRotate.set (this.arcBall0Rotation);
				this.rotateAxisAngle2 (this.axisangleT, null);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "rotateXYBy", 
			    function (xDelta, yDelta, bsAtoms) {
				this.rotateXRadians (yDelta * 0.017453292, bsAtoms);
				this.rotateYRadians (xDelta * 0.017453292, bsAtoms);
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateZBy", 
			    function (zDelta, x, y) {
				if (x != 2147483647 && y != 2147483647) this.resetXYCenter (x, y);
				this.rotateZRadians ((zDelta / 57.29577951308232));
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "rotateFront", 
			    function () {
				this.matrixRotate.setIdentity ();
			    });
	Clazz.defineMethod (c$, "rotateX", 
			    function (angleRadians) {
				this.matrixRotate.rotX (angleRadians);
			    }, "~N");
	Clazz.defineMethod (c$, "rotateY", 
			    function (angleRadians) {
				this.matrixRotate.rotY (angleRadians);
			    }, "~N");
	Clazz.defineMethod (c$, "rotateZ", 
			    function (angleRadians) {
				this.matrixRotate.rotZ (angleRadians);
			    }, "~N");
	Clazz.defineMethod (c$, "applyRotation", 
			    ($fz = function (mNew, isInternal, bsAtoms, translation) {
				if (bsAtoms == null) {
				    this.matrixRotate.mul2 (mNew, this.matrixRotate);
				    return;
				}this.viewer.moveAtoms (mNew, this.matrixRotate, translation, this.internalRotationCenter, isInternal, bsAtoms);
				if (translation != null) {
				    this.internalRotationCenter.add (translation);
				}}, $fz.isPrivate = true, $fz), "org.jmol.util.Matrix3f,~B,org.jmol.util.BitSet,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "rotateXRadians", 
			    function (angleRadians, bsAtoms) {
				this.matrixTemp3.rotX (angleRadians);
				this.applyRotation (this.matrixTemp3, false, bsAtoms, null);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateYRadians", 
			    function (angleRadians, bsAtoms) {
				this.matrixTemp3.rotY (angleRadians);
				this.applyRotation (this.matrixTemp3, false, bsAtoms, null);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateZRadians", 
			    function (angleRadians) {
				this.matrixTemp3.rotZ (angleRadians);
				this.applyRotation (this.matrixTemp3, false, null, null);
			    }, "~N");
	Clazz.defineMethod (c$, "rotateAxisAngle", 
			    function (rotAxis, radians) {
				this.axisangleT.setVA (rotAxis, radians);
				this.rotateAxisAngle2 (this.axisangleT, null);
			    }, "org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "rotateAxisAngle2", 
			    ($fz = function (axisAngle, bsAtoms) {
				this.matrixTemp3.setAA (axisAngle);
				this.applyRotation (this.matrixTemp3, false, bsAtoms, null);
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.AxisAngle4f,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateAxisAngleAtCenter", 
			    function (rotCenter, rotAxis, degreesPerSecond, endDegrees, isSpin, bsAtoms) {
				if (rotCenter != null) this.moveRotationCenter (rotCenter, true);
				this.setSpinOn (false);
				this.setNavOn (false);
				if (this.viewer.isHeadless ()) {
				    if (isSpin && endDegrees == 3.4028235E38) return false;
				    isSpin = false;
				}if (Float.isNaN (degreesPerSecond) || degreesPerSecond == 0 || endDegrees == 0) return false;
				if (rotCenter != null) {
				    this.setRotationPointXY (rotCenter);
				}this.setFixedRotationCenter (rotCenter);
				this.rotationAxis.setT (rotAxis);
				this.rotationRate = degreesPerSecond;
				if (isSpin) {
				    this.fixedRotationAxis.setVA (rotAxis, degreesPerSecond * 0.017453292);
				    this.isSpinInternal = false;
				    this.isSpinFixed = true;
				    this.isSpinSelected = (bsAtoms != null);
				    this.setSpin (true, endDegrees, null, bsAtoms, false);
				    return false;
				}var radians = endDegrees * 0.017453292;
				this.fixedRotationAxis.setVA (rotAxis, endDegrees);
				this.rotateAxisAngleRadiansFixed (radians, bsAtoms);
				return true;
			    }, "org.jmol.util.Point3f,org.jmol.util.Vector3f,~N,~N,~B,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateAxisAngleRadiansFixed", 
			    function (angleRadians, bsAtoms) {
				this.axisangleT.setAA (this.fixedRotationAxis);
				this.axisangleT.angle = angleRadians;
				this.rotateAxisAngle2 (this.axisangleT, bsAtoms);
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "rotateAboutPointsInternal", 
			    function (point1, point2, degreesPerSecond, endDegrees, isClockwise, isSpin, bsAtoms, isGesture, translation, finalPoints) {
				this.setSpinOn (false);
				this.setNavOn (false);
				if (this.viewer.isHeadless ()) {
				    if (isSpin && endDegrees == 3.4028235E38) return false;
				    isSpin = false;
				}if ((translation == null || translation.length () < 0.001) && (!isSpin || endDegrees == 0 || Float.isNaN (degreesPerSecond) || degreesPerSecond == 0) && (isSpin || endDegrees == 0)) return false;
				var axis = org.jmol.util.Vector3f.newV (point2);
				axis.sub (point1);
				if (isClockwise) axis.scale (-1.0);
				this.internalRotationCenter.setT (point1);
				this.rotationAxis.setT (axis);
				this.rotationRate = degreesPerSecond;
				if (translation == null) {
				    this.internalTranslation = null;
				} else {
				    this.internalTranslation = org.jmol.util.Vector3f.newV (translation);
				}var isSelected = (bsAtoms != null);
				if (isSpin) {
				    var nFrames = Clazz.doubleToInt (Math.abs (endDegrees) / Math.abs (degreesPerSecond) * this.spinFps + 0.5);
				    if (!Float.isNaN (endDegrees)) {
					this.rotationRate = degreesPerSecond = endDegrees / nFrames * this.spinFps;
					if (translation != null) this.internalTranslation.scale (1 / (nFrames));
				    }this.internalRotationAxis.setVA (axis, this.rotationRate * 0.017453292);
				    this.isSpinInternal = true;
				    this.isSpinFixed = false;
				    this.isSpinSelected = isSelected;
				    this.setSpin (true, endDegrees, finalPoints, bsAtoms, isGesture);
				    return false;
				}var radians = endDegrees * 0.017453292;
				this.internalRotationAxis.setVA (axis, radians);
				this.rotateAxisAngleRadiansInternal (radians, bsAtoms);
				return true;
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~N,~N,~B,~B,org.jmol.util.BitSet,~B,org.jmol.util.Vector3f,java.util.List");
	Clazz.defineMethod (c$, "rotateAxisAngleRadiansInternal", 
			    function (radians, bsAtoms) {
				this.internalRotationAngle = radians;
				this.vectorT.set (this.internalRotationAxis.x, this.internalRotationAxis.y, this.internalRotationAxis.z);
				this.matrixRotate.transform2 (this.vectorT, this.vectorT2);
				this.axisangleT.setVA (this.vectorT2, radians);
				this.matrixTemp3.setAA (this.axisangleT);
				this.applyRotation (this.matrixTemp3, true, bsAtoms, this.internalTranslation);
				if (bsAtoms == null) this.getNewFixedRotationCenter ();
			    }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getNewFixedRotationCenter", 
			    function () {
				this.axisangleT.setAA (this.internalRotationAxis);
				this.axisangleT.angle = -this.internalRotationAngle;
				this.matrixTemp4.setAA (this.axisangleT);
				this.vectorT.setT (this.internalRotationCenter);
				this.pointT2.setT (this.fixedRotationCenter);
				this.pointT2.sub (this.vectorT);
				var pt =  new org.jmol.util.Point3f ();
				this.matrixTemp4.transform2 (this.pointT2, pt);
				pt.add (this.vectorT);
				this.setRotationCenterAndRadiusXYZ (pt, false);
			    });
	Clazz.defineMethod (c$, "setTranslationFractions", 
			    function () {
				this.xTranslationFraction = this.fixedTranslation.x / this.width;
				this.yTranslationFraction = this.fixedTranslation.y / this.height;
			    });
	Clazz.defineMethod (c$, "centerAt", 
			    function (x, y, pt) {
				if (pt == null) {
				    this.translateXYBy (x, y);
				    return;
				}if (this.windowCentered) this.viewer.setBooleanProperty ("windowCentered", false);
				this.fixedTranslation.x = x;
				this.fixedTranslation.y = y;
				this.setFixedRotationCenter (pt);
			    }, "~N,~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "percentToPixels", 
			    function (xyz, percent) {
				switch (xyz) {
				case 'x':
				    return Clazz.doubleToInt (Math.floor (percent / 100 * this.width));
				case 'y':
				    return Clazz.doubleToInt (Math.floor (percent / 100 * this.height));
				case 'z':
				    return Clazz.doubleToInt (Math.floor (percent / 100 * this.screenPixelCount));
				}
				return 0;
			    }, "~S,~N");
	Clazz.defineMethod (c$, "angstromsToPixels", 
			    function (distance) {
				return Clazz.doubleToInt (Math.floor (this.scalePixelsPerAngstrom * distance));
			    }, "~N");
	Clazz.defineMethod (c$, "translateXYBy", 
			    function (xDelta, yDelta) {
				this.fixedTranslation.x += xDelta;
				this.fixedTranslation.y += yDelta;
				this.setTranslationFractions ();
			    }, "~N,~N");
	Clazz.defineMethod (c$, "translateToPercent", 
			    function (type, percent) {
				switch (type) {
				case 'x':
				    this.xTranslationFraction = 0.5 + percent / 100;
				    this.fixedTranslation.x = this.width * this.xTranslationFraction;
				    return;
				case 'y':
				    this.yTranslationFraction = 0.5 + percent / 100;
				    this.fixedTranslation.y = this.height * this.yTranslationFraction;
				    return;
				case 'z':
				    if (this.mode == 1) this.setNavigationDepthPercent (0, percent);
				    return;
				}
			    }, "~S,~N");
	Clazz.defineMethod (c$, "getTranslationXPercent", 
			    function () {
				return (this.width == 0 ? 0 : (this.fixedTranslation.x - this.width / 2) * 100 / this.width);
			    });
	Clazz.defineMethod (c$, "getTranslationYPercent", 
			    function () {
				return (this.height == 0 ? 0 : (this.fixedTranslation.y - this.height / 2) * 100 / this.height);
			    });
	Clazz.defineMethod (c$, "getTranslationZPercent", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "getTranslationScript", 
			    function () {
				var info = "";
				var f = this.getTranslationXPercent ();
				if (f != 0.0) info += "translate x " + f + ";";
				f = this.getTranslationYPercent ();
				if (f != 0.0) info += "translate y " + f + ";";
				return info;
			    });
	Clazz.defineMethod (c$, "getOrientationText", 
			    function (type) {
				switch (type) {
				case 4130:
				    return this.getMoveToText (1, false);
				case 1073742132:
				    return this.getRotationQuaternion ().toString ();
				case 1073742178:
				    var sb =  new org.jmol.util.StringXBuilder ();
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.getTranslationXPercent ());
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.getTranslationYPercent ());
				    return sb.toString ();
				default:
				    return this.getMoveToText (1, true) + "\n#OR\n" + this.getRotateZyzText (true);
				}
			    }, "~N");
	Clazz.defineMethod (c$, "getOrientationInfo", 
			    function () {
				var info =  new java.util.Hashtable ();
				info.put ("moveTo", this.getMoveToText (1, false));
				info.put ("center", "center " + this.getCenterText ());
				info.put ("centerPt", this.fixedRotationCenter);
				var aa =  new org.jmol.util.AxisAngle4f ();
				this.getAxisAngle (aa);
				info.put ("axisAngle", aa);
				info.put ("quaternion", org.jmol.util.Quaternion.newAA (aa).toPoint4f ());
				info.put ("rotationMatrix", this.matrixRotate);
				info.put ("rotateZYZ", this.getRotateZyzText (false));
				info.put ("rotateXYZ", this.getRotateXyzText ());
				info.put ("transXPercent",  new Float (this.getTranslationXPercent ()));
				info.put ("transYPercent",  new Float (this.getTranslationYPercent ()));
				info.put ("zoom",  new Float (this.zoomPercent));
				info.put ("modelRadius",  new Float (this.modelRadius));
				if (this.mode == 1) {
				    info.put ("navigationCenter", "navigate center " + org.jmol.util.Escape.escapePt (this.navigationCenter));
				    info.put ("navigationOffsetXPercent",  new Float (this.getNavigationOffsetPercent ('X')));
				    info.put ("navigationOffsetYPercent",  new Float (this.getNavigationOffsetPercent ('Y')));
				    info.put ("navigationDepthPercent",  new Float (this.getNavigationDepthPercent ()));
				}return info;
			    });
	Clazz.defineMethod (c$, "getAxisAngle", 
			    function (axisAngle) {
				axisAngle.setM (this.matrixRotate);
			    }, "org.jmol.util.AxisAngle4f");
	Clazz.defineMethod (c$, "getTransformText", 
			    function () {
				return this.matrixRotate.toString ();
			    });
	Clazz.defineMethod (c$, "getMatrixRotate", 
			    function () {
				return this.matrixRotate;
			    });
	Clazz.defineMethod (c$, "setRotation", 
			    function (matrixRotation) {
				if (!Float.isNaN (matrixRotation.m00)) this.matrixRotate.set (matrixRotation);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "getRotation", 
			    function (matrixRotation) {
				matrixRotation.set (this.matrixRotate);
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "zoomBy", 
			    function (pixels) {
				if (pixels > 20) pixels = 20;
				else if (pixels < -20) pixels = -20;
				var deltaPercent = pixels * this.zoomPercentSetting / 50;
				if (deltaPercent == 0) deltaPercent = (pixels > 0 ? 1 : (deltaPercent < 0 ? -1 : 0));
				this.zoomRatio = (deltaPercent + this.zoomPercentSetting) / this.zoomPercentSetting;
				this.zoomPercentSetting += deltaPercent;
			    }, "~N");
	Clazz.defineMethod (c$, "getZoomPercentFloat", 
			    function () {
				return this.zoomPercent;
			    });
	Clazz.defineMethod (c$, "zoomToPercent", 
			    function (percentZoom) {
				this.zoomPercentSetting = percentZoom;
				this.zoomRatio = 0;
			    }, "~N");
	Clazz.defineMethod (c$, "translateZBy", 
			    function (pixels) {
				if (pixels >= this.screenPixelCount) return;
				var sppa = this.scalePixelsPerAngstrom / (1 - pixels * 1.0 / this.screenPixelCount);
				if (sppa >= this.screenPixelCount) return;
				var newZoomPercent = sppa / this.scaleDefaultPixelsPerAngstrom * 100;
				this.zoomRatio = newZoomPercent / this.zoomPercentSetting;
				this.zoomPercentSetting = newZoomPercent;
			    }, "~N");
	Clazz.defineMethod (c$, "zoomByFactor", 
			    function (factor, x, y) {
				if (factor <= 0 || !this.zoomEnabled) return;
				this.zoomRatio = factor;
				this.zoomPercentSetting *= factor;
				this.resetXYCenter (x, y);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "resetXYCenter", 
			    ($fz = function (x, y) {
				if (x == 2147483647 || y == 2147483647) return;
				if (this.windowCentered) this.viewer.setBooleanProperty ("windowCentered", false);
				var pt =  new org.jmol.util.Point3f ();
				this.transformPoint2 (this.fixedRotationCenter, pt);
				pt.set (x, y, pt.z);
				this.unTransformPoint (pt, pt);
				this.fixedTranslation.set (x, y, 0);
				this.setFixedRotationCenter (pt);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "zoomByPercent", 
			    function (percentZoom) {
				var deltaPercent = percentZoom * this.zoomPercentSetting / 100;
				if (deltaPercent == 0) deltaPercent = (percentZoom < 0) ? -1 : 1;
				this.zoomRatio = (deltaPercent + this.zoomPercentSetting) / this.zoomPercentSetting;
				this.zoomPercentSetting += deltaPercent;
			    }, "~N");
	Clazz.defineMethod (c$, "setScaleAngstromsPerInch", 
			    function (angstromsPerInch) {
				this.scale3D = (angstromsPerInch > 0);
				if (this.scale3D) this.scale3DAngstromsPerInch = angstromsPerInch;
				this.perspectiveDepth = !this.scale3D;
			    }, "~N");
	Clazz.defineMethod (c$, "setZslabPoint", 
			    function (pt) {
				this.zSlabPoint = (pt == null ? null : org.jmol.util.Point3f.newP (pt));
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setSlabRange", 
			    function (value) {
				this.slabRange = value;
			    }, "~N");
	Clazz.defineMethod (c$, "setSlabEnabled", 
			    function (slabEnabled) {
				this.slabEnabled = slabEnabled;
				this.viewer.getGlobalSettings ().setParamB ("slabEnabled", slabEnabled);
			    }, "~B");
	Clazz.defineMethod (c$, "setZShadeEnabled", 
			    function (zShadeEnabled) {
				this.zShadeEnabled = zShadeEnabled;
				this.viewer.getGlobalSettings ().setParamB ("zShade", zShadeEnabled);
			    }, "~B");
	Clazz.defineMethod (c$, "setZoomEnabled", 
			    function (zoomEnabled) {
				this.zoomEnabled = zoomEnabled;
				this.viewer.getGlobalSettings ().setParamB ("zoomEnabled", zoomEnabled);
			    }, "~B");
	Clazz.defineMethod (c$, "slabReset", 
			    function () {
				this.slabToPercent (100);
				this.depthToPercent (0);
				this.depthPlane = null;
				this.slabPlane = null;
				this.setSlabEnabled (false);
				this.setZShadeEnabled (false);
			    });
	Clazz.defineMethod (c$, "getSlabPercentSetting", 
			    function () {
				return this.slabPercentSetting;
			    });
	Clazz.defineMethod (c$, "slabByPercentagePoints", 
			    function (percentage) {
				this.slabPlane = null;
				this.slabPercentSetting += percentage;
				this.slabDepthChanged ();
				if (this.depthPercentSetting >= this.slabPercentSetting) this.depthPercentSetting = this.slabPercentSetting - 1;
			    }, "~N");
	Clazz.defineMethod (c$, "slabDepthChanged", 
			    ($fz = function () {
				this.viewer.getGlobalSettings ().setParamI ("slab", this.slabPercentSetting);
				this.viewer.getGlobalSettings ().setParamI ("depth", this.depthPercentSetting);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "depthByPercentagePoints", 
			    function (percentage) {
				this.depthPlane = null;
				this.depthPercentSetting += percentage;
				if (this.slabPercentSetting <= this.depthPercentSetting) this.slabPercentSetting = this.depthPercentSetting + 1;
				this.slabDepthChanged ();
			    }, "~N");
	Clazz.defineMethod (c$, "slabDepthByPercentagePoints", 
			    function (percentage) {
				this.slabPlane = null;
				this.depthPlane = null;
				this.slabPercentSetting += percentage;
				this.depthPercentSetting += percentage;
				this.slabDepthChanged ();
			    }, "~N");
	Clazz.defineMethod (c$, "slabToPercent", 
			    function (percentSlab) {
				this.viewer.setFloatProperty ("slabRange", 0);
				this.slabPercentSetting = percentSlab;
				this.slabPlane = null;
				if (this.depthPercentSetting >= this.slabPercentSetting) this.depthPercentSetting = this.slabPercentSetting - 1;
				this.slabDepthChanged ();
			    }, "~N");
	Clazz.defineMethod (c$, "depthToPercent", 
			    function (percentDepth) {
				this.viewer.getGlobalSettings ().setParamI ("depth", percentDepth);
				this.depthPercentSetting = percentDepth;
				if (this.slabPercentSetting <= this.depthPercentSetting) this.slabPercentSetting = this.depthPercentSetting + 1;
				this.slabDepthChanged ();
			    }, "~N");
	Clazz.defineMethod (c$, "zSlabToPercent", 
			    function (percentSlab) {
				this.zSlabPercentSetting = percentSlab;
				if (this.zDepthPercentSetting > this.zSlabPercentSetting) this.zDepthPercentSetting = percentSlab;
			    }, "~N");
	Clazz.defineMethod (c$, "zDepthToPercent", 
			    function (percentDepth) {
				this.zDepthPercentSetting = percentDepth;
				if (this.zDepthPercentSetting > this.zSlabPercentSetting) this.zSlabPercentSetting = percentDepth;
			    }, "~N");
	Clazz.defineMethod (c$, "slabInternal", 
			    function (plane, isDepth) {
				if (isDepth) {
				    this.depthPlane = plane;
				    this.depthPercentSetting = 0;
				} else {
				    this.slabPlane = plane;
				    this.slabPercentSetting = 100;
				}}, "org.jmol.util.Point4f,~B");
	Clazz.defineMethod (c$, "setSlabDepthInternal", 
			    function (isDepth) {
				this.finalizeTransformParameters ();
				if (isDepth) this.depthPlane = null;
				else this.slabPlane = null;
				this.slabInternal (this.getSlabDepthPlane (isDepth), isDepth);
			    }, "~B");
	Clazz.defineMethod (c$, "getSlabDepthPlane", 
			    function (isDepth) {
				if (isDepth) {
				    if (this.depthPlane != null) return this.depthPlane;
				} else {
				    if (this.slabPlane != null) return this.slabPlane;
				}var m = this.matrixTransform;
				return org.jmol.util.Point4f.new4 (-m.m20, -m.m21, -m.m22, -m.m23 + (isDepth ? this.depthValue : this.slabValue));
			    }, "~B");
	Clazz.defineMethod (c$, "checkInternalSlab", 
			    function (pt) {
				return (this.slabPlane != null && pt.x * this.slabPlane.x + pt.y * this.slabPlane.y + pt.z * this.slabPlane.z + this.slabPlane.w > 0 || this.depthPlane != null && pt.x * this.depthPlane.x + pt.y * this.depthPlane.y + pt.z * this.depthPlane.z + this.depthPlane.w < 0);
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "getCameraFactors", 
			    function () {
				this.aperatureAngle = (Math.atan2 (this.screenPixelCount / 2, this.referencePlaneOffset) * 2 * 180 / 3.141592653589793);
				this.cameraDistanceFromCenter = this.referencePlaneOffset / this.scalePixelsPerAngstrom;
				var ptRef = org.jmol.util.Point3f.new3 (Clazz.doubleToInt (this.screenWidth / 2), Clazz.doubleToInt (this.screenHeight / 2), this.referencePlaneOffset);
				this.unTransformPoint (ptRef, ptRef);
				var ptCamera = org.jmol.util.Point3f.new3 (Clazz.doubleToInt (this.screenWidth / 2), Clazz.doubleToInt (this.screenHeight / 2), 0);
				this.viewer.unTransformPoint (ptCamera, ptCamera);
				ptCamera.sub (this.fixedRotationCenter);
				var pt = org.jmol.util.Point3f.new3 (Clazz.doubleToInt (this.screenWidth / 2), Clazz.doubleToInt (this.screenHeight / 2), this.cameraDistanceFromCenter * this.scalePixelsPerAngstrom);
				this.viewer.unTransformPoint (pt, pt);
				pt.sub (this.fixedRotationCenter);
				ptCamera.add (pt);
				return [ptRef, ptCamera, this.fixedRotationCenter, org.jmol.util.Point3f.new3 (this.cameraDistanceFromCenter, this.aperatureAngle, this.scalePixelsPerAngstrom)];
			    });
	Clazz.defineMethod (c$, "getFrontPlane", 
			    function () {
				return Clazz.floatToInt (this.cameraDistance);
			    });
	Clazz.defineMethod (c$, "setPerspectiveDepth", 
			    function (perspectiveDepth) {
				if (this.perspectiveDepth == perspectiveDepth) return;
				this.perspectiveDepth = perspectiveDepth;
				this.resetFitToScreen (false);
			    }, "~B");
	Clazz.defineMethod (c$, "getPerspectiveDepth", 
			    function () {
				return this.perspectiveDepth;
			    });
	Clazz.defineMethod (c$, "setCameraDepthPercent", 
			    function (percent) {
				this.resetNavigationPoint (true);
				var screenMultiples = (percent < 0 ? -percent / 100 : percent);
				if (screenMultiples == 0) return;
				this.cameraDepthSetting = screenMultiples;
				this.cameraDepth = NaN;
			    }, "~N");
	Clazz.defineMethod (c$, "setVisualRange", 
			    function (angstroms) {
				this.visualRange = angstroms;
			    }, "~N");
	Clazz.defineMethod (c$, "getUnscaledTransformMatrix", 
			    function () {
				var unscaled =  new org.jmol.util.Matrix4f ();
				unscaled.setIdentity ();
				this.vectorTemp.setT (this.fixedRotationCenter);
				this.matrixTemp.setZero ();
				this.matrixTemp.setTranslation (this.vectorTemp);
				unscaled.sub (this.matrixTemp);
				this.matrixTemp.set (this.matrixRotate);
				unscaled.mul2 (this.matrixTemp, unscaled);
				return unscaled;
			    });
	Clazz.defineMethod (c$, "setScreenParameters", 
			    function (screenWidth, screenHeight, useZoomLarge, antialias, resetSlab, resetZoom) {
				this.screenWidth = screenWidth;
				this.screenHeight = screenHeight;
				this.useZoomLarge = useZoomLarge;
				this.antialias = antialias;
				this.width = (antialias ? screenWidth * 2 : screenWidth);
				this.height = (antialias ? screenHeight * 2 : screenHeight);
				this.scaleFitToScreen (false, useZoomLarge, resetSlab, resetZoom);
				this.finalizeTransformParameters ();
			    }, "~N,~N,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "setAntialias", 
			    function (TF) {
				var isNew = (this.antialias != TF);
				this.antialias = TF;
				this.width = (this.antialias ? this.screenWidth * 2 : this.screenWidth);
				this.height = (this.antialias ? this.screenHeight * 2 : this.screenHeight);
				if (isNew) this.scaleFitToScreen (false, this.useZoomLarge, false, false);
			    }, "~B");
	Clazz.defineMethod (c$, "defaultScaleToScreen", 
			    function (radius) {
				return this.screenPixelCount / 2 / radius;
			    }, "~N");
	Clazz.defineMethod (c$, "resetFitToScreen", 
			    ($fz = function (andCenter) {
				this.scaleFitToScreen (andCenter, this.viewer.getZoomLarge (), true, true);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "scaleFitToScreen", 
			    function (andCenter, zoomLarge, resetSlab, resetZoom) {
				if (this.width == 0 || this.height == 0) {
				    this.screenPixelCount = 1;
				} else {
				    this.fixedTranslation.set (this.width * (andCenter ? 0.5 : this.xTranslationFraction), this.height * (andCenter ? 0.5 : this.yTranslationFraction), 0);
				    this.setTranslationFractions ();
				    if (resetZoom) this.resetNavigationPoint (resetSlab);
				    this.screenPixelCount = (zoomLarge == (this.height > this.width) ? this.height : this.width);
				}if (this.screenPixelCount > 2) this.screenPixelCount -= 2;
				this.scaleDefaultPixelsPerAngstrom = this.defaultScaleToScreen (this.modelRadius);
			    }, "~B,~B,~B,~B");
	Clazz.defineMethod (c$, "scaleToScreen", 
			    function (z, milliAngstroms) {
				if (milliAngstroms == 0 || z < 2) return 0;
				var pixelSize = Clazz.floatToInt (this.scaleToPerspective (z, milliAngstroms * this.scalePixelsPerAngstrom / 1000));
				return (pixelSize > 0 ? pixelSize : 1);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "unscaleToScreen", 
			    function (z, screenDistance) {
				var d = screenDistance / this.scalePixelsPerAngstrom;
				return (this.perspectiveDepth ? d / this.getPerspectiveFactor (z) : d);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "scaleToPerspective", 
			    function (z, sizeAngstroms) {
				return (this.perspectiveDepth ? sizeAngstroms * this.getPerspectiveFactor (z) : sizeAngstroms);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getMatrixtransform", 
			    function () {
				return this.matrixTransform;
			    });
	Clazz.defineMethod (c$, "setNavigationMode", 
			    function (TF) {
				if (TF && this.canNavigate ()) this.mode = 1;
				else this.mode = this.defaultMode;
				this.resetNavigationPoint (true);
			    }, "~B");
	Clazz.defineMethod (c$, "isNavigating", 
			    function () {
				return this.navigating || this.navOn;
			    });
	Clazz.defineMethod (c$, "finalizeTransformParameters", 
			    function () {
				this.haveNotifiedNaN = false;
				this.fixedRotationOffset.setT (this.fixedTranslation);
				this.internalSlab = this.slabEnabled && (this.slabPlane != null || this.depthPlane != null);
				var newZoom = this.getZoomSetting ();
				if (this.zoomPercent != newZoom) {
				    this.zoomPercent = newZoom;
				    if (!this.viewer.getFontCaching ()) this.viewer.getGraphicsData ().clearFontCache ();
				}this.calcCameraFactors ();
				this.calcTransformMatrix ();
				if (this.mode == 1) this.calcNavigationPoint ();
				else this.calcSlabAndDepthValues ();
			    });
	Clazz.defineMethod (c$, "getZoomSetting", 
			    function () {
				if (this.zoomPercentSetting < 5) this.zoomPercentSetting = 5;
				if (this.zoomPercentSetting > 200000) this.zoomPercentSetting = 200000;
				return (this.zoomEnabled || this.mode == 1 ? this.zoomPercentSetting : 100);
			    });
	Clazz.defineMethod (c$, "calcSlabAndDepthValues", 
			    function () {
				if (this.slabRange < 1) this.slabValue = this.zValueFromPercent (this.slabPercentSetting);
				else this.slabValue = Clazz.doubleToInt (Math.floor (this.modelCenterOffset * this.slabRange / (2 * this.modelRadius) * (this.zoomPercentSetting / 100)));
				this.depthValue = this.zValueFromPercent (this.depthPercentSetting);
				if (this.zSlabPercentSetting == this.zDepthPercentSetting) {
				    this.zSlabValue = this.slabValue;
				    this.zDepthValue = this.depthValue;
				} else {
				    this.zSlabValue = this.zValueFromPercent (this.zSlabPercentSetting);
				    this.zDepthValue = this.zValueFromPercent (this.zDepthPercentSetting);
				}if (this.zSlabPoint != null) {
				    try {
					this.transformPoint2 (this.zSlabPoint, this.pointT2);
					this.zSlabValue = Clazz.floatToInt (this.pointT2.z);
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					} else {
					    throw e;
					}
				    }
				}this.viewer.getGlobalSettings ().setParamS ("_slabPlane", org.jmol.util.Escape.escape (this.getSlabDepthPlane (false)));
				this.viewer.getGlobalSettings ().setParamS ("_depthPlane", org.jmol.util.Escape.escape (this.getSlabDepthPlane (true)));
				if (this.slabEnabled) return;
				this.slabValue = 0;
				this.depthValue = 2147483647;
			    });
	Clazz.defineMethod (c$, "zValueFromPercent", 
			    function (zPercent) {
				return Clazz.doubleToInt (Math.floor ((1 - zPercent / 50) * this.modelRadiusPixels + this.modelCenterOffset));
			    }, "~N");
	Clazz.defineMethod (c$, "calcTransformMatrix", 
			    function () {
				this.matrixTransform.setIdentity ();
				this.vectorTemp.setT (this.fixedRotationCenter);
				this.vectorTemp.sub (this.frameOffset);
				this.matrixTemp.setZero ();
				this.matrixTemp.setTranslation (this.vectorTemp);
				this.matrixTransform.sub (this.matrixTemp);
				this.matrixTemp.set (this.stereoFrame ? this.matrixStereo : this.matrixRotate);
				this.matrixTransform.mul2 (this.matrixTemp, this.matrixTransform);
				this.matrixTemp.setIdentity ();
				this.matrixTemp.m00 = this.matrixTemp.m11 = this.matrixTemp.m22 = this.scalePixelsPerAngstrom;
				this.matrixTemp.m11 = this.matrixTemp.m22 = -this.scalePixelsPerAngstrom;
				this.matrixTransform.mul2 (this.matrixTemp, this.matrixTransform);
				this.matrixTransform.m23 += this.modelCenterOffset;
				try {
				    this.matrixTransformInv.invertM (this.matrixTransform);
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					System.out.println ("ERROR INVERTING matrixTransform!");
				    } else {
					throw e;
				    }
				}
			    });
	Clazz.defineMethod (c$, "rotatePoint", 
			    function (pt, ptRot) {
				this.matrixRotate.transform2 (pt, ptRot);
				ptRot.y = -ptRot.y;
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPoints", 
			    function (count, angstroms, screens) {
				for (var i = count; --i >= 0; ) screens[i].setT (this.transformPoint (angstroms[i]));

			    }, "~N,~A,~A");
	Clazz.defineMethod (c$, "transformPointScr", 
			    function (pointAngstroms, pointScreen) {
				pointScreen.setT (this.transformPoint (pointAngstroms));
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "transformPointNoClip2", 
			    function (pointAngstroms, pointScreen) {
				pointScreen.setT (this.transformPointNoClip (pointAngstroms));
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPoint", 
			    function (pointAngstroms) {
				if (pointAngstroms.z == 3.4028235E38 || pointAngstroms.z == -3.4028235E38) return this.transformScreenPoint (pointAngstroms);
				this.matrixTransform.transform2 (pointAngstroms, this.point3fScreenTemp);
				this.adjustTemporaryScreenPoint ();
				if (this.internalSlab && this.checkInternalSlab (pointAngstroms)) this.point3iScreenTemp.z = 1;
				return this.point3iScreenTemp;
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformScreenPoint", 
			    ($fz = function (ptXyp) {
				if (ptXyp.z == -3.4028235E38) {
				    this.point3iScreenTemp.x = Clazz.doubleToInt (Math.floor (ptXyp.x / 100 * this.screenWidth));
				    this.point3iScreenTemp.y = Clazz.doubleToInt (Math.floor ((1 - ptXyp.y / 100) * this.screenHeight));
				} else {
				    this.point3iScreenTemp.x = Clazz.floatToInt (ptXyp.x);
				    this.point3iScreenTemp.y = (this.screenHeight - Clazz.floatToInt (ptXyp.y));
				}if (this.antialias) {
				    this.point3iScreenTemp.x <<= 1;
				    this.point3iScreenTemp.y <<= 1;
				}this.matrixTransform.transform2 (this.fixedRotationCenter, this.pointTsp);
				this.point3iScreenTemp.z = Clazz.floatToInt (this.pointTsp.z);
				return this.point3iScreenTemp;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPointNoClip", 
			    function (pointAngstroms) {
				this.matrixTransform.transform2 (pointAngstroms, this.point3fScreenTemp);
				this.adjustTemporaryScreenPoint ();
				return this.point3fScreenTemp;
			    }, "org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformPointVib", 
			    function (pointAngstroms, vibrationVector) {
				this.point3fVibrationTemp.setT (pointAngstroms);
				if (this.vibrationOn && vibrationVector != null) this.point3fVibrationTemp.scaleAdd2 (this.vibrationAmplitude, vibrationVector, pointAngstroms);
				this.matrixTransform.transform2 (this.point3fVibrationTemp, this.point3fScreenTemp);
				this.adjustTemporaryScreenPoint ();
				if (this.internalSlab && this.checkInternalSlab (pointAngstroms)) this.point3iScreenTemp.z = 1;
				return this.point3iScreenTemp;
			    }, "org.jmol.util.Point3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "transformPoint2", 
			    function (pointAngstroms, screen) {
				this.matrixTransform.transform2 (pointAngstroms, this.point3fScreenTemp);
				this.adjustTemporaryScreenPoint ();
				if (this.internalSlab && this.checkInternalSlab (pointAngstroms)) this.point3fScreenTemp.z = 1;
				screen.setT (this.point3fScreenTemp);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "transformVector", 
			    function (vectorAngstroms, vectorTransformed) {
				this.matrixTransform.transformV2 (vectorAngstroms, vectorTransformed);
			    }, "org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "unTransformPoint", 
			    function (screenPt, coordPt) {
				this.untransformedPoint.setT (screenPt);
				switch (this.mode) {
				case 1:
				    this.untransformedPoint.x -= this.navigationOffset.x;
				    this.untransformedPoint.y -= this.navigationOffset.y;
				    break;
				case 2:
				    this.untransformedPoint.x -= this.perspectiveOffset.x;
				    this.untransformedPoint.y -= this.perspectiveOffset.y;
				    break;
				case 0:
				    this.untransformedPoint.x -= this.fixedRotationOffset.x;
				    this.untransformedPoint.y -= this.fixedRotationOffset.y;
				}
				if (this.perspectiveDepth) {
				    var factor = this.getPerspectiveFactor (this.untransformedPoint.z);
				    this.untransformedPoint.x /= factor;
				    this.untransformedPoint.y /= factor;
				}switch (this.mode) {
				case 1:
				    this.untransformedPoint.x += this.navigationShiftXY.x;
				    this.untransformedPoint.y += this.navigationShiftXY.y;
				    break;
				case 2:
				    this.untransformedPoint.x += this.perspectiveShiftXY.x;
				    this.untransformedPoint.y += this.perspectiveShiftXY.y;
				    break;
				}
				this.matrixTransformInv.transform2 (this.untransformedPoint, coordPt);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "move", 
			    function (dRot, dZoom, dTrans, dSlab, floatSecondsTotal, fps) {
				var slab = this.getSlabPercentSetting ();
				var transX = this.getTranslationXPercent ();
				var transY = this.getTranslationYPercent ();
				var transZ = this.getTranslationZPercent ();
				var timeBegin = System.currentTimeMillis ();
				var timePerStep = Clazz.doubleToInt (1000 / fps);
				var totalSteps = Clazz.floatToInt (fps * floatSecondsTotal);
				if (totalSteps <= 0) totalSteps = 1;
				var radiansPerDegreePerStep = (1 / 57.29577951308232 / totalSteps);
				var radiansXStep = radiansPerDegreePerStep * dRot.x;
				var radiansYStep = radiansPerDegreePerStep * dRot.y;
				var radiansZStep = radiansPerDegreePerStep * dRot.z;
				if (floatSecondsTotal > 0) this.viewer.setInMotion (true);
				var zoomPercent0 = this.zoomPercent;
				for (var i = 1; i <= totalSteps; ++i) {
				    if (dRot.x != 0) this.rotateXRadians (radiansXStep, null);
				    if (dRot.y != 0) this.rotateYRadians (radiansYStep, null);
				    if (dRot.z != 0) this.rotateZRadians (radiansZStep);
				    if (dZoom != 0) this.zoomToPercent (zoomPercent0 + dZoom * i / totalSteps);
				    if (dTrans.x != 0) this.translateToPercent ('x', transX + dTrans.x * i / totalSteps);
				    if (dTrans.y != 0) this.translateToPercent ('y', transY + dTrans.y * i / totalSteps);
				    if (dTrans.z != 0) this.translateToPercent ('z', transZ + dTrans.z * i / totalSteps);
				    if (dSlab != 0) this.slabToPercent (Clazz.doubleToInt (Math.floor (slab + dSlab * i / totalSteps)));
				    var timeSpent = (System.currentTimeMillis () - timeBegin);
				    var timeAllowed = i * timePerStep;
				    if (timeSpent < timeAllowed) {
					this.viewer.requestRepaintAndWait ();
					if (!this.viewer.isScriptExecuting ()) break;
					timeSpent = (System.currentTimeMillis () - timeBegin);
					var timeToSleep = timeAllowed - timeSpent;
					if (timeToSleep > 0) {
					    try {
						Thread.sleep (timeToSleep);
					    } catch (e) {
						if (Clazz.exceptionOf (e, InterruptedException)) {
						} else {
						    throw e;
						}
					    }
					}}}
				this.viewer.setInMotion (false);
			    }, "org.jmol.util.Vector3f,~N,org.jmol.util.Vector3f,~N,~N,~N");
	Clazz.defineMethod (c$, "isInPosition", 
			    function (axis, degrees) {
				if (Float.isNaN (degrees)) return true;
				this.aaTest1.setVA (axis, (degrees / 57.29577951308232));
				this.ptTest1.set (4.321, 1.23456, 3.14159);
				this.getRotation (this.matrixTest);
				this.matrixTest.transform2 (this.ptTest1, this.ptTest2);
				this.matrixTest.setAA (this.aaTest1);
				this.matrixTest.transform2 (this.ptTest1, this.ptTest3);
				return (this.ptTest3.distance (this.ptTest2) < 0.1);
			    }, "org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "moveTo", 
			    function (floatSecondsTotal, center, rotAxis, degrees, matrixEnd, zoom, xTrans, yTrans, newRotationRadius, navCenter, xNav, yNav, navDepth) {
				if (matrixEnd == null) {
				    matrixEnd =  new org.jmol.util.Matrix3f ();
				    var axis = org.jmol.util.Vector3f.newV (rotAxis);
				    if (Float.isNaN (degrees)) {
					matrixEnd.m00 = NaN;
				    } else if (degrees < 0.01 && degrees > -0.01) {
					matrixEnd.setIdentity ();
				    } else {
					if (axis.x == 0 && axis.y == 0 && axis.z == 0) {
					    return;
					}var aaMoveTo =  new org.jmol.util.AxisAngle4f ();
					aaMoveTo.setVA (axis, (degrees / 57.29577951308232));
					matrixEnd.setAA (aaMoveTo);
				    }}try {
					if (this.motion == null) this.motion =  new org.jmol.thread.MotionThread (this, this.viewer);
					var nSteps = this.motion.set (floatSecondsTotal, center, matrixEnd, zoom, xTrans, yTrans, newRotationRadius, navCenter, xNav, yNav, navDepth);
					if (nSteps <= 0 || this.viewer.waitForMoveTo ()) {
					    this.motion.startMotion (false);
					    this.motion = null;
					} else {
					    this.motion.startMotion (true);
					}} catch (e) {
					    if (Clazz.exceptionOf (e, Exception)) {
					    } else {
						throw e;
					    }
					}
			    }, "~N,org.jmol.util.Point3f,org.jmol.util.Tuple3f,~N,org.jmol.util.Matrix3f,~N,~N,~N,~N,org.jmol.util.Point3f,~N,~N,~N");
	Clazz.defineMethod (c$, "stopMotion", 
			    function () {
				this.motion = null;
			    });
	Clazz.defineMethod (c$, "getRotationQuaternion", 
			    function () {
				return org.jmol.util.Quaternion.newM (this.matrixRotate);
			    });
	Clazz.defineMethod (c$, "getRotationText", 
			    function () {
				this.axisangleT.setM (this.matrixRotate);
				var degrees = (this.axisangleT.angle * 57.29577951308232);
				var sb =  new org.jmol.util.StringXBuilder ();
				this.vectorT.set (this.axisangleT.x, this.axisangleT.y, this.axisangleT.z);
				if (degrees < 0.01) return "{0 0 1 0}";
				this.vectorT.normalize ();
				this.vectorT.scale (1000);
				sb.append ("{");
				org.jmol.viewer.TransformManager.truncate0 (sb, this.vectorT.x);
				org.jmol.viewer.TransformManager.truncate0 (sb, this.vectorT.y);
				org.jmol.viewer.TransformManager.truncate0 (sb, this.vectorT.z);
				org.jmol.viewer.TransformManager.truncate2 (sb, degrees);
				sb.append ("}");
				return sb.toString ();
			    });
	Clazz.defineMethod (c$, "getMoveToText", 
			    function (timespan, addComments) {
				var sb =  new org.jmol.util.StringXBuilder ();
				sb.append ("moveto ");
				if (addComments) sb.append ("/* time, axisAngle */ ");
				sb.appendF (timespan);
				sb.append (" ").append (this.getRotationText ());
				if (addComments) sb.append (" /* zoom, translation */ ");
				org.jmol.viewer.TransformManager.truncate2 (sb, this.zoomPercentSetting);
				org.jmol.viewer.TransformManager.truncate2 (sb, this.getTranslationXPercent ());
				org.jmol.viewer.TransformManager.truncate2 (sb, this.getTranslationYPercent ());
				sb.append (" ");
				if (addComments) sb.append (" /* center, rotationRadius */ ");
				sb.append (this.getCenterText ());
				sb.append (" ").appendF (this.modelRadius);
				sb.append (this.getNavigationText (addComments));
				sb.append (";");
				return sb.toString ();
			    }, "~N,~B");
	Clazz.defineMethod (c$, "getCenterText", 
			    ($fz = function () {
				return org.jmol.util.Escape.escapePt (this.fixedRotationCenter);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getRotateXyzText", 
			    ($fz = function () {
				var sb =  new org.jmol.util.StringXBuilder ();
				var m20 = this.matrixRotate.m20;
				var rY = -(Math.asin (m20) * 57.29577951308232);
				var rX;
				var rZ;
				if (m20 > .999 || m20 < -0.999) {
				    rX = -(Math.atan2 (this.matrixRotate.m12, this.matrixRotate.m11) * 57.29577951308232);
				    rZ = 0;
				} else {
				    rX = (Math.atan2 (this.matrixRotate.m21, this.matrixRotate.m22) * 57.29577951308232);
				    rZ = (Math.atan2 (this.matrixRotate.m10, this.matrixRotate.m00) * 57.29577951308232);
				}sb.append ("reset");
				sb.append (";center ").append (this.getCenterText ());
				if (rX != 0) {
				    sb.append ("; rotate x");
				    org.jmol.viewer.TransformManager.truncate2 (sb, rX);
				}if (rY != 0) {
				    sb.append ("; rotate y");
				    org.jmol.viewer.TransformManager.truncate2 (sb, rY);
				}if (rZ != 0) {
				    sb.append ("; rotate z");
				    org.jmol.viewer.TransformManager.truncate2 (sb, rZ);
				}sb.append (";");
				this.addZoomTranslationNavigationText (sb);
				return sb.toString ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "addZoomTranslationNavigationText", 
			    ($fz = function (sb) {
				if (this.zoomPercent != 100) {
				    sb.append (" zoom");
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.zoomPercent);
				    sb.append (";");
				}var tX = this.getTranslationXPercent ();
				if (tX != 0) {
				    sb.append (" translate x");
				    org.jmol.viewer.TransformManager.truncate2 (sb, tX);
				    sb.append (";");
				}var tY = this.getTranslationYPercent ();
				if (tY != 0) {
				    sb.append (" translate y");
				    org.jmol.viewer.TransformManager.truncate2 (sb, tY);
				    sb.append (";");
				}if (this.modelRadius != this.rotationRadiusDefault || this.modelRadius == 10) {
				    sb.append (" set rotationRadius");
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.modelRadius);
				    sb.append (";");
				}if (this.mode == 1) {
				    sb.append ("navigate 0 center ").append (org.jmol.util.Escape.escapePt (this.navigationCenter));
				    sb.append (";navigate 0 translate");
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.getNavigationOffsetPercent ('X'));
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.getNavigationOffsetPercent ('Y'));
				    sb.append (";navigate 0 depth ");
				    org.jmol.viewer.TransformManager.truncate2 (sb, this.getNavigationDepthPercent ());
				    sb.append (";");
				}}, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder");
	Clazz.defineMethod (c$, "getRotateZyzText", 
			    ($fz = function (iAddComment) {
				var sb =  new org.jmol.util.StringXBuilder ();
				var m = this.viewer.getModelSetAuxiliaryInfoValue ("defaultOrientationMatrix");
				if (m == null) {
				    m = this.matrixRotate;
				} else {
				    m = org.jmol.util.Matrix3f.newM (m);
				    m.invert ();
				    m.mul2 (this.matrixRotate, m);
				}var m22 = m.m22;
				var rY = (Math.acos (m22) * 57.29577951308232);
				var rZ1;
				var rZ2;
				if (m22 > .999 || m22 < -0.999) {
				    rZ1 = (Math.atan2 (m.m10, m.m11) * 57.29577951308232);
				    rZ2 = 0;
				} else {
				    rZ1 = (Math.atan2 (m.m21, -m.m20) * 57.29577951308232);
				    rZ2 = (Math.atan2 (m.m12, m.m02) * 57.29577951308232);
				}if (rZ1 != 0 && rY != 0 && rZ2 != 0 && iAddComment) sb.append ("#Follows Z-Y-Z convention for Euler angles\n");
				sb.append ("reset");
				sb.append (";center ").append (this.getCenterText ());
				if (rZ1 != 0) {
				    sb.append ("; rotate z");
				    org.jmol.viewer.TransformManager.truncate2 (sb, rZ1);
				}if (rY != 0) {
				    sb.append ("; rotate y");
				    org.jmol.viewer.TransformManager.truncate2 (sb, rY);
				}if (rZ2 != 0) {
				    sb.append ("; rotate z");
				    org.jmol.viewer.TransformManager.truncate2 (sb, rZ2);
				}sb.append (";");
				this.addZoomTranslationNavigationText (sb);
				return sb.toString ();
			    }, $fz.isPrivate = true, $fz), "~B");
	c$.truncate0 = Clazz.defineMethod (c$, "truncate0", 
					   ($fz = function (sb, val) {
					       sb.appendC (' ');
					       sb.appendI (Math.round (val));
					   }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~N");
	c$.truncate2 = Clazz.defineMethod (c$, "truncate2", 
					   ($fz = function (sb, val) {
					       sb.appendC (' ');
					       sb.appendF (Math.round (val * 100) / 100);
					   }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~N");
	Clazz.defineMethod (c$, "setSpinXYZ", 
			    function (x, y, z) {
				if (!Float.isNaN (x)) this.spinX = x;
				if (!Float.isNaN (y)) this.spinY = y;
				if (!Float.isNaN (z)) this.spinZ = z;
				if (this.isSpinInternal || this.isSpinFixed) this.clearSpin ();
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "setSpinFps", 
			    function (value) {
				if (value <= 0) value = 1;
				else if (value > 50) value = 50;
				this.spinFps = value;
			    }, "~N");
	Clazz.defineMethod (c$, "setNavXYZ", 
			    function (x, y, z) {
				if (!Float.isNaN (x)) this.navX = x;
				if (!Float.isNaN (y)) this.navY = y;
				if (!Float.isNaN (z)) this.navZ = z;
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "setNavFps", 
			    function (value) {
			    }, "~N");
	Clazz.defineMethod (c$, "clearSpin", 
			    ($fz = function () {
				this.setSpinOn (false);
				this.setNavOn (false);
				this.isSpinInternal = false;
				this.isSpinFixed = false;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getSpinOn", 
			    function () {
				return this.spinOn;
			    });
	Clazz.defineMethod (c$, "getNavOn", 
			    function () {
				return this.navOn;
			    });
	Clazz.defineMethod (c$, "setSpinOn", 
			    function (spinOn) {
				this.setSpin (spinOn, 3.4028235E38, null, null, false);
			    }, "~B");
	Clazz.defineMethod (c$, "setSpin", 
			    ($fz = function (spinOn, endDegrees, endPositions, bsAtoms, isGesture) {
				if (this.navOn && spinOn) this.setNavOn (false);
				this.spinOn = spinOn;
				this.viewer.getGlobalSettings ().setParamB ("_spinning", spinOn);
				if (spinOn) {
				    if (this.spinThread == null) {
					this.spinThread =  new org.jmol.thread.SpinThread (this, this.viewer, endDegrees, endPositions, bsAtoms, false, isGesture);
					if (bsAtoms == null) this.spinThread.start ();
					else this.spinThread.run ();
				    }} else if (this.spinThread != null) {
					this.spinThread.reset ();
					this.spinThread = null;
				    }}, $fz.isPrivate = true, $fz), "~B,~N,java.util.List,org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "setNavOn", 
			    function (navOn) {
				if (Float.isNaN (this.navFps)) return;
				var wasOn = this.navOn;
				if (navOn && this.spinOn) this.setSpin (false, 0, null, null, false);
				this.navOn = navOn;
				this.viewer.getGlobalSettings ().setParamB ("_navigating", navOn);
				if (navOn) {
				    if (this.navX == 0 && this.navY == 0 && this.navZ == 0) this.navZ = 1;
				    if (this.navFps == 0) this.navFps = 10;
				    if (this.spinThread == null) {
					this.spinThread =  new org.jmol.thread.SpinThread (this, this.viewer, 0, null, null, true, false);
					this.spinThread.start ();
				    }} else if (wasOn) {
					if (this.spinThread != null) {
					    this.spinThread.interrupt ();
					    this.spinThread = null;
					}}}, "~B");
	Clazz.defineMethod (c$, "setVibrationScale", 
			    function (scale) {
				this.vibrationScale = scale;
			    }, "~N");
	Clazz.defineMethod (c$, "setNavigationOffsetRelative", 
			    function (navigatingSurface) {
			    }, "~B");
	Clazz.defineMethod (c$, "setVibrationPeriod", 
			    function (period) {
				if (Float.isNaN (period)) {
				    period = this.vibrationPeriod;
				} else if (period == 0) {
				    this.vibrationPeriod = 0;
				    this.vibrationPeriodMs = 0;
				} else {
				    this.vibrationPeriod = Math.abs (period);
				    this.vibrationPeriodMs = Clazz.floatToInt (this.vibrationPeriod * 1000);
				    if (period > 0) return;
				    period = -period;
				}this.setVibrationOn (period > 0 && this.viewer.modelHasVibrationVectors (this.viewer.getCurrentModelIndex ()));
			    }, "~N");
	Clazz.defineMethod (c$, "setVibrationT", 
			    function (t) {
				this.vibrationRadians = (t * 6.283185307179586);
				if (this.vibrationScale == 0) this.vibrationScale = this.viewer.getVibrationScale ();
				this.vibrationAmplitude = Math.cos (this.vibrationRadians) * this.vibrationScale;
			    }, "~N");
	Clazz.defineMethod (c$, "isVibrationOn", 
			    function () {
				return this.vibrationOn;
			    });
	Clazz.defineMethod (c$, "setVibrationOn", 
			    ($fz = function (vibrationOn) {
				if (!vibrationOn) {
				    if (this.vibrationThread != null) {
					this.vibrationThread.interrupt ();
					this.vibrationThread = null;
				    }this.vibrationOn = false;
				    return;
				}if (this.viewer.getModelCount () < 1) {
				    this.vibrationOn = false;
				    return;
				}if (this.vibrationThread == null) {
				    this.vibrationThread =  new org.jmol.thread.VibrationThread (this, this.viewer);
				    this.vibrationThread.start ();
				}this.vibrationOn = true;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "clearVibration", 
			    ($fz = function () {
				this.setVibrationOn (false);
				this.vibrationScale = 0;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setStereoMode2", 
			    function (twoColors) {
				this.stereoMode = org.jmol.constant.EnumStereoMode.CUSTOM;
				this.stereoColors = twoColors;
			    }, "~A");
	Clazz.defineMethod (c$, "setStereoMode", 
			    function (stereoMode) {
				this.stereoColors = null;
				this.stereoMode = stereoMode;
			    }, "org.jmol.constant.EnumStereoMode");
	Clazz.defineMethod (c$, "setStereoDegrees", 
			    function (stereoDegrees) {
				this.stereoDegrees = stereoDegrees;
				this.stereoRadians = stereoDegrees * 0.017453292;
			    }, "~N");
	Clazz.defineMethod (c$, "getStereoRotationMatrix", 
			    function (stereoFrame) {
				this.stereoFrame = stereoFrame;
				if (!stereoFrame) return this.matrixRotate;
				this.matrixTemp3.rotY (-this.stereoRadians);
				this.matrixStereo.mul2 (this.matrixTemp3, this.matrixRotate);
				return this.matrixStereo;
			    }, "~B");
	Clazz.defineMethod (c$, "isWindowCentered", 
			    function () {
				return this.windowCentered;
			    });
	Clazz.defineMethod (c$, "setWindowCentered", 
			    function (TF) {
				this.windowCentered = TF;
				this.resetNavigationPoint (true);
			    }, "~B");
	Clazz.defineMethod (c$, "getRotationCenter", 
			    function () {
				return this.fixedRotationCenter;
			    });
	Clazz.defineMethod (c$, "getRotationRadius", 
			    function () {
				return this.modelRadius;
			    });
	Clazz.defineMethod (c$, "setRotationRadius", 
			    function (angstroms, doAll) {
				angstroms = (this.modelRadius = (angstroms <= 0 ? this.viewer.calcRotationRadius (this.fixedRotationCenter) : angstroms));
				if (doAll) this.viewer.setRotationRadius (angstroms, false);
				return angstroms;
			    }, "~N,~B");
	Clazz.defineMethod (c$, "setRotationCenterAndRadiusXYZ", 
			    ($fz = function (newCenterOfRotation, andRadius) {
				this.resetNavigationPoint (false);
				if (newCenterOfRotation == null) {
				    this.setFixedRotationCenter (this.rotationCenterDefault);
				    this.modelRadius = this.rotationRadiusDefault;
				    return;
				}this.setFixedRotationCenter (newCenterOfRotation);
				if (andRadius && this.windowCentered) this.modelRadius = this.viewer.calcRotationRadius (this.fixedRotationCenter);
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "setRotCenterRel", 
			    ($fz = function (relativeTo, pt) {
				var pt1 = org.jmol.util.Point3f.newP (pt);
				if (relativeTo === "average") pt1.add (this.viewer.getAverageAtomPoint ());
				else if (relativeTo === "boundbox") pt1.add (this.viewer.getBoundBoxCenter ());
				else if (relativeTo !== "absolute") pt1.setT (this.rotationCenterDefault);
				this.setRotationCenterAndRadiusXYZ (pt1, true);
			    }, $fz.isPrivate = true, $fz), "~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "setNewRotationCenter", 
			    function (center, doScale) {
				if (center == null) center = this.rotationCenterDefault;
				if (this.windowCentered) {
				    this.translateToPercent ('x', 0);
				    this.translateToPercent ('y', 0);
				    this.setRotationCenterAndRadiusXYZ (center, true);
				    if (doScale) this.resetFitToScreen (true);
				} else {
				    this.moveRotationCenter (center, true);
				}}, "org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "moveRotationCenter", 
			    function (center, toXY) {
				this.setRotationCenterAndRadiusXYZ (center, false);
				if (toXY) this.setRotationPointXY (this.fixedRotationCenter);
			    }, "org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "setCenter", 
			    function () {
				this.setRotationCenterAndRadiusXYZ (this.fixedRotationCenter, true);
			    });
	Clazz.defineMethod (c$, "setCenterAt", 
			    function (relativeTo, pt) {
				this.setRotCenterRel (relativeTo, pt);
				this.resetFitToScreen (true);
			    }, "~S,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "canNavigate", 
			    function () {
				return false;
			    });
	Clazz.defineMethod (c$, "navigate", 
			    function (keyCode, modifiers) {
			    }, "~N,~N");
	Clazz.defineMethod (c$, "navigatePt", 
			    function (seconds, center) {
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "navigateAxis", 
			    function (seconds, rotAxis, degrees) {
			    }, "~N,org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "navigatePath", 
			    function (seconds, path, theta, indexStart, indexEnd) {
			    }, "~N,~A,~A,~N,~N");
	Clazz.defineMethod (c$, "navigateGuide", 
			    function (timeSeconds, pathGuide) {
			    }, "~N,~A");
	Clazz.defineMethod (c$, "navTranslate", 
			    function (seconds, pt) {
			    }, "~N,org.jmol.util.Point3f");
	Clazz.defineMethod (c$, "navTranslatePercent", 
			    function (seconds, x, y) {
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "calcNavigationPoint", 
			    function () {
			    });
	Clazz.defineMethod (c$, "resetNavigationPoint", 
			    function (doResetSlab) {
			    }, "~B");
	Clazz.defineMethod (c$, "getNavigationState", 
			    function () {
				return "";
			    });
	Clazz.defineMethod (c$, "setNavigationDepthPercent", 
			    function (timeSec, percent) {
				this.viewer.getGlobalSettings ().setParamF ("navigationDepth", percent);
			    }, "~N,~N");
	Clazz.defineMethod (c$, "getNavigationCenter", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getNavigationOffset", 
			    function () {
				return null;
			    });
	Clazz.defineMethod (c$, "getNavigationDepthPercent", 
			    function () {
				return NaN;
			    });
	Clazz.defineMethod (c$, "getNavigationOffsetPercent", 
			    function (XorY) {
				return 0;
			    }, "~S");
	Clazz.defineMethod (c$, "setNavigationSlabOffsetPercent", 
			    function (offset) {
				this.viewer.getGlobalSettings ().setParamF ("navigationSlab", offset);
			    }, "~N");
	Clazz.defineMethod (c$, "getNavigationText", 
			    function (addComments) {
				return "";
			    }, "~B");
	Clazz.defineMethod (c$, "setFrameOffset", 
			    function (modelIndex) {
				if (this.frameOffsets == null || modelIndex < 0 || modelIndex >= this.frameOffsets.length) this.frameOffset.set (0, 0, 0);
				else this.frameOffset.setT (this.frameOffsets[modelIndex]);
			    }, "~N");
	Clazz.defineMethod (c$, "setFrameOffsets", 
			    function (offsets) {
				this.frameOffsets = offsets;
			    }, "~A");
	Clazz.defineMethod (c$, "navigateSurface", 
			    function (timeSeconds, name) {
			    }, "~N,~S");
	Clazz.defineMethod (c$, "setSelectedTranslation", 
			    function (bsAtoms, xyz, xy) {
				this.bsSelectedAtoms = bsAtoms;
				switch (xyz) {
				case 'X':
				case 'x':
				    this.ptOffset.x += xy;
				    break;
				case 'Y':
				case 'y':
				    this.ptOffset.y += xy;
				    break;
				case 'Z':
				case 'z':
				    this.ptOffset.z += xy;
				    break;
				}
			    }, "org.jmol.util.BitSet,~S,~N");
	Clazz.defineStatics (c$,
			     "twoPI", 6.283185307179586,
			     "degreesPerRadian", 57.29577951308232,
			     "DEFAULT_NAV_FPS", 10,
			     "DEFAULT_SPIN_Y", 30,
			     "DEFAULT_SPIN_FPS", 30,
			     "MAXIMUM_ZOOM_PERCENTAGE", 200000,
			     "MAXIMUM_ZOOM_PERSPECTIVE_DEPTH", 10000,
			     "MODE_STANDARD", 0,
			     "MODE_NAVIGATION", 1,
			     "MODE_PERSPECTIVE_CENTER", 2,
			     "DEFAULT_PERSPECTIVE_MODEL", 11);
    });
    // 
    //// org\jmol\viewer\TransformManager10.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.viewer.TransformManager"], "org.jmol.viewer.TransformManager10", ["java.lang.Float", "org.jmol.util.Logger"], function () {
	c$ = Clazz.declareType (org.jmol.viewer, "TransformManager10", org.jmol.viewer.TransformManager);
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   Clazz.superConstructor (this, org.jmol.viewer.TransformManager10, [viewer]);
				   this.perspectiveModel = 10;
			       }, "org.jmol.viewer.Viewer");
	Clazz.makeConstructor (c$, 
			       function (viewer, width, height) {
				   Clazz.superConstructor (this, org.jmol.viewer.TransformManager10, [viewer, width, height]);
				   this.perspectiveModel = 10;
			       }, "org.jmol.viewer.Viewer,~N,~N");
	Clazz.overrideMethod (c$, "calcCameraFactors", 
			      function () {
				  if (Float.isNaN (this.cameraDepth)) {
				      this.cameraDepth = this.cameraDepthSetting;
				  }this.cameraDistance = this.cameraDepth * this.screenPixelCount;
				  this.cameraScaleFactor = 1.02 + 0.5 / this.cameraDepth;
				  this.scalePixelsPerAngstrom = (this.scale3D && !this.perspectiveDepth ? 72 / this.scale3DAngstromsPerInch * (this.antialias ? 2 : 1) : this.scaleDefaultPixelsPerAngstrom * this.zoomPercent / 100 * this.cameraScaleFactor);
				  this.modelRadiusPixels = this.modelRadius * this.scalePixelsPerAngstrom;
				  this.modelCenterOffset = this.cameraDistance + this.modelRadiusPixels;
				  this.referencePlaneOffset = this.cameraDistance;
			      });
	Clazz.overrideMethod (c$, "getPerspectiveFactor", 
			      function (z) {
				  var factor = (z <= 0 ? this.referencePlaneOffset : this.referencePlaneOffset / z);
				  if (this.zoomPercent >= 10000) factor += (this.zoomPercent - 10000) / (190000) * (1 - factor);
				  return factor;
			      }, "~N");
	Clazz.overrideMethod (c$, "adjustTemporaryScreenPoint", 
			      function () {
				  var z = this.point3fScreenTemp.z;
				  if (Float.isNaN (z)) {
				      if (!this.haveNotifiedNaN) org.jmol.util.Logger.debug ("NaN seen in TransformPoint");
				      this.haveNotifiedNaN = true;
				      z = 1;
				  } else if (z <= 0) {
				      z = 1;
				  }this.point3fScreenTemp.z = z;
				  if (this.perspectiveDepth) {
				      var factor = this.getPerspectiveFactor (z);
				      this.point3fScreenTemp.x *= factor;
				      this.point3fScreenTemp.y *= factor;
				  }this.point3fScreenTemp.x += this.fixedRotationOffset.x;
				  this.point3fScreenTemp.y += this.fixedRotationOffset.y;
				  if (Float.isNaN (this.point3fScreenTemp.x) && !this.haveNotifiedNaN) {
				      org.jmol.util.Logger.debug ("NaN found in transformPoint ");
				      this.haveNotifiedNaN = true;
				  }this.point3iScreenTemp.set (Clazz.floatToInt (this.point3fScreenTemp.x), Clazz.floatToInt (this.point3fScreenTemp.y), Clazz.floatToInt (this.point3fScreenTemp.z));
			      });
    });
    // 
    //// org\jmol\modelset\ModelLoader.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["java.util.Hashtable", "org.jmol.util.BitSet", "org.jmol.viewer.JmolConstants"], "org.jmol.modelset.ModelLoader", ["java.lang.Boolean", "$.Float", "$.NullPointerException", "java.util.ArrayList", "$.Arrays", "org.jmol.api.Interface", "org.jmol.constant.EnumStructure", "org.jmol.modelset.Chain", "$.Group", "$.Model", "$.ModelSet", "org.jmol.util.ArrayUtil", "$.BitSetUtil", "$.Elements", "$.JmolMolecule", "$.Logger", "$.Point3f", "$.StringXBuilder", "$.TextFormat", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.modelSet = null;
	    this.mergeModelSet = null;
	    this.merging = false;
	    this.jmolData = null;
	    this.group3Lists = null;
	    this.group3Counts = null;
	    this.specialAtomIndexes = null;
	    this.someModelsHaveUnitcells = false;
	    this.isTrajectory = false;
	    this.doMinimize = false;
	    this.doAddHydrogens = false;
	    this.doRemoveAddedHydrogens = false;
	    this.fileHeader = null;
	    this.jbr = null;
	    this.isPDB = false;
	    this.groups = null;
	    this.groupCount = 0;
	    this.htAtomMap = null;
	    this.chainOf = null;
	    this.group3Of = null;
	    this.seqcodes = null;
	    this.firstAtomIndexes = null;
	    this.currentModelIndex = 0;
	    this.currentModel = null;
	    this.currentChainID = '\0';
	    this.currentChain = null;
	    this.currentGroupSequenceNumber = 0;
	    this.currentGroupInsertionCode = '\0';
	    this.currentGroup3 = null;
	    this.nullGroup = null;
	    this.baseModelIndex = 0;
	    this.baseModelCount = 0;
	    this.baseAtomIndex = 0;
	    this.baseGroupIndex = 0;
	    this.baseTrajectoryCount = 0;
	    this.appendNew = false;
	    this.adapterModelCount = 0;
	    this.adapterTrajectoryCount = 0;
	    this.noAutoBond = false;
	    this.is2D = false;
	    this.$mergeGroups = null;
	    this.vStereo = null;
	    this.structuresDefinedInFile = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "ModelLoader");
	Clazz.prepareFields (c$, function () {
	    this.specialAtomIndexes =  Clazz.newIntArray (org.jmol.viewer.JmolConstants.ATOMID_MAX, 0);
	    this.htAtomMap =  new java.util.Hashtable ();
	    this.structuresDefinedInFile =  new org.jmol.util.BitSet ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer, modelSetName, loadScript, atomSetCollection, mergeModelSet, bsNew) {
				   this.viewer = viewer;
				   this.modelSet =  new org.jmol.modelset.ModelSet (viewer, modelSetName);
				   this.mergeModelSet = mergeModelSet;
				   this.merging = (mergeModelSet != null && mergeModelSet.atomCount > 0);
				   if (this.merging) {
				       this.modelSet.canSkipLoad = false;
				   } else {
				       viewer.resetShapes (false);
				   }this.modelSet.preserveState = viewer.getPreserveState ();
				   this.modelSet.showRebondTimes = viewer.getShowTiming ();
				   if (bsNew == null) {
				       this.initializeInfo (modelSetName, null);
				       this.createModelSet (null, null, null);
				       viewer.setStringProperty ("_fileType", "");
				       return;
				   }if (!this.modelSet.preserveState) this.modelSet.canSkipLoad = false;
				   var adapter = viewer.getModelAdapter ();
				   var info = adapter.getAtomSetCollectionAuxiliaryInfo (atomSetCollection);
				   info.put ("loadScript", loadScript);
				   this.initializeInfo (adapter.getFileTypeName (atomSetCollection).toLowerCase ().intern (), info);
				   this.createModelSet (adapter, atomSetCollection, bsNew);
			       }, "org.jmol.viewer.Viewer,~S,org.jmol.util.StringXBuilder,~O,org.jmol.modelset.ModelSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "initializeInfo", 
			    ($fz = function (name, info) {
				this.modelSet.g3d = this.viewer.getGraphicsData ();
				this.modelSet.modelSetTypeName = name;
				this.modelSet.isXYZ = (name === "xyz");
				this.modelSet.modelSetAuxiliaryInfo = info;
				this.modelSet.modelSetProperties = this.modelSet.getModelSetAuxiliaryInfoValue ("properties");
				this.isPDB = this.modelSet.isPDB = this.modelSet.getModelSetAuxiliaryInfoBoolean ("isPDB");
				if (this.isPDB) {
				    try {
					var shapeClass = Class.forName ("org.jmol.modelsetbio.Resolver");
					this.jbr = shapeClass.newInstance ();
					this.jbr.initialize (this.modelSet);
				    } catch (e) {
					if (Clazz.exceptionOf (e, Exception)) {
					    org.jmol.util.Logger.error ("developer error: org.jmol.modelsetbio.Resolver could not be found");
					} else {
					    throw e;
					}
				    }
				}this.jmolData = this.modelSet.getModelSetAuxiliaryInfoValue ("jmolData");
				this.fileHeader = this.modelSet.getModelSetAuxiliaryInfoValue ("fileHeader");
				this.modelSet.trajectorySteps = this.modelSet.getModelSetAuxiliaryInfoValue ("trajectorySteps");
				this.isTrajectory = (this.modelSet.trajectorySteps != null);
				if (this.isTrajectory) {
				    info.remove ("trajectorySteps");
				    this.modelSet.vibrationSteps = info.get ("vibrationSteps");
				    info.remove ("vibrationSteps");
				}this.doAddHydrogens = (this.jbr != null && !this.isTrajectory && this.modelSet.getModelSetAuxiliaryInfoValue ("pdbNoHydrogens") == null && this.viewer.getBooleanProperty ("pdbAddHydrogens"));
				if (info != null) info.remove ("pdbNoHydrogens");
				this.noAutoBond = this.modelSet.getModelSetAuxiliaryInfoBoolean ("noAutoBond");
				this.is2D = this.modelSet.getModelSetAuxiliaryInfoBoolean ("is2D");
				this.doMinimize = this.is2D && this.modelSet.getModelSetAuxiliaryInfoBoolean ("doMinimize");
				this.adapterTrajectoryCount = (this.modelSet.trajectorySteps == null ? 0 : this.modelSet.trajectorySteps.size ());
				this.modelSet.someModelsHaveSymmetry = this.modelSet.getModelSetAuxiliaryInfoBoolean ("someModelsHaveSymmetry");
				this.someModelsHaveUnitcells = this.modelSet.getModelSetAuxiliaryInfoBoolean ("someModelsHaveUnitcells");
				this.modelSet.someModelsHaveFractionalCoordinates = this.modelSet.getModelSetAuxiliaryInfoBoolean ("someModelsHaveFractionalCoordinates");
				if (this.merging) {
				    this.modelSet.isPDB = new Boolean (this.modelSet.isPDB | this.mergeModelSet.isPDB).valueOf ();
				    this.modelSet.someModelsHaveSymmetry = new Boolean (this.modelSet.someModelsHaveSymmetry | this.mergeModelSet.getModelSetAuxiliaryInfoBoolean ("someModelsHaveSymmetry")).valueOf ();
				    this.someModelsHaveUnitcells = new Boolean (this.someModelsHaveUnitcells | this.mergeModelSet.getModelSetAuxiliaryInfoBoolean ("someModelsHaveUnitcells")).valueOf ();
				    this.modelSet.someModelsHaveFractionalCoordinates = new Boolean (this.modelSet.someModelsHaveFractionalCoordinates | this.mergeModelSet.getModelSetAuxiliaryInfoBoolean ("someModelsHaveFractionalCoordinates")).valueOf ();
				    this.modelSet.someModelsHaveAromaticBonds = new Boolean (this.modelSet.someModelsHaveAromaticBonds | this.mergeModelSet.someModelsHaveAromaticBonds).valueOf ();
				    this.modelSet.modelSetAuxiliaryInfo.put ("someModelsHaveSymmetry", Boolean.$valueOf (this.modelSet.someModelsHaveSymmetry));
				    this.modelSet.modelSetAuxiliaryInfo.put ("someModelsHaveUnitcells", Boolean.$valueOf (this.someModelsHaveUnitcells));
				    this.modelSet.modelSetAuxiliaryInfo.put ("someModelsHaveFractionalCoordinates", Boolean.$valueOf (this.modelSet.someModelsHaveFractionalCoordinates));
				    this.modelSet.modelSetAuxiliaryInfo.put ("someModelsHaveAromaticBonds", Boolean.$valueOf (this.modelSet.someModelsHaveAromaticBonds));
				}}, $fz.isPrivate = true, $fz), "~S,java.util.Map");
	Clazz.defineMethod (c$, "getGroup3", 
			    function (iGroup) {
				return (iGroup >= this.group3Of.length ? null : this.group3Of[iGroup]);
			    }, "~N");
	Clazz.defineMethod (c$, "getFirstAtomIndex", 
			    function (iGroup) {
				return this.firstAtomIndexes[iGroup];
			    }, "~N");
	Clazz.defineMethod (c$, "getModelSet", 
			    function () {
				return this.modelSet;
			    });
	Clazz.defineMethod (c$, "getAtomCount", 
			    function () {
				return this.modelSet.atomCount;
			    });
	Clazz.defineMethod (c$, "createModelSet", 
			    ($fz = function (adapter, atomSetCollection, bsNew) {
				var nAtoms = (adapter == null ? 0 : adapter.getAtomCount (atomSetCollection));
				if (nAtoms > 0) org.jmol.util.Logger.info ("reading " + nAtoms + " atoms");
				this.adapterModelCount = (adapter == null ? 1 : adapter.getAtomSetCount (atomSetCollection));
				this.appendNew = (!this.merging || adapter == null || this.adapterModelCount > 1 || this.isTrajectory || this.viewer.getAppendNew ());
				this.htAtomMap.clear ();
				this.chainOf =  new Array (32);
				this.group3Of =  new Array (32);
				this.seqcodes =  Clazz.newIntArray (32, 0);
				this.firstAtomIndexes =  Clazz.newIntArray (32, 0);
				this.currentChainID = '\uFFFF';
				this.currentChain = null;
				this.currentGroupInsertionCode = '\uFFFF';
				this.currentGroup3 = "xxxxx";
				this.currentModelIndex = -1;
				this.currentModel = null;
				if (this.merging) {
				    this.baseModelCount = this.mergeModelSet.modelCount;
				    this.baseTrajectoryCount = this.mergeModelSet.getMergeTrajectoryCount (this.isTrajectory);
				    if (this.baseTrajectoryCount > 0) {
					if (this.isTrajectory) {
					    if (this.mergeModelSet.vibrationSteps == null) {
						this.mergeModelSet.vibrationSteps =  new java.util.ArrayList ();
						for (var i = this.mergeModelSet.trajectorySteps.size (); --i >= 0; ) this.mergeModelSet.vibrationSteps.add (null);

					    }for (var i = 0; i < this.modelSet.trajectorySteps.size (); i++) {
						this.mergeModelSet.trajectorySteps.add (this.modelSet.trajectorySteps.get (i));
						this.mergeModelSet.vibrationSteps.add (this.modelSet.vibrationSteps == null ? null : this.modelSet.vibrationSteps.get (i));
					    }
					}this.modelSet.trajectorySteps = this.mergeModelSet.trajectorySteps;
					this.modelSet.vibrationSteps = this.mergeModelSet.vibrationSteps;
				    }}this.initializeAtomBondModelCounts (nAtoms);
				if (bsNew != null && (this.doMinimize || this.is2D)) {
				    bsNew.setBits (this.baseAtomIndex, this.baseAtomIndex + nAtoms);
				}if (adapter == null) {
				    this.setModelNameNumberProperties (0, -1, "", 1, null, null, null);
				} else {
				    if (this.adapterModelCount > 0) {
					org.jmol.util.Logger.info ("ModelSet: haveSymmetry:" + this.modelSet.someModelsHaveSymmetry + " haveUnitcells:" + this.someModelsHaveUnitcells + " haveFractionalCoord:" + this.modelSet.someModelsHaveFractionalCoordinates);
					org.jmol.util.Logger.info (this.adapterModelCount + " model" + (this.modelSet.modelCount == 1 ? "" : "s") + " in this collection. Use getProperty \"modelInfo\" or" + " getProperty \"auxiliaryInfo\" to inspect them.");
				    }var q = this.modelSet.getModelSetAuxiliaryInfoValue ("defaultOrientationQuaternion");
				    if (q != null) {
					org.jmol.util.Logger.info ("defaultOrientationQuaternion = " + q);
					org.jmol.util.Logger.info ("Use \"set autoLoadOrientation TRUE\" before loading or \"restore orientation DEFAULT\" after loading to view this orientation.");
				    }this.iterateOverAllNewModels (adapter, atomSetCollection);
				    this.iterateOverAllNewAtoms (adapter, atomSetCollection);
				    this.iterateOverAllNewBonds (adapter, atomSetCollection);
				    if (this.merging && !this.appendNew) {
					var info = adapter.getAtomSetAuxiliaryInfo (atomSetCollection, 0);
					this.modelSet.setModelAuxiliaryInfo (this.baseModelIndex, "initialAtomCount", info.get ("initialAtomCount"));
					this.modelSet.setModelAuxiliaryInfo (this.baseModelIndex, "initialBondCount", info.get ("initialBondCount"));
				    }this.initializeUnitCellAndSymmetry ();
				    this.initializeBonding ();
				}this.finalizeGroupBuild ();
				if (this.is2D) {
				    this.applyStereochemistry ();
				}if (this.doAddHydrogens) this.jbr.finalizeHydrogens ();
				if (adapter != null) {
				    this.modelSet.calculatePolymers (this.groups, this.groupCount, this.baseGroupIndex, null);
				    this.iterateOverAllNewStructures (adapter, atomSetCollection);
				    adapter.finish (atomSetCollection);
				}this.setDefaultRendering (this.viewer.getSmallMoleculeMaxAtoms ());
				var rd = this.viewer.getDefaultRadiusData ();
				var atomCount = this.modelSet.atomCount;
				var atoms = this.modelSet.atoms;
				for (var i = this.baseAtomIndex; i < atomCount; i++) atoms[i].setMadAtom (this.viewer, rd);

				var models = this.modelSet.models;
				for (var i = models[this.baseModelIndex].firstAtomIndex; i < atomCount; i++) models[atoms[i].modelIndex].bsAtoms.set (i);

				this.setAtomProperties ();
				this.freeze ();
				this.finalizeShapes ();
				if (this.mergeModelSet != null) {
				    this.mergeModelSet.releaseModelSet ();
				}this.mergeModelSet = null;
			    }, $fz.isPrivate = true, $fz), "org.jmol.api.JmolAdapter,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setDefaultRendering", 
			    ($fz = function (maxAtoms) {
				var sb =  new org.jmol.util.StringXBuilder ();
				var modelCount = this.modelSet.modelCount;
				var models = this.modelSet.models;
				for (var i = this.baseModelIndex; i < modelCount; i++) if (models[i].isBioModel) models[i].getDefaultLargePDBRendering (sb, maxAtoms);

				if (sb.length () == 0) return;
				sb.append ("select *;");
				var script = this.modelSet.getModelSetAuxiliaryInfoValue ("jmolscript");
				if (script == null) script = "";
				sb.append (script);
				this.modelSet.modelSetAuxiliaryInfo.put ("jmolscript", sb.toString ());
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setAtomProperties", 
			    ($fz = function () {
				var atomIndex = this.baseAtomIndex;
				var modelAtomCount = 0;
				var modelCount = this.modelSet.modelCount;
				var models = this.modelSet.models;
				for (var i = this.baseModelIndex; i < modelCount; atomIndex += modelAtomCount, i++) {
				    modelAtomCount = models[i].bsAtoms.cardinality ();
				    var atomProperties = this.modelSet.getModelAuxiliaryInfoValue (i, "atomProperties");
				    if (atomProperties == null) continue;
				    for (var entry, $entry = atomProperties.entrySet ().iterator (); $entry.hasNext () && ((entry = $entry.next ()) || true);) {
					var key = entry.getKey ();
					var value = entry.getValue ();
					var bs = this.modelSet.getModelAtomBitSetIncludingDeleted (i, true);
					if (this.doAddHydrogens) value = this.jbr.fixPropertyValue (bs, value);
					key = "property_" + key.toLowerCase ();
					org.jmol.util.Logger.info ("creating " + key + " for model " + this.modelSet.getModelName (i));
					this.viewer.setData (key, [key, value, bs,  new Integer (0)], this.modelSet.atomCount, 0, 0, 2147483647, 0);
				    }
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "initializeAtomBondModelCounts", 
			    ($fz = function (nAtoms) {
				var trajectoryCount = this.adapterTrajectoryCount;
				if (this.merging) {
				    if (this.appendNew) {
					this.baseModelIndex = this.baseModelCount;
					this.modelSet.modelCount = this.baseModelCount + this.adapterModelCount;
				    } else {
					this.baseModelIndex = this.viewer.getCurrentModelIndex ();
					if (this.baseModelIndex < 0) this.baseModelIndex = this.baseModelCount - 1;
					this.modelSet.modelCount = this.baseModelCount;
				    }this.modelSet.atomCount = this.baseAtomIndex = this.mergeModelSet.atomCount;
				    this.modelSet.bondCount = this.mergeModelSet.bondCount;
				    this.$mergeGroups = this.mergeModelSet.getGroups ();
				    this.groupCount = this.baseGroupIndex = this.$mergeGroups.length;
				    this.modelSet.mergeModelArrays (this.mergeModelSet);
				    this.modelSet.growAtomArrays (this.modelSet.atomCount + nAtoms);
				} else {
				    this.modelSet.modelCount = this.adapterModelCount;
				    this.modelSet.atomCount = 0;
				    this.modelSet.bondCount = 0;
				    this.modelSet.atoms =  new Array (nAtoms);
				    this.modelSet.bonds =  new Array (250 + nAtoms);
				}if (this.doAddHydrogens) this.jbr.initializeHydrogenAddition (this, this.modelSet.bondCount);
				if (trajectoryCount > 1) this.modelSet.modelCount += trajectoryCount - 1;
				this.modelSet.models = org.jmol.util.ArrayUtil.arrayCopyObject (this.modelSet.models, this.modelSet.modelCount);
				this.modelSet.modelFileNumbers = org.jmol.util.ArrayUtil.arrayCopyI (this.modelSet.modelFileNumbers, this.modelSet.modelCount);
				this.modelSet.modelNumbers = org.jmol.util.ArrayUtil.arrayCopyI (this.modelSet.modelNumbers, this.modelSet.modelCount);
				this.modelSet.modelNumbersForAtomLabel = org.jmol.util.ArrayUtil.arrayCopyS (this.modelSet.modelNumbersForAtomLabel, this.modelSet.modelCount);
				this.modelSet.modelNames = org.jmol.util.ArrayUtil.arrayCopyS (this.modelSet.modelNames, this.modelSet.modelCount);
				this.modelSet.frameTitles = org.jmol.util.ArrayUtil.arrayCopyS (this.modelSet.frameTitles, this.modelSet.modelCount);
				if (this.merging) for (var i = 0; i < this.mergeModelSet.modelCount; i++) (this.modelSet.models[i] = this.mergeModelSet.models[i]).modelSet = this.modelSet;

			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "mergeGroups", 
			    ($fz = function () {
				var info = this.mergeModelSet.getAuxiliaryInfo (null);
				var mergeGroup3Lists = info.get ("group3Lists");
				var mergeGroup3Counts = info.get ("group3Counts");
				if (mergeGroup3Lists != null) {
				    for (var i = 0; i < this.baseModelCount; i++) {
					this.group3Lists[i + 1] = mergeGroup3Lists[i + 1];
					this.group3Counts[i + 1] = mergeGroup3Counts[i + 1];
					this.structuresDefinedInFile.set (i);
				    }
				    this.group3Lists[0] = mergeGroup3Lists[0];
				    this.group3Counts[0] = mergeGroup3Counts[0];
				}if (!this.appendNew && this.isPDB) this.structuresDefinedInFile.clear (this.baseModelIndex);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "iterateOverAllNewModels", 
			    ($fz = function (adapter, atomSetCollection) {
				this.group3Lists =  new Array (this.modelSet.modelCount + 1);
				this.group3Counts = org.jmol.util.ArrayUtil.newInt2 (this.modelSet.modelCount + 1);
				this.structuresDefinedInFile =  new org.jmol.util.BitSet ();
				if (this.merging) this.mergeGroups ();
				var iTrajectory = (this.isTrajectory ? this.baseTrajectoryCount : -1);
				var ipt = this.baseModelIndex;
				for (var i = 0; i < this.adapterModelCount; ++i, ++ipt) {
				    var modelNumber = adapter.getAtomSetNumber (atomSetCollection, i);
				    var modelName = adapter.getAtomSetName (atomSetCollection, i);
				    var modelAuxiliaryInfo = adapter.getAtomSetAuxiliaryInfo (atomSetCollection, i);
				    if (modelAuxiliaryInfo.containsKey ("modelID")) modelAuxiliaryInfo.put ("modelID0", modelAuxiliaryInfo.get ("modelID"));
				    var modelProperties = modelAuxiliaryInfo.get ("modelProperties");
				    this.viewer.setStringProperty ("_fileType", modelAuxiliaryInfo.get ("fileType"));
				    if (modelName == null) modelName = (this.jmolData != null && this.jmolData.indexOf (";") > 2 ? this.jmolData.substring (this.jmolData.indexOf (":") + 2, this.jmolData.indexOf (";")) : this.appendNew ? "" + (modelNumber % 1000000) : "");
				    var isPDBModel = this.setModelNameNumberProperties (ipt, iTrajectory, modelName, modelNumber, modelProperties, modelAuxiliaryInfo, this.jmolData);
				    if (isPDBModel) {
					this.group3Lists[ipt + 1] = org.jmol.viewer.JmolConstants.getGroup3List ();
					this.group3Counts[ipt + 1] =  Clazz.newIntArray (org.jmol.viewer.JmolConstants.getGroup3Count () + 10, 0);
					if (this.group3Lists[0] == null) {
					    this.group3Lists[0] = org.jmol.viewer.JmolConstants.getGroup3List ();
					    this.group3Counts[0] =  Clazz.newIntArray (org.jmol.viewer.JmolConstants.getGroup3Count () + 10, 0);
					}}if (this.modelSet.getModelAuxiliaryInfoValue (ipt, "periodicOriginXyz") != null) this.modelSet.someModelsHaveSymmetry = true;
				}
				var m = this.modelSet.models[this.baseModelIndex];
				this.viewer.setSmilesString (this.modelSet.modelSetAuxiliaryInfo.get ("smilesString"));
				var loadState = this.modelSet.modelSetAuxiliaryInfo.remove ("loadState");
				var loadScript = this.modelSet.modelSetAuxiliaryInfo.remove ("loadScript");
				if (loadScript.indexOf ("Viewer.AddHydrogens") < 0 || !m.isModelKit) {
				    var lines = org.jmol.util.TextFormat.split (loadState, '\n');
				    var sb =  new org.jmol.util.StringXBuilder ();
				    for (var i = 0; i < lines.length; i++) {
					var pt = m.loadState.indexOf (lines[i]);
					if (pt < 0 || pt != m.loadState.lastIndexOf (lines[i])) sb.append (lines[i]).appendC ('\n');
				    }
				    m.loadState += m.loadScript.toString () + sb.toString ();
				    m.loadScript =  new org.jmol.util.StringXBuilder ();
				    m.loadScript.append ("  ").appendSB (loadScript).append (";\n");
				}if (this.isTrajectory) {
				    var n = (this.modelSet.modelCount - ipt + 1);
				    org.jmol.util.Logger.info (n + " trajectory steps read");
				    this.modelSet.setModelAuxiliaryInfo (this.baseModelCount, "trajectoryStepCount", Integer.$valueOf (n));
				    for (var ia = this.adapterModelCount, i = ipt; i < this.modelSet.modelCount; i++, ia++) {
					this.modelSet.models[i] = this.modelSet.models[this.baseModelCount];
					this.modelSet.modelNumbers[i] = adapter.getAtomSetNumber (atomSetCollection, ia);
					this.modelSet.modelNames[i] = adapter.getAtomSetName (atomSetCollection, ia);
					this.structuresDefinedInFile.set (i);
				    }
				}this.finalizeModels (this.baseModelCount);
			    }, $fz.isPrivate = true, $fz), "org.jmol.api.JmolAdapter,~O");
	Clazz.defineMethod (c$, "setModelNameNumberProperties", 
			    ($fz = function (modelIndex, trajectoryBaseIndex, modelName, modelNumber, modelProperties, modelAuxiliaryInfo, jmolData) {
				var modelIsPDB = (modelAuxiliaryInfo != null && Boolean.TRUE === modelAuxiliaryInfo.get ("isPDB"));
				if (this.appendNew) {
				    this.modelSet.models[modelIndex] = (modelIsPDB ? this.jbr.getBioModel (this.modelSet, modelIndex, trajectoryBaseIndex, jmolData, modelProperties, modelAuxiliaryInfo) :  new org.jmol.modelset.Model (this.modelSet, modelIndex, trajectoryBaseIndex, jmolData, modelProperties, modelAuxiliaryInfo));
				    this.modelSet.modelNumbers[modelIndex] = modelNumber;
				    this.modelSet.modelNames[modelIndex] = modelName;
				} else {
				    var atomInfo = modelAuxiliaryInfo.get ("PDB_CONECT_firstAtom_count_max");
				    if (atomInfo != null) this.modelSet.setModelAuxiliaryInfo (modelIndex, "PDB_CONECT_firstAtom_count_max", atomInfo);
				}var models = this.modelSet.models;
				var atoms = this.modelSet.atoms;
				models[modelIndex].bsAtoms.set (atoms.length + 1);
				models[modelIndex].bsAtoms.clear (atoms.length + 1);
				var codes = this.modelSet.getModelAuxiliaryInfoValue (modelIndex, "altLocs");
				models[modelIndex].setNAltLocs (codes == null ? 0 : codes.length);
				if (codes != null) {
				    var altlocs = codes.toCharArray ();
				    java.util.Arrays.sort (altlocs);
				    codes = String.valueOf (altlocs);
				    this.modelSet.setModelAuxiliaryInfo (modelIndex, "altLocs", codes);
				}codes = this.modelSet.getModelAuxiliaryInfoValue (modelIndex, "insertionCodes");
				models[modelIndex].setNInsertions (codes == null ? 0 : codes.length);
				var isModelKit = (this.modelSet.modelSetName != null && this.modelSet.modelSetName.startsWith ("Jmol Model Kit") || modelName.startsWith ("Jmol Model Kit") || "Jme".equals (this.modelSet.getModelAuxiliaryInfoValue (modelIndex, "fileType")));
				models[modelIndex].isModelKit = isModelKit;
				return modelIsPDB;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~S,~N,java.util.Properties,java.util.Map,~S");
	Clazz.defineMethod (c$, "finalizeModels", 
			    ($fz = function (baseModelCount) {
				var modelCount = this.modelSet.modelCount;
				if (modelCount == baseModelCount) return;
				var sNum;
				var modelnumber = 0;
				var lastfilenumber = -1;
				var modelNumbers = this.modelSet.modelNumbers;
				var modelNames = this.modelSet.modelNames;
				if (this.isTrajectory) for (var i = baseModelCount; ++i < this.modelSet.modelCount; ) modelNumbers[i] = modelNumbers[i - 1] + 1;

				if (baseModelCount > 0) {
				    if (modelNumbers[0] < 1000000) {
					for (var i = 0; i < baseModelCount; i++) {
					    if (modelNames[i].length == 0) modelNames[i] = "" + modelNumbers[i];
					    modelNumbers[i] += 1000000;
					    this.modelSet.modelNumbersForAtomLabel[i] = "1." + (i + 1);
					}
				    }var filenumber = modelNumbers[baseModelCount - 1];
				    filenumber -= filenumber % 1000000;
				    if (modelNumbers[baseModelCount] < 1000000) filenumber += 1000000;
				    for (var i = baseModelCount; i < modelCount; i++) modelNumbers[i] += filenumber;

				}var models = this.modelSet.models;
				for (var i = baseModelCount; i < modelCount; ++i) {
				    if (this.fileHeader != null) this.modelSet.setModelAuxiliaryInfo (i, "fileHeader", this.fileHeader);
				    var filenumber = Clazz.doubleToInt (modelNumbers[i] / 1000000);
				    if (filenumber != lastfilenumber) {
					modelnumber = 0;
					lastfilenumber = filenumber;
				    }modelnumber++;
				    if (filenumber == 0) {
					sNum = "" + this.modelSet.getModelNumber (i);
					filenumber = 1;
				    } else {
					sNum = filenumber + "." + modelnumber;
				    }this.modelSet.modelNumbersForAtomLabel[i] = sNum;
				    models[i].fileIndex = filenumber - 1;
				    this.modelSet.modelFileNumbers[i] = filenumber * 1000000 + modelnumber;
				    if (modelNames[i] == null || modelNames[i].length == 0) modelNames[i] = sNum;
				}
				if (this.merging) for (var i = 0; i < baseModelCount; i++) models[i].modelSet = this.modelSet;

				for (var i = 0; i < modelCount; i++) {
				    this.modelSet.setModelAuxiliaryInfo (i, "modelName", modelNames[i]);
				    this.modelSet.setModelAuxiliaryInfo (i, "modelNumber", Integer.$valueOf (modelNumbers[i] % 1000000));
				    this.modelSet.setModelAuxiliaryInfo (i, "modelFileNumber", Integer.$valueOf (this.modelSet.modelFileNumbers[i]));
				    this.modelSet.setModelAuxiliaryInfo (i, "modelNumberDotted", this.modelSet.getModelNumberDotted (i));
				    var codes = this.modelSet.getModelAuxiliaryInfoValue (i, "altLocs");
				    if (codes != null) {
					org.jmol.util.Logger.info ("model " + this.modelSet.getModelNumberDotted (i) + " alternative locations: " + codes);
				    }}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "iterateOverAllNewAtoms", 
			    ($fz = function (adapter, atomSetCollection) {
				var iLast = -1;
				var isPdbThisModel = false;
				var addH = false;
				var iterAtom = adapter.getAtomIterator (atomSetCollection);
				var nRead = 0;
				var models = this.modelSet.models;
				if (this.modelSet.modelCount > 0) this.nullGroup =  new org.jmol.modelset.Group ( new org.jmol.modelset.Chain (this.modelSet.models[this.baseModelIndex], ' '), "", 0, -1, -1);
				while (iterAtom.hasNext ()) {
				    nRead++;
				    var modelIndex = iterAtom.getAtomSetIndex () + this.baseModelIndex;
				    if (modelIndex != iLast) {
					this.currentModelIndex = modelIndex;
					this.currentModel = models[modelIndex];
					this.currentChainID = '\uFFFF';
					models[modelIndex].bsAtoms.clearAll ();
					isPdbThisModel = models[modelIndex].isBioModel;
					iLast = modelIndex;
					addH = isPdbThisModel && this.doAddHydrogens;
					if (this.jbr != null) this.jbr.setHaveHsAlready (false);
				    }var group3 = iterAtom.getGroup3 ();
				    this.checkNewGroup (adapter, iterAtom.getChainID (), group3, iterAtom.getSequenceNumber (), iterAtom.getInsertionCode (), addH);
				    var isotope = iterAtom.getElementNumber ();
				    if (addH && org.jmol.util.Elements.getElementNumber (isotope) == 1) this.jbr.setHaveHsAlready (true);
				    var name = iterAtom.getAtomName ();
				    var charge = (addH ? this.getPdbCharge (group3, name) : iterAtom.getFormalCharge ());
				    this.addAtom (isPdbThisModel, iterAtom.getAtomSymmetry (), iterAtom.getAtomSite (), iterAtom.getUniqueID (), isotope, name, charge, iterAtom.getPartialCharge (), iterAtom.getEllipsoid (), iterAtom.getOccupancy (), iterAtom.getBfactor (), iterAtom.getX (), iterAtom.getY (), iterAtom.getZ (), iterAtom.getIsHetero (), iterAtom.getAtomSerial (), group3, iterAtom.getVectorX (), iterAtom.getVectorY (), iterAtom.getVectorZ (), iterAtom.getAlternateLocationID (), iterAtom.getRadius ());
				}
				if (this.groupCount > 0 && addH) this.jbr.addImplicitHydrogenAtoms (adapter, this.groupCount - 1);
				iLast = -1;
				var vdwtypeLast = null;
				var atoms = this.modelSet.atoms;
				for (var i = 0; i < this.modelSet.atomCount; i++) {
				    if (atoms[i].modelIndex != iLast) {
					iLast = atoms[i].modelIndex;
					models[iLast].firstAtomIndex = i;
					var vdwtype = this.modelSet.getDefaultVdwType (iLast);
					if (vdwtype !== vdwtypeLast) {
					    org.jmol.util.Logger.info ("Default Van der Waals type for model" + " set to " + vdwtype.getVdwLabel ());
					    vdwtypeLast = vdwtype;
					}}}
				org.jmol.util.Logger.info (nRead + " atoms created");
			    }, $fz.isPrivate = true, $fz), "org.jmol.api.JmolAdapter,~O");
	Clazz.defineMethod (c$, "getPdbCharge", 
			    ($fz = function (group3, name) {
				if (group3.equals ("ARG") && name.equals ("NH1") || group3.equals ("LYS") && name.equals ("NZ") || group3.equals ("HIS") && name.equals ("ND1")) return 1;
				return 0;
			    }, $fz.isPrivate = true, $fz), "~S,~S");
	Clazz.defineMethod (c$, "addAtom", 
			    ($fz = function (isPDB, atomSymmetry, atomSite, atomUid, atomicAndIsotopeNumber, atomName, formalCharge, partialCharge, ellipsoid, occupancy, bfactor, x, y, z, isHetero, atomSerial, group3, vectorX, vectorY, vectorZ, alternateLocationID, radius) {
				var specialAtomID = 0;
				if (atomName != null) {
				    if (isPDB && atomName.indexOf ('*') >= 0) atomName = atomName.$replace ('*', '\'');
				    specialAtomID = org.jmol.viewer.JmolConstants.lookupSpecialAtomID (atomName);
				    if (isPDB && specialAtomID == 2 && "CA".equalsIgnoreCase (group3)) specialAtomID = 0;
				}var atom = this.modelSet.addAtom (this.currentModelIndex, this.nullGroup, atomicAndIsotopeNumber, atomName, atomSerial, atomSite, x, y, z, radius, vectorX, vectorY, vectorZ, formalCharge, partialCharge, occupancy, bfactor, ellipsoid, isHetero, specialAtomID, atomSymmetry);
				atom.setAltLoc (alternateLocationID);
				this.htAtomMap.put (atomUid, atom);
			    }, $fz.isPrivate = true, $fz), "~B,org.jmol.util.BitSet,~N,~O,~N,~S,~N,~N,~A,~N,~N,~N,~N,~N,~B,~N,~S,~N,~N,~N,~S,~N");
	Clazz.defineMethod (c$, "checkNewGroup", 
			    ($fz = function (adapter, chainID, group3, groupSequenceNumber, groupInsertionCode, addH) {
				var group3i = (group3 == null ? null : group3.intern ());
				if (chainID != this.currentChainID) {
				    this.currentChainID = chainID;
				    this.currentChain = this.getOrAllocateChain (this.currentModel, chainID);
				    this.currentGroupInsertionCode = '\uFFFF';
				    this.currentGroupSequenceNumber = -1;
				    this.currentGroup3 = "xxxx";
				}if (groupSequenceNumber != this.currentGroupSequenceNumber || groupInsertionCode != this.currentGroupInsertionCode || group3i !== this.currentGroup3) {
				    if (this.groupCount > 0 && addH) {
					this.jbr.addImplicitHydrogenAtoms (adapter, this.groupCount - 1);
					this.jbr.setHaveHsAlready (false);
				    }this.currentGroupSequenceNumber = groupSequenceNumber;
				    this.currentGroupInsertionCode = groupInsertionCode;
				    this.currentGroup3 = group3i;
				    while (this.groupCount >= this.group3Of.length) {
					this.chainOf = org.jmol.util.ArrayUtil.doubleLength (this.chainOf);
					this.group3Of = org.jmol.util.ArrayUtil.doubleLengthS (this.group3Of);
					this.seqcodes = org.jmol.util.ArrayUtil.doubleLengthI (this.seqcodes);
					this.firstAtomIndexes = org.jmol.util.ArrayUtil.doubleLengthI (this.firstAtomIndexes);
				    }
				    this.firstAtomIndexes[this.groupCount] = this.modelSet.atomCount;
				    this.chainOf[this.groupCount] = this.currentChain;
				    this.group3Of[this.groupCount] = group3;
				    this.seqcodes[this.groupCount] = org.jmol.modelset.Group.getSeqcode (groupSequenceNumber, groupInsertionCode);
				    ++this.groupCount;
				}}, $fz.isPrivate = true, $fz), "org.jmol.api.JmolAdapter,~S,~S,~N,~S,~B");
	Clazz.defineMethod (c$, "getOrAllocateChain", 
			    ($fz = function (model, chainID) {
				var chain = model.getChain (chainID);
				if (chain != null) return chain;
				if (model.chainCount == model.chains.length) model.chains = org.jmol.util.ArrayUtil.doubleLength (model.chains);
				return model.chains[model.chainCount++] =  new org.jmol.modelset.Chain (model, chainID);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Model,~S");
	Clazz.defineMethod (c$, "iterateOverAllNewBonds", 
			    ($fz = function (adapter, atomSetCollection) {
				var iterBond = adapter.getBondIterator (atomSetCollection);
				if (iterBond == null) return;
				var mad = this.viewer.getMadBond ();
				var order;
				this.modelSet.defaultCovalentMad = (this.jmolData == null ? mad : 0);
				var haveMultipleBonds = false;
				while (iterBond.hasNext ()) {
				    order = iterBond.getEncodedOrder ();
				    this.bondAtoms (iterBond.getAtomUniqueID1 (), iterBond.getAtomUniqueID2 (), order);
				    if (order > 1 && order != 1025 && order != 1041) haveMultipleBonds = true;
				}
				if (haveMultipleBonds && this.modelSet.someModelsHaveSymmetry && !this.viewer.getApplySymmetryToBonds ()) org.jmol.util.Logger.info ("ModelSet: use \"set appletSymmetryToBonds TRUE \" to apply the file-based multiple bonds to symmetry-generated atoms.");
				this.modelSet.defaultCovalentMad = mad;
			    }, $fz.isPrivate = true, $fz), "org.jmol.api.JmolAdapter,~O");
	Clazz.defineMethod (c$, "bondAtoms", 
			    ($fz = function (atomUid1, atomUid2, order) {
				var atom1 = this.htAtomMap.get (atomUid1);
				if (atom1 == null) {
				    org.jmol.util.Logger.error ("bondAtoms cannot find atomUid1?:" + atomUid1);
				    return;
				}var atom2 = this.htAtomMap.get (atomUid2);
				if (atom2 == null) {
				    org.jmol.util.Logger.error ("bondAtoms cannot find atomUid2?:" + atomUid2);
				    return;
				}if (atom1.isBonded (atom2)) return;
				var isNear = (order == 1025);
				var isFar = (order == 1041);
				var bond;
				if (isNear || isFar) {
				    bond = this.modelSet.bondMutually (atom1, atom2, (this.is2D ? order : 1), this.modelSet.getDefaultMadFromOrder (1), 0);
				    if (this.vStereo == null) {
					this.vStereo =  new java.util.ArrayList ();
				    }this.vStereo.add (bond);
				} else {
				    bond = this.modelSet.bondMutually (atom1, atom2, order, this.modelSet.getDefaultMadFromOrder (order), 0);
				    if (bond.isAromatic ()) {
					this.modelSet.someModelsHaveAromaticBonds = true;
				    }}if (this.modelSet.bondCount == this.modelSet.bonds.length) {
					this.modelSet.bonds = org.jmol.util.ArrayUtil.arrayCopyObject (this.modelSet.bonds, this.modelSet.bondCount + 250);
				    }this.modelSet.setBond (this.modelSet.bondCount++, bond);
			    }, $fz.isPrivate = true, $fz), "~O,~O,~N");
	Clazz.defineMethod (c$, "iterateOverAllNewStructures", 
			    ($fz = function (adapter, atomSetCollection) {
				var iterStructure = adapter.getStructureIterator (atomSetCollection);
				if (iterStructure != null) while (iterStructure.hasNext ()) {
				    if (iterStructure.getStructureType () !== org.jmol.constant.EnumStructure.TURN) {
					this.defineStructure (iterStructure.getModelIndex (), iterStructure.getSubstructureType (), iterStructure.getStructureID (), iterStructure.getSerialID (), iterStructure.getStrandCount (), iterStructure.getStartChainID (), iterStructure.getStartSequenceNumber (), iterStructure.getStartInsertionCode (), iterStructure.getEndChainID (), iterStructure.getEndSequenceNumber (), iterStructure.getEndInsertionCode ());
				    }}
				iterStructure = adapter.getStructureIterator (atomSetCollection);
				if (iterStructure != null) while (iterStructure.hasNext ()) {
				    if (iterStructure.getStructureType () === org.jmol.constant.EnumStructure.TURN) this.defineStructure (iterStructure.getModelIndex (), iterStructure.getSubstructureType (), iterStructure.getStructureID (), 1, 1, iterStructure.getStartChainID (), iterStructure.getStartSequenceNumber (), iterStructure.getStartInsertionCode (), iterStructure.getEndChainID (), iterStructure.getEndSequenceNumber (), iterStructure.getEndInsertionCode ());
				}
			    }, $fz.isPrivate = true, $fz), "org.jmol.api.JmolAdapter,~O");
	Clazz.defineMethod (c$, "defineStructure", 
			    ($fz = function (modelIndex, subType, structureID, serialID, strandCount, startChainID, startSequenceNumber, startInsertionCode, endChainID, endSequenceNumber, endInsertionCode) {
				var type = (subType === org.jmol.constant.EnumStructure.NOT ? org.jmol.constant.EnumStructure.NONE : subType);
				var startSeqCode = org.jmol.modelset.Group.getSeqcode (startSequenceNumber, startInsertionCode);
				var endSeqCode = org.jmol.modelset.Group.getSeqcode (endSequenceNumber, endInsertionCode);
				var models = this.modelSet.models;
				if (modelIndex >= 0 || this.isTrajectory) {
				    if (this.isTrajectory) modelIndex = 0;
				    modelIndex += this.baseModelIndex;
				    this.structuresDefinedInFile.set (modelIndex);
				    models[modelIndex].addSecondaryStructure (type, structureID, serialID, strandCount, startChainID, startSeqCode, endChainID, endSeqCode);
				    return;
				}for (var i = this.baseModelIndex; i < this.modelSet.modelCount; i++) {
				    this.structuresDefinedInFile.set (i);
				    models[i].addSecondaryStructure (type, structureID, serialID, strandCount, startChainID, startSeqCode, endChainID, endSeqCode);
				}
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.constant.EnumStructure,~S,~N,~N,~S,~N,~S,~S,~N,~S");
	Clazz.defineMethod (c$, "initializeUnitCellAndSymmetry", 
			    ($fz = function () {
				if (this.someModelsHaveUnitcells) {
				    this.modelSet.unitCells =  new Array (this.modelSet.modelCount);
				    var haveMergeCells = (this.mergeModelSet != null && this.mergeModelSet.unitCells != null);
				    for (var i = 0; i < this.modelSet.modelCount; i++) {
					if (haveMergeCells && i < this.baseModelCount) {
					    this.modelSet.unitCells[i] = this.mergeModelSet.unitCells[i];
					} else {
					    this.modelSet.unitCells[i] = org.jmol.api.Interface.getOptionInterface ("symmetry.Symmetry");
					    this.modelSet.unitCells[i].setSymmetryInfo (i, this.modelSet.getModelAuxiliaryInfo (i));
					}}
				}if (this.appendNew && this.modelSet.someModelsHaveSymmetry) {
				    this.modelSet.getAtomBits (1089470478, null);
				    var atoms = this.modelSet.atoms;
				    for (var iAtom = this.baseAtomIndex, iModel = -1, i0 = 0; iAtom < this.modelSet.atomCount; iAtom++) {
					if (atoms[iAtom].modelIndex != iModel) {
					    iModel = atoms[iAtom].modelIndex;
					    i0 = this.baseAtomIndex + this.modelSet.getModelAuxiliaryInfoInt (iModel, "presymmetryAtomIndex") + this.modelSet.getModelAuxiliaryInfoInt (iModel, "presymmetryAtomCount");
					}if (iAtom >= i0) this.modelSet.bsSymmetry.set (iAtom);
				    }
				}if (this.appendNew && this.modelSet.someModelsHaveFractionalCoordinates) {
				    var atoms = this.modelSet.atoms;
				    var modelIndex = -1;
				    var c = null;
				    for (var i = this.baseAtomIndex; i < this.modelSet.atomCount; i++) {
					if (atoms[i].modelIndex != modelIndex) {
					    modelIndex = atoms[i].modelIndex;
					    c = this.modelSet.getUnitCell (modelIndex);
					}if (c != null && c.getCoordinatesAreFractional ()) c.toCartesian (c.toSupercell (atoms[i]), false);
				    }
				    for (var imodel = this.baseModelIndex; imodel < this.modelSet.modelCount; imodel++) {
					if (this.modelSet.isTrajectory (imodel)) {
					    c = this.modelSet.getUnitCell (imodel);
					    if (c != null && c.getCoordinatesAreFractional () && c.isSupercell ()) {
						var list = this.modelSet.trajectorySteps.get (imodel);
						for (var i = list.length; --i >= 0; ) if (list[i] != null) c.toSupercell (list[i]);

					    }}}
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "initializeBonding", 
			    ($fz = function () {
				var bsExclude = (this.modelSet.getModelSetAuxiliaryInfoValue ("someModelsHaveCONECT") == null ? null :  new org.jmol.util.BitSet ());
				if (bsExclude != null) this.modelSet.setPdbConectBonding (this.baseAtomIndex, this.baseModelIndex, bsExclude);
				var atomIndex = this.baseAtomIndex;
				var modelAtomCount = 0;
				var symmetryAlreadyAppliedToBonds = this.viewer.getApplySymmetryToBonds ();
				var doAutoBond = this.viewer.getAutoBond ();
				var forceAutoBond = this.viewer.getForceAutoBond ();
				var bs = null;
				var autoBonding = false;
				var modelCount = this.modelSet.modelCount;
				var models = this.modelSet.models;
				if (!this.noAutoBond) for (var i = this.baseModelIndex; i < modelCount; atomIndex += modelAtomCount, i++) {
				    modelAtomCount = models[i].bsAtoms.cardinality ();
				    var modelBondCount = this.modelSet.getModelAuxiliaryInfoInt (i, "initialBondCount");
				    var modelIsPDB = models[i].isBioModel;
				    if (modelBondCount < 0) {
					modelBondCount = this.modelSet.bondCount;
				    }var modelHasSymmetry = this.modelSet.getModelAuxiliaryInfoBoolean (i, "hasSymmetry");
				    var doBond = (forceAutoBond || doAutoBond && (modelBondCount == 0 || modelIsPDB && this.jmolData == null && modelBondCount < Clazz.doubleToInt (modelAtomCount / 2) || modelHasSymmetry && !symmetryAlreadyAppliedToBonds && !this.modelSet.getModelAuxiliaryInfoBoolean (i, "hasBonds")));
				    if (!doBond) continue;
				    autoBonding = true;
				    if (this.merging || modelCount > 1) {
					if (bs == null) bs = org.jmol.util.BitSetUtil.newBitSet (this.modelSet.atomCount);
					if (i == this.baseModelIndex || !this.isTrajectory) bs.or (models[i].bsAtoms);
				    }}
				if (autoBonding) {
				    this.modelSet.autoBondBs4 (bs, bs, bsExclude, null, this.modelSet.defaultCovalentMad, this.viewer.checkAutoBondLegacy ());
				    org.jmol.util.Logger.info ("ModelSet: autobonding; use  autobond=false  to not generate bonds automatically");
				} else {
				    org.jmol.util.Logger.info ("ModelSet: not autobonding; use  forceAutobond=true  to force automatic bond creation");
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "finalizeGroupBuild", 
			    ($fz = function () {
				this.groups =  new Array (this.groupCount);
				if (this.merging) for (var i = 0; i < this.$mergeGroups.length; i++) {
				    this.groups[i] = this.$mergeGroups[i];
				    this.groups[i].setModelSet (this.modelSet);
				}
				for (var i = this.baseGroupIndex; i < this.groupCount; ++i) this.distinguishAndPropagateGroup (i, this.chainOf[i], this.group3Of[i], this.seqcodes[i], this.firstAtomIndexes[i], (i == this.groupCount - 1 ? this.modelSet.atomCount : this.firstAtomIndexes[i + 1]));

				if (this.group3Lists != null) if (this.modelSet.modelSetAuxiliaryInfo != null) {
				    this.modelSet.modelSetAuxiliaryInfo.put ("group3Lists", this.group3Lists);
				    this.modelSet.modelSetAuxiliaryInfo.put ("group3Counts", this.group3Counts);
				}}, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "distinguishAndPropagateGroup", 
			    ($fz = function (groupIndex, chain, group3, seqcode, firstAtomIndex, maxAtomIndex) {
				var lastAtomIndex = maxAtomIndex - 1;
				if (lastAtomIndex < firstAtomIndex) throw  new NullPointerException ();
				var modelIndex = this.modelSet.atoms[firstAtomIndex].modelIndex;
				var group = null;
				if (group3 != null && this.jbr != null) {
				    group = this.jbr.distinguishAndPropagateGroup (chain, group3, seqcode, firstAtomIndex, maxAtomIndex, modelIndex, this.specialAtomIndexes, this.modelSet.atoms);
				}var key;
				if (group == null) {
				    group =  new org.jmol.modelset.Group (chain, group3, seqcode, firstAtomIndex, lastAtomIndex);
				    key = "o>";
				} else {
				    key = (group.isProtein () ? "p>" : group.isNucleic () ? "n>" : group.isCarbohydrate () ? "c>" : "o>");
				}if (group3 != null) this.countGroup (modelIndex, key, group3);
				this.addGroup (chain, group);
				this.groups[groupIndex] = group;
				group.setGroupIndex (groupIndex);
				for (var i = maxAtomIndex; --i >= firstAtomIndex; ) this.modelSet.atoms[i].setGroup (group);

			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.modelset.Chain,~S,~N,~N,~N");
	Clazz.defineMethod (c$, "addGroup", 
			    ($fz = function (chain, group) {
				if (chain.groupCount == chain.groups.length) chain.groups = org.jmol.util.ArrayUtil.doubleLength (chain.groups);
				chain.groups[chain.groupCount++] = group;
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Chain,org.jmol.modelset.Group");
	Clazz.defineMethod (c$, "countGroup", 
			    ($fz = function (modelIndex, code, group3) {
				var ptm = modelIndex + 1;
				if (this.group3Lists == null || this.group3Lists[ptm] == null) return;
				var g3code = (group3 + "   ").substring (0, 3);
				var pt = this.group3Lists[ptm].indexOf (g3code);
				if (pt < 0) {
				    this.group3Lists[ptm] += ",[" + g3code + "]";
				    pt = this.group3Lists[ptm].indexOf (g3code);
				    this.group3Counts[ptm] = org.jmol.util.ArrayUtil.arrayCopyI (this.group3Counts[ptm], this.group3Counts[ptm].length + 10);
				}this.group3Counts[ptm][Clazz.doubleToInt (pt / 6)]++;
				pt = this.group3Lists[ptm].indexOf (",[" + g3code);
				if (pt >= 0) this.group3Lists[ptm] = this.group3Lists[ptm].substring (0, pt) + code + this.group3Lists[ptm].substring (pt + 2);
				if (modelIndex >= 0) this.countGroup (-1, code, group3);
			    }, $fz.isPrivate = true, $fz), "~N,~S,~S");
	Clazz.defineMethod (c$, "freeze", 
			    ($fz = function () {
				this.htAtomMap.clear ();
				if (this.modelSet.atomCount < this.modelSet.atoms.length) this.modelSet.growAtomArrays (this.modelSet.atomCount);
				if (this.modelSet.bondCount < this.modelSet.bonds.length) this.modelSet.bonds = org.jmol.util.ArrayUtil.arrayCopyObject (this.modelSet.bonds, this.modelSet.bondCount);
				for (var i = 5; --i > 0; ) {
				    this.modelSet.numCached[i] = 0;
				    var bondsCache = this.modelSet.freeBonds[i];
				    for (var j = bondsCache.length; --j >= 0; ) bondsCache[j] = null;

				}
				this.modelSet.setAtomNamesAndNumbers (0, this.baseAtomIndex, this.mergeModelSet);
				this.findElementsPresent ();
				this.modelSet.resetMolecules ();
				this.currentModel = null;
				this.currentChain = null;
				if (!this.isPDB) {
				    this.modelSet.freezeModels ();
				    return;
				}var asDSSP = this.viewer.getDefaultStructureDSSP ();
				var ret = this.modelSet.calculateStructuresAllExcept (this.structuresDefinedInFile, asDSSP, false, true, true, asDSSP);
				if (ret.length > 0) org.jmol.util.Logger.info (ret);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "findElementsPresent", 
			    ($fz = function () {
				this.modelSet.elementsPresent =  new Array (this.modelSet.modelCount);
				for (var i = 0; i < this.modelSet.modelCount; i++) this.modelSet.elementsPresent[i] = org.jmol.util.BitSetUtil.newBitSet (64);

				for (var i = this.modelSet.atomCount; --i >= 0; ) {
				    var n = this.modelSet.atoms[i].getAtomicAndIsotopeNumber ();
				    if (n >= org.jmol.util.Elements.elementNumberMax) n = org.jmol.util.Elements.elementNumberMax + org.jmol.util.Elements.altElementIndexFromNumber (n);
				    this.modelSet.elementsPresent[this.modelSet.atoms[i].modelIndex].set (n);
				}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "applyStereochemistry", 
			    ($fz = function () {
				this.set2dZ (this.baseAtomIndex, this.modelSet.atomCount);
				if (this.vStereo != null) {
				    var bsToTest =  new org.jmol.util.BitSet ();
				    bsToTest.setBits (this.baseAtomIndex, this.modelSet.atomCount);
				    for (var i = this.vStereo.size (); --i >= 0; ) {
					var b = this.vStereo.get (i);
					var dz2 = (b.order == 1025 ? 3 : -3);
					b.order = 1;
					if (b.atom2.z != b.atom1.z && (dz2 < 0) == (b.atom2.z < b.atom1.z)) dz2 /= 3;
					var bs = org.jmol.util.JmolMolecule.getBranchBitSet (this.modelSet.atoms, b.atom2.index, bsToTest, null, b.atom1.index, false, true);
					bs.set (b.atom2.index);
					for (var j = bs.nextSetBit (0); j >= 0; j = bs.nextSetBit (j + 1)) this.modelSet.atoms[j].z += dz2;

					b.atom2.x = (b.atom1.x + b.atom2.x) / 2;
					b.atom2.y = (b.atom1.y + b.atom2.y) / 2;
				    }
				    this.vStereo = null;
				}this.is2D = false;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "set2dZ", 
			    ($fz = function (iatom1, iatom2) {
				var atomlist = org.jmol.util.BitSetUtil.newBitSet (iatom2);
				var bsBranch =  new org.jmol.util.BitSet ();
				var v =  new org.jmol.util.Vector3f ();
				var v0 = org.jmol.util.Vector3f.new3 (0, 1, 0);
				var v1 =  new org.jmol.util.Vector3f ();
				var bs0 =  new org.jmol.util.BitSet ();
				bs0.setBits (iatom1, iatom2);
				for (var i = iatom1; i < iatom2; i++) if (!atomlist.get (i) && !bsBranch.get (i)) {
				    bsBranch = this.getBranch2dZ (i, -1, bs0, bsBranch, v, v0, v1);
				    atomlist.or (bsBranch);
				}
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "getBranch2dZ", 
			    ($fz = function (atomIndex, atomIndexNot, bs0, bsBranch, v, v0, v1) {
				var bs = org.jmol.util.BitSetUtil.newBitSet (this.modelSet.atomCount);
				if (atomIndex < 0) return bs;
				var bsToTest =  new org.jmol.util.BitSet ();
				bsToTest.or (bs0);
				if (atomIndexNot >= 0) bsToTest.clear (atomIndexNot);
				org.jmol.modelset.ModelLoader.setBranch2dZ (this.modelSet.atoms[atomIndex], bs, bsToTest, v, v0, v1);
				return bs;
			    }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.setBranch2dZ = Clazz.defineMethod (c$, "setBranch2dZ", 
					      ($fz = function (atom, bs, bsToTest, v, v0, v1) {
						  var atomIndex = atom.index;
						  if (!bsToTest.get (atomIndex)) return;
						  bsToTest.clear (atomIndex);
						  bs.set (atomIndex);
						  if (atom.bonds == null) return;
						  for (var i = atom.bonds.length; --i >= 0; ) {
						      var bond = atom.bonds[i];
						      if (bond.isHydrogen ()) continue;
						      var atom2 = bond.getOtherAtom (atom);
						      org.jmol.modelset.ModelLoader.setAtom2dZ (atom, atom2, v, v0, v1);
						      org.jmol.modelset.ModelLoader.setBranch2dZ (atom2, bs, bsToTest, v, v0, v1);
						  }
					      }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	c$.setAtom2dZ = Clazz.defineMethod (c$, "setAtom2dZ", 
					    ($fz = function (atomRef, atom2, v, v0, v1) {
						v.setT (atom2);
						v.sub (atomRef);
						v.z = 0;
						v.normalize ();
						v1.cross (v0, v);
						var theta = Math.acos (v.dot (v0));
						atom2.z = atomRef.z + (0.8 * Math.sin (4 * theta));
					    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Atom,org.jmol.modelset.Atom,org.jmol.util.Vector3f,org.jmol.util.Vector3f,org.jmol.util.Vector3f");
	Clazz.defineMethod (c$, "finalizeShapes", 
			    ($fz = function () {
				this.modelSet.shapeManager = this.viewer.getShapeManager ();
				if (!this.merging) this.modelSet.shapeManager.resetShapes ();
				this.modelSet.shapeManager.loadDefaultShapes (this.modelSet);
				if (this.modelSet.someModelsHaveAromaticBonds && this.viewer.getSmartAromatic ()) this.modelSet.assignAromaticBonds (false);
				if (this.merging && this.baseModelCount == 1) this.modelSet.shapeManager.setShapePropertyBs (6, "clearModelIndex", null, null);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "undeleteAtom", 
			    function (iAtom) {
				this.modelSet.atoms[iAtom].valence = 0;
			    }, "~N");
	Clazz.defineMethod (c$, "deleteAtoms", 
			    function (bsDeletedAtoms) {
				this.doRemoveAddedHydrogens = true;
				if (this.doRemoveAddedHydrogens) {
				    var mapOldToNew =  Clazz.newIntArray (this.modelSet.atomCount, 0);
				    var mapNewToOld =  Clazz.newIntArray (this.modelSet.atomCount - bsDeletedAtoms.cardinality (), 0);
				    var n = this.baseAtomIndex;
				    var models = this.modelSet.models;
				    var atoms = this.modelSet.atoms;
				    for (var i = this.baseAtomIndex; i < this.modelSet.atomCount; i++) {
					models[atoms[i].modelIndex].bsAtoms.clear (i);
					models[atoms[i].modelIndex].bsAtomsDeleted.clear (i);
					if (bsDeletedAtoms.get (i)) {
					    mapOldToNew[i] = n - 1;
					    models[atoms[i].modelIndex].atomCount--;
					} else {
					    mapNewToOld[n] = i;
					    mapOldToNew[i] = n++;
					}}
				    this.modelSet.modelSetAuxiliaryInfo.put ("bsDeletedAtoms", bsDeletedAtoms);
				    for (var i = this.baseGroupIndex; i < this.groups.length; i++) {
					var g = this.groups[i];
					if (g.firstAtomIndex >= this.baseAtomIndex) {
					    g.firstAtomIndex = mapOldToNew[g.firstAtomIndex];
					    g.lastAtomIndex = mapOldToNew[g.lastAtomIndex];
					    if (g.leadAtomIndex >= 0) g.leadAtomIndex = mapOldToNew[g.leadAtomIndex];
					}}
				    this.modelSet.adjustAtomArrays (mapNewToOld, this.baseAtomIndex, n);
				} else {
				    this.modelSet.viewer.deleteAtoms (bsDeletedAtoms, false);
				}this.modelSet.calcBoundBoxDimensions (null, 1);
				this.modelSet.resetMolecules ();
				this.modelSet.validateBspf (false);
			    }, "org.jmol.util.BitSet");
	c$.createAtomDataSet = Clazz.defineMethod (c$, "createAtomDataSet", 
						   function (viewer, modelSet, tokType, atomSetCollection, bsSelected) {
						       if (atomSetCollection == null) return;
						       var adapter = viewer.getModelAdapter ();
						       var pt =  new org.jmol.util.Point3f ();
						       var v =  new org.jmol.util.Point3f ();
						       var atoms = modelSet.atoms;
						       var tolerance = viewer.getLoadAtomDataTolerance ();
						       if (modelSet.unitCells != null) for (var i = bsSelected.nextSetBit (0); i >= 0; i = bsSelected.nextSetBit (i + 1)) if (atoms[i].getAtomSymmetry () != null) {
							   tolerance = -tolerance;
							   break;
						       }
						       var i = -1;
						       var n = 0;
						       var loadAllData = (org.jmol.util.BitSetUtil.cardinalityOf (bsSelected) == viewer.getAtomCount ());
						       for (var iterAtom = adapter.getAtomIterator (atomSetCollection); iterAtom.hasNext (); ) {
							   var x = iterAtom.getX ();
							   var y = iterAtom.getY ();
							   var z = iterAtom.getZ ();
							   if (Float.isNaN (x + y + z)) continue;
							   if (tokType == 1146095626) {
							       i = bsSelected.nextSetBit (i + 1);
							       if (i < 0) break;
							       n++;
							       if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("atomIndex = " + i + ": " + atoms[i] + " --> (" + x + "," + y + "," + z);
							       modelSet.setAtomCoord (i, x, y, z);
							       continue;
							   }pt.set (x, y, z);
							   var bs = org.jmol.util.BitSetUtil.newBitSet (modelSet.atomCount);
							   modelSet.getAtomsWithin (tolerance, pt, bs, -1);
							   bs.and (bsSelected);
							   if (loadAllData) {
							       n = org.jmol.util.BitSetUtil.cardinalityOf (bs);
							       if (n == 0) {
								   org.jmol.util.Logger.warn ("createAtomDataSet: no atom found at position " + pt);
								   continue;
							       } else if (n > 1 && org.jmol.util.Logger.debugging) {
								   org.jmol.util.Logger.debug ("createAtomDataSet: " + n + " atoms found at position " + pt);
							       }}switch (tokType) {
							       case 1146095631:
								   var vx = iterAtom.getVectorX ();
								   var vy = iterAtom.getVectorY ();
								   var vz = iterAtom.getVectorZ ();
								   if (Float.isNaN (vx + vy + vz)) continue;
								   v.set (vx, vy, vz);
								   if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.info ("xyz: " + pt + " vib: " + v);
								   modelSet.setAtomCoord (bs, 1146095631, v);
								   break;
							       case 1129318401:
								   modelSet.setAtomProperty (bs, tokType, iterAtom.getOccupancy (), 0, null, null, null);
								   break;
							       case 1112541196:
								   modelSet.setAtomProperty (bs, tokType, 0, iterAtom.getPartialCharge (), null, null, null);
								   break;
							       case 1112541199:
								   modelSet.setAtomProperty (bs, tokType, 0, iterAtom.getBfactor (), null, null, null);
								   break;
							       }
						       }
						       switch (tokType) {
						       case 1146095631:
							   var vibName = adapter.getAtomSetName (atomSetCollection, 0);
							   org.jmol.util.Logger.info ("_vibrationName = " + vibName);
							   viewer.setStringProperty ("_vibrationName", vibName);
							   break;
						       case 1146095626:
							   org.jmol.util.Logger.info (n + " atom positions read");
							   modelSet.recalculateLeadMidpointsAndWingVectors (-1);
							   break;
						       }
						   }, "org.jmol.viewer.Viewer,org.jmol.modelset.ModelSet,~N,~O,org.jmol.util.BitSet");
	Clazz.defineStatics (c$,
			     "defaultGroupCount", 32);
    });
    // 
    //// org\jmol\thread\CommandWatcherThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.CommandWatcherThread", ["java.lang.Thread", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.scriptManager = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "CommandWatcherThread", org.jmol.thread.JmolThread);
	Clazz.makeConstructor (c$, 
			       function (scriptManager) {
				   Clazz.superConstructor (this, org.jmol.thread.CommandWatcherThread, []);
				   this.scriptManager = scriptManager;
				   this.setMyName ("CommmandWatcherThread");
				   this.start ();
			       }, "org.jmol.viewer.ScriptManager");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  Thread.currentThread ().setPriority (1);
				  var commandDelay = 50;
				  while (!this.$interrupted) {
				      try {
					  Thread.sleep (commandDelay);
					  if (!this.$interrupted) {
					      this.scriptManager.runScriptNow ();
					  }} catch (e$$) {
					      if (Clazz.exceptionOf (e$$, InterruptedException)) {
						  var ie = e$$;
						  {
						      org.jmol.util.Logger.warn ("CommandWatcher InterruptedException! " + this);
						      break;
						  }
					      } else if (Clazz.exceptionOf (e$$, Exception)) {
						  var ie = e$$;
						  {
						      var s = "script processing ERROR:\n\n" + ie.toString ();
						      for (var i = 0; i < ie.getStackTrace ().length; i++) {
							  s += "\n" + ie.getStackTrace ()[i].toString ();
						      }
						      org.jmol.util.Logger.warn ("CommandWatcher Exception! " + s);
						      break;
						  }
					      } else {
						  throw e$$;
					      }
					  }
				  }
				  this.scriptManager.clearCommandWatcherThread ();
			      });
    });
    // 
    //// org\jmol\thread\ScriptQueueThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.ScriptQueueThread", ["java.lang.Thread", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.scriptManager = null;
	    this.viewer = null;
	    this.startedByCommandThread = false;
	    this.pt = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "ScriptQueueThread", org.jmol.thread.JmolThread);
	Clazz.makeConstructor (c$, 
			       function (scriptManager, viewer, startedByCommandThread, pt) {
				   Clazz.superConstructor (this, org.jmol.thread.ScriptQueueThread, []);
				   this.scriptManager = scriptManager;
				   this.viewer = viewer;
				   this.startedByCommandThread = startedByCommandThread;
				   this.pt = pt;
				   this.setMyName ("QueueThread" + pt);
				   this.start ();
			       }, "org.jmol.viewer.ScriptManager,org.jmol.viewer.Viewer,~B,~N");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  while (this.scriptManager.scriptQueue.size () != 0) {
				      if (!this.runNextScript ()) try {
					  Thread.sleep (100);
				      } catch (e) {
					  if (Clazz.exceptionOf (e, Exception)) {
					      org.jmol.util.Logger.error (this + " Exception " + e.getMessage ());
					      break;
					  } else {
					      throw e;
					  }
				      }
				  }
				  this.scriptManager.queueThreadFinished (this.pt);
			      });
	Clazz.defineMethod (c$, "runNextScript", 
			    ($fz = function () {
				if (this.scriptManager.scriptQueue.size () == 0) return false;
				var scriptItem = this.scriptManager.getScriptItem (false, this.startedByCommandThread);
				if (scriptItem == null) return false;
				var script = scriptItem.get (0);
				var statusList = scriptItem.get (1);
				var returnType = scriptItem.get (2);
				var isScriptFile = (scriptItem.get (3)).booleanValue ();
				var isQuiet = (scriptItem.get (4)).booleanValue ();
				if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.info ("Queue[" + this.pt + "][" + this.scriptManager.scriptQueue.size () + "] scripts; running: " + script);
				}this.scriptManager.scriptQueue.remove (0);
				this.viewer.evalStringWaitStatusQueued (returnType, script, statusList, isScriptFile, isQuiet, true);
				if (this.scriptManager.scriptQueue.size () == 0) {
				    return false;
				}return true;
			    }, $fz.isPrivate = true, $fz));
    });
    // 
    //// org\jmol\viewer\TransformManager11.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.viewer");
    Clazz.load (["org.jmol.viewer.TransformManager"], "org.jmol.viewer.TransformManager11", ["java.lang.Float", "$.Thread", "org.jmol.util.Escape", "$.Hermite", "$.Logger", "$.Point3f", "$.Vector3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.navigationSlabOffset = 0;
	    this.zoomFactor = 3.4028235E38;
	    this.navMode = 1;
	    this.navigationDepth = 0;
	    this.nHits = 0;
	    this.multiplier = 1;
	    this.ptMoveToCenter = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.viewer, "TransformManager11", org.jmol.viewer.TransformManager);
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.viewer.TransformManager11);
				   this.setNavFps (10);
			       });
	Clazz.makeConstructor (c$, 
			       function (viewer) {
				   Clazz.superConstructor (this, org.jmol.viewer.TransformManager11, [viewer]);
				   this.setNavFps (10);
			       }, "org.jmol.viewer.Viewer");
	Clazz.overrideMethod (c$, "setNavFps", 
			      function (navFps) {
				  this.navFps = navFps;
			      }, "~N");
	Clazz.makeConstructor (c$, 
			       function (viewer, width, height) {
				   Clazz.superConstructor (this, org.jmol.viewer.TransformManager11, [viewer, width, height]);
				   this.setNavFps (10);
			       }, "org.jmol.viewer.Viewer,~N,~N");
	Clazz.defineMethod (c$, "zoomByFactor", 
			    function (factor, x, y) {
				if (!this.zoomEnabled || factor <= 0 || this.mode != 1) {
				    Clazz.superCall (this, org.jmol.viewer.TransformManager11, "zoomByFactor", [factor, x, y]);
				    return;
				}if (this.navZ > 0) {
				    this.navZ /= factor;
				    if (this.navZ < 5) this.navZ = -5;
				    else if (this.navZ > 200) this.navZ = 200;
				} else if (this.navZ == 0) {
				    this.navZ = (factor < 1 ? 5 : -5);
				} else {
				    this.navZ *= factor;
				    if (this.navZ > -5) this.navZ = 5;
				    else if (this.navZ < -200) this.navZ = -200;
				}}, "~N,~N,~N");
	Clazz.overrideMethod (c$, "calcCameraFactors", 
			      function () {
				  if (Float.isNaN (this.cameraDepth)) {
				      this.cameraDepth = this.cameraDepthSetting;
				      this.zoomFactor = 3.4028235E38;
				  }this.cameraDistance = this.cameraDepth * this.screenPixelCount;
				  this.referencePlaneOffset = this.cameraDistance + this.screenPixelCount / 2;
				  this.scalePixelsPerAngstrom = (this.scale3D && !this.perspectiveDepth && this.mode != 1 ? 72 / this.scale3DAngstromsPerInch * (this.antialias ? 2 : 1) : this.screenPixelCount / this.visualRange);
				  this.modelRadiusPixels = this.modelRadius * this.scalePixelsPerAngstrom;
				  var offset100 = (2 * this.modelRadius) / this.visualRange * this.referencePlaneOffset;
				  if (this.mode != 1) {
				      this.zoomFactor = 3.4028235E38;
				      this.modelCenterOffset = this.referencePlaneOffset;
				      if (!this.scale3D || this.perspectiveDepth) this.scalePixelsPerAngstrom *= (this.modelCenterOffset / offset100) * this.zoomPercent / 100;
				      this.modelRadiusPixels = this.modelRadius * this.scalePixelsPerAngstrom;
				      return;
				  }if (this.zoomFactor == 3.4028235E38) {
				      if (this.zoomPercent > 10000) this.zoomPercent = 10000;
				      this.modelCenterOffset = offset100 * 100 / this.zoomPercent;
				  } else if (this.prevZoomSetting != this.zoomPercentSetting) {
				      if (this.zoomRatio == 0) this.modelCenterOffset = offset100 * 100 / this.zoomPercentSetting;
				      else this.modelCenterOffset += (1 - this.zoomRatio) * this.referencePlaneOffset;
				      this.navMode = -1;
				  }this.prevZoomSetting = this.zoomPercentSetting;
				  this.zoomFactor = this.modelCenterOffset / this.referencePlaneOffset;
				  this.zoomPercent = (this.zoomFactor == 0 ? 10000 : offset100 / this.modelCenterOffset * 100);
			      });
	Clazz.overrideMethod (c$, "getPerspectiveFactor", 
			      function (z) {
				  return (z <= 0 ? this.referencePlaneOffset : this.referencePlaneOffset / z);
			      }, "~N");
	Clazz.overrideMethod (c$, "adjustTemporaryScreenPoint", 
			      function () {
				  var z = this.point3fScreenTemp.z;
				  if (Float.isNaN (z)) {
				      if (!this.haveNotifiedNaN) org.jmol.util.Logger.debug ("NaN seen in TransformPoint");
				      this.haveNotifiedNaN = true;
				      z = 1;
				  } else if (z <= 0) {
				      z = 1;
				  }this.point3fScreenTemp.z = z;
				  switch (this.mode) {
				  case 1:
				      this.point3fScreenTemp.x -= this.navigationShiftXY.x;
				      this.point3fScreenTemp.y -= this.navigationShiftXY.y;
				      break;
				  case 2:
				      this.point3fScreenTemp.x -= this.perspectiveShiftXY.x;
				      this.point3fScreenTemp.y -= this.perspectiveShiftXY.y;
				      break;
				  }
				  if (this.perspectiveDepth) {
				      var factor = this.getPerspectiveFactor (z);
				      this.point3fScreenTemp.x *= factor;
				      this.point3fScreenTemp.y *= factor;
				  }switch (this.mode) {
				  case 1:
				      this.point3fScreenTemp.x += this.navigationOffset.x;
				      this.point3fScreenTemp.y += this.navigationOffset.y;
				      break;
				  case 2:
				      this.point3fScreenTemp.x += this.perspectiveOffset.x;
				      this.point3fScreenTemp.y += this.perspectiveOffset.y;
				      break;
				  case 0:
				      this.point3fScreenTemp.x += this.fixedRotationOffset.x;
				      this.point3fScreenTemp.y += this.fixedRotationOffset.y;
				      break;
				  }
				  if (Float.isNaN (this.point3fScreenTemp.x) && !this.haveNotifiedNaN) {
				      org.jmol.util.Logger.debug ("NaN found in transformPoint ");
				      this.haveNotifiedNaN = true;
				  }this.point3iScreenTemp.set (Clazz.floatToInt (this.point3fScreenTemp.x), Clazz.floatToInt (this.point3fScreenTemp.y), Clazz.floatToInt (this.point3fScreenTemp.z));
			      });
	Clazz.defineMethod (c$, "setScreenParameters", 
			    function (screenWidth, screenHeight, useZoomLarge, antialias, resetSlab, resetZoom) {
				var pt = (this.mode == 1 ? org.jmol.util.Point3f.newP (this.navigationCenter) : null);
				var ptoff = org.jmol.util.Point3f.newP (this.navigationOffset);
				ptoff.x = ptoff.x / this.width;
				ptoff.y = ptoff.y / this.height;
				Clazz.superCall (this, org.jmol.viewer.TransformManager11, "setScreenParameters", [screenWidth, screenHeight, useZoomLarge, antialias, resetSlab, resetZoom]);
				if (pt != null) {
				    this.navigationCenter.setT (pt);
				    this.navTranslatePercent (-1, ptoff.x * this.width, ptoff.y * this.height);
				    this.navigatePt (0, pt);
				}}, "~N,~N,~B,~B,~B,~B");
	Clazz.overrideMethod (c$, "calcNavigationPoint", 
			      function () {
				  this.calcNavigationDepthPercent ();
				  if (!this.navigating && this.navMode != 1) {
				      if (this.navigationDepth < 100 && this.navigationDepth > 0 && !Float.isNaN (this.previousX) && this.previousX == this.fixedTranslation.x && this.previousY == this.fixedTranslation.y && this.navMode != -1) this.navMode = 3;
				      else this.navMode = 0;
				  }switch (this.navMode) {
				  case 1:
				      this.navigationOffset.set (this.width / 2, this.getNavPtHeight (), this.referencePlaneOffset);
				      this.zoomFactor = 3.4028235E38;
				      this.calcCameraFactors ();
				      this.calcTransformMatrix ();
				      this.newNavigationCenter ();
				      break;
				  case 0:
				  case -1:
				      this.fixedRotationOffset.setT (this.fixedTranslation);
				      this.newNavigationCenter ();
				      break;
				  case 2:
				      this.newNavigationCenter ();
				      break;
				  case -2:
				  case 3:
				      var pt1 =  new org.jmol.util.Point3f ();
				      this.matrixTransform.transform2 (this.navigationCenter, pt1);
				      var z = pt1.z;
				      this.matrixTransform.transform2 (this.fixedRotationCenter, pt1);
				      this.modelCenterOffset = this.referencePlaneOffset + (pt1.z - z);
				      this.calcCameraFactors ();
				      this.calcTransformMatrix ();
				      break;
				  case 4:
				      this.navigationOffset.z = this.referencePlaneOffset;
				      this.unTransformPoint (this.navigationOffset, this.navigationCenter);
				      break;
				  }
				  this.matrixTransform.transform2 (this.navigationCenter, this.navigationShiftXY);
				  if (this.viewer.getNavigationPeriodic ()) {
				      var pt = org.jmol.util.Point3f.newP (this.navigationCenter);
				      this.viewer.toUnitCell (this.navigationCenter, null);
				      if (pt.distance (this.navigationCenter) > 0.01) {
					  this.matrixTransform.transform2 (this.navigationCenter, pt);
					  var dz = this.navigationShiftXY.z - pt.z;
					  this.modelCenterOffset += dz;
					  this.calcCameraFactors ();
					  this.calcTransformMatrix ();
					  this.matrixTransform.transform2 (this.navigationCenter, this.navigationShiftXY);
				      }}this.transformPoint2 (this.fixedRotationCenter, this.fixedTranslation);
				  this.fixedRotationOffset.setT (this.fixedTranslation);
				  this.previousX = this.fixedTranslation.x;
				  this.previousY = this.fixedTranslation.y;
				  this.transformPoint2 (this.navigationCenter, this.navigationOffset);
				  this.navigationOffset.z = this.referencePlaneOffset;
				  this.navMode = 0;
				  this.calcNavSlabAndDepthValues ();
			      });
	Clazz.defineMethod (c$, "getNavPtHeight", 
			    ($fz = function () {
				var navigateSurface = this.viewer.getNavigateSurface ();
				return this.height / (navigateSurface ? 1 : 2);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "calcNavSlabAndDepthValues", 
			    function () {
				this.calcSlabAndDepthValues ();
				if (this.slabEnabled) {
				    this.slabValue = (this.mode == 1 ? -100 : 0) + Clazz.floatToInt (this.referencePlaneOffset - this.navigationSlabOffset);
				    if (this.zSlabPercentSetting == this.zDepthPercentSetting) this.zSlabValue = this.slabValue;
				}if (org.jmol.util.Logger.debugging) org.jmol.util.Logger.debug ("\n\nperspectiveScale: " + this.referencePlaneOffset + " screenPixelCount: " + this.screenPixelCount + "\nmodelTrailingEdge: " + (this.modelCenterOffset + this.modelRadiusPixels) + " depthValue: " + this.depthValue + "\nmodelCenterOffset: " + this.modelCenterOffset + " modelRadiusPixels: " + this.modelRadiusPixels + "\nmodelLeadingEdge: " + (this.modelCenterOffset - this.modelRadiusPixels) + " slabValue: " + this.slabValue + "\nzoom: " + this.zoomPercent + " navDepth: " + (Clazz.floatToInt (100 * this.getNavigationDepthPercent ()) / 100) + " visualRange: " + this.visualRange + "\nnavX/Y/Z/modelCenterOffset: " + this.navigationOffset.x + "/" + this.navigationOffset.y + "/" + this.navigationOffset.z + "/" + this.modelCenterOffset + " navCenter:" + this.navigationCenter);
			    });
	Clazz.defineMethod (c$, "newNavigationCenter", 
			    ($fz = function () {
				this.mode = this.defaultMode;
				var pt =  new org.jmol.util.Point3f ();
				this.transformPoint2 (this.fixedRotationCenter, pt);
				pt.x -= this.navigationOffset.x;
				pt.y -= this.navigationOffset.y;
				var f = -this.getPerspectiveFactor (pt.z);
				pt.x /= f;
				pt.y /= f;
				pt.z = this.referencePlaneOffset;
				this.matrixTransformInv.transform2 (pt, this.navigationCenter);
				this.mode = 1;
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "canNavigate", 
			      function () {
				  return true;
			      });
	Clazz.overrideMethod (c$, "resetNavigationPoint", 
			      function (doResetSlab) {
				  if (this.zoomPercent < 5 && this.mode != 1) {
				      this.perspectiveDepth = true;
				      this.mode = 1;
				      return;
				  }if (this.mode == 1) {
				      this.navMode = 1;
				      this.slabPercentSetting = 0;
				      this.perspectiveDepth = true;
				  } else if (doResetSlab) {
				      this.slabPercentSetting = 100;
				  }this.viewer.setFloatProperty ("slabRange", 0);
				  if (doResetSlab) {
				      this.slabEnabled = (this.mode == 1);
				  }this.zoomFactor = 3.4028235E38;
				  this.zoomPercentSetting = this.zoomPercent;
			      }, "~B");
	Clazz.overrideMethod (c$, "setNavigationOffsetRelative", 
			      function (navigatingSurface) {
				  if (navigatingSurface) {
				      this.navigateSurface (2147483647);
				      return;
				  }if (this.navigationDepth < 0 && this.navZ > 0 || this.navigationDepth > 100 && this.navZ < 0) {
				      this.navZ = 0;
				  }this.rotateXRadians (0.017453292 * -0.02 * this.navY, null);
				  this.rotateYRadians (0.017453292 * .02 * this.navX, null);
				  var pt = this.getNavigationCenter ();
				  var pts =  new org.jmol.util.Point3f ();
				  this.transformPoint2 (pt, pts);
				  pts.z += this.navZ;
				  this.unTransformPoint (pts, pt);
				  this.navigatePt (0, pt);
			      }, "~B");
	Clazz.defineMethod (c$, "navigate", 
			    function (keyCode, modifiers) {
				var key = null;
				var value = 0;
				if (this.mode != 1) return;
				if (keyCode == 0) {
				    this.nHits = 0;
				    this.multiplier = 1;
				    if (!this.navigating) return;
				    this.navigating = false;
				    return;
				}this.nHits++;
				if (this.nHits % 10 == 0) this.multiplier *= (this.multiplier == 4 ? 1 : 2);
				var navigateSurface = this.viewer.getNavigateSurface ();
				var isShiftKey = ((modifiers & 1) > 0);
				var isAltKey = ((modifiers & 8) > 0);
				var isCtrlKey = ((modifiers & 2) > 0);
				var speed = this.viewer.getNavigationSpeed () * (isCtrlKey ? 10 : 1);
				switch (keyCode) {
				case 46:
				    this.navX = this.navY = this.navZ = 0;
				    this.homePosition (true);
				    return;
				case 32:
				    if (!this.navOn) return;
				    this.navX = this.navY = this.navZ = 0;
				    return;
				case 38:
				    if (this.navOn) {
					if (isAltKey) {
					    this.navY += this.multiplier;
					    value = this.navY;
					    key = "navY";
					} else {
					    this.navZ += this.multiplier;
					    value = this.navZ;
					    key = "navZ";
					}break;
				    }if (navigateSurface) {
					this.navigateSurface (2147483647);
					break;
				    }if (isShiftKey) {
					this.navigationOffset.y -= 2 * this.multiplier;
					this.navMode = 2;
					break;
				    }if (isAltKey) {
					this.rotateXRadians (0.017453292 * -0.2 * this.multiplier, null);
					this.navMode = 3;
					break;
				    }this.modelCenterOffset -= speed * (this.viewer.getNavigationPeriodic () ? 1 : this.multiplier);
				    this.navMode = 4;
				    break;
				case 40:
				    if (this.navOn) {
					if (isAltKey) {
					    this.navY -= this.multiplier;
					    value = this.navY;
					    key = "navY";
					} else {
					    this.navZ -= this.multiplier;
					    value = this.navZ;
					    key = "navZ";
					}break;
				    }if (navigateSurface) {
					this.navigateSurface (-2 * this.multiplier);
					break;
				    }if (isShiftKey) {
					this.navigationOffset.y += 2 * this.multiplier;
					this.navMode = 2;
					break;
				    }if (isAltKey) {
					this.rotateXRadians (0.017453292 * .2 * this.multiplier, null);
					this.navMode = 3;
					break;
				    }this.modelCenterOffset += speed * (this.viewer.getNavigationPeriodic () ? 1 : this.multiplier);
				    this.navMode = 4;
				    break;
				case 37:
				    if (this.navOn) {
					this.navX -= this.multiplier;
					value = this.navX;
					key = "navX";
					break;
				    }if (navigateSurface) {
					break;
				    }if (isShiftKey) {
					this.navigationOffset.x -= 2 * this.multiplier;
					this.navMode = 2;
					break;
				    }this.rotateYRadians (0.017453292 * 3 * -0.2 * this.multiplier, null);
				    this.navMode = 3;
				    break;
				case 39:
				    if (this.navOn) {
					this.navX += this.multiplier;
					value = this.navX;
					key = "navX";
					break;
				    }if (navigateSurface) {
					break;
				    }if (isShiftKey) {
					this.navigationOffset.x += 2 * this.multiplier;
					this.navMode = 2;
					break;
				    }this.rotateYRadians (0.017453292 * 3 * .2 * this.multiplier, null);
				    this.navMode = 3;
				    break;
				default:
				    this.navigating = false;
				    this.navMode = 0;
				    return;
				}
				if (key != null) this.viewer.getGlobalSettings ().setParamF (key, value);
				this.navigating = true;
				this.finalizeTransformParameters ();
			    }, "~N,~N");
	Clazz.defineMethod (c$, "navigateSurface", 
			    ($fz = function (dz) {
				if (this.viewer.isRepaintPending ()) return;
				this.viewer.setShapeProperty (23, "navigate", Integer.$valueOf (dz == 2147483647 ? 2 * this.multiplier : dz));
				this.viewer.requestRepaintAndWait ();
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "navigatePt", 
			      function (seconds, pt) {
				  if (seconds > 0) {
				      this.navigateTo (seconds, null, NaN, pt, NaN, NaN, NaN);
				      return;
				  }this.navigationCenter.setT (pt);
				  this.navMode = 3;
				  this.navigating = true;
				  this.finalizeTransformParameters ();
				  this.navigating = false;
			      }, "~N,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "navigateAxis", 
			      function (seconds, rotAxis, degrees) {
				  if (degrees == 0) return;
				  if (seconds > 0) {
				      this.navigateTo (seconds, rotAxis, degrees, null, NaN, NaN, NaN);
				      return;
				  }this.rotateAxisAngle (rotAxis, (degrees / 57.29577951308232));
				  this.navMode = 3;
				  this.navigating = true;
				  this.finalizeTransformParameters ();
				  this.navigating = false;
			      }, "~N,org.jmol.util.Vector3f,~N");
	Clazz.defineMethod (c$, "setNavigationDepthPercent", 
			    function (timeSec, percent) {
				if (timeSec > 0) {
				    this.navigateTo (timeSec, null, NaN, null, percent, NaN, NaN);
				    return;
				}this.setNavigationDepthPercent (percent);
			    }, "~N,~N");
	Clazz.overrideMethod (c$, "navTranslate", 
			      function (seconds, pt) {
				  var pt1 =  new org.jmol.util.Point3f ();
				  this.transformPoint2 (pt, pt1);
				  if (seconds > 0) {
				      this.navigateTo (seconds, null, NaN, null, NaN, pt1.x, pt1.y);
				      return;
				  }this.navTranslatePercent (-1, pt1.x, pt1.y);
			      }, "~N,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "navTranslatePercent", 
			      function (seconds, x, y) {
				  this.transformPoint2 (this.navigationCenter, this.navigationOffset);
				  if (seconds >= 0) {
				      if (!Float.isNaN (x)) x = this.width * x / 100 + (Float.isNaN (y) ? this.navigationOffset.x : (this.width / 2));
				      if (!Float.isNaN (y)) y = this.height * y / 100 + (Float.isNaN (x) ? this.navigationOffset.y : this.getNavPtHeight ());
				  }if (seconds > 0) {
				      this.navigateTo (seconds, null, NaN, null, NaN, x, y);
				      return;
				  }if (!Float.isNaN (x)) this.navigationOffset.x = x;
				  if (!Float.isNaN (y)) this.navigationOffset.y = y;
				  this.navMode = 2;
				  this.navigating = true;
				  this.finalizeTransformParameters ();
				  this.navigating = false;
			      }, "~N,~N,~N");
	Clazz.defineMethod (c$, "navigateTo", 
			    ($fz = function (floatSecondsTotal, axis, degrees, center, depthPercent, xTrans, yTrans) {
				if (!this.viewer.haveDisplay) floatSecondsTotal = 0;
				this.ptMoveToCenter = (center == null ? this.navigationCenter : center);
				var fps = 30;
				var totalSteps = Clazz.floatToInt (floatSecondsTotal * fps);
				if (floatSecondsTotal > 0) this.viewer.setInMotion (true);
				if (degrees == 0) degrees = NaN;
				if (totalSteps > 1) {
				    var frameTimeMillis = Clazz.doubleToInt (1000 / fps);
				    var targetTime = System.currentTimeMillis ();
				    var depthStart = this.getNavigationDepthPercent ();
				    var depthDelta = depthPercent - depthStart;
				    var xTransStart = this.navigationOffset.x;
				    var xTransDelta = xTrans - xTransStart;
				    var yTransStart = this.navigationOffset.y;
				    var yTransDelta = yTrans - yTransStart;
				    var degreeStep = degrees / totalSteps;
				    var aaStepCenter =  new org.jmol.util.Vector3f ();
				    aaStepCenter.setT (this.ptMoveToCenter);
				    aaStepCenter.sub (this.navigationCenter);
				    aaStepCenter.scale (1 / totalSteps);
				    var centerStart = org.jmol.util.Point3f.newP (this.navigationCenter);
				    for (var iStep = 1; iStep < totalSteps; ++iStep) {
					this.navigating = true;
					var fStep = iStep / (totalSteps - 1);
					if (!Float.isNaN (degrees)) this.navigateAxis (0, axis, degreeStep);
					if (center != null) {
					    centerStart.add (aaStepCenter);
					    this.navigatePt (0, centerStart);
					}if (!Float.isNaN (xTrans) || !Float.isNaN (yTrans)) {
					    var x = NaN;
					    var y = NaN;
					    if (!Float.isNaN (xTrans)) x = xTransStart + xTransDelta * fStep;
					    if (!Float.isNaN (yTrans)) y = yTransStart + yTransDelta * fStep;
					    this.navTranslatePercent (-1, x, y);
					}if (!Float.isNaN (depthPercent)) {
					    this.setNavigationDepthPercent (depthStart + depthDelta * fStep);
					}this.navigating = false;
					targetTime += frameTimeMillis;
					if (System.currentTimeMillis () < targetTime) {
					    this.viewer.requestRepaintAndWait ();
					    if (!this.viewer.isScriptExecuting ()) return;
					    var sleepTime = (targetTime - System.currentTimeMillis ());
					    if (sleepTime > 0) {
						try {
						    Thread.sleep (sleepTime);
						} catch (ie) {
						    if (Clazz.exceptionOf (ie, InterruptedException)) {
							return;
						    } else {
							throw ie;
						    }
						}
					    }}}
				} else {
				    var sleepTime = Clazz.floatToInt (floatSecondsTotal * 1000) - 30;
				    if (sleepTime > 0) {
					try {
					    Thread.sleep (sleepTime);
					} catch (ie) {
					    if (Clazz.exceptionOf (ie, InterruptedException)) {
					    } else {
						throw ie;
					    }
					}
				    }}if (!Float.isNaN (xTrans) || !Float.isNaN (yTrans)) this.navTranslatePercent (-1, xTrans, yTrans);
				if (!Float.isNaN (depthPercent)) this.setNavigationDepthPercent (depthPercent);
				this.viewer.setInMotion (false);
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.util.Vector3f,~N,org.jmol.util.Point3f,~N,~N,~N");
	Clazz.overrideMethod (c$, "navigateGuide", 
			      function (seconds, pathGuide) {
				  this.navigate (seconds, pathGuide, null, null, 0, 2147483647);
			      }, "~N,~A");
	Clazz.overrideMethod (c$, "navigatePath", 
			      function (seconds, path, theta, indexStart, indexEnd) {
				  this.navigate (seconds, null, path, theta, indexStart, indexEnd);
			      }, "~N,~A,~A,~N,~N");
	Clazz.defineMethod (c$, "navigate", 
			    ($fz = function (seconds, pathGuide, path, theta, indexStart, indexEnd) {
				if (seconds <= 0) seconds = 2;
				if (!this.viewer.haveDisplay) seconds = 0;
				var isPathGuide = (pathGuide != null);
				var nSegments = Math.min ((isPathGuide ? pathGuide.length : path.length) - 1, indexEnd);
				if (!isPathGuide) while (nSegments > 0 && path[nSegments] == null) nSegments--;

				nSegments -= indexStart;
				if (nSegments < 1) return;
				var nPer = Clazz.doubleToInt (Math.floor (10 * seconds));
				var nSteps = nSegments * nPer + 1;
				var points =  new Array (nSteps + 2);
				var pointGuides =  new Array (isPathGuide ? nSteps + 2 : 0);
				var iPrev;
				var iNext;
				var iNext2;
				var iNext3;
				var pt;
				for (var i = 0; i < nSegments; i++) {
				    iPrev = Math.max (i - 1, 0) + indexStart;
				    pt = i + indexStart;
				    iNext = Math.min (i + 1, nSegments) + indexStart;
				    iNext2 = Math.min (i + 2, nSegments) + indexStart;
				    iNext3 = Math.min (i + 3, nSegments) + indexStart;
				    if (isPathGuide) {
					org.jmol.util.Hermite.getHermiteList (7, pathGuide[iPrev][0], pathGuide[pt][0], pathGuide[iNext][0], pathGuide[iNext2][0], pathGuide[iNext3][0], points, i * nPer, nPer + 1, true);
					org.jmol.util.Hermite.getHermiteList (7, pathGuide[iPrev][1], pathGuide[pt][1], pathGuide[iNext][1], pathGuide[iNext2][1], pathGuide[iNext3][1], pointGuides, i * nPer, nPer + 1, true);
				    } else {
					org.jmol.util.Hermite.getHermiteList (7, path[iPrev], path[pt], path[iNext], path[iNext2], path[iNext3], points, i * nPer, nPer + 1, true);
				    }}
				var totalSteps = nSteps;
				this.viewer.setInMotion (true);
				var frameTimeMillis = Clazz.floatToInt (1000 / this.navFps);
				var targetTime = System.currentTimeMillis ();
				for (var iStep = 0; iStep < totalSteps; ++iStep) {
				    this.navigatePt (0, points[iStep]);
				    if (isPathGuide) {
					this.alignZX (points[iStep], points[iStep + 1], pointGuides[iStep]);
				    }targetTime += frameTimeMillis;
				    if (System.currentTimeMillis () < targetTime) {
					this.viewer.requestRepaintAndWait ();
					if (!this.viewer.isScriptExecuting ()) return;
					var sleepTime = (targetTime - System.currentTimeMillis ());
					if (sleepTime > 0) {
					    try {
						Thread.sleep (sleepTime);
					    } catch (ie) {
						if (Clazz.exceptionOf (ie, InterruptedException)) {
						    return;
						} else {
						    throw ie;
						}
					    }
					}}}
			    }, $fz.isPrivate = true, $fz), "~N,~A,~A,~A,~N,~N");
	Clazz.defineMethod (c$, "navigateSurface", 
			    function (timeSeconds, name) {
			    }, "~N,~S");
	Clazz.defineMethod (c$, "alignZX", 
			    function (pt0, pt1, ptVectorWing) {
				var pt0s =  new org.jmol.util.Point3f ();
				var pt1s =  new org.jmol.util.Point3f ();
				this.matrixRotate.transform2 (pt0, pt0s);
				this.matrixRotate.transform2 (pt1, pt1s);
				var vPath = org.jmol.util.Vector3f.newV (pt0s);
				vPath.sub (pt1s);
				var v = org.jmol.util.Vector3f.new3 (0, 0, 1);
				var angle = vPath.angle (v);
				v.cross (vPath, v);
				if (angle != 0) this.navigateAxis (0, v, (angle * 57.29577951308232));
				this.matrixRotate.transform2 (pt0, pt0s);
				var pt2 = org.jmol.util.Point3f.newP (ptVectorWing);
				pt2.add (pt0);
				var pt2s =  new org.jmol.util.Point3f ();
				this.matrixRotate.transform2 (pt2, pt2s);
				vPath.setT (pt2s);
				vPath.sub (pt0s);
				vPath.z = 0;
				v.set (-1, 0, 0);
				angle = vPath.angle (v);
				if (vPath.y < 0) angle = -angle;
				v.set (0, 0, 1);
				if (angle != 0) this.navigateAxis (0, v, (angle * 57.29577951308232));
				if (this.viewer.getNavigateSurface ()) {
				    v.set (1, 0, 0);
				    this.navigateAxis (0, v, 20);
				}this.matrixRotate.transform2 (pt0, pt0s);
				this.matrixRotate.transform2 (pt1, pt1s);
				this.matrixRotate.transform2 (ptVectorWing, pt2s);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "getNavigationCenter", 
			      function () {
				  return this.navigationCenter;
			      });
	Clazz.overrideMethod (c$, "getNavigationDepthPercent", 
			      function () {
				  return this.navigationDepth;
			      });
	Clazz.overrideMethod (c$, "setNavigationSlabOffsetPercent", 
			      function (percent) {
				  this.viewer.getGlobalSettings ().setParamF ("navigationSlab", percent);
				  this.calcCameraFactors ();
				  this.navigationSlabOffset = percent / 50 * this.modelRadiusPixels;
			      }, "~N");
	Clazz.defineMethod (c$, "getNavigationSlabOffsetPercent", 
			    ($fz = function () {
				this.calcCameraFactors ();
				return 50 * this.navigationSlabOffset / this.modelRadiusPixels;
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "getNavigationOffset", 
			      function () {
				  this.transformPoint2 (this.navigationCenter, this.navigationOffset);
				  return this.navigationOffset;
			      });
	Clazz.defineMethod (c$, "setNavigationDepthPercent", 
			    ($fz = function (percent) {
				this.viewer.getGlobalSettings ().setParamF ("navigationDepth", percent);
				this.calcCameraFactors ();
				this.modelCenterOffset = this.referencePlaneOffset - (1 - percent / 50) * this.modelRadiusPixels;
				this.calcCameraFactors ();
				this.navMode = -1;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "calcNavigationDepthPercent", 
			    ($fz = function () {
				this.calcCameraFactors ();
				this.navigationDepth = (this.modelRadiusPixels == 0 ? 50 : 50 * (1 + (this.modelCenterOffset - this.referencePlaneOffset) / this.modelRadiusPixels));
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "getNavigationOffsetPercent", 
			      function (XorY) {
				  this.getNavigationOffset ();
				  if (this.width == 0 || this.height == 0) return 0;
				  return (XorY == 'X' ? (this.navigationOffset.x - this.width / 2) * 100 / this.width : (this.navigationOffset.y - this.getNavPtHeight ()) * 100 / this.height);
			      }, "~S");
	Clazz.overrideMethod (c$, "getNavigationText", 
			      function (addComments) {
				  this.getNavigationOffset ();
				  return (addComments ? " /* navigation center, translation, depth */ " : " ") + org.jmol.util.Escape.escapePt (this.navigationCenter) + " " + this.getNavigationOffsetPercent ('X') + " " + this.getNavigationOffsetPercent ('Y') + " " + this.getNavigationDepthPercent ();
			      }, "~B");
	Clazz.overrideMethod (c$, "getNavigationState", 
			      function () {
				  if (this.mode != 1) return "";
				  return "# navigation state;\nnavigate 0 center " + org.jmol.util.Escape.escapePt (this.getNavigationCenter ()) + ";\nnavigate 0 translate " + this.getNavigationOffsetPercent ('X') + " " + this.getNavigationOffsetPercent ('Y') + ";\nset navigationDepth " + this.getNavigationDepthPercent () + ";\nset navigationSlab " + this.getNavigationSlabOffsetPercent () + ";\n\n";
			      });
	Clazz.defineStatics (c$,
			     "NAV_MODE_IGNORE", -2,
			     "NAV_MODE_ZOOMED", -1,
			     "NAV_MODE_NONE", 0,
			     "NAV_MODE_RESET", 1,
			     "NAV_MODE_NEWXY", 2,
			     "NAV_MODE_NEWXYZ", 3,
			     "NAV_MODE_NEWZ", 4);
    });
    // 
    //// org\jmol\modelset\Chain.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    c$ = Clazz.decorateAsClass (function () {
	this.model = null;
	this.chainID = '\0';
	this.isDna = false;
	this.isRna = false;
	this.groupCount = 0;
	this.groups = null;
	this.selectedGroupCount = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.modelset, "Chain");
    Clazz.prepareFields (c$, function () {
	this.groups =  new Array (16);
    });
    Clazz.defineMethod (c$, "getAtom", 
			function (index) {
			    return this.model.modelSet.atoms[index];
			}, "~N");
    Clazz.makeConstructor (c$, 
			   function (model, chainID) {
			       this.model = model;
			       this.chainID = chainID;
			   }, "org.jmol.modelset.Model,~S");
    Clazz.defineMethod (c$, "getGroup", 
			function (groupIndex) {
			    return this.groups[groupIndex];
			}, "~N");
    Clazz.defineMethod (c$, "getGroupCount", 
			function () {
			    return this.groupCount;
			});
    Clazz.defineMethod (c$, "calcSelectedGroupsCount", 
			function (bsSelected) {
			    this.selectedGroupCount = 0;
			    for (var i = 0; i < this.groupCount; i++) this.groups[i].selectedIndex = (this.groups[i].isSelected (bsSelected) ? this.selectedGroupCount++ : -1);

			}, "org.jmol.util.BitSet");
    Clazz.defineMethod (c$, "selectSeqcodeRange", 
			function (index0, seqcodeA, seqcodeB, bs) {
			    var seqcode;
			    var indexA;
			    var indexB;
			    var minDiff;
			    var isInexact = false;
			    for (indexA = index0; indexA < this.groupCount && this.groups[indexA].seqcode != seqcodeA; indexA++) {
			    }
			    if (indexA == this.groupCount) {
				if (index0 > 0) return -1;
				isInexact = true;
				minDiff = 2147483647;
				for (var i = this.groupCount; --i >= 0; ) if ((seqcode = this.groups[i].seqcode) > seqcodeA && (seqcode - seqcodeA) < minDiff) {
				    indexA = i;
				    minDiff = seqcode - seqcodeA;
				}
				if (minDiff == 2147483647) return -1;
			    }if (seqcodeB == 2147483647) {
				indexB = this.groupCount - 1;
				isInexact = true;
			    } else {
				for (indexB = indexA; indexB < this.groupCount && this.groups[indexB].seqcode != seqcodeB; indexB++) {
				}
				if (indexB == this.groupCount) {
				    if (index0 > 0) return -1;
				    isInexact = true;
				    minDiff = 2147483647;
				    for (var i = indexA; i < this.groupCount; i++) if ((seqcode = this.groups[i].seqcode) < seqcodeB && (seqcodeB - seqcode) < minDiff) {
					indexB = i;
					minDiff = seqcodeB - seqcode;
				    }
				    if (minDiff == 2147483647) return -1;
				}}for (var i = indexA; i <= indexB; ++i) this.groups[i].selectAtoms (bs);

			    return (isInexact ? -1 : indexB + 1);
			}, "~N,~N,~N,org.jmol.util.BitSet");
    Clazz.defineMethod (c$, "fixIndices", 
			function (atomsDeleted, bsDeleted) {
			    for (var i = 0; i < this.groupCount; i++) this.groups[i].fixIndices (atomsDeleted, bsDeleted);

			}, "~N,org.jmol.util.BitSet");
    Clazz.defineMethod (c$, "setAtomBitSet", 
			function (bs) {
			    for (var i = 0; i < this.groupCount; i++) this.groups[i].selectAtoms (bs);

			}, "org.jmol.util.BitSet");
    // 
    //// org\jmol\modelset\Model.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.util.BitSet", "$.StringXBuilder"], "org.jmol.modelset.Model", ["java.util.Hashtable", "org.jmol.util.ArrayUtil", "$.BitSetUtil"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.modelSet = null;
	    this.modelIndex = 0;
	    this.fileIndex = 0;
	    this.hydrogenCount = 0;
	    this.isBioModel = false;
	    this.isPdbWithMultipleBonds = false;
	    this.trajectoryBaseIndex = 0;
	    this.hasRasmolHBonds = false;
	    this.loadState = "";
	    this.loadScript = null;
	    this.isModelKit = false;
	    this.isTrajectory = false;
	    this.selectedTrajectory = -1;
	    this.dataFrames = null;
	    this.dataSourceFrame = -1;
	    this.jmolData = null;
	    this.jmolFrameType = null;
	    this.firstAtomIndex = 0;
	    this.atomCount = 0;
	    this.bsAtoms = null;
	    this.bsAtomsDeleted = null;
	    this.bondCount = -1;
	    this.firstMoleculeIndex = 0;
	    this.moleculeCount = 0;
	    this.nAltLocs = 0;
	    this.nInsertions = 0;
	    this.groupCount = -1;
	    this.chainCount = 0;
	    this.chains = null;
	    this.biosymmetryCount = 0;
	    this.auxiliaryInfo = null;
	    this.properties = null;
	    this.defaultRotationRadius = 0;
	    this.defaultStructure = null;
	    this.orientation = null;
	    this.structureTainted = false;
	    this.isJmolDataFrame = false;
	    this.frameDelay = 0;
	    this.unitCell = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "Model");
	Clazz.prepareFields (c$, function () {
	    this.loadScript =  new org.jmol.util.StringXBuilder ();
	    this.bsAtoms =  new org.jmol.util.BitSet ();
	    this.bsAtomsDeleted =  new org.jmol.util.BitSet ();
	    this.chains =  new Array (8);
	});
	Clazz.defineMethod (c$, "getModelSet", 
			    function () {
				return this.modelSet;
			    });
	Clazz.defineMethod (c$, "isModelkit", 
			    function () {
				return this.isModelKit;
			    });
	Clazz.defineMethod (c$, "getTrueAtomCount", 
			    function () {
				return this.bsAtoms.cardinality () - this.bsAtomsDeleted.cardinality ();
			    });
	Clazz.defineMethod (c$, "resetBoundCount", 
			    function () {
				this.bondCount = -1;
			    });
	Clazz.defineMethod (c$, "getBondCount", 
			    function () {
				if (this.bondCount >= 0) return this.bondCount;
				var bonds = this.modelSet.getBonds ();
				this.bondCount = 0;
				for (var i = this.modelSet.getBondCount (); --i >= 0; ) if (bonds[i].atom1.modelIndex == this.modelIndex) this.bondCount++;

				return this.bondCount;
			    });
	Clazz.makeConstructor (c$, 
			       function (modelSet, modelIndex, trajectoryBaseIndex, jmolData, properties, auxiliaryInfo) {
				   this.modelSet = modelSet;
				   this.dataSourceFrame = this.modelIndex = modelIndex;
				   this.isTrajectory = (trajectoryBaseIndex >= 0);
				   this.trajectoryBaseIndex = (this.isTrajectory ? trajectoryBaseIndex : modelIndex);
				   if (auxiliaryInfo == null) {
				       auxiliaryInfo =  new java.util.Hashtable ();
				   }this.auxiliaryInfo = auxiliaryInfo;
				   if (auxiliaryInfo.containsKey ("biosymmetryCount")) this.biosymmetryCount = (auxiliaryInfo.get ("biosymmetryCount")).intValue ();
				   this.properties = properties;
				   if (jmolData == null) {
				       this.jmolFrameType = "modelSet";
				   } else {
				       this.jmolData = jmolData;
				       this.isJmolDataFrame = true;
				       auxiliaryInfo.put ("jmolData", jmolData);
				       auxiliaryInfo.put ("title", jmolData);
				       this.jmolFrameType = (jmolData.indexOf ("ramachandran") >= 0 ? "ramachandran" : jmolData.indexOf ("quaternion") >= 0 ? "quaternion" : "data");
				   }}, "org.jmol.modelset.ModelSet,~N,~N,~S,java.util.Properties,java.util.Map");
	Clazz.defineMethod (c$, "setNAltLocs", 
			    function (nAltLocs) {
				this.nAltLocs = nAltLocs;
			    }, "~N");
	Clazz.defineMethod (c$, "setNInsertions", 
			    function (nInsertions) {
				this.nInsertions = nInsertions;
			    }, "~N");
	Clazz.defineMethod (c$, "getModelNumberDotted", 
			    function () {
				return this.modelSet.getModelNumberDotted (this.modelIndex);
			    });
	Clazz.defineMethod (c$, "getModelTitle", 
			    function () {
				return this.modelSet.getModelTitle (this.modelIndex);
			    });
	Clazz.defineMethod (c$, "isStructureTainted", 
			    function () {
				return this.structureTainted;
			    });
	Clazz.defineMethod (c$, "getChains", 
			    function () {
				return this.chains;
			    });
	Clazz.defineMethod (c$, "getChainCount", 
			    function (countWater) {
				if (this.chainCount > 1 && !countWater) for (var i = 0; i < this.chainCount; i++) if (this.chains[i].chainID == '\0') return this.chainCount - 1;

				return this.chainCount;
			    }, "~B");
	Clazz.defineMethod (c$, "getGroupCountHetero", 
			    function (isHetero) {
				var n = 0;
				for (var i = this.chainCount; --i >= 0; ) for (var j = this.chains[i].groupCount; --j >= 0; ) if (this.chains[i].groups[j].isHetero () == isHetero) n++;


				return n;
			    }, "~B");
	Clazz.defineMethod (c$, "calcSelectedGroupsCount", 
			    function (bsSelected) {
				for (var i = this.chainCount; --i >= 0; ) this.chains[i].calcSelectedGroupsCount (bsSelected);

			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getGroupCount", 
			    function () {
				if (this.groupCount < 0) {
				    this.groupCount = 0;
				    for (var i = this.chainCount; --i >= 0; ) this.groupCount += this.chains[i].getGroupCount ();

				}return this.groupCount;
			    });
	Clazz.defineMethod (c$, "getChainAt", 
			    function (i) {
				return (i < this.chainCount ? this.chains[i] : null);
			    }, "~N");
	Clazz.defineMethod (c$, "getChain", 
			    function (chainID) {
				for (var i = this.chainCount; --i >= 0; ) {
				    var chain = this.chains[i];
				    if (chain.chainID == chainID) return chain;
				}
				return null;
			    }, "~S");
	Clazz.defineMethod (c$, "fixIndices", 
			    function (modelIndex, nAtomsDeleted, bsDeleted) {
				if (this.dataSourceFrame > modelIndex) this.dataSourceFrame--;
				if (this.trajectoryBaseIndex > modelIndex) this.trajectoryBaseIndex--;
				this.firstAtomIndex -= nAtomsDeleted;
				for (var i = 0; i < this.chainCount; i++) this.chains[i].fixIndices (nAtomsDeleted, bsDeleted);

				org.jmol.util.BitSetUtil.deleteBits (this.bsAtoms, bsDeleted);
				org.jmol.util.BitSetUtil.deleteBits (this.bsAtomsDeleted, bsDeleted);
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "freeze", 
			    function () {
				this.chains = org.jmol.util.ArrayUtil.arrayCopyObject (this.chains, this.chainCount);
				this.groupCount = -1;
				this.getGroupCount ();
				for (var i = 0; i < this.chainCount; ++i) this.chains[i].groups = org.jmol.util.ArrayUtil.arrayCopyObject (this.chains[i].groups, this.chains[i].groupCount);

			    });
	Clazz.defineMethod (c$, "getPdbData", 
			    function (viewer, type, ctype, isDraw, bsSelected, sb, tokens, pdbCONECT, bsWritten) {
			    }, "org.jmol.viewer.Viewer,~S,~S,~B,org.jmol.util.BitSet,org.jmol.io.OutputStringBuilder,~A,org.jmol.util.StringXBuilder,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getDefaultLargePDBRendering", 
			    function (sb, maxAtoms) {
			    }, "org.jmol.util.StringXBuilder,~N");
	Clazz.defineMethod (c$, "getBioBranches", 
			    function (bioBranches) {
				return bioBranches;
			    }, "java.util.List");
	Clazz.defineMethod (c$, "getGroupsWithin", 
			    function (nResidues, bs, bsResult) {
			    }, "~N,org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getSequenceBits", 
			    function (specInfo, bs, bsResult) {
			    }, "~S,org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getRasmolHydrogenBonds", 
			    function (bsA, bsB, vHBonds, nucleicOnly, nMax, dsspIgnoreHydrogens, bsHBonds) {
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet,java.util.List,~B,~N,~B,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "clearRasmolHydrogenBonds", 
			    function (bsAtoms) {
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "clearBioPolymers", 
			    function () {
			    });
	Clazz.defineMethod (c$, "calcSelectedMonomersCount", 
			    function (bsSelected) {
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calculatePolymers", 
			    function (groups, groupCount, baseGroupIndex, modelsExcluded) {
			    }, "~A,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAllPolymerInfo", 
			    function (bs, finalInfo, modelVector) {
			    }, "org.jmol.util.BitSet,java.util.Map,java.util.List");
	Clazz.defineMethod (c$, "getBioPolymerCount", 
			    function () {
				return 0;
			    });
	Clazz.defineMethod (c$, "getPolymerPointsAndVectors", 
			    function (bs, vList, isTraceAlpha, sheetSmoothing) {
			    }, "org.jmol.util.BitSet,java.util.List,~B,~N");
	Clazz.defineMethod (c$, "getPolymerLeadMidPoints", 
			    function (iPolymer) {
				return null;
			    }, "~N");
	Clazz.defineMethod (c$, "recalculateLeadMidpointsAndWingVectors", 
			    function () {
			    });
	Clazz.defineMethod (c$, "addSecondaryStructure", 
			    function (type, structureID, serialID, strandCount, startChainID, startSeqcode, endChainID, endSeqcode) {
			    }, "org.jmol.constant.EnumStructure,~S,~N,~N,~S,~N,~S,~N");
	Clazz.defineMethod (c$, "calculateStructures", 
			    function (asDSSP, doReport, dsspIgnoreHydrogen, setStructure, includeAlpha) {
				return "";
			    }, "~B,~B,~B,~B,~B");
	Clazz.defineMethod (c$, "setStructureList", 
			    function (structureList) {
			    }, "java.util.Map");
	Clazz.defineMethod (c$, "getChimeInfo", 
			    function (sb, nHetero) {
				sb.append ("\nNumber of Atoms ..... " + (this.modelSet.atomCount - nHetero));
				if (nHetero > 0) sb.append (" (" + nHetero + ")");
				sb.append ("\nNumber of Bonds ..... " + this.modelSet.bondCount);
				sb.append ("\nNumber of Models ...... " + this.modelSet.modelCount);
			    }, "org.jmol.util.StringXBuilder,~N");
	Clazz.defineMethod (c$, "calculateStruts", 
			    function (modelSet, bs1, bs2) {
				return 0;
			    }, "org.jmol.modelset.ModelSet,org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calculateStraightness", 
			    function (viewer, ctype, qtype, mStep) {
			    }, "org.jmol.viewer.Viewer,~S,~S,~N");
	Clazz.defineMethod (c$, "selectSeqcodeRange", 
			    function (seqcodeA, seqcodeB, chainID, bs, caseSensitive) {
			    }, "~N,~N,~S,org.jmol.util.BitSet,~B");
	Clazz.defineMethod (c$, "setConformation", 
			    function (bsConformation) {
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getPdbConformation", 
			    function (bsConformation, conformationIndex) {
				return false;
			    }, "org.jmol.util.BitSet,~N");
	Clazz.defineMethod (c$, "getProteinStructureState", 
			    function (bsAtoms, taintedOnly, needPhiPsi, mode) {
				return null;
			    }, "org.jmol.util.BitSet,~B,~B,~N");
	Clazz.defineMethod (c$, "getFullPDBHeader", 
			    function () {
				return null;
			    });
    });
    // 
    //// org\jmol\modelset\ModelSet.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.modelset");
    Clazz.load (["org.jmol.modelset.ModelCollection", "org.jmol.util.Matrix3f", "$.Matrix4f", "$.Vector3f"], "org.jmol.modelset.ModelSet", ["java.util.ArrayList", "org.jmol.api.Interface", "org.jmol.atomdata.RadiusData", "org.jmol.modelset.Bond", "org.jmol.util.BitSet", "$.BitSetUtil", "$.Escape", "$.JmolEdge", "$.JmolMolecule", "$.Measure", "$.Point3f", "$.Quaternion", "$.StringXBuilder", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.selectionHaloEnabled = false;
	    this.echoShapeActive = false;
	    this.modelSetTypeName = null;
	    this.closest = null;
	    this.pointGroup = null;
	    this.matTemp = null;
	    this.matInv = null;
	    this.mat4 = null;
	    this.mat4t = null;
	    this.vTemp = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.modelset, "ModelSet", org.jmol.modelset.ModelCollection);
	Clazz.prepareFields (c$, function () {
	    this.closest =  new Array (1);
	    this.matTemp =  new org.jmol.util.Matrix3f ();
	    this.matInv =  new org.jmol.util.Matrix3f ();
	    this.mat4 =  new org.jmol.util.Matrix4f ();
	    this.mat4t =  new org.jmol.util.Matrix4f ();
	    this.vTemp =  new org.jmol.util.Vector3f ();
	});
	Clazz.makeConstructor (c$, 
			       function (viewer, name) {
				   Clazz.superConstructor (this, org.jmol.modelset.ModelSet, []);
				   this.viewer = viewer;
				   this.modelSetName = name;
			       }, "org.jmol.viewer.Viewer,~S");
	Clazz.defineMethod (c$, "releaseModelSet", 
			    function () {
				this.models = null;
				this.closest[0] = null;
				Clazz.superCall (this, org.jmol.modelset.ModelSet, "releaseModelSet", []);
			    });
	Clazz.defineMethod (c$, "setSelectionHaloEnabled", 
			    function (selectionHaloEnabled) {
				this.selectionHaloEnabled = selectionHaloEnabled;
			    }, "~B");
	Clazz.defineMethod (c$, "getSelectionHaloEnabled", 
			    function () {
				return this.selectionHaloEnabled;
			    });
	Clazz.defineMethod (c$, "getEchoStateActive", 
			    function () {
				return this.echoShapeActive;
			    });
	Clazz.defineMethod (c$, "setEchoStateActive", 
			    function (TF) {
				this.echoShapeActive = TF;
			    }, "~B");
	Clazz.defineMethod (c$, "getModelSetTypeName", 
			    function () {
				return this.modelSetTypeName;
			    });
	Clazz.defineMethod (c$, "getModelNumberIndex", 
			    function (modelNumber, useModelNumber, doSetTrajectory) {
				if (useModelNumber) {
				    for (var i = 0; i < this.modelCount; i++) if (this.modelNumbers[i] == modelNumber || modelNumber < 1000000 && this.modelNumbers[i] == 1000000 + modelNumber) return i;

				    return -1;
				}for (var i = 0; i < this.modelCount; i++) if (this.modelFileNumbers[i] == modelNumber) {
				    if (doSetTrajectory && this.isTrajectory (i)) this.setTrajectory (i);
				    return i;
				}
				return -1;
			    }, "~N,~B,~B");
	Clazz.defineMethod (c$, "getTrajectoryInfo", 
			    function () {
				var s = "";
				if (this.trajectorySteps == null) return "";
				for (var i = this.modelCount; --i >= 0; ) if (this.models[i].selectedTrajectory >= 0) {
				    s = " or " + this.getModelNumberDotted (this.models[i].selectedTrajectory) + s;
				    i = this.models[i].trajectoryBaseIndex;
				}
				if (s.length > 0) s = "set trajectory {" + s.substring (4) + "}";
				return s;
			    });
	Clazz.defineMethod (c$, "getBitSetTrajectories", 
			    function () {
				if (this.trajectorySteps == null) return null;
				var bsModels =  new org.jmol.util.BitSet ();
				for (var i = this.modelCount; --i >= 0; ) if (this.models[i].selectedTrajectory >= 0) {
				    bsModels.set (this.models[i].selectedTrajectory);
				    i = this.models[i].trajectoryBaseIndex;
				}
				return bsModels;
			    });
	Clazz.defineMethod (c$, "setTrajectoryBs", 
			    function (bsModels) {
				for (var i = 0; i < this.modelCount; i++) if (bsModels.get (i)) this.setTrajectory (i);

			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setTrajectory", 
			    function (modelIndex) {
				if (modelIndex < 0 || !this.isTrajectory (modelIndex)) return;
				if (this.atoms[this.models[modelIndex].firstAtomIndex].modelIndex == modelIndex) return;
				var baseModelIndex = this.models[modelIndex].trajectoryBaseIndex;
				this.models[baseModelIndex].selectedTrajectory = modelIndex;
				this.setAtomPositions (baseModelIndex, modelIndex, this.trajectorySteps.get (modelIndex), (this.vibrationSteps == null ? null : this.vibrationSteps.get (modelIndex)), true);
				var m = this.viewer.getCurrentModelIndex ();
				if (m >= 0 && m != modelIndex && this.models[m].fileIndex == this.models[modelIndex].fileIndex) this.viewer.setCurrentModelIndexClear (modelIndex, false);
			    }, "~N");
	Clazz.defineMethod (c$, "setAtomPositions", 
			    ($fz = function (baseModelIndex, modelIndex, trajectory, vibrations, isFractional) {
				var bs =  new org.jmol.util.BitSet ();
				var vib =  new org.jmol.util.Vector3f ();
				var iFirst = this.models[baseModelIndex].firstAtomIndex;
				var iMax = iFirst + this.getAtomCountInModel (baseModelIndex);
				for (var pt = 0, i = iFirst; i < iMax && pt < trajectory.length && trajectory[pt] != null; i++, pt++) {
				    if (isFractional) this.atoms[i].setFractionalCoordTo (trajectory[pt], true);
				    else this.atoms[i].setT (trajectory[pt]);
				    this.atoms[i].modelIndex = modelIndex;
				    if (this.vibrationSteps != null) {
					if (vibrations != null && vibrations[pt] != null) vib = vibrations[pt];
					this.setVibrationVector (i, vib.x, vib.y, vib.z);
				    }bs.set (i);
				}
				this.initializeBspf ();
				this.validateBspfForModel (baseModelIndex, false);
				this.recalculateLeadMidpointsAndWingVectors (baseModelIndex);
				this.shapeManager.refreshShapeTrajectories (baseModelIndex, bs, null);
				if (this.models[baseModelIndex].hasRasmolHBonds) {
				    this.models[baseModelIndex].clearRasmolHydrogenBonds (null);
				    this.models[baseModelIndex].getRasmolHydrogenBonds (bs, bs, null, false, 2147483647, false, null);
				}}, $fz.isPrivate = true, $fz), "~N,~N,~A,~A,~B");
	Clazz.defineMethod (c$, "getFrameOffsets", 
			    function (bsAtoms) {
				if (bsAtoms == null) return null;
				var offsets =  new Array (this.modelCount);
				for (var i = 0; i < this.modelCount; i++) offsets[i] =  new org.jmol.util.Point3f ();

				var lastModel = 0;
				var n = 0;
				var offset = offsets[0];
				var asTrajectory = (this.trajectorySteps != null && this.trajectorySteps.size () == this.modelCount);
				var m1 = (asTrajectory ? this.modelCount : 1);
				for (var m = 0; m < m1; m++) {
				    if (asTrajectory) this.setTrajectory (m);
				    for (var i = 0; i <= this.atomCount; i++) {
					if (i == this.atomCount || this.atoms[i].modelIndex != lastModel) {
					    if (n > 0) {
						offset.scale (-1.0 / n);
						if (lastModel != 0) offset.sub (offsets[0]);
						n = 0;
					    }if (i == this.atomCount) break;
					    lastModel = this.atoms[i].modelIndex;
					    offset = offsets[lastModel];
					}if (!bsAtoms.get (i)) continue;
					offset.add (this.atoms[i]);
					n++;
				    }
				}
				offsets[0].set (0, 0, 0);
				return offsets;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getAtomBits", 
			    function (tokType, specInfo) {
				switch (tokType) {
				case 1048610:
				    var modelNumber = (specInfo).intValue ();
				    var modelIndex = this.getModelNumberIndex (modelNumber, true, true);
				    return (modelIndex < 0 && modelNumber > 0 ?  new org.jmol.util.BitSet () : this.viewer.getModelUndeletedAtomsBitSet (modelIndex));
				}
				return Clazz.superCall (this, org.jmol.modelset.ModelSet, "getAtomBits", [tokType, specInfo]);
			    }, "~N,~O");
	Clazz.defineMethod (c$, "getAtomLabel", 
			    function (i) {
				return this.viewer.getShapePropertyIndex (5, "label", i);
			    }, "~N");
	Clazz.defineMethod (c$, "findNearestAtomIndex", 
			    function (x, y, bsNot) {
				if (this.atomCount == 0) return -1;
				this.closest[0] = null;
				if (this.g3d.isAntialiased ()) {
				    x <<= 1;
				    y <<= 1;
				}this.findNearestAtomIndex (x, y, this.closest, bsNot);
				this.shapeManager.findNearestShapeAtomIndex (x, y, this.closest, bsNot);
				var closestIndex = (this.closest[0] == null ? -1 : this.closest[0].index);
				this.closest[0] = null;
				return closestIndex;
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calculateStructures", 
			    function (bsAtoms, asDSSP, dsspIgnoreHydrogen, setStructure) {
				var bsAllAtoms =  new org.jmol.util.BitSet ();
				var bsModelsExcluded = org.jmol.util.BitSetUtil.copyInvert (this.modelsOf (bsAtoms, bsAllAtoms), this.modelCount);
				if (!setStructure) return this.calculateStructuresAllExcept (bsModelsExcluded, asDSSP, true, dsspIgnoreHydrogen, false, false);
				for (var i = 0; i < this.modelCount; i++) if (!bsModelsExcluded.get (i)) this.models[i].clearBioPolymers ();

				this.calculatePolymers (null, 0, 0, bsModelsExcluded);
				var ret = this.calculateStructuresAllExcept (bsModelsExcluded, asDSSP, true, dsspIgnoreHydrogen, true, false);
				this.viewer.resetBioshapes (bsAllAtoms);
				this.setStructureIndexes ();
				return ret;
			    }, "org.jmol.util.BitSet,~B,~B,~B");
	Clazz.defineMethod (c$, "calculatePointGroup", 
			    function (bsAtoms) {
				return this.calculatePointGroupForFirstModel (bsAtoms, false, false, false, null, 0, 0);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getPointGroupInfo", 
			    function (bsAtoms) {
				return this.calculatePointGroupForFirstModel (bsAtoms, false, false, true, null, 0, 0);
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getPointGroupAsString", 
			    function (bsAtoms, asDraw, type, index, scale) {
				return this.calculatePointGroupForFirstModel (bsAtoms, true, asDraw, false, type, index, scale);
			    }, "org.jmol.util.BitSet,~B,~S,~N,~N");
	Clazz.defineMethod (c$, "calculatePointGroupForFirstModel", 
			    ($fz = function (bsAtoms, doAll, asDraw, asInfo, type, index, scale) {
				var modelIndex = this.viewer.getCurrentModelIndex ();
				var iAtom = (bsAtoms == null ? -1 : bsAtoms.nextSetBit (0));
				if (modelIndex < 0 && iAtom >= 0) modelIndex = this.atoms[iAtom].getModelIndex ();
				if (modelIndex < 0) {
				    modelIndex = this.viewer.getVisibleFramesBitSet ().nextSetBit (0);
				    bsAtoms = null;
				}var bs = this.viewer.getModelUndeletedAtomsBitSet (modelIndex);
				if (bsAtoms != null) bs.and (bsAtoms);
				iAtom = bs.nextSetBit (0);
				if (iAtom < 0) {
				    bs = this.viewer.getModelUndeletedAtomsBitSet (modelIndex);
				    iAtom = bs.nextSetBit (0);
				}var obj = this.viewer.getShapePropertyIndex (18, "mad", iAtom);
				var haveVibration = (obj != null && (obj).intValue () != 0 || this.viewer.isVibrationOn ());
				var symmetry = org.jmol.api.Interface.getOptionInterface ("symmetry.Symmetry");
				this.pointGroup = symmetry.setPointGroup (this.pointGroup, this.atoms, bs, haveVibration, this.viewer.getPointGroupTolerance (0), this.viewer.getPointGroupTolerance (1));
				if (!doAll && !asInfo) return this.pointGroup.getPointGroupName ();
				var ret = this.pointGroup.getPointGroupInfo (modelIndex, asDraw, asInfo, type, index, scale);
				if (asInfo) return ret;
				return (this.modelCount > 1 ? "frame " + this.getModelNumberDotted (modelIndex) + "; " : "") + ret;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,~B,~B,~B,~S,~N,~N");
	Clazz.defineMethod (c$, "modelsOf", 
			    ($fz = function (bsAtoms, bsAllAtoms) {
				var bsModels = org.jmol.util.BitSetUtil.newBitSet (this.modelCount);
				var isAll = (bsAtoms == null);
				var i0 = (isAll ? this.atomCount - 1 : bsAtoms.nextSetBit (0));
				for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsAtoms.nextSetBit (i + 1))) {
				    var modelIndex = this.models[this.atoms[i].modelIndex].trajectoryBaseIndex;
				    if (this.isJmolDataFrameForModel (modelIndex)) continue;
				    bsModels.set (modelIndex);
				    bsAllAtoms.set (i);
				}
				return bsModels;
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getDefaultStructure", 
			    function (bsAtoms, bsAllAtoms) {
				var bsModels = this.modelsOf (bsAtoms, bsAllAtoms);
				var ret =  new org.jmol.util.StringXBuilder ();
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) if (this.models[i].isBioModel && this.models[i].defaultStructure != null) ret.append (this.models[i].defaultStructure);

				return ret.toString ();
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "assignAromaticBonds", 
			    function (isUserCalculation) {
				Clazz.superCall (this, org.jmol.modelset.ModelSet, "assignAromaticBondsBs", [isUserCalculation, null]);
				if (isUserCalculation) this.shapeManager.setShapeSizeBs (1, -2147483648, null, this.bsAromatic);
			    }, "~B");
	Clazz.defineMethod (c$, "makeConnections", 
			    function (minDistance, maxDistance, order, connectOperation, bsA, bsB, bsBonds, isBonds, addGroup, energy) {
				if (connectOperation == 1073741852 && order != 2048) {
				    var stateScript = "connect ";
				    if (minDistance != 0.1) stateScript += minDistance + " ";
				    if (maxDistance != 1.0E8) stateScript += maxDistance + " ";
				    this.addStateScript (stateScript, (isBonds ? bsA : null), (isBonds ? null : bsA), (isBonds ? null : bsB), " auto", false, true);
				}this.moleculeCount = 0;
				return Clazz.superCall (this, org.jmol.modelset.ModelSet, "makeConnections", [minDistance, maxDistance, order, connectOperation, bsA, bsB, bsBonds, isBonds, addGroup, energy]);
			    }, "~N,~N,~N,~N,org.jmol.util.BitSet,org.jmol.util.BitSet,org.jmol.util.BitSet,~B,~B,~N");
	Clazz.defineMethod (c$, "setPdbConectBonding", 
			    function (baseAtomIndex, baseModelIndex, bsExclude) {
				var mad = this.viewer.getMadBond ();
				for (var i = baseModelIndex; i < this.modelCount; i++) {
				    var vConnect = this.getModelAuxiliaryInfoValue (i, "PDB_CONECT_bonds");
				    if (vConnect == null) continue;
				    var nConnect = vConnect.size ();
				    this.setModelAuxiliaryInfo (i, "initialBondCount", Integer.$valueOf (nConnect));
				    var atomInfo = this.getModelAuxiliaryInfoValue (i, "PDB_CONECT_firstAtom_count_max");
				    var firstAtom = atomInfo[0] + baseAtomIndex;
				    var atomMax = firstAtom + atomInfo[1];
				    var max = atomInfo[2];
				    var serialMap =  Clazz.newIntArray (max + 1, 0);
				    var iSerial;
				    for (var iAtom = firstAtom; iAtom < atomMax; iAtom++) if ((iSerial = this.atomSerials[iAtom]) > 0) serialMap[iSerial] = iAtom + 1;

				    for (var iConnect = 0; iConnect < nConnect; iConnect++) {
					var pair = vConnect.get (iConnect);
					var sourceSerial = pair[0];
					var targetSerial = pair[1];
					var order = pair[2];
					if (sourceSerial < 0 || targetSerial < 0 || sourceSerial > max || targetSerial > max) continue;
					var sourceIndex = serialMap[sourceSerial] - 1;
					var targetIndex = serialMap[targetSerial] - 1;
					if (sourceIndex < 0 || targetIndex < 0) continue;
					if (bsExclude != null) {
					    if (this.atoms[sourceIndex].isHetero ()) bsExclude.set (sourceIndex);
					    if (this.atoms[targetIndex].isHetero ()) bsExclude.set (targetIndex);
					}this.checkValencesAndBond (this.atoms[sourceIndex], this.atoms[targetIndex], order, (order == 2048 ? 1 : mad), null);
				    }
				}
			    }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteAllBonds", 
			    function () {
				this.moleculeCount = 0;
				for (var i = this.stateScripts.size (); --i >= 0; ) {
				    if (this.stateScripts.get (i).isConnect ()) {
					this.stateScripts.remove (i);
				    }}
				Clazz.superCall (this, org.jmol.modelset.ModelSet, "deleteAllBonds", []);
			    });
	Clazz.defineMethod (c$, "getDefinedState", 
			    function (sfunc, isAll) {
				var len = this.stateScripts.size ();
				if (len == 0) return "";
				var haveDefs = false;
				var commands =  new org.jmol.util.StringXBuilder ();
				var cmd;
				for (var i = 0; i < len; i++) {
				    var ss = this.stateScripts.get (i);
				    if (ss.inDefinedStateBlock && (cmd = ss.toString ()).length > 0) {
					commands.append ("  ").append (cmd).append ("\n");
					haveDefs = true;
				    }}
				if (!haveDefs) return "";
				cmd = "";
				if (isAll && sfunc != null) {
				    sfunc.append ("  _setDefinedState;\n");
				    cmd = "function _setDefinedState() {\n\n";
				}if (sfunc != null) commands.append ("\n}\n\n");
				return cmd + commands.toString ();
			    }, "org.jmol.util.StringXBuilder,~B");
	Clazz.defineMethod (c$, "getState", 
			    function (sfunc, isAll, withProteinStructure) {
				var commands =  new org.jmol.util.StringXBuilder ();
				if (isAll && sfunc != null) {
				    sfunc.append ("  _setModelState;\n");
				    commands.append ("function _setModelState() {\n");
				}var cmd;
				if (isAll) {
				    var len = this.stateScripts.size ();
				    for (var i = 0; i < len; i++) {
					var ss = this.stateScripts.get (i);
					if (!ss.inDefinedStateBlock && (cmd = ss.toString ()).length > 0) {
					    commands.append ("  ").append (cmd).append ("\n");
					}}
				    var sb =  new org.jmol.util.StringXBuilder ();
				    for (var i = 0; i < this.bondCount; i++) if (!this.models[this.bonds[i].atom1.modelIndex].isModelKit) if (this.bonds[i].isHydrogen () || (this.bonds[i].order & 131072) != 0) {
					var bond = this.bonds[i];
					var index = bond.atom1.index;
					if (bond.atom1.getGroup ().isAdded (index)) index = -1 - index;
					sb.appendI (index).appendC ('\t').appendI (bond.atom2.index).appendC ('\t').appendI (bond.order & -131073).appendC ('\t').appendF (bond.mad / 1000).appendC ('\t').appendF (bond.getEnergy ()).appendC ('\t').append (org.jmol.util.JmolEdge.getBondOrderNameFromOrder (bond.order)).append (";\n");
				    }
				    if (sb.length () > 0) commands.append ("data \"connect_atoms\"\n").appendSB (sb).append ("end \"connect_atoms\";\n");
				    commands.append ("\n");
				}if (this.haveHiddenBonds) {
				    var bs =  new org.jmol.modelset.Bond.BondSet ();
				    for (var i = this.bondCount; --i >= 0; ) if (this.bonds[i].mad != 0 && (this.bonds[i].shapeVisibilityFlags & org.jmol.modelset.Bond.myVisibilityFlag) == 0) bs.set (i);

				    if (bs.isEmpty ()) this.haveHiddenBonds = false;
				    else commands.append ("  hide ").append (org.jmol.util.Escape.escapeBs (bs, false)).append (";\n");
				}this.viewer.setModelVisibility ();
				if (withProteinStructure) commands.append (this.getProteinStructureState (null, isAll, false, 0));
				this.viewer.getShapeState (commands, isAll, 2147483647);
				if (isAll) {
				    var needOrientations = false;
				    for (var i = 0; i < this.modelCount; i++) if (this.models[i].isJmolDataFrame) {
					needOrientations = true;
					break;
				    }
				    for (var i = 0; i < this.modelCount; i++) {
					var fcmd = "  frame " + this.getModelNumberDotted (i);
					var s = this.getModelAuxiliaryInfoValue (i, "modelID");
					if (s != null && !s.equals (this.getModelAuxiliaryInfoValue (i, "modelID0"))) commands.append (fcmd).append ("; frame ID ").append (org.jmol.util.Escape.escapeStr (s)).append (";\n");
					var t = this.frameTitles[i];
					if (t != null && t.length > 0) commands.append (fcmd).append ("; frame title ").append (org.jmol.util.Escape.escapeStr (t)).append (";\n");
					if (needOrientations && this.models[i].orientation != null && !this.isTrajectorySubFrame (i)) commands.append (fcmd).append ("; ").append (this.models[i].orientation.getMoveToText (false)).append (";\n");
					if (this.models[i].frameDelay != 0 && !this.isTrajectorySubFrame (i)) commands.append (fcmd).append ("; frame delay ").appendF (this.models[i].frameDelay / 1000).append (";\n");
					if (this.models[i].unitCell != null) {
					    commands.append (fcmd).append ("; unitcell ").append (org.jmol.util.Escape.escape (this.models[i].unitCell.getUnitCellVectors ())).append (";\n");
					    this.viewer.getShapeState (commands, isAll, 32);
					}}
				    if (this.unitCells != null) {
					for (var i = 0; i < this.modelCount; i++) {
					    var symmetry = this.getUnitCell (i);
					    if (symmetry == null) continue;
					    commands.append ("  frame ").append (this.getModelNumberDotted (i));
					    var pt = symmetry.getFractionalOffset ();
					    if (pt != null) commands.append ("; set unitcell ").append (org.jmol.util.Escape.escapePt (pt));
					    pt = symmetry.getUnitCellMultiplier ();
					    if (pt != null) commands.append ("; set unitcell ").append (org.jmol.util.Escape.escapePt (pt));
					    commands.append (";\n");
					}
					this.viewer.getShapeState (commands, isAll, 32);
				    }commands.append ("  set fontScaling " + this.viewer.getFontScaling () + ";\n");
				    if (this.viewer.isModelKitMode ()) commands.append ("  set modelKitMode true;\n");
				}if (sfunc != null) commands.append ("\n}\n\n");
				return commands.toString ();
			    }, "org.jmol.util.StringXBuilder,~B,~B");
	Clazz.defineMethod (c$, "includeAllRelatedFrames", 
			    ($fz = function (bsModels) {
				var j;
				for (var i = 0; i < this.modelCount; i++) {
				    if (bsModels.get (i)) {
					if (this.isTrajectory (i) && !bsModels.get (j = this.models[i].trajectoryBaseIndex)) {
					    bsModels.set (j);
					    this.includeAllRelatedFrames (bsModels);
					    return;
					}continue;
				    }if (this.isTrajectory (i) && bsModels.get (this.models[i].trajectoryBaseIndex) || this.isJmolDataFrameForModel (i) && bsModels.get (this.models[i].dataSourceFrame)) bsModels.set (i);
				}
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "deleteModels", 
			    function (bsAtoms) {
				this.moleculeCount = 0;
				var bsModels = this.getModelBitSet (bsAtoms, false);
				this.includeAllRelatedFrames (bsModels);
				var nAtomsDeleted = 0;
				var nModelsDeleted = org.jmol.util.BitSetUtil.cardinalityOf (bsModels);
				if (nModelsDeleted == 0) return null;
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) this.clearDataFrameReference (i);

				var bsDeleted;
				if (nModelsDeleted == this.modelCount) {
				    bsDeleted = this.getModelAtomBitSetIncludingDeleted (-1, true);
				    this.viewer.zap (true, false, false);
				    return bsDeleted;
				}this.validateBspf (false);
				var newModels =  new Array (this.modelCount - nModelsDeleted);
				var oldModels = this.models;
				bsDeleted =  new org.jmol.util.BitSet ();
				for (var i = 0, mpt = 0; i < this.modelCount; i++) if (bsModels.get (i)) {
				    this.getAtomCountInModel (i);
				    bsDeleted.or (this.getModelAtomBitSetIncludingDeleted (i, false));
				} else {
				    this.models[i].modelIndex = mpt;
				    newModels[mpt++] = this.models[i];
				}
				this.models = newModels;
				var oldModelCount = this.modelCount;
				var bsBonds = this.getBondsForSelectedAtoms (bsDeleted, true);
				this.deleteBonds (bsBonds, true);
				for (var i = 0, mpt = 0; i < oldModelCount; i++) {
				    if (!bsModels.get (i)) {
					mpt++;
					continue;
				    }var nAtoms = oldModels[i].atomCount;
				    if (nAtoms == 0) continue;
				    nAtomsDeleted += nAtoms;
				    var bs = oldModels[i].bsAtoms;
				    var firstAtomIndex = oldModels[i].firstAtomIndex;
				    org.jmol.util.BitSetUtil.deleteBits (this.bsSymmetry, bs);
				    this.deleteModel (mpt, firstAtomIndex, nAtoms, bs, bsBonds);
				    for (var j = oldModelCount; --j > i; ) oldModels[j].fixIndices (mpt, nAtoms, bs);

				    this.viewer.deleteShapeAtoms ([newModels, this.atoms, [mpt, firstAtomIndex, nAtoms]], bs);
				    this.modelCount--;
				}
				this.deleteModel (-1, 0, 0, null, null);
				return bsDeleted;
			    }, "org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setAtomProperty", 
			    function (bs, tok, iValue, fValue, sValue, values, list) {
				switch (tok) {
				case 1115297793:
				case 1113200642:
				case 1113200647:
				case 1113200649:
				case 1113200650:
				case 1650071565:
				case 1113200654:
				    if (fValue > 4.0) fValue = 4.0;
				case 1113200646:
				case 1113200652:
				    var rd = null;
				    var mar = 0;
				    if (values == null) {
					if (fValue > 16) fValue = 16;
					if (fValue < 0) fValue = 0;
					mar = Clazz.doubleToInt (Math.floor (fValue * 2000));
				    } else {
					rd =  new org.jmol.atomdata.RadiusData (values, 0, null, null);
				    }this.shapeManager.setShapeSizeBs (org.jmol.viewer.JmolConstants.shapeTokenIndex (tok), mar, rd, bs);
				    return;
				}
				Clazz.superCall (this, org.jmol.modelset.ModelSet, "setAtomProperty", [bs, tok, iValue, fValue, sValue, values, list]);
			    }, "org.jmol.util.BitSet,~N,~N,~N,~S,~A,~A");
	Clazz.defineMethod (c$, "getFileData", 
			    function (modelIndex) {
				if (modelIndex < 0) return "";
				var fileData = this.getModelAuxiliaryInfoValue (modelIndex, "fileData");
				if (fileData != null) return fileData;
				if (!this.getModelAuxiliaryInfoBoolean (modelIndex, "isCIF")) return this.getPDBHeader (modelIndex);
				fileData = this.viewer.getCifData (modelIndex);
				this.setModelAuxiliaryInfo (modelIndex, "fileData", fileData);
				return fileData;
			    }, "~N");
	Clazz.defineMethod (c$, "calculateStruts", 
			    function (bs1, bs2) {
				this.viewer.setModelVisibility ();
				return Clazz.superCall (this, org.jmol.modelset.ModelSet, "calculateStruts", [bs1, bs2]);
			    }, "org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "addHydrogens", 
			    function (vConnections, pts) {
				var modelIndex = this.modelCount - 1;
				var bs =  new org.jmol.util.BitSet ();
				if (this.isTrajectory (modelIndex) || this.models[modelIndex].getGroupCount () > 1) {
				    return bs;
				}this.growAtomArrays (this.atomCount + pts.length);
				var rd = this.viewer.getDefaultRadiusData ();
				var mad = this.getDefaultMadFromOrder (1);
				for (var i = 0, n = this.models[modelIndex].atomCount + 1; i < vConnections.size (); i++, n++) {
				    var atom1 = vConnections.get (i);
				    var atom2 = this.addAtom (modelIndex, atom1.group, 1, "H" + n, n, n, pts[i].x, pts[i].y, pts[i].z, NaN, NaN, NaN, NaN, 0, 0, 100, NaN, null, false, 0, null);
				    atom2.setMadAtom (this.viewer, rd);
				    bs.set (atom2.index);
				    this.bondAtoms (atom1, atom2, 1, mad, null, 0, false, false);
				}
				this.shapeManager.loadDefaultShapes (this);
				return bs;
			    }, "java.util.List,~A");
	Clazz.defineMethod (c$, "setAtomCoordRelative", 
			    function (offset, bs) {
				this.setAtomsCoordRelative (bs, offset.x, offset.y, offset.z);
				this.mat4.setIdentity ();
				this.vTemp.setT (offset);
				this.mat4.setTranslation (this.vTemp);
				this.recalculatePositionDependentQuantities (bs, this.mat4);
			    }, "org.jmol.util.Tuple3f,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setAtomCoord", 
			    function (bs, tokType, xyzValues) {
				Clazz.superCall (this, org.jmol.modelset.ModelSet, "setAtomCoord", [bs, tokType, xyzValues]);
				switch (tokType) {
				case 1112541202:
				case 1112541203:
				case 1112541204:
				case 1146095631:
				    break;
				default:
				    this.recalculatePositionDependentQuantities (bs, null);
				}
			    }, "org.jmol.util.BitSet,~N,~O");
	Clazz.defineMethod (c$, "invertSelected", 
			    function (pt, plane, iAtom, invAtoms, bs) {
				if (pt != null) {
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					var x = (pt.x - this.atoms[i].x) * 2;
					var y = (pt.y - this.atoms[i].y) * 2;
					var z = (pt.z - this.atoms[i].z) * 2;
					this.setAtomCoordRelative (i, x, y, z);
				    }
				    return;
				}if (plane != null) {
				    var norm = org.jmol.util.Vector3f.new3 (plane.x, plane.y, plane.z);
				    norm.normalize ();
				    var d = Math.sqrt (plane.x * plane.x + plane.y * plane.y + plane.z * plane.z);
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					var twoD = -org.jmol.util.Measure.distanceToPlaneD (plane, d, this.atoms[i]) * 2;
					var x = norm.x * twoD;
					var y = norm.y * twoD;
					var z = norm.z * twoD;
					this.setAtomCoordRelative (i, x, y, z);
				    }
				    return;
				}if (iAtom >= 0) {
				    var thisAtom = this.atoms[iAtom];
				    var bonds = thisAtom.bonds;
				    if (bonds == null) return;
				    var bsAtoms =  new org.jmol.util.BitSet ();
				    var vNot =  new java.util.ArrayList ();
				    var bsModel = this.viewer.getModelUndeletedAtomsBitSet (thisAtom.modelIndex);
				    for (var i = 0; i < bonds.length; i++) {
					var a = bonds[i].getOtherAtom (thisAtom);
					if (invAtoms.get (a.index)) {
					    bsAtoms.or (org.jmol.util.JmolMolecule.getBranchBitSet (this.atoms, a.index, bsModel, null, iAtom, true, true));
					} else {
					    vNot.add (a);
					}}
				    if (vNot.size () == 0) return;
				    pt = org.jmol.util.Measure.getCenterAndPoints (vNot)[0];
				    var v = org.jmol.util.Vector3f.newV (thisAtom);
				    v.sub (pt);
				    var q = org.jmol.util.Quaternion.newVA (v, 180);
				    this.moveAtoms (null, q.getMatrix (), null, bsAtoms, thisAtom, true);
				}}, "org.jmol.util.Point3f,org.jmol.util.Point4f,~N,org.jmol.util.BitSet,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "moveAtoms", 
			    function (mNew, matrixRotate, translation, bs, center, isInternal) {
				if (mNew == null) {
				    this.matTemp.set (matrixRotate);
				} else {
				    this.matInv.set (matrixRotate);
				    this.matInv.invert ();
				    this.ptTemp.set (0, 0, 0);
				    this.matTemp.mul2 (mNew, matrixRotate);
				    this.matTemp.mul2 (this.matInv, this.matTemp);
				}if (isInternal) {
				    this.vTemp.setT (center);
				    this.mat4.setIdentity ();
				    this.mat4.setTranslation (this.vTemp);
				    this.mat4t.set (this.matTemp);
				    this.mat4.mul (this.mat4t);
				    this.mat4t.setIdentity ();
				    this.vTemp.scale (-1);
				    this.mat4t.setTranslation (this.vTemp);
				    this.mat4.mul (this.mat4t);
				} else {
				    this.mat4.set (this.matTemp);
				}for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
				    if (isInternal) {
					this.mat4.transform (this.atoms[i]);
				    } else {
					this.ptTemp.add (this.atoms[i]);
					this.mat4.transform (this.atoms[i]);
					this.ptTemp.sub (this.atoms[i]);
				    }this.taintAtom (i, 2);
				}
				if (!isInternal) {
				    this.ptTemp.scale (1 / bs.cardinality ());
				    if (translation == null) translation =  new org.jmol.util.Vector3f ();
				    translation.add (this.ptTemp);
				}if (translation != null) {
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) this.atoms[i].add (translation);

				    this.mat4t.setIdentity ();
				    this.mat4t.setTranslation (translation);
				    this.mat4.mul2 (this.mat4t, this.mat4);
				}this.recalculatePositionDependentQuantities (bs, this.mat4);
			    }, "org.jmol.util.Matrix3f,org.jmol.util.Matrix3f,org.jmol.util.Vector3f,org.jmol.util.BitSet,org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "recalculatePositionDependentQuantities", 
			    function (bs, mat) {
				if (this.getHaveStraightness ()) this.calculateStraightness ();
				this.recalculateLeadMidpointsAndWingVectors (-1);
				var bsModels = this.getModelBitSet (bs, false);
				for (var i = bsModels.nextSetBit (0); i >= 0; i = bsModels.nextSetBit (i + 1)) this.shapeManager.refreshShapeTrajectories (i, bs, mat);

			    }, "org.jmol.util.BitSet,org.jmol.util.Matrix4f");
    });
    // 
    //// org\jmol\util\Hermite.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Hermite", ["org.jmol.util.Point3f", "$.Vector3f"], function () {
	c$ = Clazz.declareType (org.jmol.util, "Hermite");
	c$.getHermiteList = Clazz.defineMethod (c$, "getHermiteList", 
						function (tension, p0, p1, p2, p3, p4, list, index0, n, isPt) {
						    var nPoints = n + 1;
						    var fnPoints = n - 1;
						    var x1 = p1.x;
						    var y1 = p1.y;
						    var z1 = p1.z;
						    var x2 = p2.x;
						    var y2 = p2.y;
						    var z2 = p2.z;
						    var xT1 = ((x2 - p0.x) * tension) / 8;
						    var yT1 = ((y2 - p0.y) * tension) / 8;
						    var zT1 = ((z2 - p0.z) * tension) / 8;
						    var xT2 = ((p3.x - x1) * tension) / 8;
						    var yT2 = ((p3.y - y1) * tension) / 8;
						    var zT2 = ((p3.z - z1) * tension) / 8;
						    var xT3 = ((p4.x - x2) * tension) / 8;
						    var yT3 = ((p4.y - y2) * tension) / 8;
						    var zT3 = ((p4.z - z2) * tension) / 8;
						    list[index0] = p1;
						    for (var i = 0; i < nPoints; i++) {
							var s = i / fnPoints;
							if (i == nPoints - 1) {
							    x1 = x2;
							    y1 = y2;
							    z1 = z2;
							    x2 = p3.x;
							    y2 = p3.y;
							    z2 = p3.z;
							    xT1 = xT2;
							    yT1 = yT2;
							    zT1 = zT2;
							    xT2 = xT3;
							    yT2 = yT3;
							    zT2 = zT3;
							    s -= 1;
							}var s2 = s * s;
							var s3 = s2 * s;
							var h1 = 2 * s3 - 3 * s2 + 1;
							var h2 = -2 * s3 + 3 * s2;
							var h3 = s3 - 2 * s2 + s;
							var h4 = s3 - s2;
							var x = (h1 * x1 + h2 * x2 + h3 * xT1 + h4 * xT2);
							var y = (h1 * y1 + h2 * y2 + h3 * yT1 + h4 * yT2);
							var z = (h1 * z1 + h2 * z2 + h3 * zT1 + h4 * zT2);
							if (isPt) list[index0 + i] = org.jmol.util.Point3f.new3 (x, y, z);
							else list[index0 + i] = org.jmol.util.Vector3f.new3 (x, y, z);
						    }
						}, "~N,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,org.jmol.util.Tuple3f,~A,~N,~N,~B");
    });
    // 
    //// org\jmol\thread\MotionThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread", "org.jmol.util.AxisAngle4f", "$.Matrix3f", "$.Vector3f"], "org.jmol.thread.MotionThread", ["java.lang.Float", "$.Thread", "org.jmol.util.Point3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.transformManager = null;
	    this.viewer = null;
	    this.aaStepCenter = null;
	    this.aaStepNavCenter = null;
	    this.aaStep = null;
	    this.aaTotal = null;
	    this.matrixStart = null;
	    this.matrixStartInv = null;
	    this.matrixStep = null;
	    this.matrixEnd = null;
	    this.center = null;
	    this.zoom = 0;
	    this.xTrans = 0;
	    this.yTrans = 0;
	    this.navCenter = null;
	    this.xNav = 0;
	    this.yNav = 0;
	    this.navDepth = 0;
	    this.ptMoveToCenter = null;
	    this.startRotationRadius = 0;
	    this.targetPixelScale = 0;
	    this.totalSteps = 0;
	    this.startPixelScale = 0;
	    this.targetRotationRadius = 0;
	    this.fps = 0;
	    this.rotationRadiusDelta = 0;
	    this.pixelScaleDelta = 0;
	    this.zoomStart = 0;
	    this.zoomDelta = 0;
	    this.xTransStart = 0;
	    this.xTransDelta = 0;
	    this.yTransStart = 0;
	    this.yTransDelta = 0;
	    this.xNavTransStart = 0;
	    this.xNavTransDelta = 0;
	    this.yNavTransDelta = 0;
	    this.yNavTransStart = 0;
	    this.navDepthStart = 0;
	    this.navDepthDelta = 0;
	    this.targetTime = 0;
	    this.frameTimeMillis = 0;
	    this.iStep = 0;
	    this.asThread = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "MotionThread", org.jmol.thread.JmolThread);
	Clazz.prepareFields (c$, function () {
	    this.aaStepCenter =  new org.jmol.util.Vector3f ();
	    this.aaStepNavCenter =  new org.jmol.util.Vector3f ();
	    this.aaStep =  new org.jmol.util.AxisAngle4f ();
	    this.aaTotal =  new org.jmol.util.AxisAngle4f ();
	    this.matrixStart =  new org.jmol.util.Matrix3f ();
	    this.matrixStartInv =  new org.jmol.util.Matrix3f ();
	    this.matrixStep =  new org.jmol.util.Matrix3f ();
	    this.matrixEnd =  new org.jmol.util.Matrix3f ();
	});
	Clazz.makeConstructor (c$, 
			       function (transformManager, viewer) {
				   Clazz.superConstructor (this, org.jmol.thread.MotionThread, []);
				   this.transformManager = transformManager;
				   this.viewer = viewer;
			       }, "org.jmol.viewer.TransformManager,org.jmol.viewer.Viewer");
	Clazz.defineMethod (c$, "startMotion", 
			    function (asThread) {
				this.asThread = asThread;
				if (asThread) this.start ();
				else this.run ();
			    }, "~B");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  if (this.totalSteps > 0) this.viewer.setInMotion (true);
				  try {
				      if (this.totalSteps == 0 || this.startMotion ()) this.endMotion ();
				  } catch (e) {
				      if (Clazz.exceptionOf (e, Exception)) {
				      } else {
					  throw e;
				      }
				  }
				  if (this.totalSteps > 0) this.viewer.setInMotion (false);
				  this.transformManager.motion = null;
			      });
	Clazz.defineMethod (c$, "sleepThread", 
			    ($fz = function () {
				if (System.currentTimeMillis () < this.targetTime) {
				    this.viewer.requestRepaintAndWait ();
				    if (this.transformManager.motion == null || !this.asThread && !this.viewer.isScriptExecuting ()) {
					return false;
				    }var sleepTime = (this.targetTime - System.currentTimeMillis ());
				    if (sleepTime > 0) {
					try {
					    Thread.sleep (sleepTime);
					} catch (ie) {
					    if (Clazz.exceptionOf (ie, InterruptedException)) {
						return false;
					    } else {
						throw ie;
					    }
					}
				    }}return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "set", 
			    function (floatSecondsTotal, center, end, zoom, xTrans, yTrans, newRotationRadius, navCenter, xNav, yNav, navDepth) {
				this.center = center;
				this.matrixEnd.set (end);
				this.zoom = zoom;
				this.xTrans = xTrans;
				this.yTrans = yTrans;
				this.navCenter = navCenter;
				this.xNav = xNav;
				this.yNav = yNav;
				this.navDepth = navDepth;
				this.ptMoveToCenter = (center == null ? this.transformManager.fixedRotationCenter : center);
				this.startRotationRadius = this.transformManager.modelRadius;
				this.targetRotationRadius = (center == null || Float.isNaN (newRotationRadius) ? this.transformManager.modelRadius : newRotationRadius <= 0 ? this.viewer.calcRotationRadius (center) : newRotationRadius);
				this.startPixelScale = this.transformManager.scaleDefaultPixelsPerAngstrom;
				this.targetPixelScale = (center == null ? this.startPixelScale : this.transformManager.defaultScaleToScreen (this.targetRotationRadius));
				if (Float.isNaN (zoom)) zoom = this.transformManager.zoomPercent;
				this.transformManager.getRotation (this.matrixStart);
				this.matrixStartInv.invertM (this.matrixStart);
				this.matrixStep.mul2 (this.matrixEnd, this.matrixStartInv);
				this.aaTotal.setM (this.matrixStep);
				this.fps = 30;
				this.totalSteps = Clazz.floatToInt (floatSecondsTotal * this.fps);
				if (this.totalSteps == 0) return 0;
				this.frameTimeMillis = Clazz.doubleToInt (1000 / this.fps);
				this.targetTime = System.currentTimeMillis ();
				this.zoomStart = this.transformManager.zoomPercent;
				this.zoomDelta = zoom - this.zoomStart;
				this.xTransStart = this.transformManager.getTranslationXPercent ();
				this.xTransDelta = xTrans - this.xTransStart;
				this.yTransStart = this.transformManager.getTranslationYPercent ();
				this.yTransDelta = yTrans - this.yTransStart;
				this.aaStepCenter.setT (this.ptMoveToCenter);
				this.aaStepCenter.sub (this.transformManager.fixedRotationCenter);
				this.aaStepCenter.scale (1 / this.totalSteps);
				this.pixelScaleDelta = (this.targetPixelScale - this.startPixelScale);
				this.rotationRadiusDelta = (this.targetRotationRadius - this.startRotationRadius);
				if (navCenter != null && this.transformManager.mode == 1) {
				    this.aaStepNavCenter.setT (navCenter);
				    this.aaStepNavCenter.sub (this.transformManager.navigationCenter);
				    this.aaStepNavCenter.scale (1 / this.totalSteps);
				}var xNavTransStart = this.transformManager.getNavigationOffsetPercent ('X');
				this.xNavTransDelta = xNav - xNavTransStart;
				this.yNavTransStart = this.transformManager.getNavigationOffsetPercent ('Y');
				this.yNavTransDelta = yNav - this.yNavTransStart;
				var navDepthStart = this.transformManager.getNavigationDepthPercent ();
				this.navDepthDelta = navDepth - navDepthStart;
				return this.totalSteps;
			    }, "~N,org.jmol.util.Point3f,org.jmol.util.Matrix3f,~N,~N,~N,~N,org.jmol.util.Point3f,~N,~N,~N");
	Clazz.defineMethod (c$, "startMotion", 
			    function () {
				for (; this.iStep < this.totalSteps; ++this.iStep) {
				    if (!Float.isNaN (this.matrixEnd.m00)) {
					this.transformManager.getRotation (this.matrixStart);
					this.matrixStartInv.invertM (this.matrixStart);
					this.matrixStep.mul2 (this.matrixEnd, this.matrixStartInv);
					this.aaTotal.setM (this.matrixStep);
					this.aaStep.setAA (this.aaTotal);
					this.aaStep.angle /= (this.totalSteps - this.iStep);
					if (this.aaStep.angle == 0) this.matrixStep.setIdentity ();
					else this.matrixStep.setAA (this.aaStep);
					this.matrixStep.mul (this.matrixStart);
				    }var fStep = this.iStep / (this.totalSteps - 1);
				    this.transformManager.modelRadius = this.startRotationRadius + this.rotationRadiusDelta * fStep;
				    this.transformManager.scaleDefaultPixelsPerAngstrom = this.startPixelScale + this.pixelScaleDelta * fStep;
				    if (!Float.isNaN (this.xTrans)) {
					this.transformManager.zoomToPercent (this.zoomStart + this.zoomDelta * fStep);
					this.transformManager.translateToPercent ('x', this.xTransStart + this.xTransDelta * fStep);
					this.transformManager.translateToPercent ('y', this.yTransStart + this.yTransDelta * fStep);
				    }this.transformManager.setRotation (this.matrixStep);
				    if (this.center != null) this.transformManager.fixedRotationCenter.add (this.aaStepCenter);
				    if (this.navCenter != null && this.transformManager.mode == 1) {
					var pt = org.jmol.util.Point3f.newP (this.transformManager.navigationCenter);
					pt.add (this.aaStepNavCenter);
					this.transformManager.navigatePt (0, pt);
					if (!Float.isNaN (this.xNav) && !Float.isNaN (this.yNav)) this.transformManager.navTranslatePercent (0, this.xNavTransStart + this.xNavTransDelta * fStep, this.yNavTransStart + this.yNavTransDelta * fStep);
					if (!Float.isNaN (this.navDepth)) this.transformManager.setNavigationDepthPercent (0, this.navDepthStart + this.navDepthDelta * fStep);
				    }this.targetTime += this.frameTimeMillis;
				    if (!this.sleepThread ()) return false;
				}
				return true;
			    });
	Clazz.defineMethod (c$, "endMotion", 
			    function () {
				this.transformManager.setRotationRadius (this.targetRotationRadius, true);
				this.transformManager.scaleDefaultPixelsPerAngstrom = this.targetPixelScale;
				if (this.center != null) this.transformManager.moveRotationCenter (this.center, !this.transformManager.windowCentered);
				if (!Float.isNaN (this.xTrans)) {
				    this.transformManager.zoomToPercent (this.zoom);
				    this.transformManager.translateToPercent ('x', this.xTrans);
				    this.transformManager.translateToPercent ('y', this.yTrans);
				}this.transformManager.setRotation (this.matrixEnd);
				if (this.navCenter != null && this.transformManager.mode == 1) {
				    this.transformManager.navigationCenter.setT (this.navCenter);
				    if (!Float.isNaN (this.xNav) && !Float.isNaN (this.yNav)) this.transformManager.navTranslatePercent (0, this.xNav, this.yNav);
				    if (!Float.isNaN (this.navDepth)) this.transformManager.setNavigationDepthPercent (0, this.navDepth);
				}});
    });
    // 
    //// org\jmol\thread\SpinThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.SpinThread", ["java.lang.Thread", "java.util.Date", "org.jmol.util.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.transformManager = null;
	    this.viewer = null;
	    this.endDegrees = 0;
	    this.endPositions = null;
	    this.nDegrees = 0;
	    this.bsAtoms = null;
	    this.isNav = false;
	    this.$isGesture = false;
	    this.isReset = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "SpinThread", org.jmol.thread.JmolThread);
	Clazz.defineMethod (c$, "isGesture", 
			    function () {
				return this.$isGesture;
			    });
	Clazz.makeConstructor (c$, 
			       function (transformManager, viewer, endDegrees, endPositions, bsAtoms, isNav, isGesture) {
				   Clazz.superConstructor (this, org.jmol.thread.SpinThread, []);
				   this.transformManager = transformManager;
				   this.viewer = viewer;
				   this.endDegrees = Math.abs (endDegrees);
				   this.endPositions = endPositions;
				   this.bsAtoms = bsAtoms;
				   this.isNav = isNav;
				   this.$isGesture = isGesture;
				   this.setMyName ("SpinThread" +  new java.util.Date ());
			       }, "org.jmol.viewer.TransformManager,org.jmol.viewer.Viewer,~N,java.util.List,org.jmol.util.BitSet,~B,~B");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  var myFps = (this.isNav ? this.transformManager.navFps : this.transformManager.spinFps);
				  this.viewer.getGlobalSettings ().setParamB (this.isNav ? "_navigating" : "_spinning", true);
				  var i = 0;
				  var timeBegin = System.currentTimeMillis ();
				  var angle = 0;
				  var haveNotified = false;
				  while (!this.isInterrupted ()) {
				      if (this.isNav && myFps != this.transformManager.navFps) {
					  myFps = this.transformManager.navFps;
					  i = 0;
					  timeBegin = System.currentTimeMillis ();
				      } else if (!this.isNav && myFps != this.transformManager.spinFps && this.bsAtoms == null) {
					  myFps = this.transformManager.spinFps;
					  i = 0;
					  timeBegin = System.currentTimeMillis ();
				      }if (myFps == 0 || !(this.isNav ? this.transformManager.navOn : this.transformManager.spinOn)) {
					  this.transformManager.setSpinOn (false);
					  this.transformManager.setNavOn (false);
					  break;
				      }var navigatingSurface = this.viewer.getNavigateSurface ();
				      var refreshNeeded = (this.isNav ? (navigatingSurface || (this.transformManager.navX != 0 || this.transformManager.navY != 0)) || this.transformManager.navZ != 0 : this.transformManager.isSpinInternal && this.transformManager.internalRotationAxis.angle != 0 || this.transformManager.isSpinFixed && this.transformManager.fixedRotationAxis.angle != 0 || !this.transformManager.isSpinFixed && !this.transformManager.isSpinInternal && (this.transformManager.spinX != 0 || this.transformManager.spinY != 0 || this.transformManager.spinZ != 0));
				      ++i;
				      var targetTime = Clazz.floatToInt (i * 1000 / myFps);
				      var currentTime = (System.currentTimeMillis () - timeBegin);
				      var sleepTime = (targetTime - currentTime);
				      if (sleepTime <= 0) {
					  if (!haveNotified) org.jmol.util.Logger.info ("spinFPS is set too fast (" + myFps + ") -- can't keep up!");
					  haveNotified = true;
				      } else {
					  var isInMotion = (this.bsAtoms == null && this.viewer.getInMotion ());
					  if (isInMotion) {
					      if (this.$isGesture) break;
					      sleepTime += 1000;
					  }try {
					      if (refreshNeeded && (this.transformManager.spinOn || this.transformManager.navOn) && !isInMotion) {
						  if (this.isNav) {
						      this.transformManager.setNavigationOffsetRelative (navigatingSurface);
						  } else if (this.transformManager.isSpinInternal || this.transformManager.isSpinFixed) {
						      angle = (this.transformManager.isSpinInternal ? this.transformManager.internalRotationAxis : this.transformManager.fixedRotationAxis).angle / myFps;
						      if (this.transformManager.isSpinInternal) {
							  this.transformManager.rotateAxisAngleRadiansInternal (angle, this.bsAtoms);
						      } else {
							  this.transformManager.rotateAxisAngleRadiansFixed (angle, this.bsAtoms);
						      }this.nDegrees += Math.abs (angle * 57.29577951308232);
						  } else {
						      if (this.transformManager.spinX != 0) {
							  this.transformManager.rotateXRadians (this.transformManager.spinX * 0.017453292 / myFps, null);
						      }if (this.transformManager.spinY != 0) {
							  this.transformManager.rotateYRadians (this.transformManager.spinY * 0.017453292 / myFps, null);
						      }if (this.transformManager.spinZ != 0) {
							  this.transformManager.rotateZRadians (this.transformManager.spinZ * 0.017453292 / myFps);
						      }}while (!this.isInterrupted () && !this.viewer.getRefreshing ()) {
							  Thread.sleep (10);
						      }
						  if (this.bsAtoms == null) this.viewer.refresh (1, "SpinThread:run()");
						  else this.viewer.requestRepaintAndWait ();
						  if (!this.isNav && this.nDegrees >= this.endDegrees - 0.001) this.transformManager.setSpinOn (false);
					      }Thread.sleep (sleepTime);
					      if (this.isReset) break;
					  } catch (e) {
					      if (Clazz.exceptionOf (e, InterruptedException)) {
						  break;
					      } else {
						  throw e;
					      }
					  }
				      }}
				  if (this.bsAtoms != null && this.endPositions != null) {
				      this.viewer.setAtomCoord (this.bsAtoms, 1146095626, this.endPositions);
				      this.bsAtoms = null;
				      this.endPositions = null;
				  }if (!this.isReset) this.transformManager.setSpinOn (false);
			      });
	Clazz.defineMethod (c$, "reset", 
			    function () {
				this.isReset = true;
				this.interrupt ();
			    });
    });
    // 
    //// org\jmol\thread\VibrationThread.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.thread");
    Clazz.load (["org.jmol.thread.JmolThread"], "org.jmol.thread.VibrationThread", ["java.lang.Thread"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.transformManager = null;
	    this.viewer = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.thread, "VibrationThread", org.jmol.thread.JmolThread);
	Clazz.makeConstructor (c$, 
			       function (transformManager, viewer) {
				   Clazz.superConstructor (this, org.jmol.thread.VibrationThread, []);
				   this.transformManager = transformManager;
				   this.viewer = viewer;
				   this.setMyName ("VibrationThread");
			       }, "org.jmol.viewer.TransformManager,org.jmol.viewer.Viewer");
	Clazz.overrideMethod (c$, "run", 
			      function () {
				  var startTime = System.currentTimeMillis ();
				  var lastRepaintTime = startTime;
				  try {
				      do {
					  var currentTime = System.currentTimeMillis ();
					  var elapsed = (currentTime - lastRepaintTime);
					  var sleepTime = 33 - elapsed;
					  if (sleepTime > 0) Thread.sleep (sleepTime);
					  lastRepaintTime = currentTime = System.currentTimeMillis ();
					  elapsed = (currentTime - startTime);
					  var t = (elapsed % this.transformManager.vibrationPeriodMs) / this.transformManager.vibrationPeriodMs;
					  this.transformManager.setVibrationT (t);
					  this.viewer.refresh (3, "VibrationThread:run()");
				      } while (!this.isInterrupted ());
				  } catch (e) {
				      if (Clazz.exceptionOf (e, Exception)) {
				      } else {
					  throw e;
				      }
				  }
			      });
    });
    // 
    //// org\jmol\api\ApiPlatform.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "ApiPlatform");
    // 
    //// org\jmol\awtjs2d\Platform.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["org.jmol.api.ApiPlatform"], "org.jmol.awtjs2d.Platform", ["java.net.URL", "org.jmol.awtjs2d.AjaxURLStreamHandlerFactory", "$.Display", "$.Font", "$.Image", "$.JmolFile", "$.JmolFileAdapter", "$.Mouse"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.canvas = null;
	    this.viewer = null;
	    this.context = null;
	    this.fileAdapter = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs2d, "Platform", null, org.jmol.api.ApiPlatform);
	Clazz.overrideMethod (c$, "setViewer", 
			      function (viewer, canvas) {
				  {
				      this.viewer = viewer;
				      this.canvas = canvas;
				      this.context = canvas.getContext("2d");
				      canvas.imgdata = this.context.getImageData(0, 0, canvas.width, canvas.height);
				      canvas.buf8 = canvas.imgdata.data;
				  }try {
				      java.net.URL.setURLStreamHandlerFactory ( new org.jmol.awtjs2d.AjaxURLStreamHandlerFactory ());
				  } catch (e) {
				  }
			      }, "org.jmol.api.JmolViewer,~O");
	Clazz.overrideMethod (c$, "isSingleThreaded", 
			      function () {
				  return true;
			      });
	Clazz.overrideMethod (c$, "convertPointFromScreen", 
			      function (canvas, ptTemp) {
				  org.jmol.awtjs2d.Display.convertPointFromScreen (canvas, ptTemp);
			      }, "~O,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "getFullScreenDimensions", 
			      function (canvas, widthHeight) {
				  org.jmol.awtjs2d.Display.getFullScreenDimensions (canvas, widthHeight);
			      }, "~O,~A");
	Clazz.overrideMethod (c$, "getMenuPopup", 
			      function (viewer, menuStructure, type) {
				  return null;
			      }, "org.jmol.viewer.Viewer,~S,~S");
	Clazz.overrideMethod (c$, "hasFocus", 
			      function (canvas) {
				  return org.jmol.awtjs2d.Display.hasFocus (canvas);
			      }, "~O");
	Clazz.overrideMethod (c$, "prompt", 
			      function (label, data, list, asButtons) {
				  return org.jmol.awtjs2d.Display.prompt (label, data, list, asButtons);
			      }, "~S,~S,~A,~B");
	Clazz.overrideMethod (c$, "renderScreenImage", 
			      function (viewer, context, size) {
				  org.jmol.awtjs2d.Display.renderScreenImage (viewer, context, size);
			      }, "org.jmol.api.JmolViewer,~O,~O");
	Clazz.overrideMethod (c$, "drawImage", 
			      function (context, canvas, x, y, width, height) {
				  org.jmol.awtjs2d.Image.drawImage (context, canvas, x, y, width, height);
			      }, "~O,~O,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "requestFocusInWindow", 
			      function (canvas) {
				  org.jmol.awtjs2d.Display.requestFocusInWindow (canvas);
			      }, "~O");
	Clazz.overrideMethod (c$, "repaint", 
			      function (canvas) {
				  org.jmol.awtjs2d.Display.repaint (canvas);
			      }, "~O");
	Clazz.overrideMethod (c$, "setTransparentCursor", 
			      function (canvas) {
				  org.jmol.awtjs2d.Display.setTransparentCursor (canvas);
			      }, "~O");
	Clazz.overrideMethod (c$, "setCursor", 
			      function (c, canvas) {
				  org.jmol.awtjs2d.Display.setCursor (c, canvas);
			      }, "~N,~O");
	Clazz.overrideMethod (c$, "getMouseManager", 
			      function (viewer, actionManager) {
				  return  new org.jmol.awtjs2d.Mouse (viewer, actionManager);
			      }, "org.jmol.viewer.Viewer,org.jmol.viewer.ActionManager");
	Clazz.overrideMethod (c$, "allocateRgbImage", 
			      function (windowWidth, windowHeight, pBuffer, windowSize, backgroundTransparent) {
				  return org.jmol.awtjs2d.Image.allocateRgbImage (windowWidth, windowHeight, pBuffer, windowSize, backgroundTransparent, this.canvas);
			      }, "~N,~N,~A,~N,~B");
	Clazz.overrideMethod (c$, "notifyEndOfRendering", 
			      function () {
			      });
	Clazz.overrideMethod (c$, "createImage", 
			      function (data) {
				  return org.jmol.awtjs2d.Image.createImage (data);
			      }, "~O");
	Clazz.overrideMethod (c$, "disposeGraphics", 
			      function (gOffscreen) {
				  org.jmol.awtjs2d.Image.disposeGraphics (gOffscreen);
			      }, "~O");
	Clazz.overrideMethod (c$, "grabPixels", 
			      function (imageobj, width, height) {
				  return org.jmol.awtjs2d.Image.grabPixels (imageobj, width, height);
			      }, "~O,~N,~N");
	Clazz.overrideMethod (c$, "drawImageToBuffer", 
			      function (gOffscreen, imageOffscreen, imageobj, width, height, bgcolor) {
				  return org.jmol.awtjs2d.Image.drawImageToBuffer (gOffscreen, imageOffscreen, imageobj, width, height, bgcolor);
			      }, "~O,~O,~O,~N,~N,~N");
	Clazz.overrideMethod (c$, "getTextPixels", 
			      function (text, font3d, context, image, width, height, ascent) {
				  return org.jmol.awtjs2d.Image.getTextPixels (text, font3d, context, width, height, ascent);
			      }, "~S,org.jmol.util.JmolFont,~O,~O,~N,~N,~N");
	Clazz.overrideMethod (c$, "flushImage", 
			      function (imagePixelBuffer) {
				  org.jmol.awtjs2d.Image.flush (imagePixelBuffer);
			      }, "~O");
	Clazz.overrideMethod (c$, "getGraphics", 
			      function (image) {
				  return org.jmol.awtjs2d.Image.getGraphics (image);
			      }, "~O");
	Clazz.overrideMethod (c$, "getImageHeight", 
			      function (image) {
				  return org.jmol.awtjs2d.Image.getHeight (image);
			      }, "~O");
	Clazz.overrideMethod (c$, "getImageWidth", 
			      function (image) {
				  return org.jmol.awtjs2d.Image.getWidth (image);
			      }, "~O");
	Clazz.overrideMethod (c$, "getJpgImage", 
			      function (viewer, quality, comment) {
				  return org.jmol.awtjs2d.Image.getJpgImage (this, viewer, quality, comment);
			      }, "org.jmol.viewer.Viewer,~N,~S");
	Clazz.overrideMethod (c$, "getStaticGraphics", 
			      function (image, backgroundTransparent) {
				  return org.jmol.awtjs2d.Image.getStaticGraphics (image, backgroundTransparent);
			      }, "~O,~B");
	Clazz.overrideMethod (c$, "newBufferedImage", 
			      function (image, w, h) {
				  {
				      if (typeof Jmol != "undefined" && Jmol._getHiddenCanvas)
					  return Jmol._getHiddenCanvas(this.viewer.applet, "stereoImage", w, h);
				  }return null;
			      }, "~O,~N,~N");
	Clazz.overrideMethod (c$, "newOffScreenImage", 
			      function (w, h) {
				  {
				      if (typeof Jmol != "undefined" && Jmol._getHiddenCanvas)
					  return Jmol._getHiddenCanvas(this.viewer.applet, "textImage", w, h);
				  }return null;
			      }, "~N,~N");
	Clazz.overrideMethod (c$, "waitForDisplay", 
			      function (canvas, image) {
				  org.jmol.awtjs2d.Image.waitForDisplay (canvas, image);
				  return true;
			      }, "~O,~O");
	Clazz.overrideMethod (c$, "fontStringWidth", 
			      function (font, context, text) {
				  return org.jmol.awtjs2d.Font.stringWidth (font, context, text);
			      }, "org.jmol.util.JmolFont,~O,~S");
	Clazz.overrideMethod (c$, "getFontAscent", 
			      function (context) {
				  return org.jmol.awtjs2d.Font.getAscent (context);
			      }, "~O");
	Clazz.overrideMethod (c$, "getFontDescent", 
			      function (context) {
				  return org.jmol.awtjs2d.Font.getDescent (context);
			      }, "~O");
	Clazz.overrideMethod (c$, "getFontMetrics", 
			      function (font, context) {
				  return org.jmol.awtjs2d.Font.getFontMetrics (font, context);
			      }, "org.jmol.util.JmolFont,~O");
	Clazz.overrideMethod (c$, "newFont", 
			      function (fontFace, isBold, isItalic, fontSize) {
				  return org.jmol.awtjs2d.Font.newFont (fontFace, isBold, isItalic, fontSize, "px");
			      }, "~S,~B,~B,~N");
	Clazz.overrideMethod (c$, "getJsObjectInfo", 
			      function (jsObject, method, args) {
				  return null;
			      }, "~O,~S,~A");
	Clazz.overrideMethod (c$, "isHeadless", 
			      function () {
				  return false;
			      });
	Clazz.overrideMethod (c$, "getFileAdapter", 
			      function () {
				  return (this.fileAdapter == null ? this.fileAdapter =  new org.jmol.awtjs2d.JmolFileAdapter () : this.fileAdapter);
			      });
	Clazz.overrideMethod (c$, "newFile", 
			      function (name) {
				  return  new org.jmol.awtjs2d.JmolFile (name);
			      }, "~S");
    });
    // 
    //// org\jmol\awtjs2d\AjaxURLStreamHandlerFactory.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["java.net.URLStreamHandlerFactory", "java.util.Hashtable"], "org.jmol.awtjs2d.AjaxURLStreamHandlerFactory", ["org.jmol.awtjs2d.AjaxURLStreamHandler"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.htFactories = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs2d, "AjaxURLStreamHandlerFactory", null, java.net.URLStreamHandlerFactory);
	Clazz.prepareFields (c$, function () {
	    this.htFactories =  new java.util.Hashtable ();
	});
	Clazz.overrideMethod (c$, "createURLStreamHandler", 
			      function (protocol) {
				  var fac = this.htFactories.get (protocol);
				  if (fac == null) this.htFactories.put (protocol, fac =  new org.jmol.awtjs2d.AjaxURLStreamHandler (protocol));
				  return (fac.protocol == null ? null : fac);
			      }, "~S");
    });
    // 
    //// org\jmol\awtjs2d\AjaxURLStreamHandler.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["java.net.URLStreamHandler"], "org.jmol.awtjs2d.AjaxURLStreamHandler", ["org.jmol.awtjs2d.JmolURLConnection"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.protocol = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs2d, "AjaxURLStreamHandler", java.net.URLStreamHandler);
	Clazz.makeConstructor (c$, 
			       function (protocol) {
				   Clazz.superConstructor (this, org.jmol.awtjs2d.AjaxURLStreamHandler, []);
				   this.protocol = protocol;
			       }, "~S");
	Clazz.overrideMethod (c$, "openConnection", 
			      function (url) {
				  return  new org.jmol.awtjs2d.JmolURLConnection (url);
			      }, "java.net.URL");
    });
    // 
    //// org\jmol\awtjs2d\Display.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    c$ = Clazz.declareType (org.jmol.awtjs2d, "Display");
    c$.getFullScreenDimensions = Clazz.defineMethod (c$, "getFullScreenDimensions", 
						     function (canvas, widthHeight) {
							 {
							     widthHeight[0] = canvas.width;
							     widthHeight[1] = canvas.height;
							 }}, "~O,~A");
    c$.hasFocus = Clazz.defineMethod (c$, "hasFocus", 
				      function (canvas) {
					  {
					  }return true;
				      }, "~O");
    c$.requestFocusInWindow = Clazz.defineMethod (c$, "requestFocusInWindow", 
						  function (canvas) {
						      {
						      }}, "~O");
    c$.repaint = Clazz.defineMethod (c$, "repaint", 
				     function (canvas) {
				     }, "~O");
    c$.renderScreenImage = Clazz.defineMethod (c$, "renderScreenImage", 
					       function (viewer, g, size) {
						   {
						   }}, "org.jmol.api.JmolViewer,~O,~O");
    c$.setTransparentCursor = Clazz.defineMethod (c$, "setTransparentCursor", 
						  function (canvas) {
						      {
						      }}, "~O");
    c$.setCursor = Clazz.defineMethod (c$, "setCursor", 
				       function (c, canvas) {
					   {
					   }}, "~N,~O");
    c$.prompt = Clazz.defineMethod (c$, "prompt", 
				    function (label, data, list, asButtons) {
					return "null";
				    }, "~S,~S,~A,~B");
    c$.convertPointFromScreen = Clazz.defineMethod (c$, "convertPointFromScreen", 
						    function (canvas, ptTemp) {
							{
							}}, "~O,org.jmol.util.Point3f");
    // 
    //// org\jmol\awtjs2d\Font.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    c$ = Clazz.declareType (org.jmol.awtjs2d, "Font");
    c$.newFont = Clazz.defineMethod (c$, "newFont", 
				     function (fontFace, isBold, isItalic, fontSize, type) {
					 fontFace = (fontFace.equals ("Monospaced") ? "Courier" : fontFace.startsWith ("Sans") ? "Sans-Serif" : "Serif");
					 return (isBold ? "bold " : "") + (isItalic ? "italic " : "") + fontSize + type + " " + fontFace;
				     }, "~S,~B,~B,~N,~S");
    c$.getFontMetrics = Clazz.defineMethod (c$, "getFontMetrics", 
					    function (font, context) {
						{
						    if (context.font != font.font) {
							context.font = font.font;
							font.font = context.font;
							context._fontAscent = font.fontSize; //pt, not px
							// the descent is actually (px - pt)
							// but I know of no way of getting access to the drawn height
							context._fontDescent = Math.ceil(font.fontSize * 0.25);//approx
						    }
						}return context;
					    }, "org.jmol.util.JmolFont,~O");
    c$.getAscent = Clazz.defineMethod (c$, "getAscent", 
				       function (context) {
					   {
					       return context._fontAscent;
					   }}, "~O");
    c$.getDescent = Clazz.defineMethod (c$, "getDescent", 
					function (context) {
					    {
						return context._fontDescent
					    }}, "~O");
    c$.stringWidth = Clazz.defineMethod (c$, "stringWidth", 
					 function (font, context, text) {
					     {
						 context.font = font.font;
						 return context.measureText(text).width;
					     }}, "org.jmol.util.JmolFont,~O,~S");
    // 
    //// org\jmol\awtjs2d\Image.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    c$ = Clazz.declareType (org.jmol.awtjs2d, "Image");
    c$.createImage = Clazz.defineMethod (c$, "createImage", 
					 function (data) {
					     return null;
					 }, "~O");
    c$.waitForDisplay = Clazz.defineMethod (c$, "waitForDisplay", 
					    function (display, image) {
					    }, "~O,~O");
    c$.getWidth = Clazz.defineMethod (c$, "getWidth", 
				      function (canvas) {
					  {
					      return canvas.width;
					  }}, "~O");
    c$.getHeight = Clazz.defineMethod (c$, "getHeight", 
				       function (canvas) {
					   {
					       return canvas.height;
					   }}, "~O");
    c$.getJpgImage = Clazz.defineMethod (c$, "getJpgImage", 
					 function (apiPlatform, viewer, quality, comment) {
					     return null;
					 }, "org.jmol.api.ApiPlatform,org.jmol.viewer.Viewer,~N,~S");
    c$.grabPixels = Clazz.defineMethod (c$, "grabPixels", 
					function (context, width, height) {
					    {
						var data = context.getImageData(0, 0, width, height).data;
						return this.toIntARGB(data);
					    }}, "~O,~N,~N");
    c$.toIntARGB = Clazz.defineMethod (c$, "toIntARGB", 
				       function (imgData) {
					   var n = Clazz.doubleToInt (imgData.length / 4);
					   var iData =  Clazz.newIntArray (n, 0);
					   for (var i = 0, j = 0; i < n; j++) {
					       iData[i++] = (imgData[j++] << 16) | (imgData[j++] << 8) | imgData[j++] | 0xFF000000;
					   }
					   return iData;
				       }, "~A");
    c$.fromIntARGB = Clazz.defineMethod (c$, "fromIntARGB", 
					 function (buf32, buf8) {
					     var n = buf8.length >> 2;
					     for (var i = 0, j = 0; i < n; i++) {
						 buf8[j++] = (buf32[i] >> 16) & 0xFF;
						 buf8[j++] = (buf32[i] >> 8) & 0xFF;
						 buf8[j++] = buf32[i] & 0xFF;
						 buf8[j++] = 0xFF;
					     }
					 }, "~A,~A");
    c$.drawImageToBuffer = Clazz.defineMethod (c$, "drawImageToBuffer", 
					       function (gOffscreen, imageOffscreen, imageobj, width, height, bgcolor) {
						   return null;
					       }, "~O,~O,~O,~N,~N,~N");
    c$.getTextPixels = Clazz.defineMethod (c$, "getTextPixels", 
					   function (text, font3d, context, width, height, ascent) {
					       {
						   context.fillStyle = "#000000";
						   context.fillRect(0, 0, width, height);
						   context.fillStyle = "#FFFFFF";
						   context.font = font3d.font;
						   context.fillText(text, 0, ascent);
						   return this.grabPixels(context, width, height);
					       }}, "~S,org.jmol.util.JmolFont,~O,~N,~N,~N");
    c$.allocateRgbImage = Clazz.defineMethod (c$, "allocateRgbImage", 
					      function (windowWidth, windowHeight, pBuffer, windowSize, backgroundTransparent, canvas) {
						  {
						      canvas.buf32 = pBuffer;
						      return canvas;
						  }}, "~N,~N,~A,~N,~B,~O");
    c$.getStaticGraphics = Clazz.defineMethod (c$, "getStaticGraphics", 
					       function (canvas, backgroundTransparent) {
						   {
						       return this.getGraphics(canvas);
						   }}, "~O,~B");
    c$.getGraphics = Clazz.defineMethod (c$, "getGraphics", 
					 function (canvas) {
					     {
						 return canvas.getContext("2d");
					     }}, "~O");
    c$.drawImage = Clazz.defineMethod (c$, "drawImage", 
				       function (context, canvas, x, y, width, height) {
					   {
					       this.fromIntARGB(canvas.buf32, canvas.buf8);
					       context.putImageData(canvas.imgdata,x,y);
					   }}, "~O,~O,~N,~N,~N,~N");
    c$.flush = Clazz.defineMethod (c$, "flush", 
				   function (image) {
				   }, "~O");
    c$.disposeGraphics = Clazz.defineMethod (c$, "disposeGraphics", 
					     function (graphicForText) {
					     }, "~O");
    // 
    //// org\jmol\api\JmolFileInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolFileInterface");
    // 
    //// org\jmol\awtjs2d\JmolFile.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["org.jmol.api.JmolFileInterface"], "org.jmol.awtjs2d.JmolFile", ["org.jmol.util.TextFormat", "org.jmol.viewer.FileManager", "$.Viewer"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.name = null;
	    this.fullName = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs2d, "JmolFile", null, org.jmol.api.JmolFileInterface);
	Clazz.makeConstructor (c$, 
			       function (name) {
				   this.name = name.$replace ('\\', '/');
				   this.fullName = name;
				   if (!this.fullName.startsWith ("/") && org.jmol.viewer.FileManager.urlTypeIndex (name) < 0) this.fullName = org.jmol.viewer.Viewer.jsDocumentBase + "/" + this.fullName;
				   this.fullName = org.jmol.util.TextFormat.simpleReplace (this.fullName, "/./", "/");
				   name = name.substring (name.lastIndexOf ("/") + 1);
			       }, "~S");
	Clazz.overrideMethod (c$, "getParentAsFile", 
			      function () {
				  var pt = this.fullName.lastIndexOf ("/");
				  return (pt < 0 ? null :  new org.jmol.awtjs2d.JmolFile (this.fullName.substring (0, pt)));
			      });
	Clazz.overrideMethod (c$, "getAbsolutePath", 
			      function () {
				  return this.fullName;
			      });
	Clazz.overrideMethod (c$, "getName", 
			      function () {
				  return this.name;
			      });
	Clazz.overrideMethod (c$, "isDirectory", 
			      function () {
				  return this.fullName.endsWith ("/");
			      });
	Clazz.overrideMethod (c$, "length", 
			      function () {
				  return 0;
			      });
    });
    // 
    //// org\jmol\api\JmolFileAdapterInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolFileAdapterInterface");
    // 
    //// org\jmol\awtjs2d\JmolFileAdapter.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["org.jmol.api.JmolFileAdapterInterface"], "org.jmol.awtjs2d.JmolFileAdapter", ["java.net.UnknownServiceException"], function () {
	c$ = Clazz.declareType (org.jmol.awtjs2d, "JmolFileAdapter", null, org.jmol.api.JmolFileAdapterInterface);
	Clazz.overrideMethod (c$, "getBufferedFileInputStream", 
			      function (name) {
				  try {
				      throw  new java.net.UnknownServiceException ("No local file reading in JavaScript version of Jmol");
				  } catch (e) {
				      if (Clazz.exceptionOf (e, java.io.IOException)) {
					  return e.getMessage ();
				      } else {
					  throw e;
				      }
				  }
			      }, "~S");
	Clazz.overrideMethod (c$, "getBufferedURLInputStream", 
			      function (url, outputBytes, post) {
				  try {
				      var conn = url.openConnection ();
				      if (outputBytes != null) conn.outputBytes (outputBytes);
				      else if (post != null) conn.outputString (post);
				      return conn.getStringXBuilder ();
				  } catch (e) {
				      if (Clazz.exceptionOf (e, java.io.IOException)) {
					  return e.getMessage ();
				      } else {
					  throw e;
				      }
				  }
			      }, "java.net.URL,~A,~S");
    });
    // 
    //// org\jmol\api\JmolMouseInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolMouseInterface");
    // 
    //// org\jmol\api\Event.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    c$ = Clazz.declareType (org.jmol.api, "Event");
    Clazz.defineStatics (c$,
			 "MOUSE_LEFT", 16,
			 "MOUSE_MIDDLE", 8,
			 "MOUSE_RIGHT", 4,
			 "MOUSE_WHEEL", 32,
			 "MOUSE_DOWN", 501,
			 "MOUSE_UP", 502,
			 "MOUSE_MOVE", 503,
			 "MOUSE_ENTER", 504,
			 "MOUSE_EXIT", 505,
			 "MOUSE_DRAG", 506,
			 "SHIFT_MASK", 1,
			 "ALT_MASK", 8,
			 "CTRL_MASK", 2,
			 "META_MASK", 4,
			 "VK_SHIFT", 16,
			 "VK_ALT", 18,
			 "VK_CONTROL", 17,
			 "VK_LEFT", 37,
			 "VK_RIGHT", 39,
			 "VK_PERIOD", 46,
			 "VK_SPACE", 32,
			 "VK_DOWN", 40,
			 "VK_UP", 38);
    // 
    //// org\jmol\awtjs2d\Mouse.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.awtjs2d");
    Clazz.load (["org.jmol.api.JmolMouseInterface", "$.Event"], "org.jmol.awtjs2d.Mouse", ["java.lang.Character", "org.jmol.util.Escape", "$.Logger"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.actionManager = null;
	    this.keyBuffer = "";
	    this.isMouseDown = false;
	    this.xWhenPressed = 0;
	    this.yWhenPressed = 0;
	    this.modifiersWhenPressed10 = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.awtjs2d, "Mouse", null, org.jmol.api.JmolMouseInterface);
	Clazz.makeConstructor (c$, 
			       function (viewer, actionManager) {
				   this.viewer = viewer;
				   this.actionManager = actionManager;
			       }, "org.jmol.viewer.Viewer,org.jmol.viewer.ActionManager");
	Clazz.overrideMethod (c$, "clear", 
			      function () {
			      });
	Clazz.overrideMethod (c$, "dispose", 
			      function () {
				  this.actionManager.dispose ();
			      });
	Clazz.overrideMethod (c$, "handleOldJvm10Event", 
			      function (id, x, y, modifiers, time) {
				  if (id != -1) modifiers = org.jmol.awtjs2d.Mouse.applyLeftMouse (modifiers);
				  switch (id) {
				  case -1:
				      this.mouseWheel (time, x, modifiers | 32);
				      break;
				  case 501:
				      this.xWhenPressed = x;
				      this.yWhenPressed = y;
				      this.modifiersWhenPressed10 = modifiers;
				      this.mousePressed (time, x, y, modifiers, false);
				      break;
				  case 506:
				      this.mouseDragged (time, x, y, modifiers);
				      break;
				  case 504:
				      this.mouseEntered (time, x, y);
				      break;
				  case 505:
				      this.mouseExited (time, x, y);
				      break;
				  case 503:
				      this.mouseMoved (time, x, y, modifiers);
				      break;
				  case 502:
				      this.mouseReleased (time, x, y, modifiers);
				      if (x == this.xWhenPressed && y == this.yWhenPressed && modifiers == this.modifiersWhenPressed10) {
					  this.mouseClicked (time, x, y, modifiers, 1);
				      }break;
				  default:
				      return false;
				  }
				  return true;
			      }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "mouseClicked", 
			    function (e) {
				this.mouseClicked (e.getWhen (), e.getX (), e.getY (), e.getModifiers (), e.getClickCount ());
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mouseEntered", 
			    function (e) {
				this.mouseEntered (e.getWhen (), e.getX (), e.getY ());
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mouseExited", 
			    function (e) {
				this.mouseExited (e.getWhen (), e.getX (), e.getY ());
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mousePressed", 
			    function (e) {
				this.mousePressed (e.getWhen (), e.getX (), e.getY (), e.getModifiers (), e.isPopupTrigger ());
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mouseReleased", 
			    function (e) {
				this.mouseReleased (e.getWhen (), e.getX (), e.getY (), e.getModifiers ());
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mouseDragged", 
			    function (e) {
				var modifiers = e.getModifiers ();
				if ((modifiers & 28) == 0) modifiers |= 16;
				this.mouseDragged (e.getWhen (), e.getX (), e.getY (), modifiers);
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mouseMoved", 
			    function (e) {
				this.mouseMoved (e.getWhen (), e.getX (), e.getY (), e.getModifiers ());
			    }, "java.awt.event.MouseEvent");
	Clazz.defineMethod (c$, "mouseWheelMoved", 
			    function (e) {
				e.consume ();
				this.mouseWheel (e.getWhen (), e.getWheelRotation (), e.getModifiers () | 32);
			    }, "java.awt.event.MouseWheelEvent");
	Clazz.defineMethod (c$, "keyTyped", 
			    function (ke) {
				ke.consume ();
				if (!this.viewer.menuEnabled ()) return;
				var ch = ke.getKeyChar ();
				var modifiers = ke.getModifiers ();
				if (org.jmol.util.Logger.debuggingHigh) org.jmol.util.Logger.debug ("MouseManager keyTyped: " + ch + " " + (0 + ch.charCodeAt (0)) + " " + modifiers);
				if (modifiers != 0 && modifiers != 1) {
				    switch (ch) {
				    case String.fromCharCode (11):
				    case 'k':
					var isON = !this.viewer.getBooleanProperty ("allowKeyStrokes");
					switch (modifiers) {
					case 2:
					    this.viewer.setBooleanProperty ("allowKeyStrokes", isON);
					    this.viewer.setBooleanProperty ("showKeyStrokes", true);
					    break;
					case 10:
					case 8:
					    this.viewer.setBooleanProperty ("allowKeyStrokes", isON);
					    this.viewer.setBooleanProperty ("showKeyStrokes", false);
					    break;
					}
					this.clearKeyBuffer ();
					this.viewer.refresh (3, "showkey");
					break;
				    case 22:
				    case 'v':
					switch (modifiers) {
					case 2:
					    break;
					}
					break;
				    case 26:
				    case 'z':
					switch (modifiers) {
					case 2:
					    this.viewer.undoMoveAction (4165, 1);
					    break;
					case 3:
					    this.viewer.undoMoveAction (4139, 1);
					    break;
					}
					break;
				    case 25:
				    case 'y':
					switch (modifiers) {
					case 2:
					    this.viewer.undoMoveAction (4139, 1);
					    break;
					}
					break;
				    }
				    return;
				}if (!this.viewer.getBooleanProperty ("allowKeyStrokes")) return;
				this.addKeyBuffer (ke.getModifiers () == 1 ? Character.toUpperCase (ch) : ch);
			    }, "java.awt.event.KeyEvent");
	Clazz.defineMethod (c$, "keyPressed", 
			    function (ke) {
				if (this.viewer.isApplet ()) ke.consume ();
				this.actionManager.keyPressed (ke.getKeyCode (), ke.getModifiers ());
			    }, "java.awt.event.KeyEvent");
	Clazz.defineMethod (c$, "keyReleased", 
			    function (ke) {
				ke.consume ();
				this.actionManager.keyReleased (ke.getKeyCode ());
			    }, "java.awt.event.KeyEvent");
	Clazz.defineMethod (c$, "clearKeyBuffer", 
			    ($fz = function () {
				if (this.keyBuffer.length == 0) return;
				this.keyBuffer = "";
				if (this.viewer.getBooleanProperty ("showKeyStrokes")) this.viewer.evalStringQuiet ("!set echo _KEYSTROKES; set echo bottom left;echo \"\"");
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "addKeyBuffer", 
			    ($fz = function (ch) {
				if (ch.charCodeAt (0) == 10) {
				    this.sendKeyBuffer ();
				    return;
				}if (ch.charCodeAt (0) == 8) {
				    if (this.keyBuffer.length > 0) this.keyBuffer = this.keyBuffer.substring (0, this.keyBuffer.length - 1);
				} else {
				    this.keyBuffer += ch;
				}if (this.viewer.getBooleanProperty ("showKeyStrokes")) this.viewer.evalStringQuiet ("!set echo _KEYSTROKES; set echo bottom left;echo " + org.jmol.util.Escape.escapeStr ("\1" + this.keyBuffer));
			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "sendKeyBuffer", 
			    ($fz = function () {
				var kb = this.keyBuffer;
				if (this.viewer.getBooleanProperty ("showKeyStrokes")) this.viewer.evalStringQuiet ("!set echo _KEYSTROKES; set echo bottom left;echo " + org.jmol.util.Escape.escapeStr (this.keyBuffer));
				this.clearKeyBuffer ();
				this.viewer.script (kb);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "mouseEntered", 
			    ($fz = function (time, x, y) {
				this.actionManager.mouseEntered (time, x, y);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "mouseExited", 
			    ($fz = function (time, x, y) {
				this.actionManager.mouseExited (time, x, y);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "mouseClicked", 
			    ($fz = function (time, x, y, modifiers, clickCount) {
				this.clearKeyBuffer ();
				this.actionManager.mouseAction (2, time, x, y, 1, modifiers);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "mouseMoved", 
			    ($fz = function (time, x, y, modifiers) {
				this.clearKeyBuffer ();
				if (this.isMouseDown) this.actionManager.mouseAction (1, time, x, y, 0, org.jmol.awtjs2d.Mouse.applyLeftMouse (modifiers));
				else this.actionManager.mouseAction (0, time, x, y, 0, modifiers);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "mouseWheel", 
			    ($fz = function (time, rotation, modifiers) {
				this.clearKeyBuffer ();
				this.actionManager.mouseAction (3, time, 0, rotation, 0, modifiers);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "mousePressed", 
			    ($fz = function (time, x, y, modifiers, isPopupTrigger) {
				this.clearKeyBuffer ();
				this.isMouseDown = true;
				this.actionManager.mouseAction (4, time, x, y, 0, modifiers);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "mouseReleased", 
			    ($fz = function (time, x, y, modifiers) {
				this.isMouseDown = false;
				this.actionManager.mouseAction (5, time, x, y, 0, modifiers);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "mouseDragged", 
			    ($fz = function (time, x, y, modifiers) {
				if ((modifiers & 20) == 20) modifiers = modifiers & -5 | 2;
				this.actionManager.mouseAction (1, time, x, y, 0, modifiers);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	c$.applyLeftMouse = Clazz.defineMethod (c$, "applyLeftMouse", 
						($fz = function (modifiers) {
						    return ((modifiers & 28) == 0) ? (modifiers | 16) : modifiers;
						}, $fz.isPrivate = true, $fz), "~N");
    });
    // 
    //// org\jmol\api\JmolRendererInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.load (["org.jmol.api.JmolGraphicsInterface"], "org.jmol.api.JmolRendererInterface", null, function () {
	Clazz.declareInterface (org.jmol.api, "JmolRendererInterface", org.jmol.api.JmolGraphicsInterface);
    });
    // 
    //// org\jmol\g3d\Graphics3D.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["org.jmol.api.JmolRendererInterface", "org.jmol.util.GData", "$.Normix", "$.Vector3f"], "org.jmol.g3d.Graphics3D", ["java.lang.NullPointerException", "java.util.Arrays", "org.jmol.constant.EnumStereoMode", "org.jmol.g3d.CircleRenderer", "$.CylinderRenderer", "$.HermiteRenderer", "$.ImageRenderer", "$.LineRenderer", "$.Pixelator", "$.PixelatorShaded", "$.Platform3D", "$.SphereRenderer", "$.TextRenderer", "$.TextSorter", "$.TextString", "$.TriangleRenderer", "org.jmol.util.ArrayUtil", "$.Colix", "$.JmolFont", "$.Shader"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.platform = null;
	    this.line3d = null;
	    this.circle3d = null;
	    this.sphere3d = null;
	    this.triangle3d = null;
	    this.cylinder3d = null;
	    this.hermite3d = null;
	    this.isFullSceneAntialiasingEnabled = false;
	    this.antialias2 = false;
	    this.strings = null;
	    this.stringCount = 0;
	    this.anaglyphChannelBytes = null;
	    this.twoPass = false;
	    this.addAllPixels = false;
	    this.$haveTranslucentObjects = false;
	    this.translucentCoverOnly = false;
	    this.pbuf = null;
	    this.pbufT = null;
	    this.zbuf = null;
	    this.zbufT = null;
	    this.translucencyMask = 0;
	    this.shadesCurrent = null;
	    this.anaglyphLength = 0;
	    this.isScreened = false;
	    this.argbNoisyUp = 0;
	    this.argbNoisyDn = 0;
	    this.currentFont = null;
	    this.pixel = null;
	    this.zMargin = 0;
	    this.currentShadeIndex = 0;
	    this.lastRawColor = 0;
	    this.saveAmbient = 0;
	    this.saveDiffuse = 0;
	    this.$currentlyRendering = false;
	    this.vectorAB = null;
	    this.vectorAC = null;
	    this.vectorNormal = null;
	    this.transformedVectors = null;
	    this.shadeIndexes = null;
	    this.shadeIndexes2Sided = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "Graphics3D", org.jmol.util.GData, org.jmol.api.JmolRendererInterface);
	Clazz.prepareFields (c$, function () {
	    this.vectorAB =  new org.jmol.util.Vector3f ();
	    this.vectorAC =  new org.jmol.util.Vector3f ();
	    this.vectorNormal =  new org.jmol.util.Vector3f ();
	    this.transformedVectors =  new Array (org.jmol.g3d.Graphics3D.normixCount);
	    {
		for (var i = org.jmol.g3d.Graphics3D.normixCount; --i >= 0; ) this.transformedVectors[i] =  new org.jmol.util.Vector3f ();

	    }this.shadeIndexes =  Clazz.newByteArray (org.jmol.g3d.Graphics3D.normixCount, 0);
	    this.shadeIndexes2Sided =  Clazz.newByteArray (org.jmol.g3d.Graphics3D.normixCount, 0);
	});
	Clazz.overrideMethod (c$, "clear", 
			      function () {
				  this.stringCount = 0;
				  this.strings = null;
				  org.jmol.g3d.TextRenderer.clearFontCache ();
			      });
	Clazz.overrideMethod (c$, "destroy", 
			      function () {
				  this.releaseBuffers ();
				  this.platform = null;
				  this.graphicsForMetrics = null;
			      });
	Clazz.overrideMethod (c$, "getGData", 
			      function () {
				  return this;
			      });
	Clazz.overrideMethod (c$, "setTranslucentCoverOnly", 
			      function (TF) {
				  this.translucentCoverOnly = TF;
			      }, "~B");
	Clazz.defineMethod (c$, "setZMargin", 
			    function (dz) {
				this.zMargin = dz;
			    }, "~N");
	Clazz.makeConstructor (c$, 
			       function () {
				   Clazz.superConstructor (this, org.jmol.g3d.Graphics3D, []);
			       });
	Clazz.defineMethod (c$, "initialize", 
			    function (apiPlatform) {
				Clazz.superCall (this, org.jmol.g3d.Graphics3D, "initialize", [apiPlatform]);
				this.platform =  new org.jmol.g3d.Platform3D (apiPlatform);
				this.graphicsForMetrics = this.platform.getGraphicsForMetrics ();
				this.line3d =  new org.jmol.g3d.LineRenderer (this);
				this.circle3d =  new org.jmol.g3d.CircleRenderer (this);
				this.sphere3d =  new org.jmol.g3d.SphereRenderer (this);
				this.triangle3d =  new org.jmol.g3d.TriangleRenderer (this);
				this.cylinder3d =  new org.jmol.g3d.CylinderRenderer (this);
				this.hermite3d =  new org.jmol.g3d.HermiteRenderer (this);
			    }, "org.jmol.api.ApiPlatform");
	Clazz.overrideMethod (c$, "currentlyRendering", 
			      function () {
				  return this.$currentlyRendering;
			      });
	Clazz.defineMethod (c$, "setWindowParameters", 
			    function (width, height, antialias) {
				Clazz.superCall (this, org.jmol.g3d.Graphics3D, "setWindowParameters", [width, height, antialias]);
				if (this.$currentlyRendering) this.endRendering ();
			    }, "~N,~N,~B");
	Clazz.overrideMethod (c$, "checkTranslucent", 
			      function (isAlphaTranslucent) {
				  if (isAlphaTranslucent) this.$haveTranslucentObjects = true;
				  return (!this.twoPass || this.twoPass && (this.$isPass2 == isAlphaTranslucent));
			      }, "~B");
	Clazz.overrideMethod (c$, "beginRendering", 
			      function (rotationMatrix) {
				  if (this.$currentlyRendering) this.endRendering ();
				  if (this.windowWidth != this.newWindowWidth || this.windowHeight != this.newWindowHeight || this.newAntialiasing != this.isFullSceneAntialiasingEnabled) {
				      this.windowWidth = this.newWindowWidth;
				      this.windowHeight = this.newWindowHeight;
				      this.isFullSceneAntialiasingEnabled = this.newAntialiasing;
				      this.releaseBuffers ();
				  }this.setRotationMatrix (rotationMatrix);
				  this.antialiasEnabled = this.antialiasThisFrame = this.newAntialiasing;
				  this.$currentlyRendering = true;
				  if (this.strings != null) for (var i = Math.min (this.strings.length, this.stringCount); --i >= 0; ) this.strings[i] = null;

				  this.stringCount = 0;
				  this.twoPass = true;
				  this.$isPass2 = false;
				  this.colixCurrent = 0;
				  this.$haveTranslucentObjects = false;
				  this.addAllPixels = true;
				  if (this.pbuf == null) {
				      this.platform.allocateBuffers (this.windowWidth, this.windowHeight, this.antialiasThisFrame);
				      this.pbuf = this.platform.pBuffer;
				      this.zbuf = this.platform.zBuffer;
				  }this.setWidthHeight (this.antialiasThisFrame);
				  this.platform.obtainScreenBuffer ();
				  if (this.backgroundImage != null) this.plotImage (-2147483648, 0, -2147483648, this.backgroundImage, null, 0, 0, 0);
			      }, "org.jmol.util.Matrix3f");
	Clazz.overrideMethod (c$, "setBackgroundTransparent", 
			      function (TF) {
				  if (this.platform != null) this.platform.setBackgroundTransparent (TF);
			      }, "~B");
	Clazz.defineMethod (c$, "releaseBuffers", 
			    ($fz = function () {
				this.pbuf = null;
				this.zbuf = null;
				this.pbufT = null;
				this.zbufT = null;
				this.platform.releaseBuffers ();
			    }, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "setPass2", 
			      function (antialiasTranslucent) {
				  if (!this.$haveTranslucentObjects || !this.$currentlyRendering) return false;
				  this.$isPass2 = true;
				  this.colixCurrent = 0;
				  this.addAllPixels = true;
				  if (this.pbufT == null || this.antialias2 != antialiasTranslucent) {
				      this.platform.allocateTBuffers (antialiasTranslucent);
				      this.pbufT = this.platform.pBufferT;
				      this.zbufT = this.platform.zBufferT;
				  }this.antialias2 = antialiasTranslucent;
				  if (this.antialiasThisFrame && !this.antialias2) this.downsampleFullSceneAntialiasing (true);
				  this.platform.clearTBuffer ();
				  return true;
			      }, "~B");
	Clazz.overrideMethod (c$, "endRendering", 
			      function () {
				  if (!this.$currentlyRendering) return;
				  if (this.pbuf != null) {
				      if (this.$isPass2) this.mergeOpaqueAndTranslucentBuffers ();
				      if (this.antialiasThisFrame) this.downsampleFullSceneAntialiasing (false);
				  }this.platform.setBackgroundColor (this.bgcolor);
				  this.platform.notifyEndOfRendering ();
				  this.$currentlyRendering = false;
			      });
	Clazz.overrideMethod (c$, "applyAnaglygh", 
			      function (stereoMode, stereoColors) {
				  switch (stereoMode) {
				  case org.jmol.constant.EnumStereoMode.REDCYAN:
				      this.applyCyanAnaglyph ();
				      break;
				  case org.jmol.constant.EnumStereoMode.CUSTOM:
				      this.applyCustomAnaglyph (stereoColors);
				      break;
				  case org.jmol.constant.EnumStereoMode.REDBLUE:
				      this.applyBlueAnaglyph ();
				      break;
				  case org.jmol.constant.EnumStereoMode.REDGREEN:
				      this.applyGreenAnaglyph ();
				      break;
				  case org.jmol.constant.EnumStereoMode.DOUBLE:
				      break;
				  case org.jmol.constant.EnumStereoMode.NONE:
				      break;
				  }
			      }, "org.jmol.constant.EnumStereoMode,~A");
	Clazz.overrideMethod (c$, "snapshotAnaglyphChannelBytes", 
			      function () {
				  if (this.$currentlyRendering) throw  new NullPointerException ();
				  this.anaglyphLength = this.windowWidth * this.windowHeight;
				  if (this.anaglyphChannelBytes == null || this.anaglyphChannelBytes.length != this.anaglyphLength) this.anaglyphChannelBytes =  Clazz.newByteArray (this.anaglyphLength, 0);
				  for (var i = this.anaglyphLength; --i >= 0; ) this.anaglyphChannelBytes[i] = this.pbuf[i];

			      });
	Clazz.defineMethod (c$, "applyCustomAnaglyph", 
			    function (stereoColors) {
				var color1 = stereoColors[0];
				var color2 = stereoColors[1] & 0x00FFFFFF;
				for (var i = this.anaglyphLength; --i >= 0; ) {
				    var a = this.anaglyphChannelBytes[i] & 0x000000FF;
				    a = (a | ((a | (a << 8)) << 8)) & color2;
				    this.pbuf[i] = (this.pbuf[i] & color1) | a;
				}
			    }, "~A");
	Clazz.defineMethod (c$, "applyGreenAnaglyph", 
			    function () {
				for (var i = this.anaglyphLength; --i >= 0; ) {
				    var green = (this.anaglyphChannelBytes[i] & 0x000000FF) << 8;
				    this.pbuf[i] = (this.pbuf[i] & 0xFFFF0000) | green;
				}
			    });
	Clazz.defineMethod (c$, "applyBlueAnaglyph", 
			    function () {
				for (var i = this.anaglyphLength; --i >= 0; ) {
				    var blue = this.anaglyphChannelBytes[i] & 0x000000FF;
				    this.pbuf[i] = (this.pbuf[i] & 0xFFFF0000) | blue;
				}
			    });
	Clazz.defineMethod (c$, "applyCyanAnaglyph", 
			    function () {
				for (var i = this.anaglyphLength; --i >= 0; ) {
				    var blue = this.anaglyphChannelBytes[i] & 0x000000FF;
				    var cyan = (blue << 8) | blue;
				    this.pbuf[i] = this.pbuf[i] & 0xFFFF0000 | cyan;
				}
			    });
	Clazz.overrideMethod (c$, "getScreenImage", 
			      function () {
				  return this.platform.bufferedImage;
			      });
	Clazz.overrideMethod (c$, "releaseScreenImage", 
			      function () {
				  this.platform.clearScreenBufferThreaded ();
			      });
	Clazz.overrideMethod (c$, "haveTranslucentObjects", 
			      function () {
				  return this.$haveTranslucentObjects;
			      });
	Clazz.defineMethod (c$, "setTempZSlab", 
			    function (zSlab) {
				this.zSlab = zSlab;
			    }, "~N");
	Clazz.defineMethod (c$, "setZShade", 
			    function (zShade, zSlab, zDepth, zShadePower) {
				Clazz.superCall (this, org.jmol.g3d.Graphics3D, "setZShade", [zShade, zSlab, zDepth, zShadePower]);
				if (zShade) {
				    this.pixel =  new org.jmol.g3d.PixelatorShaded (this);
				} else {
				    this.pixel =  new org.jmol.g3d.Pixelator (this);
				}}, "~B,~N,~N,~N");
	Clazz.defineMethod (c$, "downsampleFullSceneAntialiasing", 
			    ($fz = function (downsampleZBuffer) {
				var width4 = this.width;
				var offset1 = 0;
				var offset4 = 0;
				var bgcheck = this.bgcolor;
				if (downsampleZBuffer) bgcheck += ((bgcheck & 0xFF) == 0xFF ? -1 : 1);
				for (var i = 0; i < this.pbuf.length; i++) if (this.pbuf[i] == 0) this.pbuf[i] = bgcheck;

				bgcheck &= 0xFFFFFF;
				for (var i = this.windowHeight; --i >= 0; offset4 += width4) for (var j = this.windowWidth; --j >= 0; ++offset1) {
				    var argb = ((this.pbuf[offset4] >> 2) & 0x3F3F3F3F) + ((this.pbuf[offset4++ + width4] >> 2) & 0x3F3F3F3F) + ((this.pbuf[offset4] >> 2) & 0x3F3F3F3F) + ((this.pbuf[offset4++ + width4] >> 2) & 0x3F3F3F3F);
				    argb += (argb & 0xC0C0C0C0) >> 6;
				    this.pbuf[offset1] = argb & 0x00FFFFFF;
				}

				if (downsampleZBuffer) {
				    offset1 = offset4 = 0;
				    for (var i = this.windowHeight; --i >= 0; offset4 += width4) for (var j = this.windowWidth; --j >= 0; ++offset1, ++offset4) {
					var z = Math.min (this.zbuf[offset4], this.zbuf[offset4 + width4]);
					z = Math.min (z, this.zbuf[++offset4]);
					z = Math.min (z, this.zbuf[offset4 + width4]);
					if (z != 2147483647) z >>= 1;
					this.zbuf[offset1] = (this.pbuf[offset1] == bgcheck ? 2147483647 : z);
				    }

				    this.antialiasThisFrame = false;
				    this.setWidthHeight (false);
				}}, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "mergeOpaqueAndTranslucentBuffers", 
			    function () {
				if (this.pbufT == null) return;
				for (var offset = 0; offset < this.bufferSize; offset++) org.jmol.g3d.Graphics3D.mergeBufferPixel (this.pbuf, offset, this.pbufT[offset], this.bgcolor);

			    });
	c$.mergeBufferPixel = Clazz.defineMethod (c$, "mergeBufferPixel", 
						  function (pbuf, offset, argbB, bgcolor) {
						      if (argbB == 0) return;
						      var argbA = pbuf[offset];
						      if (argbA == argbB) return;
						      if (argbA == 0) argbA = bgcolor;
						      var rbA = (argbA & 0x00FF00FF);
						      var gA = (argbA & 0x0000FF00);
						      var rbB = (argbB & 0x00FF00FF);
						      var gB = (argbB & 0x0000FF00);
						      var logAlpha = (argbB >> 24) & 7;
						      switch (logAlpha) {
						      case 1:
							  rbA = (((rbB << 2) + (rbB << 1) + rbB + rbA) >> 3) & 0x00FF00FF;
							  gA = (((gB << 2) + +(gB << 1) + gB + gA) >> 3) & 0x0000FF00;
							  break;
						      case 2:
							  rbA = (((rbB << 1) + rbB + rbA) >> 2) & 0x00FF00FF;
							  gA = (((gB << 1) + gB + gA) >> 2) & 0x0000FF00;
							  break;
						      case 3:
							  rbA = (((rbB << 2) + rbB + (rbA << 1) + rbA) >> 3) & 0x00FF00FF;
							  gA = (((gB << 2) + gB + (gA << 1) + gA) >> 3) & 0x0000FF00;
							  break;
						      case 4:
							  rbA = ((rbA + rbB) >> 1) & 0x00FF00FF;
							  gA = ((gA + gB) >> 1) & 0x0000FF00;
							  break;
						      case 5:
							  rbA = (((rbB << 1) + rbB + (rbA << 2) + rbA) >> 3) & 0x00FF00FF;
							  gA = (((gB << 1) + gB + (gA << 2) + gA) >> 3) & 0x0000FF00;
							  break;
						      case 6:
							  rbA = (((rbA << 1) + rbA + rbB) >> 2) & 0x00FF00FF;
							  gA = (((gA << 1) + gA + gB) >> 2) & 0x0000FF00;
							  break;
						      case 7:
							  rbA = (((rbA << 2) + (rbA << 1) + rbA + rbB) >> 3) & 0x00FF00FF;
							  gA = (((gA << 2) + (gA << 1) + gA + gB) >> 3) & 0x0000FF00;
							  break;
						      }
						      pbuf[offset] = 0xFF000000 | rbA | gA;
						  }, "~A,~N,~N,~N");
	Clazz.defineMethod (c$, "hasContent", 
			    function () {
				return this.platform.hasContent ();
			    });
	Clazz.overrideMethod (c$, "setColor", 
			      function (argb) {
				  this.argbCurrent = argb;
				  this.argbNoisyUp = this.argbNoisyDn = argb;
			      }, "~N");
	Clazz.overrideMethod (c$, "setColix", 
			      function (colix) {
				  var isLast = org.jmol.util.Colix.isColixLastAvailable (colix);
				  if (!isLast && colix == this.colixCurrent && this.currentShadeIndex == -1) return true;
				  var mask = colix & 30720;
				  if (mask == 16384) return false;
				  var isTranslucent = mask != 0;
				  this.isScreened = isTranslucent && mask == 30720;
				  if (!this.checkTranslucent (isTranslucent && !this.isScreened)) return false;
				  this.addAllPixels = this.$isPass2 || !isTranslucent;
				  if (this.$isPass2) {
				      this.translucencyMask = (mask << 13) | 0xFFFFFF;
				  }this.colixCurrent = colix;
				  if (isLast) {
				      if (this.argbCurrent != this.lastRawColor) {
					  if (this.argbCurrent == 0) this.argbCurrent = 0xFFFFFFFF;
					  this.lastRawColor = this.argbCurrent;
					  org.jmol.util.Colix.allocateColix (this.argbCurrent);
					  org.jmol.util.Colix.getShadesArgb (this.argbCurrent, this.inGreyscaleMode);
				      }}this.shadesCurrent = this.getShades (colix);
				  this.currentShadeIndex = -1;
				  this.setColor (this.getColorArgbOrGray (colix));
				  return true;
			      }, "~N");
	Clazz.defineMethod (c$, "addPixel", 
			    function (offset, z, p) {
				this.pixel.addPixel (offset, z, p);
			    }, "~N,~N,~N");
	Clazz.overrideMethod (c$, "drawFilledCircle", 
			      function (colixRing, colixFill, diameter, x, y, z) {
				  if (this.isClippedZ (z)) return;
				  var r = Clazz.doubleToInt ((diameter + 1) / 2);
				  var isClipped = x < r || x + r >= this.width || y < r || y + r >= this.height;
				  if (isClipped && this.isClippedXY (diameter, x, y)) return;
				  if (colixRing != 0 && this.setColix (colixRing)) {
				      if (isClipped) this.circle3d.plotCircleCenteredClipped (x, y, z, diameter);
				      else this.circle3d.plotCircleCenteredUnclipped (x, y, z, diameter);
				  }if (colixFill != 0 && this.setColix (colixFill)) {
				      if (isClipped) this.circle3d.plotFilledCircleCenteredClipped (x, y, z, diameter);
				      else this.circle3d.plotFilledCircleCenteredUnclipped (x, y, z, diameter);
				  }}, "~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "volumeRender4", 
			      function (diameter, x, y, z) {
				  if (diameter == 1) {
				      this.plotPixelClippedXYZ (x, y, z);
				      return;
				  }if (this.isClippedZ (z)) return;
				  var r = Clazz.doubleToInt ((diameter + 1) / 2);
				  var isClipped = x < r || x + r >= this.width || y < r || y + r >= this.height;
				  if (isClipped && this.isClippedXY (diameter, x, y)) return;
				  if (isClipped) this.circle3d.plotFilledCircleCenteredClipped (x, y, z, diameter);
				  else this.circle3d.plotFilledCircleCenteredUnclipped (x, y, z, diameter);
			      }, "~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "fillSphereXYZ", 
			      function (diameter, x, y, z) {
				  switch (diameter) {
				  case 1:
				      this.plotPixelClippedArgb (this.argbCurrent, x, y, z);
				      return;
				  case 0:
				      return;
				  }
				  if (diameter <= (this.antialiasThisFrame ? 2000 : 1000)) this.sphere3d.render (this.shadesCurrent, !this.addAllPixels, diameter, x, y, z, null, null, null, -1, null, this.addAllPixels);
			      }, "~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "volumeRender", 
			      function (TF) {
				  if (TF) {
				      this.saveAmbient = org.jmol.util.Shader.ambientPercent;
				      this.saveDiffuse = org.jmol.util.Shader.diffusePercent;
				      org.jmol.util.GData.setAmbientPercent (100);
				      org.jmol.util.GData.setDiffusePercent (0);
				  } else {
				      org.jmol.util.GData.setAmbientPercent (this.saveAmbient);
				      org.jmol.util.GData.setDiffusePercent (this.saveDiffuse);
				  }}, "~B");
	Clazz.overrideMethod (c$, "fillSphereI", 
			      function (diameter, center) {
				  this.fillSphereXYZ (diameter, center.x, center.y, center.z);
			      }, "~N,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "fillSphere", 
			      function (diameter, center) {
				  this.fillSphereXYZ (diameter, Math.round (center.x), Math.round (center.y), Math.round (center.z));
			      }, "~N,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "fillEllipsoid", 
			      function (center, points, x, y, z, diameter, mToEllipsoidal, coef, mDeriv, selectedOctant, octantPoints) {
				  switch (diameter) {
				  case 1:
				      this.plotPixelClippedArgb (this.argbCurrent, x, y, z);
				      return;
				  case 0:
				      return;
				  }
				  if (diameter <= (this.antialiasThisFrame ? 2000 : 1000)) this.sphere3d.render (this.shadesCurrent, !this.addAllPixels, diameter, x, y, z, mToEllipsoidal, coef, mDeriv, selectedOctant, octantPoints, this.addAllPixels);
			      }, "org.jmol.util.Point3f,~A,~N,~N,~N,~N,org.jmol.util.Matrix3f,~A,org.jmol.util.Matrix4f,~N,~A");
	Clazz.overrideMethod (c$, "drawRect", 
			      function (x, y, z, zSlab, rWidth, rHeight) {
				  if (zSlab != 0 && this.isClippedZ (zSlab)) return;
				  var w = rWidth - 1;
				  var h = rHeight - 1;
				  var xRight = x + w;
				  var yBottom = y + h;
				  if (y >= 0 && y < this.height) this.drawHLine (x, y, z, w);
				  if (yBottom >= 0 && yBottom < this.height) this.drawHLine (x, yBottom, z, w);
				  if (x >= 0 && x < this.width) this.drawVLine (x, y, z, h);
				  if (xRight >= 0 && xRight < this.width) this.drawVLine (xRight, y, z, h);
			      }, "~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "drawHLine", 
			    ($fz = function (x, y, z, w) {
				if (w < 0) {
				    x += w;
				    w = -w;
				}if (x < 0) {
				    w += x;
				    x = 0;
				}if (x + w >= this.width) w = this.width - 1 - x;
				var offset = x + this.width * y;
				if (this.addAllPixels) {
				    for (var i = 0; i <= w; i++) {
					if (z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
					offset++;
				    }
				    return;
				}var flipflop = ((x ^ y) & 1) != 0;
				for (var i = 0; i <= w; i++) {
				    if ((flipflop = !flipflop) && z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
				    offset++;
				}
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "drawVLine", 
			    ($fz = function (x, y, z, h) {
				if (h < 0) {
				    y += h;
				    h = -h;
				}if (y < 0) {
				    h += y;
				    y = 0;
				}if (y + h >= this.height) {
				    h = this.height - 1 - y;
				}var offset = x + this.width * y;
				if (this.addAllPixels) {
				    for (var i = 0; i <= h; i++) {
					if (z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
					offset += this.width;
				    }
				    return;
				}var flipflop = ((x ^ y) & 1) != 0;
				for (var i = 0; i <= h; i++) {
				    if ((flipflop = !flipflop) && z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
				    offset += this.width;
				}
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "fillRect", 
			      function (x, y, z, zSlab, widthFill, heightFill) {
				  if (this.isClippedZ (zSlab)) return;
				  if (x < 0) {
				      widthFill += x;
				      if (widthFill <= 0) return;
				      x = 0;
				  }if (x + widthFill > this.width) {
				      widthFill = this.width - x;
				      if (widthFill <= 0) return;
				  }if (y < 0) {
				      heightFill += y;
				      if (heightFill <= 0) return;
				      y = 0;
				  }if (y + heightFill > this.height) heightFill = this.height - y;
				  while (--heightFill >= 0) this.plotPixelsUnclippedCount (widthFill, x, y++, z);

			      }, "~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "drawString", 
			      function (str, font3d, xBaseline, yBaseline, z, zSlab) {
				  this.currentShadeIndex = 0;
				  if (str == null) return;
				  if (this.isClippedZ (zSlab)) return;
				  this.drawStringNoSlab (str, font3d, xBaseline, yBaseline, z);
			      }, "~S,org.jmol.util.JmolFont,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "drawStringNoSlab", 
			      function (str, font3d, xBaseline, yBaseline, z) {
				  if (str == null) return;
				  if (this.strings == null) this.strings =  new Array (10);
				  if (this.stringCount == this.strings.length) this.strings = org.jmol.util.ArrayUtil.doubleLength (this.strings);
				  var t =  new org.jmol.g3d.TextString ();
				  t.setText (str, font3d == null ? this.currentFont : (this.currentFont = font3d), this.argbCurrent, xBaseline, yBaseline, z);
				  this.strings[this.stringCount++] = t;
			      }, "~S,org.jmol.util.JmolFont,~N,~N,~N");
	Clazz.overrideMethod (c$, "renderAllStrings", 
			      function (jmolRenderer) {
				  if (this.strings == null) return;
				  if (org.jmol.g3d.Graphics3D.sort == null) ($t$ = org.jmol.g3d.Graphics3D.sort =  new org.jmol.g3d.TextSorter (), org.jmol.g3d.Graphics3D.prototype.sort = org.jmol.g3d.Graphics3D.sort, $t$);
				  java.util.Arrays.sort (this.strings, org.jmol.g3d.Graphics3D.sort);
				  for (var i = 0; i < this.stringCount; i++) {
				      var ts = this.strings[i];
				      this.plotText (ts.x, ts.y, ts.z, ts.argb, ts.text, ts.font, jmolRenderer);
				  }
			      }, "~O");
	Clazz.overrideMethod (c$, "plotText", 
			      function (x, y, z, argb, text, font3d, jmolRenderer) {
				  org.jmol.g3d.TextRenderer.plot (x, y, z, argb, text, font3d, this, jmolRenderer, this.antialiasThisFrame);
			      }, "~N,~N,~N,~N,~S,org.jmol.util.JmolFont,org.jmol.api.JmolRendererInterface");
	Clazz.overrideMethod (c$, "drawImage", 
			      function (objImage, x, y, z, zSlab, bgcolix, width, height) {
				  if (objImage == null || width == 0 || height == 0) return;
				  if (this.isClippedZ (zSlab)) return;
				  this.plotImage (x, y, z, objImage, null, bgcolix, width, height);
			      }, "~O,~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "plotImage", 
			    function (x, y, z, image, jmolRenderer, bgcolix, width, height) {
				this.setColix (bgcolix);
				if (bgcolix == 0) this.argbCurrent = 0;
				org.jmol.g3d.ImageRenderer.plotImage (x, y, z, image, this, jmolRenderer, this.antialiasThisFrame, this.argbCurrent, width, height);
			    }, "~N,~N,~N,~O,org.jmol.api.JmolRendererInterface,~N,~N,~N");
	Clazz.overrideMethod (c$, "setFontFid", 
			      function (fid) {
				  this.currentFont = org.jmol.util.JmolFont.getFont3D (fid);
			      }, "~N");
	Clazz.overrideMethod (c$, "setFont", 
			      function (font3d) {
				  this.currentFont = font3d;
			      }, "org.jmol.util.JmolFont");
	Clazz.overrideMethod (c$, "getFont3DCurrent", 
			      function () {
				  return this.currentFont;
			      });
	Clazz.overrideMethod (c$, "drawPixel", 
			      function (x, y, z) {
				  this.plotPixelClippedXYZ (x, y, z);
			      }, "~N,~N,~N");
	Clazz.overrideMethod (c$, "drawPoints", 
			      function (count, coordinates, scale) {
				  if (scale > 1) {
				      var s2 = scale * scale * 0.8;
				      for (var i = -scale; i < scale; i++) {
					  for (var j = -scale; j < scale; j++) {
					      if (i * i + j * j > s2) continue;
					      this.plotPoints (count, coordinates, i, j);
					      this.plotPoints (count, coordinates, i, j);
					  }
				      }
				  } else {
				      this.plotPoints (count, coordinates, 0, 0);
				  }}, "~N,~A,~N");
	Clazz.overrideMethod (c$, "drawDashedLine", 
			      function (run, rise, pointA, pointB) {
				  this.line3d.plotDashedLine (this.argbCurrent, !this.addAllPixels, run, rise, pointA.x, pointA.y, pointA.z, pointB.x, pointB.y, pointB.z, true);
			      }, "~N,~N,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "drawDottedLine", 
			      function (pointA, pointB) {
				  this.line3d.plotDashedLine (this.argbCurrent, !this.addAllPixels, 2, 1, pointA.x, pointA.y, pointA.z, pointB.x, pointB.y, pointB.z, true);
			      }, "org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "drawLineXYZ", 
			      function (x1, y1, z1, x2, y2, z2) {
				  this.line3d.plotLine (this.argbCurrent, !this.addAllPixels, this.argbCurrent, !this.addAllPixels, x1, y1, z1, x2, y2, z2, true);
			      }, "~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "drawLine", 
			      function (colixA, colixB, x1, y1, z1, x2, y2, z2) {
				  if (!this.setColix (colixA)) colixA = 0;
				  var isScreenedA = !this.addAllPixels;
				  var argbA = this.argbCurrent;
				  if (!this.setColix (colixB)) colixB = 0;
				  if (colixA == 0 && colixB == 0) return;
				  this.line3d.plotLine (argbA, isScreenedA, this.argbCurrent, !this.addAllPixels, x1, y1, z1, x2, y2, z2, true);
			      }, "~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "drawLineAB", 
			      function (pointA, pointB) {
				  this.line3d.plotLine (this.argbCurrent, !this.addAllPixels, this.argbCurrent, !this.addAllPixels, pointA.x, pointA.y, pointA.z, pointB.x, pointB.y, pointB.z, true);
			      }, "org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "fillCylinderXYZ", 
			      function (colixA, colixB, endcaps, diameter, xA, yA, zA, xB, yB, zB) {
				  if (!this.setColix (colixA)) colixA = 0;
				  var isScreenedA = !this.addAllPixels;
				  if (!this.setColix (colixB)) colixB = 0;
				  if (colixA == 0 && colixB == 0) return;
				  this.cylinder3d.render (colixA, colixB, isScreenedA, !this.addAllPixels, endcaps, diameter, xA, yA, zA, xB, yB, zB);
			      }, "~N,~N,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "fillCylinderScreen", 
			      function (endcaps, diameter, xA, yA, zA, xB, yB, zB) {
				  this.cylinder3d.render (this.colixCurrent, this.colixCurrent, !this.addAllPixels, !this.addAllPixels, endcaps, diameter, xA, yA, zA, xB, yB, zB);
			      }, "~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "fillCylinderScreen3I", 
			      function (endcaps, diameter, screenA, screenB, pt0f, pt1f, radius) {
				  this.cylinder3d.render (this.colixCurrent, this.colixCurrent, !this.addAllPixels, !this.addAllPixels, endcaps, diameter, screenA.x, screenA.y, screenA.z, screenB.x, screenB.y, screenB.z);
			      }, "~N,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3f,org.jmol.util.Point3f,~N");
	Clazz.overrideMethod (c$, "fillCylinder", 
			      function (endcaps, diameter, screenA, screenB) {
				  this.cylinder3d.render (this.colixCurrent, this.colixCurrent, !this.addAllPixels, !this.addAllPixels, endcaps, diameter, screenA.x, screenA.y, screenA.z, screenB.x, screenB.y, screenB.z);
			      }, "~N,~N,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "fillCylinderBits", 
			      function (endcaps, diameter, screenA, screenB) {
				  this.cylinder3d.renderBits (this.colixCurrent, this.colixCurrent, !this.addAllPixels, !this.addAllPixels, endcaps, diameter, screenA.x, screenA.y, screenA.z, screenB.x, screenB.y, screenB.z);
			      }, "~N,~N,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "fillConeScreen", 
			      function (endcap, screenDiameter, screenBase, screenTip, isBarb) {
				  this.cylinder3d.renderCone (this.colixCurrent, !this.addAllPixels, endcap, screenDiameter, screenBase.x, screenBase.y, screenBase.z, screenTip.x, screenTip.y, screenTip.z, false, isBarb);
			      }, "~N,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,~B");
	Clazz.overrideMethod (c$, "fillConeSceen3f", 
			      function (endcap, screenDiameter, screenBase, screenTip) {
				  this.cylinder3d.renderCone (this.colixCurrent, !this.addAllPixels, endcap, screenDiameter, screenBase.x, screenBase.y, screenBase.z, screenTip.x, screenTip.y, screenTip.z, true, false);
			      }, "~N,~N,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "drawHermite4", 
			      function (tension, s0, s1, s2, s3) {
				  this.hermite3d.renderHermiteRope (false, tension, 0, 0, 0, s0, s1, s2, s3);
			      }, "~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "drawHermite7", 
			      function (fill, border, tension, s0, s1, s2, s3, s4, s5, s6, s7, aspectRatio) {
				  this.hermite3d.renderHermiteRibbon (fill, border, tension, s0, s1, s2, s3, s4, s5, s6, s7, aspectRatio);
			      }, "~B,~B,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,~N");
	Clazz.overrideMethod (c$, "fillHermite", 
			      function (tension, diameterBeg, diameterMid, diameterEnd, s0, s1, s2, s3) {
				  this.hermite3d.renderHermiteRope (true, tension, diameterBeg, diameterMid, diameterEnd, s0, s1, s2, s3);
			      }, "~N,~N,~N,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "drawTriangle3C", 
			      function (screenA, colixA, screenB, colixB, screenC, colixC, check) {
				  if ((check & 1) == 1) this.drawLine (colixA, colixB, screenA.x, screenA.y, screenA.z, screenB.x, screenB.y, screenB.z);
				  if ((check & 2) == 2) this.drawLine (colixB, colixC, screenB.x, screenB.y, screenB.z, screenC.x, screenC.y, screenC.z);
				  if ((check & 4) == 4) this.drawLine (colixA, colixC, screenA.x, screenA.y, screenA.z, screenC.x, screenC.y, screenC.z);
			      }, "org.jmol.util.Point3i,~N,org.jmol.util.Point3i,~N,org.jmol.util.Point3i,~N,~N");
	Clazz.overrideMethod (c$, "drawTriangle3I", 
			      function (screenA, screenB, screenC, check) {
				  if ((check & 1) == 1) this.line3d.plotLine (this.argbCurrent, !this.addAllPixels, this.argbCurrent, !this.addAllPixels, screenA.x, screenA.y, screenA.z, screenB.x, screenB.y, screenB.z, true);
				  if ((check & 2) == 2) this.line3d.plotLine (this.argbCurrent, !this.addAllPixels, this.argbCurrent, !this.addAllPixels, screenB.x, screenB.y, screenB.z, screenC.x, screenC.y, screenC.z, true);
				  if ((check & 4) == 4) this.line3d.plotLine (this.argbCurrent, !this.addAllPixels, this.argbCurrent, !this.addAllPixels, screenA.x, screenA.y, screenA.z, screenC.x, screenC.y, screenC.z, true);
			      }, "org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,~N");
	Clazz.overrideMethod (c$, "fillTriangleTwoSided", 
			      function (normix, xScreenA, yScreenA, zScreenA, xScreenB, yScreenB, zScreenB, xScreenC, yScreenC, zScreenC) {
				  this.setColorNoisy (this.getShadeIndex (normix));
				  this.triangle3d.fillTriangleXYZ (xScreenA, yScreenA, zScreenA, xScreenB, yScreenB, zScreenB, xScreenC, yScreenC, zScreenC, false);
			      }, "~N,~N,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "fillTriangle3f", 
			      function (screenA, screenB, screenC) {
				  this.setColorNoisy (this.getShadeIndexP3 (screenA, screenB, screenC));
				  this.triangle3d.fillTriangleP3f (screenA, screenB, screenC, false);
			      }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "fillTriangle3i", 
			      function (screenA, screenB, screenC, ptA, ptB, ptC) {
				  this.triangle3d.fillTriangleP3i (screenA, screenB, screenC, false);
			      }, "org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "fillTriangle", 
			      function (screenA, colixA, normixA, screenB, colixB, normixB, screenC, colixC, normixC, factor) {
				  var useGouraud;
				  if (!this.$isPass2 && normixA == normixB && normixA == normixC && colixA == colixB && colixA == colixC) {
				      this.setTriangleColixAndShadeIndex (colixA, this.getShadeIndex (normixA));
				      useGouraud = false;
				  } else {
				      if (!this.setTriangleTranslucency (colixA, colixB, colixC)) return;
				      this.triangle3d.setGouraud (this.getShades (colixA)[this.getShadeIndex (normixA)], this.getShades (colixB)[this.getShadeIndex (normixB)], this.getShades (colixC)[this.getShadeIndex (normixC)]);
				      useGouraud = true;
				  }this.triangle3d.fillTriangleP3if (screenA, screenB, screenC, factor, useGouraud);
			      }, "org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N,~N");
	Clazz.overrideMethod (c$, "fillTriangle3CN", 
			      function (screenA, colixA, normixA, screenB, colixB, normixB, screenC, colixC, normixC) {
				  var useGouraud;
				  if (!this.$isPass2 && normixA == normixB && normixA == normixC && colixA == colixB && colixA == colixC) {
				      this.setTriangleColixAndShadeIndex (colixA, this.getShadeIndex (normixA));
				      useGouraud = false;
				  } else {
				      if (!this.setTriangleTranslucency (colixA, colixB, colixC)) return;
				      this.triangle3d.setGouraud (this.getShades (colixA)[this.getShadeIndex (normixA)], this.getShades (colixB)[this.getShadeIndex (normixB)], this.getShades (colixC)[this.getShadeIndex (normixC)]);
				      useGouraud = true;
				  }this.triangle3d.fillTriangleP3i (screenA, screenB, screenC, useGouraud);
			      }, "org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N");
	Clazz.defineMethod (c$, "setTriangleColixAndShadeIndex", 
			    ($fz = function (colix, shadeIndex) {
				if (colix == this.colixCurrent && this.currentShadeIndex == shadeIndex) return;
				this.currentShadeIndex = -1;
				this.setColix (colix);
				this.setColorNoisy (shadeIndex);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "setTriangleTranslucency", 
			    ($fz = function (colixA, colixB, colixC) {
				if (!this.$isPass2) return true;
				var maskA = colixA & 30720;
				var maskB = colixB & 30720;
				var maskC = colixC & 30720;
				maskA &= -16385;
				maskB &= -16385;
				maskC &= -16385;
				var mask = org.jmol.util.GData.roundInt (Clazz.doubleToInt ((maskA + maskB + maskC) / 3)) & 30720;
				this.translucencyMask = (mask << 13) | 0xFFFFFF;
				return true;
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.overrideMethod (c$, "drawQuadrilateral", 
			      function (colix, screenA, screenB, screenC, screenD) {
				  this.setColix (colix);
				  this.drawLineAB (screenA, screenB);
				  this.drawLineAB (screenB, screenC);
				  this.drawLineAB (screenC, screenD);
				  this.drawLineAB (screenD, screenA);
			      }, "~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.overrideMethod (c$, "fillQuadrilateral", 
			      function (screenA, screenB, screenC, screenD) {
				  this.setColorNoisy (this.getShadeIndexP3 (screenA, screenB, screenC));
				  this.triangle3d.fillTriangleP3f (screenA, screenB, screenC, false);
				  this.triangle3d.fillTriangleP3f (screenA, screenC, screenD, false);
			      }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "fillQuadrilateral3i", 
			      function (screenA, colixA, normixA, screenB, colixB, normixB, screenC, colixC, normixC, screenD, colixD, normixD) {
				  this.fillTriangle3CN (screenA, colixA, normixA, screenB, colixB, normixB, screenC, colixC, normixC);
				  this.fillTriangle3CN (screenA, colixA, normixA, screenC, colixC, normixC, screenD, colixD, normixD);
			      }, "org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N,org.jmol.util.Point3i,~N,~N");
	Clazz.overrideMethod (c$, "drawSurface", 
			      function (meshSurface, colix) {
			      }, "org.jmol.util.MeshSurface,~N");
	Clazz.defineMethod (c$, "plotPixelClippedXYZ", 
			    function (x, y, z) {
				if (this.isClipped3 (x, y, z)) return;
				var offset = y * this.width + x;
				if (z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
			    }, "~N,~N,~N");
	Clazz.overrideMethod (c$, "plotPixelClippedP3i", 
			      function (screen) {
				  this.plotPixelClippedXYZ (screen.x, screen.y, screen.z);
			      }, "org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "plotPixelClippedArgb", 
			    function (argb, x, y, z) {
				if (this.isClipped3 (x, y, z)) return;
				var offset = y * this.width + x;
				if (z < this.zbuf[offset]) this.addPixel (offset, z, argb);
			    }, "~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "plotImagePixel", 
			      function (argb, x, y, z, shade) {
				  if (this.isClipped (x, y)) return;
				  var offset = y * this.width + x;
				  if (z < this.zbuf[offset]) this.shadeTextPixel (offset, z, argb, shade);
			      }, "~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "plotPixelClippedScreened", 
			    function (argb, isScreened, x, y, z) {
				if (this.isClipped3 (x, y, z)) return;
				if (isScreened && ((x ^ y) & 1) != 0) return;
				var offset = y * this.width + x;
				if (z < this.zbuf[offset]) this.addPixel (offset, z, argb);
			    }, "~N,~B,~N,~N,~N");
	Clazz.defineMethod (c$, "plotPixelUnclipped", 
			    function (x, y, z) {
				var offset = y * this.width + x;
				if (z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "plotPixelUnclippedArgb", 
			    function (argb, x, y, z) {
				var offset = y * this.width + x;
				if (z < this.zbuf[offset]) this.addPixel (offset, z, argb);
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "plotPixelsClipped", 
			    function (count, x, y, z) {
				if (y < 0 || y >= this.height || x >= this.width) return;
				if (x < 0) {
				    count += x;
				    x = 0;
				}if (count + x > this.width) count = this.width - x;
				if (count <= 0) return;
				var offsetPbuf = y * this.width + x;
				var offsetMax = offsetPbuf + count;
				var step = 1;
				if (!this.addAllPixels) {
				    step = 2;
				    if (((x ^ y) & 1) != 0) ++offsetPbuf;
				}while (offsetPbuf < offsetMax) {
				    if (z < this.zbuf[offsetPbuf]) this.addPixel (offsetPbuf, z, this.argbCurrent);
				    offsetPbuf += step;
				}
			    }, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "plotPixelsClippedRaster", 
			    function (count, x, y, zAtLeft, zPastRight, rgb16Left, rgb16Right) {
				if (count <= 0 || y < 0 || y >= this.height || x >= this.width || (zAtLeft < this.slab && zPastRight < this.slab) || (zAtLeft > this.depth && zPastRight > this.depth)) return;
				var seed = (x << 16) + (y << 1) ^ 0x33333333;
				var zScaled = (zAtLeft << 10) + (512);
				var dz = zPastRight - zAtLeft;
				var roundFactor = Clazz.doubleToInt (count / 2);
				var zIncrementScaled = org.jmol.util.GData.roundInt (Clazz.doubleToInt (((dz << 10) + (dz >= 0 ? roundFactor : -roundFactor)) / count));
				if (x < 0) {
				    x = -x;
				    zScaled += zIncrementScaled * x;
				    count -= x;
				    if (count <= 0) return;
				    x = 0;
				}if (count + x > this.width) count = this.width - x;
				var flipflop = ((x ^ y) & 1) != 0;
				var offsetPbuf = y * this.width + x;
				if (rgb16Left == null) {
				    while (--count >= 0) {
					if (this.addAllPixels || (flipflop = !flipflop) == true) {
					    var z = zScaled >> 10;
					    if (z >= this.slab && z <= this.depth && z < this.zbuf[offsetPbuf]) {
						seed = ((seed << 16) + (seed << 1) + seed) & 0x7FFFFFFF;
						var bits = (seed >> 16) & 0x07;
						this.addPixel (offsetPbuf, z, bits == 0 ? this.argbNoisyDn : (bits == 1 ? this.argbNoisyUp : this.argbCurrent));
					    }}++offsetPbuf;
					zScaled += zIncrementScaled;
				    }
				} else {
				    var rScaled = rgb16Left.rScaled << 8;
				    var rIncrement = Clazz.doubleToInt (((rgb16Right.rScaled - rgb16Left.rScaled) << 8) / count);
				    var gScaled = rgb16Left.gScaled;
				    var gIncrement = Clazz.doubleToInt ((rgb16Right.gScaled - gScaled) / count);
				    var bScaled = rgb16Left.bScaled;
				    var bIncrement = Clazz.doubleToInt ((rgb16Right.bScaled - bScaled) / count);
				    while (--count >= 0) {
					if (this.addAllPixels || (flipflop = !flipflop)) {
					    var z = zScaled >> 10;
					    if (z >= this.slab && z <= this.depth && z < this.zbuf[offsetPbuf]) this.addPixel (offsetPbuf, z, 0xFF000000 | (rScaled & 0xFF0000) | (gScaled & 0xFF00) | ((bScaled >> 8) & 0xFF));
					}++offsetPbuf;
					zScaled += zIncrementScaled;
					rScaled += rIncrement;
					gScaled += gIncrement;
					bScaled += bIncrement;
				    }
				}}, "~N,~N,~N,~N,~N,org.jmol.util.Rgb16,org.jmol.util.Rgb16");
	Clazz.defineMethod (c$, "plotPixelsUnclippedRaster", 
			    function (count, x, y, zAtLeft, zPastRight, rgb16Left, rgb16Right) {
				if (count <= 0) return;
				var seed = ((x << 16) + (y << 1) ^ 0x33333333) & 0x7FFFFFFF;
				var flipflop = ((x ^ y) & 1) != 0;
				var zScaled = (zAtLeft << 10) + (512);
				var dz = zPastRight - zAtLeft;
				var roundFactor = Clazz.doubleToInt (count / 2);
				var zIncrementScaled = org.jmol.util.GData.roundInt (Clazz.doubleToInt (((dz << 10) + (dz >= 0 ? roundFactor : -roundFactor)) / count));
				var offsetPbuf = y * this.width + x;
				if (rgb16Left == null) {
				    while (--count >= 0) {
					if (this.addAllPixels || (flipflop = !flipflop)) {
					    var z = zScaled >> 10;
					    if (z < this.zbuf[offsetPbuf]) {
						seed = ((seed << 16) + (seed << 1) + seed) & 0x7FFFFFFF;
						var bits = (seed >> 16) & 0x07;
						this.addPixel (offsetPbuf, z, bits == 0 ? this.argbNoisyDn : (bits == 1 ? this.argbNoisyUp : this.argbCurrent));
					    }}++offsetPbuf;
					zScaled += zIncrementScaled;
				    }
				} else {
				    var rScaled = rgb16Left.rScaled << 8;
				    var rIncrement = org.jmol.util.GData.roundInt (Clazz.doubleToInt (((rgb16Right.rScaled - rgb16Left.rScaled) << 8) / count));
				    var gScaled = rgb16Left.gScaled;
				    var gIncrement = org.jmol.util.GData.roundInt (Clazz.doubleToInt ((rgb16Right.gScaled - gScaled) / count));
				    var bScaled = rgb16Left.bScaled;
				    var bIncrement = org.jmol.util.GData.roundInt (Clazz.doubleToInt ((rgb16Right.bScaled - bScaled) / count));
				    while (--count >= 0) {
					if (this.addAllPixels || (flipflop = !flipflop)) {
					    var z = zScaled >> 10;
					    if (z < this.zbuf[offsetPbuf]) this.addPixel (offsetPbuf, z, 0xFF000000 | (rScaled & 0xFF0000) | (gScaled & 0xFF00) | ((bScaled >> 8) & 0xFF));
					}++offsetPbuf;
					zScaled += zIncrementScaled;
					rScaled += rIncrement;
					gScaled += gIncrement;
					bScaled += bIncrement;
				    }
				}}, "~N,~N,~N,~N,~N,org.jmol.util.Rgb16,org.jmol.util.Rgb16");
	Clazz.defineMethod (c$, "plotPixelsUnclippedCount", 
			    function (count, x, y, z) {
				var offsetPbuf = y * this.width + x;
				if (this.addAllPixels) {
				    while (--count >= 0) {
					if (z < this.zbuf[offsetPbuf]) this.addPixel (offsetPbuf, z, this.argbCurrent);
					++offsetPbuf;
				    }
				} else {
				    var offsetMax = offsetPbuf + count;
				    if (((x ^ y) & 1) != 0) if (++offsetPbuf == offsetMax) return;
				    do {
					if (z < this.zbuf[offsetPbuf]) this.addPixel (offsetPbuf, z, this.argbCurrent);
					offsetPbuf += 2;
				    } while (offsetPbuf < offsetMax);
				}}, "~N,~N,~N,~N");
	Clazz.defineMethod (c$, "plotPoints", 
			    ($fz = function (count, coordinates, xOffset, yOffset) {
				for (var i = count * 3; i > 0; ) {
				    var z = coordinates[--i];
				    var y = coordinates[--i] + yOffset;
				    var x = coordinates[--i] + xOffset;
				    if (this.isClipped3 (x, y, z)) continue;
				    var offset = y * this.width + x++;
				    if (z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
				    if (this.antialiasThisFrame) {
					offset = y * this.width + x;
					if (!this.isClipped3 (x, y, z) && z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
					offset = (++y) * this.width + x;
					if (!this.isClipped3 (x, y, z) && z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
					offset = y * this.width + (--x);
					if (!this.isClipped3 (x, y, z) && z < this.zbuf[offset]) this.addPixel (offset, z, this.argbCurrent);
				    }}
			    }, $fz.isPrivate = true, $fz), "~N,~A,~N,~N");
	Clazz.defineMethod (c$, "setColorNoisy", 
			    function (shadeIndex) {
				this.currentShadeIndex = shadeIndex;
				this.argbCurrent = this.shadesCurrent[shadeIndex];
				this.argbNoisyUp = this.shadesCurrent[shadeIndex < 63 ? shadeIndex + 1 : 63];
				this.argbNoisyDn = this.shadesCurrent[shadeIndex > 0 ? shadeIndex - 1 : 0];
			    }, "~N");
	Clazz.overrideMethod (c$, "setNoisySurfaceShade", 
			      function (screenA, screenB, screenC) {
				  this.vectorAB.set (screenB.x - screenA.x, screenB.y - screenA.y, screenB.z - screenA.z);
				  var shadeIndex;
				  if (screenC == null) {
				      shadeIndex = org.jmol.util.Shader.getShadeIndex (-this.vectorAB.x, -this.vectorAB.y, this.vectorAB.z);
				  } else {
				      this.vectorAC.set (screenC.x - screenA.x, screenC.y - screenA.y, screenC.z - screenA.z);
				      this.vectorAB.cross (this.vectorAB, this.vectorAC);
				      shadeIndex = this.vectorAB.z >= 0 ? org.jmol.util.Shader.getShadeIndex (-this.vectorAB.x, -this.vectorAB.y, this.vectorAB.z) : org.jmol.util.Shader.getShadeIndex (this.vectorAB.x, this.vectorAB.y, -this.vectorAB.z);
				  }if (shadeIndex > 56) shadeIndex = 56;
				  this.setColorNoisy (shadeIndex);
			      }, "org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "getShadeIndexP3", 
			    ($fz = function (screenA, screenB, screenC) {
				this.vectorAB.sub2 (screenB, screenA);
				this.vectorAC.sub2 (screenC, screenA);
				this.vectorNormal.cross (this.vectorAB, this.vectorAC);
				return (this.vectorNormal.z >= 0 ? org.jmol.util.Shader.getShadeIndex (-this.vectorNormal.x, -this.vectorNormal.y, this.vectorNormal.z) : org.jmol.util.Shader.getShadeIndex (this.vectorNormal.x, this.vectorNormal.y, -this.vectorNormal.z));
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f");
	Clazz.overrideMethod (c$, "renderBackground", 
			      function (jmolRenderer) {
				  if (this.backgroundImage != null) this.plotImage (-2147483648, 0, -2147483648, this.backgroundImage, jmolRenderer, 0, 0, 0);
			      }, "org.jmol.api.JmolRendererInterface");
	Clazz.overrideMethod (c$, "drawAtom", 
			      function (atom) {
				  this.fillSphereXYZ (atom.screenDiameter, atom.screenX, atom.screenY, atom.screenZ);
			      }, "org.jmol.modelset.Atom");
	Clazz.overrideMethod (c$, "getExportType", 
			      function () {
				  return 0;
			      });
	Clazz.overrideMethod (c$, "getExportName", 
			      function () {
				  return null;
			      });
	Clazz.defineMethod (c$, "canDoTriangles", 
			    function () {
				return true;
			    });
	Clazz.defineMethod (c$, "isCartesianExport", 
			    function () {
				return false;
			    });
	Clazz.overrideMethod (c$, "initializeExporter", 
			      function (type, viewer, privateKey, g3d, output) {
				  return null;
			      }, "~S,org.jmol.viewer.Viewer,~N,org.jmol.util.GData,~O");
	Clazz.overrideMethod (c$, "finalizeOutput", 
			      function () {
				  return null;
			      });
	Clazz.overrideMethod (c$, "drawBond", 
			      function (atomA, atomB, colixA, colixB, endcaps, mad, bondOrder) {
			      }, "org.jmol.util.Point3f,org.jmol.util.Point3f,~N,~N,~N,~N,~N");
	Clazz.overrideMethod (c$, "drawEllipse", 
			      function (ptAtom, ptX, ptY, fillArc, wireframeOnly) {
				  return false;
			      }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,~B,~B");
	Clazz.defineMethod (c$, "getPrivateKey", 
			    function () {
				return 0;
			    });
	Clazz.overrideMethod (c$, "clearFontCache", 
			      function () {
				  org.jmol.g3d.TextRenderer.clearFontCache ();
			      });
	Clazz.overrideMethod (c$, "getTransformedVertexVectors", 
			      function () {
				  return this.transformedVectors;
			      });
	Clazz.overrideMethod (c$, "isDirectedTowardsCamera", 
			      function (normix) {
				  return (normix < 0) || (this.transformedVectors[normix].z > 0);
			      }, "~N");
	Clazz.defineMethod (c$, "setRotationMatrix", 
			    function (rotationMatrix) {
				var vertexVectors = org.jmol.util.Normix.getVertexVectors ();
				for (var i = org.jmol.g3d.Graphics3D.normixCount; --i >= 0; ) {
				    var tv = this.transformedVectors[i];
				    rotationMatrix.transform2 (vertexVectors[i], tv);
				    this.shadeIndexes[i] = org.jmol.util.Shader.getShadeIndexNormalized (tv.x, -tv.y, tv.z);
				    this.shadeIndexes2Sided[i] = (tv.z >= 0 ? this.shadeIndexes[i] : org.jmol.util.Shader.getShadeIndexNormalized (-tv.x, tv.y, -tv.z));
				}
			    }, "org.jmol.util.Matrix3f");
	Clazz.defineMethod (c$, "getShadeIndex", 
			    function (normix) {
				return (normix == -10000 || normix == 9999 ? org.jmol.g3d.Graphics3D.nullShadeIndex : normix < 0 ? this.shadeIndexes2Sided[~normix] : this.shadeIndexes[normix]);
			    }, "~N");
	Clazz.overrideMethod (c$, "renderCrossHairs", 
			      function (minMax, screenWidth, screenHeight, navOffset, navDepth) {
				  var antialiased = this.isAntialiased ();
				  this.setColix (navDepth < 0 ? 10 : navDepth > 100 ? 11 : 23);
				  var x = Math.max (Math.min (this.width, Math.round (navOffset.x)), 0);
				  var y = Math.max (Math.min (this.height, Math.round (navOffset.y)), 0);
				  var z = Math.round (navOffset.z) + 1;
				  var off = (antialiased ? 8 : 4);
				  var h = (antialiased ? 20 : 10);
				  var w = (antialiased ? 2 : 1);
				  this.drawRect (x - off, y, z, 0, h, w);
				  this.drawRect (x, y - off, z, 0, w, h);
				  this.drawRect (x - off, y - off, z, 0, h, h);
				  off = h;
				  h = h >> 1;
				  this.setColix (minMax[1] < navOffset.x ? 21 : 11);
				  this.drawRect (x - off, y, z, 0, h, w);
				  this.setColix (minMax[0] > navOffset.x ? 21 : 11);
				  this.drawRect (x + h, y, z, 0, h, w);
				  this.setColix (minMax[3] < navOffset.y ? 21 : 11);
				  this.drawRect (x, y - off, z, 0, w, h);
				  this.setColix (minMax[2] > navOffset.y ? 21 : 11);
				  this.drawRect (x, y + h, z, 0, w, h);
			      }, "~A,~N,~N,org.jmol.util.Point3f,~N");
	Clazz.overrideMethod (c$, "initializeOutput", 
			      function (type, viewer, privateKey, gdata, object) {
				  return false;
			      }, "~S,org.jmol.viewer.Viewer,~N,org.jmol.util.GData,~O");
	Clazz.defineMethod (c$, "shadeTextPixel", 
			    function (offset, z, argb, shade) {
				switch (shade) {
				case 8:
				    this.addPixel (offset, z, argb);
				    return;
				}
				org.jmol.g3d.Graphics3D.mergeBufferPixel (this.pbuf, offset, (argb & 0xFFFFFF) | (shade << 24), this.bgcolor);
				this.zbuf[offset] = z;
			    }, "~N,~N,~N,~N");
	Clazz.defineStatics (c$,
			     "sort", null);
	c$.normixCount = c$.prototype.normixCount = org.jmol.util.Normix.getNormixCount ();
	Clazz.defineStatics (c$,
			     "nullShadeIndex", 50);
    });
    // 
    //// org\jmol\g3d\CircleRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    c$ = Clazz.decorateAsClass (function () {
	this.g3d = null;
	this.xCenter = 0;
	this.yCenter = 0;
	this.zCenter = 0;
	this.sizeCorrection = 0;
	Clazz.instantialize (this, arguments);
    }, org.jmol.g3d, "CircleRenderer");
    Clazz.makeConstructor (c$, 
			   function (g3d) {
			       this.g3d = g3d;
			   }, "org.jmol.g3d.Graphics3D");
    Clazz.defineMethod (c$, "plotCircleCenteredClipped", 
			function (xCenter, yCenter, zCenter, diameter) {
			    if (this.g3d.isClippedXY (diameter, xCenter, yCenter)) return;
			    var r = Clazz.doubleToInt (diameter / 2);
			    this.sizeCorrection = 1 - (diameter & 1);
			    this.xCenter = xCenter;
			    this.yCenter = yCenter;
			    this.zCenter = zCenter;
			    var x = r;
			    var y = 0;
			    var xChange = 1 - 2 * r;
			    var yChange = 1;
			    var radiusError = 0;
			    while (x >= y) {
				this.plot8CircleCenteredClipped (x, y);
				++y;
				radiusError += yChange;
				yChange += 2;
				if (2 * radiusError + xChange > 0) {
				    --x;
				    radiusError += xChange;
				    xChange += 2;
				}}
			}, "~N,~N,~N,~N");
    Clazz.defineMethod (c$, "plotCircleCenteredUnclipped", 
			function (xCenter, yCenter, zCenter, diameter) {
			    var r = Clazz.doubleToInt (diameter / 2);
			    this.sizeCorrection = 1 - (diameter & 1);
			    this.xCenter = xCenter;
			    this.yCenter = yCenter;
			    this.zCenter = zCenter;
			    var x = r;
			    var y = 0;
			    var xChange = 1 - 2 * r;
			    var yChange = 1;
			    var radiusError = 0;
			    while (x >= y) {
				this.plot8CircleCenteredUnclipped (x, y);
				++y;
				radiusError += yChange;
				yChange += 2;
				if (2 * radiusError + xChange > 0) {
				    --x;
				    radiusError += xChange;
				    xChange += 2;
				}}
			}, "~N,~N,~N,~N");
    Clazz.defineMethod (c$, "plotFilledCircleCenteredClipped", 
			function (xCenter, yCenter, zCenter, diameter) {
			    var r = Clazz.doubleToInt (diameter / 2);
			    this.sizeCorrection = 1 - (diameter & 1);
			    this.xCenter = xCenter;
			    this.yCenter = yCenter;
			    this.zCenter = zCenter;
			    var x = r;
			    var y = 0;
			    var xChange = 1 - 2 * r;
			    var yChange = 1;
			    var radiusError = 0;
			    while (x >= y) {
				this.plot8FilledCircleCenteredClipped (x, y);
				++y;
				radiusError += yChange;
				yChange += 2;
				if (2 * radiusError + xChange > 0) {
				    --x;
				    radiusError += xChange;
				    xChange += 2;
				}}
			}, "~N,~N,~N,~N");
    Clazz.defineMethod (c$, "plotFilledCircleCenteredUnclipped", 
			function (xCenter, yCenter, zCenter, diameter) {
			    var r = Clazz.doubleToInt (diameter / 2);
			    this.xCenter = xCenter;
			    this.yCenter = yCenter;
			    this.zCenter = zCenter;
			    var x = r;
			    var y = 0;
			    var xChange = 1 - 2 * r;
			    var yChange = 1;
			    var radiusError = 0;
			    while (x >= y) {
				this.plot8FilledCircleCenteredUnclipped (x, y);
				++y;
				radiusError += yChange;
				yChange += 2;
				if (2 * radiusError + xChange > 0) {
				    --x;
				    radiusError += xChange;
				    xChange += 2;
				}}
			}, "~N,~N,~N,~N");
    Clazz.defineMethod (c$, "plot8CircleCenteredClipped", 
			($fz = function (dx, dy) {
			    this.g3d.plotPixelClippedXYZ (this.xCenter + dx - this.sizeCorrection, this.yCenter + dy - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter + dx - this.sizeCorrection, this.yCenter - dy, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter - dx, this.yCenter + dy - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter - dx, this.yCenter - dy, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter + dy - this.sizeCorrection, this.yCenter + dx - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter + dy - this.sizeCorrection, this.yCenter - dx, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter - dy, this.yCenter + dx - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelClippedXYZ (this.xCenter - dy, this.yCenter - dx, this.zCenter);
			}, $fz.isPrivate = true, $fz), "~N,~N");
    Clazz.defineMethod (c$, "plot8CircleCenteredUnclipped", 
			($fz = function (dx, dy) {
			    this.g3d.plotPixelUnclipped (this.xCenter + dx - this.sizeCorrection, this.yCenter + dy - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter + dx - this.sizeCorrection, this.yCenter - dy, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter - dx, this.yCenter + dy - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter - dx, this.yCenter - dy, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter + dy - this.sizeCorrection, this.yCenter + dx - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter + dy - this.sizeCorrection, this.yCenter - dx, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter - dy, this.yCenter + dx - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelUnclipped (this.xCenter - dy, this.yCenter - dx, this.zCenter);
			}, $fz.isPrivate = true, $fz), "~N,~N");
    Clazz.defineMethod (c$, "plot8FilledCircleCenteredClipped", 
			($fz = function (dx, dy) {
			    this.g3d.plotPixelsClipped (2 * dx + 1 - this.sizeCorrection, this.xCenter - dx, this.yCenter + dy - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelsClipped (2 * dx + 1 - this.sizeCorrection, this.xCenter - dx, this.yCenter - dy, this.zCenter);
			    this.g3d.plotPixelsClipped (2 * dy + 1 - this.sizeCorrection, this.xCenter - dy, this.yCenter + dx - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelsClipped (2 * dy + 1 - this.sizeCorrection, this.xCenter - dy, this.yCenter - dx, this.zCenter);
			}, $fz.isPrivate = true, $fz), "~N,~N");
    Clazz.defineMethod (c$, "plot8FilledCircleCenteredUnclipped", 
			($fz = function (dx, dy) {
			    this.g3d.plotPixelsUnclippedCount (2 * dx + 1 - this.sizeCorrection, this.xCenter - dx, this.yCenter + dy - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelsUnclippedCount (2 * dx + 1 - this.sizeCorrection, this.xCenter - dx, this.yCenter - dy, this.zCenter);
			    this.g3d.plotPixelsUnclippedCount (2 * dy + 1 - this.sizeCorrection, this.xCenter - dy, this.yCenter + dx - this.sizeCorrection, this.zCenter);
			    this.g3d.plotPixelsUnclippedCount (2 * dy + 1 - this.sizeCorrection, this.xCenter - dy, this.yCenter - dx, this.zCenter);
			}, $fz.isPrivate = true, $fz), "~N,~N");
    // 
    //// org\jmol\g3d\CylinderRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (null, "org.jmol.g3d.CylinderRenderer", ["org.jmol.util.ArrayUtil", "$.Shader"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.g3d = null;
	    this.line3d = null;
	    this.colixA = 0;
	    this.colixB = 0;
	    this.shadesA = null;
	    this.isScreenedA = false;
	    this.shadesB = null;
	    this.isScreenedB = false;
	    this.xA = 0;
	    this.yA = 0;
	    this.zA = 0;
	    this.dxB = 0;
	    this.dyB = 0;
	    this.dzB = 0;
	    this.xAf = 0;
	    this.yAf = 0;
	    this.zAf = 0;
	    this.dxBf = 0;
	    this.dyBf = 0;
	    this.dzBf = 0;
	    this.tEvenDiameter = false;
	    this.diameter = 0;
	    this.endcaps = 0;
	    this.tEndcapOpen = false;
	    this.xEndcap = 0;
	    this.yEndcap = 0;
	    this.zEndcap = 0;
	    this.argbEndcap = 0;
	    this.colixEndcap = 0;
	    this.endcapShadeIndex = 0;
	    this.radius = 0;
	    this.radius2 = 0;
	    this.cosTheta = 0;
	    this.cosPhi = 0;
	    this.sinPhi = 0;
	    this.clipped = false;
	    this.drawBackside = false;
	    this.xTip = 0;
	    this.yTip = 0;
	    this.zTip = 0;
	    this.rasterCount = 0;
	    this.tRaster = null;
	    this.txRaster = null;
	    this.tyRaster = null;
	    this.tzRaster = null;
	    this.xRaster = null;
	    this.yRaster = null;
	    this.zRaster = null;
	    this.fp8ShadeIndexUp = null;
	    this.yMin = 0;
	    this.yMax = 0;
	    this.xMin = 0;
	    this.xMax = 0;
	    this.zXMin = 0;
	    this.zXMax = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "CylinderRenderer");
	Clazz.prepareFields (c$, function () {
	    this.tRaster =  Clazz.newFloatArray (32, 0);
	    this.txRaster =  Clazz.newFloatArray (32, 0);
	    this.tyRaster =  Clazz.newFloatArray (32, 0);
	    this.tzRaster =  Clazz.newFloatArray (32, 0);
	    this.xRaster =  Clazz.newIntArray (32, 0);
	    this.yRaster =  Clazz.newIntArray (32, 0);
	    this.zRaster =  Clazz.newIntArray (32, 0);
	    this.fp8ShadeIndexUp =  Clazz.newIntArray (32, 0);
	});
	Clazz.makeConstructor (c$, 
			       function (g3d) {
				   this.g3d = g3d;
				   this.line3d = g3d.line3d;
			       }, "org.jmol.g3d.Graphics3D");
	Clazz.defineMethod (c$, "render", 
			    function (colixA, colixB, isScreenedA, isScreenedB, endcaps, diameter, xA, yA, zA, xB, yB, zB) {
				if (diameter > this.g3d.getRenderHeight () * 3) return;
				this.isScreenedA = isScreenedA;
				this.isScreenedB = isScreenedB;
				var r = Clazz.doubleToInt (diameter / 2) + 1;
				var codeMinA = this.g3d.clipCode3 (xA - r, yA - r, zA - r);
				var codeMaxA = this.g3d.clipCode3 (xA + r, yA + r, zA + r);
				var codeMinB = this.g3d.clipCode3 (xB - r, yB - r, zB - r);
				var codeMaxB = this.g3d.clipCode3 (xB + r, yB + r, zB + r);
				this.clipped = ((codeMinA | codeMaxA | codeMinB | codeMaxB) != 0);
				if ((codeMinA & codeMaxB & codeMaxA & codeMinB) != 0) return;
				this.dxB = xB - xA;
				this.dyB = yB - yA;
				this.dzB = zB - zA;
				if (diameter <= 1) {
				    this.line3d.plotLineDelta (this.g3d.getColorArgbOrGray (colixA), isScreenedA, this.g3d.getColorArgbOrGray (colixB), isScreenedB, xA, yA, zA, this.dxB, this.dyB, this.dzB, this.clipped);
				    return;
				}this.drawBackside = (this.clipped || endcaps == 2 || endcaps == 0);
				this.diameter = diameter;
				this.xA = xA;
				this.yA = yA;
				this.zA = zA;
				this.endcaps = endcaps;
				this.shadesA = this.g3d.getShades (this.colixA = colixA);
				this.shadesB = this.g3d.getShades (this.colixB = colixB);
				this.calcArgbEndcap (true, false);
				this.generateBaseEllipse ();
				if (endcaps == 2 || endcaps == 4) this.renderFlatEndcap (true);
				this.g3d.setZMargin (5);
				for (var i = this.rasterCount; --i >= 0; ) this.plotRaster (i);

				this.g3d.setZMargin (0);
				if (endcaps == 3) this.renderSphericalEndcaps ();
			    }, "~N,~N,~B,~B,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "renderBits", 
			    function (colixA, colixB, isScreenedA, isScreenedB, endcaps, diameter, xA, yA, zA, xB, yB, zB) {
				if (diameter > this.g3d.getRenderHeight () * 3) return;
				this.isScreenedA = isScreenedA;
				this.isScreenedB = isScreenedB;
				var r = Clazz.doubleToInt (diameter / 2) + 1;
				var ixA = Math.round (xA);
				var iyA = Math.round (yA);
				var izA = Math.round (zA);
				var ixB = Math.round (xB);
				var iyB = Math.round (yB);
				var izB = Math.round (zB);
				var codeMinA = this.g3d.clipCode3 (ixA - r, iyA - r, izA - r);
				var codeMaxA = this.g3d.clipCode3 (ixA + r, iyA + r, izA + r);
				var codeMinB = this.g3d.clipCode3 (ixB - r, iyB - r, izB - r);
				var codeMaxB = this.g3d.clipCode3 (ixB + r, iyB + r, izB + r);
				this.clipped = ((codeMinA | codeMaxA | codeMinB | codeMaxB) != 0);
				if ((codeMinA & codeMaxB & codeMaxA & codeMinB) != 0) return;
				this.dxBf = xB - xA;
				this.dyBf = yB - yA;
				this.dzBf = zB - zA;
				if (diameter == 0 || diameter == 1) {
				    this.line3d.plotLineDelta (this.g3d.getColorArgbOrGray (colixA), isScreenedA, this.g3d.getColorArgbOrGray (colixB), isScreenedB, Clazz.floatToInt (xA), Clazz.floatToInt (yA), Clazz.floatToInt (zA), Clazz.floatToInt (this.dxBf), Clazz.floatToInt (this.dyBf), Clazz.floatToInt (this.dzBf), this.clipped);
				    return;
				}if (diameter > 0) {
				    this.diameter = diameter;
				    this.xAf = xA;
				    this.yAf = yA;
				    this.zAf = zA;
				}this.drawBackside = (!isScreenedA && !isScreenedB && (this.clipped || endcaps == 2 || endcaps == 0));
				this.xA = Clazz.floatToInt (this.xAf);
				this.yA = Clazz.floatToInt (this.yAf);
				this.zA = Clazz.floatToInt (this.zAf);
				this.dxB = Clazz.floatToInt (this.dxBf);
				this.dyB = Clazz.floatToInt (this.dyBf);
				this.dzB = Clazz.floatToInt (this.dzBf);
				this.shadesA = this.g3d.getShades (this.colixA = colixA);
				this.shadesB = this.g3d.getShades (this.colixB = colixB);
				this.endcaps = endcaps;
				this.calcArgbEndcap (true, true);
				if (diameter > 0) this.generateBaseEllipsePrecisely (false);
				if (endcaps == 2) this.renderFlatEndcapPrecisely (true);
				this.line3d.setLineBits (this.dxBf, this.dyBf);
				this.g3d.setZMargin (5);
				for (var i = this.rasterCount; --i >= 0; ) this.plotRasterBits (i);

				this.g3d.setZMargin (0);
				if (endcaps == 3) this.renderSphericalEndcaps ();
				this.xAf += this.dxBf;
				this.yAf += this.dyBf;
				this.zAf += this.dzBf;
			    }, "~N,~N,~B,~B,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "plotRasterBits", 
			    ($fz = function (i) {
				var fpz = this.fp8ShadeIndexUp[i] >> (8);
				var fpzBack = fpz >> 1;
				var x = this.xRaster[i];
				var y = this.yRaster[i];
				var z = this.zRaster[i];
				if (this.tEndcapOpen && this.argbEndcap != 0) {
				    if (this.clipped) {
					this.g3d.plotPixelClippedArgb (this.argbEndcap, this.xEndcap + x, this.yEndcap + y, this.zEndcap - z - 1);
					this.g3d.plotPixelClippedArgb (this.argbEndcap, this.xEndcap - x, this.yEndcap - y, this.zEndcap + z - 1);
				    } else {
					this.g3d.plotPixelUnclippedArgb (this.argbEndcap, this.xEndcap + x, this.yEndcap + y, this.zEndcap - z - 1);
					this.g3d.plotPixelUnclippedArgb (this.argbEndcap, this.xEndcap - x, this.yEndcap - y, this.zEndcap + z - 1);
				    }}this.line3d.plotLineDeltaBits (this.shadesA, this.isScreenedA, this.shadesB, this.isScreenedB, fpz, this.xA + x, this.yA + y, this.zA - z, this.dxB, this.dyB, this.dzB, this.clipped);
				if (this.drawBackside) {
				    this.line3d.plotLineDelta (this.shadesA[fpzBack], this.isScreenedA, this.shadesB[fpzBack], this.isScreenedB, this.xA - x, this.yA - y, this.zA + z, this.dxB, this.dyB, this.dzB, this.clipped);
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "renderCone", 
			    function (colix, isScreened, endcap, diameter, xA, yA, zA, xTip, yTip, zTip, doFill, isBarb) {
				if (diameter > this.g3d.getRenderHeight () * 3) return;
				this.dxBf = (xTip) - (this.xAf = xA);
				this.dyBf = (yTip) - (this.yAf = yA);
				this.dzBf = (zTip) - (this.zAf = zA);
				this.xA = Clazz.doubleToInt (Math.floor (this.xAf));
				this.yA = Clazz.doubleToInt (Math.floor (this.yAf));
				this.zA = Clazz.doubleToInt (Math.floor (this.zAf));
				this.dxB = Clazz.doubleToInt (Math.floor (this.dxBf));
				this.dyB = Clazz.doubleToInt (Math.floor (this.dyBf));
				this.dzB = Clazz.doubleToInt (Math.floor (this.dzBf));
				this.xTip = xTip;
				this.yTip = yTip;
				this.zTip = zTip;
				this.colixA = colix;
				this.isScreenedA = isScreened;
				this.shadesA = this.g3d.getShades (colix);
				var shadeIndexTip = org.jmol.util.Shader.getShadeIndex (this.dxB, this.dyB, -this.dzB);
				this.g3d.plotPixelClippedScreened (this.shadesA[shadeIndexTip], this.isScreenedA, Clazz.floatToInt (xTip), Clazz.floatToInt (yTip), Clazz.floatToInt (zTip));
				this.diameter = diameter;
				if (diameter <= 1) {
				    if (diameter == 1) this.line3d.plotLineDelta (this.colixA, this.isScreenedA, this.colixA, this.isScreenedA, this.xA, this.yA, this.zA, this.dxB, this.dyB, this.dzB, this.clipped);
				    return;
				}this.endcaps = endcap;
				this.calcArgbEndcap (false, true);
				this.generateBaseEllipsePrecisely (isBarb);
				if (!isBarb && this.endcaps == 2) this.renderFlatEndcapPrecisely (false);
				this.g3d.setZMargin (5);
				for (var i = this.rasterCount; --i >= 0; ) this.plotRasterCone (i, doFill, isBarb);

				this.g3d.setZMargin (0);
			    }, "~N,~B,~N,~N,~N,~N,~N,~N,~N,~N,~B,~B");
	Clazz.defineMethod (c$, "generateBaseEllipse", 
			    ($fz = function () {
				this.tEvenDiameter = (this.diameter & 1) == 0;
				this.radius = this.diameter / 2.0;
				this.radius2 = this.radius * this.radius;
				var mag2d2 = this.dxB * this.dxB + this.dyB * this.dyB;
				if (mag2d2 == 0) {
				    this.cosTheta = 1;
				    this.cosPhi = 1;
				    this.sinPhi = 0;
				} else {
				    var mag2d = Math.sqrt (mag2d2);
				    var mag3d = Math.sqrt (mag2d2 + this.dzB * this.dzB);
				    this.cosTheta = this.dzB / mag3d;
				    this.cosPhi = this.dxB / mag2d;
				    this.sinPhi = this.dyB / mag2d;
				}this.calcRotatedPoint (0, 0, false);
				this.calcRotatedPoint (0.5, 1, false);
				this.calcRotatedPoint (1, 2, false);
				this.rasterCount = 3;
				this.interpolate (0, 1);
				this.interpolate (1, 2);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "generateBaseEllipsePrecisely", 
			    ($fz = function (isBarb) {
				this.tEvenDiameter = (this.diameter & 1) == 0;
				this.radius = this.diameter / 2.0;
				this.radius2 = this.radius * this.radius;
				var mag2d2 = this.dxBf * this.dxBf + this.dyBf * this.dyBf;
				if (mag2d2 == 0) {
				    this.cosTheta = 1;
				    this.cosPhi = 1;
				    this.sinPhi = 0;
				} else {
				    var mag2d = Math.sqrt (mag2d2);
				    var mag3d = Math.sqrt (mag2d2 + this.dzBf * this.dzBf);
				    this.cosTheta = this.dzBf / mag3d;
				    this.cosPhi = this.dxBf / mag2d;
				    this.sinPhi = this.dyBf / mag2d;
				}if (isBarb) {
				    this.calcRotatedPoint (0, 0, true);
				    this.calcRotatedPoint (0.5, 1, true);
				    this.rasterCount = 2;
				    this.interpolatePrecisely (0, 1);
				} else {
				    this.calcRotatedPoint (0, 0, true);
				    this.calcRotatedPoint (0.5, 1, true);
				    this.calcRotatedPoint (1, 2, true);
				    this.rasterCount = 3;
				    this.interpolatePrecisely (0, 1);
				    this.interpolatePrecisely (1, 2);
				}for (var i = 0; i < this.rasterCount; i++) {
				    this.xRaster[i] = Clazz.doubleToInt (Math.floor (this.txRaster[i]));
				    this.yRaster[i] = Clazz.doubleToInt (Math.floor (this.tyRaster[i]));
				    this.zRaster[i] = Clazz.doubleToInt (Math.floor (this.tzRaster[i]));
				}
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "calcRotatedPoint", 
			    ($fz = function (t, i, isPrecision) {
				this.tRaster[i] = t;
				var tPI = t * 3.141592653589793;
				var xT = Math.sin (tPI) * this.cosTheta;
				var yT = Math.cos (tPI);
				var xR = this.radius * (xT * this.cosPhi - yT * this.sinPhi);
				var yR = this.radius * (xT * this.sinPhi + yT * this.cosPhi);
				var z2 = this.radius2 - (xR * xR + yR * yR);
				var zR = (z2 > 0 ? Math.sqrt (z2) : 0);
				if (isPrecision) {
				    this.txRaster[i] = xR;
				    this.tyRaster[i] = yR;
				    this.tzRaster[i] = zR;
				} else if (this.tEvenDiameter) {
				    this.xRaster[i] = Clazz.doubleToInt (xR - 0.5);
				    this.yRaster[i] = Clazz.doubleToInt (yR - 0.5);
				    this.zRaster[i] = Clazz.doubleToInt (zR + 0.5);
				} else {
				    this.xRaster[i] = Clazz.doubleToInt (xR);
				    this.yRaster[i] = Clazz.doubleToInt (yR);
				    this.zRaster[i] = Clazz.doubleToInt (zR + 0.5);
				}this.fp8ShadeIndexUp[i] = org.jmol.util.Shader.getFp8ShadeIndex (xR, yR, zR);
			    }, $fz.isPrivate = true, $fz), "~N,~N,~B");
	Clazz.defineMethod (c$, "interpolate", 
			    ($fz = function (iLower, iUpper) {
				var dx = this.xRaster[iUpper] - this.xRaster[iLower];
				if (dx < 0) dx = -dx;
				var dy = this.yRaster[iUpper] - this.yRaster[iLower];
				if (dy < 0) dy = -dy;
				if ((dx + dy) <= 1) return;
				var tLower = this.tRaster[iLower];
				var tUpper = this.tRaster[iUpper];
				var iMid = this.allocRaster (false);
				for (var j = 4; --j >= 0; ) {
				    var tMid = (tLower + tUpper) / 2;
				    this.calcRotatedPoint (tMid, iMid, false);
				    if ((this.xRaster[iMid] == this.xRaster[iLower]) && (this.yRaster[iMid] == this.yRaster[iLower])) {
					this.fp8ShadeIndexUp[iLower] = (this.fp8ShadeIndexUp[iLower] + this.fp8ShadeIndexUp[iMid]) >>> 1;
					tLower = tMid;
				    } else if ((this.xRaster[iMid] == this.xRaster[iUpper]) && (this.yRaster[iMid] == this.yRaster[iUpper])) {
					this.fp8ShadeIndexUp[iUpper] = (this.fp8ShadeIndexUp[iUpper] + this.fp8ShadeIndexUp[iMid]) >>> 1;
					tUpper = tMid;
				    } else {
					this.interpolate (iLower, iMid);
					this.interpolate (iMid, iUpper);
					return;
				    }}
				this.xRaster[iMid] = this.xRaster[iLower];
				this.yRaster[iMid] = this.yRaster[iUpper];
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "interpolatePrecisely", 
			    ($fz = function (iLower, iUpper) {
				var dx = Clazz.doubleToInt (Math.floor (this.txRaster[iUpper])) - Clazz.doubleToInt (Math.floor (this.txRaster[iLower]));
				if (dx < 0) dx = -dx;
				var dy = Clazz.doubleToInt (Math.floor (this.tyRaster[iUpper])) - Clazz.doubleToInt (Math.floor (this.tyRaster[iLower]));
				if (dy < 0) dy = -dy;
				if ((dx + dy) <= 1) return;
				var tLower = this.tRaster[iLower];
				var tUpper = this.tRaster[iUpper];
				var iMid = this.allocRaster (true);
				for (var j = 4; --j >= 0; ) {
				    var tMid = (tLower + tUpper) / 2;
				    this.calcRotatedPoint (tMid, iMid, true);
				    if ((Clazz.doubleToInt (Math.floor (this.txRaster[iMid])) == Clazz.doubleToInt (Math.floor (this.txRaster[iLower]))) && (Clazz.doubleToInt (Math.floor (this.tyRaster[iMid])) == Clazz.doubleToInt (Math.floor (this.tyRaster[iLower])))) {
					this.fp8ShadeIndexUp[iLower] = (this.fp8ShadeIndexUp[iLower] + this.fp8ShadeIndexUp[iMid]) >>> 1;
					tLower = tMid;
				    } else if ((Clazz.doubleToInt (Math.floor (this.txRaster[iMid])) == Clazz.doubleToInt (Math.floor (this.txRaster[iUpper]))) && (Clazz.doubleToInt (Math.floor (this.tyRaster[iMid])) == Clazz.doubleToInt (Math.floor (this.tyRaster[iUpper])))) {
					this.fp8ShadeIndexUp[iUpper] = (this.fp8ShadeIndexUp[iUpper] + this.fp8ShadeIndexUp[iMid]) >>> 1;
					tUpper = tMid;
				    } else {
					this.interpolatePrecisely (iLower, iMid);
					this.interpolatePrecisely (iMid, iUpper);
					return;
				    }}
				this.txRaster[iMid] = this.txRaster[iLower];
				this.tyRaster[iMid] = this.tyRaster[iUpper];
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "plotRaster", 
			    ($fz = function (i) {
				var fpz = this.fp8ShadeIndexUp[i] >> (8);
				var fpzBack = fpz >> 1;
				var x = this.xRaster[i];
				var y = this.yRaster[i];
				var z = this.zRaster[i];
				if (this.tEndcapOpen && this.argbEndcap != 0) {
				    if (this.clipped) {
					this.g3d.plotPixelClippedArgb (this.argbEndcap, this.xEndcap + x, this.yEndcap + y, this.zEndcap - z - 1);
					this.g3d.plotPixelClippedArgb (this.argbEndcap, this.xEndcap - x, this.yEndcap - y, this.zEndcap + z - 1);
				    } else {
					this.g3d.plotPixelUnclippedArgb (this.argbEndcap, this.xEndcap + x, this.yEndcap + y, this.zEndcap - z - 1);
					this.g3d.plotPixelUnclippedArgb (this.argbEndcap, this.xEndcap - x, this.yEndcap - y, this.zEndcap + z - 1);
				    }}this.line3d.plotLineDeltaA (this.shadesA, this.isScreenedA, this.shadesB, this.isScreenedB, fpz, this.xA + x, this.yA + y, this.zA - z, this.dxB, this.dyB, this.dzB, this.clipped);
				if (this.drawBackside) {
				    this.line3d.plotLineDelta (this.shadesA[fpzBack], this.isScreenedA, this.shadesB[fpzBack], this.isScreenedB, this.xA - x, this.yA - y, this.zA + z, this.dxB, this.dyB, this.dzB, this.clipped);
				}}, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "allocRaster", 
			    ($fz = function (isPrecision) {
				while (this.rasterCount >= this.xRaster.length) {
				    this.xRaster = org.jmol.util.ArrayUtil.doubleLengthI (this.xRaster);
				    this.yRaster = org.jmol.util.ArrayUtil.doubleLengthI (this.yRaster);
				    this.zRaster = org.jmol.util.ArrayUtil.doubleLengthI (this.zRaster);
				    this.tRaster = org.jmol.util.ArrayUtil.doubleLengthF (this.tRaster);
				}
				while (this.rasterCount >= this.fp8ShadeIndexUp.length) this.fp8ShadeIndexUp = org.jmol.util.ArrayUtil.doubleLengthI (this.fp8ShadeIndexUp);

				if (isPrecision) while (this.rasterCount >= this.txRaster.length) {
				    this.txRaster = org.jmol.util.ArrayUtil.doubleLengthF (this.txRaster);
				    this.tyRaster = org.jmol.util.ArrayUtil.doubleLengthF (this.tyRaster);
				    this.tzRaster = org.jmol.util.ArrayUtil.doubleLengthF (this.tzRaster);
				}
				return this.rasterCount++;
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "findMinMaxY", 
			    ($fz = function () {
				this.yMin = this.yMax = this.yRaster[0];
				for (var i = this.rasterCount; --i > 0; ) {
				    var y = this.yRaster[i];
				    if (y < this.yMin) this.yMin = y;
				    else if (y > this.yMax) this.yMax = y;
				    else {
					y = -y;
					if (y < this.yMin) this.yMin = y;
					else if (y > this.yMax) this.yMax = y;
				    }}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "findMinMaxX", 
			    ($fz = function (y) {
				this.xMin = 2147483647;
				this.xMax = -2147483648;
				for (var i = this.rasterCount; --i >= 0; ) {
				    if (this.yRaster[i] == y) {
					var x = this.xRaster[i];
					if (x < this.xMin) {
					    this.xMin = x;
					    this.zXMin = this.zRaster[i];
					}if (x > this.xMax) {
					    this.xMax = x;
					    this.zXMax = this.zRaster[i];
					}}if (this.yRaster[i] == -y) {
					    var x = -this.xRaster[i];
					    if (x < this.xMin) {
						this.xMin = x;
						this.zXMin = -this.zRaster[i];
					    }if (x > this.xMax) {
						this.xMax = x;
						this.zXMax = -this.zRaster[i];
					    }}}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "renderFlatEndcap", 
			    ($fz = function (tCylinder) {
				if (this.dzB == 0 || !this.g3d.setColix (this.colixEndcap)) return;
				var xT = this.xA;
				var yT = this.yA;
				var zT = this.zA;
				if (tCylinder && this.dzB < 0) {
				    if (this.endcaps == 4) return;
				    xT += this.dxB;
				    yT += this.dyB;
				    zT += this.dzB;
				}this.findMinMaxY ();
				for (var y = this.yMin; y <= this.yMax; ++y) {
				    this.findMinMaxX (y);
				    var count = this.xMax - this.xMin + 1;
				    this.g3d.setColorNoisy (this.endcapShadeIndex);
				    this.g3d.plotPixelsClippedRaster (count, xT + this.xMin, yT + y, zT - this.zXMin - 1, zT - this.zXMax - 1, null, null);
				}
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "renderFlatEndcapPrecisely", 
			    ($fz = function (tCylinder) {
				if (this.dzBf == 0 || !this.g3d.setColix (this.colixEndcap)) return;
				var xTf = this.xAf;
				var yTf = this.yAf;
				var zTf = this.zAf;
				if (tCylinder && this.dzBf < 0) {
				    xTf += this.dxBf;
				    yTf += this.dyBf;
				    zTf += this.dzBf;
				}var xT = Clazz.floatToInt (xTf);
				var yT = Clazz.floatToInt (yTf);
				var zT = Clazz.floatToInt (zTf);
				this.findMinMaxY ();
				for (var y = this.yMin; y <= this.yMax; ++y) {
				    this.findMinMaxX (y);
				    var count = this.xMax - this.xMin + 1;
				    this.g3d.setColorNoisy (this.endcapShadeIndex);
				    this.g3d.plotPixelsClippedRaster (count, xT + this.xMin, yT + y, zT - this.zXMin - 1, zT - this.zXMax - 1, null, null);
				}
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "renderSphericalEndcaps", 
			    ($fz = function () {
				if (this.colixA != 0 && this.g3d.setColix (this.colixA)) this.g3d.fillSphereXYZ (this.diameter, this.xA, this.yA, this.zA + 1);
				if (this.colixB != 0 && this.g3d.setColix (this.colixB)) this.g3d.fillSphereXYZ (this.diameter, this.xA + this.dxB, this.yA + this.dyB, this.zA + this.dzB + 1);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "plotRasterCone", 
			    ($fz = function (i, doFill, isBarb) {
				var x = this.txRaster[i];
				var y = this.tyRaster[i];
				var z = this.tzRaster[i];
				var xUp = this.xAf + x;
				var yUp = this.yAf + y;
				var zUp = this.zAf - z;
				var xDn = this.xAf - x;
				var yDn = this.yAf - y;
				var zDn = this.zAf + z;
				var argb = this.shadesA[0];
				if (this.tEndcapOpen && this.argbEndcap != 0) {
				    this.g3d.plotPixelClippedScreened (this.argbEndcap, this.isScreenedA, Clazz.floatToInt (xUp), Clazz.floatToInt (yUp), Clazz.floatToInt (zUp));
				    this.g3d.plotPixelClippedScreened (this.argbEndcap, this.isScreenedA, Clazz.floatToInt (xDn), Clazz.floatToInt (yDn), Clazz.floatToInt (zDn));
				}var fpz = this.fp8ShadeIndexUp[i] >> (8);
				if (argb != 0) {
				    this.line3d.plotLineDeltaA (this.shadesA, this.isScreenedA, this.shadesA, this.isScreenedA, fpz, Clazz.floatToInt (xUp), Clazz.floatToInt (yUp), Clazz.floatToInt (zUp), Clazz.doubleToInt (Math.ceil (this.xTip - xUp)), Clazz.doubleToInt (Math.ceil (this.yTip - yUp)), Clazz.doubleToInt (Math.ceil (this.zTip - zUp)), true);
				    if (doFill) {
					this.line3d.plotLineDeltaA (this.shadesA, this.isScreenedA, this.shadesA, this.isScreenedA, fpz, Clazz.floatToInt (xUp), Clazz.floatToInt (yUp) + 1, Clazz.floatToInt (zUp), Clazz.doubleToInt (Math.ceil (this.xTip - xUp)), Clazz.doubleToInt (Math.ceil (this.yTip - yUp)) + 1, Clazz.doubleToInt (Math.ceil (this.zTip - zUp)), true);
					this.line3d.plotLineDeltaA (this.shadesA, this.isScreenedA, this.shadesA, this.isScreenedA, fpz, Clazz.floatToInt (xUp) + 1, Clazz.floatToInt (yUp), Clazz.floatToInt (zUp), Clazz.doubleToInt (Math.ceil (this.xTip - xUp)) + 1, Clazz.doubleToInt (Math.ceil (this.yTip - yUp)), Clazz.doubleToInt (Math.ceil (this.zTip - zUp)), true);
				    }if (!isBarb && !(this.endcaps != 2 && this.dzB > 0)) {
					this.line3d.plotLineDelta (argb, this.isScreenedA, argb, this.isScreenedA, Clazz.floatToInt (xDn), Clazz.floatToInt (yDn), Clazz.floatToInt (zDn), Clazz.doubleToInt (Math.ceil (this.xTip - xDn)), Clazz.doubleToInt (Math.ceil (this.yTip - yDn)), Clazz.doubleToInt (Math.ceil (this.zTip - zDn)), true);
				    }}}, $fz.isPrivate = true, $fz), "~N,~B,~B");
	Clazz.defineMethod (c$, "calcArgbEndcap", 
			    ($fz = function (tCylinder, isFloat) {
				this.tEndcapOpen = false;
				var dzf = (isFloat ? this.dzBf : this.dzB);
				if (this.endcaps == 3 || dzf == 0) return;
				this.xEndcap = this.xA;
				this.yEndcap = this.yA;
				this.zEndcap = this.zA;
				var shadesEndcap;
				var dxf = (isFloat ? this.dxBf : this.dxB);
				var dyf = (isFloat ? this.dyBf : this.dyB);
				if (dzf >= 0 || !tCylinder) {
				    this.endcapShadeIndex = org.jmol.util.Shader.getShadeIndex (-dxf, -dyf, dzf);
				    this.colixEndcap = this.colixA;
				    shadesEndcap = this.shadesA;
				} else {
				    this.endcapShadeIndex = org.jmol.util.Shader.getShadeIndex (dxf, dyf, -dzf);
				    this.colixEndcap = this.colixB;
				    shadesEndcap = this.shadesB;
				    this.xEndcap += this.dxB;
				    this.yEndcap += this.dyB;
				    this.zEndcap += this.dzB;
				}if (this.endcapShadeIndex > 56) this.endcapShadeIndex = 56;
				this.argbEndcap = shadesEndcap[this.endcapShadeIndex];
				this.tEndcapOpen = (this.endcaps == 1);
			    }, $fz.isPrivate = true, $fz), "~B,~B");
    });
    // 
    //// org\jmol\g3d\HermiteRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["org.jmol.util.Point3f", "$.Vector3f"], "org.jmol.g3d.HermiteRenderer", ["java.util.ArrayList", "org.jmol.util.Point3fi", "$.Point3i"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.g3d = null;
	    this.pLeft = null;
	    this.pRight = null;
	    this.sLeft = null;
	    this.sRight = null;
	    this.pTopLeft = null;
	    this.pTopRight = null;
	    this.pBotLeft = null;
	    this.pBotRight = null;
	    this.a1 = null;
	    this.a2 = null;
	    this.b1 = null;
	    this.b2 = null;
	    this.c1 = null;
	    this.c2 = null;
	    this.d1 = null;
	    this.d2 = null;
	    this.depth1 = null;
	    this.needToFill = null;
	    this.T1 = null;
	    this.T2 = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "HermiteRenderer");
	Clazz.prepareFields (c$, function () {
	    this.pLeft =  new Array (16);
	    this.pRight =  new Array (16);
	    this.sLeft =  Clazz.newFloatArray (16, 0);
	    this.sRight =  Clazz.newFloatArray (16, 0);
	    this.pTopLeft =  new Array (16);
	    this.pTopRight =  new Array (16);
	    this.pBotLeft =  new Array (16);
	    this.pBotRight =  new Array (16);
	    {
		for (var i = 16; --i >= 0; ) {
		    this.pLeft[i] =  new org.jmol.util.Point3i ();
		    this.pRight[i] =  new org.jmol.util.Point3i ();
		    this.pTopLeft[i] =  new org.jmol.util.Point3f ();
		    this.pTopRight[i] =  new org.jmol.util.Point3f ();
		    this.pBotLeft[i] =  new org.jmol.util.Point3f ();
		    this.pBotRight[i] =  new org.jmol.util.Point3f ();
		}
	    }this.a1 =  new org.jmol.util.Point3f ();
	    this.a2 =  new org.jmol.util.Point3f ();
	    this.b1 =  new org.jmol.util.Point3f ();
	    this.b2 =  new org.jmol.util.Point3f ();
	    this.c1 =  new org.jmol.util.Point3f ();
	    this.c2 =  new org.jmol.util.Point3f ();
	    this.d1 =  new org.jmol.util.Point3f ();
	    this.d2 =  new org.jmol.util.Point3f ();
	    this.depth1 =  new org.jmol.util.Vector3f ();
	    this.needToFill =  Clazz.newBooleanArray (16, false);
	    this.T1 =  new org.jmol.util.Vector3f ();
	    this.T2 =  new org.jmol.util.Vector3f ();
	});
	Clazz.makeConstructor (c$, 
			       function (g3d) {
				   this.g3d = g3d;
			       }, "org.jmol.api.JmolRendererInterface");
	Clazz.defineMethod (c$, "renderHermiteRope", 
			    function (fill, tension, diameterBeg, diameterMid, diameterEnd, p0, p1, p2, p3) {
				if (p0.z == 1 || p1.z == 1 || p2.z == 1 || p3.z == 1) return;
				if (this.g3d.isClippedZ (p1.z) || this.g3d.isClippedZ (p2.z)) return;
				var x1 = p1.x;
				var y1 = p1.y;
				var z1 = p1.z;
				var x2 = p2.x;
				var y2 = p2.y;
				var z2 = p2.z;
				var xT1 = Clazz.doubleToInt (((x2 - p0.x) * tension) / 8);
				var yT1 = Clazz.doubleToInt (((y2 - p0.y) * tension) / 8);
				var zT1 = Clazz.doubleToInt (((z2 - p0.z) * tension) / 8);
				var xT2 = Clazz.doubleToInt (((p3.x - x1) * tension) / 8);
				var yT2 = Clazz.doubleToInt (((p3.y - y1) * tension) / 8);
				var zT2 = Clazz.doubleToInt (((p3.z - z1) * tension) / 8);
				this.sLeft[0] = 0;
				this.pLeft[0].setT (p1);
				this.sRight[0] = 1;
				this.pRight[0].setT (p2);
				var sp = 0;
				var n = 0;
				var dDiameterFirstHalf = 0;
				var dDiameterSecondHalf = 0;
				if (fill) {
				    dDiameterFirstHalf = 2 * (diameterMid - diameterBeg);
				    dDiameterSecondHalf = 2 * (diameterEnd - diameterMid);
				}do {
				    var a = this.pLeft[sp];
				    var b = this.pRight[sp];
				    var dx = b.x - a.x;
				    if (dx >= -1 && dx <= 1) {
					var dy = b.y - a.y;
					if (dy >= -1 && dy <= 1) {
					    n++;
					    var s = this.sLeft[sp];
					    if (fill) {
						var d = (s < 0.5 ? diameterBeg + Clazz.floatToInt (dDiameterFirstHalf * s) : diameterMid + Clazz.floatToInt (dDiameterSecondHalf * (s - 0.5)));
						this.g3d.fillSphereI (d, a);
					    } else {
						this.g3d.plotPixelClippedP3i (a);
					    }--sp;
					    continue;
					}}var s = (this.sLeft[sp] + this.sRight[sp]) / 2;
				    var s2 = s * s;
				    var s3 = s2 * s;
				    var h1 = 2 * s3 - 3 * s2 + 1;
				    var h2 = -2 * s3 + 3 * s2;
				    var h3 = s3 - 2 * s2 + s;
				    var h4 = s3 - s2;
				    if (sp >= 15) break;
				    var pMid = this.pRight[sp + 1];
				    pMid.x = Clazz.doubleToInt (h1 * x1 + h2 * x2 + h3 * xT1 + h4 * xT2);
				    pMid.y = Clazz.doubleToInt (h1 * y1 + h2 * y2 + h3 * yT1 + h4 * yT2);
				    pMid.z = Clazz.doubleToInt (h1 * z1 + h2 * z2 + h3 * zT1 + h4 * zT2);
				    this.pRight[sp + 1] = this.pRight[sp];
				    this.sRight[sp + 1] = this.sRight[sp];
				    this.pRight[sp] = pMid;
				    this.sRight[sp] = s;
				    ++sp;
				    this.pLeft[sp].setT (pMid);
				    this.sLeft[sp] = s;
				} while (sp >= 0);
			    }, "~B,~N,~N,~N,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "renderHermiteRibbon", 
			    function (fill, border, tension, p0, p1, p2, p3, p4, p5, p6, p7, aspectRatio) {
				if (p0.z == 1 || p1.z == 1 || p2.z == 1 || p3.z == 1 || p4.z == 1 || p5.z == 1 || p6.z == 1 || p7.z == 1) return;
				if (!fill) {
				    this.renderParallelPair (fill, tension, p0, p1, p2, p3, p4, p5, p6, p7);
				    return;
				}var ratio = 1 / aspectRatio;
				var x1 = p1.x;
				var y1 = p1.y;
				var z1 = p1.z;
				var x2 = p2.x;
				var y2 = p2.y;
				var z2 = p2.z;
				var xT1 = Clazz.doubleToInt (((x2 - p0.x) * tension) / 8);
				var yT1 = Clazz.doubleToInt (((y2 - p0.y) * tension) / 8);
				var zT1 = Clazz.doubleToInt (((z2 - p0.z) * tension) / 8);
				var xT2 = Clazz.doubleToInt (((p3.x - x1) * tension) / 8);
				var yT2 = Clazz.doubleToInt (((p3.y - y1) * tension) / 8);
				var zT2 = Clazz.doubleToInt (((p3.z - z1) * tension) / 8);
				org.jmol.util.Point3fi.set2 (this.pTopLeft[0], p1);
				org.jmol.util.Point3fi.set2 (this.pTopRight[0], p2);
				var x5 = p5.x;
				var y5 = p5.y;
				var z5 = p5.z;
				var x6 = p6.x;
				var y6 = p6.y;
				var z6 = p6.z;
				var xT5 = Clazz.doubleToInt (((x6 - p4.x) * tension) / 8);
				var yT5 = Clazz.doubleToInt (((y6 - p4.y) * tension) / 8);
				var zT5 = Clazz.doubleToInt (((z6 - p4.z) * tension) / 8);
				var xT6 = Clazz.doubleToInt (((p7.x - x5) * tension) / 8);
				var yT6 = Clazz.doubleToInt (((p7.y - y5) * tension) / 8);
				var zT6 = Clazz.doubleToInt (((p7.z - z5) * tension) / 8);
				org.jmol.util.Point3fi.set2 (this.pBotLeft[0], p5);
				org.jmol.util.Point3fi.set2 (this.pBotRight[0], p6);
				this.sLeft[0] = 0;
				this.sRight[0] = 1;
				this.needToFill[0] = true;
				var sp = 0;
				var closeEnd = false;
				do {
				    var a = this.pTopLeft[sp];
				    var b = this.pTopRight[sp];
				    var dxTop = b.x - a.x;
				    var dxTop2 = dxTop * dxTop;
				    if (dxTop2 < 10) {
					var dyTop = b.y - a.y;
					var dyTop2 = dyTop * dyTop;
					if (dyTop2 < 10) {
					    var c = this.pBotLeft[sp];
					    var d = this.pBotRight[sp];
					    var dxBot = d.x - c.x;
					    var dxBot2 = dxBot * dxBot;
					    if (dxBot2 < 8) {
						var dyBot = d.y - c.y;
						var dyBot2 = dyBot * dyBot;
						if (dyBot2 < 8) {
						    if (border) {
							this.g3d.fillSphere (3, a);
							this.g3d.fillSphere (3, c);
						    }if (this.needToFill[sp]) {
							if (aspectRatio > 0) {
							    this.setDepth (this.depth1, c, a, b, ratio);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.a1, a, this.depth1, 1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.a2, a, this.depth1, -1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.b1, b, this.depth1, 1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.b2, b, this.depth1, -1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.c1, c, this.depth1, 1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.c2, c, this.depth1, -1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.d1, d, this.depth1, 1);
							    org.jmol.g3d.HermiteRenderer.setPoint (this.d2, d, this.depth1, -1);
							    this.g3d.fillQuadrilateral (this.a1, this.b1, this.d1, this.c1);
							    this.g3d.fillQuadrilateral (this.a2, this.b2, this.d2, this.c2);
							    this.g3d.fillQuadrilateral (this.a1, this.b1, this.b2, this.a2);
							    this.g3d.fillQuadrilateral (this.c1, this.d1, this.d2, this.c2);
							    closeEnd = true;
							} else {
							    this.g3d.fillQuadrilateral (a, b, d, c);
							}this.needToFill[sp] = false;
						    }if (dxTop2 + dyTop2 < 2 && dxBot2 + dyBot2 < 2) {
							--sp;
							continue;
						    }}}}}var s = (this.sLeft[sp] + this.sRight[sp]) / 2;
				    var s2 = s * s;
				    var s3 = s2 * s;
				    var h1 = 2 * s3 - 3 * s2 + 1;
				    var h2 = -2 * s3 + 3 * s2;
				    var h3 = s3 - 2 * s2 + s;
				    var h4 = s3 - s2;
				    if (sp >= 15) break;
				    var spNext = sp + 1;
				    var pMidTop = this.pTopRight[spNext];
				    pMidTop.x = (h1 * x1 + h2 * x2 + h3 * xT1 + h4 * xT2);
				    pMidTop.y = (h1 * y1 + h2 * y2 + h3 * yT1 + h4 * yT2);
				    pMidTop.z = (h1 * z1 + h2 * z2 + h3 * zT1 + h4 * zT2);
				    var pMidBot = this.pBotRight[spNext];
				    pMidBot.x = (h1 * x5 + h2 * x6 + h3 * xT5 + h4 * xT6);
				    pMidBot.y = (h1 * y5 + h2 * y6 + h3 * yT5 + h4 * yT6);
				    pMidBot.z = (h1 * z5 + h2 * z6 + h3 * zT5 + h4 * zT6);
				    this.pTopRight[spNext] = this.pTopRight[sp];
				    this.pTopRight[sp] = pMidTop;
				    this.pBotRight[spNext] = this.pBotRight[sp];
				    this.pBotRight[sp] = pMidBot;
				    this.sRight[spNext] = this.sRight[sp];
				    this.sRight[sp] = s;
				    this.needToFill[spNext] = this.needToFill[sp];
				    this.pTopLeft[spNext].setT (pMidTop);
				    this.pBotLeft[spNext].setT (pMidBot);
				    this.sLeft[spNext] = s;
				    ++sp;
				} while (sp >= 0);
				if (closeEnd) {
				    this.a1.z += 1;
				    this.c1.z += 1;
				    this.c2.z += 1;
				    this.a2.z += 1;
				    this.g3d.fillQuadrilateral (this.a1, this.c1, this.c2, this.a2);
				}}, "~B,~B,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,~N");
	Clazz.defineMethod (c$, "renderParallelPair", 
			    ($fz = function (fill, tension, p0, p1, p2, p3, p4, p5, p6, p7) {
				var endPoints = [p2, p1, p6, p5];
				var points =  new java.util.ArrayList (10);
				var whichPoint = 0;
				var numTopStrandPoints = 2;
				var numPointsPerSegment = 5.0;
				var interval = (1.0 / numPointsPerSegment);
				var currentInt = 0.0;
				var x1 = p1.x;
				var y1 = p1.y;
				var z1 = p1.z;
				var x2 = p2.x;
				var y2 = p2.y;
				var z2 = p2.z;
				var xT1 = Clazz.doubleToInt (((x2 - p0.x) * tension) / 8);
				var yT1 = Clazz.doubleToInt (((y2 - p0.y) * tension) / 8);
				var zT1 = Clazz.doubleToInt (((z2 - p0.z) * tension) / 8);
				var xT2 = Clazz.doubleToInt (((p3.x - x1) * tension) / 8);
				var yT2 = Clazz.doubleToInt (((p3.y - y1) * tension) / 8);
				var zT2 = Clazz.doubleToInt (((p3.z - z1) * tension) / 8);
				this.sLeft[0] = 0;
				this.pLeft[0].setT (p1);
				this.sRight[0] = 1;
				this.pRight[0].setT (p2);
				var sp = 0;
				for (var strands = 2; strands > 0; strands--) {
				    if (strands == 1) {
					x1 = p5.x;
					y1 = p5.y;
					z1 = p5.z;
					x2 = p6.x;
					y2 = p6.y;
					z2 = p6.z;
					xT1 = Clazz.doubleToInt (((x2 - p4.x) * tension) / 8);
					yT1 = Clazz.doubleToInt (((y2 - p4.y) * tension) / 8);
					zT1 = Clazz.doubleToInt (((z2 - p4.z) * tension) / 8);
					xT2 = Clazz.doubleToInt (((p7.x - x1) * tension) / 8);
					yT2 = Clazz.doubleToInt (((p7.y - y1) * tension) / 8);
					zT2 = Clazz.doubleToInt (((p7.z - z1) * tension) / 8);
					this.sLeft[0] = 0;
					this.pLeft[0].setT (p5);
					this.sRight[0] = 1;
					this.pRight[0].setT (p6);
					sp = 0;
				    }points.add (endPoints[whichPoint++]);
				    currentInt = interval;
				    do {
					var a = this.pLeft[sp];
					var b = this.pRight[sp];
					var dx = b.x - a.x;
					var dy = b.y - a.y;
					var dist2 = dx * dx + dy * dy;
					if (dist2 <= 2) {
					    var s = this.sLeft[sp];
					    this.g3d.fillSphereI (3, a);
					    if (s < 1.0 - currentInt) {
						var temp =  new org.jmol.util.Point3i ();
						temp.setT (a);
						points.add (temp);
						currentInt += interval;
						if (strands == 2) {
						    numTopStrandPoints++;
						}}--sp;
					} else {
					    var s = (this.sLeft[sp] + this.sRight[sp]) / 2;
					    var s2 = s * s;
					    var s3 = s2 * s;
					    var h1 = 2 * s3 - 3 * s2 + 1;
					    var h2 = -2 * s3 + 3 * s2;
					    var h3 = s3 - 2 * s2 + s;
					    var h4 = s3 - s2;
					    if (sp >= 15) break;
					    var pMid = this.pRight[sp + 1];
					    pMid.x = Clazz.doubleToInt (h1 * x1 + h2 * x2 + h3 * xT1 + h4 * xT2);
					    pMid.y = Clazz.doubleToInt (h1 * y1 + h2 * y2 + h3 * yT1 + h4 * yT2);
					    pMid.z = Clazz.doubleToInt (h1 * z1 + h2 * z2 + h3 * zT1 + h4 * zT2);
					    this.pRight[sp + 1] = this.pRight[sp];
					    this.sRight[sp + 1] = this.sRight[sp];
					    this.pRight[sp] = pMid;
					    this.sRight[sp] = s;
					    ++sp;
					    this.pLeft[sp].setT (pMid);
					    this.sLeft[sp] = s;
					}} while (sp >= 0);
				    points.add (endPoints[whichPoint++]);
				}
				var size = points.size ();
				for (var top = 0; top < numTopStrandPoints && (top + numTopStrandPoints) < size; top++) this.g3d.drawLineAB (points.get (top), points.get (top + numTopStrandPoints));

			    }, $fz.isPrivate = true, $fz), "~B,~N,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i");
	Clazz.defineMethod (c$, "setDepth", 
			    ($fz = function (depth, c, a, b, ratio) {
				this.T1.sub2 (a, c);
				this.T1.scale (ratio);
				this.T2.sub2 (a, b);
				depth.cross (this.T1, this.T2);
				depth.scale (this.T1.length () / depth.length ());
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.Vector3f,org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,~N");
	c$.setPoint = Clazz.defineMethod (c$, "setPoint", 
					  ($fz = function (a1, a, depth, direction) {
					      a1.setT (a);
					      if (direction == 1) a1.add (depth);
					      else a1.sub (depth);
					  }, $fz.isPrivate = true, $fz), "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Vector3f,~N");
    });
    // 
    //// org\jmol\g3d\ImageRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    c$ = Clazz.declareType (org.jmol.g3d, "ImageRenderer");
    c$.plotImage = Clazz.defineMethod (c$, "plotImage", 
				       function (x, y, z, image, g3d, jmolRenderer, antialias, argbBackground, width, height) {
					   var isBackground = (x == -2147483648);
					   var bgcolor = (isBackground ? g3d.bgcolor : argbBackground);
					   if (isBackground) {
					       x = 0;
					       z = 2147483646;
					       width = g3d.width;
					       height = g3d.height;
					   }if (x + width <= 0 || x >= g3d.width || y + height <= 0 || y >= g3d.height) return;
					   var buffer = g3d.apiPlatform.drawImageToBuffer (g3d.platform.getGraphicsForTextOrImage (width, height), g3d.platform.offscreenImage, image, width, height, isBackground ? bgcolor : 0);
					   if (buffer == null) return;
					   if (jmolRenderer != null || (x < 0 || x + width > g3d.width || y < 0 || y + height > g3d.height)) org.jmol.g3d.ImageRenderer.plotImageClipped (x, y, z, g3d, jmolRenderer, width, height, buffer, bgcolor);
					   else org.jmol.g3d.ImageRenderer.plotImageUnClipped (x, y, z, g3d, width, height, buffer, bgcolor);
					   return;
				       }, "~N,~N,~N,~O,org.jmol.g3d.Graphics3D,org.jmol.api.JmolRendererInterface,~B,~N,~N,~N");
    c$.plotImageClipped = Clazz.defineMethod (c$, "plotImageClipped", 
					      ($fz = function (x, y, z, g3d, jmolRenderer, width, height, buffer, bgcolor) {
						  if (jmolRenderer == null) jmolRenderer = g3d;
						  for (var i = 0, offset = 0; i < height; i++) {
						      for (var j = 0; j < width; j++) {
							  var argb = buffer[offset++];
							  if (argb != bgcolor && (argb & 0xFF000000) == 0xFF000000) jmolRenderer.plotImagePixel (argb, x + j, y + i, z, 0);
							  else if (argb == 0 && bgcolor != 0) jmolRenderer.plotImagePixel (bgcolor, x + j, y + i, z, 0);
						      }
						  }
					      }, $fz.isPrivate = true, $fz), "~N,~N,~N,org.jmol.g3d.Graphics3D,org.jmol.api.JmolRendererInterface,~N,~N,~A,~N");
    c$.plotImageUnClipped = Clazz.defineMethod (c$, "plotImageUnClipped", 
						($fz = function (x, y, z, g3d, textWidth, textHeight, buffer, bgcolor) {
						    var zbuf = g3d.zbuf;
						    var renderWidth = g3d.width;
						    var pbufOffset = y * renderWidth + x;
						    var i = 0;
						    var j = 0;
						    var offset = 0;
						    while (i < textHeight) {
							while (j < textWidth) {
							    if (z < zbuf[pbufOffset]) {
								var argb = buffer[offset];
								if (argb != bgcolor && (argb & 0xFF000000) == 0xFF000000) g3d.addPixel (pbufOffset, z, argb);
								else if (argb == 0 && bgcolor != 0) g3d.addPixel (pbufOffset, z, bgcolor);
							    }++offset;
							    ++j;
							    ++pbufOffset;
							}
							++i;
							j -= textWidth;
							pbufOffset += (renderWidth - textWidth);
						    }
						}, $fz.isPrivate = true, $fz), "~N,~N,~N,org.jmol.g3d.Graphics3D,~N,~N,~A,~N");
    // 
    //// org\jmol\g3d\LineRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["java.util.Hashtable"], "org.jmol.g3d.LineRenderer", ["java.lang.Float", "org.jmol.util.BitSetUtil", "$.Logger", "$.Shader"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.g3d = null;
	    this.lineBits = null;
	    this.slope = 0;
	    this.lineTypeX = false;
	    this.nBits = 0;
	    this.nCached = 0;
	    this.nFound = 0;
	    this.lineCache = null;
	    this.slopeKey = null;
	    this.x1t = 0;
	    this.y1t = 0;
	    this.z1t = 0;
	    this.x2t = 0;
	    this.y2t = 0;
	    this.z2t = 0;
	    this.cc1 = 0;
	    this.cc2 = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "LineRenderer");
	Clazz.prepareFields (c$, function () {
	    this.lineCache =  new java.util.Hashtable ();
	});
	Clazz.makeConstructor (c$, 
			       function (g3d) {
				   this.g3d = g3d;
			       }, "org.jmol.g3d.Graphics3D");
	Clazz.defineMethod (c$, "setLineBits", 
			    function (dx, dy) {
				this.slope = (dx != 0 ? dy / dx : dy >= 0 ? 3.4028235E38 : -3.4028235E38);
				this.lineTypeX = (this.slope <= 1 && this.slope >= -1);
				if (this.getCachedLine ()) return;
				this.nBits = (this.lineTypeX ? this.g3d.getRenderWidth () : this.g3d.getRenderHeight ());
				this.lineBits = org.jmol.util.BitSetUtil.newBitSet (this.nBits);
				dy = Math.abs (dy);
				dx = Math.abs (dx);
				if (dy > dx) {
				    var t = dx;
				    dx = dy;
				    dy = t;
				}var twoDError = 0;
				var twoDx = dx + dx;
				var twoDy = dy + dy;
				for (var i = 0; i < this.nBits; i++) {
				    twoDError += twoDy;
				    if (twoDError > dx) {
					this.lineBits.set (i);
					twoDError -= twoDx;
				    }}
				this.lineCache.put (this.slopeKey, this.lineBits);
				this.nCached++;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "plotLine", 
			    function (argbA, tScreenedA, argbB, tScreenedB, xA, yA, zA, xB, yB, zB, clipped) {
				this.x1t = xA;
				this.x2t = xB;
				this.y1t = yA;
				this.y2t = yB;
				this.z1t = zA;
				this.z2t = zB;
				if (clipped) switch (this.getTrimmedLine ()) {
				case 0:
				    clipped = false;
				    break;
				case 2:
				    return;
				}
				this.plotLineClipped (argbA, tScreenedA, argbB, tScreenedB, xA, yA, zA, xB - xA, yB - yA, zB - zA, clipped, 0, 0);
			    }, "~N,~B,~N,~B,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "plotLineDelta", 
			    function (argbA, tScreenedA, argbB, tScreenedB, xA, yA, zA, dxBA, dyBA, dzBA, clipped) {
				this.x1t = xA;
				this.x2t = xA + dxBA;
				this.y1t = yA;
				this.y2t = yA + dyBA;
				this.z1t = zA;
				this.z2t = zA + dzBA;
				if (clipped) switch (this.getTrimmedLine ()) {
				case 2:
				    return;
				case 0:
				    clipped = false;
				    break;
				}
				this.plotLineClipped (argbA, tScreenedA, argbB, tScreenedB, xA, yA, zA, dxBA, dyBA, dzBA, clipped, 0, 0);
			    }, "~N,~B,~N,~B,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "plotLineDeltaA", 
			    function (shades1, tScreened1, shades2, tScreened2, shadeIndex, xA, yA, zA, dxBA, dyBA, dzBA, clipped) {
				this.x1t = xA;
				this.x2t = xA + dxBA;
				this.y1t = yA;
				this.y2t = yA + dyBA;
				this.z1t = zA;
				this.z2t = zA + dzBA;
				if (clipped) switch (this.getTrimmedLine ()) {
				case 2:
				    return;
				case 0:
				    clipped = false;
				}
				this.plotLineClippedA (shades1, tScreened1, shades2, tScreened2, shadeIndex, xA, yA, zA, dxBA, dyBA, dzBA, clipped, 0, 0);
			    }, "~A,~B,~A,~B,~N,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "plotLineDeltaBits", 
			    function (shades1, tScreened1, shades2, tScreened2, shadeIndex, xA, yA, zA, dxBA, dyBA, dzBA, clipped) {
				this.x1t = xA;
				this.x2t = xA + dxBA;
				this.y1t = yA;
				this.y2t = yA + dyBA;
				this.z1t = zA;
				this.z2t = zA + dzBA;
				if (clipped && this.getTrimmedLine () == 2) return;
				this.plotLineClippedBits (shades1, tScreened1, shades2, tScreened2, shadeIndex, xA, yA, zA, dxBA, dyBA, dzBA, 0, 0);
			    }, "~A,~B,~A,~B,~N,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "plotDashedLine", 
			    function (argb, tScreened, run, rise, xA, yA, zA, xB, yB, zB, clipped) {
				this.x1t = xA;
				this.x2t = xB;
				this.y1t = yA;
				this.y2t = yB;
				this.z1t = zA;
				this.z2t = zB;
				if (clipped) switch (this.getTrimmedLine ()) {
				case 2:
				    return;
				case 0:
				    clipped = false;
				    break;
				}
				this.plotLineClipped (argb, tScreened, argb, tScreened, xA, yA, zA, xB - xA, yB - yA, zB - zA, clipped, run, rise);
			    }, "~N,~B,~N,~N,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "getCachedLine", 
			    ($fz = function () {
				this.slopeKey =  new Float (this.slope);
				if (!this.lineCache.containsKey (this.slopeKey)) return false;
				this.lineBits = this.lineCache.get (this.slopeKey);
				this.nFound++;
				if (this.nFound == 1000000) if (org.jmol.util.Logger.debugging) {
				    org.jmol.util.Logger.debug ("nCached/nFound lines: " + this.nCached + " " + this.nFound);
				}return true;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getTrimmedLine", 
			    ($fz = function () {
				this.cc1 = this.g3d.clipCode3 (this.x1t, this.y1t, this.z1t);
				this.cc2 = this.g3d.clipCode3 (this.x2t, this.y2t, this.z2t);
				if ((this.cc1 | this.cc2) == 0) return 0;
				var xLast = this.g3d.xLast;
				var yLast = this.g3d.yLast;
				var slab = this.g3d.slab;
				var depth = this.g3d.depth;
				do {
				    if ((this.cc1 & this.cc2) != 0) return 2;
				    var dx = this.x2t - this.x1t;
				    var dy = this.y2t - this.y1t;
				    var dz = this.z2t - this.z1t;
				    if (this.cc1 != 0) {
					if ((this.cc1 & 8) != 0) {
					    this.y1t += (-this.x1t * dy) / dx;
					    this.z1t += (-this.x1t * dz) / dx;
					    this.x1t = 0;
					} else if ((this.cc1 & 4) != 0) {
					    this.y1t += ((xLast - this.x1t) * dy) / dx;
					    this.z1t += ((xLast - this.x1t) * dz) / dx;
					    this.x1t = xLast;
					} else if ((this.cc1 & 2) != 0) {
					    this.x1t += (-this.y1t * dx) / dy;
					    this.z1t += (-this.y1t * dz) / dy;
					    this.y1t = 0;
					} else if ((this.cc1 & 1) != 0) {
					    this.x1t += ((yLast - this.y1t) * dx) / dy;
					    this.z1t += ((yLast - this.y1t) * dz) / dy;
					    this.y1t = yLast;
					} else if ((this.cc1 & 32) != 0) {
					    this.x1t += ((slab - this.z1t) * dx) / dz;
					    this.y1t += ((slab - this.z1t) * dy) / dz;
					    this.z1t = slab;
					} else {
					    this.x1t += ((depth - this.z1t) * dx) / dz;
					    this.y1t += ((depth - this.z1t) * dy) / dz;
					    this.z1t = depth;
					}this.cc1 = this.g3d.clipCode3 (this.x1t, this.y1t, this.z1t);
				    } else {
					if ((this.cc2 & 8) != 0) {
					    this.y2t += (-this.x2t * dy) / dx;
					    this.z2t += (-this.x2t * dz) / dx;
					    this.x2t = 0;
					} else if ((this.cc2 & 4) != 0) {
					    this.y2t += ((xLast - this.x2t) * dy) / dx;
					    this.z2t += ((xLast - this.x2t) * dz) / dx;
					    this.x2t = xLast;
					} else if ((this.cc2 & 2) != 0) {
					    this.x2t += (-this.y2t * dx) / dy;
					    this.z2t += (-this.y2t * dz) / dy;
					    this.y2t = 0;
					} else if ((this.cc2 & 1) != 0) {
					    this.x2t += ((yLast - this.y2t) * dx) / dy;
					    this.z2t += ((yLast - this.y2t) * dz) / dy;
					    this.y2t = yLast;
					} else if ((this.cc2 & 32) != 0) {
					    this.x2t += ((slab - this.z2t) * dx) / dz;
					    this.y2t += ((slab - this.z2t) * dy) / dz;
					    this.z2t = slab;
					} else {
					    this.x2t += ((depth - this.z2t) * dx) / dz;
					    this.y2t += ((depth - this.z2t) * dy) / dz;
					    this.z2t = depth;
					}this.cc2 = this.g3d.clipCode3 (this.x2t, this.y2t, this.z2t);
				    }} while ((this.cc1 | this.cc2) != 0);
				return 1;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "plotLineClipped", 
			    ($fz = function (argb1, tScreened1, argb2, tScreened2, x, y, z, dx, dy, dz, clipped, run, rise) {
				var zbuf = this.g3d.zbuf;
				var width = this.g3d.getRenderWidth ();
				var runIndex = 0;
				if (run == 0) {
				    rise = 2147483647;
				    run = 1;
				}var offset = y * width + x;
				var offsetMax = this.g3d.bufferSize;
				var flipflop = (((x ^ y) & 1) != 0);
				var tScreened = tScreened1;
				var argb = argb1;
				if (argb != 0 && !clipped && offset >= 0 && offset < offsetMax && z < zbuf[offset] && (!tScreened || (flipflop = !flipflop))) {
				    this.g3d.addPixel (offset, z, argb);
				}if (dx == 0 && dy == 0) {
				    return;
				}var xIncrement = 1;
				var yOffsetIncrement = width;
				var x2 = x + dx;
				var y2 = y + dy;
				if (dx < 0) {
				    dx = -dx;
				    xIncrement = -1;
				}if (dy < 0) {
				    dy = -dy;
				    yOffsetIncrement = -width;
				}var twoDx = dx + dx;
				var twoDy = dy + dy;
				var zCurrentScaled = z << 10;
				if (dy <= dx) {
				    var roundingFactor = dx - 1;
				    if (dz < 0) roundingFactor = -roundingFactor;
				    var zIncrementScaled = Clazz.doubleToInt (((dz << 10) + roundingFactor) / dx);
				    var twoDxAccumulatedYError = 0;
				    var n1 = Math.abs (x2 - this.x2t) - 1;
				    var n2 = Math.abs (x2 - this.x1t) - 1;
				    for (var n = dx - 1, nMid = Clazz.doubleToInt (n / 2); --n >= n1; ) {
					if (n == nMid) {
					    tScreened = tScreened2;
					    argb = argb2;
					    if (argb == 0) return;
					}offset += xIncrement;
					zCurrentScaled += zIncrementScaled;
					twoDxAccumulatedYError += twoDy;
					if (twoDxAccumulatedYError > dx) {
					    offset += yOffsetIncrement;
					    twoDxAccumulatedYError -= twoDx;
					    flipflop = !flipflop;
					}if (argb != 0 && n < n2 && offset >= 0 && offset < offsetMax && runIndex < rise && (!tScreened || (flipflop = !flipflop))) {
					    var zCurrent = zCurrentScaled >> 10;
					    if (zCurrent < zbuf[offset]) this.g3d.addPixel (offset, zCurrent, argb);
					}runIndex = (runIndex + 1) % run;
				    }
				} else {
				    var roundingFactor = dy - 1;
				    if (dz < 0) roundingFactor = -roundingFactor;
				    var zIncrementScaled = Clazz.doubleToInt (((dz << 10) + roundingFactor) / dy);
				    var twoDyAccumulatedXError = 0;
				    var n1 = Math.abs (y2 - this.y2t) - 1;
				    var n2 = Math.abs (y2 - this.y1t) - 1;
				    for (var n = dy - 1, nMid = Clazz.doubleToInt (n / 2); --n >= n1; ) {
					if (n == nMid) {
					    tScreened = tScreened2;
					    argb = argb2;
					    if (argb == 0) return;
					}offset += yOffsetIncrement;
					zCurrentScaled += zIncrementScaled;
					twoDyAccumulatedXError += twoDx;
					if (twoDyAccumulatedXError > dy) {
					    offset += xIncrement;
					    twoDyAccumulatedXError -= twoDy;
					    flipflop = !flipflop;
					}if (argb != 0 && n < n2 && offset >= 0 && offset < offsetMax && runIndex < rise && (!tScreened || (flipflop = !flipflop))) {
					    var zCurrent = zCurrentScaled >> 10;
					    if (zCurrent < zbuf[offset]) this.g3d.addPixel (offset, zCurrent, argb);
					}runIndex = (runIndex + 1) % run;
				    }
				}}, $fz.isPrivate = true, $fz), "~N,~B,~N,~B,~N,~N,~N,~N,~N,~N,~B,~N,~N");
	Clazz.defineMethod (c$, "plotLineClippedA", 
			    ($fz = function (shades1, tScreened1, shades2, tScreened2, shadeIndex, x, y, z, dx, dy, dz, clipped, run, rise) {
				var zbuf = this.g3d.zbuf;
				var width = this.g3d.getRenderWidth ();
				var runIndex = 0;
				if (run == 0) {
				    rise = 2147483647;
				    run = 1;
				}var offset = y * width + x;
				var offsetMax = this.g3d.bufferSize;
				var shadeIndexUp = (shadeIndex < 63 ? shadeIndex + 1 : shadeIndex);
				var shadeIndexDn = (shadeIndex > 0 ? shadeIndex - 1 : shadeIndex);
				var argb1 = shades1[shadeIndex];
				var argb1Up = shades1[shadeIndexUp];
				var argb1Dn = shades1[shadeIndexDn];
				var argb2 = shades2[shadeIndex];
				var argb2Up = shades2[shadeIndexUp];
				var argb2Dn = shades2[shadeIndexDn];
				var argb = argb1;
				var tScreened = tScreened1;
				var flipflop = (((x ^ y) & 1) != 0);
				if (argb != 0 && !clipped && offset >= 0 && offset < offsetMax && z < zbuf[offset] && (!tScreened || (flipflop = !flipflop))) this.g3d.addPixel (offset, z, argb);
				if (dx == 0 && dy == 0) {
				    return;
				}var xIncrement = 1;
				var yOffsetIncrement = width;
				var x2 = x + dx;
				var y2 = y + dy;
				if (dx < 0) {
				    dx = -dx;
				    xIncrement = -1;
				}if (dy < 0) {
				    dy = -dy;
				    yOffsetIncrement = -width;
				}var twoDx = dx + dx;
				var twoDy = dy + dy;
				var zCurrentScaled = z << 10;
				var argbUp = argb1Up;
				var argbDn = argb1Dn;
				if (dy <= dx) {
				    var roundingFactor = dx - 1;
				    if (dz < 0) roundingFactor = -roundingFactor;
				    var zIncrementScaled = Clazz.doubleToInt (((dz << 10) + roundingFactor) / dx);
				    var twoDxAccumulatedYError = 0;
				    var n1 = Math.abs (x2 - this.x2t) - 1;
				    var n2 = Math.abs (x2 - this.x1t) - 1;
				    for (var n = dx - 1, nMid = Clazz.doubleToInt (n / 2); --n >= n1; ) {
					if (n == nMid) {
					    argb = argb2;
					    if (argb == 0) return;
					    argbUp = argb2Up;
					    argbDn = argb2Dn;
					    tScreened = tScreened2;
					    if (tScreened && !tScreened1) {
						var yT = Clazz.doubleToInt (offset / width);
						var xT = offset % width;
						flipflop = ((xT ^ yT) & 1) == 0;
					    }}offset += xIncrement;
					zCurrentScaled += zIncrementScaled;
					twoDxAccumulatedYError += twoDy;
					if (twoDxAccumulatedYError > dx) {
					    offset += yOffsetIncrement;
					    twoDxAccumulatedYError -= twoDx;
					    flipflop = !flipflop;
					}if (argb != 0 && n < n2 && offset >= 0 && offset < offsetMax && runIndex < rise && (!tScreened || (flipflop = !flipflop))) {
					    var zCurrent = zCurrentScaled >> 10;
					    if (zCurrent < zbuf[offset]) {
						var rand8 = org.jmol.util.Shader.nextRandom8Bit ();
						this.g3d.addPixel (offset, zCurrent, rand8 < 85 ? argbDn : (rand8 > 170 ? argbUp : argb));
					    }}runIndex = (runIndex + 1) % run;
				    }
				} else {
				    var roundingFactor = dy - 1;
				    if (dz < 0) roundingFactor = -roundingFactor;
				    var zIncrementScaled = Clazz.doubleToInt (((dz << 10) + roundingFactor) / dy);
				    var twoDyAccumulatedXError = 0;
				    var n1 = Math.abs (y2 - this.y2t) - 1;
				    var n2 = Math.abs (y2 - this.y1t) - 1;
				    for (var n = dy - 1, nMid = Clazz.doubleToInt (n / 2); --n >= n1; ) {
					if (n == nMid) {
					    argb = argb2;
					    if (argb == 0) return;
					    argbUp = argb2Up;
					    argbDn = argb2Dn;
					    tScreened = tScreened2;
					    if (tScreened && !tScreened1) {
						var yT = Clazz.doubleToInt (offset / width);
						var xT = offset % width;
						flipflop = ((xT ^ yT) & 1) == 0;
					    }}offset += yOffsetIncrement;
					zCurrentScaled += zIncrementScaled;
					twoDyAccumulatedXError += twoDx;
					if (twoDyAccumulatedXError > dy) {
					    offset += xIncrement;
					    twoDyAccumulatedXError -= twoDy;
					    flipflop = !flipflop;
					}if (argb != 0 && n < n2 && offset >= 0 && offset < offsetMax && runIndex < rise && (!tScreened || (flipflop = !flipflop))) {
					    var zCurrent = zCurrentScaled >> 10;
					    if (zCurrent < zbuf[offset]) {
						var rand8 = org.jmol.util.Shader.nextRandom8Bit ();
						this.g3d.addPixel (offset, zCurrent, rand8 < 85 ? argbDn : (rand8 > 170 ? argbUp : argb));
					    }}runIndex = (runIndex + 1) % run;
				    }
				}}, $fz.isPrivate = true, $fz), "~A,~B,~A,~B,~N,~N,~N,~N,~N,~N,~N,~B,~N,~N");
	Clazz.defineMethod (c$, "plotLineClippedBits", 
			    ($fz = function (shades1, tScreened1, shades2, tScreened2, shadeIndex, x, y, z, dx, dy, dz, run, rise) {
				var zbuf = this.g3d.zbuf;
				var width = this.g3d.width;
				var runIndex = 0;
				if (run == 0) {
				    rise = 2147483647;
				    run = 1;
				}var shadeIndexUp = (shadeIndex < 63 ? shadeIndex + 1 : shadeIndex);
				var shadeIndexDn = (shadeIndex > 0 ? shadeIndex - 1 : shadeIndex);
				var argb1 = shades1[shadeIndex];
				var argb1Up = shades1[shadeIndexUp];
				var argb1Dn = shades1[shadeIndexDn];
				var argb2 = shades2[shadeIndex];
				var argb2Up = shades2[shadeIndexUp];
				var argb2Dn = shades2[shadeIndexDn];
				var tScreened = tScreened1;
				var flipflop = (((x ^ y) & 1) != 0);
				var offset = y * width + x;
				var offsetMax = this.g3d.bufferSize;
				var i0;
				var iMid;
				var i1;
				var i2;
				var iIncrement;
				var xIncrement;
				var yIncrement;
				var zIncrement;
				if (this.lineTypeX) {
				    i0 = x;
				    i1 = this.x1t;
				    i2 = this.x2t;
				    iMid = x + Clazz.doubleToInt (dx / 2);
				    iIncrement = (dx >= 0 ? 1 : -1);
				    xIncrement = iIncrement;
				    yIncrement = (dy >= 0 ? width : -width);
				    zIncrement = dz / Math.abs (dx);
				} else {
				    i0 = y;
				    i1 = this.y1t;
				    i2 = this.y2t;
				    iMid = y + Clazz.doubleToInt (dy / 2);
				    iIncrement = (dy >= 0 ? 1 : -1);
				    xIncrement = (dy >= 0 ? width : -width);
				    yIncrement = (dx >= 0 ? 1 : -1);
				    zIncrement = dz / Math.abs (dy);
				}var zFloat = z;
				var argb = argb1;
				var argbUp = argb1Up;
				var argbDn = argb1Dn;
				var isInWindow = false;
				for (var i = i0, iBits = i0; ; i += iIncrement, iBits += iIncrement) {
				    if (i == i1) isInWindow = true;
				    if (i == iMid) {
					argb = argb2;
					if (argb == 0) return;
					argbUp = argb2Up;
					argbDn = argb2Dn;
					tScreened = tScreened2;
					if (tScreened && !tScreened1) {
					    var yT = Clazz.doubleToInt (offset / width);
					    var xT = offset % width;
					    flipflop = ((xT ^ yT) & 1) == 0;
					}}if (argb != 0 && isInWindow && offset >= 0 && offset < offsetMax && runIndex < rise && (!tScreened || (flipflop = !flipflop))) {
					    if (zFloat < zbuf[offset]) {
						var rand8 = org.jmol.util.Shader.nextRandom8Bit ();
						this.g3d.addPixel (offset, Clazz.floatToInt (zFloat), rand8 < 85 ? argbDn : (rand8 > 170 ? argbUp : argb));
					    }}if (i == i2) break;
				    runIndex = (runIndex + 1) % run;
				    offset += xIncrement;
				    while (iBits < 0) iBits += this.nBits;

				    if (this.lineBits.get (iBits % this.nBits)) offset += yIncrement;
				    zFloat += zIncrement;
				}
			    }, $fz.isPrivate = true, $fz), "~A,~B,~A,~B,~N,~N,~N,~N,~N,~N,~N,~N,~N");
	Clazz.defineStatics (c$,
			     "VISIBILITY_UNCLIPPED", 0,
			     "VISIBILITY_CLIPPED", 1,
			     "VISIBILITY_OFFSCREEN", 2);
    });
    // 
    //// org\jmol\g3d\Pixelator.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (null, "org.jmol.g3d.Pixelator", ["org.jmol.g3d.Graphics3D"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.g = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "Pixelator");
	Clazz.makeConstructor (c$, 
			       function (graphics3d) {
				   this.g = graphics3d;
			       }, "org.jmol.g3d.Graphics3D");
	Clazz.defineMethod (c$, "addPixel", 
			    function (offset, z, p) {
				if (!this.g.$isPass2) {
				    this.g.zbuf[offset] = z;
				    this.g.pbuf[offset] = p;
				    return;
				}var zT = this.g.zbufT[offset];
				if (z < zT) {
				    var argb = this.g.pbufT[offset];
				    if (!this.g.translucentCoverOnly && argb != 0 && zT - z > this.g.zMargin) org.jmol.g3d.Graphics3D.mergeBufferPixel (this.g.pbuf, offset, argb, this.g.bgcolor);
				    this.g.zbufT[offset] = z;
				    this.g.pbufT[offset] = p & this.g.translucencyMask;
				} else if (z == zT) {
				} else if (!this.g.translucentCoverOnly && z - zT > this.g.zMargin) {
				    org.jmol.g3d.Graphics3D.mergeBufferPixel (this.g.pbuf, offset, p & this.g.translucencyMask, this.g.bgcolor);
				}}, "~N,~N,~N");
    });
    // 
    //// org\jmol\g3d\PixelatorShaded.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["org.jmol.g3d.Pixelator"], "org.jmol.g3d.PixelatorShaded", null, function () {
	c$ = Clazz.declareType (org.jmol.g3d, "PixelatorShaded", org.jmol.g3d.Pixelator);
	Clazz.defineMethod (c$, "addPixel", 
			    function (offset, z, p) {
				if (z > this.g.zDepth) return;
				if (z <= this.g.zDepth && z >= this.g.zSlab) {
				    var pR = p & 0xFF;
				    var pG = (p & 0xFF00) >> 8;
				    var pB = (p & 0xFF0000) >> 16;
				    var pA = (p & 0xFF000000);
				    var f = (this.g.zDepth - z) / (this.g.zDepth - this.g.zSlab);
				    if (this.g.zShadePower > 1) {
					for (var i = 0; i < this.g.zShadePower; i++) f *= f;

				    }pR = this.g.zShadeR + Clazz.floatToInt (f * (pR - this.g.zShadeR));
				    pG = this.g.zShadeG + Clazz.floatToInt (f * (pG - this.g.zShadeG));
				    pB = this.g.zShadeB + Clazz.floatToInt (f * (pB - this.g.zShadeB));
				    p = (pB << 16) | (pG << 8) | pR | pA;
				}Clazz.superCall (this, org.jmol.g3d.PixelatorShaded, "addPixel", [offset, z, p]);
			    }, "~N,~N,~N");
    });
    // 
    //// org\jmol\g3d\Platform3D.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["java.lang.Thread"], "org.jmol.g3d.Platform3D", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.windowWidth = 0;
	    this.windowHeight = 0;
	    this.windowSize = 0;
	    this.bufferWidth = 0;
	    this.bufferHeight = 0;
	    this.bufferSize = 0;
	    this.bufferSizeT = 0;
	    this.bufferedImage = null;
	    this.pBuffer = null;
	    this.pBufferT = null;
	    this.zBuffer = null;
	    this.zBufferT = null;
	    this.widthOffscreen = 0;
	    this.heightOffscreen = 0;
	    this.offscreenImage = null;
	    this.graphicsForTextOrImage = null;
	    this.useClearingThread = false;
	    this.clearingThread = null;
	    this.apiPlatform = null;
	    if (!Clazz.isClassDefined ("org.jmol.g3d.Platform3D.ClearingThread")) {
		org.jmol.g3d.Platform3D.$Platform3D$ClearingThread$ ();
	    }
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "Platform3D");
	Clazz.makeConstructor (c$, 
			       function (apiPlatform) {
				   this.initialize (false);
				   this.apiPlatform = apiPlatform;
			       }, "org.jmol.api.ApiPlatform");
	Clazz.defineMethod (c$, "getGraphicsForMetrics", 
			    function () {
				return this.apiPlatform.getGraphics (this.allocateOffscreenImage (1, 1));
			    });
	Clazz.defineMethod (c$, "initialize", 
			    function (useClearingThread) {
				this.useClearingThread = useClearingThread;
				if (useClearingThread) {
				    this.clearingThread = Clazz.innerTypeInstance (org.jmol.g3d.Platform3D.ClearingThread, this, null);
				    this.clearingThread.start ();
				}}, "~B");
	Clazz.defineMethod (c$, "allocateTBuffers", 
			    function (antialiasTranslucent) {
				this.bufferSizeT = (antialiasTranslucent ? this.bufferSize : this.windowSize);
				this.zBufferT =  Clazz.newIntArray (this.bufferSizeT, 0);
				this.pBufferT =  Clazz.newIntArray (this.bufferSizeT, 0);
			    }, "~B");
	Clazz.defineMethod (c$, "allocateBuffers", 
			    function (width, height, antialias) {
				this.windowWidth = width;
				this.windowHeight = height;
				this.windowSize = width * height;
				if (antialias) {
				    this.bufferWidth = width * 2;
				    this.bufferHeight = height * 2;
				} else {
				    this.bufferWidth = width;
				    this.bufferHeight = height;
				}this.bufferSize = this.bufferWidth * this.bufferHeight;
				this.zBuffer =  Clazz.newIntArray (this.bufferSize, 0);
				this.pBuffer =  Clazz.newIntArray (this.bufferSize, 0);
				this.bufferedImage = this.apiPlatform.allocateRgbImage (this.windowWidth, this.windowHeight, this.pBuffer, this.windowSize, org.jmol.g3d.Platform3D.backgroundTransparent);
			    }, "~N,~N,~B");
	Clazz.defineMethod (c$, "releaseBuffers", 
			    function () {
				this.windowWidth = this.windowHeight = this.bufferWidth = this.bufferHeight = this.bufferSize = -1;
				if (this.bufferedImage != null) {
				    this.apiPlatform.flushImage (this.bufferedImage);
				    this.bufferedImage = null;
				}this.pBuffer = null;
				this.zBuffer = null;
				this.pBufferT = null;
				this.zBufferT = null;
			    });
	Clazz.defineMethod (c$, "hasContent", 
			    function () {
				for (var i = this.bufferSize; --i >= 0; ) if (this.zBuffer[i] != 2147483647) return true;

				return false;
			    });
	Clazz.defineMethod (c$, "clearScreenBuffer", 
			    function () {
				for (var i = this.bufferSize; --i >= 0; ) {
				    this.zBuffer[i] = 2147483647;
				    this.pBuffer[i] = 0;
				}
			    });
	Clazz.defineMethod (c$, "setBackgroundColor", 
			    function (bgColor) {
				if (this.pBuffer == null) return;
				for (var i = this.bufferSize; --i >= 0; ) if (this.pBuffer[i] == 0) this.pBuffer[i] = bgColor;

			    }, "~N");
	Clazz.defineMethod (c$, "clearTBuffer", 
			    function () {
				for (var i = this.bufferSizeT; --i >= 0; ) {
				    this.zBufferT[i] = 2147483647;
				    this.pBufferT[i] = 0;
				}
			    });
	Clazz.defineMethod (c$, "obtainScreenBuffer", 
			    function () {
				if (this.useClearingThread) {
				    this.clearingThread.obtainBufferForClient ();
				} else {
				    this.clearScreenBuffer ();
				}});
	Clazz.defineMethod (c$, "clearScreenBufferThreaded", 
			    function () {
				if (this.useClearingThread) this.clearingThread.releaseBufferForClearing ();
			    });
	Clazz.defineMethod (c$, "notifyEndOfRendering", 
			    function () {
				this.apiPlatform.notifyEndOfRendering ();
			    });
	Clazz.defineMethod (c$, "getGraphicsForTextOrImage", 
			    function (width, height) {
				if (width > this.widthOffscreen || height > this.heightOffscreen) {
				    if (this.offscreenImage != null) {
					this.apiPlatform.disposeGraphics (this.graphicsForTextOrImage);
					this.apiPlatform.flushImage (this.offscreenImage);
				    }if (width > this.widthOffscreen) this.widthOffscreen = width;
				    if (height > this.heightOffscreen) this.heightOffscreen = height;
				    this.offscreenImage = this.allocateOffscreenImage (this.widthOffscreen, this.heightOffscreen);
				    this.graphicsForTextOrImage = this.apiPlatform.getStaticGraphics (this.offscreenImage, org.jmol.g3d.Platform3D.backgroundTransparent);
				}return this.graphicsForTextOrImage;
			    }, "~N,~N");
	Clazz.defineMethod (c$, "allocateOffscreenImage", 
			    ($fz = function (width, height) {
				return this.apiPlatform.newOffScreenImage (width, height);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "setBackgroundTransparent", 
			    function (tf) {
				($t$ = org.jmol.g3d.Platform3D.backgroundTransparent = tf, org.jmol.g3d.Platform3D.prototype.backgroundTransparent = org.jmol.g3d.Platform3D.backgroundTransparent, $t$);
			    }, "~B");
	c$.$Platform3D$ClearingThread$ = function () {
	    Clazz.pu$h ();
	    c$ = Clazz.decorateAsClass (function () {
		Clazz.prepareCallback (this, arguments);
		this.bufferHasBeenCleared = false;
		this.clientHasBuffer = false;
		Clazz.instantialize (this, arguments);
	    }, org.jmol.g3d.Platform3D, "ClearingThread", Thread);
	    Clazz.defineMethod (c$, "notifyBackgroundChange", 
				function (a) {
				    this.bufferHasBeenCleared = false;
				    this.notify ();
				}, "~N");
	    Clazz.defineMethod (c$, "obtainBufferForClient", 
				function () {
				    while (!this.bufferHasBeenCleared) try {
					this.wait ();
				    } catch (ie) {
					if (Clazz.exceptionOf (ie, InterruptedException)) {
					} else {
					    throw ie;
					}
				    }

				    this.clientHasBuffer = true;
				});
	    Clazz.defineMethod (c$, "releaseBufferForClearing", 
				function () {
				    this.clientHasBuffer = false;
				    this.bufferHasBeenCleared = false;
				    this.notify ();
				});
	    Clazz.defineMethod (c$, "waitForClientRelease", 
				function () {
				    while (this.clientHasBuffer || this.bufferHasBeenCleared) try {
					this.wait ();
				    } catch (ie) {
					if (Clazz.exceptionOf (ie, InterruptedException)) {
					} else {
					    throw ie;
					}
				    }

				});
	    Clazz.defineMethod (c$, "notifyBufferReady", 
				function () {
				    this.bufferHasBeenCleared = true;
				    this.notify ();
				});
	    Clazz.overrideMethod (c$, "run", 
				  function () {
				      while (true) {
					  this.waitForClientRelease ();
					  this.b$["org.jmol.g3d.Platform3D"].clearScreenBuffer ();
					  this.notifyBufferReady ();
				      }
				  });
	    c$ = Clazz.p0p ();
	};
	Clazz.defineStatics (c$,
			     "desireClearingThread", false,
			     "backgroundTransparent", false);
    });
    // 
    //// org\jmol\g3d\SphereRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["org.jmol.util.Point3f"], "org.jmol.g3d.SphereRenderer", ["org.jmol.util.Quadric", "$.Shader"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.g3d = null;
	    this.minX = 0;
	    this.maxX = 0;
	    this.minY = 0;
	    this.maxY = 0;
	    this.minZ = 0;
	    this.maxZ = 0;
	    this.x = 0;
	    this.y = 0;
	    this.z = 0;
	    this.diameter = 0;
	    this.tScreened = false;
	    this.shades = null;
	    this.zroot = null;
	    this.mat = null;
	    this.coef = null;
	    this.mDeriv = null;
	    this.selectedOctant = 0;
	    this.octantPoints = null;
	    this.planeShade = 0;
	    this.zbuf = null;
	    this.width = 0;
	    this.height = 0;
	    this.depth = 0;
	    this.slab = 0;
	    this.offsetPbufBeginLine = 0;
	    this.addAllPixels = false;
	    this.ptTemp = null;
	    this.planeShades = null;
	    this.dxyz = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "SphereRenderer");
	Clazz.prepareFields (c$, function () {
	    this.zroot =  Clazz.newDoubleArray (2, 0);
	    this.ptTemp =  new org.jmol.util.Point3f ();
	    this.planeShades =  Clazz.newIntArray (3, 0);
	    this.dxyz =  Clazz.newFloatArray (3, 3, 0);
	});
	Clazz.makeConstructor (c$, 
			       function (g3d) {
				   this.g3d = g3d;
			       }, "org.jmol.g3d.Graphics3D");
	Clazz.defineMethod (c$, "render", 
			    function (shades, tScreened, diameter, x, y, z, mat, coef, mDeriv, selectedOctant, octantPoints, addAllPixels) {
				if (z == 1) return;
				this.width = this.g3d.width;
				this.height = this.g3d.height;
				if (diameter > 49) diameter &= -2;
				if (this.g3d.isClippedXY (diameter, x, y)) return;
				var radius = (diameter + 1) >> 1;
				this.minX = x - radius;
				this.maxX = x + radius;
				this.minY = y - radius;
				this.maxY = y + radius;
				this.slab = this.g3d.slab;
				this.depth = this.g3d.depth;
				this.minZ = z - radius;
				this.maxZ = z + radius;
				if (this.maxZ < this.slab || this.minZ > this.depth) return;
				($t$ = org.jmol.util.Shader.nOut = ($t$ = org.jmol.util.Shader.nIn = 0, org.jmol.util.Shader.prototype.nIn = org.jmol.util.Shader.nIn, $t$), org.jmol.util.Shader.prototype.nOut = org.jmol.util.Shader.nOut, $t$);
				this.zbuf = this.g3d.zbuf;
				this.addAllPixels = addAllPixels;
				this.offsetPbufBeginLine = this.width * y + x;
				this.x = x;
				this.y = y;
				this.z = z;
				this.diameter = diameter;
				this.tScreened = tScreened;
				this.shades = shades;
				this.mat = mat;
				if (mat != null) {
				    this.coef = coef;
				    this.mDeriv = mDeriv;
				    this.selectedOctant = selectedOctant;
				    this.octantPoints = octantPoints;
				}if (mat != null || diameter > 128) {
				    this.renderLarge ();
				    if (mat != null) {
					this.mat = null;
					this.coef = null;
					this.mDeriv = null;
					this.octantPoints = null;
				    }} else {
					var ss = org.jmol.g3d.SphereRenderer.getSphereShape (diameter);
					if (this.minX < 0 || this.maxX >= this.width || this.minY < 0 || this.maxY >= this.height || this.minZ < this.slab || z > this.depth) this.renderShapeClipped (ss);
					else this.renderShapeUnclipped (ss);
				    }this.shades = null;
				this.zbuf = null;
			    }, "~A,~B,~N,~N,~N,~N,org.jmol.util.Matrix3f,~A,org.jmol.util.Matrix4f,~N,~A,~B");
	c$.getSphereShape = Clazz.defineMethod (c$, "getSphereShape", 
						($fz = function (diameter) {
						    var ss;
						    return ((ss = org.jmol.util.Shader.sphereShapeCache[diameter - 1]) == null ? org.jmol.g3d.SphereRenderer.createSphereShape (diameter) : ss);
						}, $fz.isPrivate = true, $fz), "~N");
	c$.createSphereShape = Clazz.defineMethod (c$, "createSphereShape", 
						   ($fz = function (diameter) {
						       var countSE = 0;
						       var oddDiameter = (diameter & 1) != 0;
						       var radiusF = diameter / 2.0;
						       var radiusF2 = radiusF * radiusF;
						       var radius = Clazz.doubleToInt ((diameter + 1) / 2);
						       var y = oddDiameter ? 0 : 0.5;
						       for (var i = 0; i < radius; ++i, ++y) {
							   var y2 = y * y;
							   var x = oddDiameter ? 0 : 0.5;
							   for (var j = 0; j < radius; ++j, ++x) {
							       var x2 = x * x;
							       var z2 = radiusF2 - y2 - x2;
							       if (z2 >= 0) ++countSE;
							   }
						       }
						       var sphereShape =  Clazz.newIntArray (countSE, 0);
						       var offset = 0;
						       y = oddDiameter ? 0 : 0.5;
						       for (var i = 0; i < radius; ++i, ++y) {
							   var y2 = y * y;
							   var x = oddDiameter ? 0 : 0.5;
							   for (var j = 0; j < radius; ++j, ++x) {
							       var x2 = x * x;
							       var z2 = radiusF2 - y2 - x2;
							       if (z2 >= 0) {
								   var z = Math.sqrt (z2);
								   var height = Clazz.floatToInt (z);
								   var shadeIndexSE = org.jmol.util.Shader.getDitheredNoisyShadeIndex (x, y, z, radiusF);
								   var shadeIndexSW = org.jmol.util.Shader.getDitheredNoisyShadeIndex (-x, y, z, radiusF);
								   var shadeIndexNE = org.jmol.util.Shader.getDitheredNoisyShadeIndex (x, -y, z, radiusF);
								   var shadeIndexNW = org.jmol.util.Shader.getDitheredNoisyShadeIndex (-x, -y, z, radiusF);
								   var packed = (height | (shadeIndexSE << 7) | (shadeIndexSW << 13) | (shadeIndexNE << 19) | (shadeIndexNW << 25));
								   sphereShape[offset++] = packed;
							       }}
							   sphereShape[offset - 1] |= 0x80000000;
						       }
						       return org.jmol.util.Shader.sphereShapeCache[diameter - 1] = sphereShape;
						   }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "renderShapeUnclipped", 
			    ($fz = function (sphereShape) {
				var offsetSphere = 0;
				var evenSizeCorrection = 1 - (this.diameter & 1);
				var offsetSouthCenter = this.offsetPbufBeginLine;
				var offsetNorthCenter = offsetSouthCenter - evenSizeCorrection * this.width;
				var nLines = Clazz.doubleToInt ((this.diameter + 1) / 2);
				if (!this.tScreened) {
				    do {
					var offsetSE = offsetSouthCenter;
					var offsetSW = offsetSouthCenter - evenSizeCorrection;
					var offsetNE = offsetNorthCenter;
					var offsetNW = offsetNorthCenter - evenSizeCorrection;
					var packed;
					do {
					    packed = sphereShape[offsetSphere++];
					    var zPixel = this.z - (packed & 0x7F);
					    if (zPixel < this.zbuf[offsetSE]) this.g3d.addPixel (offsetSE, zPixel, this.shades[((packed >> 7) & 0x3F)]);
					    if (zPixel < this.zbuf[offsetSW]) this.g3d.addPixel (offsetSW, zPixel, this.shades[((packed >> 13) & 0x3F)]);
					    if (zPixel < this.zbuf[offsetNE]) this.g3d.addPixel (offsetNE, zPixel, this.shades[((packed >> 19) & 0x3F)]);
					    if (zPixel < this.zbuf[offsetNW]) this.g3d.addPixel (offsetNW, zPixel, this.shades[((packed >> 25) & 0x3F)]);
					    ++offsetSE;
					    --offsetSW;
					    ++offsetNE;
					    --offsetNW;
					} while (packed >= 0);
					offsetSouthCenter += this.width;
					offsetNorthCenter -= this.width;
				    } while (--nLines > 0);
				    return;
				}var flipflopSouthCenter = (this.x ^ this.y) & 1;
				var flipflopNorthCenter = flipflopSouthCenter ^ evenSizeCorrection;
				var flipflopSE = flipflopSouthCenter;
				var flipflopSW = flipflopSouthCenter ^ evenSizeCorrection;
				var flipflopNE = flipflopNorthCenter;
				var flipflopNW = flipflopNorthCenter ^ evenSizeCorrection;
				var flipflopsCenter = flipflopSE | (flipflopSW << 1) | (flipflopNE << 2) | (flipflopNW << 3);
				do {
				    var offsetSE = offsetSouthCenter;
				    var offsetSW = offsetSouthCenter - evenSizeCorrection;
				    var offsetNE = offsetNorthCenter;
				    var offsetNW = offsetNorthCenter - evenSizeCorrection;
				    var packed;
				    var flipflops = (flipflopsCenter = ~flipflopsCenter);
				    do {
					packed = sphereShape[offsetSphere++];
					var zPixel = this.z - (packed & 0x7F);
					if ((flipflops & 1) != 0 && zPixel < this.zbuf[offsetSE]) this.g3d.addPixel (offsetSE, zPixel, this.shades[((packed >> 7) & 0x3F)]);
					if ((flipflops & 2) != 0 && zPixel < this.zbuf[offsetSW]) this.g3d.addPixel (offsetSW, zPixel, this.shades[((packed >> 13) & 0x3F)]);
					if ((flipflops & 4) != 0 && zPixel < this.zbuf[offsetNE]) this.g3d.addPixel (offsetNE, zPixel, this.shades[((packed >> 19) & 0x3F)]);
					if ((flipflops & 8) != 0 && zPixel < this.zbuf[offsetNW]) this.g3d.addPixel (offsetNW, zPixel, this.shades[((packed >> 25) & 0x3F)]);
					++offsetSE;
					--offsetSW;
					++offsetNE;
					--offsetNW;
					flipflops = ~flipflops;
				    } while (packed >= 0);
				    offsetSouthCenter += this.width;
				    offsetNorthCenter -= this.width;
				} while (--nLines > 0);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "renderShapeClipped", 
			    ($fz = function (sphereShape) {
				var offsetSphere = 0;
				var evenSizeCorrection = 1 - (this.diameter & 1);
				var offsetSouthCenter = this.offsetPbufBeginLine;
				var offsetNorthCenter = offsetSouthCenter - evenSizeCorrection * this.width;
				var nLines = Clazz.doubleToInt ((this.diameter + 1) / 2);
				var ySouth = this.y;
				var yNorth = this.y - evenSizeCorrection;
				var randu = (this.x << 16) + (this.y << 1) ^ 0x33333333;
				var flipflopSouthCenter = (this.x ^ this.y) & 1;
				var flipflopNorthCenter = flipflopSouthCenter ^ evenSizeCorrection;
				var flipflopSE = flipflopSouthCenter;
				var flipflopSW = flipflopSouthCenter ^ evenSizeCorrection;
				var flipflopNE = flipflopNorthCenter;
				var flipflopNW = flipflopNorthCenter ^ evenSizeCorrection;
				var flipflopsCenter = flipflopSE | (flipflopSW << 1) | (flipflopNE << 2) | (flipflopNW << 3);
				do {
				    var tSouthVisible = ySouth >= 0 && ySouth < this.height;
				    var tNorthVisible = yNorth >= 0 && yNorth < this.height;
				    var offsetSE = offsetSouthCenter;
				    var offsetSW = offsetSouthCenter - evenSizeCorrection;
				    var offsetNE = offsetNorthCenter;
				    var offsetNW = offsetNorthCenter - evenSizeCorrection;
				    var packed;
				    var flipflops = (flipflopsCenter = ~flipflopsCenter);
				    var xEast = this.x;
				    var xWest = this.x - evenSizeCorrection;
				    do {
					var tWestVisible = xWest >= 0 && xWest < this.width;
					var tEastVisible = xEast >= 0 && xEast < this.width;
					packed = sphereShape[offsetSphere++];
					var isCore;
					var zOffset = packed & 0x7F;
					var zPixel;
					if (this.z < this.slab) {
					    zPixel = this.z + zOffset;
					    isCore = (zPixel >= this.slab);
					} else {
					    zPixel = this.z - zOffset;
					    isCore = (zPixel < this.slab);
					}if (isCore) zPixel = this.slab;
					if (zPixel >= this.slab && zPixel <= this.depth) {
					    if (tSouthVisible) {
						if (tEastVisible && (this.addAllPixels || (flipflops & 1) != 0) && zPixel < this.zbuf[offsetSE]) {
						    var i = (isCore ? 44 + ((randu >> 7) & 0x07) : (packed >> 7) & 0x3F);
						    this.g3d.addPixel (offsetSE, zPixel, this.shades[i]);
						}if (tWestVisible && (this.addAllPixels || (flipflops & 2) != 0) && zPixel < this.zbuf[offsetSW]) {
						    var i = (isCore ? 44 + ((randu >> 13) & 0x07) : (packed >> 13) & 0x3F);
						    this.g3d.addPixel (offsetSW, zPixel, this.shades[i]);
						}}if (tNorthVisible) {
						    if (tEastVisible && (!this.tScreened || (flipflops & 4) != 0) && zPixel < this.zbuf[offsetNE]) {
							var i = (isCore ? 44 + ((randu >> 19) & 0x07) : (packed >> 19) & 0x3F);
							this.g3d.addPixel (offsetNE, zPixel, this.shades[i]);
						    }if (tWestVisible && (!this.tScreened || (flipflops & 8) != 0) && zPixel < this.zbuf[offsetNW]) {
							var i = (isCore ? 44 + ((randu >> 25) & 0x07) : (packed >> 25) & 0x3F);
							this.g3d.addPixel (offsetNW, zPixel, this.shades[i]);
						    }}}++offsetSE;
					--offsetSW;
					++offsetNE;
					--offsetNW;
					++xEast;
					--xWest;
					flipflops = ~flipflops;
					if (isCore) randu = ((randu << 16) + (randu << 1) + randu) & 0x7FFFFFFF;
				    } while (packed >= 0);
				    offsetSouthCenter += this.width;
				    offsetNorthCenter -= this.width;
				    ++ySouth;
				    --yNorth;
				} while (--nLines > 0);
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "renderLarge", 
			    ($fz = function () {
				if (this.mat != null) {
				    if (org.jmol.util.Shader.ellipsoidShades == null) org.jmol.util.Shader.createEllipsoidShades ();
				    if (this.octantPoints != null) this.setPlaneDerivatives ();
				} else if (!org.jmol.util.Shader.sphereShadingCalculated) org.jmol.util.Shader.calcSphereShading ();
				this.renderQuadrant (-1, -1);
				this.renderQuadrant (-1, 1);
				this.renderQuadrant (1, -1);
				this.renderQuadrant (1, 1);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "renderQuadrant", 
			    ($fz = function (xSign, ySign) {
				var radius = Clazz.doubleToInt (this.diameter / 2);
				var t = this.x + radius * xSign;
				var xStatus = (this.x < 0 ? -1 : this.x < this.width ? 0 : 1) + (t < 0 ? -2 : t < this.width ? 0 : 2);
				if (xStatus == -3 || xStatus == 3) return;
				t = this.y + radius * ySign;
				var yStatus = (this.y < 0 ? -1 : this.y < this.height ? 0 : 1) + (t < 0 ? -2 : t < this.height ? 0 : 2);
				if (yStatus == -3 || yStatus == 3) return;
				var unclipped = (this.mat == null && xStatus == 0 && yStatus == 0 && this.z - radius >= this.slab && this.z <= this.depth);
				if (unclipped) this.renderQuadrantUnclipped (radius, xSign, ySign);
				else this.renderQuadrantClipped (radius, xSign, ySign);
			    }, $fz.isPrivate = true, $fz), "~N,~N");
	Clazz.defineMethod (c$, "renderQuadrantUnclipped", 
			    ($fz = function (radius, xSign, ySign) {
				var r2 = radius * radius;
				var dDivisor = radius * 2 + 1;
				var flipflopBeginLine = ((this.x ^ this.y) & 1) == 0;
				var lineIncrement = (ySign < 0 ? -this.width : this.width);
				var ptLine = this.offsetPbufBeginLine;
				for (var i = 0, i2 = 0; i2 <= r2; i2 += i + (++i), ptLine += lineIncrement) {
				    var offset = ptLine;
				    var flipflop = (flipflopBeginLine = !flipflopBeginLine);
				    var s2 = r2 - i2;
				    var z0 = this.z - radius;
				    var y8 = Clazz.doubleToInt (((i * ySign + radius) << 8) / dDivisor);
				    for (var j = 0, j2 = 0; j2 <= s2; j2 += j + (++j), offset += xSign) {
					if (this.addAllPixels || (flipflop = !flipflop)) {
					    if (this.zbuf[offset] <= z0) continue;
					    var k = Clazz.doubleToInt (Math.sqrt (s2 - j2));
					    z0 = this.z - k;
					    if (this.zbuf[offset] <= z0) continue;
					    var x8 = Clazz.doubleToInt (((j * xSign + radius) << 8) / dDivisor);
					    this.g3d.addPixel (offset, z0, this.shades[org.jmol.util.Shader.sphereShadeIndexes[((y8 << 8) + x8)]]);
					}}
				}
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "renderQuadrantClipped", 
			    ($fz = function (radius, xSign, ySign) {
				var isEllipsoid = (this.mat != null);
				var checkOctant = (this.selectedOctant >= 0);
				var r2 = radius * radius;
				var dDivisor = radius * 2 + 1;
				var lineIncrement = (ySign < 0 ? -this.width : this.width);
				var ptLine = this.offsetPbufBeginLine;
				var randu = (this.x << 16) + (this.y << 1) ^ 0x33333333;
				var yCurrent = this.y;
				var y8 = 0;
				var iShade = 0;
				for (var i = 0, i2 = 0; i2 <= r2; i2 += i + (++i), ptLine += lineIncrement, yCurrent += ySign) {
				    if (yCurrent < 0) {
					if (ySign < 0) return;
					continue;
				    }if (yCurrent >= this.height) {
					if (ySign > 0) return;
					continue;
				    }var s2 = r2 - (isEllipsoid ? 0 : i2);
				    var xCurrent = this.x;
				    if (!isEllipsoid) {
					y8 = Clazz.doubleToInt (((i * ySign + radius) << 8) / dDivisor);
				    }randu = ((randu << 16) + (randu << 1) + randu) & 0x7FFFFFFF;
				    var iRoot = -1;
				    var mode = 1;
				    var offset = ptLine;
				    for (var j = 0, j2 = 0; j2 <= s2; j2 += j + (++j), offset += xSign, xCurrent += xSign) {
					if (xCurrent < 0) {
					    if (xSign < 0) break;
					    continue;
					}if (xCurrent >= this.width) {
					    if (xSign > 0) break;
					    continue;
					}if (this.tScreened && (((xCurrent ^ yCurrent) & 1) != 0)) continue;
					var zPixel;
					if (isEllipsoid) {
					    if (!org.jmol.util.Quadric.getQuardricZ (xCurrent, yCurrent, this.coef, this.zroot)) {
						if (iRoot >= 0) {
						    break;
						}continue;
					    }iRoot = (this.z < this.slab ? 1 : 0);
					    zPixel = Clazz.doubleToInt (this.zroot[iRoot]);
					    if (zPixel == 0) zPixel = this.z;
					    mode = 2;
					    if (checkOctant) {
						this.ptTemp.set (xCurrent - this.x, yCurrent - this.y, zPixel - this.z);
						this.mat.transform (this.ptTemp);
						var thisOctant = org.jmol.util.Quadric.getOctant (this.ptTemp);
						if (thisOctant == this.selectedOctant) {
						    iShade = this.getPlaneShade (xCurrent, yCurrent, this.zroot);
						    zPixel = Clazz.doubleToInt (this.zroot[0]);
						    mode = 3;
						}}} else {
						    var zOffset = Clazz.doubleToInt (Math.sqrt (s2 - j2));
						    zPixel = this.z + (this.z < this.slab ? zOffset : -zOffset);
						}var isCore = (this.z < this.slab ? zPixel >= this.slab : zPixel < this.slab);
					if (isCore) {
					    zPixel = this.slab;
					    mode = 0;
					}if (zPixel < this.slab || zPixel > this.depth || this.zbuf[offset] <= zPixel) continue;
					switch (mode) {
					case 0:
					    iShade = (44 + ((randu >> 8) & 0x07));
					    randu = ((randu << 16) + (randu << 1) + randu) & 0x7FFFFFFF;
					    mode = 1;
					    break;
					case 2:
					    iShade = org.jmol.util.Shader.getEllipsoidShade (xCurrent, yCurrent, this.zroot[iRoot], radius, this.mDeriv);
					    break;
					case 3:
					    break;
					default:
					    var x8 = Clazz.doubleToInt (((j * xSign + radius) << 8) / dDivisor);
					    iShade = org.jmol.util.Shader.sphereShadeIndexes[(y8 << 8) + x8];
					    break;
					}
					this.g3d.addPixel (offset, zPixel, this.shades[iShade]);
				    }
				    randu = ((randu + xCurrent + yCurrent) | 1) & 0x7FFFFFFF;
				}
			    }, $fz.isPrivate = true, $fz), "~N,~N,~N");
	Clazz.defineMethod (c$, "setPlaneDerivatives", 
			    ($fz = function () {
				this.planeShade = -1;
				for (var i = 0; i < 3; i++) {
				    var dx = this.dxyz[i][0] = this.octantPoints[i].x - this.x;
				    var dy = this.dxyz[i][1] = this.octantPoints[i].y - this.y;
				    var dz = this.dxyz[i][2] = this.octantPoints[i].z - this.z;
				    this.planeShades[i] = org.jmol.util.Shader.getShadeIndex (dx, dy, -dz);
				    if (dx == 0 && dy == 0) {
					this.planeShade = this.planeShades[i];
					return;
				    }}
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getPlaneShade", 
			    ($fz = function (xCurrent, yCurrent, zroot) {
				if (this.planeShade >= 0) return this.planeShade;
				var iMin = 3;
				var dz;
				var zMin = 3.4028235E38;
				for (var i = 0; i < 3; i++) {
				    if ((dz = this.dxyz[i][2]) == 0) continue;
				    var ptz = this.z + (-this.dxyz[i][0] * (xCurrent - this.x) - this.dxyz[i][1] * (yCurrent - this.y)) / dz;
				    if (ptz < zMin) {
					zMin = ptz;
					iMin = i;
				    }}
				if (iMin == 3) {
				    iMin = 0;
				    zMin = this.z;
				}zroot[0] = zMin;
				return this.planeShades[iMin];
			    }, $fz.isPrivate = true, $fz), "~N,~N,~A");
	Clazz.defineStatics (c$,
			     "maxOddSizeSphere", 49,
			     "maxSphereDiameter", 1000,
			     "maxSphereDiameter2", 2000,
			     "SHADE_SLAB_CLIPPED", 47);
    });
    // 
    //// org\jmol\g3d\TextRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["java.util.Hashtable"], "org.jmol.g3d.TextRenderer", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.height = 0;
	    this.ascent = 0;
	    this.width = 0;
	    this.mapWidth = 0;
	    this.size = 0;
	    this.tmap = null;
	    this.isInvalid = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "TextRenderer");
	c$.clearFontCache = Clazz.defineMethod (c$, "clearFontCache", 
						function () {
						    if (org.jmol.g3d.TextRenderer.working) return;
						    org.jmol.g3d.TextRenderer.htFont3d.clear ();
						    org.jmol.g3d.TextRenderer.htFont3dAntialias.clear ();
						});
	c$.plot = Clazz.defineMethod (c$, "plot", 
				      function (x, y, z, argb, text, font3d, g3d, jmolRenderer, antialias) {
					  if (text.length == 0) return 0;
					  if (text.indexOf ("<su") >= 0) return org.jmol.g3d.TextRenderer.plotByCharacter (x, y, z, argb, text, font3d, g3d, jmolRenderer, antialias);
					  var offset = font3d.getAscent ();
					  y -= offset;
					  var text3d = org.jmol.g3d.TextRenderer.getPlotText3D (x, y, g3d, text, font3d, antialias);
					  if (text3d.isInvalid) return text3d.width;
					  if (antialias && (argb & 0xC0C0C0) == 0) {
					      argb = argb | 0x040404;
					  }if (jmolRenderer != null || (x < 0 || x + text3d.width > g3d.width || y < 0 || y + text3d.height > g3d.height)) org.jmol.g3d.TextRenderer.plotClipped (x, y, z, argb, g3d, jmolRenderer, text3d.mapWidth, text3d.height, text3d.tmap);
					  else org.jmol.g3d.TextRenderer.plotUnclipped (x, y, z, argb, g3d, text3d.mapWidth, text3d.height, text3d.tmap);
					  return text3d.width;
				      }, "~N,~N,~N,~N,~S,org.jmol.util.JmolFont,org.jmol.g3d.Graphics3D,org.jmol.api.JmolRendererInterface,~B");
	c$.plotByCharacter = Clazz.defineMethod (c$, "plotByCharacter", 
						 ($fz = function (x, y, z, argb, text, font3d, g3d, jmolRenderer, antialias) {
						     var w = 0;
						     var len = text.length;
						     var suboffset = Math.round (font3d.getHeight () * 0.25);
						     var supoffset = -Math.round (font3d.getHeight () * 0.3);
						     for (var i = 0; i < len; i++) {
							 if (text.charAt (i) == '<') {
							     if (i + 4 < len && text.substring (i, i + 5).equals ("<sub>")) {
								 i += 4;
								 y += suboffset;
								 continue;
							     }if (i + 4 < len && text.substring (i, i + 5).equals ("<sup>")) {
								 i += 4;
								 y += supoffset;
								 continue;
							     }if (i + 5 < len && text.substring (i, i + 6).equals ("</sub>")) {
								 i += 5;
								 y -= suboffset;
								 continue;
							     }if (i + 5 < len && text.substring (i, i + 6).equals ("</sup>")) {
								 i += 5;
								 y -= supoffset;
								 continue;
							     }}var width = org.jmol.g3d.TextRenderer.plot (x + w, y, z, argb, text.substring (i, i + 1), font3d, g3d, jmolRenderer, antialias);
							 w += width;
						     }
						     return w;
						 }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,~S,org.jmol.util.JmolFont,org.jmol.g3d.Graphics3D,org.jmol.api.JmolRendererInterface,~B");
	c$.plotUnclipped = Clazz.defineMethod (c$, "plotUnclipped", 
					       ($fz = function (x, y, z, argb, g3d, textWidth, textHeight, tmap) {
						   var offset = 0;
						   var zbuf = g3d.zbuf;
						   var renderWidth = g3d.width;
						   var pbufOffset = y * renderWidth + x;
						   for (var i = 0; i < textHeight; i++) {
						       for (var j = 0; j < textWidth; j++) {
							   var shade = tmap[offset++];
							   if (shade != 0 && z < zbuf[pbufOffset]) g3d.shadeTextPixel (pbufOffset, z, argb, shade);
							   pbufOffset++;
						       }
						       pbufOffset += (renderWidth - textWidth);
						   }
					       }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,org.jmol.g3d.Graphics3D,~N,~N,~A");
	c$.plotClipped = Clazz.defineMethod (c$, "plotClipped", 
					     ($fz = function (x, y, z, argb, g3d, jmolRenderer, textWidth, textHeight, tmap) {
						 if (jmolRenderer == null) jmolRenderer = g3d;
						 var offset = 0;
						 for (var i = 0; i < textHeight; i++) {
						     for (var j = 0; j < textWidth; j++) {
							 var shade = tmap[offset++];
							 if (shade != 0) jmolRenderer.plotImagePixel (argb, x + j, y + i, z, shade);
						     }
						 }
					     }, $fz.isPrivate = true, $fz), "~N,~N,~N,~N,org.jmol.g3d.Graphics3D,org.jmol.api.JmolRendererInterface,~N,~N,~A");
	Clazz.makeConstructor (c$, 
			       ($fz = function (text, font3d) {
				   this.ascent = font3d.getAscent ();
				   this.height = font3d.getHeight ();
				   this.width = font3d.stringWidth (text);
				   if (this.width == 0) return;
				   this.mapWidth = this.width;
				   this.size = this.mapWidth * this.height;
			       }, $fz.isPrivate = true, $fz), "~S,org.jmol.util.JmolFont");
	c$.getPlotText3D = Clazz.defineMethod (c$, "getPlotText3D", 
					       ($fz = function (x, y, g3d, text, font3d, antialias) {
						   ($t$ = org.jmol.g3d.TextRenderer.working = true, org.jmol.g3d.TextRenderer.prototype.working = org.jmol.g3d.TextRenderer.working, $t$);
						   var ht = (antialias ? org.jmol.g3d.TextRenderer.htFont3dAntialias : org.jmol.g3d.TextRenderer.htFont3d);
						   var htForThisFont = ht.get (font3d);
						   var text3d = null;
						   var newFont = false;
						   var newText = false;
						   if (htForThisFont != null) {
						       text3d = htForThisFont.get (text);
						   } else {
						       htForThisFont =  new java.util.Hashtable ();
						       newFont = true;
						   }if (text3d == null) {
						       text3d =  new org.jmol.g3d.TextRenderer (text, font3d);
						       newText = true;
						   }text3d.isInvalid = (text3d.width == 0 || x + text3d.width <= 0 || x >= g3d.width || y + text3d.height <= 0 || y >= g3d.height);
						   if (text3d.isInvalid) return text3d;
						   if (newFont) ht.put (font3d, htForThisFont);
						   if (newText) {
						       text3d.setTranslucency (text, font3d, g3d);
						       htForThisFont.put (text, text3d);
						   }($t$ = org.jmol.g3d.TextRenderer.working = false, org.jmol.g3d.TextRenderer.prototype.working = org.jmol.g3d.TextRenderer.working, $t$);
						   return text3d;
					       }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.g3d.Graphics3D,~S,org.jmol.util.JmolFont,~B");
	Clazz.defineMethod (c$, "setTranslucency", 
			    ($fz = function (text, font3d, g3d) {
				var pixels = g3d.apiPlatform.getTextPixels (text, font3d, g3d.platform.getGraphicsForTextOrImage (this.mapWidth, this.height), g3d.platform.offscreenImage, this.mapWidth, this.height, this.ascent);
				if (pixels == null) return;
				this.tmap =  Clazz.newByteArray (this.size, 0);
				for (var i = pixels.length; --i >= 0; ) {
				    var p = pixels[i] & 0xFF;
				    if (p != 0) {
					this.tmap[i] = org.jmol.g3d.TextRenderer.translucency[p >> 5];
				    }}
			    }, $fz.isPrivate = true, $fz), "~S,org.jmol.util.JmolFont,org.jmol.g3d.Graphics3D");
	Clazz.defineStatics (c$,
			     "translucency", [7, 6, 5, 4, 3, 2, 1, 8],
			     "working", false);
	c$.htFont3d = c$.prototype.htFont3d =  new java.util.Hashtable ();
	c$.htFont3dAntialias = c$.prototype.htFont3dAntialias =  new java.util.Hashtable ();
    });
    // 
    //// org\jmol\g3d\TextSorter.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    c$ = Clazz.declareType (org.jmol.g3d, "TextSorter", null, java.util.Comparator);
    Clazz.overrideMethod (c$, "compare", 
			  function (a, b) {
			      return (a == null || b == null ? 0 : a.z > b.z ? -1 : a.z < b.z ? 1 : 0);
			  }, "org.jmol.g3d.TextString,org.jmol.g3d.TextString");
    // 
    //// org\jmol\g3d\TextString.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["org.jmol.util.Point3i"], "org.jmol.g3d.TextString", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.text = null;
	    this.font = null;
	    this.argb = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "TextString", org.jmol.util.Point3i);
	Clazz.defineMethod (c$, "setText", 
			    function (text, font, argb, x, y, z) {
				this.text = text;
				this.font = font;
				this.argb = argb;
				this.x = x;
				this.y = y;
				this.z = z;
			    }, "~S,org.jmol.util.JmolFont,~N,~N,~N,~N");
	Clazz.defineMethod (c$, "toString", 
			    function () {
				return Clazz.superCall (this, org.jmol.g3d.TextString, "toString", []) + " " + this.text;
			    });
    });
    // 
    //// org\jmol\util\Rgb16.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.util");
    Clazz.load (null, "org.jmol.util.Rgb16", ["org.jmol.util.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.rScaled = 0;
	    this.gScaled = 0;
	    this.bScaled = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.util, "Rgb16");
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	c$.newI = Clazz.defineMethod (c$, "newI", 
				      function (argb) {
					  var c =  new org.jmol.util.Rgb16 ();
					  c.setInt (argb);
					  return c;
				      }, "~N");
	Clazz.defineMethod (c$, "setInt", 
			    function (argb) {
				this.rScaled = ((argb >> 8) & 0xFF00) | 0x80;
				this.gScaled = ((argb) & 0xFF00) | 0x80;
				this.bScaled = ((argb << 8) & 0xFF00) | 0x80;
			    }, "~N");
	Clazz.defineMethod (c$, "setRgb", 
			    function (other) {
				this.rScaled = other.rScaled;
				this.gScaled = other.gScaled;
				this.bScaled = other.bScaled;
			    }, "org.jmol.util.Rgb16");
	Clazz.defineMethod (c$, "diffDiv", 
			    function (rgb16A, rgb16B, divisor) {
				this.rScaled = Clazz.doubleToInt ((rgb16A.rScaled - rgb16B.rScaled) / divisor);
				this.gScaled = Clazz.doubleToInt ((rgb16A.gScaled - rgb16B.gScaled) / divisor);
				this.bScaled = Clazz.doubleToInt ((rgb16A.bScaled - rgb16B.bScaled) / divisor);
			    }, "org.jmol.util.Rgb16,org.jmol.util.Rgb16,~N");
	Clazz.defineMethod (c$, "setAndIncrement", 
			    function (base, other) {
				this.rScaled = base.rScaled;
				base.rScaled += other.rScaled;
				this.gScaled = base.gScaled;
				base.gScaled += other.gScaled;
				this.bScaled = base.bScaled;
				base.bScaled += other.bScaled;
			    }, "org.jmol.util.Rgb16,org.jmol.util.Rgb16");
	Clazz.defineMethod (c$, "getArgb", 
			    function () {
				return (0xFF000000 | ((this.rScaled << 8) & 0x00FF0000) | (this.gScaled & 0x0000FF00) | (this.bScaled >> 8));
			    });
	Clazz.overrideMethod (c$, "toString", 
			      function () {
				  return  new org.jmol.util.StringXBuilder ().append ("Rgb16(").appendI (this.rScaled).appendC (',').appendI (this.gScaled).appendC (',').appendI (this.bScaled).append (" -> ").appendI ((this.rScaled >> 8) & 0xFF).appendC (',').appendI ((this.gScaled >> 8) & 0xFF).appendC (',').appendI ((this.bScaled >> 8) & 0xFF).appendC (')').toString ();
			      });
    });
    // 
    //// org\jmol\g3d\TriangleRenderer.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.g3d");
    Clazz.load (["org.jmol.util.Rgb16"], "org.jmol.g3d.TriangleRenderer", ["org.jmol.util.GData"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.g3d = null;
	    this.line3d = null;
	    this.ax = null;
	    this.ay = null;
	    this.az = null;
	    this.axW = null;
	    this.azW = null;
	    this.axE = null;
	    this.azE = null;
	    this.rgb16sW = null;
	    this.rgb16sE = null;
	    this.rgb16sGouraud = null;
	    this.rgb16t1 = null;
	    this.rgb16t2 = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.g3d, "TriangleRenderer");
	Clazz.prepareFields (c$, function () {
	    this.ax =  Clazz.newIntArray (3, 0);
	    this.ay =  Clazz.newIntArray (3, 0);
	    this.az =  Clazz.newIntArray (3, 0);
	    this.axW =  Clazz.newIntArray (64, 0);
	    this.azW =  Clazz.newIntArray (64, 0);
	    this.axE =  Clazz.newIntArray (64, 0);
	    this.azE =  Clazz.newIntArray (64, 0);
	    this.rgb16t1 =  new org.jmol.util.Rgb16 ();
	    this.rgb16t2 =  new org.jmol.util.Rgb16 ();
	});
	Clazz.makeConstructor (c$, 
			       function (g3d) {
				   this.rgb16sW =  new Array (64);
				   this.rgb16sE =  new Array (64);
				   for (var i = 64; --i >= 0; ) {
				       this.rgb16sW[i] =  new org.jmol.util.Rgb16 ();
				       this.rgb16sE[i] =  new org.jmol.util.Rgb16 ();
				   }
				   this.g3d = g3d;
				   this.line3d = g3d.line3d;
				   this.rgb16sGouraud =  new Array (3);
				   for (var i = 3; --i >= 0; ) this.rgb16sGouraud[i] =  new org.jmol.util.Rgb16 ();

			       }, "org.jmol.g3d.Graphics3D");
	Clazz.defineMethod (c$, "reallocRgb16s", 
			    function (rgb16s, n) {
				var t =  new Array (n);
				System.arraycopy (rgb16s, 0, t, 0, rgb16s.length);
				for (var i = rgb16s.length; i < n; ++i) t[i] =  new org.jmol.util.Rgb16 ();

				return t;
			    }, "~A,~N");
	Clazz.defineMethod (c$, "setGouraud", 
			    function (rgbA, rgbB, rgbC) {
				this.rgb16sGouraud[0].setInt (rgbA);
				this.rgb16sGouraud[1].setInt (rgbB);
				this.rgb16sGouraud[2].setInt (rgbC);
			    }, "~N,~N,~N");
	Clazz.defineMethod (c$, "drawfillTriangle", 
			    function (xA, yA, zA, xB, yB, zB, xC, yC, zC, useGouraud) {
				this.ax[0] = xA;
				this.ax[1] = xB;
				this.ax[2] = xC;
				this.ay[0] = yA;
				this.ay[1] = yB;
				this.ay[2] = yC;
				this.az[0] = zA;
				this.az[1] = zB;
				this.az[2] = zC;
				this.fillTriangleB (useGouraud);
			    }, "~N,~N,~N,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "fillTriangleXYZ", 
			    function (xScreenA, yScreenA, zScreenA, xScreenB, yScreenB, zScreenB, xScreenC, yScreenC, zScreenC, useGouraud) {
				this.ax[0] = xScreenA;
				this.ax[1] = xScreenB;
				this.ax[2] = xScreenC;
				this.ay[0] = yScreenA;
				this.ay[1] = yScreenB;
				this.ay[2] = yScreenC;
				this.az[0] = zScreenA;
				this.az[1] = zScreenB;
				this.az[2] = zScreenC;
				this.fillTriangleB (useGouraud);
			    }, "~N,~N,~N,~N,~N,~N,~N,~N,~N,~B");
	Clazz.defineMethod (c$, "fillTriangleP3i", 
			    function (screenA, screenB, screenC, useGouraud) {
				this.ax[0] = screenA.x;
				this.ax[1] = screenB.x;
				this.ax[2] = screenC.x;
				this.ay[0] = screenA.y;
				this.ay[1] = screenB.y;
				this.ay[2] = screenC.y;
				this.az[0] = screenA.z;
				this.az[1] = screenB.z;
				this.az[2] = screenC.z;
				this.fillTriangleB (useGouraud);
			    }, "org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,~B");
	Clazz.defineMethod (c$, "fillTriangleP3f", 
			    function (screenA, screenB, screenC, useGouraud) {
				this.ax[0] = Math.round (screenA.x);
				this.ax[1] = Math.round (screenB.x);
				this.ax[2] = Math.round (screenC.x);
				this.ay[0] = Math.round (screenA.y);
				this.ay[1] = Math.round (screenB.y);
				this.ay[2] = Math.round (screenC.y);
				this.az[0] = Math.round (screenA.z);
				this.az[1] = Math.round (screenB.z);
				this.az[2] = Math.round (screenC.z);
				this.fillTriangleB (useGouraud);
			    }, "org.jmol.util.Point3f,org.jmol.util.Point3f,org.jmol.util.Point3f,~B");
	Clazz.defineMethod (c$, "fillTriangleP3if", 
			    function (screenA, screenB, screenC, factor, useGouraud) {
				this.ax[0] = screenA.x;
				this.ax[1] = screenB.x;
				this.ax[2] = screenC.x;
				this.ay[0] = screenA.y;
				this.ay[1] = screenB.y;
				this.ay[2] = screenC.y;
				this.az[0] = screenA.z;
				this.az[1] = screenB.z;
				this.az[2] = screenC.z;
				org.jmol.g3d.TriangleRenderer.adjustVertex (this.ax, factor);
				org.jmol.g3d.TriangleRenderer.adjustVertex (this.ay, factor);
				org.jmol.g3d.TriangleRenderer.adjustVertex (this.az, factor);
				this.fillTriangleB (useGouraud);
			    }, "org.jmol.util.Point3i,org.jmol.util.Point3i,org.jmol.util.Point3i,~N,~B");
	c$.adjustVertex = Clazz.defineMethod (c$, "adjustVertex", 
					      ($fz = function (t, factor) {
						  var av = (t[0] + t[1] + t[2]) / 3;
						  for (var i = 0; i < 3; i++) t[i] += factor * (av - t[i]);

					      }, $fz.isPrivate = true, $fz), "~A,~N");
	Clazz.defineMethod (c$, "fillTriangleB", 
			    ($fz = function (useGouraud) {
				if (this.az[0] <= 1 || this.az[1] <= 1 || this.az[2] <= 1) return;
				var cc0 = this.g3d.clipCode3 (this.ax[0], this.ay[0], this.az[0]);
				var cc1 = this.g3d.clipCode3 (this.ax[1], this.ay[1], this.az[1]);
				var cc2 = this.g3d.clipCode3 (this.ax[2], this.ay[2], this.az[2]);
				var isClipped = (cc0 | cc1 | cc2) != 0;
				if (isClipped) {
				    if ((cc0 & cc1 & cc2) != 0) {
					return;
				    }}var iMinY = 0;
				if (this.ay[1] < this.ay[iMinY]) iMinY = 1;
				if (this.ay[2] < this.ay[iMinY]) iMinY = 2;
				var iMidY = (iMinY + 1) % 3;
				var iMaxY = (iMinY + 2) % 3;
				if (this.ay[iMidY] > this.ay[iMaxY]) {
				    var t = iMidY;
				    iMidY = iMaxY;
				    iMaxY = t;
				}var yMin = this.ay[iMinY];
				var yMid = this.ay[iMidY];
				var yMax = this.ay[iMaxY];
				var nLines = yMax - yMin + 1;
				if (nLines > this.g3d.height * 3) return;
				if (nLines > this.axW.length) this.reallocRasterArrays (nLines);
				var gouraudW;
				var gouraudE;
				if (useGouraud) {
				    gouraudW = this.rgb16sW;
				    gouraudE = this.rgb16sE;
				} else {
				    gouraudW = gouraudE = null;
				}var dyMidMin = yMid - yMin;
				if (dyMidMin == 0) {
				    if (this.ax[iMidY] < this.ax[iMinY]) {
					var t = iMidY;
					iMidY = iMinY;
					iMinY = t;
				    }this.generateRaster (nLines, iMinY, iMaxY, this.axW, this.azW, 0, gouraudW);
				    this.generateRaster (nLines, iMidY, iMaxY, this.axE, this.azE, 0, gouraudE);
				} else if (yMid == yMax) {
				    if (this.ax[iMaxY] < this.ax[iMidY]) {
					var t = iMidY;
					iMidY = iMaxY;
					iMaxY = t;
				    }this.generateRaster (nLines, iMinY, iMidY, this.axW, this.azW, 0, gouraudW);
				    this.generateRaster (nLines, iMinY, iMaxY, this.axE, this.azE, 0, gouraudE);
				} else {
				    var dxMaxMin = this.ax[iMaxY] - this.ax[iMinY];
				    var roundFactor;
				    roundFactor = org.jmol.util.GData.roundInt (Clazz.doubleToInt (nLines / 2));
				    if (dxMaxMin < 0) roundFactor = -roundFactor;
				    var axSplit = this.ax[iMinY] + Clazz.doubleToInt ((dxMaxMin * dyMidMin + roundFactor) / nLines);
				    if (axSplit < this.ax[iMidY]) {
					this.generateRaster (nLines, iMinY, iMaxY, this.axW, this.azW, 0, gouraudW);
					this.generateRaster (dyMidMin + 1, iMinY, iMidY, this.axE, this.azE, 0, gouraudE);
					this.generateRaster (nLines - dyMidMin, iMidY, iMaxY, this.axE, this.azE, dyMidMin, gouraudE);
				    } else {
					this.generateRaster (dyMidMin + 1, iMinY, iMidY, this.axW, this.azW, 0, gouraudW);
					this.generateRaster (nLines - dyMidMin, iMidY, iMaxY, this.axW, this.azW, dyMidMin, gouraudW);
					this.generateRaster (nLines, iMinY, iMaxY, this.axE, this.azE, 0, gouraudE);
				    }}this.g3d.setZMargin (5);
				if (useGouraud) this.fillRasterG (yMin, nLines, isClipped, this.g3d.$isPass2 ? 1 : 0);
				else this.fillRaster (yMin, nLines, isClipped, this.g3d.$isPass2 ? 1 : 0);
				this.g3d.setZMargin (0);
			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "reallocRasterArrays", 
			    ($fz = function (n) {
				n = (n + 31) & -32;
				this.axW =  Clazz.newIntArray (n, 0);
				this.azW =  Clazz.newIntArray (n, 0);
				this.axE =  Clazz.newIntArray (n, 0);
				this.azE =  Clazz.newIntArray (n, 0);
				this.rgb16sW = this.reallocRgb16s (this.rgb16sW, n);
				this.rgb16sE = this.reallocRgb16s (this.rgb16sE, n);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "generateRaster", 
			    ($fz = function (dy, iN, iS, axRaster, azRaster, iRaster, gouraud) {
				var xN = this.ax[iN];
				var zN = this.az[iN];
				var xS = this.ax[iS];
				var zS = this.az[iS];
				var dx = xS - xN;
				var dz = zS - zN;
				var xCurrent = xN;
				var xIncrement;
				var width;
				var errorTerm;
				if (dx >= 0) {
				    xIncrement = 1;
				    width = dx;
				    errorTerm = 0;
				} else {
				    xIncrement = -1;
				    width = -dx;
				    errorTerm = -dy + 1;
				}var zCurrentScaled = (zN << 10) + (512);
				var roundingFactor;
				roundingFactor = org.jmol.util.GData.roundInt (Clazz.doubleToInt (dy / 2));
				if (dz < 0) roundingFactor = -roundingFactor;
				var zIncrementScaled = Clazz.doubleToInt (((dz << 10) + roundingFactor) / dy);
				var xMajorIncrement;
				var xMajorError;
				if (dy >= width) {
				    xMajorIncrement = 0;
				    xMajorError = width;
				} else {
				    xMajorIncrement = org.jmol.util.GData.roundInt (Clazz.doubleToInt (dx / dy));
				    xMajorError = width % dy;
				}for (var y = 0, i = iRaster; y < dy; zCurrentScaled += zIncrementScaled, ++i, ++y) {
				    axRaster[i] = xCurrent;
				    azRaster[i] = zCurrentScaled >> 10;
				    xCurrent += xMajorIncrement;
				    errorTerm += xMajorError;
				    if (errorTerm > 0) {
					xCurrent += xIncrement;
					errorTerm -= dy;
				    }}
				if (gouraud != null) {
				    var rgb16Base = this.rgb16t1;
				    rgb16Base.setRgb (this.rgb16sGouraud[iN]);
				    var rgb16Increment = this.rgb16t2;
				    rgb16Increment.diffDiv (this.rgb16sGouraud[iS], rgb16Base, dy);
				    for (var i = iRaster, iMax = iRaster + dy; i < iMax; ++i) gouraud[i].setAndIncrement (rgb16Base, rgb16Increment);

				}}, $fz.isPrivate = true, $fz), "~N,~N,~N,~A,~A,~N,~A");
	Clazz.defineMethod (c$, "fillRaster", 
			    ($fz = function (y, numLines, isClipped, correction) {
				var i = 0;
				if (y < 0) {
				    numLines += y;
				    i -= y;
				    y = 0;
				}if (y + numLines > this.g3d.height) numLines = this.g3d.height - y;
				if (isClipped) {
				    for (; --numLines >= correction; ++y, ++i) {
					var xW = this.axW[i];
					var pixelCount = this.axE[i] - xW + 1 - correction;
					if (pixelCount > 0) this.g3d.plotPixelsClippedRaster (pixelCount, xW, y, this.azW[i], this.azE[i], null, null);
				    }
				} else {
				    var xW;
				    for (; --numLines >= correction; ++y, ++i) {
					var pixelCount = this.axE[i] - (xW = this.axW[i]) + 1 - correction;
					if (correction == 1 && pixelCount < 0) {
					    pixelCount = 1;
					    xW--;
					}if (pixelCount > 0) this.g3d.plotPixelsUnclippedRaster (pixelCount, xW, y, this.azW[i], this.azE[i], null, null);
				    }
				}}, $fz.isPrivate = true, $fz), "~N,~N,~B,~N");
	Clazz.defineMethod (c$, "fillRasterG", 
			    ($fz = function (y, numLines, isClipped, correction) {
				var i = 0;
				if (y < 0) {
				    numLines += y;
				    i -= y;
				    y = 0;
				}if (y + numLines > this.g3d.height) numLines = this.g3d.height - y;
				if (isClipped) {
				    for (; --numLines >= correction; ++y, ++i) {
					var xW = this.axW[i];
					var pixelCount = this.axE[i] - xW + 1 - correction;
					if (pixelCount > 0) this.g3d.plotPixelsClippedRaster (pixelCount, xW, y, this.azW[i], this.azE[i], this.rgb16sW[i], this.rgb16sE[i]);
				    }
				} else {
				    var xW;
				    for (; --numLines >= correction; ++y, ++i) {
					var pixelCount = this.axE[i] - (xW = this.axW[i]) + 1 - correction;
					if (correction == 1 && pixelCount < 0) {
					    pixelCount = 1;
					    xW--;
					}if (pixelCount > 0) this.g3d.plotPixelsUnclippedRaster (pixelCount, xW, y, this.azW[i], this.azE[i], this.rgb16sW[i], this.rgb16sE[i]);
				    }
				}}, $fz.isPrivate = true, $fz), "~N,~N,~B,~N");
	Clazz.defineStatics (c$,
			     "DEFAULT", 64);
    });
    // 
    //// org\jmol\api\JmolRepaintInterface.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.api");
    Clazz.declareInterface (org.jmol.api, "JmolRepaintInterface");
    // 
    //// org\jmol\render\RepaintManager.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.render");
    Clazz.load (["org.jmol.api.JmolRepaintInterface", "org.jmol.util.BitSet"], "org.jmol.render.RepaintManager", ["org.jmol.util.Logger", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.viewer = null;
	    this.shapeManager = null;
	    this.renderers = null;
	    this.bsTranslucent = null;
	    this.holdRepaint = 0;
	    this.repaintPending = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.render, "RepaintManager", null, org.jmol.api.JmolRepaintInterface);
	Clazz.prepareFields (c$, function () {
	    this.bsTranslucent = org.jmol.util.BitSet.newN (35);
	});
	Clazz.makeConstructor (c$, 
			       function () {
			       });
	Clazz.overrideMethod (c$, "set", 
			      function (viewer, shapeManager) {
				  this.viewer = viewer;
				  this.shapeManager = shapeManager;
			      }, "org.jmol.viewer.Viewer,org.jmol.viewer.ShapeManager");
	Clazz.overrideMethod (c$, "isRepaintPending", 
			      function () {
				  return this.repaintPending;
			      });
	Clazz.overrideMethod (c$, "pushHoldRepaint", 
			      function () {
				  ++this.holdRepaint;
			      });
	Clazz.overrideMethod (c$, "popHoldRepaint", 
			      function (andRepaint) {
				  --this.holdRepaint;
				  if (this.holdRepaint <= 0) {
				      this.holdRepaint = 0;
				      if (andRepaint) {
					  this.repaintPending = true;
					  this.repaintNow ();
				      }}}, "~B");
	Clazz.overrideMethod (c$, "requestRepaintAndWait", 
			      function () {
				  {
				      if (typeof Jmol != "undefined" && Jmol._repaint)
					  Jmol._repaint(this.viewer.applet, false);
				      this.repaintDone();
				  }});
	Clazz.overrideMethod (c$, "repaintIfReady", 
			      function () {
				  if (this.repaintPending) return false;
				  this.repaintPending = true;
				  if (this.holdRepaint == 0) {
				      this.repaintNow ();
				  }return true;
			      });
	Clazz.defineMethod (c$, "repaintNow", 
			    ($fz = function () {
				if (!this.viewer.haveDisplay) return;
				{
				    if (typeof Jmol != "undefined" && Jmol._repaint)
					Jmol._repaint(this.viewer.applet,true);
				}}, $fz.isPrivate = true, $fz));
	Clazz.overrideMethod (c$, "repaintDone", 
			      function () {
				  this.repaintPending = false;
				  {
				  }});
	Clazz.overrideMethod (c$, "clear", 
			      function (iShape) {
				  if (this.renderers == null) return;
				  if (iShape >= 0) this.renderers[iShape] = null;
				  else for (var i = 0; i < 35; ++i) this.renderers[i] = null;

			      }, "~N");
	Clazz.defineMethod (c$, "getRenderer", 
			    ($fz = function (shapeID) {
				if (this.renderers[shapeID] != null) return this.renderers[shapeID];
				var className = org.jmol.viewer.JmolConstants.getShapeClassName (shapeID, true) + "Renderer";
				try {
				    var shapeClass = Class.forName (className);
				    var renderer = shapeClass.newInstance ();
				    renderer.setViewerG3dShapeID (this.viewer, shapeID);
				    return this.renderers[shapeID] = renderer;
				} catch (e) {
				    if (Clazz.exceptionOf (e, Exception)) {
					org.jmol.util.Logger.errorEx ("Could not instantiate renderer:" + className, e);
					return null;
				    } else {
					throw e;
				    }
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.overrideMethod (c$, "render", 
			      function (gdata, modelSet, isFirstPass, minMax) {
				  var logTime = this.viewer.getShowTiming ();
				  try {
				      var g3d = gdata;
				      g3d.renderBackground (null);
				      if (isFirstPass) {
					  this.bsTranslucent.clearAll ();
					  if (minMax != null) g3d.renderCrossHairs (minMax, this.viewer.getScreenWidth (), this.viewer.getScreenHeight (), this.viewer.getNavigationOffset (), this.viewer.getNavigationDepthPercent ());
					  var band = this.viewer.getRubberBandSelection ();
					  if (band != null && g3d.setColix (this.viewer.getColixRubberband ())) g3d.drawRect (band.x, band.y, 0, 0, band.width, band.height);
				      }if (this.renderers == null) this.renderers =  new Array (35);
				      var msg = null;
				      for (var i = 0; i < 35 && g3d.currentlyRendering (); ++i) {
					  var shape = this.shapeManager.getShape (i);
					  if (shape == null) continue;
					  if (logTime) {
					      msg = "rendering " + org.jmol.viewer.JmolConstants.getShapeClassName (i, false);
					      org.jmol.util.Logger.startTimer (msg);
					  }if ((isFirstPass || this.bsTranslucent.get (i)) && this.getRenderer (i).render (g3d, modelSet, shape)) this.bsTranslucent.set (i);
					  if (logTime) org.jmol.util.Logger.checkTimer (msg, false);
				      }
				      if (isFirstPass) g3d.renderAllStrings (null);
				  } catch (e) {
				      if (Clazz.exceptionOf (e, Exception)) {
					  System.out.println (e.getMessage ());
					  org.jmol.util.Logger.error ("rendering error? ");
				      } else {
					  throw e;
				      }
				  }
			      }, "org.jmol.util.GData,org.jmol.modelset.ModelSet,~B,~A");
	Clazz.overrideMethod (c$, "renderExport", 
			      function (type, gdata, modelSet, fileName) {
				  var isOK;
				  var logTime = this.viewer.getShowTiming ();
				  this.viewer.finalizeTransformParameters ();
				  this.shapeManager.finalizeAtoms (null, null);
				  this.shapeManager.transformAtoms ();
				  var g3dExport = this.viewer.initializeExporter (type, fileName);
				  isOK = (g3dExport != null);
				  if (!isOK) {
				      org.jmol.util.Logger.error ("Cannot export " + type);
				      return null;
				  }g3dExport.renderBackground (g3dExport);
				  if (this.renderers == null) this.renderers =  new Array (35);
				  var msg = null;
				  for (var i = 0; i < 35; ++i) {
				      var shape = this.shapeManager.getShape (i);
				      if (shape == null) continue;
				      if (logTime) {
					  msg = "rendering " + org.jmol.viewer.JmolConstants.getShapeClassName (i, false);
					  org.jmol.util.Logger.startTimer (msg);
				      }this.getRenderer (i).render (g3dExport, modelSet, shape);
				      if (logTime) org.jmol.util.Logger.checkTimer (msg, false);
				  }
				  g3dExport.renderAllStrings (g3dExport);
				  return g3dExport.finalizeOutput ();
			      }, "~S,org.jmol.util.GData,org.jmol.modelset.ModelSet,~S");
    });
    // 
    //// org\jmol\shape\AtomShape.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.Shape"], "org.jmol.shape.AtomShape", ["java.util.Hashtable", "org.jmol.atomdata.RadiusData", "org.jmol.constant.EnumPalette", "org.jmol.util.ArrayUtil", "$.BitSet", "$.BitSetUtil", "$.Colix", "org.jmol.viewer.JmolConstants"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.mads = null;
	    this.colixes = null;
	    this.paletteIDs = null;
	    this.bsSizeSet = null;
	    this.bsColixSet = null;
	    this.atomCount = 0;
	    this.atoms = null;
	    this.isActive = false;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "AtomShape", org.jmol.shape.Shape);
	Clazz.overrideMethod (c$, "initModelSet", 
			      function () {
				  this.atoms = this.modelSet.atoms;
				  this.atomCount = this.modelSet.getAtomCount ();
				  if (this.mads != null) this.mads = org.jmol.util.ArrayUtil.arrayCopyShort (this.mads, this.atomCount);
				  if (this.colixes != null) this.colixes = org.jmol.util.ArrayUtil.arrayCopyShort (this.colixes, this.atomCount);
				  if (this.paletteIDs != null) this.paletteIDs = org.jmol.util.ArrayUtil.arrayCopyByte (this.paletteIDs, this.atomCount);
			      });
	Clazz.defineMethod (c$, "getSize", 
			    function (atomIndex) {
				return (this.mads == null ? 0 : this.mads[atomIndex]);
			    }, "~N");
	Clazz.overrideMethod (c$, "setSize", 
			      function (size, bsSelected) {
				  if (size == 0) this.setSizeRD (null, bsSelected);
				  else this.setSizeRD ( new org.jmol.atomdata.RadiusData (null, size, org.jmol.atomdata.RadiusData.EnumType.SCREEN, null), bsSelected);
			      }, "~N,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "setSizeRD", 
			      function (rd, bsSelected) {
				  if (this.atoms == null) return;
				  this.isActive = true;
				  if (this.bsSizeSet == null) this.bsSizeSet =  new org.jmol.util.BitSet ();
				  var isVisible = (rd != null && rd.value != 0);
				  var isAll = (bsSelected == null);
				  var i0 = (isAll ? this.atomCount - 1 : bsSelected.nextSetBit (0));
				  if (this.mads == null && i0 >= 0) this.mads =  Clazz.newShortArray (this.atomCount, 0);
				  for (var i = i0; i >= 0; i = (isAll ? i - 1 : bsSelected.nextSetBit (i + 1))) {
				      var atom = this.atoms[i];
				      this.mads[i] = atom.calculateMad (this.viewer, rd);
				      this.bsSizeSet.setBitTo (i, isVisible);
				      atom.setShapeVisibility (this.myVisibilityFlag, isVisible);
				  }
			      }, "org.jmol.atomdata.RadiusData,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setProperty", 
			    function (propertyName, value, bs) {
				if ("color" === propertyName) {
				    this.isActive = true;
				    var colix = org.jmol.util.Colix.getColixO (value);
				    var pid = org.jmol.constant.EnumPalette.pidOf (value);
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) this.setColixAndPalette (colix, pid, i);

				    return;
				}if ("translucency" === propertyName) {
				    this.isActive = true;
				    var isTranslucent = (value.equals ("translucent"));
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					if (this.colixes == null) {
					    this.colixes =  Clazz.newShortArray (this.atomCount, 0);
					    this.paletteIDs =  Clazz.newByteArray (this.atomCount, 0);
					}this.colixes[i] = org.jmol.util.Colix.getColixTranslucent3 (this.colixes[i], isTranslucent, this.translucentLevel);
					if (isTranslucent) this.bsColixSet.set (i);
				    }
				    return;
				}if (propertyName === "deleteModelAtoms") {
				    this.atoms = (value)[1];
				    var info = (value)[2];
				    this.atomCount = this.modelSet.getAtomCount ();
				    var firstAtomDeleted = info[1];
				    var nAtomsDeleted = info[2];
				    this.mads = org.jmol.util.ArrayUtil.deleteElements (this.mads, firstAtomDeleted, nAtomsDeleted);
				    this.colixes = org.jmol.util.ArrayUtil.deleteElements (this.colixes, firstAtomDeleted, nAtomsDeleted);
				    this.paletteIDs = org.jmol.util.ArrayUtil.deleteElements (this.paletteIDs, firstAtomDeleted, nAtomsDeleted);
				    org.jmol.util.BitSetUtil.deleteBits (this.bsSizeSet, bs);
				    org.jmol.util.BitSetUtil.deleteBits (this.bsColixSet, bs);
				    return;
				}Clazz.superCall (this, org.jmol.shape.AtomShape, "setProperty", [propertyName, value, bs]);
			    }, "~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setColixAndPalette", 
			    function (colix, paletteID, atomIndex) {
				if (this.colixes == null || atomIndex >= this.colixes.length) {
				    if (colix == 0) return;
				    this.colixes = org.jmol.util.ArrayUtil.ensureLengthShort (this.colixes, atomIndex + 1);
				    this.paletteIDs = org.jmol.util.ArrayUtil.ensureLengthByte (this.paletteIDs, atomIndex + 1);
				}if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				this.colixes[atomIndex] = colix = this.setColix (colix, paletteID, atomIndex);
				this.bsColixSet.setBitTo (atomIndex, colix != 0);
				this.paletteIDs[atomIndex] = paletteID;
			    }, "~N,~N,~N");
	Clazz.overrideMethod (c$, "setModelClickability", 
			      function () {
				  if (!this.isActive) return;
				  for (var i = this.atomCount; --i >= 0; ) {
				      var atom = this.atoms[i];
				      if ((atom.getShapeVisibilityFlags () & this.myVisibilityFlag) == 0 || this.modelSet.isAtomHidden (i)) continue;
				      atom.setClickable (this.myVisibilityFlag);
				  }
			      });
	Clazz.overrideMethod (c$, "getShapeState", 
			      function () {
				  if (!this.isActive) return "";
				  var temp =  new java.util.Hashtable ();
				  var temp2 =  new java.util.Hashtable ();
				  var type = org.jmol.viewer.JmolConstants.shapeClassBases[this.shapeID];
				  if (this.bsSizeSet != null) for (var i = this.bsSizeSet.nextSetBit (0); i >= 0; i = this.bsSizeSet.nextSetBit (i + 1)) org.jmol.shape.Shape.setStateInfo (temp, i, type + (this.mads[i] < 0 ? " on" : " " + this.mads[i] / 2000));

				  if (this.bsColixSet != null) for (var i = this.bsColixSet.nextSetBit (0); i >= 0; i = this.bsColixSet.nextSetBit (i + 1)) org.jmol.shape.Shape.setStateInfo (temp2, i, this.getColorCommand (type, this.paletteIDs[i], this.colixes[i]));

				  return org.jmol.shape.Shape.getShapeCommands (temp, temp2);
			      });
    });
    // 
    //// org\jmol\shape\Balls.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.AtomShape"], "org.jmol.shape.Balls", ["java.util.Hashtable", "org.jmol.constant.EnumPalette", "org.jmol.util.BitSet", "$.Colix"], function () {
	c$ = Clazz.declareType (org.jmol.shape, "Balls", org.jmol.shape.AtomShape);
	Clazz.overrideMethod (c$, "setSizeRD", 
			      function (rd, bsSelected) {
				  this.isActive = true;
				  if (this.bsSizeSet == null) this.bsSizeSet =  new org.jmol.util.BitSet ();
				  var bsLength = Math.min (this.atoms.length, bsSelected.length ());
				  for (var i = bsSelected.nextSetBit (0); i >= 0 && i < bsLength; i = bsSelected.nextSetBit (i + 1)) {
				      var atom = this.atoms[i];
				      atom.setMadAtom (this.viewer, rd);
				      this.bsSizeSet.set (i);
				  }
			      }, "org.jmol.atomdata.RadiusData,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setProperty", 
			    function (propertyName, value, bs) {
				if ("color" === propertyName) {
				    var colix = org.jmol.util.Colix.getColixO (value);
				    if (colix == 0) colix = 2;
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    var pid = org.jmol.constant.EnumPalette.pidOf (value);
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					var atom = this.atoms[i];
					atom.setColixAtom (this.setColix (colix, pid, atom));
					this.bsColixSet.setBitTo (i, colix != 2 || pid != org.jmol.constant.EnumPalette.NONE.id);
					atom.setPaletteID (pid);
				    }
				    return;
				}if ("colorValues" === propertyName) {
				    var values = value;
				    if (values.length == 0) return;
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    var n = 0;
				    var color = null;
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					if (n >= values.length) return;
					color = Integer.$valueOf (values[n++]);
					var colix = org.jmol.util.Colix.getColixO (color);
					if (colix == 0) colix = 2;
					var pid = org.jmol.constant.EnumPalette.pidOf (color);
					var atom = this.atoms[i];
					atom.setColixAtom (this.setColix (colix, pid, atom));
					this.bsColixSet.setBitTo (i, colix != 2 || pid != org.jmol.constant.EnumPalette.NONE.id);
					atom.setPaletteID (pid);
				    }
				    return;
				}if ("translucency" === propertyName) {
				    var isTranslucent = ((value).equals ("translucent"));
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) {
					this.atoms[i].setTranslucent (isTranslucent, this.translucentLevel);
					if (isTranslucent) this.bsColixSet.set (i);
				    }
				    return;
				}Clazz.superCall (this, org.jmol.shape.Balls, "setProperty", [propertyName, value, bs]);
			    }, "~S,~O,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "setModelClickability", 
			      function () {
				  var bsDeleted = this.viewer.getDeletedAtoms ();
				  for (var i = this.atomCount; --i >= 0; ) {
				      var atom = this.atoms[i];
				      atom.setClickable (0);
				      if (bsDeleted != null && bsDeleted.get (i) || (atom.getShapeVisibilityFlags () & this.myVisibilityFlag) == 0 || this.modelSet.isAtomHidden (i)) continue;
				      atom.setClickable (this.myVisibilityFlag);
				  }
			      });
	Clazz.overrideMethod (c$, "setVisibilityFlags", 
			      function (bs) {
				  var showHydrogens = this.viewer.getShowHydrogens ();
				  var bsDeleted = this.viewer.getDeletedAtoms ();
				  for (var i = this.atomCount; --i >= 0; ) {
				      var atom = this.atoms[i];
				      var flag = atom.getShapeVisibilityFlags ();
				      flag &= (-2 & ~this.myVisibilityFlag);
				      atom.setShapeVisibilityFlags (flag);
				      if (bsDeleted != null && bsDeleted.get (i) || !showHydrogens && atom.getElementNumber () == 1) continue;
				      var modelIndex = atom.getModelIndex ();
				      if (bs.get (modelIndex)) {
					  atom.setShapeVisibility (1, true);
					  if (atom.madAtom != 0 && !this.modelSet.isAtomHidden (i)) atom.setShapeVisibility (this.myVisibilityFlag, true);
				      }}
			      }, "org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getShapeState", 
			      function () {
				  var temp =  new java.util.Hashtable ();
				  var r = 0;
				  for (var i = 0; i < this.atomCount; i++) {
				      if (this.bsSizeSet != null && this.bsSizeSet.get (i)) {
					  if ((r = this.atoms[i].madAtom) < 0) org.jmol.shape.Shape.setStateInfo (temp, i, "Spacefill on");
					  else org.jmol.shape.Shape.setStateInfo (temp, i, "Spacefill " + (r / 2000));
				      }if (this.bsColixSet != null && this.bsColixSet.get (i)) {
					  var pid = this.atoms[i].getPaletteID ();
					  if (pid != org.jmol.constant.EnumPalette.CPK.id || this.atoms[i].isTranslucent ()) org.jmol.shape.Shape.setStateInfo (temp, i, this.getColorCommand ("atoms", pid, this.atoms[i].getColix ()));
				      }}
				  return org.jmol.shape.Shape.getShapeCommands (temp, null);
			      });
    });
    // 
    //// org\jmol\shape\Sticks.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.Shape", "org.jmol.util.Point3i"], "org.jmol.shape.Sticks", ["java.util.Hashtable", "org.jmol.constant.EnumPalette", "org.jmol.util.BitSet", "$.BitSetUtil", "$.Colix", "$.Escape", "$.JmolEdge", "$.Point3f"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.myMask = 0;
	    this.reportAll = false;
	    this.bsOrderSet = null;
	    this.bsSizeSet = null;
	    this.bsColixSet = null;
	    this.selectedBonds = null;
	    this.ptXY = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "Sticks", org.jmol.shape.Shape);
	Clazz.prepareFields (c$, function () {
	    this.ptXY =  new org.jmol.util.Point3i ();
	});
	Clazz.defineMethod (c$, "initShape", 
			    function () {
				Clazz.superCall (this, org.jmol.shape.Sticks, "initShape", []);
				this.myMask = 1023;
				this.reportAll = false;
			    });
	Clazz.overrideMethod (c$, "setSize", 
			      function (size, bsSelected) {
				  if (size == 2147483647) {
				      this.selectedBonds = org.jmol.util.BitSetUtil.copy (bsSelected);
				      return;
				  }if (size == -2147483648) {
				      if (this.bsOrderSet == null) this.bsOrderSet =  new org.jmol.util.BitSet ();
				      this.bsOrderSet.or (bsSelected);
				      return;
				  }if (this.bsSizeSet == null) this.bsSizeSet =  new org.jmol.util.BitSet ();
				  var iter = (this.selectedBonds != null ? this.modelSet.getBondIterator (this.selectedBonds) : this.modelSet.getBondIteratorForType (this.myMask, bsSelected));
				  var mad = size;
				  while (iter.hasNext ()) {
				      this.bsSizeSet.set (iter.nextIndex ());
				      iter.next ().setMad (mad);
				  }
			      }, "~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setProperty", 
			    function (propertyName, value, bs) {
				if ("type" === propertyName) {
				    this.myMask = (value).intValue ();
				    return;
				}if ("reportAll" === propertyName) {
				    this.reportAll = true;
				    return;
				}if ("reset" === propertyName) {
				    this.bsOrderSet = null;
				    this.bsSizeSet = null;
				    this.bsColixSet = null;
				    this.selectedBonds = null;
				    return;
				}if ("bondOrder" === propertyName) {
				    if (this.bsOrderSet == null) this.bsOrderSet =  new org.jmol.util.BitSet ();
				    var order = (value).shortValue ();
				    var iter = (this.selectedBonds != null ? this.modelSet.getBondIterator (this.selectedBonds) : this.modelSet.getBondIteratorForType (65535, bs));
				    while (iter.hasNext ()) {
					this.bsOrderSet.set (iter.nextIndex ());
					iter.next ().setOrder (order);
				    }
				    return;
				}if ("color" === propertyName) {
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    var colix = org.jmol.util.Colix.getColixO (value);
				    var pal = (Clazz.instanceOf (value, org.jmol.constant.EnumPalette) ? value : null);
				    if (pal === org.jmol.constant.EnumPalette.TYPE || pal === org.jmol.constant.EnumPalette.ENERGY) {
					var isEnergy = (pal === org.jmol.constant.EnumPalette.ENERGY);
					var iter = (this.selectedBonds != null ? this.modelSet.getBondIterator (this.selectedBonds) : this.modelSet.getBondIteratorForType (this.myMask, bs));
					while (iter.hasNext ()) {
					    this.bsColixSet.set (iter.nextIndex ());
					    var bond = iter.next ();
					    if (isEnergy) {
						bond.setColix (this.setColix (colix, pal.id, bond));
						bond.setPaletteID (pal.id);
					    } else {
						bond.setColix (org.jmol.util.Colix.getColix (org.jmol.util.JmolEdge.getArgbHbondType (bond.order)));
					    }}
					return;
				    }if (colix == 2 && pal !== org.jmol.constant.EnumPalette.CPK) return;
				    var iter = (this.selectedBonds != null ? this.modelSet.getBondIterator (this.selectedBonds) : this.modelSet.getBondIteratorForType (this.myMask, bs));
				    while (iter.hasNext ()) {
					var iBond = iter.nextIndex ();
					var bond = iter.next ();
					bond.setColix (colix);
					this.bsColixSet.setBitTo (iBond, (colix != 0 && colix != 2));
				    }
				    return;
				}if ("translucency" === propertyName) {
				    if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				    var isTranslucent = ((value).equals ("translucent"));
				    var iter = (this.selectedBonds != null ? this.modelSet.getBondIterator (this.selectedBonds) : this.modelSet.getBondIteratorForType (this.myMask, bs));
				    while (iter.hasNext ()) {
					this.bsColixSet.set (iter.nextIndex ());
					iter.next ().setTranslucent (isTranslucent, this.translucentLevel);
				    }
				    return;
				}if ("deleteModelAtoms" === propertyName) {
				    return;
				}Clazz.superCall (this, org.jmol.shape.Sticks, "setProperty", [propertyName, value, bs]);
			    }, "~S,~O,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getProperty", 
			      function (property, index) {
				  if (property.equals ("selectionState")) return (this.selectedBonds != null ? "select BONDS " + org.jmol.util.Escape.escape (this.selectedBonds) + "\n" : "");
				  if (property.equals ("sets")) return [this.bsOrderSet, this.bsSizeSet, this.bsColixSet];
				  return null;
			      }, "~S,~N");
	Clazz.overrideMethod (c$, "setModelClickability", 
			      function () {
				  var bonds = this.modelSet.getBonds ();
				  for (var i = this.modelSet.getBondCount (); --i >= 0; ) {
				      var bond = bonds[i];
				      if ((bond.getShapeVisibilityFlags () & this.myVisibilityFlag) == 0 || this.modelSet.isAtomHidden (bond.getAtomIndex1 ()) || this.modelSet.isAtomHidden (bond.getAtomIndex2 ())) continue;
				      bond.getAtom1 ().setClickable (this.myVisibilityFlag);
				      bond.getAtom2 ().setClickable (this.myVisibilityFlag);
				  }
			      });
	Clazz.overrideMethod (c$, "getShapeState", 
			      function () {
				  var temp =  new java.util.Hashtable ();
				  var temp2 =  new java.util.Hashtable ();
				  var haveTainted = false;
				  var bonds = this.modelSet.getBonds ();
				  var r;
				  var bondCount = this.modelSet.getBondCount ();
				  if (this.reportAll || this.bsSizeSet != null) {
				      var i0 = (this.reportAll ? bondCount - 1 : this.bsSizeSet.nextSetBit (0));
				      for (var i = i0; i >= 0; i = (this.reportAll ? i - 1 : this.bsSizeSet.nextSetBit (i + 1))) org.jmol.shape.Shape.setStateInfo (temp, i, "wireframe " + ((r = bonds[i].getMad ()) == 1 ? "on" : "" + (r / 2000)));

				  }if (this.reportAll || this.bsOrderSet != null) {
				      var i0 = (this.reportAll ? bondCount - 1 : this.bsOrderSet.nextSetBit (0));
				      for (var i = i0; i >= 0; i = (this.reportAll ? i - 1 : this.bsOrderSet.nextSetBit (i + 1))) {
					  var bond = bonds[i];
					  if (this.reportAll || (bond.order & 131072) == 0) org.jmol.shape.Shape.setStateInfo (temp, i, "bondOrder " + org.jmol.util.JmolEdge.getBondOrderNameFromOrder (bond.order));
				      }
				  }if (this.bsColixSet != null) for (var i = this.bsColixSet.nextSetBit (0); i >= 0; i = this.bsColixSet.nextSetBit (i + 1)) {
				      var colix = bonds[i].getColix ();
				      if ((colix & -30721) == 2) org.jmol.shape.Shape.setStateInfo (temp, i, this.getColorCommand ("bonds", org.jmol.constant.EnumPalette.CPK.id, colix));
				      else org.jmol.shape.Shape.setStateInfo (temp, i, this.getColorCommandUnk ("bonds", colix));
				  }
				  return org.jmol.shape.Shape.getShapeCommandsSel (temp, null, "select BONDS") + "\n" + (haveTainted ? org.jmol.shape.Shape.getShapeCommandsSel (temp2, null, "select BONDS") + "\n" : "");
			      });
	Clazz.overrideMethod (c$, "checkObjectHovered", 
			      function (x, y, bsVisible) {
				  var pt =  new org.jmol.util.Point3f ();
				  var bond = this.findPickedBond (x, y, bsVisible, pt);
				  if (bond == null) return false;
				  this.viewer.highlightBond (bond.index, true);
				  return true;
			      }, "~N,~N,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "checkObjectClicked", 
			      function (x, y, modifiers, bsVisible) {
				  var pt =  new org.jmol.util.Point3f ();
				  var bond = this.findPickedBond (x, y, bsVisible, pt);
				  if (bond == null) return null;
				  var modelIndex = bond.getAtom1 ().modelIndex;
				  var info = bond.getIdentity ();
				  var map =  new java.util.Hashtable ();
				  map.put ("pt", pt);
				  map.put ("index", Integer.$valueOf (bond.index));
				  map.put ("modelIndex", Integer.$valueOf (modelIndex));
				  map.put ("model", this.viewer.getModelNumberDotted (modelIndex));
				  map.put ("type", "bond");
				  map.put ("info", info);
				  this.viewer.setStatusAtomPicked (-3, "[\"bond\",\"" + bond.getIdentity () + "\"," + pt.x + "," + pt.y + "," + pt.z + "]");
				  return map;
			      }, "~N,~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "findPickedBond", 
			    ($fz = function (x, y, bsVisible, pt) {
				var dmin2 = 100;
				if (this.gdata.isAntialiased ()) {
				    x <<= 1;
				    y <<= 1;
				    dmin2 <<= 1;
				}var pickedBond = null;
				var v =  new org.jmol.util.Point3f ();
				var bonds = this.modelSet.getBonds ();
				for (var i = this.modelSet.getBondCount (); --i >= 0; ) {
				    var bond = bonds[i];
				    if (bond.getShapeVisibilityFlags () == 0) continue;
				    var atom1 = bond.getAtom1 ();
				    var atom2 = bond.getAtom2 ();
				    if (!atom1.isVisible (0) || !atom2.isVisible (0)) continue;
				    v.setT (atom1);
				    v.add (atom2);
				    v.scale (0.5);
				    var d2 = this.coordinateInRange (x, y, v, dmin2, this.ptXY);
				    if (d2 >= 0) {
					var f = 1 * (this.ptXY.x - atom1.screenX) / (atom2.screenX - atom1.screenX);
					if (f < 0.4 || f > 0.6) continue;
					dmin2 = d2;
					pickedBond = bond;
					pt.setT (v);
				    }}
				return pickedBond;
			    }, $fz.isPrivate = true, $fz), "~N,~N,org.jmol.util.BitSet,org.jmol.util.Point3f");
	Clazz.defineStatics (c$,
			     "MAX_BOND_CLICK_DISTANCE_SQUARED", 100);
    });
    // 
    //// org\jmol\shape\Measures.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.api.JmolMeasurementClient", "org.jmol.shape.Shape", "java.util.ArrayList"], "org.jmol.shape.Measures", ["java.lang.Float", "java.util.Hashtable", "org.jmol.modelset.Measurement", "$.MeasurementData", "org.jmol.shape.FontLineShape", "org.jmol.util.BitSet", "$.BitSetUtil", "$.Colix", "$.Escape", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.bsColixSet = null;
	    this.bsSelected = null;
	    this.strFormat = null;
	    this.mustBeConnected = false;
	    this.mustNotBeConnected = false;
	    this.radiusData = null;
	    this.intramolecular = null;
	    this.atoms = null;
	    this.measurementCount = 0;
	    this.measurements = null;
	    this.measurementPending = null;
	    this.mad = -1;
	    this.colix = 0;
	    this.font3d = null;
	    this.tickInfo = null;
	    this.defaultTickInfo = null;
	    this.tokAction = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "Measures", org.jmol.shape.Shape, org.jmol.api.JmolMeasurementClient);
	Clazz.prepareFields (c$, function () {
	    this.measurements =  new java.util.ArrayList ();
	});
	Clazz.overrideMethod (c$, "initModelSet", 
			      function () {
				  for (var i = this.measurements.size (); --i >= 0; ) {
				      var m = this.measurements.get (i);
				      if (m != null) m.modelSet = this.modelSet;
				  }
				  this.atoms = this.modelSet.atoms;
			      });
	Clazz.defineMethod (c$, "initShape", 
			    function () {
				Clazz.superCall (this, org.jmol.shape.Measures, "initShape", []);
				this.font3d = this.gdata.getFont3D (15);
			    });
	Clazz.overrideMethod (c$, "setSize", 
			      function (size, bsSelected) {
				  this.mad = size;
			      }, "~N,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "setProperty", 
			      function (propertyName, value, bsIgnored) {
				  var mt;
				  if ("clearModelIndex" === propertyName) {
				      for (var i = 0; i < this.measurementCount; i++) this.measurements.get (i).setModelIndex (0);

				      return;
				  }if ("color" === propertyName) {
				      this.setColor (value == null ? 0 : org.jmol.util.Colix.getColixO (value));
				      return;
				  }if ("delete" === propertyName) {
				      this.deleteO (value);
				      this.setIndices ();
				      return;
				  }if ("font" === propertyName) {
				      this.font3d = value;
				      return;
				  }if ("hideAll" === propertyName) {
				      this.showHide ((value).booleanValue ());
				      return;
				  }if ("pending" === propertyName) {
				      this.pending (value);
				      return;
				  }var isRefresh;
				  if ((isRefresh = ("refresh" === propertyName)) || "refreshTrajectories" === propertyName) {
				      for (var i = this.measurements.size (); --i >= 0; ) if ((mt = this.measurements.get (i)) != null && (isRefresh || mt.isTrajectory ())) mt.refresh ();

				      return;
				  }if ("select" === propertyName) {
				      var bs = value;
				      if (bs == null || org.jmol.util.BitSetUtil.cardinalityOf (bs) == 0) {
					  this.bsSelected = null;
				      } else {
					  this.bsSelected =  new org.jmol.util.BitSet ();
					  this.bsSelected.or (bs);
				      }return;
				  }if ("setFormats" === propertyName) {
				      this.setFormats (value);
				      return;
				  }this.bsSelected = null;
				  if ("maps" === propertyName) {
				      var maps = value;
				      for (var i = 0; i < maps.length; i++) {
					  var len = maps[i].length;
					  if (len < 2 || len > 4) continue;
					  var v =  Clazz.newIntArray (len + 1, 0);
					  v[0] = len;
					  System.arraycopy (maps[i], 0, v, 1, len);
					  this.toggleOn (v);
				      }
				  } else if ("measure" === propertyName) {
				      var md = value;
				      this.tickInfo = md.tickInfo;
				      if (md.tickInfo != null && md.tickInfo.id.equals ("default")) {
					  this.defaultTickInfo = md.tickInfo;
					  return;
				      }this.radiusData = md.radiusData;
				      this.mustBeConnected = md.mustBeConnected;
				      this.mustNotBeConnected = md.mustNotBeConnected;
				      this.intramolecular = md.intramolecular;
				      this.strFormat = md.strFormat;
				      if (md.isAll) {
					  if (this.tickInfo != null) this.define (md, 12291);
					  this.define (md, md.tokAction);
					  this.setIndices ();
					  return;
				      }var pt = this.setSingleItem (md.points);
				      switch (md.tokAction) {
				      case 12291:
					  this.defineAll (-2147483648, pt, true, false, false);
					  this.setIndices ();
					  break;
				      case 1048589:
					  this.showHideM (pt, false);
					  break;
				      case 1048588:
					  this.showHideM (pt, true);
					  break;
				      case 1060866:
					  this.deleteM (pt);
					  this.toggle (pt);
					  break;
				      case 269484114:
					  this.toggle (pt);
				      }
				      return;
				  }if ("clear" === propertyName) {
				      this.clear ();
				      return;
				  }if ("deleteModelAtoms" === propertyName) {
				      this.atoms = (value)[1];
				      var modelIndex = ((value)[2])[0];
				      var firstAtomDeleted = ((value)[2])[1];
				      var nAtomsDeleted = ((value)[2])[2];
				      var atomMax = firstAtomDeleted + nAtomsDeleted;
				      for (var i = this.measurementCount; --i >= 0; ) {
					  mt = this.measurements.get (i);
					  var indices = mt.getCountPlusIndices ();
					  for (var j = 1; j <= indices[0]; j++) {
					      var iAtom = indices[j];
					      if (iAtom >= firstAtomDeleted) {
						  if (iAtom < atomMax) {
						      this.deleteI (i);
						      break;
						  }indices[j] -= nAtomsDeleted;
					      } else if (iAtom < 0) {
						  var pt = mt.getAtom (j);
						  if (pt.modelIndex > modelIndex) {
						      pt.modelIndex--;
						  } else if (pt.modelIndex == modelIndex) {
						      this.deleteI (i);
						      break;
						  }}}
				      }
				      return;
				  }if ("hide" === propertyName) {
				      this.showHideM ( new org.jmol.modelset.Measurement (this.modelSet, value, null, null), true);
				      return;
				  }if ("reformatDistances" === propertyName) {
				      this.reformatDistances ();
				      return;
				  }if ("show" === propertyName) {
				      this.showHideM ( new org.jmol.modelset.Measurement (this.modelSet, value, null, null), false);
				      return;
				  }if ("toggle" === propertyName) {
				      this.toggle ( new org.jmol.modelset.Measurement (this.modelSet, value, null, null));
				      return;
				  }if ("toggleOn" === propertyName) {
				      this.toggleOn (value);
				      return;
				  }}, "~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "setSingleItem", 
			    ($fz = function (vector) {
				var points =  new Array (4);
				var indices =  Clazz.newIntArray (5, 0);
				indices[0] = vector.size ();
				for (var i = vector.size (); --i >= 0; ) {
				    var value = vector.get (i);
				    if (Clazz.instanceOf (value, org.jmol.util.BitSet)) {
					var atomIndex = (value).nextSetBit (0);
					if (atomIndex < 0) return null;
					indices[i + 1] = atomIndex;
				    } else {
					points[i] = value;
					indices[i + 1] = -2 - i;
				    }}
				return  new org.jmol.modelset.Measurement (this.modelSet, indices, points, this.tickInfo == null ? this.defaultTickInfo : this.tickInfo);
			    }, $fz.isPrivate = true, $fz), "java.util.List");
	Clazz.overrideMethod (c$, "getProperty", 
			      function (property, index) {
				  if ("pending".equals (property)) return this.measurementPending;
				  if ("count".equals (property)) return Integer.$valueOf (this.measurementCount);
				  if ("countPlusIndices".equals (property)) return (index < this.measurementCount ? this.measurements.get (index).getCountPlusIndices () : null);
				  if ("stringValue".equals (property)) return (index < this.measurementCount ? this.measurements.get (index).getString () : null);
				  if ("pointInfo".equals (property)) return this.measurements.get (Clazz.doubleToInt (index / 10)).getLabel (index % 10, false, false);
				  if ("info".equals (property)) return this.getAllInfo ();
				  if ("infostring".equals (property)) return this.getAllInfoAsString ();
				  return null;
			      }, "~S,~N");
	Clazz.defineMethod (c$, "clear", 
			    ($fz = function () {
				if (this.measurementCount == 0) return;
				this.measurementCount = 0;
				this.measurements.clear ();
				this.viewer.setStatusMeasuring ("measureDeleted", -1, "all", 0);
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "setColor", 
			    ($fz = function (colix) {
				if (this.bsColixSet == null) this.bsColixSet =  new org.jmol.util.BitSet ();
				if (this.bsSelected == null) this.colix = colix;
				var mt;
				for (var i = this.measurements.size (); --i >= 0; ) if ((mt = this.measurements.get (i)) != null && (this.bsSelected != null && this.bsSelected.get (i) || this.bsSelected == null && (colix == 0 || mt.getColix () == 0))) {
				    mt.setColix (colix);
				    this.bsColixSet.set (i);
				}
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setFormats", 
			    ($fz = function (format) {
				if (format != null && format.length == 0) format = null;
				for (var i = this.measurements.size (); --i >= 0; ) if (this.bsSelected == null || this.bsSelected.get (i)) this.measurements.get (i).formatMeasurementAs (format, null, false);

			    }, $fz.isPrivate = true, $fz), "~S");
	Clazz.defineMethod (c$, "showHide", 
			    ($fz = function (isHide) {
				for (var i = this.measurements.size (); --i >= 0; ) if (this.bsSelected == null || this.bsSelected.get (i)) this.measurements.get (i).setHidden (isHide);

			    }, $fz.isPrivate = true, $fz), "~B");
	Clazz.defineMethod (c$, "showHideM", 
			    ($fz = function (m, isHide) {
				var i = this.find (m);
				if (i >= 0) this.measurements.get (i).setHidden (isHide);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Measurement,~B");
	Clazz.defineMethod (c$, "toggle", 
			    ($fz = function (m) {
				this.radiusData = null;
				var i = this.find (m);
				var mt;
				if (i >= 0 && !(mt = this.measurements.get (i)).isHidden ()) this.defineAll (i, mt, true, false, false);
				else this.defineAll (-1, m, false, true, false);
				this.setIndices ();
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Measurement");
	Clazz.defineMethod (c$, "toggleOn", 
			    ($fz = function (indices) {
				this.radiusData = null;
				this.bsSelected =  new org.jmol.util.BitSet ();
				this.defineAll (-2147483648,  new org.jmol.modelset.Measurement (this.modelSet, indices, null, this.defaultTickInfo), false, true, true);
				this.setIndices ();
				this.reformatDistances ();
			    }, $fz.isPrivate = true, $fz), "~A");
	Clazz.defineMethod (c$, "deleteM", 
			    ($fz = function (m) {
				this.radiusData = null;
				var i = this.find (m);
				if (i >= 0) this.defineAll (i, this.measurements.get (i), true, false, false);
				this.setIndices ();
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Measurement");
	Clazz.defineMethod (c$, "deleteO", 
			    ($fz = function (value) {
				if ((Clazz.instanceOf (value, Integer))) {
				    this.deleteI ((value).intValue ());
				} else if (org.jmol.util.Escape.isAI (value)) {
				    this.defineAll (-2147483648,  new org.jmol.modelset.Measurement (this.modelSet, value, null, null), true, false, false);
				}}, $fz.isPrivate = true, $fz), "~O");
	Clazz.defineMethod (c$, "defineAll", 
			    ($fz = function (iPt, m, isDelete, isShow, doSelect) {
				if (!this.viewer.getMeasureAllModelsFlag ()) {
				    if (isDelete) {
					if (iPt == -2147483648) iPt = this.find (m);
					if (iPt >= 0) this.deleteI (iPt);
					return;
				    }this.defineMeasurement (iPt, m, doSelect);
				    return;
				}if (isShow) {
				    this.defineAll (iPt, m, true, false, false);
				    if (isDelete) return;
				}var points =  new java.util.ArrayList ();
				var nPoints = m.getCount ();
				for (var i = 1; i <= nPoints; i++) {
				    var atomIndex = m.getAtomIndex (i);
				    points.add (atomIndex >= 0 ? this.viewer.getAtomBits (1095763969, Integer.$valueOf (this.atoms[atomIndex].getAtomNumber ())) : m.getAtom (i));
				}
				var md =  new org.jmol.modelset.MeasurementData (this.viewer, points, this.tokAction, this.radiusData, this.strFormat, null, this.tickInfo, this.mustBeConnected, this.mustNotBeConnected, this.intramolecular, true);
				this.define (md, (isDelete ? 12291 : 1060866));
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.modelset.Measurement,~B,~B,~B");
	Clazz.defineMethod (c$, "find", 
			    ($fz = function (m) {
				return org.jmol.modelset.Measurement.find (this.measurements, m);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.Measurement");
	Clazz.defineMethod (c$, "setIndices", 
			    ($fz = function () {
				for (var i = 0; i < this.measurementCount; i++) this.measurements.get (i).setIndex (i);

			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "define", 
			    ($fz = function (md, tokAction) {
				this.tokAction = tokAction;
				md.define (this, this.modelSet);
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.MeasurementData,~N");
	Clazz.overrideMethod (c$, "processNextMeasure", 
			      function (m) {
				  var iThis = this.find (m);
				  if (iThis >= 0) {
				      if (this.tokAction == 12291) {
					  this.deleteI (iThis);
				      } else if (this.strFormat != null) {
					  this.measurements.get (iThis).formatMeasurementAs (this.strFormat, null, true);
				      } else {
					  this.measurements.get (iThis).setHidden (this.tokAction == 1048588);
				      }} else if (this.tokAction == 1060866 || this.tokAction == 269484114) {
					  m.tickInfo = (this.tickInfo == null ? this.defaultTickInfo : this.tickInfo);
					  this.defineMeasurement (-1, m, true);
				      }}, "org.jmol.modelset.Measurement");
	Clazz.defineMethod (c$, "defineMeasurement", 
			    ($fz = function (i, m, doSelect) {
				var value = m.getMeasurement ();
				if (this.radiusData != null && !m.isInRange (this.radiusData, value)) return;
				if (i == -2147483648) i = this.find (m);
				if (i >= 0) {
				    this.measurements.get (i).setHidden (false);
				    if (doSelect) this.bsSelected.set (i);
				    return;
				}var measureNew =  new org.jmol.modelset.Measurement (this.modelSet, m, value, this.colix, this.strFormat, this.measurementCount);
				this.measurements.add (measureNew);
				this.viewer.setStatusMeasuring ("measureCompleted", this.measurementCount++, measureNew.toVector (false).toString (), measureNew.getValue ());
			    }, $fz.isPrivate = true, $fz), "~N,org.jmol.modelset.Measurement,~B");
	Clazz.defineMethod (c$, "deleteI", 
			    ($fz = function (i) {
				var msg = this.measurements.get (i).toVector (true).toString ();
				this.measurements.remove (i);
				this.measurementCount--;
				this.viewer.setStatusMeasuring ("measureDeleted", i, msg, 0);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "pending", 
			    ($fz = function (measurementPending) {
				this.measurementPending = measurementPending;
				if (measurementPending == null) return;
				if (measurementPending.getCount () > 1) this.viewer.setStatusMeasuring ("measurePending", measurementPending.getCount (), measurementPending.toVector (false).toString (), measurementPending.getValue ());
			    }, $fz.isPrivate = true, $fz), "org.jmol.modelset.MeasurementPending");
	Clazz.defineMethod (c$, "reformatDistances", 
			    ($fz = function () {
				for (var i = this.measurementCount; --i >= 0; ) this.measurements.get (i).reformatDistanceIfSelected ();

			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getAllInfo", 
			    ($fz = function () {
				var info =  new java.util.ArrayList ();
				for (var i = 0; i < this.measurementCount; i++) {
				    info.add (this.getInfo (i));
				}
				return info;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getAllInfoAsString", 
			    ($fz = function () {
				var info = "Measurement Information";
				for (var i = 0; i < this.measurementCount; i++) {
				    info += "\n" + this.getInfoAsString (i);
				}
				return info;
			    }, $fz.isPrivate = true, $fz));
	Clazz.defineMethod (c$, "getInfo", 
			    ($fz = function (index) {
				var m = this.measurements.get (index);
				var count = m.getCount ();
				var info =  new java.util.Hashtable ();
				info.put ("index", Integer.$valueOf (index));
				info.put ("type", (count == 2 ? "distance" : count == 3 ? "angle" : "dihedral"));
				info.put ("strMeasurement", m.getString ());
				info.put ("count", Integer.$valueOf (count));
				info.put ("value",  new Float (m.getValue ()));
				var tickInfo = m.getTickInfo ();
				if (tickInfo != null) {
				    info.put ("ticks", tickInfo.ticks);
				    if (tickInfo.scale != null) info.put ("tickScale", tickInfo.scale);
				    if (tickInfo.tickLabelFormats != null) info.put ("tickLabelFormats", tickInfo.tickLabelFormats);
				    if (!Float.isNaN (tickInfo.first)) info.put ("tickStart",  new Float (tickInfo.first));
				}var atomsInfo =  new java.util.ArrayList ();
				for (var i = 1; i <= count; i++) {
				    var atomInfo =  new java.util.Hashtable ();
				    var atomIndex = m.getAtomIndex (i);
				    atomInfo.put ("_ipt", Integer.$valueOf (atomIndex));
				    atomInfo.put ("coord", org.jmol.util.Escape.escapePt (m.getAtom (i)));
				    atomInfo.put ("atomno", Integer.$valueOf (atomIndex < 0 ? -1 : this.atoms[atomIndex].getAtomNumber ()));
				    atomInfo.put ("info", (atomIndex < 0 ? "<point>" : this.atoms[atomIndex].getInfo ()));
				    atomsInfo.add (atomInfo);
				}
				info.put ("atoms", atomsInfo);
				return info;
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "getInfoAsString", 
			    ($fz = function (index) {
				return this.measurements.get (index).getInfoAsString (null);
			    }, $fz.isPrivate = true, $fz), "~N");
	Clazz.defineMethod (c$, "setVisibilityInfo", 
			    function () {
				var bsModels = this.viewer.getVisibleFramesBitSet ();
				out : for (var i = this.measurementCount; --i >= 0; ) {
				    var m = this.measurements.get (i);
				    m.setVisible (false);
				    if (this.mad == 0 || m.isHidden ()) continue;
				    for (var iAtom = m.getCount (); iAtom > 0; iAtom--) {
					var atomIndex = m.getAtomIndex (iAtom);
					if (atomIndex >= 0) {
					    if (!this.modelSet.atoms[atomIndex].isClickable ()) continue out;
					} else {
					    var modelIndex = m.getAtom (iAtom).modelIndex;
					    if (modelIndex >= 0 && !bsModels.get (modelIndex)) continue out;
					}}
				    m.setVisible (true);
				}
			    });
	Clazz.overrideMethod (c$, "getShapeState", 
			      function () {
				  var commands =  new org.jmol.util.StringXBuilder ();
				  org.jmol.shape.Shape.appendCmd (commands, "measures delete");
				  for (var i = 0; i < this.measurementCount; i++) org.jmol.shape.Shape.appendCmd (commands, this.getState (i));

				  org.jmol.shape.Shape.appendCmd (commands, "select *; set measures " + this.viewer.getMeasureDistanceUnits ());
				  org.jmol.shape.Shape.appendCmd (commands, org.jmol.shape.Shape.getFontCommand ("measures", this.font3d));
				  var nHidden = 0;
				  var temp =  new java.util.Hashtable ();
				  var bs = org.jmol.util.BitSetUtil.newBitSet (this.measurementCount);
				  for (var i = 0; i < this.measurementCount; i++) {
				      var m = this.measurements.get (i);
				      if (m.isHidden ()) {
					  nHidden++;
					  bs.set (i);
				      }if (this.bsColixSet != null && this.bsColixSet.get (i)) org.jmol.shape.Shape.setStateInfo (temp, i, this.getColorCommandUnk ("measure", m.getColix ()));
				      if (m.getStrFormat () != null) org.jmol.shape.Shape.setStateInfo (temp, i, "measure " + org.jmol.util.Escape.escapeStr (m.getStrFormat ()));
				  }
				  if (nHidden > 0) if (nHidden == this.measurementCount) org.jmol.shape.Shape.appendCmd (commands, "measures off; # lines and numbers off");
				  else for (var i = 0; i < this.measurementCount; i++) if (bs.get (i)) org.jmol.shape.Shape.setStateInfo (temp, i, "measure off");

				  if (this.defaultTickInfo != null) {
				      commands.append (" measure ");
				      org.jmol.shape.FontLineShape.addTickInfo (commands, this.defaultTickInfo, true);
				      commands.append (";\n");
				  }if (this.mad >= 0) commands.append (" set measurements " + (this.mad / 2000)).append (";\n");
				  var s = org.jmol.shape.Shape.getShapeCommandsSel (temp, null, "select measures");
				  if (s != null && s.length != 0) {
				      commands.append (s);
				      org.jmol.shape.Shape.appendCmd (commands, "select measures ({null})");
				  }return commands.toString ();
			      });
	Clazz.defineMethod (c$, "getState", 
			    ($fz = function (index) {
				var m = this.measurements.get (index);
				var count = m.getCount ();
				var sb =  new org.jmol.util.StringXBuilder ().append ("measure");
				var tickInfo = m.getTickInfo ();
				if (tickInfo != null) org.jmol.shape.FontLineShape.addTickInfo (sb, tickInfo, true);
				for (var i = 1; i <= count; i++) sb.append (" ").append (m.getLabel (i, true, true));

				sb.append ("; # " + this.getInfoAsString (index));
				return sb.toString ();
			    }, $fz.isPrivate = true, $fz), "~N");
    });
    // 
    //// org\jmol\shape\FontShape.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.Shape"], "org.jmol.shape.FontShape", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.font3d = null;
	    this.myType = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "FontShape", org.jmol.shape.Shape);
	Clazz.overrideMethod (c$, "initShape", 
			      function () {
				  this.translucentAllowed = false;
			      });
	Clazz.overrideMethod (c$, "setProperty", 
			      function (propertyName, value, bs) {
				  if ("font" === propertyName) {
				      this.font3d = value;
				      return;
				  }}, "~S,~O,org.jmol.util.BitSet");
	Clazz.overrideMethod (c$, "getShapeState", 
			      function () {
				  var s = this.viewer.getObjectState (this.myType);
				  var fcmd = org.jmol.shape.Shape.getFontCommand (this.myType, this.font3d);
				  if (fcmd.length > 0) fcmd = "  " + fcmd + ";\n";
				  return (s.length < 3 ? "" : s + fcmd);
			      });
    });
    // 
    //// org\jmol\shape\FontLineShape.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.FontShape"], "org.jmol.shape.FontLineShape", ["java.lang.Float", "org.jmol.util.Escape", "$.StringXBuilder"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.tickInfos = null;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "FontLineShape", org.jmol.shape.FontShape);
	Clazz.prepareFields (c$, function () {
	    this.tickInfos =  new Array (4);
	});
	Clazz.defineMethod (c$, "setProperty", 
			    function (propertyName, value, bs) {
				if ("tickInfo" === propertyName) {
				    var t = value;
				    if (t.ticks == null) {
					if (t.type.equals (" ")) this.tickInfos[0] = this.tickInfos[1] = this.tickInfos[2] = this.tickInfos[3] = null;
					else this.tickInfos["xyz".indexOf (t.type) + 1] = null;
					return;
				    }this.tickInfos["xyz".indexOf (t.type) + 1] = t;
				    return;
				}Clazz.superCall (this, org.jmol.shape.FontLineShape, "setProperty", [propertyName, value, bs]);
			    }, "~S,~O,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "getShapeState", 
			    function () {
				var s = Clazz.superCall (this, org.jmol.shape.FontLineShape, "getShapeState", []);
				if (this.tickInfos == null) return s;
				var sb =  new org.jmol.util.StringXBuilder ();
				sb.append (s);
				if (this.tickInfos[0] != null) this.appendTickInfo (sb, 0);
				if (this.tickInfos[1] != null) this.appendTickInfo (sb, 1);
				if (this.tickInfos[2] != null) this.appendTickInfo (sb, 2);
				if (this.tickInfos[3] != null) this.appendTickInfo (sb, 3);
				if (s.indexOf (" off") >= 0) sb.append ("  " + this.myType + " off;\n");
				return sb.toString ();
			    });
	Clazz.defineMethod (c$, "appendTickInfo", 
			    ($fz = function (sb, i) {
				sb.append ("  ");
				sb.append (this.myType);
				org.jmol.shape.FontLineShape.addTickInfo (sb, this.tickInfos[i], false);
				sb.append (";\n");
			    }, $fz.isPrivate = true, $fz), "org.jmol.util.StringXBuilder,~N");
	c$.addTickInfo = Clazz.defineMethod (c$, "addTickInfo", 
					     function (sb, tickInfo, addFirst) {
						 sb.append (" ticks ").append (tickInfo.type).append (" ").append (org.jmol.util.Escape.escapePt (tickInfo.ticks));
						 var isUnitCell = (tickInfo.scale != null && Float.isNaN (tickInfo.scale.x));
						 if (isUnitCell) sb.append (" UNITCELL");
						 if (tickInfo.tickLabelFormats != null) sb.append (" format ").append (org.jmol.util.Escape.escapeStrA (tickInfo.tickLabelFormats, false));
						 if (!isUnitCell && tickInfo.scale != null) sb.append (" scale ").append (org.jmol.util.Escape.escapePt (tickInfo.scale));
						 if (addFirst && !Float.isNaN (tickInfo.first) && tickInfo.first != 0) sb.append (" first ").appendF (tickInfo.first);
						 if (tickInfo.reference != null) sb.append (" point ").append (org.jmol.util.Escape.escapePt (tickInfo.reference));
					     }, "org.jmol.util.StringXBuilder,org.jmol.modelset.TickInfo,~B");
    });
    // 
    //// org\jmol\shape\Bbcage.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.FontLineShape"], "org.jmol.shape.Bbcage", null, function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.isVisible = false;
	    this.mad = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "Bbcage", org.jmol.shape.FontLineShape);
	Clazz.defineMethod (c$, "initShape", 
			    function () {
				Clazz.superCall (this, org.jmol.shape.Bbcage, "initShape", []);
				this.font3d = this.gdata.getFont3D (14);
				this.myType = "boundBox";
			    });
	Clazz.overrideMethod (c$, "setVisibilityFlags", 
			      function (bs) {
				  this.isVisible = ((this.mad = this.viewer.getObjectMad (4)) != 0);
				  if (!this.isVisible) return;
				  var bboxModels = this.viewer.getBoundBoxModels ();
				  if (bboxModels == null) return;
				  for (var i = bs.nextSetBit (0); i >= 0; i = bs.nextSetBit (i + 1)) if (bboxModels.get (i)) return;

				  this.isVisible = false;
			      }, "org.jmol.util.BitSet");
    });
    // 
    //// org\jmol\shape\Uccage.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.FontLineShape"], "org.jmol.shape.Uccage", null, function () {
	c$ = Clazz.declareType (org.jmol.shape, "Uccage", org.jmol.shape.FontLineShape);
	Clazz.defineMethod (c$, "getShapeState", 
			    function () {
				return (this.modelSet.haveUnitCells () ? Clazz.superCall (this, org.jmol.shape.Uccage, "getShapeState", []) : "");
			    });
	Clazz.defineMethod (c$, "initShape", 
			    function () {
				Clazz.superCall (this, org.jmol.shape.Uccage, "initShape", []);
				this.font3d = this.gdata.getFont3D (14);
				this.myType = "unitcell";
			    });
    });
    // 
    //// org\jmol\shape\Frank.js 
    // 
    ﻿Clazz.declarePackage ("org.jmol.shape");
    Clazz.load (["org.jmol.shape.FontShape"], "org.jmol.shape.Frank", ["org.jmol.i18n.GT"], function () {
	c$ = Clazz.decorateAsClass (function () {
	    this.frankString = "Jmol";
	    this.currentMetricsFont3d = null;
	    this.baseFont3d = null;
	    this.frankWidth = 0;
	    this.frankAscent = 0;
	    this.frankDescent = 0;
	    this.x = 0;
	    this.y = 0;
	    this.dx = 0;
	    this.dy = 0;
	    Clazz.instantialize (this, arguments);
	}, org.jmol.shape, "Frank", org.jmol.shape.FontShape);
	Clazz.defineMethod (c$, "initShape", 
			    function () {
				Clazz.superCall (this, org.jmol.shape.Frank, "initShape", []);
				this.myType = "frank";
				this.baseFont3d = this.font3d = this.gdata.getFont3DFSS ("SansSerif", "Plain", 16);
				this.calcMetrics ();
			    });
	Clazz.overrideMethod (c$, "wasClicked", 
			      function (x, y) {
				  var width = this.viewer.getScreenWidth ();
				  var height = this.viewer.getScreenHeight ();
				  return (width > 0 && height > 0 && x > width - this.frankWidth - 4 && y > height - this.frankAscent - 4);
			      }, "~N,~N");
	Clazz.overrideMethod (c$, "checkObjectHovered", 
			      function (x, y, bsVisible) {
				  if (!this.viewer.getShowFrank () || !this.wasClicked (x, y) || !this.viewer.menuEnabled ()) return false;
				  if (this.gdata.isDisplayAntialiased ()) {
				      x <<= 1;
				      y <<= 1;
				  }this.viewer.hoverOnPt (x, y, org.jmol.i18n.GT._ ("Click for menu..."), null, null);
				  return true;
			      }, "~N,~N,org.jmol.util.BitSet");
	Clazz.defineMethod (c$, "calcMetrics", 
			    function () {
				if (this.viewer.isJS2D || this.viewer.isJS3D) this.frankString = "JSmol";
				else if (this.viewer.isSignedApplet ()) this.frankString = "Jmol_S";
				if (this.font3d === this.currentMetricsFont3d) return;
				this.currentMetricsFont3d = this.font3d;
				this.frankWidth = this.font3d.stringWidth (this.frankString);
				this.frankDescent = this.font3d.getDescent ();
				this.frankAscent = this.font3d.getAscent ();
			    });
	Clazz.defineMethod (c$, "getFont", 
			    function (imageFontScaling) {
				this.font3d = this.gdata.getFont3DScaled (this.baseFont3d, imageFontScaling);
				this.calcMetrics ();
			    }, "~N");
	Clazz.defineStatics (c$,
			     "defaultFontName", "SansSerif",
			     "defaultFontStyle", "Plain",
			     "defaultFontSize", 16,
			     "frankMargin", 4);
    });
    //}; // see testtop.js



})();
